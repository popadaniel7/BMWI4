
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018358  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e0  080184f8  080184f8  000284f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018cd8  08018cd8  000300d0  2**0
                  CONTENTS
  4 .ARM          00000008  08018cd8  08018cd8  00028cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018ce0  08018ce0  000300d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018ce0  08018ce0  00028ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018ce4  08018ce4  00028ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08018ce8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e5a8  200000d0  08018db8  000300d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000e678  08018db8  0003e678  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039edd  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008c5a  00000000  00000000  00069fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ef0  00000000  00000000  00072c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002b00  00000000  00000000  00075b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028237  00000000  00000000  00078628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005170b  00000000  00000000  000a085f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba951  00000000  00000000  000f1f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ac8bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c3b4  00000000  00000000  001ac90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d0 	.word	0x200000d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080184e0 	.word	0x080184e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d4 	.word	0x200000d4
 80001dc:	080184e0 	.word	0x080184e0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <main>:
* Function: main														   		   *
* Description: Defined in the linker file as the start of the application.         *
* 		   	   Starts the application program.									   *
************************************************************************************/
int main()
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	/* Calls for system initialization. */
	SystemManager_Init();
 8000d74:	f016 fc6e 	bl	8017654 <SystemManager_Init>
	/* Calls for timer configuration for run time statistics. */
	configureTimerForRunTimeStats();
 8000d78:	f005 f8a8 	bl	8005ecc <configureTimerForRunTimeStats>
	/* Initialize the kernel of FreeRTOS. */
	osKernelInitialize();
 8000d7c:	f011 fb54 	bl	8012428 <osKernelInitialize>
	/* Initialize the FreeRTOS with all its objects.*/
	MX_FREERTOS_Init();
 8000d80:	f005 f97a 	bl	8006078 <MX_FREERTOS_Init>
	/* Start the kernel and the scheduler and FreeRTOS takes
	 * control of the application execution. */
	osKernelStart();
 8000d84:	f011 fb76 	bl	8012474 <osKernelStart>
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <Btc_DeInit>:
/***********************************************************************************
* Function: Btc_DeInit													   		   *
* Description: De-initialize the bluetooth communication application.		 	   *
************************************************************************************/
StdReturnType Btc_DeInit()
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
	return E_OK;
 8000d92:	2300      	movs	r3, #0
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <Btc_RequestState>:
/***********************************************************************************
* Function: Btc_RequestState													   *
* Description: Process bluetooth command for Request state 					       *
************************************************************************************/
VOID Btc_RequestState()
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	if(Btc_ReceivedDataOnBluetooth == 99)
 8000da4:	4ba0      	ldr	r3, [pc, #640]	; (8001028 <Btc_RequestState+0x288>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b63      	cmp	r3, #99	; 0x63
 8000daa:	d101      	bne.n	8000db0 <Btc_RequestState+0x10>
	{
		SystemManager_PerformReset();
 8000dac:	f016 fca8 	bl	8017700 <SystemManager_PerformReset>
	else
	{
		/* do nothing */
	}

	if(Btc_ReceivedDataOnBluetooth == 90)
 8000db0:	4b9d      	ldr	r3, [pc, #628]	; (8001028 <Btc_RequestState+0x288>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b5a      	cmp	r3, #90	; 0x5a
 8000db6:	f040 8258 	bne.w	800126a <Btc_RequestState+0x4ca>
	{
		Btc_DtcMessageLength = strlen(Btc_DtcMessage);
 8000dba:	4b9c      	ldr	r3, [pc, #624]	; (800102c <Btc_RequestState+0x28c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fa0e 	bl	80001e0 <strlen>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b99      	ldr	r3, [pc, #612]	; (8001030 <Btc_RequestState+0x290>)
 8000dca:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcMessage, Btc_DtcMessageLength);
 8000dcc:	4b97      	ldr	r3, [pc, #604]	; (800102c <Btc_RequestState+0x28c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a97      	ldr	r2, [pc, #604]	; (8001030 <Btc_RequestState+0x290>)
 8000dd2:	8812      	ldrh	r2, [r2, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4897      	ldr	r0, [pc, #604]	; (8001034 <Btc_RequestState+0x294>)
 8000dd8:	f00e fcd2 	bl	800f780 <HAL_UART_Transmit_IT>
		Btc_DtcDescriptionLength1 = strlen(Btc_DtcLowBeamLeft);
 8000ddc:	4b96      	ldr	r3, [pc, #600]	; (8001038 <Btc_RequestState+0x298>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff f9fd 	bl	80001e0 <strlen>
 8000de6:	4603      	mov	r3, r0
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	4b94      	ldr	r3, [pc, #592]	; (800103c <Btc_RequestState+0x29c>)
 8000dec:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength2 = strlen(Btc_DtcLowBeamRight);
 8000dee:	4b94      	ldr	r3, [pc, #592]	; (8001040 <Btc_RequestState+0x2a0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff f9f4 	bl	80001e0 <strlen>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	4b91      	ldr	r3, [pc, #580]	; (8001044 <Btc_RequestState+0x2a4>)
 8000dfe:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength3 = strlen(Btc_DtcRearPositionLightLeft);
 8000e00:	4b91      	ldr	r3, [pc, #580]	; (8001048 <Btc_RequestState+0x2a8>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff f9eb 	bl	80001e0 <strlen>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	4b8f      	ldr	r3, [pc, #572]	; (800104c <Btc_RequestState+0x2ac>)
 8000e10:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength4 = strlen(Btc_DtcRearPositionLightRight);
 8000e12:	4b8f      	ldr	r3, [pc, #572]	; (8001050 <Btc_RequestState+0x2b0>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff f9e2 	bl	80001e0 <strlen>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	4b8c      	ldr	r3, [pc, #560]	; (8001054 <Btc_RequestState+0x2b4>)
 8000e22:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength5 = strlen(Btc_DtcRightTurnSignalFront);
 8000e24:	4b8c      	ldr	r3, [pc, #560]	; (8001058 <Btc_RequestState+0x2b8>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff f9d9 	bl	80001e0 <strlen>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	4b8a      	ldr	r3, [pc, #552]	; (800105c <Btc_RequestState+0x2bc>)
 8000e34:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength6 = strlen(Btc_DtcLeftTurnSignalFront);
 8000e36:	4b8a      	ldr	r3, [pc, #552]	; (8001060 <Btc_RequestState+0x2c0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff f9d0 	bl	80001e0 <strlen>
 8000e40:	4603      	mov	r3, r0
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	4b87      	ldr	r3, [pc, #540]	; (8001064 <Btc_RequestState+0x2c4>)
 8000e46:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength7 = strlen(Btc_DtcLeftTurnSignalRear);
 8000e48:	4b87      	ldr	r3, [pc, #540]	; (8001068 <Btc_RequestState+0x2c8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff f9c7 	bl	80001e0 <strlen>
 8000e52:	4603      	mov	r3, r0
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	4b85      	ldr	r3, [pc, #532]	; (800106c <Btc_RequestState+0x2cc>)
 8000e58:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength8 = strlen(Btc_DtcRightBrakeLight);
 8000e5a:	4b85      	ldr	r3, [pc, #532]	; (8001070 <Btc_RequestState+0x2d0>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff f9be 	bl	80001e0 <strlen>
 8000e64:	4603      	mov	r3, r0
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	4b82      	ldr	r3, [pc, #520]	; (8001074 <Btc_RequestState+0x2d4>)
 8000e6a:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength9 = strlen(Btc_DtcLeftBrakeLight);
 8000e6c:	4b82      	ldr	r3, [pc, #520]	; (8001078 <Btc_RequestState+0x2d8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff f9b5 	bl	80001e0 <strlen>
 8000e76:	4603      	mov	r3, r0
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	4b80      	ldr	r3, [pc, #512]	; (800107c <Btc_RequestState+0x2dc>)
 8000e7c:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength10 = strlen(Btc_DtcLightSensor);
 8000e7e:	4b80      	ldr	r3, [pc, #512]	; (8001080 <Btc_RequestState+0x2e0>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff f9ac 	bl	80001e0 <strlen>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	4b7d      	ldr	r3, [pc, #500]	; (8001084 <Btc_RequestState+0x2e4>)
 8000e8e:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength11 = strlen(Btc_DtcVibrationSensor);
 8000e90:	4b7d      	ldr	r3, [pc, #500]	; (8001088 <Btc_RequestState+0x2e8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff f9a3 	bl	80001e0 <strlen>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	4b7b      	ldr	r3, [pc, #492]	; (800108c <Btc_RequestState+0x2ec>)
 8000ea0:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength12 = strlen(Btc_DtcTemperatureSensor);
 8000ea2:	4b7b      	ldr	r3, [pc, #492]	; (8001090 <Btc_RequestState+0x2f0>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff f99a 	bl	80001e0 <strlen>
 8000eac:	4603      	mov	r3, r0
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b78      	ldr	r3, [pc, #480]	; (8001094 <Btc_RequestState+0x2f4>)
 8000eb2:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength13 = strlen(Btc_DtcRearParkingSensor);
 8000eb4:	4b78      	ldr	r3, [pc, #480]	; (8001098 <Btc_RequestState+0x2f8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff f991 	bl	80001e0 <strlen>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	4b76      	ldr	r3, [pc, #472]	; (800109c <Btc_RequestState+0x2fc>)
 8000ec4:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength14 = strlen(Btc_DtcFrontParkingSensor);
 8000ec6:	4b76      	ldr	r3, [pc, #472]	; (80010a0 <Btc_RequestState+0x300>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff f988 	bl	80001e0 <strlen>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	4b73      	ldr	r3, [pc, #460]	; (80010a4 <Btc_RequestState+0x304>)
 8000ed6:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength15 = strlen(Btc_DtcLcd);
 8000ed8:	4b73      	ldr	r3, [pc, #460]	; (80010a8 <Btc_RequestState+0x308>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff f97f 	bl	80001e0 <strlen>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	4b71      	ldr	r3, [pc, #452]	; (80010ac <Btc_RequestState+0x30c>)
 8000ee8:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength16 = strlen(Btc_DtcHardware);
 8000eea:	4b71      	ldr	r3, [pc, #452]	; (80010b0 <Btc_RequestState+0x310>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff f976 	bl	80001e0 <strlen>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	4b6e      	ldr	r3, [pc, #440]	; (80010b4 <Btc_RequestState+0x314>)
 8000efa:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength17 = strlen(Btc_DtcBtc);
 8000efc:	4b6e      	ldr	r3, [pc, #440]	; (80010b8 <Btc_RequestState+0x318>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff f96d 	bl	80001e0 <strlen>
 8000f06:	4603      	mov	r3, r0
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	4b6c      	ldr	r3, [pc, #432]	; (80010bc <Btc_RequestState+0x31c>)
 8000f0c:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength18 = strlen(Btc_DtcMem);
 8000f0e:	4b6c      	ldr	r3, [pc, #432]	; (80010c0 <Btc_RequestState+0x320>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff f964 	bl	80001e0 <strlen>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	4b69      	ldr	r3, [pc, #420]	; (80010c4 <Btc_RequestState+0x324>)
 8000f1e:	801a      	strh	r2, [r3, #0]

		if(Dem_DtcArray[16] != 0)
 8000f20:	4b69      	ldr	r3, [pc, #420]	; (80010c8 <Btc_RequestState+0x328>)
 8000f22:	7c1b      	ldrb	r3, [r3, #16]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d00d      	beq.n	8000f44 <Btc_RequestState+0x1a4>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcBtc, Btc_DtcDescriptionLength17) == HAL_BUSY);
 8000f28:	bf00      	nop
 8000f2a:	4b63      	ldr	r3, [pc, #396]	; (80010b8 <Btc_RequestState+0x318>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a63      	ldr	r2, [pc, #396]	; (80010bc <Btc_RequestState+0x31c>)
 8000f30:	8812      	ldrh	r2, [r2, #0]
 8000f32:	4619      	mov	r1, r3
 8000f34:	483f      	ldr	r0, [pc, #252]	; (8001034 <Btc_RequestState+0x294>)
 8000f36:	f00e fc23 	bl	800f780 <HAL_UART_Transmit_IT>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d0f4      	beq.n	8000f2a <Btc_RequestState+0x18a>
			Rte_Runnable_Wdg_MainFunction();
 8000f40:	f015 f8ba 	bl	80160b8 <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[17] != 0)
 8000f44:	4b60      	ldr	r3, [pc, #384]	; (80010c8 <Btc_RequestState+0x328>)
 8000f46:	7c5b      	ldrb	r3, [r3, #17]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d00d      	beq.n	8000f68 <Btc_RequestState+0x1c8>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcMem, Btc_DtcDescriptionLength18) == HAL_BUSY);
 8000f4c:	bf00      	nop
 8000f4e:	4b5c      	ldr	r3, [pc, #368]	; (80010c0 <Btc_RequestState+0x320>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a5c      	ldr	r2, [pc, #368]	; (80010c4 <Btc_RequestState+0x324>)
 8000f54:	8812      	ldrh	r2, [r2, #0]
 8000f56:	4619      	mov	r1, r3
 8000f58:	4836      	ldr	r0, [pc, #216]	; (8001034 <Btc_RequestState+0x294>)
 8000f5a:	f00e fc11 	bl	800f780 <HAL_UART_Transmit_IT>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d0f4      	beq.n	8000f4e <Btc_RequestState+0x1ae>
			Rte_Runnable_Wdg_MainFunction();
 8000f64:	f015 f8a8 	bl	80160b8 <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[0] != 0)
 8000f68:	4b57      	ldr	r3, [pc, #348]	; (80010c8 <Btc_RequestState+0x328>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00d      	beq.n	8000f8c <Btc_RequestState+0x1ec>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcLowBeamLeft, Btc_DtcDescriptionLength1) == HAL_BUSY);
 8000f70:	bf00      	nop
 8000f72:	4b31      	ldr	r3, [pc, #196]	; (8001038 <Btc_RequestState+0x298>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a31      	ldr	r2, [pc, #196]	; (800103c <Btc_RequestState+0x29c>)
 8000f78:	8812      	ldrh	r2, [r2, #0]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	482d      	ldr	r0, [pc, #180]	; (8001034 <Btc_RequestState+0x294>)
 8000f7e:	f00e fbff 	bl	800f780 <HAL_UART_Transmit_IT>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d0f4      	beq.n	8000f72 <Btc_RequestState+0x1d2>
			Rte_Runnable_Wdg_MainFunction();
 8000f88:	f015 f896 	bl	80160b8 <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[1] != 0)
 8000f8c:	4b4e      	ldr	r3, [pc, #312]	; (80010c8 <Btc_RequestState+0x328>)
 8000f8e:	785b      	ldrb	r3, [r3, #1]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d00d      	beq.n	8000fb0 <Btc_RequestState+0x210>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcLowBeamRight, Btc_DtcDescriptionLength2) == HAL_BUSY);
 8000f94:	bf00      	nop
 8000f96:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <Btc_RequestState+0x2a0>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a2a      	ldr	r2, [pc, #168]	; (8001044 <Btc_RequestState+0x2a4>)
 8000f9c:	8812      	ldrh	r2, [r2, #0]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4824      	ldr	r0, [pc, #144]	; (8001034 <Btc_RequestState+0x294>)
 8000fa2:	f00e fbed 	bl	800f780 <HAL_UART_Transmit_IT>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d0f4      	beq.n	8000f96 <Btc_RequestState+0x1f6>
			Rte_Runnable_Wdg_MainFunction();
 8000fac:	f015 f884 	bl	80160b8 <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[2] != 0)
 8000fb0:	4b45      	ldr	r3, [pc, #276]	; (80010c8 <Btc_RequestState+0x328>)
 8000fb2:	789b      	ldrb	r3, [r3, #2]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00d      	beq.n	8000fd4 <Btc_RequestState+0x234>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcRearPositionLightLeft, Btc_DtcDescriptionLength3) == HAL_BUSY);
 8000fb8:	bf00      	nop
 8000fba:	4b23      	ldr	r3, [pc, #140]	; (8001048 <Btc_RequestState+0x2a8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a23      	ldr	r2, [pc, #140]	; (800104c <Btc_RequestState+0x2ac>)
 8000fc0:	8812      	ldrh	r2, [r2, #0]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	481b      	ldr	r0, [pc, #108]	; (8001034 <Btc_RequestState+0x294>)
 8000fc6:	f00e fbdb 	bl	800f780 <HAL_UART_Transmit_IT>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d0f4      	beq.n	8000fba <Btc_RequestState+0x21a>
			Rte_Runnable_Wdg_MainFunction();
 8000fd0:	f015 f872 	bl	80160b8 <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[3] != 0)
 8000fd4:	4b3c      	ldr	r3, [pc, #240]	; (80010c8 <Btc_RequestState+0x328>)
 8000fd6:	78db      	ldrb	r3, [r3, #3]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00d      	beq.n	8000ff8 <Btc_RequestState+0x258>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcRearPositionLightRight, Btc_DtcDescriptionLength4) == HAL_BUSY);
 8000fdc:	bf00      	nop
 8000fde:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <Btc_RequestState+0x2b0>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a1c      	ldr	r2, [pc, #112]	; (8001054 <Btc_RequestState+0x2b4>)
 8000fe4:	8812      	ldrh	r2, [r2, #0]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4812      	ldr	r0, [pc, #72]	; (8001034 <Btc_RequestState+0x294>)
 8000fea:	f00e fbc9 	bl	800f780 <HAL_UART_Transmit_IT>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d0f4      	beq.n	8000fde <Btc_RequestState+0x23e>
			Rte_Runnable_Wdg_MainFunction();
 8000ff4:	f015 f860 	bl	80160b8 <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[4] != 0)
 8000ff8:	4b33      	ldr	r3, [pc, #204]	; (80010c8 <Btc_RequestState+0x328>)
 8000ffa:	791b      	ldrb	r3, [r3, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00d      	beq.n	800101c <Btc_RequestState+0x27c>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcRightTurnSignalFront, Btc_DtcDescriptionLength5) == HAL_BUSY);
 8001000:	bf00      	nop
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <Btc_RequestState+0x2b8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a15      	ldr	r2, [pc, #84]	; (800105c <Btc_RequestState+0x2bc>)
 8001008:	8812      	ldrh	r2, [r2, #0]
 800100a:	4619      	mov	r1, r3
 800100c:	4809      	ldr	r0, [pc, #36]	; (8001034 <Btc_RequestState+0x294>)
 800100e:	f00e fbb7 	bl	800f780 <HAL_UART_Transmit_IT>
 8001012:	4603      	mov	r3, r0
 8001014:	2b02      	cmp	r3, #2
 8001016:	d0f4      	beq.n	8001002 <Btc_RequestState+0x262>
			Rte_Runnable_Wdg_MainFunction();
 8001018:	f015 f84e 	bl	80160b8 <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[6] != 0)
 800101c:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <Btc_RequestState+0x328>)
 800101e:	799b      	ldrb	r3, [r3, #6]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d061      	beq.n	80010e8 <Btc_RequestState+0x348>
 8001024:	e052      	b.n	80010cc <Btc_RequestState+0x32c>
 8001026:	bf00      	nop
 8001028:	200000f6 	.word	0x200000f6
 800102c:	20000000 	.word	0x20000000
 8001030:	20000112 	.word	0x20000112
 8001034:	20000b90 	.word	0x20000b90
 8001038:	20000004 	.word	0x20000004
 800103c:	20000114 	.word	0x20000114
 8001040:	20000008 	.word	0x20000008
 8001044:	20000116 	.word	0x20000116
 8001048:	2000000c 	.word	0x2000000c
 800104c:	20000118 	.word	0x20000118
 8001050:	20000010 	.word	0x20000010
 8001054:	2000011a 	.word	0x2000011a
 8001058:	20000014 	.word	0x20000014
 800105c:	2000011c 	.word	0x2000011c
 8001060:	20000018 	.word	0x20000018
 8001064:	2000011e 	.word	0x2000011e
 8001068:	2000001c 	.word	0x2000001c
 800106c:	20000120 	.word	0x20000120
 8001070:	20000024 	.word	0x20000024
 8001074:	20000122 	.word	0x20000122
 8001078:	20000020 	.word	0x20000020
 800107c:	20000124 	.word	0x20000124
 8001080:	20000028 	.word	0x20000028
 8001084:	20000126 	.word	0x20000126
 8001088:	2000002c 	.word	0x2000002c
 800108c:	20000128 	.word	0x20000128
 8001090:	20000030 	.word	0x20000030
 8001094:	2000012a 	.word	0x2000012a
 8001098:	20000034 	.word	0x20000034
 800109c:	2000012c 	.word	0x2000012c
 80010a0:	20000038 	.word	0x20000038
 80010a4:	2000012e 	.word	0x2000012e
 80010a8:	2000003c 	.word	0x2000003c
 80010ac:	20000130 	.word	0x20000130
 80010b0:	20000040 	.word	0x20000040
 80010b4:	20000132 	.word	0x20000132
 80010b8:	20000044 	.word	0x20000044
 80010bc:	20000134 	.word	0x20000134
 80010c0:	20000048 	.word	0x20000048
 80010c4:	20000136 	.word	0x20000136
 80010c8:	20000c30 	.word	0x20000c30
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcLeftTurnSignalFront, Btc_DtcDescriptionLength6) == HAL_BUSY);
 80010cc:	bf00      	nop
 80010ce:	4b69      	ldr	r3, [pc, #420]	; (8001274 <Btc_RequestState+0x4d4>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a69      	ldr	r2, [pc, #420]	; (8001278 <Btc_RequestState+0x4d8>)
 80010d4:	8812      	ldrh	r2, [r2, #0]
 80010d6:	4619      	mov	r1, r3
 80010d8:	4868      	ldr	r0, [pc, #416]	; (800127c <Btc_RequestState+0x4dc>)
 80010da:	f00e fb51 	bl	800f780 <HAL_UART_Transmit_IT>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d0f4      	beq.n	80010ce <Btc_RequestState+0x32e>
			Rte_Runnable_Wdg_MainFunction();
 80010e4:	f014 ffe8 	bl	80160b8 <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[7] != 0)
 80010e8:	4b65      	ldr	r3, [pc, #404]	; (8001280 <Btc_RequestState+0x4e0>)
 80010ea:	79db      	ldrb	r3, [r3, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00d      	beq.n	800110c <Btc_RequestState+0x36c>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcLeftTurnSignalRear, Btc_DtcDescriptionLength7) == HAL_BUSY);
 80010f0:	bf00      	nop
 80010f2:	4b64      	ldr	r3, [pc, #400]	; (8001284 <Btc_RequestState+0x4e4>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a64      	ldr	r2, [pc, #400]	; (8001288 <Btc_RequestState+0x4e8>)
 80010f8:	8812      	ldrh	r2, [r2, #0]
 80010fa:	4619      	mov	r1, r3
 80010fc:	485f      	ldr	r0, [pc, #380]	; (800127c <Btc_RequestState+0x4dc>)
 80010fe:	f00e fb3f 	bl	800f780 <HAL_UART_Transmit_IT>
 8001102:	4603      	mov	r3, r0
 8001104:	2b02      	cmp	r3, #2
 8001106:	d0f4      	beq.n	80010f2 <Btc_RequestState+0x352>
			Rte_Runnable_Wdg_MainFunction();
 8001108:	f014 ffd6 	bl	80160b8 <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[8] != 0)
 800110c:	4b5c      	ldr	r3, [pc, #368]	; (8001280 <Btc_RequestState+0x4e0>)
 800110e:	7a1b      	ldrb	r3, [r3, #8]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00d      	beq.n	8001130 <Btc_RequestState+0x390>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcRightBrakeLight, Btc_DtcDescriptionLength8) == HAL_BUSY);
 8001114:	bf00      	nop
 8001116:	4b5d      	ldr	r3, [pc, #372]	; (800128c <Btc_RequestState+0x4ec>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a5d      	ldr	r2, [pc, #372]	; (8001290 <Btc_RequestState+0x4f0>)
 800111c:	8812      	ldrh	r2, [r2, #0]
 800111e:	4619      	mov	r1, r3
 8001120:	4856      	ldr	r0, [pc, #344]	; (800127c <Btc_RequestState+0x4dc>)
 8001122:	f00e fb2d 	bl	800f780 <HAL_UART_Transmit_IT>
 8001126:	4603      	mov	r3, r0
 8001128:	2b02      	cmp	r3, #2
 800112a:	d0f4      	beq.n	8001116 <Btc_RequestState+0x376>
			Rte_Runnable_Wdg_MainFunction();
 800112c:	f014 ffc4 	bl	80160b8 <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[9] != 0)
 8001130:	4b53      	ldr	r3, [pc, #332]	; (8001280 <Btc_RequestState+0x4e0>)
 8001132:	7a5b      	ldrb	r3, [r3, #9]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00d      	beq.n	8001154 <Btc_RequestState+0x3b4>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcLeftBrakeLight, Btc_DtcDescriptionLength9) == HAL_BUSY);
 8001138:	bf00      	nop
 800113a:	4b56      	ldr	r3, [pc, #344]	; (8001294 <Btc_RequestState+0x4f4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a56      	ldr	r2, [pc, #344]	; (8001298 <Btc_RequestState+0x4f8>)
 8001140:	8812      	ldrh	r2, [r2, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	484d      	ldr	r0, [pc, #308]	; (800127c <Btc_RequestState+0x4dc>)
 8001146:	f00e fb1b 	bl	800f780 <HAL_UART_Transmit_IT>
 800114a:	4603      	mov	r3, r0
 800114c:	2b02      	cmp	r3, #2
 800114e:	d0f4      	beq.n	800113a <Btc_RequestState+0x39a>
			Rte_Runnable_Wdg_MainFunction();
 8001150:	f014 ffb2 	bl	80160b8 <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[10] != 0)
 8001154:	4b4a      	ldr	r3, [pc, #296]	; (8001280 <Btc_RequestState+0x4e0>)
 8001156:	7a9b      	ldrb	r3, [r3, #10]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d00d      	beq.n	8001178 <Btc_RequestState+0x3d8>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcLightSensor, Btc_DtcDescriptionLength10) == HAL_BUSY);
 800115c:	bf00      	nop
 800115e:	4b4f      	ldr	r3, [pc, #316]	; (800129c <Btc_RequestState+0x4fc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a4f      	ldr	r2, [pc, #316]	; (80012a0 <Btc_RequestState+0x500>)
 8001164:	8812      	ldrh	r2, [r2, #0]
 8001166:	4619      	mov	r1, r3
 8001168:	4844      	ldr	r0, [pc, #272]	; (800127c <Btc_RequestState+0x4dc>)
 800116a:	f00e fb09 	bl	800f780 <HAL_UART_Transmit_IT>
 800116e:	4603      	mov	r3, r0
 8001170:	2b02      	cmp	r3, #2
 8001172:	d0f4      	beq.n	800115e <Btc_RequestState+0x3be>
			Rte_Runnable_Wdg_MainFunction();
 8001174:	f014 ffa0 	bl	80160b8 <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[11] != 0)
 8001178:	4b41      	ldr	r3, [pc, #260]	; (8001280 <Btc_RequestState+0x4e0>)
 800117a:	7adb      	ldrb	r3, [r3, #11]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00d      	beq.n	800119c <Btc_RequestState+0x3fc>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcVibrationSensor, Btc_DtcDescriptionLength11) == HAL_BUSY);
 8001180:	bf00      	nop
 8001182:	4b48      	ldr	r3, [pc, #288]	; (80012a4 <Btc_RequestState+0x504>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a48      	ldr	r2, [pc, #288]	; (80012a8 <Btc_RequestState+0x508>)
 8001188:	8812      	ldrh	r2, [r2, #0]
 800118a:	4619      	mov	r1, r3
 800118c:	483b      	ldr	r0, [pc, #236]	; (800127c <Btc_RequestState+0x4dc>)
 800118e:	f00e faf7 	bl	800f780 <HAL_UART_Transmit_IT>
 8001192:	4603      	mov	r3, r0
 8001194:	2b02      	cmp	r3, #2
 8001196:	d0f4      	beq.n	8001182 <Btc_RequestState+0x3e2>
			Rte_Runnable_Wdg_MainFunction();
 8001198:	f014 ff8e 	bl	80160b8 <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[13] != 0)
 800119c:	4b38      	ldr	r3, [pc, #224]	; (8001280 <Btc_RequestState+0x4e0>)
 800119e:	7b5b      	ldrb	r3, [r3, #13]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00d      	beq.n	80011c0 <Btc_RequestState+0x420>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcTemperatureSensor, Btc_DtcDescriptionLength12) == HAL_BUSY);
 80011a4:	bf00      	nop
 80011a6:	4b41      	ldr	r3, [pc, #260]	; (80012ac <Btc_RequestState+0x50c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a41      	ldr	r2, [pc, #260]	; (80012b0 <Btc_RequestState+0x510>)
 80011ac:	8812      	ldrh	r2, [r2, #0]
 80011ae:	4619      	mov	r1, r3
 80011b0:	4832      	ldr	r0, [pc, #200]	; (800127c <Btc_RequestState+0x4dc>)
 80011b2:	f00e fae5 	bl	800f780 <HAL_UART_Transmit_IT>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d0f4      	beq.n	80011a6 <Btc_RequestState+0x406>
			Rte_Runnable_Wdg_MainFunction();
 80011bc:	f014 ff7c 	bl	80160b8 <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[14] != 0)
 80011c0:	4b2f      	ldr	r3, [pc, #188]	; (8001280 <Btc_RequestState+0x4e0>)
 80011c2:	7b9b      	ldrb	r3, [r3, #14]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00d      	beq.n	80011e4 <Btc_RequestState+0x444>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcRearParkingSensor, Btc_DtcDescriptionLength13) == HAL_BUSY);
 80011c8:	bf00      	nop
 80011ca:	4b3a      	ldr	r3, [pc, #232]	; (80012b4 <Btc_RequestState+0x514>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a3a      	ldr	r2, [pc, #232]	; (80012b8 <Btc_RequestState+0x518>)
 80011d0:	8812      	ldrh	r2, [r2, #0]
 80011d2:	4619      	mov	r1, r3
 80011d4:	4829      	ldr	r0, [pc, #164]	; (800127c <Btc_RequestState+0x4dc>)
 80011d6:	f00e fad3 	bl	800f780 <HAL_UART_Transmit_IT>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d0f4      	beq.n	80011ca <Btc_RequestState+0x42a>
			Rte_Runnable_Wdg_MainFunction();
 80011e0:	f014 ff6a 	bl	80160b8 <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[15] != 0)
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <Btc_RequestState+0x4e0>)
 80011e6:	7bdb      	ldrb	r3, [r3, #15]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00d      	beq.n	8001208 <Btc_RequestState+0x468>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcFrontParkingSensor, Btc_DtcDescriptionLength14) == HAL_BUSY);
 80011ec:	bf00      	nop
 80011ee:	4b33      	ldr	r3, [pc, #204]	; (80012bc <Btc_RequestState+0x51c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a33      	ldr	r2, [pc, #204]	; (80012c0 <Btc_RequestState+0x520>)
 80011f4:	8812      	ldrh	r2, [r2, #0]
 80011f6:	4619      	mov	r1, r3
 80011f8:	4820      	ldr	r0, [pc, #128]	; (800127c <Btc_RequestState+0x4dc>)
 80011fa:	f00e fac1 	bl	800f780 <HAL_UART_Transmit_IT>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b02      	cmp	r3, #2
 8001202:	d0f4      	beq.n	80011ee <Btc_RequestState+0x44e>
			Rte_Runnable_Wdg_MainFunction();
 8001204:	f014 ff58 	bl	80160b8 <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[20] != 0)
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <Btc_RequestState+0x4e0>)
 800120a:	7d1b      	ldrb	r3, [r3, #20]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00d      	beq.n	800122c <Btc_RequestState+0x48c>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcLcd, Btc_DtcDescriptionLength15) == HAL_BUSY);
 8001210:	bf00      	nop
 8001212:	4b2c      	ldr	r3, [pc, #176]	; (80012c4 <Btc_RequestState+0x524>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a2c      	ldr	r2, [pc, #176]	; (80012c8 <Btc_RequestState+0x528>)
 8001218:	8812      	ldrh	r2, [r2, #0]
 800121a:	4619      	mov	r1, r3
 800121c:	4817      	ldr	r0, [pc, #92]	; (800127c <Btc_RequestState+0x4dc>)
 800121e:	f00e faaf 	bl	800f780 <HAL_UART_Transmit_IT>
 8001222:	4603      	mov	r3, r0
 8001224:	2b02      	cmp	r3, #2
 8001226:	d0f4      	beq.n	8001212 <Btc_RequestState+0x472>
			Rte_Runnable_Wdg_MainFunction();
 8001228:	f014 ff46 	bl	80160b8 <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[21] != 0 || Dem_DtcArray[22] != 0 || Dem_DtcArray[23] != 0)
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <Btc_RequestState+0x4e0>)
 800122e:	7d5b      	ldrb	r3, [r3, #21]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d107      	bne.n	8001244 <Btc_RequestState+0x4a4>
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <Btc_RequestState+0x4e0>)
 8001236:	7d9b      	ldrb	r3, [r3, #22]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d103      	bne.n	8001244 <Btc_RequestState+0x4a4>
 800123c:	4b10      	ldr	r3, [pc, #64]	; (8001280 <Btc_RequestState+0x4e0>)
 800123e:	7ddb      	ldrb	r3, [r3, #23]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00d      	beq.n	8001260 <Btc_RequestState+0x4c0>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcHardware, Btc_DtcDescriptionLength16) == HAL_BUSY);
 8001244:	bf00      	nop
 8001246:	4b21      	ldr	r3, [pc, #132]	; (80012cc <Btc_RequestState+0x52c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a21      	ldr	r2, [pc, #132]	; (80012d0 <Btc_RequestState+0x530>)
 800124c:	8812      	ldrh	r2, [r2, #0]
 800124e:	4619      	mov	r1, r3
 8001250:	480a      	ldr	r0, [pc, #40]	; (800127c <Btc_RequestState+0x4dc>)
 8001252:	f00e fa95 	bl	800f780 <HAL_UART_Transmit_IT>
 8001256:	4603      	mov	r3, r0
 8001258:	2b02      	cmp	r3, #2
 800125a:	d0f4      	beq.n	8001246 <Btc_RequestState+0x4a6>
			Rte_Runnable_Wdg_MainFunction();
 800125c:	f014 ff2c 	bl	80160b8 <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		Rte_Runnable_Wdg_MainFunction();
 8001260:	f014 ff2a 	bl	80160b8 <Rte_Runnable_Wdg_MainFunction>
		Btc_ReceivedDataOnBluetooth = 0;
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <Btc_RequestState+0x534>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	Btc_ApplState = BTC_RX_STATE;
 800126a:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <Btc_RequestState+0x538>)
 800126c:	2202      	movs	r2, #2
 800126e:	701a      	strb	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000018 	.word	0x20000018
 8001278:	2000011e 	.word	0x2000011e
 800127c:	20000b90 	.word	0x20000b90
 8001280:	20000c30 	.word	0x20000c30
 8001284:	2000001c 	.word	0x2000001c
 8001288:	20000120 	.word	0x20000120
 800128c:	20000024 	.word	0x20000024
 8001290:	20000122 	.word	0x20000122
 8001294:	20000020 	.word	0x20000020
 8001298:	20000124 	.word	0x20000124
 800129c:	20000028 	.word	0x20000028
 80012a0:	20000126 	.word	0x20000126
 80012a4:	2000002c 	.word	0x2000002c
 80012a8:	20000128 	.word	0x20000128
 80012ac:	20000030 	.word	0x20000030
 80012b0:	2000012a 	.word	0x2000012a
 80012b4:	20000034 	.word	0x20000034
 80012b8:	2000012c 	.word	0x2000012c
 80012bc:	20000038 	.word	0x20000038
 80012c0:	2000012e 	.word	0x2000012e
 80012c4:	2000003c 	.word	0x2000003c
 80012c8:	20000130 	.word	0x20000130
 80012cc:	20000040 	.word	0x20000040
 80012d0:	20000132 	.word	0x20000132
 80012d4:	200000f6 	.word	0x200000f6
 80012d8:	200000ec 	.word	0x200000ec

080012dc <Btc_Init>:
/***********************************************************************************
* Function: Btc_Init													   		   *
* Description: Initialize the bluetooth communication application.		 		   *
************************************************************************************/
StdReturnType Btc_Init()
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
	Btc_ReceivedDataOnBluetooth 	= STD_LOW;
 80012e0:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <Btc_Init+0x78>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
	Btc_CenLoc						= STD_LOW;
 80012e6:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <Btc_Init+0x7c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
	Btc_LightSwitch					= STD_LOW;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <Btc_Init+0x80>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
	Btc_HighBeam					= STD_LOW;
 80012f2:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <Btc_Init+0x84>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
	Btc_FlashHighBeam				= STD_LOW;
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <Btc_Init+0x88>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
	Btc_FrontFogLight				= STD_LOW;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <Btc_Init+0x8c>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
	Btc_TurnSignalLeft				= STD_LOW;
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <Btc_Init+0x90>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
	Btc_TurnSignalRight				= STD_LOW;
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <Btc_Init+0x94>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
	Btc_HazardLight					= STD_LOW;
 8001310:	4b18      	ldr	r3, [pc, #96]	; (8001374 <Btc_Init+0x98>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
	Btc_BrakeLight					= STD_LOW;
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <Btc_Init+0x9c>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
	Btc_RearFogLight				= STD_LOW;
 800131c:	4b17      	ldr	r3, [pc, #92]	; (800137c <Btc_Init+0xa0>)
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
	Btc_ReverseLight				= STD_LOW;
 8001322:	4b17      	ldr	r3, [pc, #92]	; (8001380 <Btc_Init+0xa4>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
	Btc_IntLights					= STD_LOW;
 8001328:	4b16      	ldr	r3, [pc, #88]	; (8001384 <Btc_Init+0xa8>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
	Btc_IgnitionStepOne 			= STD_LOW;
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <Btc_Init+0xac>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
	Btc_IgnitionStepTwo 			= STD_LOW;
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <Btc_Init+0xb0>)
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
	Btc_IgnitionTurnOff				= STD_HIGH;
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <Btc_Init+0xb4>)
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
	Btc_ApplState					= BTC_INIT_STATE;
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <Btc_Init+0xb8>)
 8001342:	2201      	movs	r2, #1
 8001344:	701a      	strb	r2, [r3, #0]
	return E_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	200000f6 	.word	0x200000f6
 8001358:	200000f7 	.word	0x200000f7
 800135c:	200000f8 	.word	0x200000f8
 8001360:	200000f9 	.word	0x200000f9
 8001364:	200000fa 	.word	0x200000fa
 8001368:	200000fb 	.word	0x200000fb
 800136c:	200000fc 	.word	0x200000fc
 8001370:	200000fd 	.word	0x200000fd
 8001374:	200000fe 	.word	0x200000fe
 8001378:	200000ff 	.word	0x200000ff
 800137c:	20000100 	.word	0x20000100
 8001380:	20000101 	.word	0x20000101
 8001384:	20000102 	.word	0x20000102
 8001388:	20000103 	.word	0x20000103
 800138c:	20000104 	.word	0x20000104
 8001390:	20000105 	.word	0x20000105
 8001394:	200000ec 	.word	0x200000ec

08001398 <Btc_RxVal>:
/***********************************************************************************
* Function: Btc_RxVal													   		   *
* Description: Process bluetooth commands.	 		   							   *
************************************************************************************/
VOID Btc_RxVal()
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	if(Rte_Call_Crc_R_CrcPort_Crc_VerifyUartData() == E_OK)
 800139c:	f015 f8d0 	bl	8016540 <Crc_VerifyUartData>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f040 83a5 	bne.w	8001af2 <Btc_RxVal+0x75a>
	{
		if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80013a8:	4bbc      	ldr	r3, [pc, #752]	; (800169c <Btc_RxVal+0x304>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d11d      	bne.n	80013ec <Btc_RxVal+0x54>
		{
			if(Btc_ReceivedDataOnBluetooth >= BTC_RX_HVAC_FANVALUE_MIN &&
 80013b0:	4bbb      	ldr	r3, [pc, #748]	; (80016a0 <Btc_RxVal+0x308>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b1d      	cmp	r3, #29
 80013b6:	d90a      	bls.n	80013ce <Btc_RxVal+0x36>
				Btc_ReceivedDataOnBluetooth <= BTC_RX_HVAC_FANVALUE_MAX)
 80013b8:	4bb9      	ldr	r3, [pc, #740]	; (80016a0 <Btc_RxVal+0x308>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
			if(Btc_ReceivedDataOnBluetooth >= BTC_RX_HVAC_FANVALUE_MIN &&
 80013bc:	2b25      	cmp	r3, #37	; 0x25
 80013be:	d806      	bhi.n	80013ce <Btc_RxVal+0x36>
			{
				Btc_FanValue = Btc_ReceivedDataOnBluetooth;
 80013c0:	4bb7      	ldr	r3, [pc, #732]	; (80016a0 <Btc_RxVal+0x308>)
 80013c2:	781a      	ldrb	r2, [r3, #0]
 80013c4:	4bb7      	ldr	r3, [pc, #732]	; (80016a4 <Btc_RxVal+0x30c>)
 80013c6:	701a      	strb	r2, [r3, #0]
				Rte_Write_Hvac_HvacPort_Hvac_FanValue(&Btc_FanValue);
 80013c8:	48b6      	ldr	r0, [pc, #728]	; (80016a4 <Btc_RxVal+0x30c>)
 80013ca:	f014 fc5f 	bl	8015c8c <Rte_Write_Hvac_HvacPort_Hvac_FanValue>
			else
			{
				/* do nothing */
			}

			if(Btc_ReceivedDataOnBluetooth >= BTC_RX_HVAC_TEMPERATUREVALUE_MIN &&
 80013ce:	4bb4      	ldr	r3, [pc, #720]	; (80016a0 <Btc_RxVal+0x308>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b25      	cmp	r3, #37	; 0x25
 80013d4:	d90a      	bls.n	80013ec <Btc_RxVal+0x54>
					Btc_ReceivedDataOnBluetooth <= BTC_RX_HVAC_TEMPERATUREVALUE_MAX)
 80013d6:	4bb2      	ldr	r3, [pc, #712]	; (80016a0 <Btc_RxVal+0x308>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
			if(Btc_ReceivedDataOnBluetooth >= BTC_RX_HVAC_TEMPERATUREVALUE_MIN &&
 80013da:	2b36      	cmp	r3, #54	; 0x36
 80013dc:	d806      	bhi.n	80013ec <Btc_RxVal+0x54>
			{
				Btc_TemperatureValue = Btc_ReceivedDataOnBluetooth;
 80013de:	4bb0      	ldr	r3, [pc, #704]	; (80016a0 <Btc_RxVal+0x308>)
 80013e0:	781a      	ldrb	r2, [r3, #0]
 80013e2:	4bb1      	ldr	r3, [pc, #708]	; (80016a8 <Btc_RxVal+0x310>)
 80013e4:	701a      	strb	r2, [r3, #0]
				Rte_Write_Hvac_HvacPort_Hvac_TemperatureValue(&Btc_TemperatureValue);
 80013e6:	48b0      	ldr	r0, [pc, #704]	; (80016a8 <Btc_RxVal+0x310>)
 80013e8:	f014 fc62 	bl	8015cb0 <Rte_Write_Hvac_HvacPort_Hvac_TemperatureValue>
		{
			/* do nothing */
		}

		/* Process the command on each case and update the respective variable. */
		switch(Btc_ReceivedDataOnBluetooth)
 80013ec:	4bac      	ldr	r3, [pc, #688]	; (80016a0 <Btc_RxVal+0x308>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	2b46      	cmp	r3, #70	; 0x46
 80013f4:	f200 8324 	bhi.w	8001a40 <Btc_RxVal+0x6a8>
 80013f8:	a201      	add	r2, pc, #4	; (adr r2, 8001400 <Btc_RxVal+0x68>)
 80013fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fe:	bf00      	nop
 8001400:	0800181b 	.word	0x0800181b
 8001404:	08001829 	.word	0x08001829
 8001408:	08001837 	.word	0x08001837
 800140c:	08001855 	.word	0x08001855
 8001410:	0800186d 	.word	0x0800186d
 8001414:	08001885 	.word	0x08001885
 8001418:	0800189d 	.word	0x0800189d
 800141c:	080018c1 	.word	0x080018c1
 8001420:	080018d9 	.word	0x080018d9
 8001424:	080018fd 	.word	0x080018fd
 8001428:	08001915 	.word	0x08001915
 800142c:	0800192d 	.word	0x0800192d
 8001430:	08001945 	.word	0x08001945
 8001434:	0800195d 	.word	0x0800195d
 8001438:	080019b9 	.word	0x080019b9
 800143c:	080019d1 	.word	0x080019d1
 8001440:	080019e9 	.word	0x080019e9
 8001444:	080019ff 	.word	0x080019ff
 8001448:	08001a15 	.word	0x08001a15
 800144c:	08001a2b 	.word	0x08001a2b
 8001450:	0800178b 	.word	0x0800178b
 8001454:	080017a3 	.word	0x080017a3
 8001458:	080017bb 	.word	0x080017bb
 800145c:	080017d3 	.word	0x080017d3
 8001460:	080017eb 	.word	0x080017eb
 8001464:	08001803 	.word	0x08001803
 8001468:	08001731 	.word	0x08001731
 800146c:	0800174f 	.word	0x0800174f
 8001470:	0800176d 	.word	0x0800176d
 8001474:	08001a41 	.word	0x08001a41
 8001478:	08001a41 	.word	0x08001a41
 800147c:	08001a41 	.word	0x08001a41
 8001480:	08001a41 	.word	0x08001a41
 8001484:	08001a41 	.word	0x08001a41
 8001488:	08001a41 	.word	0x08001a41
 800148c:	08001a41 	.word	0x08001a41
 8001490:	08001a41 	.word	0x08001a41
 8001494:	08001a41 	.word	0x08001a41
 8001498:	08001a41 	.word	0x08001a41
 800149c:	08001a41 	.word	0x08001a41
 80014a0:	08001a41 	.word	0x08001a41
 80014a4:	08001a41 	.word	0x08001a41
 80014a8:	08001a41 	.word	0x08001a41
 80014ac:	08001a41 	.word	0x08001a41
 80014b0:	08001a41 	.word	0x08001a41
 80014b4:	08001a41 	.word	0x08001a41
 80014b8:	08001a41 	.word	0x08001a41
 80014bc:	08001a41 	.word	0x08001a41
 80014c0:	08001a41 	.word	0x08001a41
 80014c4:	08001a41 	.word	0x08001a41
 80014c8:	08001a41 	.word	0x08001a41
 80014cc:	08001a41 	.word	0x08001a41
 80014d0:	08001a41 	.word	0x08001a41
 80014d4:	08001a41 	.word	0x08001a41
 80014d8:	0800151d 	.word	0x0800151d
 80014dc:	08001535 	.word	0x08001535
 80014e0:	0800154d 	.word	0x0800154d
 80014e4:	08001565 	.word	0x08001565
 80014e8:	0800157d 	.word	0x0800157d
 80014ec:	08001595 	.word	0x08001595
 80014f0:	080015ad 	.word	0x080015ad
 80014f4:	080015c5 	.word	0x080015c5
 80014f8:	0800160d 	.word	0x0800160d
 80014fc:	08001625 	.word	0x08001625
 8001500:	0800163d 	.word	0x0800163d
 8001504:	0800166d 	.word	0x0800166d
 8001508:	080016d1 	.word	0x080016d1
 800150c:	08001701 	.word	0x08001701
 8001510:	08001719 	.word	0x08001719
 8001514:	080015dd 	.word	0x080015dd
 8001518:	080015f5 	.word	0x080015f5
		{
			case BTC_RX_HVAC_LEGVENT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800151c:	4b5f      	ldr	r3, [pc, #380]	; (800169c <Btc_RxVal+0x304>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	f040 828f 	bne.w	8001a44 <Btc_RxVal+0x6ac>
				{
					Btc_LegVent = STD_HIGH;
 8001526:	4b61      	ldr	r3, [pc, #388]	; (80016ac <Btc_RxVal+0x314>)
 8001528:	2201      	movs	r2, #1
 800152a:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_LegVent(&Btc_LegVent);
 800152c:	485f      	ldr	r0, [pc, #380]	; (80016ac <Btc_RxVal+0x314>)
 800152e:	f014 fbd1 	bl	8015cd4 <Rte_Write_Hvac_HvacPort_Hvac_LegVent>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001532:	e287      	b.n	8001a44 <Btc_RxVal+0x6ac>
			case BTC_RX_HVAC_LEGVENT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001534:	4b59      	ldr	r3, [pc, #356]	; (800169c <Btc_RxVal+0x304>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	f040 8285 	bne.w	8001a48 <Btc_RxVal+0x6b0>
				{
					Btc_LegVent = STD_LOW;
 800153e:	4b5b      	ldr	r3, [pc, #364]	; (80016ac <Btc_RxVal+0x314>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_LegVent(&Btc_LegVent);
 8001544:	4859      	ldr	r0, [pc, #356]	; (80016ac <Btc_RxVal+0x314>)
 8001546:	f014 fbc5 	bl	8015cd4 <Rte_Write_Hvac_HvacPort_Hvac_LegVent>
				}
				else
				{
					/* do nothing */
				}
				break;
 800154a:	e27d      	b.n	8001a48 <Btc_RxVal+0x6b0>
			case BTC_RX_HVAC_MIDVENT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800154c:	4b53      	ldr	r3, [pc, #332]	; (800169c <Btc_RxVal+0x304>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b01      	cmp	r3, #1
 8001552:	f040 827b 	bne.w	8001a4c <Btc_RxVal+0x6b4>
				{
					Btc_MidVent = STD_HIGH;
 8001556:	4b56      	ldr	r3, [pc, #344]	; (80016b0 <Btc_RxVal+0x318>)
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_MidVent(&Btc_MidVent);
 800155c:	4854      	ldr	r0, [pc, #336]	; (80016b0 <Btc_RxVal+0x318>)
 800155e:	f014 fbc9 	bl	8015cf4 <Rte_Write_Hvac_HvacPort_Hvac_MidVent>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001562:	e273      	b.n	8001a4c <Btc_RxVal+0x6b4>
			case BTC_RX_HVAC_MIDVENT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001564:	4b4d      	ldr	r3, [pc, #308]	; (800169c <Btc_RxVal+0x304>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b01      	cmp	r3, #1
 800156a:	f040 8271 	bne.w	8001a50 <Btc_RxVal+0x6b8>
				{
					Btc_MidVent = STD_LOW;
 800156e:	4b50      	ldr	r3, [pc, #320]	; (80016b0 <Btc_RxVal+0x318>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_MidVent(&Btc_MidVent);
 8001574:	484e      	ldr	r0, [pc, #312]	; (80016b0 <Btc_RxVal+0x318>)
 8001576:	f014 fbbd 	bl	8015cf4 <Rte_Write_Hvac_HvacPort_Hvac_MidVent>
				}
				else
				{
					/* do nothing */
				}
				break;
 800157a:	e269      	b.n	8001a50 <Btc_RxVal+0x6b8>
			case BTC_RX_HVAC_WINDSHIELDVENT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800157c:	4b47      	ldr	r3, [pc, #284]	; (800169c <Btc_RxVal+0x304>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b01      	cmp	r3, #1
 8001582:	f040 8267 	bne.w	8001a54 <Btc_RxVal+0x6bc>
				{
					Btc_WindshieldVent = STD_HIGH;
 8001586:	4b4b      	ldr	r3, [pc, #300]	; (80016b4 <Btc_RxVal+0x31c>)
 8001588:	2201      	movs	r2, #1
 800158a:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent(&Btc_WindshieldVent);
 800158c:	4849      	ldr	r0, [pc, #292]	; (80016b4 <Btc_RxVal+0x31c>)
 800158e:	f014 fbc1 	bl	8015d14 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001592:	e25f      	b.n	8001a54 <Btc_RxVal+0x6bc>
			case BTC_RX_HVAC_WINDSHIELDVENT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001594:	4b41      	ldr	r3, [pc, #260]	; (800169c <Btc_RxVal+0x304>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b01      	cmp	r3, #1
 800159a:	f040 825d 	bne.w	8001a58 <Btc_RxVal+0x6c0>
				{
					Btc_WindshieldVent = STD_LOW;
 800159e:	4b45      	ldr	r3, [pc, #276]	; (80016b4 <Btc_RxVal+0x31c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent(&Btc_WindshieldVent);
 80015a4:	4843      	ldr	r0, [pc, #268]	; (80016b4 <Btc_RxVal+0x31c>)
 80015a6:	f014 fbb5 	bl	8015d14 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent>
				}
				else
				{
					/* do nothing */
				}
				break;
 80015aa:	e255      	b.n	8001a58 <Btc_RxVal+0x6c0>
			case BTC_RX_HVAC_WINDSHIELDDEFROST_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80015ac:	4b3b      	ldr	r3, [pc, #236]	; (800169c <Btc_RxVal+0x304>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	f040 8253 	bne.w	8001a5c <Btc_RxVal+0x6c4>
				{
					Btc_WindshieldDefrost = STD_HIGH;
 80015b6:	4b40      	ldr	r3, [pc, #256]	; (80016b8 <Btc_RxVal+0x320>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost(&Btc_WindshieldDefrost);
 80015bc:	483e      	ldr	r0, [pc, #248]	; (80016b8 <Btc_RxVal+0x320>)
 80015be:	f014 fbb9 	bl	8015d34 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost>
				}
				else
				{
					/* do nothing */
				}
				break;
 80015c2:	e24b      	b.n	8001a5c <Btc_RxVal+0x6c4>
			case BTC_RX_HVAC_WINDSHIELDDEFROST_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80015c4:	4b35      	ldr	r3, [pc, #212]	; (800169c <Btc_RxVal+0x304>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	f040 8249 	bne.w	8001a60 <Btc_RxVal+0x6c8>
				{
					Btc_WindshieldDefrost = STD_LOW;
 80015ce:	4b3a      	ldr	r3, [pc, #232]	; (80016b8 <Btc_RxVal+0x320>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost(&Btc_WindshieldDefrost);
 80015d4:	4838      	ldr	r0, [pc, #224]	; (80016b8 <Btc_RxVal+0x320>)
 80015d6:	f014 fbad 	bl	8015d34 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost>
				}
				else
				{
					/* do nothing */
				}
				break;
 80015da:	e241      	b.n	8001a60 <Btc_RxVal+0x6c8>
			case BTC_RX_HVAC_REARWINDSHIELDDEFROST_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80015dc:	4b2f      	ldr	r3, [pc, #188]	; (800169c <Btc_RxVal+0x304>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	f040 823f 	bne.w	8001a64 <Btc_RxVal+0x6cc>
				{
					Btc_RearWindshieldDefrost = STD_HIGH;
 80015e6:	4b35      	ldr	r3, [pc, #212]	; (80016bc <Btc_RxVal+0x324>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost(&Btc_RearWindshieldDefrost);
 80015ec:	4833      	ldr	r0, [pc, #204]	; (80016bc <Btc_RxVal+0x324>)
 80015ee:	f014 fbb1 	bl	8015d54 <Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost>
				}
				else
				{
					/* do nothing */
				}
				break;
 80015f2:	e237      	b.n	8001a64 <Btc_RxVal+0x6cc>
			case BTC_RX_HVAC_REARWINDSHIELDDEFROST_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80015f4:	4b29      	ldr	r3, [pc, #164]	; (800169c <Btc_RxVal+0x304>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	f040 8235 	bne.w	8001a68 <Btc_RxVal+0x6d0>
				{
					Btc_RearWindshieldDefrost = STD_LOW;
 80015fe:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <Btc_RxVal+0x324>)
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost(&Btc_RearWindshieldDefrost);
 8001604:	482d      	ldr	r0, [pc, #180]	; (80016bc <Btc_RxVal+0x324>)
 8001606:	f014 fba5 	bl	8015d54 <Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost>
				}
				else
				{
					/* do nothing */
				}
				break;
 800160a:	e22d      	b.n	8001a68 <Btc_RxVal+0x6d0>
			case BTC_RX_HVAC_AC_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800160c:	4b23      	ldr	r3, [pc, #140]	; (800169c <Btc_RxVal+0x304>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b01      	cmp	r3, #1
 8001612:	f040 822b 	bne.w	8001a6c <Btc_RxVal+0x6d4>
				{
					Btc_Ac = STD_HIGH;
 8001616:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <Btc_RxVal+0x328>)
 8001618:	2201      	movs	r2, #1
 800161a:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_Ac(&Btc_Ac);
 800161c:	4828      	ldr	r0, [pc, #160]	; (80016c0 <Btc_RxVal+0x328>)
 800161e:	f014 fba9 	bl	8015d74 <Rte_Write_Hvac_HvacPort_Hvac_Ac>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001622:	e223      	b.n	8001a6c <Btc_RxVal+0x6d4>
			case BTC_RX_HVAC_AC_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001624:	4b1d      	ldr	r3, [pc, #116]	; (800169c <Btc_RxVal+0x304>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b01      	cmp	r3, #1
 800162a:	f040 8221 	bne.w	8001a70 <Btc_RxVal+0x6d8>
				{
					Btc_Ac = STD_LOW;
 800162e:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <Btc_RxVal+0x328>)
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_Ac(&Btc_Ac);
 8001634:	4822      	ldr	r0, [pc, #136]	; (80016c0 <Btc_RxVal+0x328>)
 8001636:	f014 fb9d 	bl	8015d74 <Rte_Write_Hvac_HvacPort_Hvac_Ac>
				}
				else
				{
					/* do nothing */
				}
				break;
 800163a:	e219      	b.n	8001a70 <Btc_RxVal+0x6d8>
			case BTC_RX_HVAC_RECIRCULATION:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800163c:	4b17      	ldr	r3, [pc, #92]	; (800169c <Btc_RxVal+0x304>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b01      	cmp	r3, #1
 8001642:	f040 8217 	bne.w	8001a74 <Btc_RxVal+0x6dc>
				{
					Btc_Recirculation = STD_HIGH;
 8001646:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <Btc_RxVal+0x32c>)
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
					Btc_NoRecirculation = STD_LOW;
 800164c:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <Btc_RxVal+0x330>)
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
					Btc_AutomaticRecirculation = STD_LOW;
 8001652:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <Btc_RxVal+0x334>)
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_Recirculation(&Btc_Recirculation);
 8001658:	481a      	ldr	r0, [pc, #104]	; (80016c4 <Btc_RxVal+0x32c>)
 800165a:	f014 fb9b 	bl	8015d94 <Rte_Write_Hvac_HvacPort_Hvac_Recirculation>
					Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation(&Btc_NoRecirculation);
 800165e:	481a      	ldr	r0, [pc, #104]	; (80016c8 <Btc_RxVal+0x330>)
 8001660:	f014 fba8 	bl	8015db4 <Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation>
					Rte_Write_Hvac_HvacPort_Hvac_AutomaticRecirculation(&Btc_AutomaticRecirculation);
 8001664:	4819      	ldr	r0, [pc, #100]	; (80016cc <Btc_RxVal+0x334>)
 8001666:	f014 fbb5 	bl	8015dd4 <Rte_Write_Hvac_HvacPort_Hvac_AutomaticRecirculation>
				}
				else
				{
					/* do nothing */
				}
				break;
 800166a:	e203      	b.n	8001a74 <Btc_RxVal+0x6dc>
			case BTC_RX_HVAC_NORECIRCULATION:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <Btc_RxVal+0x304>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b01      	cmp	r3, #1
 8001672:	f040 8201 	bne.w	8001a78 <Btc_RxVal+0x6e0>
				{
					Btc_Recirculation = STD_LOW;
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <Btc_RxVal+0x32c>)
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
					Btc_NoRecirculation = STD_HIGH;
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <Btc_RxVal+0x330>)
 800167e:	2201      	movs	r2, #1
 8001680:	701a      	strb	r2, [r3, #0]
					Btc_AutomaticRecirculation = STD_LOW;
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <Btc_RxVal+0x334>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_Recirculation(&Btc_Recirculation);
 8001688:	480e      	ldr	r0, [pc, #56]	; (80016c4 <Btc_RxVal+0x32c>)
 800168a:	f014 fb83 	bl	8015d94 <Rte_Write_Hvac_HvacPort_Hvac_Recirculation>
					Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation(&Btc_NoRecirculation);
 800168e:	480e      	ldr	r0, [pc, #56]	; (80016c8 <Btc_RxVal+0x330>)
 8001690:	f014 fb90 	bl	8015db4 <Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation>
					Rte_Write_Hvac_HvacPort_Hvac_AutomaticRecirculation(&Btc_AutomaticRecirculation);
 8001694:	480d      	ldr	r0, [pc, #52]	; (80016cc <Btc_RxVal+0x334>)
 8001696:	f014 fb9d 	bl	8015dd4 <Rte_Write_Hvac_HvacPort_Hvac_AutomaticRecirculation>
				}
				else
				{
					/* do nothing */
				}
				break;
 800169a:	e1ed      	b.n	8001a78 <Btc_RxVal+0x6e0>
 800169c:	20000139 	.word	0x20000139
 80016a0:	200000f6 	.word	0x200000f6
 80016a4:	20000106 	.word	0x20000106
 80016a8:	20000107 	.word	0x20000107
 80016ac:	20000108 	.word	0x20000108
 80016b0:	20000109 	.word	0x20000109
 80016b4:	2000010a 	.word	0x2000010a
 80016b8:	2000010b 	.word	0x2000010b
 80016bc:	2000010c 	.word	0x2000010c
 80016c0:	2000010d 	.word	0x2000010d
 80016c4:	2000010e 	.word	0x2000010e
 80016c8:	2000010f 	.word	0x2000010f
 80016cc:	20000110 	.word	0x20000110
			case BTC_RX_HVAC_AUTOMATICRECIRCULATION:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80016d0:	4ba8      	ldr	r3, [pc, #672]	; (8001974 <Btc_RxVal+0x5dc>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	f040 81d1 	bne.w	8001a7c <Btc_RxVal+0x6e4>
				{
					Btc_Recirculation = STD_LOW;
 80016da:	4ba7      	ldr	r3, [pc, #668]	; (8001978 <Btc_RxVal+0x5e0>)
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
					Btc_NoRecirculation = STD_LOW;
 80016e0:	4ba6      	ldr	r3, [pc, #664]	; (800197c <Btc_RxVal+0x5e4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
					Btc_AutomaticRecirculation = STD_HIGH;
 80016e6:	4ba6      	ldr	r3, [pc, #664]	; (8001980 <Btc_RxVal+0x5e8>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_Recirculation(&Btc_Recirculation);
 80016ec:	48a2      	ldr	r0, [pc, #648]	; (8001978 <Btc_RxVal+0x5e0>)
 80016ee:	f014 fb51 	bl	8015d94 <Rte_Write_Hvac_HvacPort_Hvac_Recirculation>
					Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation(&Btc_NoRecirculation);
 80016f2:	48a2      	ldr	r0, [pc, #648]	; (800197c <Btc_RxVal+0x5e4>)
 80016f4:	f014 fb5e 	bl	8015db4 <Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation>
					Rte_Write_Hvac_HvacPort_Hvac_AutomaticRecirculation(&Btc_AutomaticRecirculation);
 80016f8:	48a1      	ldr	r0, [pc, #644]	; (8001980 <Btc_RxVal+0x5e8>)
 80016fa:	f014 fb6b 	bl	8015dd4 <Rte_Write_Hvac_HvacPort_Hvac_AutomaticRecirculation>
				}
				else
				{
					/* do nothing */
				}
				break;
 80016fe:	e1bd      	b.n	8001a7c <Btc_RxVal+0x6e4>
			case BTC_RX_HVAC_AUTOMATICMODE_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001700:	4b9c      	ldr	r3, [pc, #624]	; (8001974 <Btc_RxVal+0x5dc>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b01      	cmp	r3, #1
 8001706:	f040 81bb 	bne.w	8001a80 <Btc_RxVal+0x6e8>
				{
					Btc_AutomaticMode = STD_HIGH;
 800170a:	4b9e      	ldr	r3, [pc, #632]	; (8001984 <Btc_RxVal+0x5ec>)
 800170c:	2201      	movs	r2, #1
 800170e:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode(&Btc_AutomaticMode);
 8001710:	489c      	ldr	r0, [pc, #624]	; (8001984 <Btc_RxVal+0x5ec>)
 8001712:	f014 fb6f 	bl	8015df4 <Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001716:	e1b3      	b.n	8001a80 <Btc_RxVal+0x6e8>
			case BTC_RX_HVAC_AUTOMATICMODE_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001718:	4b96      	ldr	r3, [pc, #600]	; (8001974 <Btc_RxVal+0x5dc>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b01      	cmp	r3, #1
 800171e:	f040 81b1 	bne.w	8001a84 <Btc_RxVal+0x6ec>
				{
					Btc_AutomaticMode = STD_LOW;
 8001722:	4b98      	ldr	r3, [pc, #608]	; (8001984 <Btc_RxVal+0x5ec>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode(&Btc_AutomaticMode);
 8001728:	4896      	ldr	r0, [pc, #600]	; (8001984 <Btc_RxVal+0x5ec>)
 800172a:	f014 fb63 	bl	8015df4 <Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode>
				}
				else
				{
					/* do nothing */
				}
				break;
 800172e:	e1a9      	b.n	8001a84 <Btc_RxVal+0x6ec>
			case BTC_RX_IGNITION_STEP_ONE:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001730:	4b90      	ldr	r3, [pc, #576]	; (8001974 <Btc_RxVal+0x5dc>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b01      	cmp	r3, #1
 8001736:	f040 81a7 	bne.w	8001a88 <Btc_RxVal+0x6f0>
				{
					Btc_IgnitionStepOne = STD_HIGH;
 800173a:	4b93      	ldr	r3, [pc, #588]	; (8001988 <Btc_RxVal+0x5f0>)
 800173c:	2201      	movs	r2, #1
 800173e:	701a      	strb	r2, [r3, #0]
					Btc_IgnitionStepTwo = STD_LOW;
 8001740:	4b92      	ldr	r3, [pc, #584]	; (800198c <Btc_RxVal+0x5f4>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
					Btc_IgnitionTurnOff = STD_LOW;
 8001746:	4b92      	ldr	r3, [pc, #584]	; (8001990 <Btc_RxVal+0x5f8>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					/* do nothing */
				}
				break;
 800174c:	e19c      	b.n	8001a88 <Btc_RxVal+0x6f0>
			case BTC_RX_IGNITION_STEP_TWO:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800174e:	4b89      	ldr	r3, [pc, #548]	; (8001974 <Btc_RxVal+0x5dc>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b01      	cmp	r3, #1
 8001754:	f040 819a 	bne.w	8001a8c <Btc_RxVal+0x6f4>
				{
					Btc_IgnitionStepTwo = STD_HIGH;
 8001758:	4b8c      	ldr	r3, [pc, #560]	; (800198c <Btc_RxVal+0x5f4>)
 800175a:	2201      	movs	r2, #1
 800175c:	701a      	strb	r2, [r3, #0]
					Btc_IgnitionStepOne = STD_LOW;
 800175e:	4b8a      	ldr	r3, [pc, #552]	; (8001988 <Btc_RxVal+0x5f0>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
					Btc_IgnitionTurnOff = STD_LOW;
 8001764:	4b8a      	ldr	r3, [pc, #552]	; (8001990 <Btc_RxVal+0x5f8>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					/* do nothing */
				}
				break;
 800176a:	e18f      	b.n	8001a8c <Btc_RxVal+0x6f4>
			case BTC_RX_IGNITION_TURN_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800176c:	4b81      	ldr	r3, [pc, #516]	; (8001974 <Btc_RxVal+0x5dc>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	f040 818d 	bne.w	8001a90 <Btc_RxVal+0x6f8>
				{
					Btc_IgnitionStepTwo = STD_LOW;
 8001776:	4b85      	ldr	r3, [pc, #532]	; (800198c <Btc_RxVal+0x5f4>)
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
					Btc_IgnitionStepOne = STD_LOW;
 800177c:	4b82      	ldr	r3, [pc, #520]	; (8001988 <Btc_RxVal+0x5f0>)
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
					Btc_IgnitionTurnOff = STD_HIGH;
 8001782:	4b83      	ldr	r3, [pc, #524]	; (8001990 <Btc_RxVal+0x5f8>)
 8001784:	2201      	movs	r2, #1
 8001786:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					/* do nothing */
				}
				break;
 8001788:	e182      	b.n	8001a90 <Btc_RxVal+0x6f8>
			case BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800178a:	4b7a      	ldr	r3, [pc, #488]	; (8001974 <Btc_RxVal+0x5dc>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b01      	cmp	r3, #1
 8001790:	f040 8180 	bne.w	8001a94 <Btc_RxVal+0x6fc>
				{
					Btc_ReverseLight = STD_HIGH;
 8001794:	4b7f      	ldr	r3, [pc, #508]	; (8001994 <Btc_RxVal+0x5fc>)
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 800179a:	487e      	ldr	r0, [pc, #504]	; (8001994 <Btc_RxVal+0x5fc>)
 800179c:	f014 fd36 	bl	801620c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80017a0:	e178      	b.n	8001a94 <Btc_RxVal+0x6fc>
			case BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80017a2:	4b74      	ldr	r3, [pc, #464]	; (8001974 <Btc_RxVal+0x5dc>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	f040 8176 	bne.w	8001a98 <Btc_RxVal+0x700>
				{
					Btc_ReverseLight = STD_LOW;
 80017ac:	4b79      	ldr	r3, [pc, #484]	; (8001994 <Btc_RxVal+0x5fc>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 80017b2:	4878      	ldr	r0, [pc, #480]	; (8001994 <Btc_RxVal+0x5fc>)
 80017b4:	f014 fd2a 	bl	801620c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80017b8:	e16e      	b.n	8001a98 <Btc_RxVal+0x700>
			case BTC_RX_EXTLIGHTS_POSITIONZERO:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80017ba:	4b6e      	ldr	r3, [pc, #440]	; (8001974 <Btc_RxVal+0x5dc>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	f040 816c 	bne.w	8001a9c <Btc_RxVal+0x704>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 80017c4:	4b74      	ldr	r3, [pc, #464]	; (8001998 <Btc_RxVal+0x600>)
 80017c6:	2217      	movs	r2, #23
 80017c8:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 80017ca:	4873      	ldr	r0, [pc, #460]	; (8001998 <Btc_RxVal+0x600>)
 80017cc:	f014 fd4e 	bl	801626c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80017d0:	e164      	b.n	8001a9c <Btc_RxVal+0x704>
			case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80017d2:	4b68      	ldr	r3, [pc, #416]	; (8001974 <Btc_RxVal+0x5dc>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	f040 8162 	bne.w	8001aa0 <Btc_RxVal+0x708>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 80017dc:	4b6e      	ldr	r3, [pc, #440]	; (8001998 <Btc_RxVal+0x600>)
 80017de:	2218      	movs	r2, #24
 80017e0:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 80017e2:	486d      	ldr	r0, [pc, #436]	; (8001998 <Btc_RxVal+0x600>)
 80017e4:	f014 fd42 	bl	801626c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80017e8:	e15a      	b.n	8001aa0 <Btc_RxVal+0x708>
			case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80017ea:	4b62      	ldr	r3, [pc, #392]	; (8001974 <Btc_RxVal+0x5dc>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	f040 8158 	bne.w	8001aa4 <Btc_RxVal+0x70c>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 80017f4:	4b68      	ldr	r3, [pc, #416]	; (8001998 <Btc_RxVal+0x600>)
 80017f6:	2219      	movs	r2, #25
 80017f8:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 80017fa:	4867      	ldr	r0, [pc, #412]	; (8001998 <Btc_RxVal+0x600>)
 80017fc:	f014 fd36 	bl	801626c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001800:	e150      	b.n	8001aa4 <Btc_RxVal+0x70c>
			case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001802:	4b5c      	ldr	r3, [pc, #368]	; (8001974 <Btc_RxVal+0x5dc>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b01      	cmp	r3, #1
 8001808:	f040 814e 	bne.w	8001aa8 <Btc_RxVal+0x710>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 800180c:	4b62      	ldr	r3, [pc, #392]	; (8001998 <Btc_RxVal+0x600>)
 800180e:	221a      	movs	r2, #26
 8001810:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8001812:	4861      	ldr	r0, [pc, #388]	; (8001998 <Btc_RxVal+0x600>)
 8001814:	f014 fd2a 	bl	801626c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001818:	e146      	b.n	8001aa8 <Btc_RxVal+0x710>
			case BTC_RX_CENLOC_ON:
				Btc_CenLoc = STD_HIGH;
 800181a:	4b60      	ldr	r3, [pc, #384]	; (800199c <Btc_RxVal+0x604>)
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]
				Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 8001820:	485e      	ldr	r0, [pc, #376]	; (800199c <Btc_RxVal+0x604>)
 8001822:	f014 fcd3 	bl	80161cc <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>
				break;
 8001826:	e164      	b.n	8001af2 <Btc_RxVal+0x75a>
			case BTC_RX_CENLOC_OFF:
				Btc_CenLoc = STD_LOW;
 8001828:	4b5c      	ldr	r3, [pc, #368]	; (800199c <Btc_RxVal+0x604>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
				Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 800182e:	485b      	ldr	r0, [pc, #364]	; (800199c <Btc_RxVal+0x604>)
 8001830:	f014 fccc 	bl	80161cc <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>
				break;
 8001834:	e15d      	b.n	8001af2 <Btc_RxVal+0x75a>
			case BTC_RX_EXTLIGHTS_HIGHBEAM_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001836:	4b4f      	ldr	r3, [pc, #316]	; (8001974 <Btc_RxVal+0x5dc>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b01      	cmp	r3, #1
 800183c:	f040 8136 	bne.w	8001aac <Btc_RxVal+0x714>
				{
					Btc_HighBeam = STD_HIGH;
 8001840:	4b57      	ldr	r3, [pc, #348]	; (80019a0 <Btc_RxVal+0x608>)
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
					Btc_FlashHighBeam = STD_LOW;
 8001846:	4b57      	ldr	r3, [pc, #348]	; (80019a4 <Btc_RxVal+0x60c>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 800184c:	4854      	ldr	r0, [pc, #336]	; (80019a0 <Btc_RxVal+0x608>)
 800184e:	f014 fd1d 	bl	801628c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001852:	e12b      	b.n	8001aac <Btc_RxVal+0x714>
			case BTC_RX_EXTLIGHTS_HIGHBEAM_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001854:	4b47      	ldr	r3, [pc, #284]	; (8001974 <Btc_RxVal+0x5dc>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b01      	cmp	r3, #1
 800185a:	f040 8129 	bne.w	8001ab0 <Btc_RxVal+0x718>
				{
					Btc_HighBeam = STD_LOW;
 800185e:	4b50      	ldr	r3, [pc, #320]	; (80019a0 <Btc_RxVal+0x608>)
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 8001864:	484e      	ldr	r0, [pc, #312]	; (80019a0 <Btc_RxVal+0x608>)
 8001866:	f014 fd11 	bl	801628c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800186a:	e121      	b.n	8001ab0 <Btc_RxVal+0x718>
			case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800186c:	4b41      	ldr	r3, [pc, #260]	; (8001974 <Btc_RxVal+0x5dc>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b01      	cmp	r3, #1
 8001872:	f040 811f 	bne.w	8001ab4 <Btc_RxVal+0x71c>
				{
					Btc_FlashHighBeam = STD_HIGH;
 8001876:	4b4b      	ldr	r3, [pc, #300]	; (80019a4 <Btc_RxVal+0x60c>)
 8001878:	2201      	movs	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState(&Btc_FlashHighBeam);
 800187c:	4849      	ldr	r0, [pc, #292]	; (80019a4 <Btc_RxVal+0x60c>)
 800187e:	f014 fcd5 	bl	801622c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001882:	e117      	b.n	8001ab4 <Btc_RxVal+0x71c>
			case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001884:	4b3b      	ldr	r3, [pc, #236]	; (8001974 <Btc_RxVal+0x5dc>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	f040 8115 	bne.w	8001ab8 <Btc_RxVal+0x720>
				{
					Btc_FlashHighBeam = STD_LOW;
 800188e:	4b45      	ldr	r3, [pc, #276]	; (80019a4 <Btc_RxVal+0x60c>)
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState(&Btc_FlashHighBeam);
 8001894:	4843      	ldr	r0, [pc, #268]	; (80019a4 <Btc_RxVal+0x60c>)
 8001896:	f014 fcc9 	bl	801622c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800189a:	e10d      	b.n	8001ab8 <Btc_RxVal+0x720>
			case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800189c:	4b35      	ldr	r3, [pc, #212]	; (8001974 <Btc_RxVal+0x5dc>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	f040 810b 	bne.w	8001abc <Btc_RxVal+0x724>
				{
					Btc_TurnSignalLeft = STD_HIGH;
 80018a6:	4b40      	ldr	r3, [pc, #256]	; (80019a8 <Btc_RxVal+0x610>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
					Btc_TurnSignalRight = STD_LOW;
 80018ac:	4b3f      	ldr	r3, [pc, #252]	; (80019ac <Btc_RxVal+0x614>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 80018b2:	483d      	ldr	r0, [pc, #244]	; (80019a8 <Btc_RxVal+0x610>)
 80018b4:	f014 fd0a 	bl	80162cc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 80018b8:	483c      	ldr	r0, [pc, #240]	; (80019ac <Btc_RxVal+0x614>)
 80018ba:	f014 fd17 	bl	80162ec <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80018be:	e0fd      	b.n	8001abc <Btc_RxVal+0x724>
			case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80018c0:	4b2c      	ldr	r3, [pc, #176]	; (8001974 <Btc_RxVal+0x5dc>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	f040 80fb 	bne.w	8001ac0 <Btc_RxVal+0x728>
				{
					Btc_TurnSignalLeft = STD_LOW;
 80018ca:	4b37      	ldr	r3, [pc, #220]	; (80019a8 <Btc_RxVal+0x610>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 80018d0:	4835      	ldr	r0, [pc, #212]	; (80019a8 <Btc_RxVal+0x610>)
 80018d2:	f014 fcfb 	bl	80162cc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80018d6:	e0f3      	b.n	8001ac0 <Btc_RxVal+0x728>
			case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80018d8:	4b26      	ldr	r3, [pc, #152]	; (8001974 <Btc_RxVal+0x5dc>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	f040 80f1 	bne.w	8001ac4 <Btc_RxVal+0x72c>
				{
					Btc_TurnSignalRight = STD_HIGH;
 80018e2:	4b32      	ldr	r3, [pc, #200]	; (80019ac <Btc_RxVal+0x614>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]
					Btc_TurnSignalLeft = STD_LOW;
 80018e8:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <Btc_RxVal+0x610>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 80018ee:	482e      	ldr	r0, [pc, #184]	; (80019a8 <Btc_RxVal+0x610>)
 80018f0:	f014 fcec 	bl	80162cc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 80018f4:	482d      	ldr	r0, [pc, #180]	; (80019ac <Btc_RxVal+0x614>)
 80018f6:	f014 fcf9 	bl	80162ec <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80018fa:	e0e3      	b.n	8001ac4 <Btc_RxVal+0x72c>
			case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80018fc:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <Btc_RxVal+0x5dc>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b01      	cmp	r3, #1
 8001902:	f040 80e1 	bne.w	8001ac8 <Btc_RxVal+0x730>
				{
					Btc_TurnSignalRight = STD_LOW;
 8001906:	4b29      	ldr	r3, [pc, #164]	; (80019ac <Btc_RxVal+0x614>)
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 800190c:	4827      	ldr	r0, [pc, #156]	; (80019ac <Btc_RxVal+0x614>)
 800190e:	f014 fced 	bl	80162ec <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001912:	e0d9      	b.n	8001ac8 <Btc_RxVal+0x730>
			case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <Btc_RxVal+0x5dc>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b01      	cmp	r3, #1
 800191a:	f040 80d7 	bne.w	8001acc <Btc_RxVal+0x734>
				{
					Btc_HazardLight = STD_HIGH;
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <Btc_RxVal+0x618>)
 8001920:	2201      	movs	r2, #1
 8001922:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 8001924:	4822      	ldr	r0, [pc, #136]	; (80019b0 <Btc_RxVal+0x618>)
 8001926:	f014 fcf1 	bl	801630c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800192a:	e0cf      	b.n	8001acc <Btc_RxVal+0x734>
			case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <Btc_RxVal+0x5dc>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b01      	cmp	r3, #1
 8001932:	f040 80cd 	bne.w	8001ad0 <Btc_RxVal+0x738>
				{
					Btc_HazardLight = STD_LOW;
 8001936:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <Btc_RxVal+0x618>)
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 800193c:	481c      	ldr	r0, [pc, #112]	; (80019b0 <Btc_RxVal+0x618>)
 800193e:	f014 fce5 	bl	801630c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001942:	e0c5      	b.n	8001ad0 <Btc_RxVal+0x738>
			case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <Btc_RxVal+0x5dc>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	f040 80c3 	bne.w	8001ad4 <Btc_RxVal+0x73c>
				{
					Btc_FrontFogLight = STD_HIGH;
 800194e:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <Btc_RxVal+0x61c>)
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 8001954:	4817      	ldr	r0, [pc, #92]	; (80019b4 <Btc_RxVal+0x61c>)
 8001956:	f014 fca9 	bl	80162ac <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800195a:	e0bb      	b.n	8001ad4 <Btc_RxVal+0x73c>
			case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <Btc_RxVal+0x5dc>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b01      	cmp	r3, #1
 8001962:	f040 80b9 	bne.w	8001ad8 <Btc_RxVal+0x740>
				{
					Btc_FrontFogLight = STD_LOW;
 8001966:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <Btc_RxVal+0x61c>)
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 800196c:	4811      	ldr	r0, [pc, #68]	; (80019b4 <Btc_RxVal+0x61c>)
 800196e:	f014 fc9d 	bl	80162ac <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001972:	e0b1      	b.n	8001ad8 <Btc_RxVal+0x740>
 8001974:	20000139 	.word	0x20000139
 8001978:	2000010e 	.word	0x2000010e
 800197c:	2000010f 	.word	0x2000010f
 8001980:	20000110 	.word	0x20000110
 8001984:	20000111 	.word	0x20000111
 8001988:	20000103 	.word	0x20000103
 800198c:	20000104 	.word	0x20000104
 8001990:	20000105 	.word	0x20000105
 8001994:	20000101 	.word	0x20000101
 8001998:	200000f8 	.word	0x200000f8
 800199c:	200000f7 	.word	0x200000f7
 80019a0:	200000f9 	.word	0x200000f9
 80019a4:	200000fa 	.word	0x200000fa
 80019a8:	200000fc 	.word	0x200000fc
 80019ac:	200000fd 	.word	0x200000fd
 80019b0:	200000fe 	.word	0x200000fe
 80019b4:	200000fb 	.word	0x200000fb
			case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80019b8:	4b50      	ldr	r3, [pc, #320]	; (8001afc <Btc_RxVal+0x764>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	f040 808d 	bne.w	8001adc <Btc_RxVal+0x744>
				{
					Btc_RearFogLight = STD_HIGH;
 80019c2:	4b4f      	ldr	r3, [pc, #316]	; (8001b00 <Btc_RxVal+0x768>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 80019c8:	484d      	ldr	r0, [pc, #308]	; (8001b00 <Btc_RxVal+0x768>)
 80019ca:	f014 fcaf 	bl	801632c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80019ce:	e085      	b.n	8001adc <Btc_RxVal+0x744>
			case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80019d0:	4b4a      	ldr	r3, [pc, #296]	; (8001afc <Btc_RxVal+0x764>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	f040 8083 	bne.w	8001ae0 <Btc_RxVal+0x748>
				{
					Btc_RearFogLight = STD_LOW;
 80019da:	4b49      	ldr	r3, [pc, #292]	; (8001b00 <Btc_RxVal+0x768>)
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 80019e0:	4847      	ldr	r0, [pc, #284]	; (8001b00 <Btc_RxVal+0x768>)
 80019e2:	f014 fca3 	bl	801632c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80019e6:	e07b      	b.n	8001ae0 <Btc_RxVal+0x748>
			case BTC_RX_EXTLIGHTS_BRAKELIGHTON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80019e8:	4b44      	ldr	r3, [pc, #272]	; (8001afc <Btc_RxVal+0x764>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d179      	bne.n	8001ae4 <Btc_RxVal+0x74c>
				{
					Btc_BrakeLight = STD_HIGH;
 80019f0:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <Btc_RxVal+0x76c>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 80019f6:	4843      	ldr	r0, [pc, #268]	; (8001b04 <Btc_RxVal+0x76c>)
 80019f8:	f014 fc28 	bl	801624c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80019fc:	e072      	b.n	8001ae4 <Btc_RxVal+0x74c>
			case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80019fe:	4b3f      	ldr	r3, [pc, #252]	; (8001afc <Btc_RxVal+0x764>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d170      	bne.n	8001ae8 <Btc_RxVal+0x750>
				{
					Btc_BrakeLight = STD_LOW;
 8001a06:	4b3f      	ldr	r3, [pc, #252]	; (8001b04 <Btc_RxVal+0x76c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 8001a0c:	483d      	ldr	r0, [pc, #244]	; (8001b04 <Btc_RxVal+0x76c>)
 8001a0e:	f014 fc1d 	bl	801624c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001a12:	e069      	b.n	8001ae8 <Btc_RxVal+0x750>
			case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001a14:	4b39      	ldr	r3, [pc, #228]	; (8001afc <Btc_RxVal+0x764>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d167      	bne.n	8001aec <Btc_RxVal+0x754>
				{
					Btc_IntLights = STD_HIGH;
 8001a1c:	4b3a      	ldr	r3, [pc, #232]	; (8001b08 <Btc_RxVal+0x770>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
					Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 8001a22:	4839      	ldr	r0, [pc, #228]	; (8001b08 <Btc_RxVal+0x770>)
 8001a24:	f014 fcc2 	bl	80163ac <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001a28:	e060      	b.n	8001aec <Btc_RxVal+0x754>
			case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001a2a:	4b34      	ldr	r3, [pc, #208]	; (8001afc <Btc_RxVal+0x764>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d15e      	bne.n	8001af0 <Btc_RxVal+0x758>
				{
					Btc_IntLights = STD_LOW;
 8001a32:	4b35      	ldr	r3, [pc, #212]	; (8001b08 <Btc_RxVal+0x770>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
					Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 8001a38:	4833      	ldr	r0, [pc, #204]	; (8001b08 <Btc_RxVal+0x770>)
 8001a3a:	f014 fcb7 	bl	80163ac <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001a3e:	e057      	b.n	8001af0 <Btc_RxVal+0x758>
			default:
				break;
 8001a40:	bf00      	nop
 8001a42:	e056      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001a44:	bf00      	nop
 8001a46:	e054      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001a48:	bf00      	nop
 8001a4a:	e052      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001a4c:	bf00      	nop
 8001a4e:	e050      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001a50:	bf00      	nop
 8001a52:	e04e      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001a54:	bf00      	nop
 8001a56:	e04c      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001a58:	bf00      	nop
 8001a5a:	e04a      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001a5c:	bf00      	nop
 8001a5e:	e048      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001a60:	bf00      	nop
 8001a62:	e046      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001a64:	bf00      	nop
 8001a66:	e044      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001a68:	bf00      	nop
 8001a6a:	e042      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001a6c:	bf00      	nop
 8001a6e:	e040      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001a70:	bf00      	nop
 8001a72:	e03e      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001a74:	bf00      	nop
 8001a76:	e03c      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001a78:	bf00      	nop
 8001a7a:	e03a      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001a7c:	bf00      	nop
 8001a7e:	e038      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001a80:	bf00      	nop
 8001a82:	e036      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001a84:	bf00      	nop
 8001a86:	e034      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001a88:	bf00      	nop
 8001a8a:	e032      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001a8c:	bf00      	nop
 8001a8e:	e030      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001a90:	bf00      	nop
 8001a92:	e02e      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001a94:	bf00      	nop
 8001a96:	e02c      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001a98:	bf00      	nop
 8001a9a:	e02a      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001a9c:	bf00      	nop
 8001a9e:	e028      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001aa0:	bf00      	nop
 8001aa2:	e026      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001aa4:	bf00      	nop
 8001aa6:	e024      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001aa8:	bf00      	nop
 8001aaa:	e022      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001aac:	bf00      	nop
 8001aae:	e020      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001ab0:	bf00      	nop
 8001ab2:	e01e      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001ab4:	bf00      	nop
 8001ab6:	e01c      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001ab8:	bf00      	nop
 8001aba:	e01a      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001abc:	bf00      	nop
 8001abe:	e018      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001ac0:	bf00      	nop
 8001ac2:	e016      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001ac4:	bf00      	nop
 8001ac6:	e014      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001ac8:	bf00      	nop
 8001aca:	e012      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001acc:	bf00      	nop
 8001ace:	e010      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001ad0:	bf00      	nop
 8001ad2:	e00e      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001ad4:	bf00      	nop
 8001ad6:	e00c      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001ad8:	bf00      	nop
 8001ada:	e00a      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001adc:	bf00      	nop
 8001ade:	e008      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001ae0:	bf00      	nop
 8001ae2:	e006      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001ae4:	bf00      	nop
 8001ae6:	e004      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001ae8:	bf00      	nop
 8001aea:	e002      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001aec:	bf00      	nop
 8001aee:	e000      	b.n	8001af2 <Btc_RxVal+0x75a>
				break;
 8001af0:	bf00      	nop
	}
	else
	{
		/* do nothing */
	}
	Btc_ApplState = BTC_REQUEST_PROCESSING_STATE;
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <Btc_RxVal+0x774>)
 8001af4:	2203      	movs	r2, #3
 8001af6:	701a      	strb	r2, [r3, #0]
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000139 	.word	0x20000139
 8001b00:	20000100 	.word	0x20000100
 8001b04:	200000ff 	.word	0x200000ff
 8001b08:	20000102 	.word	0x20000102
 8001b0c:	200000ec 	.word	0x200000ec

08001b10 <Btc_MainFunction>:
/***********************************************************************************
* Function: Btc_MainFunction											 		   *
* Description: Process bluetooth communication states.					           *
************************************************************************************/
VOID Btc_MainFunction()
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	/* Process given state. */
	switch(Btc_ApplState)
 8001b14:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <Btc_MainFunction+0x48>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d819      	bhi.n	8001b52 <Btc_MainFunction+0x42>
 8001b1e:	a201      	add	r2, pc, #4	; (adr r2, 8001b24 <Btc_MainFunction+0x14>)
 8001b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b24:	08001b35 	.word	0x08001b35
 8001b28:	08001b47 	.word	0x08001b47
 8001b2c:	08001b4d 	.word	0x08001b4d
 8001b30:	08001b41 	.word	0x08001b41
	{
		case BTC_INIT_STATE:
			Btc_Init();
 8001b34:	f7ff fbd2 	bl	80012dc <Btc_Init>
			Btc_ApplState = BTC_RX_STATE;
 8001b38:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <Btc_MainFunction+0x48>)
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	701a      	strb	r2, [r3, #0]
			break;
 8001b3e:	e009      	b.n	8001b54 <Btc_MainFunction+0x44>
		case BTC_DEINIT_STATE:
			Btc_DeInit();
 8001b40:	f7ff f925 	bl	8000d8e <Btc_DeInit>
			break;
 8001b44:	e006      	b.n	8001b54 <Btc_MainFunction+0x44>
		case BTC_RX_STATE:
			Btc_RxVal();
 8001b46:	f7ff fc27 	bl	8001398 <Btc_RxVal>
			break;
 8001b4a:	e003      	b.n	8001b54 <Btc_MainFunction+0x44>
		case BTC_REQUEST_PROCESSING_STATE:
			Btc_RequestState();
 8001b4c:	f7ff f928 	bl	8000da0 <Btc_RequestState>
			break;
 8001b50:	e000      	b.n	8001b54 <Btc_MainFunction+0x44>
		default:
			break;
 8001b52:	bf00      	nop
	}
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	200000ec 	.word	0x200000ec

08001b5c <CenLoc_Init>:
/***********************************************************************************
* Function: CenLoc_Init													   		   *
* Description: Initialize the Central Locking application.				 		   *
************************************************************************************/
StdReturnType CenLoc_Init()
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
	/* Initialize the variables to default value. */
	CenLoc_CurrentState 			= STD_LOW;
 8001b60:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <CenLoc_Init+0x48>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
	CenLoc_PreviousState 			= STD_LOW;
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <CenLoc_Init+0x4c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
	CenLoc_BlinkCounter 			= STD_LOW;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <CenLoc_Init+0x50>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
	CenLoc_FollowMeHomeCounter 		= STD_LOW;
 8001b72:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <CenLoc_Init+0x54>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
	CenLoc_CyclicAlarmCounter		= STD_LOW;
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <CenLoc_Init+0x58>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
	CenLoc_TurnOnLedCounter			= STD_LOW;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <CenLoc_Init+0x5c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
	CenLoc_FollowMeHomeState 		= STD_LOW;
 8001b84:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <CenLoc_Init+0x60>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
	CenLoc_BlinkState 				= STD_LOW;
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <CenLoc_Init+0x64>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
	CenLoc_PreviousStateFlag 		= STD_LOW;
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <CenLoc_Init+0x68>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
	return E_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000139 	.word	0x20000139
 8001ba8:	2000013a 	.word	0x2000013a
 8001bac:	2000013d 	.word	0x2000013d
 8001bb0:	2000013f 	.word	0x2000013f
 8001bb4:	2000013e 	.word	0x2000013e
 8001bb8:	20000140 	.word	0x20000140
 8001bbc:	2000013b 	.word	0x2000013b
 8001bc0:	2000013c 	.word	0x2000013c
 8001bc4:	20000141 	.word	0x20000141

08001bc8 <CenLoc_DeInit>:
/***********************************************************************************
* Function: CenLoc_DeInit													   	   *
* Description: De-initialize the Central Locking application.		   			   *
************************************************************************************/
StdReturnType CenLoc_DeInit()
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
	return E_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <CenLoc_State>:
/***********************************************************************************
* Function: CenLoc_State													   	   *
* Description: Process the current and previous state of the central lock.		   *
************************************************************************************/
VOID CenLoc_State()
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	/* Every time the state of the central lock changes
	 * set the alarm to off. */
	CenLoc_SecAlmStateToOff();
 8001bdc:	f000 f840 	bl	8001c60 <CenLoc_SecAlmStateToOff>
	/* If the current state is different than the previous state
	 * update the variables respectively.
	 * Initialize the security alarm application.
	 * Calls for start of OS timer for lock unlock sequence.*/
	if(CenLoc_PreviousState != CenLoc_CurrentState)
 8001be0:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <CenLoc_State+0x68>)
 8001be2:	781a      	ldrb	r2, [r3, #0]
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <CenLoc_State+0x6c>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d027      	beq.n	8001c3c <CenLoc_State+0x64>
	{
		CenLoc_PreviousStateFlag 	= CenLoc_PreviousState;
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <CenLoc_State+0x68>)
 8001bee:	781a      	ldrb	r2, [r3, #0]
 8001bf0:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <CenLoc_State+0x70>)
 8001bf2:	701a      	strb	r2, [r3, #0]
		CenLoc_PreviousState 		= CenLoc_CurrentState;
 8001bf4:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <CenLoc_State+0x6c>)
 8001bf6:	781a      	ldrb	r2, [r3, #0]
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <CenLoc_State+0x68>)
 8001bfa:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter 		= STD_LOW;
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <CenLoc_State+0x74>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
		CenLoc_FollowMeHomeCounter 	= STD_LOW;
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <CenLoc_State+0x78>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
		CenLoc_CyclicAlarmCounter	= STD_LOW;
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <CenLoc_State+0x7c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
		CenLoc_TurnOnLedCounter		= STD_LOW;
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <CenLoc_State+0x80>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 8001c14:	f001 fffc 	bl	8003c10 <SecAlm_Init>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_CenLoc_LockUnlockSequence_TimerHandle, 250);
 8001c18:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <CenLoc_State+0x84>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	21fa      	movs	r1, #250	; 0xfa
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f014 fc45 	bl	80164ae <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(&CenLoc_BlinkCounter);
 8001c24:	4809      	ldr	r0, [pc, #36]	; (8001c4c <CenLoc_State+0x74>)
 8001c26:	f014 f9c5 	bl	8015fb4 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>
		Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(&CenLoc_CyclicAlarmCounter);
 8001c2a:	480a      	ldr	r0, [pc, #40]	; (8001c54 <CenLoc_State+0x7c>)
 8001c2c:	f014 f9d2 	bl	8015fd4 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>
		Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(&CenLoc_TurnOnLedCounter);
 8001c30:	4809      	ldr	r0, [pc, #36]	; (8001c58 <CenLoc_State+0x80>)
 8001c32:	f014 f9df 	bl	8015ff4 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(&CenLoc_FollowMeHomeCounter);
 8001c36:	4806      	ldr	r0, [pc, #24]	; (8001c50 <CenLoc_State+0x78>)
 8001c38:	f014 f9ec 	bl	8016014 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
	}
	else
	{
		/* do nothing */
	}
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	2000013a 	.word	0x2000013a
 8001c44:	20000139 	.word	0x20000139
 8001c48:	20000141 	.word	0x20000141
 8001c4c:	2000013d 	.word	0x2000013d
 8001c50:	2000013f 	.word	0x2000013f
 8001c54:	2000013e 	.word	0x2000013e
 8001c58:	20000140 	.word	0x20000140
 8001c5c:	20000438 	.word	0x20000438

08001c60 <CenLoc_SecAlmStateToOff>:
/***********************************************************************************
* Function: CenLoc_SecAlmStateToOff												   *
* Description: Turn off the security alarm.										   *
************************************************************************************/
VOID CenLoc_SecAlmStateToOff()
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
	/* The central lock is on, the security alarm goes off. */
	if(CenLoc_CurrentState == STD_HIGH)
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <CenLoc_SecAlmStateToOff+0x14>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <CenLoc_SecAlmStateToOff+0x10>
	{
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 8001c6c:	f001 ffd0 	bl	8003c10 <SecAlm_Init>
	}
	else
	{
		/* do nothing */
	}
}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000139 	.word	0x20000139

08001c78 <CenLoc_FollowMeHome>:
/***********************************************************************************
* Function: CenLoc_FollowMeHome												       *
* Description: Process the state of the follow me home.					 		   *
************************************************************************************/
VOID CenLoc_FollowMeHome()
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
	/* Follow me home is on as long as the timer is on. */
	if(CenLoc_FollowMeHomeCounter == 1)
 8001c7c:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <CenLoc_FollowMeHome+0x3c>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d103      	bne.n	8001c8c <CenLoc_FollowMeHome+0x14>
	{
		CenLoc_FollowMeHomeState = STD_HIGH;
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <CenLoc_FollowMeHome+0x40>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8001c8a:	e011      	b.n	8001cb0 <CenLoc_FollowMeHome+0x38>
	else if(CenLoc_FollowMeHomeCounter == 2)
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <CenLoc_FollowMeHome+0x3c>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d10d      	bne.n	8001cb0 <CenLoc_FollowMeHome+0x38>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_FollowMeHome_TimerHandle);
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <CenLoc_FollowMeHome+0x44>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f014 fc15 	bl	80164c8 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		CenLoc_FollowMeHomeState = STD_LOW;
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <CenLoc_FollowMeHome+0x40>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
		CenLoc_FollowMeHomeCounter = 2;
 8001ca4:	4b03      	ldr	r3, [pc, #12]	; (8001cb4 <CenLoc_FollowMeHome+0x3c>)
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(&CenLoc_FollowMeHomeCounter);
 8001caa:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <CenLoc_FollowMeHome+0x3c>)
 8001cac:	f014 f9b2 	bl	8016014 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	2000013f 	.word	0x2000013f
 8001cb8:	2000013b 	.word	0x2000013b
 8001cbc:	20000444 	.word	0x20000444

08001cc0 <CenLoc_UnlockSequence>:
/***********************************************************************************
* Function: CenLoc_UnlockSequence												   *
* Description: Process the unlock sequence. 		   							   *
************************************************************************************/
VOID CenLoc_UnlockSequence()
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
	/* Stop the timer used for the security alarm LED. */
	Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLed_TurnOnCyclic_TimerHandle);
 8001cc4:	4b4c      	ldr	r3, [pc, #304]	; (8001df8 <CenLoc_UnlockSequence+0x138>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f014 fbfd 	bl	80164c8 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
	/* Turn on the door LEDs. */
	if(CenLoc_PreviousStateFlag == STD_LOW)
 8001cce:	4b4b      	ldr	r3, [pc, #300]	; (8001dfc <CenLoc_UnlockSequence+0x13c>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d103      	bne.n	8001cde <CenLoc_UnlockSequence+0x1e>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel1);
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4849      	ldr	r0, [pc, #292]	; (8001e00 <CenLoc_UnlockSequence+0x140>)
 8001cda:	f014 fa05 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
	else
	{
		/* do nothing */
	}
	/* Process follow me home state. */
	CenLoc_FollowMeHome();
 8001cde:	f7ff ffcb 	bl	8001c78 <CenLoc_FollowMeHome>
	/* Sets previous state to high so that on locking it is taken into consideration. */
	localPreviousState = STD_HIGH;
 8001ce2:	4b48      	ldr	r3, [pc, #288]	; (8001e04 <CenLoc_UnlockSequence+0x144>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	701a      	strb	r2, [r3, #0]
	/* Unlocking sequence consists of triggering the hazard lights twice on and twice off.*/
	if(CenLoc_BlinkCounter <= 3)
 8001ce8:	4b47      	ldr	r3, [pc, #284]	; (8001e08 <CenLoc_UnlockSequence+0x148>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d86f      	bhi.n	8001dd0 <CenLoc_UnlockSequence+0x110>
	{
		/* On and off period for the hazard lights and buzzer is defined in the OS timer start call. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 8001cf0:	4b46      	ldr	r3, [pc, #280]	; (8001e0c <CenLoc_UnlockSequence+0x14c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f014 fbd8 	bl	80164ae <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		/* Start the OS timer for the follow me home. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_FollowMeHome_TimerHandle) == 0)
 8001cfe:	4b44      	ldr	r3, [pc, #272]	; (8001e10 <CenLoc_UnlockSequence+0x150>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f010 fd65 	bl	80127d2 <osTimerIsRunning>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d106      	bne.n	8001d1c <CenLoc_UnlockSequence+0x5c>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_FollowMeHome_TimerHandle, 10000);
 8001d0e:	4b40      	ldr	r3, [pc, #256]	; (8001e10 <CenLoc_UnlockSequence+0x150>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f242 7110 	movw	r1, #10000	; 0x2710
 8001d16:	4618      	mov	r0, r3
 8001d18:	f014 fbc9 	bl	80164ae <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		{
			/* do nothing */
		}
		/* Set the follow me home timer state variable to one to prevent activation of the follow me home
		 * when it is not requested. Upon expiration, the timer callback increments this variable. */
		CenLoc_FollowMeHomeCounter = 1;
 8001d1c:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <CenLoc_UnlockSequence+0x154>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(&CenLoc_FollowMeHomeCounter);
 8001d22:	483c      	ldr	r0, [pc, #240]	; (8001e14 <CenLoc_UnlockSequence+0x154>)
 8001d24:	f014 f976 	bl	8016014 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
		/* Process the on off states of the hazard lights and the buzzer. */
		switch(CenLoc_BlinkCounter)
 8001d28:	4b37      	ldr	r3, [pc, #220]	; (8001e08 <CenLoc_UnlockSequence+0x148>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b03      	cmp	r3, #3
 8001d2e:	d85f      	bhi.n	8001df0 <CenLoc_UnlockSequence+0x130>
 8001d30:	a201      	add	r2, pc, #4	; (adr r2, 8001d38 <CenLoc_UnlockSequence+0x78>)
 8001d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d36:	bf00      	nop
 8001d38:	08001d49 	.word	0x08001d49
 8001d3c:	08001d6b 	.word	0x08001d6b
 8001d40:	08001d8d 	.word	0x08001d8d
 8001d44:	08001daf 	.word	0x08001daf
		{
			case 0:
				CenLoc_BlinkState = STD_HIGH;
 8001d48:	4b33      	ldr	r3, [pc, #204]	; (8001e18 <CenLoc_UnlockSequence+0x158>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001d4e:	2108      	movs	r1, #8
 8001d50:	4832      	ldr	r0, [pc, #200]	; (8001e1c <CenLoc_UnlockSequence+0x15c>)
 8001d52:	f014 f9c9 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001d56:	210c      	movs	r1, #12
 8001d58:	4830      	ldr	r0, [pc, #192]	; (8001e1c <CenLoc_UnlockSequence+0x15c>)
 8001d5a:	f014 f9c5 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001d5e:	4b2e      	ldr	r3, [pc, #184]	; (8001e18 <CenLoc_UnlockSequence+0x158>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f972 	bl	800204c <CenLoc_ToggleBuzzer>
				break;
 8001d68:	e043      	b.n	8001df2 <CenLoc_UnlockSequence+0x132>
			case 1:
				CenLoc_BlinkState = STD_LOW;
 8001d6a:	4b2b      	ldr	r3, [pc, #172]	; (8001e18 <CenLoc_UnlockSequence+0x158>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001d70:	2108      	movs	r1, #8
 8001d72:	482a      	ldr	r0, [pc, #168]	; (8001e1c <CenLoc_UnlockSequence+0x15c>)
 8001d74:	f014 f9b8 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001d78:	210c      	movs	r1, #12
 8001d7a:	4828      	ldr	r0, [pc, #160]	; (8001e1c <CenLoc_UnlockSequence+0x15c>)
 8001d7c:	f014 f9b4 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001d80:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <CenLoc_UnlockSequence+0x158>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 f961 	bl	800204c <CenLoc_ToggleBuzzer>
				break;
 8001d8a:	e032      	b.n	8001df2 <CenLoc_UnlockSequence+0x132>
			case 2:
				CenLoc_BlinkState = STD_HIGH;
 8001d8c:	4b22      	ldr	r3, [pc, #136]	; (8001e18 <CenLoc_UnlockSequence+0x158>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001d92:	2108      	movs	r1, #8
 8001d94:	4821      	ldr	r0, [pc, #132]	; (8001e1c <CenLoc_UnlockSequence+0x15c>)
 8001d96:	f014 f9a7 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001d9a:	210c      	movs	r1, #12
 8001d9c:	481f      	ldr	r0, [pc, #124]	; (8001e1c <CenLoc_UnlockSequence+0x15c>)
 8001d9e:	f014 f9a3 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001da2:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <CenLoc_UnlockSequence+0x158>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 f950 	bl	800204c <CenLoc_ToggleBuzzer>
				break;
 8001dac:	e021      	b.n	8001df2 <CenLoc_UnlockSequence+0x132>
			case 3:
				CenLoc_BlinkState = STD_LOW;
 8001dae:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <CenLoc_UnlockSequence+0x158>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001db4:	2108      	movs	r1, #8
 8001db6:	4819      	ldr	r0, [pc, #100]	; (8001e1c <CenLoc_UnlockSequence+0x15c>)
 8001db8:	f014 f996 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001dbc:	210c      	movs	r1, #12
 8001dbe:	4817      	ldr	r0, [pc, #92]	; (8001e1c <CenLoc_UnlockSequence+0x15c>)
 8001dc0:	f014 f992 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001dc4:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <CenLoc_UnlockSequence+0x158>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 f93f 	bl	800204c <CenLoc_ToggleBuzzer>
				break;
 8001dce:	e010      	b.n	8001df2 <CenLoc_UnlockSequence+0x132>
			default:
				break;
		}
	}/* After the sequence is completed, stop the timers and set the variables related to this sequence to out of bounds values to prevent triggering when not requested. */
	else if(CenLoc_BlinkCounter >= 3)
 8001dd0:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <CenLoc_UnlockSequence+0x148>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d90c      	bls.n	8001df2 <CenLoc_UnlockSequence+0x132>
	{
		CenLoc_BlinkState = 2;
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <CenLoc_UnlockSequence+0x158>)
 8001dda:	2202      	movs	r2, #2
 8001ddc:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter = 6;
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <CenLoc_UnlockSequence+0x148>)
 8001de0:	2206      	movs	r2, #6
 8001de2:	701a      	strb	r2, [r3, #0]
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_CenLoc_LockUnlockSequence_TimerHandle);
 8001de4:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <CenLoc_UnlockSequence+0x160>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f014 fb6d 	bl	80164c8 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
	}
	else
	{
		/* do nothing */
	}
}
 8001dee:	e000      	b.n	8001df2 <CenLoc_UnlockSequence+0x132>
				break;
 8001df0:	bf00      	nop
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	2000043c 	.word	0x2000043c
 8001dfc:	20000141 	.word	0x20000141
 8001e00:	2000080c 	.word	0x2000080c
 8001e04:	20000142 	.word	0x20000142
 8001e08:	2000013d 	.word	0x2000013d
 8001e0c:	20000448 	.word	0x20000448
 8001e10:	20000444 	.word	0x20000444
 8001e14:	2000013f 	.word	0x2000013f
 8001e18:	2000013c 	.word	0x2000013c
 8001e1c:	200008c0 	.word	0x200008c0
 8001e20:	20000438 	.word	0x20000438

08001e24 <CenLoc_LockSequence>:
/***********************************************************************************
* Function: CenLoc_LockSequence													   *
* Description: Process the lock sequence.								 		   *
************************************************************************************/
VOID CenLoc_LockSequence()
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
	/* Turn off the door LEDs. */
	if(CenLoc_PreviousStateFlag == STD_HIGH)
 8001e28:	4b37      	ldr	r3, [pc, #220]	; (8001f08 <CenLoc_LockSequence+0xe4>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d103      	bne.n	8001e38 <CenLoc_LockSequence+0x14>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel1);
 8001e30:	2100      	movs	r1, #0
 8001e32:	4836      	ldr	r0, [pc, #216]	; (8001f0c <CenLoc_LockSequence+0xe8>)
 8001e34:	f014 f965 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Process follow me home state.*/
	CenLoc_FollowMeHome();
 8001e38:	f7ff ff1e 	bl	8001c78 <CenLoc_FollowMeHome>
	/* If the central lock has been on previously
	 * and the variable related to the state of the timer is less than the value of
	 * how many times the hazard lights should turn on on locking, proceed with the processing. */
	if(CenLoc_BlinkCounter <= 1 && localPreviousState == STD_HIGH)
 8001e3c:	4b34      	ldr	r3, [pc, #208]	; (8001f10 <CenLoc_LockSequence+0xec>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d84d      	bhi.n	8001ee0 <CenLoc_LockSequence+0xbc>
 8001e44:	4b33      	ldr	r3, [pc, #204]	; (8001f14 <CenLoc_LockSequence+0xf0>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d149      	bne.n	8001ee0 <CenLoc_LockSequence+0xbc>
	{
		/* On and off period for the hazard lights and buzzer is defined in the OS timer start call. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 8001e4c:	4b32      	ldr	r3, [pc, #200]	; (8001f18 <CenLoc_LockSequence+0xf4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001e54:	4618      	mov	r0, r3
 8001e56:	f014 fb2a 	bl	80164ae <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		/* Start the OS timer for the follow me home. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_FollowMeHome_TimerHandle) == 0)
 8001e5a:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <CenLoc_LockSequence+0xf8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f010 fcb7 	bl	80127d2 <osTimerIsRunning>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <CenLoc_LockSequence+0x54>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_FollowMeHome_TimerHandle, 10000);
 8001e6a:	4b2c      	ldr	r3, [pc, #176]	; (8001f1c <CenLoc_LockSequence+0xf8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f242 7110 	movw	r1, #10000	; 0x2710
 8001e72:	4618      	mov	r0, r3
 8001e74:	f014 fb1b 	bl	80164ae <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		{
			/* do nothing */
		}
		/* Set the follow me home timer state variable to one to prevent activation of the follow me home
		 * when it is not requested. Upon expiration, the timer callback increments this variable. */
		CenLoc_FollowMeHomeCounter = 1;
 8001e78:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <CenLoc_LockSequence+0xfc>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(&CenLoc_FollowMeHomeCounter);
 8001e7e:	4828      	ldr	r0, [pc, #160]	; (8001f20 <CenLoc_LockSequence+0xfc>)
 8001e80:	f014 f8c8 	bl	8016014 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
		/* Process the on off states of the hazard lights and buzzer. */
		switch(CenLoc_BlinkCounter)
 8001e84:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <CenLoc_LockSequence+0xec>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d002      	beq.n	8001e92 <CenLoc_LockSequence+0x6e>
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d011      	beq.n	8001eb4 <CenLoc_LockSequence+0x90>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
				localPreviousState = STD_LOW;
				break;
			default:
				break;
 8001e90:	e024      	b.n	8001edc <CenLoc_LockSequence+0xb8>
				CenLoc_BlinkState = STD_HIGH;
 8001e92:	4b24      	ldr	r3, [pc, #144]	; (8001f24 <CenLoc_LockSequence+0x100>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001e98:	2108      	movs	r1, #8
 8001e9a:	4823      	ldr	r0, [pc, #140]	; (8001f28 <CenLoc_LockSequence+0x104>)
 8001e9c:	f014 f924 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001ea0:	210c      	movs	r1, #12
 8001ea2:	4821      	ldr	r0, [pc, #132]	; (8001f28 <CenLoc_LockSequence+0x104>)
 8001ea4:	f014 f920 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001ea8:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <CenLoc_LockSequence+0x100>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f000 f8cd 	bl	800204c <CenLoc_ToggleBuzzer>
				break;
 8001eb2:	e013      	b.n	8001edc <CenLoc_LockSequence+0xb8>
				CenLoc_BlinkState = STD_LOW;
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <CenLoc_LockSequence+0x100>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001eba:	2108      	movs	r1, #8
 8001ebc:	481a      	ldr	r0, [pc, #104]	; (8001f28 <CenLoc_LockSequence+0x104>)
 8001ebe:	f014 f913 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001ec2:	210c      	movs	r1, #12
 8001ec4:	4818      	ldr	r0, [pc, #96]	; (8001f28 <CenLoc_LockSequence+0x104>)
 8001ec6:	f014 f90f 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001eca:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <CenLoc_LockSequence+0x100>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 f8bc 	bl	800204c <CenLoc_ToggleBuzzer>
				localPreviousState = STD_LOW;
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <CenLoc_LockSequence+0xf0>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
				break;
 8001eda:	bf00      	nop
		switch(CenLoc_BlinkCounter)
 8001edc:	bf00      	nop
	}
	else
	{
		/* do nothing */
	}
}
 8001ede:	e011      	b.n	8001f04 <CenLoc_LockSequence+0xe0>
	else if(CenLoc_BlinkCounter == 2)
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <CenLoc_LockSequence+0xec>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d10d      	bne.n	8001f04 <CenLoc_LockSequence+0xe0>
		CenLoc_BlinkState = 2;
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <CenLoc_LockSequence+0x100>)
 8001eea:	2202      	movs	r2, #2
 8001eec:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter = 4;
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <CenLoc_LockSequence+0xec>)
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(&CenLoc_BlinkCounter);
 8001ef4:	4806      	ldr	r0, [pc, #24]	; (8001f10 <CenLoc_LockSequence+0xec>)
 8001ef6:	f014 f85d 	bl	8015fb4 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_CenLoc_LockUnlockSequence_TimerHandle);
 8001efa:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <CenLoc_LockSequence+0x108>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f014 fae2 	bl	80164c8 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000141 	.word	0x20000141
 8001f0c:	2000080c 	.word	0x2000080c
 8001f10:	2000013d 	.word	0x2000013d
 8001f14:	20000142 	.word	0x20000142
 8001f18:	20000448 	.word	0x20000448
 8001f1c:	20000444 	.word	0x20000444
 8001f20:	2000013f 	.word	0x2000013f
 8001f24:	2000013c 	.word	0x2000013c
 8001f28:	200008c0 	.word	0x200008c0
 8001f2c:	20000438 	.word	0x20000438

08001f30 <CenLoc_ControlAlarmLed>:
/***********************************************************************************
* Function: CenLoc_ControlAlarmLed												   *
* Description: Controls the security alarm LED 		   							   *
************************************************************************************/
VOID CenLoc_ControlAlarmLed()
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
	/* Check if the central lock state is set to high. */
	if(CenLoc_CurrentState == STD_HIGH)
 8001f34:	4b2f      	ldr	r3, [pc, #188]	; (8001ff4 <CenLoc_ControlAlarmLed+0xc4>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d10b      	bne.n	8001f54 <CenLoc_ControlAlarmLed+0x24>
	{
		/* Set the security alarm LED to off. */
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f001 fe9f 	bl	8003c80 <SecAlm_ToggleAlarmLed>
		/* Set the timer flag to 0. */
		CenLoc_TurnOnLedCounter = STD_LOW;
 8001f42:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <CenLoc_ControlAlarmLed+0xc8>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
		/* Stop the timer related to the LED cyclic trigger. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLedTurnOn_TimerHandle);
 8001f48:	4b2c      	ldr	r3, [pc, #176]	; (8001ffc <CenLoc_ControlAlarmLed+0xcc>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f014 fabb 	bl	80164c8 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		else
		{
			/* do nothing */
		}
	}
}
 8001f52:	e04c      	b.n	8001fee <CenLoc_ControlAlarmLed+0xbe>
	else if(CenLoc_CurrentState == STD_LOW)
 8001f54:	4b27      	ldr	r3, [pc, #156]	; (8001ff4 <CenLoc_ControlAlarmLed+0xc4>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d148      	bne.n	8001fee <CenLoc_ControlAlarmLed+0xbe>
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLed_TurnOnCyclic_TimerHandle) == 0 && Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLedTurnOn_TimerHandle) == 0)
 8001f5c:	4b28      	ldr	r3, [pc, #160]	; (8002000 <CenLoc_ControlAlarmLed+0xd0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f010 fc36 	bl	80127d2 <osTimerIsRunning>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10e      	bne.n	8001f8a <CenLoc_ControlAlarmLed+0x5a>
 8001f6c:	4b23      	ldr	r3, [pc, #140]	; (8001ffc <CenLoc_ControlAlarmLed+0xcc>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f010 fc2e 	bl	80127d2 <osTimerIsRunning>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d106      	bne.n	8001f8a <CenLoc_ControlAlarmLed+0x5a>
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmLed_TurnOnCyclic_TimerHandle, 3750);
 8001f7c:	4b20      	ldr	r3, [pc, #128]	; (8002000 <CenLoc_ControlAlarmLed+0xd0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f640 61a6 	movw	r1, #3750	; 0xea6
 8001f84:	4618      	mov	r0, r3
 8001f86:	f014 fa92 	bl	80164ae <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		if(CenLoc_CyclicAlarmCounter == 1)
 8001f8a:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <CenLoc_ControlAlarmLed+0xd4>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d12d      	bne.n	8001fee <CenLoc_ControlAlarmLed+0xbe>
			if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLedTurnOn_TimerHandle) == 0)
 8001f92:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <CenLoc_ControlAlarmLed+0xcc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f010 fc1b 	bl	80127d2 <osTimerIsRunning>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d105      	bne.n	8001fae <CenLoc_ControlAlarmLed+0x7e>
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmLedTurnOn_TimerHandle, 250);
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <CenLoc_ControlAlarmLed+0xcc>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	21fa      	movs	r1, #250	; 0xfa
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f014 fa80 	bl	80164ae <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
			if(CenLoc_TurnOnLedCounter < 1)
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <CenLoc_ControlAlarmLed+0xc8>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d103      	bne.n	8001fbe <CenLoc_ControlAlarmLed+0x8e>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_HIGH);
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	f001 fe62 	bl	8003c80 <SecAlm_ToggleAlarmLed>
}
 8001fbc:	e017      	b.n	8001fee <CenLoc_ControlAlarmLed+0xbe>
			else if(CenLoc_TurnOnLedCounter == 1)
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <CenLoc_ControlAlarmLed+0xc8>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d113      	bne.n	8001fee <CenLoc_ControlAlarmLed+0xbe>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f001 fe5a 	bl	8003c80 <SecAlm_ToggleAlarmLed>
				CenLoc_TurnOnLedCounter = 0;
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <CenLoc_ControlAlarmLed+0xc8>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
				CenLoc_CyclicAlarmCounter = 0;
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <CenLoc_ControlAlarmLed+0xd4>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
				Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(&CenLoc_CyclicAlarmCounter);
 8001fd8:	480a      	ldr	r0, [pc, #40]	; (8002004 <CenLoc_ControlAlarmLed+0xd4>)
 8001fda:	f013 fffb 	bl	8015fd4 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>
				Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(&CenLoc_TurnOnLedCounter);
 8001fde:	4806      	ldr	r0, [pc, #24]	; (8001ff8 <CenLoc_ControlAlarmLed+0xc8>)
 8001fe0:	f014 f808 	bl	8015ff4 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLedTurnOn_TimerHandle);
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <CenLoc_ControlAlarmLed+0xcc>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f014 fa6d 	bl	80164c8 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000139 	.word	0x20000139
 8001ff8:	20000140 	.word	0x20000140
 8001ffc:	20000440 	.word	0x20000440
 8002000:	2000043c 	.word	0x2000043c
 8002004:	2000013e 	.word	0x2000013e

08002008 <CenLoc_LockUnlockStates>:
/***********************************************************************************
* Function: CenLoc_LockUnlockStates												   *
* Description: Check for the state of the central lock.					 		   *
************************************************************************************/
VOID CenLoc_LockUnlockStates()
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
	/* If the central lock state is set to high and the security alarm is set to off. */
	if(CenLoc_CurrentState == STD_HIGH && Rte_P_SecAlm_SecAlmPort_SecAlm_Trigger == STD_LOW)
 800200c:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <CenLoc_LockUnlockStates+0x3c>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d108      	bne.n	8002026 <CenLoc_LockUnlockStates+0x1e>
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <CenLoc_LockUnlockStates+0x40>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d104      	bne.n	8002026 <CenLoc_LockUnlockStates+0x1e>
	{
		/* Perform the related activities. */
		CenLoc_UnlockSequence();
 800201c:	f7ff fe50 	bl	8001cc0 <CenLoc_UnlockSequence>
		CenLoc_ControlAlarmLed();
 8002020:	f7ff ff86 	bl	8001f30 <CenLoc_ControlAlarmLed>
	}
	else
	{
		/* do nothing */
	}
}
 8002024:	e00b      	b.n	800203e <CenLoc_LockUnlockStates+0x36>
	else if(CenLoc_CurrentState == STD_LOW && Rte_P_SecAlm_SecAlmPort_SecAlm_Trigger == STD_LOW)
 8002026:	4b07      	ldr	r3, [pc, #28]	; (8002044 <CenLoc_LockUnlockStates+0x3c>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d107      	bne.n	800203e <CenLoc_LockUnlockStates+0x36>
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <CenLoc_LockUnlockStates+0x40>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d103      	bne.n	800203e <CenLoc_LockUnlockStates+0x36>
		CenLoc_LockSequence();
 8002036:	f7ff fef5 	bl	8001e24 <CenLoc_LockSequence>
		CenLoc_ControlAlarmLed();
 800203a:	f7ff ff79 	bl	8001f30 <CenLoc_ControlAlarmLed>
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000139 	.word	0x20000139
 8002048:	200001dd 	.word	0x200001dd

0800204c <CenLoc_ToggleBuzzer>:
/***********************************************************************************
* Function: CenLoc_ToggleBuzzer													   *
* Description: Trigger central lock buzzer. 		   							   *
************************************************************************************/
VOID CenLoc_ToggleBuzzer(uint8 PinState)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(CENLOC_BUZZER_PORT, CENLOC_BUZZER_PIN, PinState);
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	461a      	mov	r2, r3
 800205a:	2104      	movs	r1, #4
 800205c:	4803      	ldr	r0, [pc, #12]	; (800206c <CenLoc_ToggleBuzzer+0x20>)
 800205e:	f014 fa14 	bl	801648a <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40020400 	.word	0x40020400

08002070 <CenLoc_MainFunction>:
/***********************************************************************************
* Function: CenLoc_MainFunction													   *
* Description: Central lock main function. Process the states of the application.  *
************************************************************************************/
VOID CenLoc_MainFunction()
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0

	/* Process application state. */
	switch(CenLoc_ApplState)
 8002074:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <CenLoc_MainFunction+0x3c>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b02      	cmp	r3, #2
 800207a:	d00c      	beq.n	8002096 <CenLoc_MainFunction+0x26>
 800207c:	2b02      	cmp	r3, #2
 800207e:	dc12      	bgt.n	80020a6 <CenLoc_MainFunction+0x36>
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <CenLoc_MainFunction+0x1a>
 8002084:	2b01      	cmp	r3, #1
 8002086:	d009      	beq.n	800209c <CenLoc_MainFunction+0x2c>
		case CENLOC_LOCKUNLOCK_STATE:
			CenLoc_State();
			CenLoc_LockUnlockStates();
			break;
		default:
			break;
 8002088:	e00d      	b.n	80020a6 <CenLoc_MainFunction+0x36>
			CenLoc_Init();
 800208a:	f7ff fd67 	bl	8001b5c <CenLoc_Init>
			CenLoc_ApplState = CENLOC_LOCKUNLOCK_STATE;
 800208e:	4b07      	ldr	r3, [pc, #28]	; (80020ac <CenLoc_MainFunction+0x3c>)
 8002090:	2201      	movs	r2, #1
 8002092:	701a      	strb	r2, [r3, #0]
			break;
 8002094:	e008      	b.n	80020a8 <CenLoc_MainFunction+0x38>
			CenLoc_DeInit();
 8002096:	f7ff fd97 	bl	8001bc8 <CenLoc_DeInit>
			break;
 800209a:	e005      	b.n	80020a8 <CenLoc_MainFunction+0x38>
			CenLoc_State();
 800209c:	f7ff fd9c 	bl	8001bd8 <CenLoc_State>
			CenLoc_LockUnlockStates();
 80020a0:	f7ff ffb2 	bl	8002008 <CenLoc_LockUnlockStates>
			break;
 80020a4:	e000      	b.n	80020a8 <CenLoc_MainFunction+0x38>
			break;
 80020a6:	bf00      	nop
	}
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20000138 	.word	0x20000138

080020b0 <DiagCtrl_Init>:
/***********************************************************************************
* Function: DiagCtrl_Init										   		   		   *
* Description: Application initialization.		 		   						   *
************************************************************************************/
StdReturnType DiagCtrl_Init()
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
	DiagCtrl_RequestValue 	= STD_LOW;
 80020b4:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <DiagCtrl_Init+0x24>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
	DiagCtrl_FaultValue 	= STD_LOW;
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <DiagCtrl_Init+0x28>)
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
	DiagCtrl_ApplState 		= DIAGCTRL_PROCESSDATA_STATE;
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <DiagCtrl_Init+0x2c>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	701a      	strb	r2, [r3, #0]
	return E_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20000143 	.word	0x20000143
 80020d8:	20000144 	.word	0x20000144
 80020dc:	20000145 	.word	0x20000145

080020e0 <DiagCtrl_DeInit>:
/***********************************************************************************
* Function: DiagCtrl_DeInit										   		   		   *
* Description: Application de-initialization.		 		   					   *
************************************************************************************/
StdReturnType DiagCtrl_DeInit()
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
	return E_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <DiagCtrl_MainFunction>:
/***********************************************************************************
* Function: DiagCtrl_MainFunction										   		   *
* Description: Application main function.		 		   						   *
************************************************************************************/
VOID DiagCtrl_MainFunction()
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
	switch(DiagCtrl_ApplState)
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <DiagCtrl_MainFunction+0x34>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d009      	beq.n	8002110 <DiagCtrl_MainFunction+0x20>
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	dc0d      	bgt.n	800211c <DiagCtrl_MainFunction+0x2c>
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <DiagCtrl_MainFunction+0x1a>
 8002104:	2b01      	cmp	r3, #1
 8002106:	d006      	beq.n	8002116 <DiagCtrl_MainFunction+0x26>
			break;
		case DIAGCTRL_PROCESSDATA_STATE:
			DiagCtrl_ProcessRequestedData();
			break;
		default:
			break;
 8002108:	e008      	b.n	800211c <DiagCtrl_MainFunction+0x2c>
			DiagCtrl_Init();
 800210a:	f7ff ffd1 	bl	80020b0 <DiagCtrl_Init>
			break;
 800210e:	e006      	b.n	800211e <DiagCtrl_MainFunction+0x2e>
			DiagCtrl_DeInit();
 8002110:	f7ff ffe6 	bl	80020e0 <DiagCtrl_DeInit>
			break;
 8002114:	e003      	b.n	800211e <DiagCtrl_MainFunction+0x2e>
			DiagCtrl_ProcessRequestedData();
 8002116:	f000 f807 	bl	8002128 <DiagCtrl_ProcessRequestedData>
			break;
 800211a:	e000      	b.n	800211e <DiagCtrl_MainFunction+0x2e>
			break;
 800211c:	bf00      	nop
	}
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000145 	.word	0x20000145

08002128 <DiagCtrl_ProcessRequestedData>:
/***********************************************************************************
* Function: DiagCtrl_ProcessRequestedData										   *
* Description: Process the measured requested data.		 		   				   *
************************************************************************************/
VOID DiagCtrl_ProcessRequestedData()
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
	static uint8 SpiCanTransceiver_FaultValue_Seven = 0;
	static uint8 CanBusOff_FaultValue = 0;
	static uint8 CanRx_FaultValue = 0;
	static uint8 CanTx_FaultValue = 0;

	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&LightSensor_RequestedValue, 0);
 800212c:	2100      	movs	r1, #0
 800212e:	48a2      	ldr	r0, [pc, #648]	; (80023b8 <DiagCtrl_ProcessRequestedData+0x290>)
 8002130:	f014 f828 	bl	8016184 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&VibrationSensor_RequestedValue, 1);
 8002134:	2101      	movs	r1, #1
 8002136:	48a1      	ldr	r0, [pc, #644]	; (80023bc <DiagCtrl_ProcessRequestedData+0x294>)
 8002138:	f014 f824 	bl	8016184 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&AirQualitySensor_RequestedValue, 2);
 800213c:	2102      	movs	r1, #2
 800213e:	48a0      	ldr	r0, [pc, #640]	; (80023c0 <DiagCtrl_ProcessRequestedData+0x298>)
 8002140:	f014 f820 	bl	8016184 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&TemperatureSensor_RequestedValue, 3);
 8002144:	2103      	movs	r1, #3
 8002146:	489f      	ldr	r0, [pc, #636]	; (80023c4 <DiagCtrl_ProcessRequestedData+0x29c>)
 8002148:	f014 f81c 	bl	8016184 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_One, 24);
 800214c:	2118      	movs	r1, #24
 800214e:	489e      	ldr	r0, [pc, #632]	; (80023c8 <DiagCtrl_ProcessRequestedData+0x2a0>)
 8002150:	f013 fd88 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Two, 25);
 8002154:	2119      	movs	r1, #25
 8002156:	489d      	ldr	r0, [pc, #628]	; (80023cc <DiagCtrl_ProcessRequestedData+0x2a4>)
 8002158:	f013 fd84 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Three, 26);
 800215c:	211a      	movs	r1, #26
 800215e:	489c      	ldr	r0, [pc, #624]	; (80023d0 <DiagCtrl_ProcessRequestedData+0x2a8>)
 8002160:	f013 fd80 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Four, 27);
 8002164:	211b      	movs	r1, #27
 8002166:	489b      	ldr	r0, [pc, #620]	; (80023d4 <DiagCtrl_ProcessRequestedData+0x2ac>)
 8002168:	f013 fd7c 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_One, 48);
 800216c:	2130      	movs	r1, #48	; 0x30
 800216e:	489a      	ldr	r0, [pc, #616]	; (80023d8 <DiagCtrl_ProcessRequestedData+0x2b0>)
 8002170:	f013 fd78 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Two, 49);
 8002174:	2131      	movs	r1, #49	; 0x31
 8002176:	4899      	ldr	r0, [pc, #612]	; (80023dc <DiagCtrl_ProcessRequestedData+0x2b4>)
 8002178:	f013 fd74 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Three, 50);
 800217c:	2132      	movs	r1, #50	; 0x32
 800217e:	4898      	ldr	r0, [pc, #608]	; (80023e0 <DiagCtrl_ProcessRequestedData+0x2b8>)
 8002180:	f013 fd70 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Four, 51);
 8002184:	2133      	movs	r1, #51	; 0x33
 8002186:	4897      	ldr	r0, [pc, #604]	; (80023e4 <DiagCtrl_ProcessRequestedData+0x2bc>)
 8002188:	f013 fd6c 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Five, 52);
 800218c:	2134      	movs	r1, #52	; 0x34
 800218e:	4896      	ldr	r0, [pc, #600]	; (80023e8 <DiagCtrl_ProcessRequestedData+0x2c0>)
 8002190:	f013 fd68 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Six, 53);
 8002194:	2135      	movs	r1, #53	; 0x35
 8002196:	4895      	ldr	r0, [pc, #596]	; (80023ec <DiagCtrl_ProcessRequestedData+0x2c4>)
 8002198:	f013 fd64 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Seven, 54);
 800219c:	2136      	movs	r1, #54	; 0x36
 800219e:	4894      	ldr	r0, [pc, #592]	; (80023f0 <DiagCtrl_ProcessRequestedData+0x2c8>)
 80021a0:	f013 fd60 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Eight, 55);
 80021a4:	2137      	movs	r1, #55	; 0x37
 80021a6:	4893      	ldr	r0, [pc, #588]	; (80023f4 <DiagCtrl_ProcessRequestedData+0x2cc>)
 80021a8:	f013 fd5c 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_One, 40);
 80021ac:	2128      	movs	r1, #40	; 0x28
 80021ae:	4892      	ldr	r0, [pc, #584]	; (80023f8 <DiagCtrl_ProcessRequestedData+0x2d0>)
 80021b0:	f013 fd58 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Two, 41);
 80021b4:	2129      	movs	r1, #41	; 0x29
 80021b6:	4891      	ldr	r0, [pc, #580]	; (80023fc <DiagCtrl_ProcessRequestedData+0x2d4>)
 80021b8:	f013 fd54 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Three, 42);
 80021bc:	212a      	movs	r1, #42	; 0x2a
 80021be:	4890      	ldr	r0, [pc, #576]	; (8002400 <DiagCtrl_ProcessRequestedData+0x2d8>)
 80021c0:	f013 fd50 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Four, 43);
 80021c4:	212b      	movs	r1, #43	; 0x2b
 80021c6:	488f      	ldr	r0, [pc, #572]	; (8002404 <DiagCtrl_ProcessRequestedData+0x2dc>)
 80021c8:	f013 fd4c 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Five, 44);
 80021cc:	212c      	movs	r1, #44	; 0x2c
 80021ce:	488e      	ldr	r0, [pc, #568]	; (8002408 <DiagCtrl_ProcessRequestedData+0x2e0>)
 80021d0:	f013 fd48 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Six, 45);
 80021d4:	212d      	movs	r1, #45	; 0x2d
 80021d6:	488d      	ldr	r0, [pc, #564]	; (800240c <DiagCtrl_ProcessRequestedData+0x2e4>)
 80021d8:	f013 fd44 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Seven, 46);
 80021dc:	212e      	movs	r1, #46	; 0x2e
 80021de:	488c      	ldr	r0, [pc, #560]	; (8002410 <DiagCtrl_ProcessRequestedData+0x2e8>)
 80021e0:	f013 fd40 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Eight, 47);
 80021e4:	212f      	movs	r1, #47	; 0x2f
 80021e6:	488b      	ldr	r0, [pc, #556]	; (8002414 <DiagCtrl_ProcessRequestedData+0x2ec>)
 80021e8:	f013 fd3c 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&SpiCanTransceiver_FaultValue_One, 33);
 80021ec:	2121      	movs	r1, #33	; 0x21
 80021ee:	488a      	ldr	r0, [pc, #552]	; (8002418 <DiagCtrl_ProcessRequestedData+0x2f0>)
 80021f0:	f013 fd38 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&SpiCanTransceiver_FaultValue_Two, 34);
 80021f4:	2122      	movs	r1, #34	; 0x22
 80021f6:	4889      	ldr	r0, [pc, #548]	; (800241c <DiagCtrl_ProcessRequestedData+0x2f4>)
 80021f8:	f013 fd34 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&SpiCanTransceiver_FaultValue_Three, 35);
 80021fc:	2123      	movs	r1, #35	; 0x23
 80021fe:	4888      	ldr	r0, [pc, #544]	; (8002420 <DiagCtrl_ProcessRequestedData+0x2f8>)
 8002200:	f013 fd30 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&SpiCanTransceiver_FaultValue_Four, 36);
 8002204:	2124      	movs	r1, #36	; 0x24
 8002206:	4887      	ldr	r0, [pc, #540]	; (8002424 <DiagCtrl_ProcessRequestedData+0x2fc>)
 8002208:	f013 fd2c 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&SpiCanTransceiver_FaultValue_Five, 37);
 800220c:	2125      	movs	r1, #37	; 0x25
 800220e:	4886      	ldr	r0, [pc, #536]	; (8002428 <DiagCtrl_ProcessRequestedData+0x300>)
 8002210:	f013 fd28 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&SpiCanTransceiver_FaultValue_Six, 38);
 8002214:	2126      	movs	r1, #38	; 0x26
 8002216:	4885      	ldr	r0, [pc, #532]	; (800242c <DiagCtrl_ProcessRequestedData+0x304>)
 8002218:	f013 fd24 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&SpiCanTransceiver_FaultValue_Seven, 39);
 800221c:	2127      	movs	r1, #39	; 0x27
 800221e:	4884      	ldr	r0, [pc, #528]	; (8002430 <DiagCtrl_ProcessRequestedData+0x308>)
 8002220:	f013 fd20 	bl	8015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>

	CanBusOff_FaultValue = Rte_Call_Can_P_CanPort_Can_BusState();
 8002224:	f001 ffb8 	bl	8004198 <Can_BusState>
 8002228:	4603      	mov	r3, r0
 800222a:	461a      	mov	r2, r3
 800222c:	4b81      	ldr	r3, [pc, #516]	; (8002434 <DiagCtrl_ProcessRequestedData+0x30c>)
 800222e:	701a      	strb	r2, [r3, #0]
	CanRx_FaultValue = Rte_Call_Can_P_CanPort_CanOverSpi_isRxErrorPassive();
 8002230:	f00e ffb0 	bl	8011194 <CanOverSpi_isRxErrorPassive>
 8002234:	4603      	mov	r3, r0
 8002236:	461a      	mov	r2, r3
 8002238:	4b7f      	ldr	r3, [pc, #508]	; (8002438 <DiagCtrl_ProcessRequestedData+0x310>)
 800223a:	701a      	strb	r2, [r3, #0]
	CanTx_FaultValue = Rte_Call_Can_P_CanPort_CanOverSpi_isTxErrorPassive();
 800223c:	f00e ffc6 	bl	80111cc <CanOverSpi_isTxErrorPassive>
 8002240:	4603      	mov	r3, r0
 8002242:	461a      	mov	r2, r3
 8002244:	4b7d      	ldr	r3, [pc, #500]	; (800243c <DiagCtrl_ProcessRequestedData+0x314>)
 8002246:	701a      	strb	r2, [r3, #0]

	if(BtcUart_FaultValue_One != 0 ||
 8002248:	4b5f      	ldr	r3, [pc, #380]	; (80023c8 <DiagCtrl_ProcessRequestedData+0x2a0>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10b      	bne.n	8002268 <DiagCtrl_ProcessRequestedData+0x140>
			BtcUart_FaultValue_Two != 0 ||
 8002250:	4b5e      	ldr	r3, [pc, #376]	; (80023cc <DiagCtrl_ProcessRequestedData+0x2a4>)
 8002252:	781b      	ldrb	r3, [r3, #0]
	if(BtcUart_FaultValue_One != 0 ||
 8002254:	2b00      	cmp	r3, #0
 8002256:	d107      	bne.n	8002268 <DiagCtrl_ProcessRequestedData+0x140>
			BtcUart_FaultValue_Three != 0 ||
 8002258:	4b5d      	ldr	r3, [pc, #372]	; (80023d0 <DiagCtrl_ProcessRequestedData+0x2a8>)
 800225a:	781b      	ldrb	r3, [r3, #0]
			BtcUart_FaultValue_Two != 0 ||
 800225c:	2b00      	cmp	r3, #0
 800225e:	d103      	bne.n	8002268 <DiagCtrl_ProcessRequestedData+0x140>
			BtcUart_FaultValue_Four != 0)
 8002260:	4b5c      	ldr	r3, [pc, #368]	; (80023d4 <DiagCtrl_ProcessRequestedData+0x2ac>)
 8002262:	781b      	ldrb	r3, [r3, #0]
			BtcUart_FaultValue_Three != 0 ||
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <DiagCtrl_ProcessRequestedData+0x146>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_BLUETOOTH_MODULE_MALFUNCTION);
 8002268:	2022      	movs	r0, #34	; 0x22
 800226a:	f005 fb7b 	bl	8007964 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(I2cThreeExternalEeeprom_FaultValue_One != 0 ||
 800226e:	4b5a      	ldr	r3, [pc, #360]	; (80023d8 <DiagCtrl_ProcessRequestedData+0x2b0>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d11b      	bne.n	80022ae <DiagCtrl_ProcessRequestedData+0x186>
			I2cThreeExternalEeeprom_FaultValue_Two != 0 ||
 8002276:	4b59      	ldr	r3, [pc, #356]	; (80023dc <DiagCtrl_ProcessRequestedData+0x2b4>)
 8002278:	781b      	ldrb	r3, [r3, #0]
	if(I2cThreeExternalEeeprom_FaultValue_One != 0 ||
 800227a:	2b00      	cmp	r3, #0
 800227c:	d117      	bne.n	80022ae <DiagCtrl_ProcessRequestedData+0x186>
			I2cThreeExternalEeeprom_FaultValue_Three != 0 ||
 800227e:	4b58      	ldr	r3, [pc, #352]	; (80023e0 <DiagCtrl_ProcessRequestedData+0x2b8>)
 8002280:	781b      	ldrb	r3, [r3, #0]
			I2cThreeExternalEeeprom_FaultValue_Two != 0 ||
 8002282:	2b00      	cmp	r3, #0
 8002284:	d113      	bne.n	80022ae <DiagCtrl_ProcessRequestedData+0x186>
			I2cThreeExternalEeeprom_FaultValue_Four != 0 ||
 8002286:	4b57      	ldr	r3, [pc, #348]	; (80023e4 <DiagCtrl_ProcessRequestedData+0x2bc>)
 8002288:	781b      	ldrb	r3, [r3, #0]
			I2cThreeExternalEeeprom_FaultValue_Three != 0 ||
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10f      	bne.n	80022ae <DiagCtrl_ProcessRequestedData+0x186>
			I2cThreeExternalEeeprom_FaultValue_Five != 0 ||
 800228e:	4b56      	ldr	r3, [pc, #344]	; (80023e8 <DiagCtrl_ProcessRequestedData+0x2c0>)
 8002290:	781b      	ldrb	r3, [r3, #0]
			I2cThreeExternalEeeprom_FaultValue_Four != 0 ||
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10b      	bne.n	80022ae <DiagCtrl_ProcessRequestedData+0x186>
			I2cThreeExternalEeeprom_FaultValue_Six != 0 ||
 8002296:	4b55      	ldr	r3, [pc, #340]	; (80023ec <DiagCtrl_ProcessRequestedData+0x2c4>)
 8002298:	781b      	ldrb	r3, [r3, #0]
			I2cThreeExternalEeeprom_FaultValue_Five != 0 ||
 800229a:	2b00      	cmp	r3, #0
 800229c:	d107      	bne.n	80022ae <DiagCtrl_ProcessRequestedData+0x186>
			I2cThreeExternalEeeprom_FaultValue_Seven != 0 ||
 800229e:	4b54      	ldr	r3, [pc, #336]	; (80023f0 <DiagCtrl_ProcessRequestedData+0x2c8>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
			I2cThreeExternalEeeprom_FaultValue_Six != 0 ||
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d103      	bne.n	80022ae <DiagCtrl_ProcessRequestedData+0x186>
			I2cThreeExternalEeeprom_FaultValue_Eight != 0)
 80022a6:	4b53      	ldr	r3, [pc, #332]	; (80023f4 <DiagCtrl_ProcessRequestedData+0x2cc>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
			I2cThreeExternalEeeprom_FaultValue_Seven != 0 ||
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <DiagCtrl_ProcessRequestedData+0x18c>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_EXTERNAL_EEPROM_MODULE_MALFUNCTION);
 80022ae:	2032      	movs	r0, #50	; 0x32
 80022b0:	f005 fb58 	bl	8007964 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(I2cOneLcd_FaultValue_One != 0 ||
 80022b4:	4b50      	ldr	r3, [pc, #320]	; (80023f8 <DiagCtrl_ProcessRequestedData+0x2d0>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d11b      	bne.n	80022f4 <DiagCtrl_ProcessRequestedData+0x1cc>
			I2cOneLcd_FaultValue_Two != 0 ||
 80022bc:	4b4f      	ldr	r3, [pc, #316]	; (80023fc <DiagCtrl_ProcessRequestedData+0x2d4>)
 80022be:	781b      	ldrb	r3, [r3, #0]
	if(I2cOneLcd_FaultValue_One != 0 ||
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d117      	bne.n	80022f4 <DiagCtrl_ProcessRequestedData+0x1cc>
			I2cOneLcd_FaultValue_Three != 0 ||
 80022c4:	4b4e      	ldr	r3, [pc, #312]	; (8002400 <DiagCtrl_ProcessRequestedData+0x2d8>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Two != 0 ||
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d113      	bne.n	80022f4 <DiagCtrl_ProcessRequestedData+0x1cc>
			I2cOneLcd_FaultValue_Four != 0 ||
 80022cc:	4b4d      	ldr	r3, [pc, #308]	; (8002404 <DiagCtrl_ProcessRequestedData+0x2dc>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Three != 0 ||
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10f      	bne.n	80022f4 <DiagCtrl_ProcessRequestedData+0x1cc>
			I2cOneLcd_FaultValue_Five != 0 ||
 80022d4:	4b4c      	ldr	r3, [pc, #304]	; (8002408 <DiagCtrl_ProcessRequestedData+0x2e0>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Four != 0 ||
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10b      	bne.n	80022f4 <DiagCtrl_ProcessRequestedData+0x1cc>
			I2cOneLcd_FaultValue_Six != 0 ||
 80022dc:	4b4b      	ldr	r3, [pc, #300]	; (800240c <DiagCtrl_ProcessRequestedData+0x2e4>)
 80022de:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Five != 0 ||
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d107      	bne.n	80022f4 <DiagCtrl_ProcessRequestedData+0x1cc>
			I2cOneLcd_FaultValue_Seven != 0 ||
 80022e4:	4b4a      	ldr	r3, [pc, #296]	; (8002410 <DiagCtrl_ProcessRequestedData+0x2e8>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Six != 0 ||
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d103      	bne.n	80022f4 <DiagCtrl_ProcessRequestedData+0x1cc>
			I2cOneLcd_FaultValue_Eight != 0)
 80022ec:	4b49      	ldr	r3, [pc, #292]	; (8002414 <DiagCtrl_ProcessRequestedData+0x2ec>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Seven != 0 ||
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <DiagCtrl_ProcessRequestedData+0x1d2>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_LCD_MODULE_MALFUNCTION);
 80022f4:	2062      	movs	r0, #98	; 0x62
 80022f6:	f005 fb35 	bl	8007964 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(SpiCanTransceiver_FaultValue_One != 0 ||
 80022fa:	4b47      	ldr	r3, [pc, #284]	; (8002418 <DiagCtrl_ProcessRequestedData+0x2f0>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d117      	bne.n	8002332 <DiagCtrl_ProcessRequestedData+0x20a>
			SpiCanTransceiver_FaultValue_Two != 0 ||
 8002302:	4b46      	ldr	r3, [pc, #280]	; (800241c <DiagCtrl_ProcessRequestedData+0x2f4>)
 8002304:	781b      	ldrb	r3, [r3, #0]
	if(SpiCanTransceiver_FaultValue_One != 0 ||
 8002306:	2b00      	cmp	r3, #0
 8002308:	d113      	bne.n	8002332 <DiagCtrl_ProcessRequestedData+0x20a>
			SpiCanTransceiver_FaultValue_Three != 0 ||
 800230a:	4b45      	ldr	r3, [pc, #276]	; (8002420 <DiagCtrl_ProcessRequestedData+0x2f8>)
 800230c:	781b      	ldrb	r3, [r3, #0]
			SpiCanTransceiver_FaultValue_Two != 0 ||
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10f      	bne.n	8002332 <DiagCtrl_ProcessRequestedData+0x20a>
			SpiCanTransceiver_FaultValue_Four != 0 ||
 8002312:	4b44      	ldr	r3, [pc, #272]	; (8002424 <DiagCtrl_ProcessRequestedData+0x2fc>)
 8002314:	781b      	ldrb	r3, [r3, #0]
			SpiCanTransceiver_FaultValue_Three != 0 ||
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10b      	bne.n	8002332 <DiagCtrl_ProcessRequestedData+0x20a>
			SpiCanTransceiver_FaultValue_Five != 0 ||
 800231a:	4b43      	ldr	r3, [pc, #268]	; (8002428 <DiagCtrl_ProcessRequestedData+0x300>)
 800231c:	781b      	ldrb	r3, [r3, #0]
			SpiCanTransceiver_FaultValue_Four != 0 ||
 800231e:	2b00      	cmp	r3, #0
 8002320:	d107      	bne.n	8002332 <DiagCtrl_ProcessRequestedData+0x20a>
			SpiCanTransceiver_FaultValue_Six != 0 ||
 8002322:	4b42      	ldr	r3, [pc, #264]	; (800242c <DiagCtrl_ProcessRequestedData+0x304>)
 8002324:	781b      	ldrb	r3, [r3, #0]
			SpiCanTransceiver_FaultValue_Five != 0 ||
 8002326:	2b00      	cmp	r3, #0
 8002328:	d103      	bne.n	8002332 <DiagCtrl_ProcessRequestedData+0x20a>
			SpiCanTransceiver_FaultValue_Seven != 0)
 800232a:	4b41      	ldr	r3, [pc, #260]	; (8002430 <DiagCtrl_ProcessRequestedData+0x308>)
 800232c:	781b      	ldrb	r3, [r3, #0]
			SpiCanTransceiver_FaultValue_Six != 0 ||
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <DiagCtrl_ProcessRequestedData+0x210>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_CAN_TRANSCEIVER_MODULE_MALFUNCTION);
 8002332:	2042      	movs	r0, #66	; 0x42
 8002334:	f005 fb16 	bl	8007964 <Dem_ReceiveFault>
	}

	if(CanBusOff_FaultValue == STD_HIGH)
 8002338:	4b3e      	ldr	r3, [pc, #248]	; (8002434 <DiagCtrl_ProcessRequestedData+0x30c>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d102      	bne.n	8002346 <DiagCtrl_ProcessRequestedData+0x21e>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_CAN_BUS_OFF);
 8002340:	2052      	movs	r0, #82	; 0x52
 8002342:	f005 fb0f 	bl	8007964 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(CanRx_FaultValue == STD_HIGH)
 8002346:	4b3c      	ldr	r3, [pc, #240]	; (8002438 <DiagCtrl_ProcessRequestedData+0x310>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d102      	bne.n	8002354 <DiagCtrl_ProcessRequestedData+0x22c>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_CAN_TRANSCEIVER_MODULE_MALFUNCTION);
 800234e:	2042      	movs	r0, #66	; 0x42
 8002350:	f005 fb08 	bl	8007964 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(CanTx_FaultValue == STD_HIGH)
 8002354:	4b39      	ldr	r3, [pc, #228]	; (800243c <DiagCtrl_ProcessRequestedData+0x314>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d102      	bne.n	8002362 <DiagCtrl_ProcessRequestedData+0x23a>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_CAN_TRANSCEIVER_MODULE_MALFUNCTION);
 800235c:	2042      	movs	r0, #66	; 0x42
 800235e:	f005 fb01 	bl	8007964 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(LightSensor_RequestedValue < 100)
 8002362:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <DiagCtrl_ProcessRequestedData+0x290>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b63      	cmp	r3, #99	; 0x63
 8002368:	d802      	bhi.n	8002370 <DiagCtrl_ProcessRequestedData+0x248>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_LIGHT_SENSOR_MALFUNCTION);
 800236a:	2003      	movs	r0, #3
 800236c:	f005 fafa 	bl	8007964 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(VibrationSensor_RequestedValue < 100)
 8002370:	4b12      	ldr	r3, [pc, #72]	; (80023bc <DiagCtrl_ProcessRequestedData+0x294>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b63      	cmp	r3, #99	; 0x63
 8002376:	d802      	bhi.n	800237e <DiagCtrl_ProcessRequestedData+0x256>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_VIBRATION_SENSOR_MALFUNCTION);
 8002378:	2013      	movs	r0, #19
 800237a:	f005 faf3 	bl	8007964 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(TemperatureSensor_RequestedValue < 100)
 800237e:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <DiagCtrl_ProcessRequestedData+0x29c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b63      	cmp	r3, #99	; 0x63
 8002384:	d802      	bhi.n	800238c <DiagCtrl_ProcessRequestedData+0x264>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_TEMPERATURE_SENSOR_MALFUNCTION);
 8002386:	2033      	movs	r0, #51	; 0x33
 8002388:	f005 faec 	bl	8007964 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(AirQualitySensor_RequestedValue < 100)
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <DiagCtrl_ProcessRequestedData+0x298>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b63      	cmp	r3, #99	; 0x63
 8002392:	d802      	bhi.n	800239a <DiagCtrl_ProcessRequestedData+0x272>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_AIR_QUALITY_SENSOR_MALFUNCTION);
 8002394:	2023      	movs	r0, #35	; 0x23
 8002396:	f005 fae5 	bl	8007964 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree == 0)
 800239a:	4b29      	ldr	r3, [pc, #164]	; (8002440 <DiagCtrl_ProcessRequestedData+0x318>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d102      	bne.n	80023a8 <DiagCtrl_ProcessRequestedData+0x280>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION);
 80023a2:	2012      	movs	r0, #18
 80023a4:	f005 fade 	bl	8007964 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour == 0)
 80023a8:	4b26      	ldr	r3, [pc, #152]	; (8002444 <DiagCtrl_ProcessRequestedData+0x31c>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d14b      	bne.n	8002448 <DiagCtrl_ProcessRequestedData+0x320>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION);
 80023b0:	2002      	movs	r0, #2
 80023b2:	f005 fad7 	bl	8007964 <Dem_ReceiveFault>
 80023b6:	e047      	b.n	8002448 <DiagCtrl_ProcessRequestedData+0x320>
 80023b8:	20000148 	.word	0x20000148
 80023bc:	2000014c 	.word	0x2000014c
 80023c0:	20000150 	.word	0x20000150
 80023c4:	20000154 	.word	0x20000154
 80023c8:	20000158 	.word	0x20000158
 80023cc:	20000159 	.word	0x20000159
 80023d0:	2000015a 	.word	0x2000015a
 80023d4:	2000015b 	.word	0x2000015b
 80023d8:	2000015c 	.word	0x2000015c
 80023dc:	2000015d 	.word	0x2000015d
 80023e0:	2000015e 	.word	0x2000015e
 80023e4:	2000015f 	.word	0x2000015f
 80023e8:	20000160 	.word	0x20000160
 80023ec:	20000161 	.word	0x20000161
 80023f0:	20000162 	.word	0x20000162
 80023f4:	20000163 	.word	0x20000163
 80023f8:	20000164 	.word	0x20000164
 80023fc:	20000165 	.word	0x20000165
 8002400:	20000166 	.word	0x20000166
 8002404:	20000167 	.word	0x20000167
 8002408:	20000168 	.word	0x20000168
 800240c:	20000169 	.word	0x20000169
 8002410:	2000016a 	.word	0x2000016a
 8002414:	2000016b 	.word	0x2000016b
 8002418:	2000016c 	.word	0x2000016c
 800241c:	2000016d 	.word	0x2000016d
 8002420:	2000016e 	.word	0x2000016e
 8002424:	2000016f 	.word	0x2000016f
 8002428:	20000170 	.word	0x20000170
 800242c:	20000171 	.word	0x20000171
 8002430:	20000172 	.word	0x20000172
 8002434:	20000173 	.word	0x20000173
 8002438:	20000174 	.word	0x20000174
 800243c:	20000175 	.word	0x20000175
 8002440:	20000ce5 	.word	0x20000ce5
 8002444:	20000cf5 	.word	0x20000cf5
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_LB_L_REQUEST);
 8002448:	2004      	movs	r0, #4
 800244a:	f001 fc6d 	bl	8003d28 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_LOW_BEAM_LEFT_MALFUNCTION)
 800244e:	4b3b      	ldr	r3, [pc, #236]	; (800253c <DiagCtrl_ProcessRequestedData+0x414>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b04      	cmp	r3, #4
 8002454:	d104      	bne.n	8002460 <DiagCtrl_ProcessRequestedData+0x338>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8002456:	4b39      	ldr	r3, [pc, #228]	; (800253c <DiagCtrl_ProcessRequestedData+0x414>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f005 fa82 	bl	8007964 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_LB_R_REQUEST);
 8002460:	2005      	movs	r0, #5
 8002462:	f001 fc61 	bl	8003d28 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_LOW_BEAM_RIGHT_MALFUNCTION)
 8002466:	4b35      	ldr	r3, [pc, #212]	; (800253c <DiagCtrl_ProcessRequestedData+0x414>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b05      	cmp	r3, #5
 800246c:	d104      	bne.n	8002478 <DiagCtrl_ProcessRequestedData+0x350>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 800246e:	4b33      	ldr	r3, [pc, #204]	; (800253c <DiagCtrl_ProcessRequestedData+0x414>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f005 fa76 	bl	8007964 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_RPL_L_REQUEST);
 8002478:	2006      	movs	r0, #6
 800247a:	f001 fc55 	bl	8003d28 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_REAR_POSITION_LIGHT_LEFT_MALFUNCTION)
 800247e:	4b2f      	ldr	r3, [pc, #188]	; (800253c <DiagCtrl_ProcessRequestedData+0x414>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b44      	cmp	r3, #68	; 0x44
 8002484:	d104      	bne.n	8002490 <DiagCtrl_ProcessRequestedData+0x368>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8002486:	4b2d      	ldr	r3, [pc, #180]	; (800253c <DiagCtrl_ProcessRequestedData+0x414>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f005 fa6a 	bl	8007964 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_RPL_R_REQUEST);
 8002490:	2007      	movs	r0, #7
 8002492:	f001 fc49 	bl	8003d28 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION)
 8002496:	4b29      	ldr	r3, [pc, #164]	; (800253c <DiagCtrl_ProcessRequestedData+0x414>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b45      	cmp	r3, #69	; 0x45
 800249c:	d104      	bne.n	80024a8 <DiagCtrl_ProcessRequestedData+0x380>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 800249e:	4b27      	ldr	r3, [pc, #156]	; (800253c <DiagCtrl_ProcessRequestedData+0x414>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f005 fa5e 	bl	8007964 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_BL_R_REQUEST);
 80024a8:	2008      	movs	r0, #8
 80024aa:	f001 fc3d 	bl	8003d28 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_BRAKE_LIGHT_RIGHT_MALFUNCTION)
 80024ae:	4b23      	ldr	r3, [pc, #140]	; (800253c <DiagCtrl_ProcessRequestedData+0x414>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b74      	cmp	r3, #116	; 0x74
 80024b4:	d104      	bne.n	80024c0 <DiagCtrl_ProcessRequestedData+0x398>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 80024b6:	4b21      	ldr	r3, [pc, #132]	; (800253c <DiagCtrl_ProcessRequestedData+0x414>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f005 fa52 	bl	8007964 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_BL_L_REQUEST);
 80024c0:	2009      	movs	r0, #9
 80024c2:	f001 fc31 	bl	8003d28 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_BRAKE_LIGHT_LEFT_MALFUNCTION)
 80024c6:	4b1d      	ldr	r3, [pc, #116]	; (800253c <DiagCtrl_ProcessRequestedData+0x414>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b74      	cmp	r3, #116	; 0x74
 80024cc:	d104      	bne.n	80024d8 <DiagCtrl_ProcessRequestedData+0x3b0>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 80024ce:	4b1b      	ldr	r3, [pc, #108]	; (800253c <DiagCtrl_ProcessRequestedData+0x414>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f005 fa46 	bl	8007964 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_LTS_F_REQUEST);
 80024d8:	200a      	movs	r0, #10
 80024da:	f001 fc25 	bl	8003d28 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION)
 80024de:	4b17      	ldr	r3, [pc, #92]	; (800253c <DiagCtrl_ProcessRequestedData+0x414>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d104      	bne.n	80024f0 <DiagCtrl_ProcessRequestedData+0x3c8>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 80024e6:	4b15      	ldr	r3, [pc, #84]	; (800253c <DiagCtrl_ProcessRequestedData+0x414>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f005 fa3a 	bl	8007964 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_LTS_R_REQUEST);
 80024f0:	200b      	movs	r0, #11
 80024f2:	f001 fc19 	bl	8003d28 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_LEFT_TURN_SIGNAL_REAR_MALFUNCTION)
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <DiagCtrl_ProcessRequestedData+0x414>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b65      	cmp	r3, #101	; 0x65
 80024fc:	d104      	bne.n	8002508 <DiagCtrl_ProcessRequestedData+0x3e0>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 80024fe:	4b0f      	ldr	r3, [pc, #60]	; (800253c <DiagCtrl_ProcessRequestedData+0x414>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f005 fa2e 	bl	8007964 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_RTS_R_REQUEST);
 8002508:	200c      	movs	r0, #12
 800250a:	f001 fc0d 	bl	8003d28 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_RIGHT_TURN_SIGNAL_REAR_MALFUNCTION)
 800250e:	4b0b      	ldr	r3, [pc, #44]	; (800253c <DiagCtrl_ProcessRequestedData+0x414>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b55      	cmp	r3, #85	; 0x55
 8002514:	d104      	bne.n	8002520 <DiagCtrl_ProcessRequestedData+0x3f8>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <DiagCtrl_ProcessRequestedData+0x414>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f005 fa22 	bl	8007964 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_RTS_F_REQUEST);
 8002520:	200d      	movs	r0, #13
 8002522:	f001 fc01 	bl	8003d28 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION)
 8002526:	4b05      	ldr	r3, [pc, #20]	; (800253c <DiagCtrl_ProcessRequestedData+0x414>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d104      	bne.n	8002538 <DiagCtrl_ProcessRequestedData+0x410>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 800252e:	4b03      	ldr	r3, [pc, #12]	; (800253c <DiagCtrl_ProcessRequestedData+0x414>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f005 fa16 	bl	8007964 <Dem_ReceiveFault>
	}
	else
	{
		/* do nothing */
	}
}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000144 	.word	0x20000144

08002540 <ExtLights_TurnSignalHazardLight>:
/***********************************************************************************
* Function: ExtLights_TurnSignalHazardLight										   *
* Description: Process the turn signals and hazard lights states. 		   		   *
************************************************************************************/
VOID ExtLights_TurnSignalHazardLight()
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
	/* If the turn signal left is set on. */
	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8002544:	4b4c      	ldr	r3, [pc, #304]	; (8002678 <ExtLights_TurnSignalHazardLight+0x138>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d123      	bne.n	8002594 <ExtLights_TurnSignalHazardLight+0x54>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 800254c:	4b4b      	ldr	r3, [pc, #300]	; (800267c <ExtLights_TurnSignalHazardLight+0x13c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f010 f93e 	bl	80127d2 <osTimerIsRunning>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d106      	bne.n	800256a <ExtLights_TurnSignalHazardLight+0x2a>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 800255c:	4b47      	ldr	r3, [pc, #284]	; (800267c <ExtLights_TurnSignalHazardLight+0x13c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002564:	4618      	mov	r0, r3
 8002566:	f013 ffa2 	bl	80164ae <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_LTSFlag % 2 == 1)
 800256a:	4b45      	ldr	r3, [pc, #276]	; (8002680 <ExtLights_TurnSignalHazardLight+0x140>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d004      	beq.n	8002580 <ExtLights_TurnSignalHazardLight+0x40>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8002576:	2108      	movs	r1, #8
 8002578:	4842      	ldr	r0, [pc, #264]	; (8002684 <ExtLights_TurnSignalHazardLight+0x144>)
 800257a:	f013 fdb5 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 800257e:	e009      	b.n	8002594 <ExtLights_TurnSignalHazardLight+0x54>
		}
		else if(ExtLights_LTSFlag % 2 == 0)
 8002580:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <ExtLights_TurnSignalHazardLight+0x140>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	d103      	bne.n	8002594 <ExtLights_TurnSignalHazardLight+0x54>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 800258c:	2108      	movs	r1, #8
 800258e:	483d      	ldr	r0, [pc, #244]	; (8002684 <ExtLights_TurnSignalHazardLight+0x144>)
 8002590:	f013 fdb7 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* If the turn signal right is set on. */
	if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8002594:	4b3c      	ldr	r3, [pc, #240]	; (8002688 <ExtLights_TurnSignalHazardLight+0x148>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d123      	bne.n	80025e4 <ExtLights_TurnSignalHazardLight+0xa4>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 800259c:	4b37      	ldr	r3, [pc, #220]	; (800267c <ExtLights_TurnSignalHazardLight+0x13c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f010 f916 	bl	80127d2 <osTimerIsRunning>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d106      	bne.n	80025ba <ExtLights_TurnSignalHazardLight+0x7a>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 80025ac:	4b33      	ldr	r3, [pc, #204]	; (800267c <ExtLights_TurnSignalHazardLight+0x13c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80025b4:	4618      	mov	r0, r3
 80025b6:	f013 ff7a 	bl	80164ae <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_RTSFlag % 2 == 1)
 80025ba:	4b34      	ldr	r3, [pc, #208]	; (800268c <ExtLights_TurnSignalHazardLight+0x14c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d004      	beq.n	80025d0 <ExtLights_TurnSignalHazardLight+0x90>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80025c6:	210c      	movs	r1, #12
 80025c8:	482e      	ldr	r0, [pc, #184]	; (8002684 <ExtLights_TurnSignalHazardLight+0x144>)
 80025ca:	f013 fd8d 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 80025ce:	e009      	b.n	80025e4 <ExtLights_TurnSignalHazardLight+0xa4>
		}
		else if(ExtLights_RTSFlag % 2 == 0)
 80025d0:	4b2e      	ldr	r3, [pc, #184]	; (800268c <ExtLights_TurnSignalHazardLight+0x14c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d103      	bne.n	80025e4 <ExtLights_TurnSignalHazardLight+0xa4>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80025dc:	210c      	movs	r1, #12
 80025de:	4829      	ldr	r0, [pc, #164]	; (8002684 <ExtLights_TurnSignalHazardLight+0x144>)
 80025e0:	f013 fd8f 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* If the hazard light is set on. */
	if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 80025e4:	4b2a      	ldr	r3, [pc, #168]	; (8002690 <ExtLights_TurnSignalHazardLight+0x150>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d12b      	bne.n	8002644 <ExtLights_TurnSignalHazardLight+0x104>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 80025ec:	4b23      	ldr	r3, [pc, #140]	; (800267c <ExtLights_TurnSignalHazardLight+0x13c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f010 f8ee 	bl	80127d2 <osTimerIsRunning>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d106      	bne.n	800260a <ExtLights_TurnSignalHazardLight+0xca>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 80025fc:	4b1f      	ldr	r3, [pc, #124]	; (800267c <ExtLights_TurnSignalHazardLight+0x13c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002604:	4618      	mov	r0, r3
 8002606:	f013 ff52 	bl	80164ae <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_HLFlag % 2 == 1)
 800260a:	4b22      	ldr	r3, [pc, #136]	; (8002694 <ExtLights_TurnSignalHazardLight+0x154>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d008      	beq.n	8002628 <ExtLights_TurnSignalHazardLight+0xe8>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8002616:	2108      	movs	r1, #8
 8002618:	481a      	ldr	r0, [pc, #104]	; (8002684 <ExtLights_TurnSignalHazardLight+0x144>)
 800261a:	f013 fd65 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800261e:	210c      	movs	r1, #12
 8002620:	4818      	ldr	r0, [pc, #96]	; (8002684 <ExtLights_TurnSignalHazardLight+0x144>)
 8002622:	f013 fd61 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8002626:	e00d      	b.n	8002644 <ExtLights_TurnSignalHazardLight+0x104>
		}
		else if(ExtLights_HLFlag % 2 == 0)
 8002628:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <ExtLights_TurnSignalHazardLight+0x154>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d107      	bne.n	8002644 <ExtLights_TurnSignalHazardLight+0x104>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8002634:	2108      	movs	r1, #8
 8002636:	4813      	ldr	r0, [pc, #76]	; (8002684 <ExtLights_TurnSignalHazardLight+0x144>)
 8002638:	f013 fd63 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800263c:	210c      	movs	r1, #12
 800263e:	4811      	ldr	r0, [pc, #68]	; (8002684 <ExtLights_TurnSignalHazardLight+0x144>)
 8002640:	f013 fd5f 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Only one pair of turn signals can be on at a time. Set on one pair and the other off. */
	if(ExtLights_TurnSignalRight_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 8002644:	4b10      	ldr	r3, [pc, #64]	; (8002688 <ExtLights_TurnSignalHazardLight+0x148>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d107      	bne.n	800265c <ExtLights_TurnSignalHazardLight+0x11c>
 800264c:	4b10      	ldr	r3, [pc, #64]	; (8002690 <ExtLights_TurnSignalHazardLight+0x150>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d103      	bne.n	800265c <ExtLights_TurnSignalHazardLight+0x11c>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8002654:	210c      	movs	r1, #12
 8002656:	480b      	ldr	r0, [pc, #44]	; (8002684 <ExtLights_TurnSignalHazardLight+0x144>)
 8002658:	f013 fd53 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Only one pair of turn signals can be on at a time. Set on one pair and the other off. */
	if(ExtLights_TurnSignalLeft_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <ExtLights_TurnSignalHazardLight+0x138>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d107      	bne.n	8002674 <ExtLights_TurnSignalHazardLight+0x134>
 8002664:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <ExtLights_TurnSignalHazardLight+0x150>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d103      	bne.n	8002674 <ExtLights_TurnSignalHazardLight+0x134>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 800266c:	2108      	movs	r1, #8
 800266e:	4805      	ldr	r0, [pc, #20]	; (8002684 <ExtLights_TurnSignalHazardLight+0x144>)
 8002670:	f013 fd47 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	}
	else
	{
		/* do nothing */
	}
}
 8002674:	bf00      	nop
 8002676:	bd80      	pop	{r7, pc}
 8002678:	2000017d 	.word	0x2000017d
 800267c:	20000448 	.word	0x20000448
 8002680:	2000018c 	.word	0x2000018c
 8002684:	200008c0 	.word	0x200008c0
 8002688:	2000017e 	.word	0x2000017e
 800268c:	20000188 	.word	0x20000188
 8002690:	20000181 	.word	0x20000181
 8002694:	20000190 	.word	0x20000190

08002698 <ExtLights_PrevStateTSHL>:
* Function: ExtLights_PrevStateTSHL										           *
* Description: Checks the current state and previous state of turn signals and     *
* 			   hazard lights. 		   											   *
************************************************************************************/
VOID ExtLights_PrevStateTSHL()
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
	/* Change the variables related to states. */
	if(ExtLights_TurnSignalLeft_CurrentState != ExtLights_LTS_PrevState)
 800269c:	4b18      	ldr	r3, [pc, #96]	; (8002700 <ExtLights_PrevStateTSHL+0x68>)
 800269e:	781a      	ldrb	r2, [r3, #0]
 80026a0:	4b18      	ldr	r3, [pc, #96]	; (8002704 <ExtLights_PrevStateTSHL+0x6c>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d009      	beq.n	80026bc <ExtLights_PrevStateTSHL+0x24>
	{
		ExtLights_LTS_PrevState = ExtLights_TurnSignalLeft_CurrentState;
 80026a8:	4b15      	ldr	r3, [pc, #84]	; (8002700 <ExtLights_PrevStateTSHL+0x68>)
 80026aa:	781a      	ldrb	r2, [r3, #0]
 80026ac:	4b15      	ldr	r3, [pc, #84]	; (8002704 <ExtLights_PrevStateTSHL+0x6c>)
 80026ae:	701a      	strb	r2, [r3, #0]
		ExtLights_LTSFlag = 0;
 80026b0:	4b15      	ldr	r3, [pc, #84]	; (8002708 <ExtLights_PrevStateTSHL+0x70>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_Lts_Counter(&ExtLights_LTSFlag);
 80026b6:	4814      	ldr	r0, [pc, #80]	; (8002708 <ExtLights_PrevStateTSHL+0x70>)
 80026b8:	f013 fcbc 	bl	8016034 <Rte_Write_Os_R_OsPort_Os_Lts_Counter>
	else
	{
		/* do nothing */
	}
	/* Change the variables related to states. */
	if(ExtLights_TurnSignalRight_CurrentState != ExtLights_RTS_PrevState)
 80026bc:	4b13      	ldr	r3, [pc, #76]	; (800270c <ExtLights_PrevStateTSHL+0x74>)
 80026be:	781a      	ldrb	r2, [r3, #0]
 80026c0:	4b13      	ldr	r3, [pc, #76]	; (8002710 <ExtLights_PrevStateTSHL+0x78>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d009      	beq.n	80026dc <ExtLights_PrevStateTSHL+0x44>
	{
		ExtLights_RTS_PrevState = ExtLights_TurnSignalRight_CurrentState;
 80026c8:	4b10      	ldr	r3, [pc, #64]	; (800270c <ExtLights_PrevStateTSHL+0x74>)
 80026ca:	781a      	ldrb	r2, [r3, #0]
 80026cc:	4b10      	ldr	r3, [pc, #64]	; (8002710 <ExtLights_PrevStateTSHL+0x78>)
 80026ce:	701a      	strb	r2, [r3, #0]
		ExtLights_RTSFlag = 0;
 80026d0:	4b10      	ldr	r3, [pc, #64]	; (8002714 <ExtLights_PrevStateTSHL+0x7c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_Rts_Counter(&ExtLights_RTSFlag);
 80026d6:	480f      	ldr	r0, [pc, #60]	; (8002714 <ExtLights_PrevStateTSHL+0x7c>)
 80026d8:	f013 fcbc 	bl	8016054 <Rte_Write_Os_R_OsPort_Os_Rts_Counter>
	else
	{
		/* do nothing */
	}
	/* Change the variables related to states. */
	if(ExtLights_HazardLight_CurrentState != ExtLights_HL_PrevState)
 80026dc:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <ExtLights_PrevStateTSHL+0x80>)
 80026de:	781a      	ldrb	r2, [r3, #0]
 80026e0:	4b0e      	ldr	r3, [pc, #56]	; (800271c <ExtLights_PrevStateTSHL+0x84>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d009      	beq.n	80026fc <ExtLights_PrevStateTSHL+0x64>
	{
		ExtLights_HL_PrevState = ExtLights_HazardLight_CurrentState;
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <ExtLights_PrevStateTSHL+0x80>)
 80026ea:	781a      	ldrb	r2, [r3, #0]
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <ExtLights_PrevStateTSHL+0x84>)
 80026ee:	701a      	strb	r2, [r3, #0]
		ExtLights_HLFlag = 0;
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <ExtLights_PrevStateTSHL+0x88>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_HL_Counter(&ExtLights_HLFlag);
 80026f6:	480a      	ldr	r0, [pc, #40]	; (8002720 <ExtLights_PrevStateTSHL+0x88>)
 80026f8:	f013 fcbc 	bl	8016074 <Rte_Write_Os_R_OsPort_Os_HL_Counter>
	}
	else
	{
		/* do nothing */
	}
}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	2000017d 	.word	0x2000017d
 8002704:	20000184 	.word	0x20000184
 8002708:	2000018c 	.word	0x2000018c
 800270c:	2000017e 	.word	0x2000017e
 8002710:	20000183 	.word	0x20000183
 8002714:	20000188 	.word	0x20000188
 8002718:	20000181 	.word	0x20000181
 800271c:	20000185 	.word	0x20000185
 8002720:	20000190 	.word	0x20000190

08002724 <ExtLights_LightState>:
/***********************************************************************************
* Function: ExtLights_LightState										   		   *
* Description: Controls the lights states.								 		   *
************************************************************************************/
VOID ExtLights_LightState()
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
	/* Process turn signals state. */
	ExtLights_PrevStateTSHL();
 8002728:	f7ff ffb6 	bl	8002698 <ExtLights_PrevStateTSHL>
	Rte_Read_Dem_DemPort_Dem_DtcArray(0, 0);
 800272c:	2100      	movs	r1, #0
 800272e:	2000      	movs	r0, #0
 8002730:	f013 fa12 	bl	8015b58 <Rte_Read_Dem_DemPort_Dem_DtcArray>
	/* Follow me home is on, then turn on the respective lights. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
 8002734:	4b8e      	ldr	r3, [pc, #568]	; (8002970 <ExtLights_LightState+0x24c>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d110      	bne.n	800275e <ExtLights_LightState+0x3a>
	{
		ExtLights_LightSwitchMode();
 800273c:	f000 f9c2 	bl	8002ac4 <ExtLights_LightSwitchMode>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8002740:	2100      	movs	r1, #0
 8002742:	488c      	ldr	r0, [pc, #560]	; (8002974 <ExtLights_LightState+0x250>)
 8002744:	f013 fcd0 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8002748:	2104      	movs	r1, #4
 800274a:	488a      	ldr	r0, [pc, #552]	; (8002974 <ExtLights_LightState+0x250>)
 800274c:	f013 fccc 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		ExtLights_LowBeam_CurrentState = STD_HIGH;
 8002750:	4b89      	ldr	r3, [pc, #548]	; (8002978 <ExtLights_LightState+0x254>)
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]
		ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 8002756:	4b89      	ldr	r3, [pc, #548]	; (800297c <ExtLights_LightState+0x258>)
 8002758:	2201      	movs	r2, #1
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	e017      	b.n	800278e <ExtLights_LightState+0x6a>
	}/* Follow me home is off, turn off the lights.*/
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW)
 800275e:	4b84      	ldr	r3, [pc, #528]	; (8002970 <ExtLights_LightState+0x24c>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d113      	bne.n	800278e <ExtLights_LightState+0x6a>
	{
		ExtLights_LightSwitchMode();
 8002766:	f000 f9ad 	bl	8002ac4 <ExtLights_LightSwitchMode>
		if(ExtLights_LightsSwitch_CurrentState == STD_LOW)
 800276a:	4b85      	ldr	r3, [pc, #532]	; (8002980 <ExtLights_LightState+0x25c>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10d      	bne.n	800278e <ExtLights_LightState+0x6a>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8002772:	2100      	movs	r1, #0
 8002774:	487f      	ldr	r0, [pc, #508]	; (8002974 <ExtLights_LightState+0x250>)
 8002776:	f013 fcc4 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 800277a:	2104      	movs	r1, #4
 800277c:	487d      	ldr	r0, [pc, #500]	; (8002974 <ExtLights_LightState+0x250>)
 800277e:	f013 fcc0 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 8002782:	4b7d      	ldr	r3, [pc, #500]	; (8002978 <ExtLights_LightState+0x254>)
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8002788:	4b7c      	ldr	r3, [pc, #496]	; (800297c <ExtLights_LightState+0x258>)
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If any light state is set to on, then stop the follow me home. */
	if( ExtLights_ReverseLight_CurrentState == STD_HIGH ||
 800278e:	4b7d      	ldr	r3, [pc, #500]	; (8002984 <ExtLights_LightState+0x260>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d023      	beq.n	80027de <ExtLights_LightState+0xba>
		ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 8002796:	4b7c      	ldr	r3, [pc, #496]	; (8002988 <ExtLights_LightState+0x264>)
 8002798:	781b      	ldrb	r3, [r3, #0]
	if( ExtLights_ReverseLight_CurrentState == STD_HIGH ||
 800279a:	2b01      	cmp	r3, #1
 800279c:	d01f      	beq.n	80027de <ExtLights_LightState+0xba>
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 800279e:	4b7b      	ldr	r3, [pc, #492]	; (800298c <ExtLights_LightState+0x268>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
		ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d01b      	beq.n	80027de <ExtLights_LightState+0xba>
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 80027a6:	4b76      	ldr	r3, [pc, #472]	; (8002980 <ExtLights_LightState+0x25c>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d117      	bne.n	80027de <ExtLights_LightState+0xba>
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 80027ae:	4b78      	ldr	r3, [pc, #480]	; (8002990 <ExtLights_LightState+0x26c>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d013      	beq.n	80027de <ExtLights_LightState+0xba>
		ExtLights_FrontFogLight_CurrentState == STD_HIGH ||
 80027b6:	4b77      	ldr	r3, [pc, #476]	; (8002994 <ExtLights_LightState+0x270>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d00f      	beq.n	80027de <ExtLights_LightState+0xba>
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 80027be:	4b76      	ldr	r3, [pc, #472]	; (8002998 <ExtLights_LightState+0x274>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
		ExtLights_FrontFogLight_CurrentState == STD_HIGH ||
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d00b      	beq.n	80027de <ExtLights_LightState+0xba>
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 80027c6:	4b75      	ldr	r3, [pc, #468]	; (800299c <ExtLights_LightState+0x278>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d007      	beq.n	80027de <ExtLights_LightState+0xba>
		ExtLights_HazardLight_CurrentState == STD_HIGH ||
 80027ce:	4b74      	ldr	r3, [pc, #464]	; (80029a0 <ExtLights_LightState+0x27c>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d003      	beq.n	80027de <ExtLights_LightState+0xba>
		ExtLights_RearFogLight_CurrentState == STD_HIGH)
 80027d6:	4b73      	ldr	r3, [pc, #460]	; (80029a4 <ExtLights_LightState+0x280>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
		ExtLights_HazardLight_CurrentState == STD_HIGH ||
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d11a      	bne.n	8002814 <ExtLights_LightState+0xf0>
	{
		if(ExtLights_LightsSwitch_CurrentState == STD_LOW)
 80027de:	4b68      	ldr	r3, [pc, #416]	; (8002980 <ExtLights_LightState+0x25c>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d116      	bne.n	8002814 <ExtLights_LightState+0xf0>
		{
			Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(STD_LOW);
 80027e6:	2000      	movs	r0, #0
 80027e8:	f013 fd00 	bl	80161ec <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>
			Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter((uint8*)2);
 80027ec:	2002      	movs	r0, #2
 80027ee:	f013 fba1 	bl	8015f34 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>
			Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter((uint8*)2);
 80027f2:	2002      	movs	r0, #2
 80027f4:	f013 fc0e 	bl	8016014 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 80027f8:	2100      	movs	r1, #0
 80027fa:	485e      	ldr	r0, [pc, #376]	; (8002974 <ExtLights_LightState+0x250>)
 80027fc:	f013 fc81 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8002800:	2104      	movs	r1, #4
 8002802:	485c      	ldr	r0, [pc, #368]	; (8002974 <ExtLights_LightState+0x250>)
 8002804:	f013 fc7d 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 8002808:	4b5b      	ldr	r3, [pc, #364]	; (8002978 <ExtLights_LightState+0x254>)
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 800280e:	4b5b      	ldr	r3, [pc, #364]	; (800297c <ExtLights_LightState+0x258>)
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* Control the turn signals for the central lock lock unlock sequence when requested. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_HIGH)
 8002814:	4b64      	ldr	r3, [pc, #400]	; (80029a8 <ExtLights_LightState+0x284>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d108      	bne.n	800282e <ExtLights_LightState+0x10a>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 800281c:	2108      	movs	r1, #8
 800281e:	4863      	ldr	r0, [pc, #396]	; (80029ac <ExtLights_LightState+0x288>)
 8002820:	f013 fc62 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8002824:	210c      	movs	r1, #12
 8002826:	4861      	ldr	r0, [pc, #388]	; (80029ac <ExtLights_LightState+0x288>)
 8002828:	f013 fc5e 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 800282c:	e016      	b.n	800285c <ExtLights_LightState+0x138>
	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_LOW)
 800282e:	4b5e      	ldr	r3, [pc, #376]	; (80029a8 <ExtLights_LightState+0x284>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d108      	bne.n	8002848 <ExtLights_LightState+0x124>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8002836:	2108      	movs	r1, #8
 8002838:	485c      	ldr	r0, [pc, #368]	; (80029ac <ExtLights_LightState+0x288>)
 800283a:	f013 fc62 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800283e:	210c      	movs	r1, #12
 8002840:	485a      	ldr	r0, [pc, #360]	; (80029ac <ExtLights_LightState+0x288>)
 8002842:	f013 fc5e 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
 8002846:	e009      	b.n	800285c <ExtLights_LightState+0x138>
	}/* Allows for turning on the hazard lights or turn signals independently of other states in the system. */
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 2 || Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 4)
 8002848:	4b57      	ldr	r3, [pc, #348]	; (80029a8 <ExtLights_LightState+0x284>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d003      	beq.n	8002858 <ExtLights_LightState+0x134>
 8002850:	4b55      	ldr	r3, [pc, #340]	; (80029a8 <ExtLights_LightState+0x284>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b04      	cmp	r3, #4
 8002856:	d101      	bne.n	800285c <ExtLights_LightState+0x138>
	{
		ExtLights_TurnSignalHazardLight();
 8002858:	f7ff fe72 	bl	8002540 <ExtLights_TurnSignalHazardLight>
	else
	{
		/* do nothing */
	}
	/* Turn on/off high beam. */
	if(ExtLights_FlashHighBeam_CurrentState == STD_HIGH)
 800285c:	4b4b      	ldr	r3, [pc, #300]	; (800298c <ExtLights_LightState+0x268>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d103      	bne.n	800286c <ExtLights_LightState+0x148>
	{
		ExtLights_HighBeam(STD_HIGH);
 8002864:	2001      	movs	r0, #1
 8002866:	f000 fa59 	bl	8002d1c <ExtLights_HighBeam>
 800286a:	e006      	b.n	800287a <ExtLights_LightState+0x156>
	}
	else if(ExtLights_FlashHighBeam_CurrentState == STD_LOW)
 800286c:	4b47      	ldr	r3, [pc, #284]	; (800298c <ExtLights_LightState+0x268>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d102      	bne.n	800287a <ExtLights_LightState+0x156>
	{
		ExtLights_HighBeam(STD_LOW);
 8002874:	2000      	movs	r0, #0
 8002876:	f000 fa51 	bl	8002d1c <ExtLights_HighBeam>
	else
	{
		/* do nothing */
	}
	/* Turn on/off high beam. */
	if(ExtLights_HighBeam_CurrentState == STD_HIGH)
 800287a:	4b45      	ldr	r3, [pc, #276]	; (8002990 <ExtLights_LightState+0x26c>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d103      	bne.n	800288a <ExtLights_LightState+0x166>
	{
		ExtLights_HighBeam(STD_HIGH);
 8002882:	2001      	movs	r0, #1
 8002884:	f000 fa4a 	bl	8002d1c <ExtLights_HighBeam>
 8002888:	e006      	b.n	8002898 <ExtLights_LightState+0x174>
	}
	else if(ExtLights_HighBeam_CurrentState == STD_LOW)
 800288a:	4b41      	ldr	r3, [pc, #260]	; (8002990 <ExtLights_LightState+0x26c>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d102      	bne.n	8002898 <ExtLights_LightState+0x174>
	{
		ExtLights_HighBeam(STD_LOW);
 8002892:	2000      	movs	r0, #0
 8002894:	f000 fa42 	bl	8002d1c <ExtLights_HighBeam>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the brake lights. */
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH)
 8002898:	4b3b      	ldr	r3, [pc, #236]	; (8002988 <ExtLights_LightState+0x264>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d111      	bne.n	80028c4 <ExtLights_LightState+0x1a0>
	{
		if(ExtLights_BrakeLight_CurrentState != ExtLights_Previous_BrakeLight_CurrentState)
 80028a0:	4b39      	ldr	r3, [pc, #228]	; (8002988 <ExtLights_LightState+0x264>)
 80028a2:	781a      	ldrb	r2, [r3, #0]
 80028a4:	4b42      	ldr	r3, [pc, #264]	; (80029b0 <ExtLights_LightState+0x28c>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d006      	beq.n	80028ba <ExtLights_LightState+0x196>
		{
			ExtLights_Previous_BrakeLight_CurrentState = ExtLights_BrakeLight_CurrentState;
 80028ac:	4b36      	ldr	r3, [pc, #216]	; (8002988 <ExtLights_LightState+0x264>)
 80028ae:	781a      	ldrb	r2, [r3, #0]
 80028b0:	4b3f      	ldr	r3, [pc, #252]	; (80029b0 <ExtLights_LightState+0x28c>)
 80028b2:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr2(0);
 80028b4:	2000      	movs	r0, #0
 80028b6:	f013 f987 	bl	8015bc8 <Rte_Write_TimH_TimHPort_Tim3Ccr2>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel2);
 80028ba:	2104      	movs	r1, #4
 80028bc:	483d      	ldr	r0, [pc, #244]	; (80029b4 <ExtLights_LightState+0x290>)
 80028be:	f013 fc13 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 80028c2:	e014      	b.n	80028ee <ExtLights_LightState+0x1ca>
	}
	else if(ExtLights_BrakeLight_CurrentState == STD_LOW)
 80028c4:	4b30      	ldr	r3, [pc, #192]	; (8002988 <ExtLights_LightState+0x264>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d110      	bne.n	80028ee <ExtLights_LightState+0x1ca>
	{
		if(ExtLights_BrakeLight_CurrentState != ExtLights_Previous_BrakeLight_CurrentState)
 80028cc:	4b2e      	ldr	r3, [pc, #184]	; (8002988 <ExtLights_LightState+0x264>)
 80028ce:	781a      	ldrb	r2, [r3, #0]
 80028d0:	4b37      	ldr	r3, [pc, #220]	; (80029b0 <ExtLights_LightState+0x28c>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d006      	beq.n	80028e6 <ExtLights_LightState+0x1c2>
		{
			ExtLights_Previous_BrakeLight_CurrentState = ExtLights_BrakeLight_CurrentState;
 80028d8:	4b2b      	ldr	r3, [pc, #172]	; (8002988 <ExtLights_LightState+0x264>)
 80028da:	781a      	ldrb	r2, [r3, #0]
 80028dc:	4b34      	ldr	r3, [pc, #208]	; (80029b0 <ExtLights_LightState+0x28c>)
 80028de:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr2(0);
 80028e0:	2000      	movs	r0, #0
 80028e2:	f013 f971 	bl	8015bc8 <Rte_Write_TimH_TimHPort_Tim3Ccr2>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel2);
 80028e6:	2104      	movs	r1, #4
 80028e8:	4832      	ldr	r0, [pc, #200]	; (80029b4 <ExtLights_LightState+0x290>)
 80028ea:	f013 fc0a 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the rear fog lights. */
	if(ExtLights_RearFogLight_CurrentState == STD_HIGH)
 80028ee:	4b2d      	ldr	r3, [pc, #180]	; (80029a4 <ExtLights_LightState+0x280>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d111      	bne.n	800291a <ExtLights_LightState+0x1f6>
	{
		if(ExtLights_RearFogLight_CurrentState != ExtLights_Previous_RearFogLight_CurrentState)
 80028f6:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <ExtLights_LightState+0x280>)
 80028f8:	781a      	ldrb	r2, [r3, #0]
 80028fa:	4b2f      	ldr	r3, [pc, #188]	; (80029b8 <ExtLights_LightState+0x294>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d006      	beq.n	8002910 <ExtLights_LightState+0x1ec>
		{
			ExtLights_Previous_RearFogLight_CurrentState = ExtLights_RearFogLight_CurrentState;
 8002902:	4b28      	ldr	r3, [pc, #160]	; (80029a4 <ExtLights_LightState+0x280>)
 8002904:	781a      	ldrb	r2, [r3, #0]
 8002906:	4b2c      	ldr	r3, [pc, #176]	; (80029b8 <ExtLights_LightState+0x294>)
 8002908:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr4(0);
 800290a:	2000      	movs	r0, #0
 800290c:	f013 f97c 	bl	8015c08 <Rte_Write_TimH_TimHPort_Tim3Ccr4>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 8002910:	210c      	movs	r1, #12
 8002912:	4828      	ldr	r0, [pc, #160]	; (80029b4 <ExtLights_LightState+0x290>)
 8002914:	f013 fbe8 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8002918:	e014      	b.n	8002944 <ExtLights_LightState+0x220>
	}
	else if(ExtLights_RearFogLight_CurrentState == STD_LOW)
 800291a:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <ExtLights_LightState+0x280>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d110      	bne.n	8002944 <ExtLights_LightState+0x220>
	{
		if(ExtLights_RearFogLight_CurrentState != ExtLights_Previous_RearFogLight_CurrentState)
 8002922:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <ExtLights_LightState+0x280>)
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <ExtLights_LightState+0x294>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d006      	beq.n	800293c <ExtLights_LightState+0x218>
		{
			ExtLights_Previous_RearFogLight_CurrentState = ExtLights_RearFogLight_CurrentState;
 800292e:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <ExtLights_LightState+0x280>)
 8002930:	781a      	ldrb	r2, [r3, #0]
 8002932:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <ExtLights_LightState+0x294>)
 8002934:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr4(0);
 8002936:	2000      	movs	r0, #0
 8002938:	f013 f966 	bl	8015c08 <Rte_Write_TimH_TimHPort_Tim3Ccr4>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 800293c:	210c      	movs	r1, #12
 800293e:	481d      	ldr	r0, [pc, #116]	; (80029b4 <ExtLights_LightState+0x290>)
 8002940:	f013 fbdf 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the front fog lights. */
	if(ExtLights_FrontFogLight_CurrentState == STD_HIGH)
 8002944:	4b13      	ldr	r3, [pc, #76]	; (8002994 <ExtLights_LightState+0x270>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d139      	bne.n	80029c0 <ExtLights_LightState+0x29c>
	{
		if(ExtLights_FrontFogLight_CurrentState != ExtLights_Previous_FrontFogLight_CurrentState)
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <ExtLights_LightState+0x270>)
 800294e:	781a      	ldrb	r2, [r3, #0]
 8002950:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <ExtLights_LightState+0x298>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d006      	beq.n	8002966 <ExtLights_LightState+0x242>
		{
			ExtLights_Previous_FrontFogLight_CurrentState = ExtLights_FrontFogLight_CurrentState;
 8002958:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <ExtLights_LightState+0x270>)
 800295a:	781a      	ldrb	r2, [r3, #0]
 800295c:	4b17      	ldr	r3, [pc, #92]	; (80029bc <ExtLights_LightState+0x298>)
 800295e:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr3(0);
 8002960:	2000      	movs	r0, #0
 8002962:	f013 f941 	bl	8015be8 <Rte_Write_TimH_TimHPort_Tim3Ccr3>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 8002966:	2108      	movs	r1, #8
 8002968:	4812      	ldr	r0, [pc, #72]	; (80029b4 <ExtLights_LightState+0x290>)
 800296a:	f013 fbbd 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 800296e:	e03c      	b.n	80029ea <ExtLights_LightState+0x2c6>
 8002970:	2000013b 	.word	0x2000013b
 8002974:	20000758 	.word	0x20000758
 8002978:	2000017f 	.word	0x2000017f
 800297c:	20000180 	.word	0x20000180
 8002980:	2000017a 	.word	0x2000017a
 8002984:	20000177 	.word	0x20000177
 8002988:	20000179 	.word	0x20000179
 800298c:	20000178 	.word	0x20000178
 8002990:	2000017b 	.word	0x2000017b
 8002994:	2000017c 	.word	0x2000017c
 8002998:	2000017d 	.word	0x2000017d
 800299c:	2000017e 	.word	0x2000017e
 80029a0:	20000181 	.word	0x20000181
 80029a4:	20000182 	.word	0x20000182
 80029a8:	2000013c 	.word	0x2000013c
 80029ac:	200008c0 	.word	0x200008c0
 80029b0:	2000019a 	.word	0x2000019a
 80029b4:	2000080c 	.word	0x2000080c
 80029b8:	20000198 	.word	0x20000198
 80029bc:	20000199 	.word	0x20000199
	}
	else if(ExtLights_FrontFogLight_CurrentState == STD_LOW)
 80029c0:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <ExtLights_LightState+0x330>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d110      	bne.n	80029ea <ExtLights_LightState+0x2c6>
	{
		if(ExtLights_FrontFogLight_CurrentState != ExtLights_Previous_FrontFogLight_CurrentState)
 80029c8:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <ExtLights_LightState+0x330>)
 80029ca:	781a      	ldrb	r2, [r3, #0]
 80029cc:	4b22      	ldr	r3, [pc, #136]	; (8002a58 <ExtLights_LightState+0x334>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d006      	beq.n	80029e2 <ExtLights_LightState+0x2be>
		{
			ExtLights_Previous_FrontFogLight_CurrentState = ExtLights_FrontFogLight_CurrentState;
 80029d4:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <ExtLights_LightState+0x330>)
 80029d6:	781a      	ldrb	r2, [r3, #0]
 80029d8:	4b1f      	ldr	r3, [pc, #124]	; (8002a58 <ExtLights_LightState+0x334>)
 80029da:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr3(0);
 80029dc:	2000      	movs	r0, #0
 80029de:	f013 f903 	bl	8015be8 <Rte_Write_TimH_TimHPort_Tim3Ccr3>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 80029e2:	2108      	movs	r1, #8
 80029e4:	481d      	ldr	r0, [pc, #116]	; (8002a5c <ExtLights_LightState+0x338>)
 80029e6:	f013 fb8c 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on the reverse light. */
	ExtLights_ReverseLight(ExtLights_ReverseLight_CurrentState);
 80029ea:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <ExtLights_LightState+0x33c>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 f9a6 	bl	8002d40 <ExtLights_ReverseLight>

	if((ExtLights_DtcArray[0] != 0 || ExtLights_DtcArray[1] != 0) && ExtLights_LowBeam_CurrentState == STD_HIGH)
 80029f4:	4b1b      	ldr	r3, [pc, #108]	; (8002a64 <ExtLights_LightState+0x340>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d103      	bne.n	8002a04 <ExtLights_LightState+0x2e0>
 80029fc:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <ExtLights_LightState+0x340>)
 80029fe:	785b      	ldrb	r3, [r3, #1]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d006      	beq.n	8002a12 <ExtLights_LightState+0x2ee>
 8002a04:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <ExtLights_LightState+0x344>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d102      	bne.n	8002a12 <ExtLights_LightState+0x2ee>
	{
		ExtLights_FrontFogLight_CurrentState = STD_HIGH;
 8002a0c:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <ExtLights_LightState+0x330>)
 8002a0e:	2201      	movs	r2, #1
 8002a10:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if((ExtLights_DtcArray[2] != 0 || ExtLights_DtcArray[3] != 0) && ExtLights_RearPositionLights_CurrentState == STD_HIGH)
 8002a12:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <ExtLights_LightState+0x340>)
 8002a14:	789b      	ldrb	r3, [r3, #2]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d103      	bne.n	8002a22 <ExtLights_LightState+0x2fe>
 8002a1a:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <ExtLights_LightState+0x340>)
 8002a1c:	78db      	ldrb	r3, [r3, #3]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d006      	beq.n	8002a30 <ExtLights_LightState+0x30c>
 8002a22:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <ExtLights_LightState+0x348>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d102      	bne.n	8002a30 <ExtLights_LightState+0x30c>
	{
		ExtLights_RearFogLight_CurrentState = STD_HIGH;
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <ExtLights_LightState+0x34c>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if((ExtLights_DtcArray[8] != 0 || ExtLights_DtcArray[9] != 0) && ExtLights_BrakeLight_CurrentState == STD_HIGH)
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <ExtLights_LightState+0x340>)
 8002a32:	7a1b      	ldrb	r3, [r3, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d103      	bne.n	8002a40 <ExtLights_LightState+0x31c>
 8002a38:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <ExtLights_LightState+0x340>)
 8002a3a:	7a5b      	ldrb	r3, [r3, #9]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d006      	beq.n	8002a4e <ExtLights_LightState+0x32a>
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <ExtLights_LightState+0x350>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d102      	bne.n	8002a4e <ExtLights_LightState+0x32a>
	{
		ExtLights_ReverseLight_CurrentState = STD_HIGH;
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <ExtLights_LightState+0x33c>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	2000017c 	.word	0x2000017c
 8002a58:	20000199 	.word	0x20000199
 8002a5c:	2000080c 	.word	0x2000080c
 8002a60:	20000177 	.word	0x20000177
 8002a64:	2000019c 	.word	0x2000019c
 8002a68:	2000017f 	.word	0x2000017f
 8002a6c:	20000180 	.word	0x20000180
 8002a70:	20000182 	.word	0x20000182
 8002a74:	20000179 	.word	0x20000179

08002a78 <ExtLights_DeInit>:
/***********************************************************************************
* Function: ExtLights_DeInit										   		       *
* Description: Exterior lights de-initialization.	   							   *
************************************************************************************/
StdReturnType ExtLights_DeInit()
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
	return E_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <ExtLights_MainFunction>:
* Function: ExtLights_MainFunction										   		   *
* Description: Exterior lights application main function. Controls application	   *
* 			   states. 		   													   *
************************************************************************************/
VOID ExtLights_MainFunction()
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
	/* Process application state. */
	switch(ExtLights_ApplState)
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <ExtLights_MainFunction+0x38>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d00c      	beq.n	8002aae <ExtLights_MainFunction+0x26>
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	dc10      	bgt.n	8002aba <ExtLights_MainFunction+0x32>
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <ExtLights_MainFunction+0x1a>
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d009      	beq.n	8002ab4 <ExtLights_MainFunction+0x2c>
			break;
		case EXTLIGHTS_PROCESSLIGHT_STATE:
			ExtLights_LightState();
			break;
		default:
			break;
 8002aa0:	e00b      	b.n	8002aba <ExtLights_MainFunction+0x32>
			ExtLights_Init();
 8002aa2:	f000 f8e7 	bl	8002c74 <ExtLights_Init>
			ExtLights_ApplState = EXTLIGHTS_PROCESSLIGHT_STATE;
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <ExtLights_MainFunction+0x38>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	701a      	strb	r2, [r3, #0]
			break;
 8002aac:	e006      	b.n	8002abc <ExtLights_MainFunction+0x34>
			ExtLights_DeInit();
 8002aae:	f7ff ffe3 	bl	8002a78 <ExtLights_DeInit>
			break;
 8002ab2:	e003      	b.n	8002abc <ExtLights_MainFunction+0x34>
			ExtLights_LightState();
 8002ab4:	f7ff fe36 	bl	8002724 <ExtLights_LightState>
			break;
 8002ab8:	e000      	b.n	8002abc <ExtLights_MainFunction+0x34>
			break;
 8002aba:	bf00      	nop
	}
}
 8002abc:	bf00      	nop
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20000176 	.word	0x20000176

08002ac4 <ExtLights_LightSwitchMode>:
/***********************************************************************************
* Function: ExtLights_LightSwitchMode										   	   *
* Description: Control the light switch.								 		   *
************************************************************************************/
VOID ExtLights_LightSwitchMode()
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
	/* Switch through the light switch states. */
	switch(ExtLights_LightsSwitch_CurrentState)
 8002ac8:	4b62      	ldr	r3, [pc, #392]	; (8002c54 <ExtLights_LightSwitchMode+0x190>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	3b17      	subs	r3, #23
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	f200 80bb 	bhi.w	8002c4a <ExtLights_LightSwitchMode+0x186>
 8002ad4:	a201      	add	r2, pc, #4	; (adr r2, 8002adc <ExtLights_LightSwitchMode+0x18>)
 8002ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ada:	bf00      	nop
 8002adc:	08002aed 	.word	0x08002aed
 8002ae0:	08002b2b 	.word	0x08002b2b
 8002ae4:	08002bbf 	.word	0x08002bbf
 8002ae8:	08002c0d 	.word	0x08002c0d
	{
		/* Switch is on position zero, turn off the lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATEZERO:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8002aec:	4b5a      	ldr	r3, [pc, #360]	; (8002c58 <ExtLights_LightSwitchMode+0x194>)
 8002aee:	781a      	ldrb	r2, [r3, #0]
 8002af0:	4b58      	ldr	r3, [pc, #352]	; (8002c54 <ExtLights_LightSwitchMode+0x190>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d009      	beq.n	8002b0c <ExtLights_LightSwitchMode+0x48>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8002af8:	4b56      	ldr	r3, [pc, #344]	; (8002c54 <ExtLights_LightSwitchMode+0x190>)
 8002afa:	781a      	ldrb	r2, [r3, #0]
 8002afc:	4b56      	ldr	r3, [pc, #344]	; (8002c58 <ExtLights_LightSwitchMode+0x194>)
 8002afe:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8002b00:	2000      	movs	r0, #0
 8002b02:	f013 f891 	bl	8015c28 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8002b06:	2000      	movs	r0, #0
 8002b08:	f013 f89d 	bl	8015c46 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4853      	ldr	r0, [pc, #332]	; (8002c5c <ExtLights_LightSwitchMode+0x198>)
 8002b10:	f013 faf7 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8002b14:	2104      	movs	r1, #4
 8002b16:	4851      	ldr	r0, [pc, #324]	; (8002c5c <ExtLights_LightSwitchMode+0x198>)
 8002b18:	f013 faf3 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 8002b1c:	4b50      	ldr	r3, [pc, #320]	; (8002c60 <ExtLights_LightSwitchMode+0x19c>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8002b22:	4b50      	ldr	r3, [pc, #320]	; (8002c64 <ExtLights_LightSwitchMode+0x1a0>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
			break;
 8002b28:	e092      	b.n	8002c50 <ExtLights_LightSwitchMode+0x18c>
		/* Switch is on position one, turn automatic lights controlled by sensor's input. */
		case EXTLIGHTS_LIGHTSWITCH_STATEONE:
			/* Read the sensor status. */
			if(Rte_P_Os_OsPort_Os_Counter % 39 == 0)
 8002b2a:	4b4f      	ldr	r3, [pc, #316]	; (8002c68 <ExtLights_LightSwitchMode+0x1a4>)
 8002b2c:	6819      	ldr	r1, [r3, #0]
 8002b2e:	4b4f      	ldr	r3, [pc, #316]	; (8002c6c <ExtLights_LightSwitchMode+0x1a8>)
 8002b30:	fba3 2301 	umull	r2, r3, r3, r1
 8002b34:	1aca      	subs	r2, r1, r3
 8002b36:	0852      	lsrs	r2, r2, #1
 8002b38:	4413      	add	r3, r2
 8002b3a:	095a      	lsrs	r2, r3, #5
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	1aca      	subs	r2, r1, r3
 8002b48:	2a00      	cmp	r2, #0
 8002b4a:	d102      	bne.n	8002b52 <ExtLights_LightSwitchMode+0x8e>
			{
				Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(EXTLIGHTS_LS_REQUEST);
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f001 f8eb 	bl	8003d28 <SenCtrl_ProcessSensorValue>
			}
			else
			{
				/* do nothing */
			}
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8002b52:	4b41      	ldr	r3, [pc, #260]	; (8002c58 <ExtLights_LightSwitchMode+0x194>)
 8002b54:	781a      	ldrb	r2, [r3, #0]
 8002b56:	4b3f      	ldr	r3, [pc, #252]	; (8002c54 <ExtLights_LightSwitchMode+0x190>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d009      	beq.n	8002b72 <ExtLights_LightSwitchMode+0xae>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8002b5e:	4b3d      	ldr	r3, [pc, #244]	; (8002c54 <ExtLights_LightSwitchMode+0x190>)
 8002b60:	781a      	ldrb	r2, [r3, #0]
 8002b62:	4b3d      	ldr	r3, [pc, #244]	; (8002c58 <ExtLights_LightSwitchMode+0x194>)
 8002b64:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8002b66:	2000      	movs	r0, #0
 8002b68:	f013 f85e 	bl	8015c28 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f013 f86a 	bl	8015c46 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
			else
			{
				/* do nothing */
			}
			/* If the sensor status is on, turn on the lights to on. */
			if(ExtLights_LightSensorState == 1)
 8002b72:	4b3f      	ldr	r3, [pc, #252]	; (8002c70 <ExtLights_LightSwitchMode+0x1ac>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d10e      	bne.n	8002b98 <ExtLights_LightSwitchMode+0xd4>
			{
				ExtLights_LowBeam_CurrentState = STD_HIGH;
 8002b7a:	4b39      	ldr	r3, [pc, #228]	; (8002c60 <ExtLights_LightSwitchMode+0x19c>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 8002b80:	4b38      	ldr	r3, [pc, #224]	; (8002c64 <ExtLights_LightSwitchMode+0x1a0>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8002b86:	2100      	movs	r1, #0
 8002b88:	4834      	ldr	r0, [pc, #208]	; (8002c5c <ExtLights_LightSwitchMode+0x198>)
 8002b8a:	f013 faad 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8002b8e:	2104      	movs	r1, #4
 8002b90:	4832      	ldr	r0, [pc, #200]	; (8002c5c <ExtLights_LightSwitchMode+0x198>)
 8002b92:	f013 faa9 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				ExtLights_LowBeam_CurrentState = STD_LOW;
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
			}
			break;
 8002b96:	e05a      	b.n	8002c4e <ExtLights_LightSwitchMode+0x18a>
			else if(ExtLights_LightSensorState != 1)
 8002b98:	4b35      	ldr	r3, [pc, #212]	; (8002c70 <ExtLights_LightSwitchMode+0x1ac>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d056      	beq.n	8002c4e <ExtLights_LightSwitchMode+0x18a>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8002ba0:	4b2f      	ldr	r3, [pc, #188]	; (8002c60 <ExtLights_LightSwitchMode+0x19c>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8002ba6:	4b2f      	ldr	r3, [pc, #188]	; (8002c64 <ExtLights_LightSwitchMode+0x1a0>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8002bac:	2100      	movs	r1, #0
 8002bae:	482b      	ldr	r0, [pc, #172]	; (8002c5c <ExtLights_LightSwitchMode+0x198>)
 8002bb0:	f013 faa7 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8002bb4:	2104      	movs	r1, #4
 8002bb6:	4829      	ldr	r0, [pc, #164]	; (8002c5c <ExtLights_LightSwitchMode+0x198>)
 8002bb8:	f013 faa3 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			break;
 8002bbc:	e047      	b.n	8002c4e <ExtLights_LightSwitchMode+0x18a>
		/* Switch is on position three, turn on position lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATETWO:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8002bbe:	4b26      	ldr	r3, [pc, #152]	; (8002c58 <ExtLights_LightSwitchMode+0x194>)
 8002bc0:	781a      	ldrb	r2, [r3, #0]
 8002bc2:	4b24      	ldr	r3, [pc, #144]	; (8002c54 <ExtLights_LightSwitchMode+0x190>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d009      	beq.n	8002bde <ExtLights_LightSwitchMode+0x11a>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8002bca:	4b22      	ldr	r3, [pc, #136]	; (8002c54 <ExtLights_LightSwitchMode+0x190>)
 8002bcc:	781a      	ldrb	r2, [r3, #0]
 8002bce:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <ExtLights_LightSwitchMode+0x194>)
 8002bd0:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	f013 f828 	bl	8015c28 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f013 f834 	bl	8015c46 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8002bde:	2100      	movs	r1, #0
 8002be0:	481e      	ldr	r0, [pc, #120]	; (8002c5c <ExtLights_LightSwitchMode+0x198>)
 8002be2:	f013 fa81 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8002be6:	2104      	movs	r1, #4
 8002be8:	481c      	ldr	r0, [pc, #112]	; (8002c5c <ExtLights_LightSwitchMode+0x198>)
 8002bea:	f013 fa7d 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Write_TimH_TimHPort_Tim2Ccr1(1250);
 8002bee:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8002bf2:	f013 f819 	bl	8015c28 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
			Rte_Write_TimH_TimHPort_Tim2Ccr2(1250);
 8002bf6:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8002bfa:	f013 f824 	bl	8015c46 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
			ExtLights_LowBeam_CurrentState = STD_HIGH;
 8002bfe:	4b18      	ldr	r3, [pc, #96]	; (8002c60 <ExtLights_LightSwitchMode+0x19c>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 8002c04:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <ExtLights_LightSwitchMode+0x1a0>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	701a      	strb	r2, [r3, #0]
			break;
 8002c0a:	e021      	b.n	8002c50 <ExtLights_LightSwitchMode+0x18c>
		/* Switch is on position four, turn on night time lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATETHREE:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8002c0c:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <ExtLights_LightSwitchMode+0x194>)
 8002c0e:	781a      	ldrb	r2, [r3, #0]
 8002c10:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <ExtLights_LightSwitchMode+0x190>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d009      	beq.n	8002c2c <ExtLights_LightSwitchMode+0x168>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8002c18:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <ExtLights_LightSwitchMode+0x190>)
 8002c1a:	781a      	ldrb	r2, [r3, #0]
 8002c1c:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <ExtLights_LightSwitchMode+0x194>)
 8002c1e:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8002c20:	2000      	movs	r0, #0
 8002c22:	f013 f801 	bl	8015c28 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8002c26:	2000      	movs	r0, #0
 8002c28:	f013 f80d 	bl	8015c46 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	480b      	ldr	r0, [pc, #44]	; (8002c5c <ExtLights_LightSwitchMode+0x198>)
 8002c30:	f013 fa5a 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8002c34:	2104      	movs	r1, #4
 8002c36:	4809      	ldr	r0, [pc, #36]	; (8002c5c <ExtLights_LightSwitchMode+0x198>)
 8002c38:	f013 fa56 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			ExtLights_LowBeam_CurrentState = STD_HIGH;
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <ExtLights_LightSwitchMode+0x19c>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <ExtLights_LightSwitchMode+0x1a0>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
			break;
 8002c48:	e002      	b.n	8002c50 <ExtLights_LightSwitchMode+0x18c>
		default:
			break;
 8002c4a:	bf00      	nop
 8002c4c:	e000      	b.n	8002c50 <ExtLights_LightSwitchMode+0x18c>
			break;
 8002c4e:	bf00      	nop
	}
}
 8002c50:	bf00      	nop
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	2000017a 	.word	0x2000017a
 8002c58:	2000019b 	.word	0x2000019b
 8002c5c:	20000758 	.word	0x20000758
 8002c60:	2000017f 	.word	0x2000017f
 8002c64:	20000180 	.word	0x20000180
 8002c68:	200003ac 	.word	0x200003ac
 8002c6c:	a41a41a5 	.word	0xa41a41a5
 8002c70:	20000194 	.word	0x20000194

08002c74 <ExtLights_Init>:
/***********************************************************************************
* Function: ExtLights_Init										   				   *
* Description: Initialize the application variables to 0. 		   				   *
************************************************************************************/
StdReturnType ExtLights_Init()
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
	/* Set all the exterior lights variables to 0. */
	ExtLights_ReverseLight_CurrentState 		= STD_LOW;
 8002c78:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <ExtLights_Init+0x6c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
	ExtLights_BrakeLight_CurrentState 			= STD_LOW;
 8002c7e:	4b19      	ldr	r3, [pc, #100]	; (8002ce4 <ExtLights_Init+0x70>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]
	ExtLights_FlashHighBeam_CurrentState 		= STD_LOW;
 8002c84:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <ExtLights_Init+0x74>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
	ExtLights_LightsSwitch_CurrentState 		= STD_LOW;
 8002c8a:	4b18      	ldr	r3, [pc, #96]	; (8002cec <ExtLights_Init+0x78>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
	ExtLights_HighBeam_CurrentState 			= STD_LOW;
 8002c90:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <ExtLights_Init+0x7c>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	701a      	strb	r2, [r3, #0]
	ExtLights_FrontFogLight_CurrentState 		= STD_LOW;
 8002c96:	4b17      	ldr	r3, [pc, #92]	; (8002cf4 <ExtLights_Init+0x80>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
	ExtLights_TurnSignalLeft_CurrentState 		= STD_LOW;
 8002c9c:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <ExtLights_Init+0x84>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
	ExtLights_TurnSignalRight_CurrentState 		= STD_LOW;
 8002ca2:	4b16      	ldr	r3, [pc, #88]	; (8002cfc <ExtLights_Init+0x88>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
	ExtLights_HazardLight_CurrentState 			= STD_LOW;
 8002ca8:	4b15      	ldr	r3, [pc, #84]	; (8002d00 <ExtLights_Init+0x8c>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
	ExtLights_RearFogLight_CurrentState 		= STD_LOW;
 8002cae:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <ExtLights_Init+0x90>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
	ExtLights_RTSFlag 							= STD_LOW;
 8002cb4:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <ExtLights_Init+0x94>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
	ExtLights_LTSFlag 							= STD_LOW;
 8002cba:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <ExtLights_Init+0x98>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
	ExtLights_HLFlag 							= STD_LOW;
 8002cc0:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <ExtLights_Init+0x9c>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
	ExtLights_LowBeam_CurrentState 				= STD_LOW;
 8002cc6:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <ExtLights_Init+0xa0>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	701a      	strb	r2, [r3, #0]
	ExtLights_RearPositionLights_CurrentState 	= STD_LOW;
 8002ccc:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <ExtLights_Init+0xa4>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
	return E_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20000177 	.word	0x20000177
 8002ce4:	20000179 	.word	0x20000179
 8002ce8:	20000178 	.word	0x20000178
 8002cec:	2000017a 	.word	0x2000017a
 8002cf0:	2000017b 	.word	0x2000017b
 8002cf4:	2000017c 	.word	0x2000017c
 8002cf8:	2000017d 	.word	0x2000017d
 8002cfc:	2000017e 	.word	0x2000017e
 8002d00:	20000181 	.word	0x20000181
 8002d04:	20000182 	.word	0x20000182
 8002d08:	20000188 	.word	0x20000188
 8002d0c:	2000018c 	.word	0x2000018c
 8002d10:	20000190 	.word	0x20000190
 8002d14:	2000017f 	.word	0x2000017f
 8002d18:	20000180 	.word	0x20000180

08002d1c <ExtLights_HighBeam>:
/***********************************************************************************
* Function: ExtLights_HighBeam										   			   *
* Description: High beam trigger. 		  										   *
************************************************************************************/
VOID ExtLights_HighBeam(uint8 PinState)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d2e:	4803      	ldr	r0, [pc, #12]	; (8002d3c <ExtLights_HighBeam+0x20>)
 8002d30:	f013 fbab 	bl	801648a <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8002d34:	bf00      	nop
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40020000 	.word	0x40020000

08002d40 <ExtLights_ReverseLight>:
/***********************************************************************************
* Function: ExtLights_ReverseLight										   		   *
* Description: Reverse light trigger. 		   									   *
************************************************************************************/
VOID ExtLights_ReverseLight(uint8 PinState)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_REVERSELIGHT_PORT, EXTLIGHTS_REVERSELIGHT_PIN, PinState);
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d52:	4803      	ldr	r0, [pc, #12]	; (8002d60 <ExtLights_ReverseLight+0x20>)
 8002d54:	f013 fb99 	bl	801648a <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8002d58:	bf00      	nop
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40020400 	.word	0x40020400

08002d64 <Hvac_Init>:
/***********************************************************************************
* Function: Hvac_Init											 		   		   *
* Description: Application initialization.					           			   *
************************************************************************************/
StdReturnType Hvac_Init()
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
	Hvac_MainCounter 				= STD_LOW;
 8002d68:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <Hvac_Init+0x6c>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
	Hvac_CurrentState 				= STD_LOW;
 8002d6e:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <Hvac_Init+0x70>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
	Hvac_FanValue 					= STD_LOW;
 8002d74:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <Hvac_Init+0x74>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	701a      	strb	r2, [r3, #0]
	Hvac_TemperatureValue 			= STD_LOW;
 8002d7a:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <Hvac_Init+0x78>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
	Hvac_LegVent 					= STD_LOW;
 8002d80:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <Hvac_Init+0x7c>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	701a      	strb	r2, [r3, #0]
	Hvac_MidVent 					= STD_LOW;
 8002d86:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <Hvac_Init+0x80>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
	Hvac_WindshieldVent 			= STD_LOW;
 8002d8c:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <Hvac_Init+0x84>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	701a      	strb	r2, [r3, #0]
	Hvac_WindshieldDefrost 			= STD_LOW;
 8002d92:	4b16      	ldr	r3, [pc, #88]	; (8002dec <Hvac_Init+0x88>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	701a      	strb	r2, [r3, #0]
	Hvac_RearWindshieldDefrost 		= STD_LOW;
 8002d98:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <Hvac_Init+0x8c>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	701a      	strb	r2, [r3, #0]
	Hvac_Ac 						= STD_LOW;
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <Hvac_Init+0x90>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	701a      	strb	r2, [r3, #0]
	Hvac_Recirculation 				= STD_LOW;
 8002da4:	4b14      	ldr	r3, [pc, #80]	; (8002df8 <Hvac_Init+0x94>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	701a      	strb	r2, [r3, #0]
	Hvac_NoRecirculation 			= STD_LOW;
 8002daa:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <Hvac_Init+0x98>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
	Hvac_AutomaticRecirculation 	= STD_LOW;
 8002db0:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <Hvac_Init+0x9c>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]
	Hvac_AutomaticMode 				= STD_LOW;
 8002db6:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <Hvac_Init+0xa0>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
	Hvac_ApplState 					= HVAC_PROCESSCOMMAND_STATE;
 8002dbc:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <Hvac_Init+0xa4>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	701a      	strb	r2, [r3, #0]
	return E_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	200001a8 	.word	0x200001a8
 8002dd4:	200001ae 	.word	0x200001ae
 8002dd8:	200001af 	.word	0x200001af
 8002ddc:	200001b0 	.word	0x200001b0
 8002de0:	200001b1 	.word	0x200001b1
 8002de4:	200001b2 	.word	0x200001b2
 8002de8:	200001b3 	.word	0x200001b3
 8002dec:	200001b4 	.word	0x200001b4
 8002df0:	200001b5 	.word	0x200001b5
 8002df4:	200001b6 	.word	0x200001b6
 8002df8:	200001b7 	.word	0x200001b7
 8002dfc:	200001b8 	.word	0x200001b8
 8002e00:	200001b9 	.word	0x200001b9
 8002e04:	200001ba 	.word	0x200001ba
 8002e08:	200001ad 	.word	0x200001ad

08002e0c <Hvac_DeInit>:
/***********************************************************************************
* Function: Hvac_DeInit											 		  		   *
* Description: Application de-initialization.					           		   *
************************************************************************************/
StdReturnType Hvac_DeInit()
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
	/* Perform write all in memory. */
	return E_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <Hvac_MainFunction>:
/***********************************************************************************
* Function: Hvac_MainFunction											 		   *
* Description: Application main function.					                       *
************************************************************************************/
VOID Hvac_MainFunction()
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
	Hvac_MainCounter++;
 8002e20:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <Hvac_MainFunction+0x3c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	3301      	adds	r3, #1
 8002e26:	4a0c      	ldr	r2, [pc, #48]	; (8002e58 <Hvac_MainFunction+0x3c>)
 8002e28:	6013      	str	r3, [r2, #0]
	/* Process application state. */
	switch(Hvac_ApplState)
 8002e2a:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <Hvac_MainFunction+0x40>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d009      	beq.n	8002e46 <Hvac_MainFunction+0x2a>
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	dc0d      	bgt.n	8002e52 <Hvac_MainFunction+0x36>
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <Hvac_MainFunction+0x24>
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d006      	beq.n	8002e4c <Hvac_MainFunction+0x30>
			break;
		case HVAC_PROCESSCOMMAND_STATE:
			Hvac_ProcessCommand();
			break;
		default:
			break;
 8002e3e:	e008      	b.n	8002e52 <Hvac_MainFunction+0x36>
			Hvac_Init();
 8002e40:	f7ff ff90 	bl	8002d64 <Hvac_Init>
			break;
 8002e44:	e006      	b.n	8002e54 <Hvac_MainFunction+0x38>
			Hvac_DeInit();
 8002e46:	f7ff ffe1 	bl	8002e0c <Hvac_DeInit>
			break;
 8002e4a:	e003      	b.n	8002e54 <Hvac_MainFunction+0x38>
			Hvac_ProcessCommand();
 8002e4c:	f000 f808 	bl	8002e60 <Hvac_ProcessCommand>
			break;
 8002e50:	e000      	b.n	8002e54 <Hvac_MainFunction+0x38>
			break;
 8002e52:	bf00      	nop
	}
}
 8002e54:	bf00      	nop
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	200001a8 	.word	0x200001a8
 8002e5c:	200001ad 	.word	0x200001ad

08002e60 <Hvac_ProcessCommand>:
/***********************************************************************************
* Function: Hvac_ProcessCommand											 		   *
* Description: Process HVAC states.					                               *
************************************************************************************/
VOID Hvac_ProcessCommand()
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
	static uint8 sensorValueTs = 0;
	char buffer_T[3];
	char buffer_F[2];
	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(HVAC_TS_REQUEST);
 8002e66:	2003      	movs	r0, #3
 8002e68:	f000 ff5e 	bl	8003d28 <SenCtrl_ProcessSensorValue>
	sensorValueTs = Hvac_TsState;
 8002e6c:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <Hvac_ProcessCommand+0x70>)
 8002e6e:	781a      	ldrb	r2, [r3, #0]
 8002e70:	4b18      	ldr	r3, [pc, #96]	; (8002ed4 <Hvac_ProcessCommand+0x74>)
 8002e72:	701a      	strb	r2, [r3, #0]
	if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8002e74:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <Hvac_ProcessCommand+0x78>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	f040 81e3 	bne.w	8003244 <Hvac_ProcessCommand+0x3e4>
	{
		if(Hvac_MainCounter % 50 == 0)
 8002e7e:	4b17      	ldr	r3, [pc, #92]	; (8002edc <Hvac_ProcessCommand+0x7c>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	4b17      	ldr	r3, [pc, #92]	; (8002ee0 <Hvac_ProcessCommand+0x80>)
 8002e84:	fba3 1302 	umull	r1, r3, r3, r2
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	2132      	movs	r1, #50	; 0x32
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <Hvac_ProcessCommand+0x3a>
		{
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_Clear();
 8002e96:	f002 fc01 	bl	800569c <I2cLcd_Clear>
		else
		{
			/* do nothing */
		}

		if(Btc_FanValue == STD_LOW)
 8002e9a:	4b12      	ldr	r3, [pc, #72]	; (8002ee4 <Hvac_ProcessCommand+0x84>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d102      	bne.n	8002ea8 <Hvac_ProcessCommand+0x48>
		{
			Hvac_FanValue = 1;
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <Hvac_ProcessCommand+0x88>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(Btc_TemperatureValue == STD_LOW)
 8002ea8:	4b10      	ldr	r3, [pc, #64]	; (8002eec <Hvac_ProcessCommand+0x8c>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d106      	bne.n	8002ebe <Hvac_ProcessCommand+0x5e>
		{
			Hvac_TemperatureValue = 22;
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <Hvac_ProcessCommand+0x90>)
 8002eb2:	2216      	movs	r2, #22
 8002eb4:	701a      	strb	r2, [r3, #0]
			Hvac_prevTemperatureValue = Hvac_TemperatureValue;
 8002eb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <Hvac_ProcessCommand+0x90>)
 8002eb8:	781a      	ldrb	r2, [r3, #0]
 8002eba:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <Hvac_ProcessCommand+0x94>)
 8002ebc:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(Hvac_FanValue != STD_LOW)
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <Hvac_ProcessCommand+0x88>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d01a      	beq.n	8002efc <Hvac_ProcessCommand+0x9c>
		{
			Hvac_CurrentState = STD_HIGH;
 8002ec6:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <Hvac_ProcessCommand+0x98>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	701a      	strb	r2, [r3, #0]
 8002ecc:	e01d      	b.n	8002f0a <Hvac_ProcessCommand+0xaa>
 8002ece:	bf00      	nop
 8002ed0:	200001ac 	.word	0x200001ac
 8002ed4:	200001c6 	.word	0x200001c6
 8002ed8:	20000139 	.word	0x20000139
 8002edc:	200001a8 	.word	0x200001a8
 8002ee0:	51eb851f 	.word	0x51eb851f
 8002ee4:	20000106 	.word	0x20000106
 8002ee8:	200001af 	.word	0x200001af
 8002eec:	20000107 	.word	0x20000107
 8002ef0:	200001b0 	.word	0x200001b0
 8002ef4:	200001c5 	.word	0x200001c5
 8002ef8:	200001ae 	.word	0x200001ae
		}
		else if(Hvac_FanValue == STD_LOW)
 8002efc:	4b8f      	ldr	r3, [pc, #572]	; (800313c <Hvac_ProcessCommand+0x2dc>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d102      	bne.n	8002f0a <Hvac_ProcessCommand+0xaa>
		{
			Hvac_CurrentState = STD_LOW;
 8002f04:	4b8e      	ldr	r3, [pc, #568]	; (8003140 <Hvac_ProcessCommand+0x2e0>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(Hvac_TemperatureValue != Hvac_prevTemperatureValue)
 8002f0a:	4b8e      	ldr	r3, [pc, #568]	; (8003144 <Hvac_ProcessCommand+0x2e4>)
 8002f0c:	781a      	ldrb	r2, [r3, #0]
 8002f0e:	4b8e      	ldr	r3, [pc, #568]	; (8003148 <Hvac_ProcessCommand+0x2e8>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d018      	beq.n	8002f48 <Hvac_ProcessCommand+0xe8>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002f16:	4b8d      	ldr	r3, [pc, #564]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b1f      	cmp	r3, #31
 8002f1c:	d007      	beq.n	8002f2e <Hvac_ProcessCommand+0xce>
 8002f1e:	4b8b      	ldr	r3, [pc, #556]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <Hvac_ProcessCommand+0xce>
 8002f26:	4b85      	ldr	r3, [pc, #532]	; (800313c <Hvac_ProcessCommand+0x2dc>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d105      	bne.n	8002f3a <Hvac_ProcessCommand+0xda>
			{
				Btc_FanValue = 31;
 8002f2e:	4b87      	ldr	r3, [pc, #540]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 8002f30:	221f      	movs	r2, #31
 8002f32:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002f34:	4b81      	ldr	r3, [pc, #516]	; (800313c <Hvac_ProcessCommand+0x2dc>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Hvac_prevTemperatureValue = Hvac_TemperatureValue;
 8002f3a:	4b82      	ldr	r3, [pc, #520]	; (8003144 <Hvac_ProcessCommand+0x2e4>)
 8002f3c:	781a      	ldrb	r2, [r3, #0]
 8002f3e:	4b82      	ldr	r3, [pc, #520]	; (8003148 <Hvac_ProcessCommand+0x2e8>)
 8002f40:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002f42:	4b7f      	ldr	r3, [pc, #508]	; (8003140 <Hvac_ProcessCommand+0x2e0>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_Ac != Hvac_Ac)
 8002f48:	4b81      	ldr	r3, [pc, #516]	; (8003150 <Hvac_ProcessCommand+0x2f0>)
 8002f4a:	781a      	ldrb	r2, [r3, #0]
 8002f4c:	4b81      	ldr	r3, [pc, #516]	; (8003154 <Hvac_ProcessCommand+0x2f4>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d018      	beq.n	8002f86 <Hvac_ProcessCommand+0x126>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002f54:	4b7d      	ldr	r3, [pc, #500]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b1f      	cmp	r3, #31
 8002f5a:	d007      	beq.n	8002f6c <Hvac_ProcessCommand+0x10c>
 8002f5c:	4b7b      	ldr	r3, [pc, #492]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <Hvac_ProcessCommand+0x10c>
 8002f64:	4b75      	ldr	r3, [pc, #468]	; (800313c <Hvac_ProcessCommand+0x2dc>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d105      	bne.n	8002f78 <Hvac_ProcessCommand+0x118>
			{
				Btc_FanValue = 31;
 8002f6c:	4b77      	ldr	r3, [pc, #476]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 8002f6e:	221f      	movs	r2, #31
 8002f70:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002f72:	4b72      	ldr	r3, [pc, #456]	; (800313c <Hvac_ProcessCommand+0x2dc>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_Ac = Hvac_Ac;
 8002f78:	4b76      	ldr	r3, [pc, #472]	; (8003154 <Hvac_ProcessCommand+0x2f4>)
 8002f7a:	781a      	ldrb	r2, [r3, #0]
 8002f7c:	4b74      	ldr	r3, [pc, #464]	; (8003150 <Hvac_ProcessCommand+0x2f0>)
 8002f7e:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002f80:	4b6f      	ldr	r3, [pc, #444]	; (8003140 <Hvac_ProcessCommand+0x2e0>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_AutomaticMode != Hvac_AutomaticMode)
 8002f86:	4b74      	ldr	r3, [pc, #464]	; (8003158 <Hvac_ProcessCommand+0x2f8>)
 8002f88:	781a      	ldrb	r2, [r3, #0]
 8002f8a:	4b74      	ldr	r3, [pc, #464]	; (800315c <Hvac_ProcessCommand+0x2fc>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d018      	beq.n	8002fc4 <Hvac_ProcessCommand+0x164>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002f92:	4b6e      	ldr	r3, [pc, #440]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b1f      	cmp	r3, #31
 8002f98:	d007      	beq.n	8002faa <Hvac_ProcessCommand+0x14a>
 8002f9a:	4b6c      	ldr	r3, [pc, #432]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <Hvac_ProcessCommand+0x14a>
 8002fa2:	4b66      	ldr	r3, [pc, #408]	; (800313c <Hvac_ProcessCommand+0x2dc>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d105      	bne.n	8002fb6 <Hvac_ProcessCommand+0x156>
			{
				Btc_FanValue = 31;
 8002faa:	4b68      	ldr	r3, [pc, #416]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 8002fac:	221f      	movs	r2, #31
 8002fae:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002fb0:	4b62      	ldr	r3, [pc, #392]	; (800313c <Hvac_ProcessCommand+0x2dc>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_AutomaticMode = Hvac_AutomaticMode;
 8002fb6:	4b69      	ldr	r3, [pc, #420]	; (800315c <Hvac_ProcessCommand+0x2fc>)
 8002fb8:	781a      	ldrb	r2, [r3, #0]
 8002fba:	4b67      	ldr	r3, [pc, #412]	; (8003158 <Hvac_ProcessCommand+0x2f8>)
 8002fbc:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002fbe:	4b60      	ldr	r3, [pc, #384]	; (8003140 <Hvac_ProcessCommand+0x2e0>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_LegVent != Hvac_LegVent)
 8002fc4:	4b66      	ldr	r3, [pc, #408]	; (8003160 <Hvac_ProcessCommand+0x300>)
 8002fc6:	781a      	ldrb	r2, [r3, #0]
 8002fc8:	4b66      	ldr	r3, [pc, #408]	; (8003164 <Hvac_ProcessCommand+0x304>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d018      	beq.n	8003002 <Hvac_ProcessCommand+0x1a2>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002fd0:	4b5e      	ldr	r3, [pc, #376]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b1f      	cmp	r3, #31
 8002fd6:	d007      	beq.n	8002fe8 <Hvac_ProcessCommand+0x188>
 8002fd8:	4b5c      	ldr	r3, [pc, #368]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <Hvac_ProcessCommand+0x188>
 8002fe0:	4b56      	ldr	r3, [pc, #344]	; (800313c <Hvac_ProcessCommand+0x2dc>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <Hvac_ProcessCommand+0x194>
			{
				Btc_FanValue = 31;
 8002fe8:	4b58      	ldr	r3, [pc, #352]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 8002fea:	221f      	movs	r2, #31
 8002fec:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002fee:	4b53      	ldr	r3, [pc, #332]	; (800313c <Hvac_ProcessCommand+0x2dc>)
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_LegVent = Hvac_LegVent;
 8002ff4:	4b5b      	ldr	r3, [pc, #364]	; (8003164 <Hvac_ProcessCommand+0x304>)
 8002ff6:	781a      	ldrb	r2, [r3, #0]
 8002ff8:	4b59      	ldr	r3, [pc, #356]	; (8003160 <Hvac_ProcessCommand+0x300>)
 8002ffa:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002ffc:	4b50      	ldr	r3, [pc, #320]	; (8003140 <Hvac_ProcessCommand+0x2e0>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_MidVent != Hvac_MidVent)
 8003002:	4b59      	ldr	r3, [pc, #356]	; (8003168 <Hvac_ProcessCommand+0x308>)
 8003004:	781a      	ldrb	r2, [r3, #0]
 8003006:	4b59      	ldr	r3, [pc, #356]	; (800316c <Hvac_ProcessCommand+0x30c>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d018      	beq.n	8003040 <Hvac_ProcessCommand+0x1e0>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 800300e:	4b4f      	ldr	r3, [pc, #316]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b1f      	cmp	r3, #31
 8003014:	d007      	beq.n	8003026 <Hvac_ProcessCommand+0x1c6>
 8003016:	4b4d      	ldr	r3, [pc, #308]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <Hvac_ProcessCommand+0x1c6>
 800301e:	4b47      	ldr	r3, [pc, #284]	; (800313c <Hvac_ProcessCommand+0x2dc>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d105      	bne.n	8003032 <Hvac_ProcessCommand+0x1d2>
			{
				Btc_FanValue = 31;
 8003026:	4b49      	ldr	r3, [pc, #292]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 8003028:	221f      	movs	r2, #31
 800302a:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 800302c:	4b43      	ldr	r3, [pc, #268]	; (800313c <Hvac_ProcessCommand+0x2dc>)
 800302e:	2201      	movs	r2, #1
 8003030:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_MidVent = Hvac_MidVent;
 8003032:	4b4e      	ldr	r3, [pc, #312]	; (800316c <Hvac_ProcessCommand+0x30c>)
 8003034:	781a      	ldrb	r2, [r3, #0]
 8003036:	4b4c      	ldr	r3, [pc, #304]	; (8003168 <Hvac_ProcessCommand+0x308>)
 8003038:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 800303a:	4b41      	ldr	r3, [pc, #260]	; (8003140 <Hvac_ProcessCommand+0x2e0>)
 800303c:	2201      	movs	r2, #1
 800303e:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_WindshieldVent != Hvac_WindshieldVent)
 8003040:	4b4b      	ldr	r3, [pc, #300]	; (8003170 <Hvac_ProcessCommand+0x310>)
 8003042:	781a      	ldrb	r2, [r3, #0]
 8003044:	4b4b      	ldr	r3, [pc, #300]	; (8003174 <Hvac_ProcessCommand+0x314>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d018      	beq.n	800307e <Hvac_ProcessCommand+0x21e>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 800304c:	4b3f      	ldr	r3, [pc, #252]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b1f      	cmp	r3, #31
 8003052:	d007      	beq.n	8003064 <Hvac_ProcessCommand+0x204>
 8003054:	4b3d      	ldr	r3, [pc, #244]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <Hvac_ProcessCommand+0x204>
 800305c:	4b37      	ldr	r3, [pc, #220]	; (800313c <Hvac_ProcessCommand+0x2dc>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d105      	bne.n	8003070 <Hvac_ProcessCommand+0x210>
			{
				Btc_FanValue = 31;
 8003064:	4b39      	ldr	r3, [pc, #228]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 8003066:	221f      	movs	r2, #31
 8003068:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 800306a:	4b34      	ldr	r3, [pc, #208]	; (800313c <Hvac_ProcessCommand+0x2dc>)
 800306c:	2201      	movs	r2, #1
 800306e:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_WindshieldVent = Hvac_WindshieldVent;
 8003070:	4b40      	ldr	r3, [pc, #256]	; (8003174 <Hvac_ProcessCommand+0x314>)
 8003072:	781a      	ldrb	r2, [r3, #0]
 8003074:	4b3e      	ldr	r3, [pc, #248]	; (8003170 <Hvac_ProcessCommand+0x310>)
 8003076:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8003078:	4b31      	ldr	r3, [pc, #196]	; (8003140 <Hvac_ProcessCommand+0x2e0>)
 800307a:	2201      	movs	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_WindshieldVent != Hvac_WindshieldVent)
 800307e:	4b3c      	ldr	r3, [pc, #240]	; (8003170 <Hvac_ProcessCommand+0x310>)
 8003080:	781a      	ldrb	r2, [r3, #0]
 8003082:	4b3c      	ldr	r3, [pc, #240]	; (8003174 <Hvac_ProcessCommand+0x314>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d018      	beq.n	80030bc <Hvac_ProcessCommand+0x25c>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 800308a:	4b30      	ldr	r3, [pc, #192]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b1f      	cmp	r3, #31
 8003090:	d007      	beq.n	80030a2 <Hvac_ProcessCommand+0x242>
 8003092:	4b2e      	ldr	r3, [pc, #184]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <Hvac_ProcessCommand+0x242>
 800309a:	4b28      	ldr	r3, [pc, #160]	; (800313c <Hvac_ProcessCommand+0x2dc>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d105      	bne.n	80030ae <Hvac_ProcessCommand+0x24e>
			{
				Btc_FanValue = 31;
 80030a2:	4b2a      	ldr	r3, [pc, #168]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 80030a4:	221f      	movs	r2, #31
 80030a6:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 80030a8:	4b24      	ldr	r3, [pc, #144]	; (800313c <Hvac_ProcessCommand+0x2dc>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_WindshieldVent = Hvac_WindshieldVent;
 80030ae:	4b31      	ldr	r3, [pc, #196]	; (8003174 <Hvac_ProcessCommand+0x314>)
 80030b0:	781a      	ldrb	r2, [r3, #0]
 80030b2:	4b2f      	ldr	r3, [pc, #188]	; (8003170 <Hvac_ProcessCommand+0x310>)
 80030b4:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 80030b6:	4b22      	ldr	r3, [pc, #136]	; (8003140 <Hvac_ProcessCommand+0x2e0>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_WindshieldDefrost != Hvac_WindshieldDefrost)
 80030bc:	4b2e      	ldr	r3, [pc, #184]	; (8003178 <Hvac_ProcessCommand+0x318>)
 80030be:	781a      	ldrb	r2, [r3, #0]
 80030c0:	4b2e      	ldr	r3, [pc, #184]	; (800317c <Hvac_ProcessCommand+0x31c>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d018      	beq.n	80030fa <Hvac_ProcessCommand+0x29a>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 80030c8:	4b20      	ldr	r3, [pc, #128]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b1f      	cmp	r3, #31
 80030ce:	d007      	beq.n	80030e0 <Hvac_ProcessCommand+0x280>
 80030d0:	4b1e      	ldr	r3, [pc, #120]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <Hvac_ProcessCommand+0x280>
 80030d8:	4b18      	ldr	r3, [pc, #96]	; (800313c <Hvac_ProcessCommand+0x2dc>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <Hvac_ProcessCommand+0x28c>
			{
				Btc_FanValue = 31;
 80030e0:	4b1a      	ldr	r3, [pc, #104]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 80030e2:	221f      	movs	r2, #31
 80030e4:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 80030e6:	4b15      	ldr	r3, [pc, #84]	; (800313c <Hvac_ProcessCommand+0x2dc>)
 80030e8:	2201      	movs	r2, #1
 80030ea:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_WindshieldDefrost = Hvac_WindshieldDefrost;
 80030ec:	4b23      	ldr	r3, [pc, #140]	; (800317c <Hvac_ProcessCommand+0x31c>)
 80030ee:	781a      	ldrb	r2, [r3, #0]
 80030f0:	4b21      	ldr	r3, [pc, #132]	; (8003178 <Hvac_ProcessCommand+0x318>)
 80030f2:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 80030f4:	4b12      	ldr	r3, [pc, #72]	; (8003140 <Hvac_ProcessCommand+0x2e0>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_RearWindshieldDefrost != Hvac_RearWindshieldDefrost)
 80030fa:	4b21      	ldr	r3, [pc, #132]	; (8003180 <Hvac_ProcessCommand+0x320>)
 80030fc:	781a      	ldrb	r2, [r3, #0]
 80030fe:	4b21      	ldr	r3, [pc, #132]	; (8003184 <Hvac_ProcessCommand+0x324>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d040      	beq.n	8003188 <Hvac_ProcessCommand+0x328>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8003106:	4b11      	ldr	r3, [pc, #68]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b1f      	cmp	r3, #31
 800310c:	d007      	beq.n	800311e <Hvac_ProcessCommand+0x2be>
 800310e:	4b0f      	ldr	r3, [pc, #60]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <Hvac_ProcessCommand+0x2be>
 8003116:	4b09      	ldr	r3, [pc, #36]	; (800313c <Hvac_ProcessCommand+0x2dc>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d105      	bne.n	800312a <Hvac_ProcessCommand+0x2ca>
			{
				Btc_FanValue = 31;
 800311e:	4b0b      	ldr	r3, [pc, #44]	; (800314c <Hvac_ProcessCommand+0x2ec>)
 8003120:	221f      	movs	r2, #31
 8003122:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <Hvac_ProcessCommand+0x2dc>)
 8003126:	2201      	movs	r2, #1
 8003128:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_RearWindshieldDefrost = Hvac_RearWindshieldDefrost;
 800312a:	4b16      	ldr	r3, [pc, #88]	; (8003184 <Hvac_ProcessCommand+0x324>)
 800312c:	781a      	ldrb	r2, [r3, #0]
 800312e:	4b14      	ldr	r3, [pc, #80]	; (8003180 <Hvac_ProcessCommand+0x320>)
 8003130:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8003132:	4b03      	ldr	r3, [pc, #12]	; (8003140 <Hvac_ProcessCommand+0x2e0>)
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	e026      	b.n	8003188 <Hvac_ProcessCommand+0x328>
 800313a:	bf00      	nop
 800313c:	200001af 	.word	0x200001af
 8003140:	200001ae 	.word	0x200001ae
 8003144:	200001b0 	.word	0x200001b0
 8003148:	200001c5 	.word	0x200001c5
 800314c:	20000106 	.word	0x20000106
 8003150:	200001c1 	.word	0x200001c1
 8003154:	200001b6 	.word	0x200001b6
 8003158:	200001c4 	.word	0x200001c4
 800315c:	200001ba 	.word	0x200001ba
 8003160:	200001bc 	.word	0x200001bc
 8003164:	200001b1 	.word	0x200001b1
 8003168:	200001bd 	.word	0x200001bd
 800316c:	200001b2 	.word	0x200001b2
 8003170:	200001be 	.word	0x200001be
 8003174:	200001b3 	.word	0x200001b3
 8003178:	200001bf 	.word	0x200001bf
 800317c:	200001b4 	.word	0x200001b4
 8003180:	200001c0 	.word	0x200001c0
 8003184:	200001b5 	.word	0x200001b5
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_Recirculation != Hvac_Recirculation)
 8003188:	4ba3      	ldr	r3, [pc, #652]	; (8003418 <Hvac_ProcessCommand+0x5b8>)
 800318a:	781a      	ldrb	r2, [r3, #0]
 800318c:	4ba3      	ldr	r3, [pc, #652]	; (800341c <Hvac_ProcessCommand+0x5bc>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d018      	beq.n	80031c6 <Hvac_ProcessCommand+0x366>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8003194:	4ba2      	ldr	r3, [pc, #648]	; (8003420 <Hvac_ProcessCommand+0x5c0>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b1f      	cmp	r3, #31
 800319a:	d007      	beq.n	80031ac <Hvac_ProcessCommand+0x34c>
 800319c:	4ba0      	ldr	r3, [pc, #640]	; (8003420 <Hvac_ProcessCommand+0x5c0>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <Hvac_ProcessCommand+0x34c>
 80031a4:	4b9f      	ldr	r3, [pc, #636]	; (8003424 <Hvac_ProcessCommand+0x5c4>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d105      	bne.n	80031b8 <Hvac_ProcessCommand+0x358>
			{
				Btc_FanValue = 31;
 80031ac:	4b9c      	ldr	r3, [pc, #624]	; (8003420 <Hvac_ProcessCommand+0x5c0>)
 80031ae:	221f      	movs	r2, #31
 80031b0:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 80031b2:	4b9c      	ldr	r3, [pc, #624]	; (8003424 <Hvac_ProcessCommand+0x5c4>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_Recirculation = Hvac_Recirculation;
 80031b8:	4b98      	ldr	r3, [pc, #608]	; (800341c <Hvac_ProcessCommand+0x5bc>)
 80031ba:	781a      	ldrb	r2, [r3, #0]
 80031bc:	4b96      	ldr	r3, [pc, #600]	; (8003418 <Hvac_ProcessCommand+0x5b8>)
 80031be:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 80031c0:	4b99      	ldr	r3, [pc, #612]	; (8003428 <Hvac_ProcessCommand+0x5c8>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_Recirculation != Hvac_Recirculation)
 80031c6:	4b94      	ldr	r3, [pc, #592]	; (8003418 <Hvac_ProcessCommand+0x5b8>)
 80031c8:	781a      	ldrb	r2, [r3, #0]
 80031ca:	4b94      	ldr	r3, [pc, #592]	; (800341c <Hvac_ProcessCommand+0x5bc>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d018      	beq.n	8003204 <Hvac_ProcessCommand+0x3a4>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 80031d2:	4b93      	ldr	r3, [pc, #588]	; (8003420 <Hvac_ProcessCommand+0x5c0>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b1f      	cmp	r3, #31
 80031d8:	d007      	beq.n	80031ea <Hvac_ProcessCommand+0x38a>
 80031da:	4b91      	ldr	r3, [pc, #580]	; (8003420 <Hvac_ProcessCommand+0x5c0>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <Hvac_ProcessCommand+0x38a>
 80031e2:	4b90      	ldr	r3, [pc, #576]	; (8003424 <Hvac_ProcessCommand+0x5c4>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d105      	bne.n	80031f6 <Hvac_ProcessCommand+0x396>
			{
				Btc_FanValue = 31;
 80031ea:	4b8d      	ldr	r3, [pc, #564]	; (8003420 <Hvac_ProcessCommand+0x5c0>)
 80031ec:	221f      	movs	r2, #31
 80031ee:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 80031f0:	4b8c      	ldr	r3, [pc, #560]	; (8003424 <Hvac_ProcessCommand+0x5c4>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_Recirculation = Hvac_Recirculation;
 80031f6:	4b89      	ldr	r3, [pc, #548]	; (800341c <Hvac_ProcessCommand+0x5bc>)
 80031f8:	781a      	ldrb	r2, [r3, #0]
 80031fa:	4b87      	ldr	r3, [pc, #540]	; (8003418 <Hvac_ProcessCommand+0x5b8>)
 80031fc:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 80031fe:	4b8a      	ldr	r3, [pc, #552]	; (8003428 <Hvac_ProcessCommand+0x5c8>)
 8003200:	2201      	movs	r2, #1
 8003202:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_NoRecirculation != Hvac_NoRecirculation)
 8003204:	4b89      	ldr	r3, [pc, #548]	; (800342c <Hvac_ProcessCommand+0x5cc>)
 8003206:	781a      	ldrb	r2, [r3, #0]
 8003208:	4b89      	ldr	r3, [pc, #548]	; (8003430 <Hvac_ProcessCommand+0x5d0>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d023      	beq.n	8003258 <Hvac_ProcessCommand+0x3f8>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8003210:	4b83      	ldr	r3, [pc, #524]	; (8003420 <Hvac_ProcessCommand+0x5c0>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b1f      	cmp	r3, #31
 8003216:	d007      	beq.n	8003228 <Hvac_ProcessCommand+0x3c8>
 8003218:	4b81      	ldr	r3, [pc, #516]	; (8003420 <Hvac_ProcessCommand+0x5c0>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <Hvac_ProcessCommand+0x3c8>
 8003220:	4b80      	ldr	r3, [pc, #512]	; (8003424 <Hvac_ProcessCommand+0x5c4>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d105      	bne.n	8003234 <Hvac_ProcessCommand+0x3d4>
			{
				Btc_FanValue = 31;
 8003228:	4b7d      	ldr	r3, [pc, #500]	; (8003420 <Hvac_ProcessCommand+0x5c0>)
 800322a:	221f      	movs	r2, #31
 800322c:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 800322e:	4b7d      	ldr	r3, [pc, #500]	; (8003424 <Hvac_ProcessCommand+0x5c4>)
 8003230:	2201      	movs	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_NoRecirculation = Hvac_NoRecirculation;
 8003234:	4b7e      	ldr	r3, [pc, #504]	; (8003430 <Hvac_ProcessCommand+0x5d0>)
 8003236:	781a      	ldrb	r2, [r3, #0]
 8003238:	4b7c      	ldr	r3, [pc, #496]	; (800342c <Hvac_ProcessCommand+0x5cc>)
 800323a:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 800323c:	4b7a      	ldr	r3, [pc, #488]	; (8003428 <Hvac_ProcessCommand+0x5c8>)
 800323e:	2201      	movs	r2, #1
 8003240:	701a      	strb	r2, [r3, #0]
 8003242:	e009      	b.n	8003258 <Hvac_ProcessCommand+0x3f8>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW)
 8003244:	4b7b      	ldr	r3, [pc, #492]	; (8003434 <Hvac_ProcessCommand+0x5d4>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d105      	bne.n	8003258 <Hvac_ProcessCommand+0x3f8>
	{
		Hvac_CurrentState = STD_LOW;
 800324c:	4b76      	ldr	r3, [pc, #472]	; (8003428 <Hvac_ProcessCommand+0x5c8>)
 800324e:	2200      	movs	r2, #0
 8003250:	701a      	strb	r2, [r3, #0]
		Hvac_IsCleared = STD_LOW;
 8003252:	4b79      	ldr	r3, [pc, #484]	; (8003438 <Hvac_ProcessCommand+0x5d8>)
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	sprintf(buffer_T, "%u", (unsigned int) Hvac_TemperatureValue);
 8003258:	4b78      	ldr	r3, [pc, #480]	; (800343c <Hvac_ProcessCommand+0x5dc>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	1d3b      	adds	r3, r7, #4
 8003260:	4977      	ldr	r1, [pc, #476]	; (8003440 <Hvac_ProcessCommand+0x5e0>)
 8003262:	4618      	mov	r0, r3
 8003264:	f014 fd42 	bl	8017cec <siprintf>
	sprintf(buffer_F, "%u", (unsigned int) Hvac_FanValue);
 8003268:	4b6e      	ldr	r3, [pc, #440]	; (8003424 <Hvac_ProcessCommand+0x5c4>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	463b      	mov	r3, r7
 8003270:	4973      	ldr	r1, [pc, #460]	; (8003440 <Hvac_ProcessCommand+0x5e0>)
 8003272:	4618      	mov	r0, r3
 8003274:	f014 fd3a 	bl	8017cec <siprintf>
	if(Hvac_CurrentState == STD_LOW && Hvac_IsCleared == STD_LOW)
 8003278:	4b6b      	ldr	r3, [pc, #428]	; (8003428 <Hvac_ProcessCommand+0x5c8>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d109      	bne.n	8003294 <Hvac_ProcessCommand+0x434>
 8003280:	4b6d      	ldr	r3, [pc, #436]	; (8003438 <Hvac_ProcessCommand+0x5d8>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d105      	bne.n	8003294 <Hvac_ProcessCommand+0x434>
	{
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_Clear();
 8003288:	f002 fa08 	bl	800569c <I2cLcd_Clear>
		Hvac_IsCleared = STD_HIGH;
 800328c:	4b6a      	ldr	r3, [pc, #424]	; (8003438 <Hvac_ProcessCommand+0x5d8>)
 800328e:	2201      	movs	r2, #1
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	e16b      	b.n	800356c <Hvac_ProcessCommand+0x70c>
	}
	else if(Hvac_CurrentState == STD_HIGH)
 8003294:	4b64      	ldr	r3, [pc, #400]	; (8003428 <Hvac_ProcessCommand+0x5c8>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b01      	cmp	r3, #1
 800329a:	f040 8167 	bne.w	800356c <Hvac_ProcessCommand+0x70c>
	{
		if(Hvac_MainCounter % 50 == 0)
 800329e:	4b69      	ldr	r3, [pc, #420]	; (8003444 <Hvac_ProcessCommand+0x5e4>)
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	4b69      	ldr	r3, [pc, #420]	; (8003448 <Hvac_ProcessCommand+0x5e8>)
 80032a4:	fba3 1302 	umull	r1, r3, r3, r2
 80032a8:	091b      	lsrs	r3, r3, #4
 80032aa:	2132      	movs	r1, #50	; 0x32
 80032ac:	fb01 f303 	mul.w	r3, r1, r3
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <Hvac_ProcessCommand+0x45a>
		{
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_Clear();
 80032b6:	f002 f9f1 	bl	800569c <I2cLcd_Clear>
		}
		else
		{
			/* do nothing */
		}
		Hvac_IsCleared = STD_LOW;
 80032ba:	4b5f      	ldr	r3, [pc, #380]	; (8003438 <Hvac_ProcessCommand+0x5d8>)
 80032bc:	2200      	movs	r2, #0
 80032be:	701a      	strb	r2, [r3, #0]
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 0);
 80032c0:	2100      	movs	r1, #0
 80032c2:	2000      	movs	r0, #0
 80032c4:	f002 f9cb 	bl	800565e <I2cLcd_SetCursor>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("F=");
 80032c8:	4860      	ldr	r0, [pc, #384]	; (800344c <Hvac_ProcessCommand+0x5ec>)
 80032ca:	f002 f9b3 	bl	8005634 <I2cLcd_SendString>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 2);
 80032ce:	2102      	movs	r1, #2
 80032d0:	2000      	movs	r0, #0
 80032d2:	f002 f9c4 	bl	800565e <I2cLcd_SetCursor>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(buffer_F);
 80032d6:	463b      	mov	r3, r7
 80032d8:	4618      	mov	r0, r3
 80032da:	f002 f9ab 	bl	8005634 <I2cLcd_SendString>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 0);
 80032de:	2100      	movs	r1, #0
 80032e0:	2001      	movs	r0, #1
 80032e2:	f002 f9bc 	bl	800565e <I2cLcd_SetCursor>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("T=");
 80032e6:	485a      	ldr	r0, [pc, #360]	; (8003450 <Hvac_ProcessCommand+0x5f0>)
 80032e8:	f002 f9a4 	bl	8005634 <I2cLcd_SendString>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 2);
 80032ec:	2102      	movs	r1, #2
 80032ee:	2001      	movs	r0, #1
 80032f0:	f002 f9b5 	bl	800565e <I2cLcd_SetCursor>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(buffer_T);
 80032f4:	1d3b      	adds	r3, r7, #4
 80032f6:	4618      	mov	r0, r3
 80032f8:	f002 f99c 	bl	8005634 <I2cLcd_SendString>
		if(Hvac_AutomaticMode == STD_HIGH)
 80032fc:	4b55      	ldr	r3, [pc, #340]	; (8003454 <Hvac_ProcessCommand+0x5f4>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d142      	bne.n	800338a <Hvac_ProcessCommand+0x52a>
		{
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 12);
 8003304:	210c      	movs	r1, #12
 8003306:	2001      	movs	r0, #1
 8003308:	f002 f9a9 	bl	800565e <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("AUTO");
 800330c:	4852      	ldr	r0, [pc, #328]	; (8003458 <Hvac_ProcessCommand+0x5f8>)
 800330e:	f002 f991 	bl	8005634 <I2cLcd_SendString>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 4);
 8003312:	2104      	movs	r1, #4
 8003314:	2000      	movs	r0, #0
 8003316:	f002 f9a2 	bl	800565e <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
 800331a:	4850      	ldr	r0, [pc, #320]	; (800345c <Hvac_ProcessCommand+0x5fc>)
 800331c:	f002 f98a 	bl	8005634 <I2cLcd_SendString>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 6);
 8003320:	2106      	movs	r1, #6
 8003322:	2000      	movs	r0, #0
 8003324:	f002 f99b 	bl	800565e <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
 8003328:	484c      	ldr	r0, [pc, #304]	; (800345c <Hvac_ProcessCommand+0x5fc>)
 800332a:	f002 f983 	bl	8005634 <I2cLcd_SendString>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 8);
 800332e:	2108      	movs	r1, #8
 8003330:	2000      	movs	r0, #0
 8003332:	f002 f994 	bl	800565e <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
 8003336:	4849      	ldr	r0, [pc, #292]	; (800345c <Hvac_ProcessCommand+0x5fc>)
 8003338:	f002 f97c 	bl	8005634 <I2cLcd_SendString>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 10);
 800333c:	210a      	movs	r1, #10
 800333e:	2000      	movs	r0, #0
 8003340:	f002 f98d 	bl	800565e <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("  ");
 8003344:	4846      	ldr	r0, [pc, #280]	; (8003460 <Hvac_ProcessCommand+0x600>)
 8003346:	f002 f975 	bl	8005634 <I2cLcd_SendString>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 13);
 800334a:	210d      	movs	r1, #13
 800334c:	2000      	movs	r0, #0
 800334e:	f002 f986 	bl	800565e <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("   ");
 8003352:	4844      	ldr	r0, [pc, #272]	; (8003464 <Hvac_ProcessCommand+0x604>)
 8003354:	f002 f96e 	bl	8005634 <I2cLcd_SendString>
			if(sensorValueTs == STD_HIGH)
 8003358:	4b43      	ldr	r3, [pc, #268]	; (8003468 <Hvac_ProcessCommand+0x608>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d107      	bne.n	8003370 <Hvac_ProcessCommand+0x510>
			{
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 9);
 8003360:	2109      	movs	r1, #9
 8003362:	2001      	movs	r0, #1
 8003364:	f002 f97b 	bl	800565e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("AC");
 8003368:	4840      	ldr	r0, [pc, #256]	; (800346c <Hvac_ProcessCommand+0x60c>)
 800336a:	f002 f963 	bl	8005634 <I2cLcd_SendString>
			{
				/* do nothing */
			}
		}
	}
}
 800336e:	e0fd      	b.n	800356c <Hvac_ProcessCommand+0x70c>
			else if(sensorValueTs == STD_LOW)
 8003370:	4b3d      	ldr	r3, [pc, #244]	; (8003468 <Hvac_ProcessCommand+0x608>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	f040 80f9 	bne.w	800356c <Hvac_ProcessCommand+0x70c>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 9);
 800337a:	2109      	movs	r1, #9
 800337c:	2001      	movs	r0, #1
 800337e:	f002 f96e 	bl	800565e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("  ");
 8003382:	4837      	ldr	r0, [pc, #220]	; (8003460 <Hvac_ProcessCommand+0x600>)
 8003384:	f002 f956 	bl	8005634 <I2cLcd_SendString>
}
 8003388:	e0f0      	b.n	800356c <Hvac_ProcessCommand+0x70c>
		else if(Hvac_AutomaticMode == STD_LOW)
 800338a:	4b32      	ldr	r3, [pc, #200]	; (8003454 <Hvac_ProcessCommand+0x5f4>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	f040 80ec 	bne.w	800356c <Hvac_ProcessCommand+0x70c>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 12);
 8003394:	210c      	movs	r1, #12
 8003396:	2001      	movs	r0, #1
 8003398:	f002 f961 	bl	800565e <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("    ");
 800339c:	4834      	ldr	r0, [pc, #208]	; (8003470 <Hvac_ProcessCommand+0x610>)
 800339e:	f002 f949 	bl	8005634 <I2cLcd_SendString>
			if(Hvac_LegVent == STD_HIGH)
 80033a2:	4b34      	ldr	r3, [pc, #208]	; (8003474 <Hvac_ProcessCommand+0x614>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d107      	bne.n	80033ba <Hvac_ProcessCommand+0x55a>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 4);
 80033aa:	2104      	movs	r1, #4
 80033ac:	2000      	movs	r0, #0
 80033ae:	f002 f956 	bl	800565e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("L");
 80033b2:	4831      	ldr	r0, [pc, #196]	; (8003478 <Hvac_ProcessCommand+0x618>)
 80033b4:	f002 f93e 	bl	8005634 <I2cLcd_SendString>
 80033b8:	e00a      	b.n	80033d0 <Hvac_ProcessCommand+0x570>
			else if(Hvac_LegVent == STD_LOW)
 80033ba:	4b2e      	ldr	r3, [pc, #184]	; (8003474 <Hvac_ProcessCommand+0x614>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <Hvac_ProcessCommand+0x570>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 4);
 80033c2:	2104      	movs	r1, #4
 80033c4:	2000      	movs	r0, #0
 80033c6:	f002 f94a 	bl	800565e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
 80033ca:	4824      	ldr	r0, [pc, #144]	; (800345c <Hvac_ProcessCommand+0x5fc>)
 80033cc:	f002 f932 	bl	8005634 <I2cLcd_SendString>
			if(Hvac_MidVent == STD_HIGH)
 80033d0:	4b2a      	ldr	r3, [pc, #168]	; (800347c <Hvac_ProcessCommand+0x61c>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d107      	bne.n	80033e8 <Hvac_ProcessCommand+0x588>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 6);
 80033d8:	2106      	movs	r1, #6
 80033da:	2000      	movs	r0, #0
 80033dc:	f002 f93f 	bl	800565e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("M");
 80033e0:	4827      	ldr	r0, [pc, #156]	; (8003480 <Hvac_ProcessCommand+0x620>)
 80033e2:	f002 f927 	bl	8005634 <I2cLcd_SendString>
 80033e6:	e00a      	b.n	80033fe <Hvac_ProcessCommand+0x59e>
			else if(Hvac_MidVent == STD_LOW)
 80033e8:	4b24      	ldr	r3, [pc, #144]	; (800347c <Hvac_ProcessCommand+0x61c>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d106      	bne.n	80033fe <Hvac_ProcessCommand+0x59e>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 6);
 80033f0:	2106      	movs	r1, #6
 80033f2:	2000      	movs	r0, #0
 80033f4:	f002 f933 	bl	800565e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
 80033f8:	4818      	ldr	r0, [pc, #96]	; (800345c <Hvac_ProcessCommand+0x5fc>)
 80033fa:	f002 f91b 	bl	8005634 <I2cLcd_SendString>
			if(Hvac_WindshieldVent == STD_HIGH)
 80033fe:	4b21      	ldr	r3, [pc, #132]	; (8003484 <Hvac_ProcessCommand+0x624>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d142      	bne.n	800348c <Hvac_ProcessCommand+0x62c>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 8);
 8003406:	2108      	movs	r1, #8
 8003408:	2000      	movs	r0, #0
 800340a:	f002 f928 	bl	800565e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("W");
 800340e:	481e      	ldr	r0, [pc, #120]	; (8003488 <Hvac_ProcessCommand+0x628>)
 8003410:	f002 f910 	bl	8005634 <I2cLcd_SendString>
 8003414:	e045      	b.n	80034a2 <Hvac_ProcessCommand+0x642>
 8003416:	bf00      	nop
 8003418:	200001c2 	.word	0x200001c2
 800341c:	200001b7 	.word	0x200001b7
 8003420:	20000106 	.word	0x20000106
 8003424:	200001af 	.word	0x200001af
 8003428:	200001ae 	.word	0x200001ae
 800342c:	200001c3 	.word	0x200001c3
 8003430:	200001b8 	.word	0x200001b8
 8003434:	20000139 	.word	0x20000139
 8003438:	200001bb 	.word	0x200001bb
 800343c:	200001b0 	.word	0x200001b0
 8003440:	08018648 	.word	0x08018648
 8003444:	200001a8 	.word	0x200001a8
 8003448:	51eb851f 	.word	0x51eb851f
 800344c:	0801864c 	.word	0x0801864c
 8003450:	08018650 	.word	0x08018650
 8003454:	200001ba 	.word	0x200001ba
 8003458:	08018654 	.word	0x08018654
 800345c:	0801865c 	.word	0x0801865c
 8003460:	08018660 	.word	0x08018660
 8003464:	08018664 	.word	0x08018664
 8003468:	200001c6 	.word	0x200001c6
 800346c:	08018668 	.word	0x08018668
 8003470:	0801866c 	.word	0x0801866c
 8003474:	200001b1 	.word	0x200001b1
 8003478:	08018674 	.word	0x08018674
 800347c:	200001b2 	.word	0x200001b2
 8003480:	08018678 	.word	0x08018678
 8003484:	200001b3 	.word	0x200001b3
 8003488:	0801867c 	.word	0x0801867c
			else if(Hvac_WindshieldVent == STD_LOW)
 800348c:	4b39      	ldr	r3, [pc, #228]	; (8003574 <Hvac_ProcessCommand+0x714>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d106      	bne.n	80034a2 <Hvac_ProcessCommand+0x642>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 8);
 8003494:	2108      	movs	r1, #8
 8003496:	2000      	movs	r0, #0
 8003498:	f002 f8e1 	bl	800565e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
 800349c:	4836      	ldr	r0, [pc, #216]	; (8003578 <Hvac_ProcessCommand+0x718>)
 800349e:	f002 f8c9 	bl	8005634 <I2cLcd_SendString>
			if(Hvac_WindshieldDefrost == STD_HIGH)
 80034a2:	4b36      	ldr	r3, [pc, #216]	; (800357c <Hvac_ProcessCommand+0x71c>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d107      	bne.n	80034ba <Hvac_ProcessCommand+0x65a>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 10);
 80034aa:	210a      	movs	r1, #10
 80034ac:	2000      	movs	r0, #0
 80034ae:	f002 f8d6 	bl	800565e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("WD");
 80034b2:	4833      	ldr	r0, [pc, #204]	; (8003580 <Hvac_ProcessCommand+0x720>)
 80034b4:	f002 f8be 	bl	8005634 <I2cLcd_SendString>
 80034b8:	e00a      	b.n	80034d0 <Hvac_ProcessCommand+0x670>
			else if(Hvac_WindshieldDefrost == STD_LOW)
 80034ba:	4b30      	ldr	r3, [pc, #192]	; (800357c <Hvac_ProcessCommand+0x71c>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <Hvac_ProcessCommand+0x670>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 10);
 80034c2:	210a      	movs	r1, #10
 80034c4:	2000      	movs	r0, #0
 80034c6:	f002 f8ca 	bl	800565e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("  ");
 80034ca:	482e      	ldr	r0, [pc, #184]	; (8003584 <Hvac_ProcessCommand+0x724>)
 80034cc:	f002 f8b2 	bl	8005634 <I2cLcd_SendString>
			if(Hvac_RearWindshieldDefrost == STD_HIGH)
 80034d0:	4b2d      	ldr	r3, [pc, #180]	; (8003588 <Hvac_ProcessCommand+0x728>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d107      	bne.n	80034e8 <Hvac_ProcessCommand+0x688>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 13);
 80034d8:	210d      	movs	r1, #13
 80034da:	2000      	movs	r0, #0
 80034dc:	f002 f8bf 	bl	800565e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("RWD");
 80034e0:	482a      	ldr	r0, [pc, #168]	; (800358c <Hvac_ProcessCommand+0x72c>)
 80034e2:	f002 f8a7 	bl	8005634 <I2cLcd_SendString>
 80034e6:	e00a      	b.n	80034fe <Hvac_ProcessCommand+0x69e>
			else if(Hvac_RearWindshieldDefrost == STD_LOW)
 80034e8:	4b27      	ldr	r3, [pc, #156]	; (8003588 <Hvac_ProcessCommand+0x728>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d106      	bne.n	80034fe <Hvac_ProcessCommand+0x69e>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 13);
 80034f0:	210d      	movs	r1, #13
 80034f2:	2000      	movs	r0, #0
 80034f4:	f002 f8b3 	bl	800565e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("   ");
 80034f8:	4825      	ldr	r0, [pc, #148]	; (8003590 <Hvac_ProcessCommand+0x730>)
 80034fa:	f002 f89b 	bl	8005634 <I2cLcd_SendString>
			if(Hvac_Ac == STD_HIGH)
 80034fe:	4b25      	ldr	r3, [pc, #148]	; (8003594 <Hvac_ProcessCommand+0x734>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d107      	bne.n	8003516 <Hvac_ProcessCommand+0x6b6>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 9);
 8003506:	2109      	movs	r1, #9
 8003508:	2001      	movs	r0, #1
 800350a:	f002 f8a8 	bl	800565e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("AC");
 800350e:	4822      	ldr	r0, [pc, #136]	; (8003598 <Hvac_ProcessCommand+0x738>)
 8003510:	f002 f890 	bl	8005634 <I2cLcd_SendString>
 8003514:	e00a      	b.n	800352c <Hvac_ProcessCommand+0x6cc>
			else if(Hvac_Ac == STD_LOW)
 8003516:	4b1f      	ldr	r3, [pc, #124]	; (8003594 <Hvac_ProcessCommand+0x734>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <Hvac_ProcessCommand+0x6cc>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 9);
 800351e:	2109      	movs	r1, #9
 8003520:	2001      	movs	r0, #1
 8003522:	f002 f89c 	bl	800565e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("  ");
 8003526:	4817      	ldr	r0, [pc, #92]	; (8003584 <Hvac_ProcessCommand+0x724>)
 8003528:	f002 f884 	bl	8005634 <I2cLcd_SendString>
			if(Hvac_NoRecirculation == STD_HIGH && Hvac_Recirculation == STD_LOW)
 800352c:	4b1b      	ldr	r3, [pc, #108]	; (800359c <Hvac_ProcessCommand+0x73c>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d10b      	bne.n	800354c <Hvac_ProcessCommand+0x6ec>
 8003534:	4b1a      	ldr	r3, [pc, #104]	; (80035a0 <Hvac_ProcessCommand+0x740>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d107      	bne.n	800354c <Hvac_ProcessCommand+0x6ec>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 5);
 800353c:	2105      	movs	r1, #5
 800353e:	2001      	movs	r0, #1
 8003540:	f002 f88d 	bl	800565e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("   ");
 8003544:	4812      	ldr	r0, [pc, #72]	; (8003590 <Hvac_ProcessCommand+0x730>)
 8003546:	f002 f875 	bl	8005634 <I2cLcd_SendString>
 800354a:	e00f      	b.n	800356c <Hvac_ProcessCommand+0x70c>
			else if(Hvac_NoRecirculation == STD_LOW && Hvac_Recirculation == STD_HIGH)
 800354c:	4b13      	ldr	r3, [pc, #76]	; (800359c <Hvac_ProcessCommand+0x73c>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10b      	bne.n	800356c <Hvac_ProcessCommand+0x70c>
 8003554:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <Hvac_ProcessCommand+0x740>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d107      	bne.n	800356c <Hvac_ProcessCommand+0x70c>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 5);
 800355c:	2105      	movs	r1, #5
 800355e:	2001      	movs	r0, #1
 8003560:	f002 f87d 	bl	800565e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("(C)");
 8003564:	480f      	ldr	r0, [pc, #60]	; (80035a4 <Hvac_ProcessCommand+0x744>)
 8003566:	f002 f865 	bl	8005634 <I2cLcd_SendString>
}
 800356a:	e7ff      	b.n	800356c <Hvac_ProcessCommand+0x70c>
 800356c:	bf00      	nop
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	200001b3 	.word	0x200001b3
 8003578:	0801865c 	.word	0x0801865c
 800357c:	200001b4 	.word	0x200001b4
 8003580:	08018680 	.word	0x08018680
 8003584:	08018660 	.word	0x08018660
 8003588:	200001b5 	.word	0x200001b5
 800358c:	08018684 	.word	0x08018684
 8003590:	08018664 	.word	0x08018664
 8003594:	200001b6 	.word	0x200001b6
 8003598:	08018668 	.word	0x08018668
 800359c:	200001b8 	.word	0x200001b8
 80035a0:	200001b7 	.word	0x200001b7
 80035a4:	08018688 	.word	0x08018688

080035a8 <IntLights_DeInit>:
/***********************************************************************************
* Function: IntLights_DeInit										               *
* Description: De-initialize the interior lights.							       *
************************************************************************************/
StdReturnType IntLights_DeInit()
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
	return E_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <IntLights_RxBtcState>:
/***********************************************************************************
* Function: IntLights_RxBtcState										   		   *
* Description: Process command. 		   		   						           *
************************************************************************************/
VOID IntLights_RxBtcState()
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
	/* Process the state of the interior lights according to system state. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
 80035bc:	4b11      	ldr	r3, [pc, #68]	; (8003604 <IntLights_RxBtcState+0x4c>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d102      	bne.n	80035ca <IntLights_RxBtcState+0x12>
	{
		IntLights_CurrentState = STD_HIGH;
 80035c4:	4b10      	ldr	r3, [pc, #64]	; (8003608 <IntLights_RxBtcState+0x50>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW && Rte_P_Btc_BtcPort_Btc_IntLights == STD_LOW)
 80035ca:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <IntLights_RxBtcState+0x4c>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <IntLights_RxBtcState+0x28>
 80035d2:	4b0e      	ldr	r3, [pc, #56]	; (800360c <IntLights_RxBtcState+0x54>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d102      	bne.n	80035e0 <IntLights_RxBtcState+0x28>
	{
		IntLights_CurrentState = STD_LOW;
 80035da:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <IntLights_RxBtcState+0x50>)
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW && Rte_P_Btc_BtcPort_Btc_IntLights == STD_HIGH)
 80035e0:	4b08      	ldr	r3, [pc, #32]	; (8003604 <IntLights_RxBtcState+0x4c>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d106      	bne.n	80035f6 <IntLights_RxBtcState+0x3e>
 80035e8:	4b08      	ldr	r3, [pc, #32]	; (800360c <IntLights_RxBtcState+0x54>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d102      	bne.n	80035f6 <IntLights_RxBtcState+0x3e>
	{
		IntLights_CurrentState = STD_HIGH;
 80035f0:	4b05      	ldr	r3, [pc, #20]	; (8003608 <IntLights_RxBtcState+0x50>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel3);
 80035f6:	2108      	movs	r1, #8
 80035f8:	4805      	ldr	r0, [pc, #20]	; (8003610 <IntLights_RxBtcState+0x58>)
 80035fa:	f012 fd75 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
}
 80035fe:	bf00      	nop
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	2000013b 	.word	0x2000013b
 8003608:	200001c8 	.word	0x200001c8
 800360c:	20000102 	.word	0x20000102
 8003610:	20000758 	.word	0x20000758

08003614 <IntLights_MainFunction>:
/***********************************************************************************
* Function: IntLights_MainFunction										           *
* Description: Interior lights main function for the application and state process.*
************************************************************************************/
VOID IntLights_MainFunction()
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
	/* Process application state. */
	switch(IntLights_ApplState)
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <IntLights_MainFunction+0x34>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d009      	beq.n	8003634 <IntLights_MainFunction+0x20>
 8003620:	2b02      	cmp	r3, #2
 8003622:	dc0d      	bgt.n	8003640 <IntLights_MainFunction+0x2c>
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <IntLights_MainFunction+0x1a>
 8003628:	2b01      	cmp	r3, #1
 800362a:	d006      	beq.n	800363a <IntLights_MainFunction+0x26>
			break;
		case INTLIGHTS_RX_STATE:
			IntLights_RxBtcState();
			break;
		default:
			break;
 800362c:	e008      	b.n	8003640 <IntLights_MainFunction+0x2c>
			IntLights_Init();
 800362e:	f000 f80d 	bl	800364c <IntLights_Init>
			break;
 8003632:	e006      	b.n	8003642 <IntLights_MainFunction+0x2e>
			IntLights_DeInit();
 8003634:	f7ff ffb8 	bl	80035a8 <IntLights_DeInit>
			break;
 8003638:	e003      	b.n	8003642 <IntLights_MainFunction+0x2e>
			IntLights_RxBtcState();
 800363a:	f7ff ffbd 	bl	80035b8 <IntLights_RxBtcState>
			break;
 800363e:	e000      	b.n	8003642 <IntLights_MainFunction+0x2e>
			break;
 8003640:	bf00      	nop
	}
}
 8003642:	bf00      	nop
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	200001c7 	.word	0x200001c7

0800364c <IntLights_Init>:
/***********************************************************************************
* Function: IntLights_Init										                   *
* Description: Initialize the interior lights.							           *
************************************************************************************/
StdReturnType IntLights_Init()
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
	/* Initialize the variables. */
	IntLights_CurrentState 	= STD_LOW;
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <IntLights_Init+0x1c>)
 8003652:	2200      	movs	r2, #0
 8003654:	701a      	strb	r2, [r3, #0]
	IntLights_ApplState 	= INTLIGHTS_RX_STATE;
 8003656:	4b05      	ldr	r3, [pc, #20]	; (800366c <IntLights_Init+0x20>)
 8003658:	2201      	movs	r2, #1
 800365a:	701a      	strb	r2, [r3, #0]
	return E_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	200001c8 	.word	0x200001c8
 800366c:	200001c7 	.word	0x200001c7

08003670 <Pdc_Init>:
/***********************************************************************************
* Function: Pdc_Init													   		   *
* Description: Initialize the application.				 		                   *
************************************************************************************/
StdReturnType Pdc_Init()
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
	/* Initialize the variables. */
	Pdc_Rear_Distance 			= STD_LOW;
 8003674:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <Pdc_Init+0x30>)
 8003676:	2200      	movs	r2, #0
 8003678:	701a      	strb	r2, [r3, #0]
	Pdc_Front_Distance 			= STD_LOW;
 800367a:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <Pdc_Init+0x34>)
 800367c:	2200      	movs	r2, #0
 800367e:	701a      	strb	r2, [r3, #0]
	Pdc_Rear_BuzzerOsCounter 	= STD_LOW;
 8003680:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <Pdc_Init+0x38>)
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
	Pdc_Front_BuzzerOsCounter 	= STD_LOW;
 8003686:	4b09      	ldr	r3, [pc, #36]	; (80036ac <Pdc_Init+0x3c>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
	Pdc_ApplState 				= PDC_PROCESS_DATA;
 800368c:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <Pdc_Init+0x40>)
 800368e:	2201      	movs	r2, #1
 8003690:	701a      	strb	r2, [r3, #0]
	return E_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	200001ca 	.word	0x200001ca
 80036a4:	200001cb 	.word	0x200001cb
 80036a8:	200001cc 	.word	0x200001cc
 80036ac:	200001d0 	.word	0x200001d0
 80036b0:	200001c9 	.word	0x200001c9

080036b4 <Pdc_DeInit>:
/***********************************************************************************
* Function: Pdc_DeInit													   	       *
* Description: De-initialize application.		   			                       *
************************************************************************************/
StdReturnType Pdc_DeInit()
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
	return E_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <Pdc_MainFunction>:
/***********************************************************************************
* Function: Pdc_MainFunction													   *
* Description: Main function application. 		   			                       *
************************************************************************************/
VOID Pdc_MainFunction()
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
	/* Process application state. */
	switch(Pdc_ApplState)
 80036c8:	4b0f      	ldr	r3, [pc, #60]	; (8003708 <Pdc_MainFunction+0x44>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d009      	beq.n	80036e4 <Pdc_MainFunction+0x20>
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	dc13      	bgt.n	80036fc <Pdc_MainFunction+0x38>
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <Pdc_MainFunction+0x1a>
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d006      	beq.n	80036ea <Pdc_MainFunction+0x26>
			{
				/* do nothing */
			}
			break;
		default:
			break;
 80036dc:	e00e      	b.n	80036fc <Pdc_MainFunction+0x38>
			Pdc_Init();
 80036de:	f7ff ffc7 	bl	8003670 <Pdc_Init>
			break;
 80036e2:	e00e      	b.n	8003702 <Pdc_MainFunction+0x3e>
			Pdc_DeInit();
 80036e4:	f7ff ffe6 	bl	80036b4 <Pdc_DeInit>
			break;
 80036e8:	e00b      	b.n	8003702 <Pdc_MainFunction+0x3e>
			if(Btc_ReverseLight == STD_HIGH)
 80036ea:	4b08      	ldr	r3, [pc, #32]	; (800370c <Pdc_MainFunction+0x48>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d106      	bne.n	8003700 <Pdc_MainFunction+0x3c>
				Pdc_Front_ProcessData();
 80036f2:	f000 f837 	bl	8003764 <Pdc_Front_ProcessData>
				Pdc_Rear_ProcessData();
 80036f6:	f000 f80b 	bl	8003710 <Pdc_Rear_ProcessData>
			break;
 80036fa:	e001      	b.n	8003700 <Pdc_MainFunction+0x3c>
			break;
 80036fc:	bf00      	nop
 80036fe:	e000      	b.n	8003702 <Pdc_MainFunction+0x3e>
			break;
 8003700:	bf00      	nop
	}
}
 8003702:	bf00      	nop
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	200001c9 	.word	0x200001c9
 800370c:	20000101 	.word	0x20000101

08003710 <Pdc_Rear_ProcessData>:
/***********************************************************************************
* Function: Pdc_Rear_ProcessData												   *
* Description: Process distance data.		   			                           *
************************************************************************************/
VOID Pdc_Rear_ProcessData()
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
	/* Store the distance measured. */
	Pdc_Rear_Distance = Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour;
 8003714:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <Pdc_Rear_ProcessData+0x40>)
 8003716:	781a      	ldrb	r2, [r3, #0]
 8003718:	4b0e      	ldr	r3, [pc, #56]	; (8003754 <Pdc_Rear_ProcessData+0x44>)
 800371a:	701a      	strb	r2, [r3, #0]
	/* Trigger the buzzer according to the distance measured. */
	if(Pdc_Rear_Distance <= PDC_MAX_DISTANCE)
 800371c:	4b0d      	ldr	r3, [pc, #52]	; (8003754 <Pdc_Rear_ProcessData+0x44>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b28      	cmp	r3, #40	; 0x28
 8003722:	d801      	bhi.n	8003728 <Pdc_Rear_ProcessData+0x18>
	{
		Pdc_Rear_TriggerBuzzer();
 8003724:	f000 f848 	bl	80037b8 <Pdc_Rear_TriggerBuzzer>
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance >= PDC_MAX_DISTANCE)
 8003728:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <Pdc_Rear_ProcessData+0x44>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b27      	cmp	r3, #39	; 0x27
 800372e:	d90c      	bls.n	800374a <Pdc_Rear_ProcessData+0x3a>
	{
		Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCR_BUZZER_PORT, PDCR_BUZZER_PIN, STD_LOW);
 8003730:	2200      	movs	r2, #0
 8003732:	2120      	movs	r1, #32
 8003734:	4808      	ldr	r0, [pc, #32]	; (8003758 <Pdc_Rear_ProcessData+0x48>)
 8003736:	f012 fea8 	bl	801648a <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_PdcR_Buzzer_TimerHandle);
 800373a:	4b08      	ldr	r3, [pc, #32]	; (800375c <Pdc_Rear_ProcessData+0x4c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f012 fec2 	bl	80164c8 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		PdcR_DistanceRange = 0;
 8003744:	4b06      	ldr	r3, [pc, #24]	; (8003760 <Pdc_Rear_ProcessData+0x50>)
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 800374a:	bf00      	nop
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000cf5 	.word	0x20000cf5
 8003754:	200001ca 	.word	0x200001ca
 8003758:	40020400 	.word	0x40020400
 800375c:	20000450 	.word	0x20000450
 8003760:	200001d4 	.word	0x200001d4

08003764 <Pdc_Front_ProcessData>:
/***********************************************************************************
* Function: Pdc_Front_ProcessData												   *
* Description: Process distance data. 		   			                           *
************************************************************************************/
VOID Pdc_Front_ProcessData()
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
	/* Store the distance measured. */
	Pdc_Front_Distance = Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree;
 8003768:	4b0e      	ldr	r3, [pc, #56]	; (80037a4 <Pdc_Front_ProcessData+0x40>)
 800376a:	781a      	ldrb	r2, [r3, #0]
 800376c:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <Pdc_Front_ProcessData+0x44>)
 800376e:	701a      	strb	r2, [r3, #0]
	/* Trigger the buzzer according to the distance measured. */
	if(Pdc_Front_Distance <= PDC_MAX_DISTANCE)
 8003770:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <Pdc_Front_ProcessData+0x44>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b28      	cmp	r3, #40	; 0x28
 8003776:	d801      	bhi.n	800377c <Pdc_Front_ProcessData+0x18>
	{
		Pdc_Front_TriggerBuzzer();
 8003778:	f000 f896 	bl	80038a8 <Pdc_Front_TriggerBuzzer>
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance >= PDC_MAX_DISTANCE)
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <Pdc_Front_ProcessData+0x44>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b27      	cmp	r3, #39	; 0x27
 8003782:	d90d      	bls.n	80037a0 <Pdc_Front_ProcessData+0x3c>
	{
		Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCF_BUZZER_PORT, PDCF_BUZZER_PIN, STD_LOW);
 8003784:	2200      	movs	r2, #0
 8003786:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800378a:	4808      	ldr	r0, [pc, #32]	; (80037ac <Pdc_Front_ProcessData+0x48>)
 800378c:	f012 fe7d 	bl	801648a <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_PdcF_Buzzer_TimerHandle);
 8003790:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <Pdc_Front_ProcessData+0x4c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f012 fe97 	bl	80164c8 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		PdcF_DistanceRange = 0;
 800379a:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <Pdc_Front_ProcessData+0x50>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 80037a0:	bf00      	nop
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20000ce5 	.word	0x20000ce5
 80037a8:	200001cb 	.word	0x200001cb
 80037ac:	40020800 	.word	0x40020800
 80037b0:	20000454 	.word	0x20000454
 80037b4:	200001d8 	.word	0x200001d8

080037b8 <Pdc_Rear_TriggerBuzzer>:
/***********************************************************************************
* Function: Pdc_Rear_TriggerBuzzer												   *
* Description: Control buzzer.		   			                                   *
************************************************************************************/
VOID Pdc_Rear_TriggerBuzzer()
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
	if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcR_Buzzer_TimerHandle) == 0)
 80037bc:	4b37      	ldr	r3, [pc, #220]	; (800389c <Pdc_Rear_TriggerBuzzer+0xe4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f00f f806 	bl	80127d2 <osTimerIsRunning>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d139      	bne.n	8003840 <Pdc_Rear_TriggerBuzzer+0x88>
	{
		switch(PdcR_DistanceRange)
 80037cc:	4b34      	ldr	r3, [pc, #208]	; (80038a0 <Pdc_Rear_TriggerBuzzer+0xe8>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3b01      	subs	r3, #1
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d833      	bhi.n	800383e <Pdc_Rear_TriggerBuzzer+0x86>
 80037d6:	a201      	add	r2, pc, #4	; (adr r2, 80037dc <Pdc_Rear_TriggerBuzzer+0x24>)
 80037d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037dc:	080037ed 	.word	0x080037ed
 80037e0:	08003803 	.word	0x08003803
 80037e4:	08003817 	.word	0x08003817
 80037e8:	0800382b 	.word	0x0800382b
		{
			case 1:
				PdcR_DistanceRange = 0;
 80037ec:	4b2c      	ldr	r3, [pc, #176]	; (80038a0 <Pdc_Rear_TriggerBuzzer+0xe8>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_ONE);
 80037f2:	4b2a      	ldr	r3, [pc, #168]	; (800389c <Pdc_Rear_TriggerBuzzer+0xe4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80037fa:	4618      	mov	r0, r3
 80037fc:	f012 fe57 	bl	80164ae <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8003800:	e01e      	b.n	8003840 <Pdc_Rear_TriggerBuzzer+0x88>
			case 2:
				PdcR_DistanceRange = 0;
 8003802:	4b27      	ldr	r3, [pc, #156]	; (80038a0 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_TWO);
 8003808:	4b24      	ldr	r3, [pc, #144]	; (800389c <Pdc_Rear_TriggerBuzzer+0xe4>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	21fa      	movs	r1, #250	; 0xfa
 800380e:	4618      	mov	r0, r3
 8003810:	f012 fe4d 	bl	80164ae <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8003814:	e014      	b.n	8003840 <Pdc_Rear_TriggerBuzzer+0x88>
			case 3:
				PdcR_DistanceRange = 0;
 8003816:	4b22      	ldr	r3, [pc, #136]	; (80038a0 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_THREE);
 800381c:	4b1f      	ldr	r3, [pc, #124]	; (800389c <Pdc_Rear_TriggerBuzzer+0xe4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	217d      	movs	r1, #125	; 0x7d
 8003822:	4618      	mov	r0, r3
 8003824:	f012 fe43 	bl	80164ae <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8003828:	e00a      	b.n	8003840 <Pdc_Rear_TriggerBuzzer+0x88>
			case 4:
				PdcR_DistanceRange = 0;
 800382a:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <Pdc_Rear_TriggerBuzzer+0xe8>)
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_FOUR);
 8003830:	4b1a      	ldr	r3, [pc, #104]	; (800389c <Pdc_Rear_TriggerBuzzer+0xe4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	214b      	movs	r1, #75	; 0x4b
 8003836:	4618      	mov	r0, r3
 8003838:	f012 fe39 	bl	80164ae <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 800383c:	e000      	b.n	8003840 <Pdc_Rear_TriggerBuzzer+0x88>
			default:
				break;
 800383e:	bf00      	nop
	else
	{
		/* do nothing */
	}
	/* Trigger the buzzer for each case and type of safety distance. */
	if(Pdc_Rear_Distance <= PDC_MAX_DISTANCE && Pdc_Rear_Distance >= PDC_FIRST_SAFE_DISTANCE)
 8003840:	4b18      	ldr	r3, [pc, #96]	; (80038a4 <Pdc_Rear_TriggerBuzzer+0xec>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b28      	cmp	r3, #40	; 0x28
 8003846:	d806      	bhi.n	8003856 <Pdc_Rear_TriggerBuzzer+0x9e>
 8003848:	4b16      	ldr	r3, [pc, #88]	; (80038a4 <Pdc_Rear_TriggerBuzzer+0xec>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b1d      	cmp	r3, #29
 800384e:	d902      	bls.n	8003856 <Pdc_Rear_TriggerBuzzer+0x9e>
	{
		PdcR_DistanceRange = 1;
 8003850:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8003852:	2201      	movs	r2, #1
 8003854:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_FIRST_SAFE_DISTANCE && Pdc_Rear_Distance >= PDC_SECOND_SAFE_DISTANCE)
 8003856:	4b13      	ldr	r3, [pc, #76]	; (80038a4 <Pdc_Rear_TriggerBuzzer+0xec>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b1e      	cmp	r3, #30
 800385c:	d806      	bhi.n	800386c <Pdc_Rear_TriggerBuzzer+0xb4>
 800385e:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <Pdc_Rear_TriggerBuzzer+0xec>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b13      	cmp	r3, #19
 8003864:	d902      	bls.n	800386c <Pdc_Rear_TriggerBuzzer+0xb4>
	{
		PdcR_DistanceRange = 2;
 8003866:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8003868:	2202      	movs	r2, #2
 800386a:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_SECOND_SAFE_DISTANCE && Pdc_Rear_Distance >= PDC_THIRD_SAFE_DISTANCE)
 800386c:	4b0d      	ldr	r3, [pc, #52]	; (80038a4 <Pdc_Rear_TriggerBuzzer+0xec>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b14      	cmp	r3, #20
 8003872:	d806      	bhi.n	8003882 <Pdc_Rear_TriggerBuzzer+0xca>
 8003874:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <Pdc_Rear_TriggerBuzzer+0xec>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b09      	cmp	r3, #9
 800387a:	d902      	bls.n	8003882 <Pdc_Rear_TriggerBuzzer+0xca>
	{
		PdcR_DistanceRange = 3;
 800387c:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <Pdc_Rear_TriggerBuzzer+0xe8>)
 800387e:	2203      	movs	r2, #3
 8003880:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_THIRD_SAFE_DISTANCE && Pdc_Rear_Distance >= PDC_FOURTH_SAFE_DISTANCE)
 8003882:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <Pdc_Rear_TriggerBuzzer+0xec>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	2b0a      	cmp	r3, #10
 8003888:	d806      	bhi.n	8003898 <Pdc_Rear_TriggerBuzzer+0xe0>
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <Pdc_Rear_TriggerBuzzer+0xec>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d902      	bls.n	8003898 <Pdc_Rear_TriggerBuzzer+0xe0>
	{
		PdcR_DistanceRange = 4;
 8003892:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8003894:	2204      	movs	r2, #4
 8003896:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8003898:	bf00      	nop
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20000450 	.word	0x20000450
 80038a0:	200001d4 	.word	0x200001d4
 80038a4:	200001ca 	.word	0x200001ca

080038a8 <Pdc_Front_TriggerBuzzer>:
/***********************************************************************************
* Function: Pdc_Front_TriggerBuzzer												   *
* Description: Control buzzer		   			   								   *
************************************************************************************/
VOID Pdc_Front_TriggerBuzzer()
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
	if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcF_Buzzer_TimerHandle) == 0)
 80038ac:	4b37      	ldr	r3, [pc, #220]	; (800398c <Pdc_Front_TriggerBuzzer+0xe4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f00e ff8e 	bl	80127d2 <osTimerIsRunning>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d139      	bne.n	8003930 <Pdc_Front_TriggerBuzzer+0x88>
	{
		switch(PdcF_DistanceRange)
 80038bc:	4b34      	ldr	r3, [pc, #208]	; (8003990 <Pdc_Front_TriggerBuzzer+0xe8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3b01      	subs	r3, #1
 80038c2:	2b03      	cmp	r3, #3
 80038c4:	d833      	bhi.n	800392e <Pdc_Front_TriggerBuzzer+0x86>
 80038c6:	a201      	add	r2, pc, #4	; (adr r2, 80038cc <Pdc_Front_TriggerBuzzer+0x24>)
 80038c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038cc:	080038dd 	.word	0x080038dd
 80038d0:	080038f3 	.word	0x080038f3
 80038d4:	08003907 	.word	0x08003907
 80038d8:	0800391b 	.word	0x0800391b
		{
			case 1:
				PdcF_DistanceRange = 0;
 80038dc:	4b2c      	ldr	r3, [pc, #176]	; (8003990 <Pdc_Front_TriggerBuzzer+0xe8>)
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_ONE);
 80038e2:	4b2a      	ldr	r3, [pc, #168]	; (800398c <Pdc_Front_TriggerBuzzer+0xe4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80038ea:	4618      	mov	r0, r3
 80038ec:	f012 fddf 	bl	80164ae <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 80038f0:	e01e      	b.n	8003930 <Pdc_Front_TriggerBuzzer+0x88>
			case 2:
				PdcF_DistanceRange = 0;
 80038f2:	4b27      	ldr	r3, [pc, #156]	; (8003990 <Pdc_Front_TriggerBuzzer+0xe8>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_TWO);
 80038f8:	4b24      	ldr	r3, [pc, #144]	; (800398c <Pdc_Front_TriggerBuzzer+0xe4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	21fa      	movs	r1, #250	; 0xfa
 80038fe:	4618      	mov	r0, r3
 8003900:	f012 fdd5 	bl	80164ae <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8003904:	e014      	b.n	8003930 <Pdc_Front_TriggerBuzzer+0x88>
			case 3:
				PdcF_DistanceRange = 0;
 8003906:	4b22      	ldr	r3, [pc, #136]	; (8003990 <Pdc_Front_TriggerBuzzer+0xe8>)
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_THREE);
 800390c:	4b1f      	ldr	r3, [pc, #124]	; (800398c <Pdc_Front_TriggerBuzzer+0xe4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	217d      	movs	r1, #125	; 0x7d
 8003912:	4618      	mov	r0, r3
 8003914:	f012 fdcb 	bl	80164ae <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8003918:	e00a      	b.n	8003930 <Pdc_Front_TriggerBuzzer+0x88>
			case 4:
				PdcF_DistanceRange = 0;
 800391a:	4b1d      	ldr	r3, [pc, #116]	; (8003990 <Pdc_Front_TriggerBuzzer+0xe8>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_FOUR);
 8003920:	4b1a      	ldr	r3, [pc, #104]	; (800398c <Pdc_Front_TriggerBuzzer+0xe4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	214b      	movs	r1, #75	; 0x4b
 8003926:	4618      	mov	r0, r3
 8003928:	f012 fdc1 	bl	80164ae <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 800392c:	e000      	b.n	8003930 <Pdc_Front_TriggerBuzzer+0x88>
			default:
				break;
 800392e:	bf00      	nop
	else
	{
		/* do nothing */
	}
	/* Trigger the buzzer for each case and type of safety distance. */
	if(Pdc_Front_Distance <= PDC_MAX_DISTANCE && Pdc_Front_Distance >= PDC_FIRST_SAFE_DISTANCE)
 8003930:	4b18      	ldr	r3, [pc, #96]	; (8003994 <Pdc_Front_TriggerBuzzer+0xec>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b28      	cmp	r3, #40	; 0x28
 8003936:	d806      	bhi.n	8003946 <Pdc_Front_TriggerBuzzer+0x9e>
 8003938:	4b16      	ldr	r3, [pc, #88]	; (8003994 <Pdc_Front_TriggerBuzzer+0xec>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b1d      	cmp	r3, #29
 800393e:	d902      	bls.n	8003946 <Pdc_Front_TriggerBuzzer+0x9e>
	{
		PdcF_DistanceRange = 1;
 8003940:	4b13      	ldr	r3, [pc, #76]	; (8003990 <Pdc_Front_TriggerBuzzer+0xe8>)
 8003942:	2201      	movs	r2, #1
 8003944:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_FIRST_SAFE_DISTANCE && Pdc_Front_Distance >= PDC_SECOND_SAFE_DISTANCE)
 8003946:	4b13      	ldr	r3, [pc, #76]	; (8003994 <Pdc_Front_TriggerBuzzer+0xec>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b1e      	cmp	r3, #30
 800394c:	d806      	bhi.n	800395c <Pdc_Front_TriggerBuzzer+0xb4>
 800394e:	4b11      	ldr	r3, [pc, #68]	; (8003994 <Pdc_Front_TriggerBuzzer+0xec>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b13      	cmp	r3, #19
 8003954:	d902      	bls.n	800395c <Pdc_Front_TriggerBuzzer+0xb4>
	{
		PdcF_DistanceRange = 2;
 8003956:	4b0e      	ldr	r3, [pc, #56]	; (8003990 <Pdc_Front_TriggerBuzzer+0xe8>)
 8003958:	2202      	movs	r2, #2
 800395a:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_SECOND_SAFE_DISTANCE && Pdc_Front_Distance >= PDC_THIRD_SAFE_DISTANCE)
 800395c:	4b0d      	ldr	r3, [pc, #52]	; (8003994 <Pdc_Front_TriggerBuzzer+0xec>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b14      	cmp	r3, #20
 8003962:	d806      	bhi.n	8003972 <Pdc_Front_TriggerBuzzer+0xca>
 8003964:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <Pdc_Front_TriggerBuzzer+0xec>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b09      	cmp	r3, #9
 800396a:	d902      	bls.n	8003972 <Pdc_Front_TriggerBuzzer+0xca>
	{
		PdcF_DistanceRange = 3;
 800396c:	4b08      	ldr	r3, [pc, #32]	; (8003990 <Pdc_Front_TriggerBuzzer+0xe8>)
 800396e:	2203      	movs	r2, #3
 8003970:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_THIRD_SAFE_DISTANCE && Pdc_Front_Distance >= PDC_FOURTH_SAFE_DISTANCE)
 8003972:	4b08      	ldr	r3, [pc, #32]	; (8003994 <Pdc_Front_TriggerBuzzer+0xec>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b0a      	cmp	r3, #10
 8003978:	d806      	bhi.n	8003988 <Pdc_Front_TriggerBuzzer+0xe0>
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <Pdc_Front_TriggerBuzzer+0xec>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d902      	bls.n	8003988 <Pdc_Front_TriggerBuzzer+0xe0>
	{
		PdcF_DistanceRange = 4;
 8003982:	4b03      	ldr	r3, [pc, #12]	; (8003990 <Pdc_Front_TriggerBuzzer+0xe8>)
 8003984:	2204      	movs	r2, #4
 8003986:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8003988:	bf00      	nop
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20000454 	.word	0x20000454
 8003990:	200001d8 	.word	0x200001d8
 8003994:	200001cb 	.word	0x200001cb

08003998 <SecAlm_LightsBuzzerControl>:
/***********************************************************************************
* Function: SecAlm_LightsBuzzerControl										       *
* Description: Controls the lights and buzzer in case of alarm trigger. 		   *
************************************************************************************/
VOID SecAlm_LightsBuzzerControl()
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
	/* Local variable for sensor status. */
	uint32 sensorStatus = STD_LOW;
 800399e:	2300      	movs	r3, #0
 80039a0:	607b      	str	r3, [r7, #4]
	/* Get the sensor status. */
	sensorStatus = SecAlm_VibSenStatus();
 80039a2:	f000 f89b 	bl	8003adc <SecAlm_VibSenStatus>
 80039a6:	4603      	mov	r3, r0
 80039a8:	607b      	str	r3, [r7, #4]
	/* If the trigger was previously on and now it is off. */
	if(SecAlm_TriggerPreviousState != SecAlm_Trigger && !SecAlm_Trigger)
 80039aa:	4b3f      	ldr	r3, [pc, #252]	; (8003aa8 <SecAlm_LightsBuzzerControl+0x110>)
 80039ac:	781a      	ldrb	r2, [r3, #0]
 80039ae:	4b3f      	ldr	r3, [pc, #252]	; (8003aac <SecAlm_LightsBuzzerControl+0x114>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d006      	beq.n	80039c4 <SecAlm_LightsBuzzerControl+0x2c>
 80039b6:	4b3d      	ldr	r3, [pc, #244]	; (8003aac <SecAlm_LightsBuzzerControl+0x114>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d102      	bne.n	80039c4 <SecAlm_LightsBuzzerControl+0x2c>
	{
		/* Reset the counter. */
		SecAlm_TriggerIRQCounterForTimer4 = STD_LOW;
 80039be:	4b3c      	ldr	r3, [pc, #240]	; (8003ab0 <SecAlm_LightsBuzzerControl+0x118>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the counter exceeded the maximum value, reset the variables. */
	if(SecAlm_TriggerIRQCounterForTimer4 >= 20)
 80039c4:	4b3a      	ldr	r3, [pc, #232]	; (8003ab0 <SecAlm_LightsBuzzerControl+0x118>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	2b13      	cmp	r3, #19
 80039ca:	d922      	bls.n	8003a12 <SecAlm_LightsBuzzerControl+0x7a>
	{
		SecAlm_TriggerPreviousState 						= SecAlm_Trigger;
 80039cc:	4b37      	ldr	r3, [pc, #220]	; (8003aac <SecAlm_LightsBuzzerControl+0x114>)
 80039ce:	781a      	ldrb	r2, [r3, #0]
 80039d0:	4b35      	ldr	r3, [pc, #212]	; (8003aa8 <SecAlm_LightsBuzzerControl+0x110>)
 80039d2:	701a      	strb	r2, [r3, #0]
		Rte_P_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter	= STD_HIGH;
 80039d4:	4b37      	ldr	r3, [pc, #220]	; (8003ab4 <SecAlm_LightsBuzzerControl+0x11c>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	701a      	strb	r2, [r3, #0]
		Rte_P_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter 	= STD_LOW;
 80039da:	4b37      	ldr	r3, [pc, #220]	; (8003ab8 <SecAlm_LightsBuzzerControl+0x120>)
 80039dc:	2200      	movs	r2, #0
 80039de:	701a      	strb	r2, [r3, #0]
		SecAlm_Trigger 										= STD_LOW;
 80039e0:	4b32      	ldr	r3, [pc, #200]	; (8003aac <SecAlm_LightsBuzzerControl+0x114>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange 								= STD_LOW;
 80039e6:	4b35      	ldr	r3, [pc, #212]	; (8003abc <SecAlm_LightsBuzzerControl+0x124>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	701a      	strb	r2, [r3, #0]
		SecAlm_TriggerIRQCounterForTimer4 					= STD_LOW;
 80039ec:	4b30      	ldr	r3, [pc, #192]	; (8003ab0 <SecAlm_LightsBuzzerControl+0x118>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	701a      	strb	r2, [r3, #0]
		SecAlm_SensorStatusCounter 							= STD_LOW;
 80039f2:	4b33      	ldr	r3, [pc, #204]	; (8003ac0 <SecAlm_LightsBuzzerControl+0x128>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatus 								= STD_LOW;
 80039f8:	4b32      	ldr	r3, [pc, #200]	; (8003ac4 <SecAlm_LightsBuzzerControl+0x12c>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatusCounter 							= STD_LOW;
 80039fe:	4b30      	ldr	r3, [pc, #192]	; (8003ac0 <SecAlm_LightsBuzzerControl+0x128>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	801a      	strh	r2, [r3, #0]
		/* Stop the os timer assigned to security alarm trigger. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmAlarm_TimerHandle);
 8003a04:	4b30      	ldr	r3, [pc, #192]	; (8003ac8 <SecAlm_LightsBuzzerControl+0x130>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f012 fd5d 	bl	80164c8 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		/* Turn off the lights to make sure their state is off before any other action. */
		SecAlm_TurnOnExtLights();
 8003a0e:	f000 f899 	bl	8003b44 <SecAlm_TurnOnExtLights>
		/* do nothing */
	}
	/* The counter resets every 10 seconds, if a reset of the timer
	 * occurs, then reset the variables related to the security
	 * alarm trigger. */
	if(SecAlm_SensorStatusCounter == STD_LOW)
 8003a12:	4b2b      	ldr	r3, [pc, #172]	; (8003ac0 <SecAlm_LightsBuzzerControl+0x128>)
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d107      	bne.n	8003a2a <SecAlm_LightsBuzzerControl+0x92>
	{
		sensorStatus 	= STD_LOW;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	607b      	str	r3, [r7, #4]
		SecAlm_Trigger 	= STD_LOW;
 8003a1e:	4b23      	ldr	r3, [pc, #140]	; (8003aac <SecAlm_LightsBuzzerControl+0x114>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange = STD_LOW;
 8003a24:	4b25      	ldr	r3, [pc, #148]	; (8003abc <SecAlm_LightsBuzzerControl+0x124>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the sensor status is high, trigger the alarm. */
	if(sensorStatus == STD_HIGH)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d102      	bne.n	8003a36 <SecAlm_LightsBuzzerControl+0x9e>
	{
		SecAlm_Trigger = STD_HIGH;
 8003a30:	4b1e      	ldr	r3, [pc, #120]	; (8003aac <SecAlm_LightsBuzzerControl+0x114>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the trigger is set to high, perform alarm triggering. */
	if(SecAlm_Trigger == STD_HIGH)
 8003a36:	4b1d      	ldr	r3, [pc, #116]	; (8003aac <SecAlm_LightsBuzzerControl+0x114>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d128      	bne.n	8003a90 <SecAlm_LightsBuzzerControl+0xf8>
	{
		/* One alarm cycle is performed consisting of 10 seconds. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmAlarm_TimerHandle) == 0)
 8003a3e:	4b22      	ldr	r3, [pc, #136]	; (8003ac8 <SecAlm_LightsBuzzerControl+0x130>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f00e fec5 	bl	80127d2 <osTimerIsRunning>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <SecAlm_LightsBuzzerControl+0xc4>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmAlarm_TimerHandle, 500);
 8003a4e:	4b1e      	ldr	r3, [pc, #120]	; (8003ac8 <SecAlm_LightsBuzzerControl+0x130>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003a56:	4618      	mov	r0, r3
 8003a58:	f012 fd29 	bl	80164ae <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Cycle between on and off states of buzzer and lights. */
		if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 1)
 8003a5c:	4b14      	ldr	r3, [pc, #80]	; (8003ab0 <SecAlm_LightsBuzzerControl+0x118>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <SecAlm_LightsBuzzerControl+0xde>
		{
			SecAlm_PinStateChange = STD_HIGH;
 8003a6a:	4b14      	ldr	r3, [pc, #80]	; (8003abc <SecAlm_LightsBuzzerControl+0x124>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 8003a70:	f000 f868 	bl	8003b44 <SecAlm_TurnOnExtLights>
	}
	else
	{
		/* do nothing */
	}
}
 8003a74:	e013      	b.n	8003a9e <SecAlm_LightsBuzzerControl+0x106>
		else if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 0)
 8003a76:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <SecAlm_LightsBuzzerControl+0x118>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10c      	bne.n	8003a9e <SecAlm_LightsBuzzerControl+0x106>
			SecAlm_PinStateChange = STD_LOW;
 8003a84:	4b0d      	ldr	r3, [pc, #52]	; (8003abc <SecAlm_LightsBuzzerControl+0x124>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 8003a8a:	f000 f85b 	bl	8003b44 <SecAlm_TurnOnExtLights>
}
 8003a8e:	e006      	b.n	8003a9e <SecAlm_LightsBuzzerControl+0x106>
	else if(SecAlm_Trigger == STD_LOW)
 8003a90:	4b06      	ldr	r3, [pc, #24]	; (8003aac <SecAlm_LightsBuzzerControl+0x114>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d102      	bne.n	8003a9e <SecAlm_LightsBuzzerControl+0x106>
		SecAlm_ToggleAlarmBuzzer(STD_LOW);
 8003a98:	2000      	movs	r0, #0
 8003a9a:	f000 f8df 	bl	8003c5c <SecAlm_ToggleAlarmBuzzer>
}
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	200001e5 	.word	0x200001e5
 8003aac:	200001dd 	.word	0x200001dd
 8003ab0:	200001df 	.word	0x200001df
 8003ab4:	2000013e 	.word	0x2000013e
 8003ab8:	20000140 	.word	0x20000140
 8003abc:	200001de 	.word	0x200001de
 8003ac0:	200001e0 	.word	0x200001e0
 8003ac4:	200001e2 	.word	0x200001e2
 8003ac8:	2000044c 	.word	0x2000044c

08003acc <SecAlm_DeInit>:
/***********************************************************************************
* Function: SecAlm_DeInit										                   *
* Description: De-initialize the application.								       *
************************************************************************************/
StdReturnType SecAlm_DeInit()
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
	return E_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <SecAlm_VibSenStatus>:
/***********************************************************************************
* Function: SecAlm_VibSenStatus										               *
* Description: Updates the vibration sensor status based on measurements.		   *
************************************************************************************/
StdReturnType SecAlm_VibSenStatus()
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
	/* Local variable for sensor status. */
	uint16 sensorStatus = STD_LOW;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	80fb      	strh	r3, [r7, #6]
	/* Read the sensor value. */
	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(SECALM_VS_REQUEST);
 8003ae6:	2002      	movs	r0, #2
 8003ae8:	f000 f91e 	bl	8003d28 <SenCtrl_ProcessSensorValue>
	/* If the sensor was triggered. */
	if(SecAlm_SensorState == STD_HIGH)
 8003aec:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <SecAlm_VibSenStatus+0x5c>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d10c      	bne.n	8003b0e <SecAlm_VibSenStatus+0x32>
	{
		/* Count for how long it has been triggered. */
		SecAlm_SensorStatusCounter = SecAlm_SensorStatusCounter + 1;
 8003af4:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <SecAlm_VibSenStatus+0x60>)
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	3301      	adds	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <SecAlm_VibSenStatus+0x60>)
 8003afe:	801a      	strh	r2, [r3, #0]
		/* Start the reset timer for the counter variable. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlm_AlarmResetHandle, 10000);
 8003b00:	4b0f      	ldr	r3, [pc, #60]	; (8003b40 <SecAlm_VibSenStatus+0x64>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f242 7110 	movw	r1, #10000	; 0x2710
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f012 fcd0 	bl	80164ae <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
	else
	{
		/* do nothing */
	}
	/* If the sensor was triggered enough times. */
	if(SecAlm_SensorStatusCounter >= 1000)
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <SecAlm_VibSenStatus+0x60>)
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b16:	d302      	bcc.n	8003b1e <SecAlm_VibSenStatus+0x42>
	{
		/* Set the sensor status to high. */
		sensorStatus = STD_HIGH;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	80fb      	strh	r3, [r7, #6]
 8003b1c:	e006      	b.n	8003b2c <SecAlm_VibSenStatus+0x50>
	}
	else if(SecAlm_SensorStatusCounter < 1000)
 8003b1e:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <SecAlm_VibSenStatus+0x60>)
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b26:	d201      	bcs.n	8003b2c <SecAlm_VibSenStatus+0x50>
	{
		/* Set the sensor status to low. */
		sensorStatus = STD_LOW;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	80fb      	strh	r3, [r7, #6]
	else
	{
		/* do nothing */
	}
	/* Return sensor status. */
	return sensorStatus;
 8003b2c:	88fb      	ldrh	r3, [r7, #6]
 8003b2e:	b2db      	uxtb	r3, r3
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	200001e4 	.word	0x200001e4
 8003b3c:	200001e0 	.word	0x200001e0
 8003b40:	20000434 	.word	0x20000434

08003b44 <SecAlm_TurnOnExtLights>:
/***********************************************************************************
* Function: SecAlm_TurnOnExtLights										           *
* Description: Trigger the exterior lights and buzzer.							   *
************************************************************************************/
VOID SecAlm_TurnOnExtLights()
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
	/* Turn on the lights and the buzzer. */
	if(SecAlm_PinStateChange == STD_HIGH)
 8003b48:	4b1f      	ldr	r3, [pc, #124]	; (8003bc8 <SecAlm_TurnOnExtLights+0x84>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d118      	bne.n	8003b82 <SecAlm_TurnOnExtLights+0x3e>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8003b50:	2100      	movs	r1, #0
 8003b52:	481e      	ldr	r0, [pc, #120]	; (8003bcc <SecAlm_TurnOnExtLights+0x88>)
 8003b54:	f012 fac8 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8003b58:	2104      	movs	r1, #4
 8003b5a:	481c      	ldr	r0, [pc, #112]	; (8003bcc <SecAlm_TurnOnExtLights+0x88>)
 8003b5c:	f012 fac4 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 8003b60:	2108      	movs	r1, #8
 8003b62:	481b      	ldr	r0, [pc, #108]	; (8003bd0 <SecAlm_TurnOnExtLights+0x8c>)
 8003b64:	f012 fac0 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 8003b68:	210c      	movs	r1, #12
 8003b6a:	4819      	ldr	r0, [pc, #100]	; (8003bd0 <SecAlm_TurnOnExtLights+0x8c>)
 8003b6c:	f012 fabc 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8003b70:	2108      	movs	r1, #8
 8003b72:	4818      	ldr	r0, [pc, #96]	; (8003bd4 <SecAlm_TurnOnExtLights+0x90>)
 8003b74:	f012 fab8 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8003b78:	210c      	movs	r1, #12
 8003b7a:	4816      	ldr	r0, [pc, #88]	; (8003bd4 <SecAlm_TurnOnExtLights+0x90>)
 8003b7c:	f012 fab4 	bl	80160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8003b80:	e01b      	b.n	8003bba <SecAlm_TurnOnExtLights+0x76>
	}
	else if(SecAlm_PinStateChange == STD_LOW)
 8003b82:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <SecAlm_TurnOnExtLights+0x84>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d117      	bne.n	8003bba <SecAlm_TurnOnExtLights+0x76>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	480f      	ldr	r0, [pc, #60]	; (8003bcc <SecAlm_TurnOnExtLights+0x88>)
 8003b8e:	f012 fab8 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8003b92:	2104      	movs	r1, #4
 8003b94:	480d      	ldr	r0, [pc, #52]	; (8003bcc <SecAlm_TurnOnExtLights+0x88>)
 8003b96:	f012 fab4 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 8003b9a:	2108      	movs	r1, #8
 8003b9c:	480c      	ldr	r0, [pc, #48]	; (8003bd0 <SecAlm_TurnOnExtLights+0x8c>)
 8003b9e:	f012 fab0 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 8003ba2:	210c      	movs	r1, #12
 8003ba4:	480a      	ldr	r0, [pc, #40]	; (8003bd0 <SecAlm_TurnOnExtLights+0x8c>)
 8003ba6:	f012 faac 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8003baa:	2108      	movs	r1, #8
 8003bac:	4809      	ldr	r0, [pc, #36]	; (8003bd4 <SecAlm_TurnOnExtLights+0x90>)
 8003bae:	f012 faa8 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8003bb2:	210c      	movs	r1, #12
 8003bb4:	4807      	ldr	r0, [pc, #28]	; (8003bd4 <SecAlm_TurnOnExtLights+0x90>)
 8003bb6:	f012 faa4 	bl	8016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	}
	SecAlm_ToggleAlarmBuzzer(SecAlm_PinStateChange);
 8003bba:	4b03      	ldr	r3, [pc, #12]	; (8003bc8 <SecAlm_TurnOnExtLights+0x84>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 f84c 	bl	8003c5c <SecAlm_ToggleAlarmBuzzer>
}
 8003bc4:	bf00      	nop
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	200001de 	.word	0x200001de
 8003bcc:	20000758 	.word	0x20000758
 8003bd0:	2000080c 	.word	0x2000080c
 8003bd4:	200008c0 	.word	0x200008c0

08003bd8 <SecAlm_MainFunction>:
/***********************************************************************************
* Function: SecAlm_MainFunction										           	   *
* Description: Process application states.										   *
************************************************************************************/
VOID SecAlm_MainFunction()
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
	/* Process application state. */
	switch(SecAlm_ApplState)
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <SecAlm_MainFunction+0x34>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d009      	beq.n	8003bf8 <SecAlm_MainFunction+0x20>
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	dc0d      	bgt.n	8003c04 <SecAlm_MainFunction+0x2c>
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <SecAlm_MainFunction+0x1a>
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d006      	beq.n	8003bfe <SecAlm_MainFunction+0x26>
			break;
		case SECALM_ALARMCONTROL_STATE:
			SecAlm_LightsBuzzerControl();
			break;
		default:
			break;
 8003bf0:	e008      	b.n	8003c04 <SecAlm_MainFunction+0x2c>
			SecAlm_Init();
 8003bf2:	f000 f80d 	bl	8003c10 <SecAlm_Init>
			break;
 8003bf6:	e006      	b.n	8003c06 <SecAlm_MainFunction+0x2e>
			SecAlm_DeInit();
 8003bf8:	f7ff ff68 	bl	8003acc <SecAlm_DeInit>
			break;
 8003bfc:	e003      	b.n	8003c06 <SecAlm_MainFunction+0x2e>
			SecAlm_LightsBuzzerControl();
 8003bfe:	f7ff fecb 	bl	8003998 <SecAlm_LightsBuzzerControl>
			break;
 8003c02:	e000      	b.n	8003c06 <SecAlm_MainFunction+0x2e>
			break;
 8003c04:	bf00      	nop
	}
}
 8003c06:	bf00      	nop
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	200001dc 	.word	0x200001dc

08003c10 <SecAlm_Init>:
/***********************************************************************************
* Function: SecAlm_Init										                       *
* Description: Initialize the application.										   *
************************************************************************************/
StdReturnType SecAlm_Init()
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
	/* Set the variables to 0. */
	SecAlm_Trigger 						= STD_LOW;
 8003c14:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <SecAlm_Init+0x34>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	701a      	strb	r2, [r3, #0]
	SecAlm_PinStateChange 				= STD_LOW;
 8003c1a:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <SecAlm_Init+0x38>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	701a      	strb	r2, [r3, #0]
	SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
 8003c20:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <SecAlm_Init+0x3c>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	701a      	strb	r2, [r3, #0]
	SecAlm_SensorStatusCounter 			= STD_LOW;
 8003c26:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <SecAlm_Init+0x40>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	801a      	strh	r2, [r3, #0]
	SecAlm_SensorStatus 				= STD_LOW;
 8003c2c:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <SecAlm_Init+0x44>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	801a      	strh	r2, [r3, #0]
	SecAlm_ApplState					= SECALM_ALARMCONTROL_STATE;
 8003c32:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <SecAlm_Init+0x48>)
 8003c34:	2201      	movs	r2, #1
 8003c36:	701a      	strb	r2, [r3, #0]
	return E_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	200001dd 	.word	0x200001dd
 8003c48:	200001de 	.word	0x200001de
 8003c4c:	200001df 	.word	0x200001df
 8003c50:	200001e0 	.word	0x200001e0
 8003c54:	200001e2 	.word	0x200001e2
 8003c58:	200001dc 	.word	0x200001dc

08003c5c <SecAlm_ToggleAlarmBuzzer>:
/***********************************************************************************
* Function: SecAlm_ToggleAlarmBuzzer										       *
* Description: Alarm buzzer trigger.                                               *
************************************************************************************/
VOID SecAlm_ToggleAlarmBuzzer(uint8 PinState)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c6e:	4803      	ldr	r0, [pc, #12]	; (8003c7c <SecAlm_ToggleAlarmBuzzer+0x20>)
 8003c70:	f012 fc0b 	bl	801648a <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8003c74:	bf00      	nop
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40020400 	.word	0x40020400

08003c80 <SecAlm_ToggleAlarmLed>:
/***********************************************************************************
* Function: SecAlm_ToggleAlarmLed										           *
* Description: Alarm LED trigger.												   *
************************************************************************************/
VOID SecAlm_ToggleAlarmLed(uint8 PinState)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
 8003c8a:	79fb      	ldrb	r3, [r7, #7]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c92:	4803      	ldr	r0, [pc, #12]	; (8003ca0 <SecAlm_ToggleAlarmLed+0x20>)
 8003c94:	f012 fbf9 	bl	801648a <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8003c98:	bf00      	nop
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40020400 	.word	0x40020400

08003ca4 <SenCtrl_MainFunction>:
/***********************************************************************************
* Function: SenCtrl_MainFunction										   		   *
* Description: Application main function.				 		                   *
************************************************************************************/
VOID SenCtrl_MainFunction()
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
	/* Process application state. */
	switch(SenCtrl_ApplState)
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <SenCtrl_MainFunction+0x30>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d009      	beq.n	8003cc4 <SenCtrl_MainFunction+0x20>
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	dc0a      	bgt.n	8003cca <SenCtrl_MainFunction+0x26>
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <SenCtrl_MainFunction+0x1a>
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d008      	beq.n	8003cce <SenCtrl_MainFunction+0x2a>
			SenCtrl_DeInit();
			break;
		case SENCTRL_PROCESS_STATE:
			break;
		default:
			break;
 8003cbc:	e005      	b.n	8003cca <SenCtrl_MainFunction+0x26>
			SenCtrl_Init();
 8003cbe:	f000 f80b 	bl	8003cd8 <SenCtrl_Init>
			break;
 8003cc2:	e005      	b.n	8003cd0 <SenCtrl_MainFunction+0x2c>
			SenCtrl_DeInit();
 8003cc4:	f000 f828 	bl	8003d18 <SenCtrl_DeInit>
			break;
 8003cc8:	e002      	b.n	8003cd0 <SenCtrl_MainFunction+0x2c>
			break;
 8003cca:	bf00      	nop
 8003ccc:	e000      	b.n	8003cd0 <SenCtrl_MainFunction+0x2c>
			break;
 8003cce:	bf00      	nop
	}
}
 8003cd0:	bf00      	nop
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	200001e6 	.word	0x200001e6

08003cd8 <SenCtrl_Init>:
/***********************************************************************************
* Function: SenCtrl_Init													       *
* Description: Initialize application.		   			                           *
************************************************************************************/
StdReturnType SenCtrl_Init()
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
	/* Initialize the variables. */
	for(uint8 idx = 0; idx < 16; idx++)
 8003cde:	2300      	movs	r3, #0
 8003ce0:	71fb      	strb	r3, [r7, #7]
 8003ce2:	e007      	b.n	8003cf4 <SenCtrl_Init+0x1c>
	{
		SenCtrl_MeasuredValues[idx] = STD_LOW;
 8003ce4:	79fb      	ldrb	r3, [r7, #7]
 8003ce6:	4a0a      	ldr	r2, [pc, #40]	; (8003d10 <SenCtrl_Init+0x38>)
 8003ce8:	2100      	movs	r1, #0
 8003cea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint8 idx = 0; idx < 16; idx++)
 8003cee:	79fb      	ldrb	r3, [r7, #7]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	71fb      	strb	r3, [r7, #7]
 8003cf4:	79fb      	ldrb	r3, [r7, #7]
 8003cf6:	2b0f      	cmp	r3, #15
 8003cf8:	d9f4      	bls.n	8003ce4 <SenCtrl_Init+0xc>
	}
	SenCtrl_ApplState = SENCTRL_PROCESS_STATE;
 8003cfa:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <SenCtrl_Init+0x3c>)
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	701a      	strb	r2, [r3, #0]
	return E_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	200001e8 	.word	0x200001e8
 8003d14:	200001e6 	.word	0x200001e6

08003d18 <SenCtrl_DeInit>:
/***********************************************************************************
* Function: SenCtrl_DeInit										     	   	       *
* Description: De-initialize application.		   			                       *
************************************************************************************/
StdReturnType SenCtrl_DeInit()
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
	return E_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <SenCtrl_ProcessSensorValue>:
/***********************************************************************************
* Function: SenCtrl_ProcessSensorValue									   	       *
* Description: Process the request for the sensor value. 	                       *
************************************************************************************/
VOID SenCtrl_ProcessSensorValue(uint8 request)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	71fb      	strb	r3, [r7, #7]
	/* Store request into local variable. */
	uint8 localRequest = request;
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	77fb      	strb	r3, [r7, #31]
	/* Process sensor request. */
	switch(localRequest)
 8003d36:	7ffb      	ldrb	r3, [r7, #31]
 8003d38:	2b0d      	cmp	r3, #13
 8003d3a:	f200 817e 	bhi.w	800403a <SenCtrl_ProcessSensorValue+0x312>
 8003d3e:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <SenCtrl_ProcessSensorValue+0x1c>)
 8003d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d44:	08003d7d 	.word	0x08003d7d
 8003d48:	0800403b 	.word	0x0800403b
 8003d4c:	08003db3 	.word	0x08003db3
 8003d50:	08003ded 	.word	0x08003ded
 8003d54:	08003e23 	.word	0x08003e23
 8003d58:	08003e59 	.word	0x08003e59
 8003d5c:	08003e8f 	.word	0x08003e8f
 8003d60:	08003ec5 	.word	0x08003ec5
 8003d64:	08003efb 	.word	0x08003efb
 8003d68:	08003f31 	.word	0x08003f31
 8003d6c:	08003f67 	.word	0x08003f67
 8003d70:	08003f9b 	.word	0x08003f9b
 8003d74:	08003fcf 	.word	0x08003fcf
 8003d78:	08004003 	.word	0x08004003
	{
		case SENCTRL_EXTLIGHTS_LS_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_EXTLIGHTS_LS_POSITION] >= 4000)
 8003d7c:	4ba5      	ldr	r3, [pc, #660]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003d84:	d307      	bcc.n	8003d96 <SenCtrl_ProcessSensorValue+0x6e>
			{
				uint32 localls = 1;
 8003d86:	2301      	movs	r3, #1
 8003d88:	61bb      	str	r3, [r7, #24]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(&localls);
 8003d8a:	f107 0318 	add.w	r3, r7, #24
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f012 f882 	bl	8015e98 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003d94:	e153      	b.n	800403e <SenCtrl_ProcessSensorValue+0x316>
			else if(SenCtrl_MeasuredValues[SENCTRL_EXTLIGHTS_LS_POSITION] < 4000)
 8003d96:	4b9f      	ldr	r3, [pc, #636]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003d9e:	f080 814e 	bcs.w	800403e <SenCtrl_ProcessSensorValue+0x316>
				uint32 localls = 0;
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(&localls);
 8003da6:	f107 0314 	add.w	r3, r7, #20
 8003daa:	4618      	mov	r0, r3
 8003dac:	f012 f874 	bl	8015e98 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>
			break;
 8003db0:	e145      	b.n	800403e <SenCtrl_ProcessSensorValue+0x316>
		case SENCTRL_SECALM_VS_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_SECALM_VS_REQUEST] == 4095)
 8003db2:	4b98      	ldr	r3, [pc, #608]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d107      	bne.n	8003dce <SenCtrl_ProcessSensorValue+0xa6>
			{
				uint32 localvs = STD_HIGH;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	613b      	str	r3, [r7, #16]
				Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(&localvs);
 8003dc2:	f107 0310 	add.w	r3, r7, #16
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f012 f854 	bl	8015e74 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003dcc:	e139      	b.n	8004042 <SenCtrl_ProcessSensorValue+0x31a>
			else if(SenCtrl_MeasuredValues[SENCTRL_SECALM_VS_REQUEST] < 4095)
 8003dce:	4b91      	ldr	r3, [pc, #580]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	f200 8133 	bhi.w	8004042 <SenCtrl_ProcessSensorValue+0x31a>
				uint32 localvs = STD_LOW;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60fb      	str	r3, [r7, #12]
				Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(&localvs);
 8003de0:	f107 030c 	add.w	r3, r7, #12
 8003de4:	4618      	mov	r0, r3
 8003de6:	f012 f845 	bl	8015e74 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>
			break;
 8003dea:	e12a      	b.n	8004042 <SenCtrl_ProcessSensorValue+0x31a>
		case SENCTRL_HVAC_TS_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_HVAC_TS_POSITION] >= 4000)
 8003dec:	4b89      	ldr	r3, [pc, #548]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003df4:	d307      	bcc.n	8003e06 <SenCtrl_ProcessSensorValue+0xde>
			{
				uint8 localts = STD_HIGH;
 8003df6:	2301      	movs	r3, #1
 8003df8:	72fb      	strb	r3, [r7, #11]
				Rte_Write_Hvac_HvacPort_Hvac_TsState(&localts);
 8003dfa:	f107 030b 	add.w	r3, r7, #11
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f012 f808 	bl	8015e14 <Rte_Write_Hvac_HvacPort_Hvac_TsState>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003e04:	e11f      	b.n	8004046 <SenCtrl_ProcessSensorValue+0x31e>
			else if(SenCtrl_MeasuredValues[SENCTRL_HVAC_TS_POSITION] < 4000)
 8003e06:	4b83      	ldr	r3, [pc, #524]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003e0e:	f080 811a 	bcs.w	8004046 <SenCtrl_ProcessSensorValue+0x31e>
				uint8 localts = STD_LOW;
 8003e12:	2300      	movs	r3, #0
 8003e14:	72bb      	strb	r3, [r7, #10]
				Rte_Write_Hvac_HvacPort_Hvac_TsState(&localts);
 8003e16:	f107 030a 	add.w	r3, r7, #10
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f011 fffa 	bl	8015e14 <Rte_Write_Hvac_HvacPort_Hvac_TsState>
			break;
 8003e20:	e111      	b.n	8004046 <SenCtrl_ProcessSensorValue+0x31e>
		case SENCTRL_DIAGCTRL_LB_L_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_LB_L_POSITION] >= SENCTRL_THRESHOLD_OK)
 8003e22:	4b7c      	ldr	r3, [pc, #496]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003e2a:	d303      	bcc.n	8003e34 <SenCtrl_ProcessSensorValue+0x10c>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(0);
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	f012 f811 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003e32:	e10a      	b.n	800404a <SenCtrl_ProcessSensorValue+0x322>
			else if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_LB_L_POSITION] < SENCTRL_THRESHOLD_OK)
 8003e34:	4b77      	ldr	r3, [pc, #476]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003e3c:	d203      	bcs.n	8003e46 <SenCtrl_ProcessSensorValue+0x11e>
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_LOW_BEAM_LEFT_MALFUNCTION);
 8003e3e:	2004      	movs	r0, #4
 8003e40:	f012 f808 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			break;
 8003e44:	e101      	b.n	800404a <SenCtrl_ProcessSensorValue+0x322>
			else if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_LB_L_POSITION] < SENCTRL_THRESHOLD_SH)
 8003e46:	4b73      	ldr	r3, [pc, #460]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b63      	cmp	r3, #99	; 0x63
 8003e4c:	f200 80fd 	bhi.w	800404a <SenCtrl_ProcessSensorValue+0x322>
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_LOW_BEAM_LEFT_MALFUNCTION);
 8003e50:	2004      	movs	r0, #4
 8003e52:	f011 ffff 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			break;
 8003e56:	e0f8      	b.n	800404a <SenCtrl_ProcessSensorValue+0x322>
		case SENCTRL_DIAGCTRL_LB_R_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_LB_R_POSITION] >= SENCTRL_THRESHOLD_OK)
 8003e58:	4b6e      	ldr	r3, [pc, #440]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003e60:	d303      	bcc.n	8003e6a <SenCtrl_ProcessSensorValue+0x142>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(0);
 8003e62:	2000      	movs	r0, #0
 8003e64:	f011 fff6 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003e68:	e0f1      	b.n	800404e <SenCtrl_ProcessSensorValue+0x326>
			else if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_LB_R_POSITION] < SENCTRL_THRESHOLD_OK)
 8003e6a:	4b6a      	ldr	r3, [pc, #424]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003e72:	d203      	bcs.n	8003e7c <SenCtrl_ProcessSensorValue+0x154>
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_LOW_BEAM_RIGHT_MALFUNCTION);
 8003e74:	2005      	movs	r0, #5
 8003e76:	f011 ffed 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			break;
 8003e7a:	e0e8      	b.n	800404e <SenCtrl_ProcessSensorValue+0x326>
			else if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_LB_R_POSITION] < SENCTRL_THRESHOLD_SH)
 8003e7c:	4b65      	ldr	r3, [pc, #404]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	2b63      	cmp	r3, #99	; 0x63
 8003e82:	f200 80e4 	bhi.w	800404e <SenCtrl_ProcessSensorValue+0x326>
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_LOW_BEAM_RIGHT_MALFUNCTION);
 8003e86:	2005      	movs	r0, #5
 8003e88:	f011 ffe4 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			break;
 8003e8c:	e0df      	b.n	800404e <SenCtrl_ProcessSensorValue+0x326>
		case SENCTRL_DIAGCTRL_RPL_L_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_RPL_L_POSITION] >= SENCTRL_THRESHOLD_OK)
 8003e8e:	4b61      	ldr	r3, [pc, #388]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003e96:	d303      	bcc.n	8003ea0 <SenCtrl_ProcessSensorValue+0x178>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(0);
 8003e98:	2000      	movs	r0, #0
 8003e9a:	f011 ffdb 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003e9e:	e0d8      	b.n	8004052 <SenCtrl_ProcessSensorValue+0x32a>
			else if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_RPL_L_POSITION] < SENCTRL_THRESHOLD_OK)
 8003ea0:	4b5c      	ldr	r3, [pc, #368]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003ea8:	d203      	bcs.n	8003eb2 <SenCtrl_ProcessSensorValue+0x18a>
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_REAR_POSITION_LIGHT_LEFT_MALFUNCTION);
 8003eaa:	2044      	movs	r0, #68	; 0x44
 8003eac:	f011 ffd2 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			break;
 8003eb0:	e0cf      	b.n	8004052 <SenCtrl_ProcessSensorValue+0x32a>
			else if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_RPL_L_POSITION] < SENCTRL_THRESHOLD_SH)
 8003eb2:	4b58      	ldr	r3, [pc, #352]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2b63      	cmp	r3, #99	; 0x63
 8003eb8:	f200 80cb 	bhi.w	8004052 <SenCtrl_ProcessSensorValue+0x32a>
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_REAR_POSITION_LIGHT_LEFT_MALFUNCTION);
 8003ebc:	2044      	movs	r0, #68	; 0x44
 8003ebe:	f011 ffc9 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			break;
 8003ec2:	e0c6      	b.n	8004052 <SenCtrl_ProcessSensorValue+0x32a>
		case SENCTRL_DIAGCTRL_RPL_R_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_RPL_R_POSITION] >= SENCTRL_THRESHOLD_OK)
 8003ec4:	4b53      	ldr	r3, [pc, #332]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003ecc:	d303      	bcc.n	8003ed6 <SenCtrl_ProcessSensorValue+0x1ae>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(0);
 8003ece:	2000      	movs	r0, #0
 8003ed0:	f011 ffc0 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003ed4:	e0bf      	b.n	8004056 <SenCtrl_ProcessSensorValue+0x32e>
			else if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_RPL_R_POSITION] < SENCTRL_THRESHOLD_OK)
 8003ed6:	4b4f      	ldr	r3, [pc, #316]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003ede:	d203      	bcs.n	8003ee8 <SenCtrl_ProcessSensorValue+0x1c0>
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION);
 8003ee0:	2045      	movs	r0, #69	; 0x45
 8003ee2:	f011 ffb7 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			break;
 8003ee6:	e0b6      	b.n	8004056 <SenCtrl_ProcessSensorValue+0x32e>
			else if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_RPL_R_POSITION] < SENCTRL_THRESHOLD_SH)
 8003ee8:	4b4a      	ldr	r3, [pc, #296]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	2b63      	cmp	r3, #99	; 0x63
 8003eee:	f200 80b2 	bhi.w	8004056 <SenCtrl_ProcessSensorValue+0x32e>
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION);
 8003ef2:	2045      	movs	r0, #69	; 0x45
 8003ef4:	f011 ffae 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			break;
 8003ef8:	e0ad      	b.n	8004056 <SenCtrl_ProcessSensorValue+0x32e>
		case SENCTRL_DIAGCTRL_BL_R_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_BL_R_POSITION] >= SENCTRL_THRESHOLD_OK)
 8003efa:	4b46      	ldr	r3, [pc, #280]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003f02:	d303      	bcc.n	8003f0c <SenCtrl_ProcessSensorValue+0x1e4>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(0);
 8003f04:	2000      	movs	r0, #0
 8003f06:	f011 ffa5 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003f0a:	e0a6      	b.n	800405a <SenCtrl_ProcessSensorValue+0x332>
			else if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_BL_R_POSITION] < SENCTRL_THRESHOLD_OK)
 8003f0c:	4b41      	ldr	r3, [pc, #260]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003f14:	d203      	bcs.n	8003f1e <SenCtrl_ProcessSensorValue+0x1f6>
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_BRAKE_LIGHT_RIGHT_MALFUNCTION);
 8003f16:	2074      	movs	r0, #116	; 0x74
 8003f18:	f011 ff9c 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			break;
 8003f1c:	e09d      	b.n	800405a <SenCtrl_ProcessSensorValue+0x332>
			else if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_BL_R_POSITION] < SENCTRL_THRESHOLD_SH)
 8003f1e:	4b3d      	ldr	r3, [pc, #244]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	2b63      	cmp	r3, #99	; 0x63
 8003f24:	f200 8099 	bhi.w	800405a <SenCtrl_ProcessSensorValue+0x332>
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_BRAKE_LIGHT_RIGHT_MALFUNCTION);
 8003f28:	2074      	movs	r0, #116	; 0x74
 8003f2a:	f011 ff93 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			break;
 8003f2e:	e094      	b.n	800405a <SenCtrl_ProcessSensorValue+0x332>
		case SENCTRL_DIAGCTRL_BL_L_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_BL_L_POSITION] >= SENCTRL_THRESHOLD_OK)
 8003f30:	4b38      	ldr	r3, [pc, #224]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003f38:	d303      	bcc.n	8003f42 <SenCtrl_ProcessSensorValue+0x21a>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(0);
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	f011 ff8a 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003f40:	e08d      	b.n	800405e <SenCtrl_ProcessSensorValue+0x336>
			else if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_BL_L_POSITION] < SENCTRL_THRESHOLD_OK)
 8003f42:	4b34      	ldr	r3, [pc, #208]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003f4a:	d203      	bcs.n	8003f54 <SenCtrl_ProcessSensorValue+0x22c>
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_BRAKE_LIGHT_LEFT_MALFUNCTION);
 8003f4c:	2074      	movs	r0, #116	; 0x74
 8003f4e:	f011 ff81 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			break;
 8003f52:	e084      	b.n	800405e <SenCtrl_ProcessSensorValue+0x336>
			else if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_BL_L_POSITION] < SENCTRL_THRESHOLD_SH)
 8003f54:	4b2f      	ldr	r3, [pc, #188]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	2b63      	cmp	r3, #99	; 0x63
 8003f5a:	f200 8080 	bhi.w	800405e <SenCtrl_ProcessSensorValue+0x336>
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_BRAKE_LIGHT_LEFT_MALFUNCTION);
 8003f5e:	2074      	movs	r0, #116	; 0x74
 8003f60:	f011 ff78 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			break;
 8003f64:	e07b      	b.n	800405e <SenCtrl_ProcessSensorValue+0x336>
		case SENCTRL_DIAGCTRL_LTS_F_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_LTS_F_POSITION] >= SENCTRL_THRESHOLD_OK)
 8003f66:	4b2b      	ldr	r3, [pc, #172]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003f6e:	d303      	bcc.n	8003f78 <SenCtrl_ProcessSensorValue+0x250>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(0);
 8003f70:	2000      	movs	r0, #0
 8003f72:	f011 ff6f 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003f76:	e074      	b.n	8004062 <SenCtrl_ProcessSensorValue+0x33a>
			else if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_LTS_F_POSITION] < SENCTRL_THRESHOLD_OK)
 8003f78:	4b26      	ldr	r3, [pc, #152]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003f80:	d203      	bcs.n	8003f8a <SenCtrl_ProcessSensorValue+0x262>
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION);
 8003f82:	2064      	movs	r0, #100	; 0x64
 8003f84:	f011 ff66 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			break;
 8003f88:	e06b      	b.n	8004062 <SenCtrl_ProcessSensorValue+0x33a>
			else if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_LTS_F_POSITION] < SENCTRL_THRESHOLD_SH)
 8003f8a:	4b22      	ldr	r3, [pc, #136]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	2b63      	cmp	r3, #99	; 0x63
 8003f90:	d867      	bhi.n	8004062 <SenCtrl_ProcessSensorValue+0x33a>
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION);
 8003f92:	2064      	movs	r0, #100	; 0x64
 8003f94:	f011 ff5e 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			break;
 8003f98:	e063      	b.n	8004062 <SenCtrl_ProcessSensorValue+0x33a>
		case SENCTRL_DIAGCTRL_LTS_R_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_LTS_R_POSITION] >= SENCTRL_THRESHOLD_OK)
 8003f9a:	4b1e      	ldr	r3, [pc, #120]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003fa2:	d303      	bcc.n	8003fac <SenCtrl_ProcessSensorValue+0x284>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(0);
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	f011 ff55 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003faa:	e05c      	b.n	8004066 <SenCtrl_ProcessSensorValue+0x33e>
			else if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_LTS_R_POSITION] < SENCTRL_THRESHOLD_OK)
 8003fac:	4b19      	ldr	r3, [pc, #100]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003fb4:	d203      	bcs.n	8003fbe <SenCtrl_ProcessSensorValue+0x296>
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_LEFT_TURN_SIGNAL_REAR_MALFUNCTION);
 8003fb6:	2065      	movs	r0, #101	; 0x65
 8003fb8:	f011 ff4c 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			break;
 8003fbc:	e053      	b.n	8004066 <SenCtrl_ProcessSensorValue+0x33e>
			else if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_LTS_R_POSITION] < SENCTRL_THRESHOLD_SH)
 8003fbe:	4b15      	ldr	r3, [pc, #84]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc2:	2b63      	cmp	r3, #99	; 0x63
 8003fc4:	d84f      	bhi.n	8004066 <SenCtrl_ProcessSensorValue+0x33e>
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_LEFT_TURN_SIGNAL_REAR_MALFUNCTION);
 8003fc6:	2065      	movs	r0, #101	; 0x65
 8003fc8:	f011 ff44 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			break;
 8003fcc:	e04b      	b.n	8004066 <SenCtrl_ProcessSensorValue+0x33e>
		case SENCTRL_DIAGCTRL_RTS_R_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_RTS_R_POSITION] >= SENCTRL_THRESHOLD_OK)
 8003fce:	4b11      	ldr	r3, [pc, #68]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003fd6:	d303      	bcc.n	8003fe0 <SenCtrl_ProcessSensorValue+0x2b8>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(0);
 8003fd8:	2000      	movs	r0, #0
 8003fda:	f011 ff3b 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003fde:	e044      	b.n	800406a <SenCtrl_ProcessSensorValue+0x342>
			else if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_RTS_R_POSITION] < SENCTRL_THRESHOLD_OK)
 8003fe0:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003fe8:	d203      	bcs.n	8003ff2 <SenCtrl_ProcessSensorValue+0x2ca>
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_RIGHT_TURN_SIGNAL_REAR_MALFUNCTION);
 8003fea:	2055      	movs	r0, #85	; 0x55
 8003fec:	f011 ff32 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			break;
 8003ff0:	e03b      	b.n	800406a <SenCtrl_ProcessSensorValue+0x342>
			else if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_RTS_R_POSITION] < SENCTRL_THRESHOLD_SH)
 8003ff2:	4b08      	ldr	r3, [pc, #32]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	2b63      	cmp	r3, #99	; 0x63
 8003ff8:	d837      	bhi.n	800406a <SenCtrl_ProcessSensorValue+0x342>
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_RIGHT_TURN_SIGNAL_REAR_MALFUNCTION);
 8003ffa:	2055      	movs	r0, #85	; 0x55
 8003ffc:	f011 ff2a 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			break;
 8004000:	e033      	b.n	800406a <SenCtrl_ProcessSensorValue+0x342>
		case SENCTRL_DIAGCTRL_RTS_F_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_RTS_F_POSITION] >= SENCTRL_THRESHOLD_OK)
 8004002:	4b04      	ldr	r3, [pc, #16]	; (8004014 <SenCtrl_ProcessSensorValue+0x2ec>)
 8004004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004006:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800400a:	d305      	bcc.n	8004018 <SenCtrl_ProcessSensorValue+0x2f0>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(0);
 800400c:	2000      	movs	r0, #0
 800400e:	f011 ff21 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 8004012:	e02c      	b.n	800406e <SenCtrl_ProcessSensorValue+0x346>
 8004014:	200001e8 	.word	0x200001e8
			else if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_RTS_F_POSITION] < SENCTRL_THRESHOLD_OK)
 8004018:	4b17      	ldr	r3, [pc, #92]	; (8004078 <SenCtrl_ProcessSensorValue+0x350>)
 800401a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004020:	d203      	bcs.n	800402a <SenCtrl_ProcessSensorValue+0x302>
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_RIGHT_TURN_SIGNAL_FRONT_MALFUNCTION);
 8004022:	2054      	movs	r0, #84	; 0x54
 8004024:	f011 ff16 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			break;
 8004028:	e021      	b.n	800406e <SenCtrl_ProcessSensorValue+0x346>
			else if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_RTS_F_POSITION] < SENCTRL_THRESHOLD_SH)
 800402a:	4b13      	ldr	r3, [pc, #76]	; (8004078 <SenCtrl_ProcessSensorValue+0x350>)
 800402c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402e:	2b63      	cmp	r3, #99	; 0x63
 8004030:	d81d      	bhi.n	800406e <SenCtrl_ProcessSensorValue+0x346>
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_RIGHT_TURN_SIGNAL_FRONT_MALFUNCTION);
 8004032:	2054      	movs	r0, #84	; 0x54
 8004034:	f011 ff0e 	bl	8015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			break;
 8004038:	e019      	b.n	800406e <SenCtrl_ProcessSensorValue+0x346>
		default:
			break;
 800403a:	bf00      	nop
 800403c:	e018      	b.n	8004070 <SenCtrl_ProcessSensorValue+0x348>
			break;
 800403e:	bf00      	nop
 8004040:	e016      	b.n	8004070 <SenCtrl_ProcessSensorValue+0x348>
			break;
 8004042:	bf00      	nop
 8004044:	e014      	b.n	8004070 <SenCtrl_ProcessSensorValue+0x348>
			break;
 8004046:	bf00      	nop
 8004048:	e012      	b.n	8004070 <SenCtrl_ProcessSensorValue+0x348>
			break;
 800404a:	bf00      	nop
 800404c:	e010      	b.n	8004070 <SenCtrl_ProcessSensorValue+0x348>
			break;
 800404e:	bf00      	nop
 8004050:	e00e      	b.n	8004070 <SenCtrl_ProcessSensorValue+0x348>
			break;
 8004052:	bf00      	nop
 8004054:	e00c      	b.n	8004070 <SenCtrl_ProcessSensorValue+0x348>
			break;
 8004056:	bf00      	nop
 8004058:	e00a      	b.n	8004070 <SenCtrl_ProcessSensorValue+0x348>
			break;
 800405a:	bf00      	nop
 800405c:	e008      	b.n	8004070 <SenCtrl_ProcessSensorValue+0x348>
			break;
 800405e:	bf00      	nop
 8004060:	e006      	b.n	8004070 <SenCtrl_ProcessSensorValue+0x348>
			break;
 8004062:	bf00      	nop
 8004064:	e004      	b.n	8004070 <SenCtrl_ProcessSensorValue+0x348>
			break;
 8004066:	bf00      	nop
 8004068:	e002      	b.n	8004070 <SenCtrl_ProcessSensorValue+0x348>
			break;
 800406a:	bf00      	nop
 800406c:	e000      	b.n	8004070 <SenCtrl_ProcessSensorValue+0x348>
			break;
 800406e:	bf00      	nop
	}
}
 8004070:	bf00      	nop
 8004072:	3720      	adds	r7, #32
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	200001e8 	.word	0x200001e8

0800407c <Can_Init>:
/***********************************************************************************
* Function: Can_Init													   		   *
* Description: Driver initialization.		 	   								   *
************************************************************************************/
VOID Can_Init()
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
	Can_BswState = CAN_INIT_STATE;
 8004080:	4b03      	ldr	r3, [pc, #12]	; (8004090 <Can_Init+0x14>)
 8004082:	2200      	movs	r2, #0
 8004084:	701a      	strb	r2, [r3, #0]
	CanOverSpi_Init();
 8004086:	f00c fdfc 	bl	8010c82 <CanOverSpi_Init>
}
 800408a:	bf00      	nop
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	2000028c 	.word	0x2000028c

08004094 <Can_DeInit>:
/***********************************************************************************
* Function: Can_DeInit													   		   *
* Description: Driver de-initialization.		 	   							   *
************************************************************************************/
VOID Can_DeInit()
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
	Can_BswState = CAN_DEINIT_STATE;
 8004098:	4b08      	ldr	r3, [pc, #32]	; (80040bc <Can_DeInit+0x28>)
 800409a:	2207      	movs	r2, #7
 800409c:	701a      	strb	r2, [r3, #0]
	Can_InitMask(0, 0, 0);
 800409e:	2200      	movs	r2, #0
 80040a0:	2100      	movs	r1, #0
 80040a2:	2000      	movs	r0, #0
 80040a4:	f000 f80c 	bl	80040c0 <Can_InitMask>
	Can_InitFilter(0, 0, 0);
 80040a8:	2200      	movs	r2, #0
 80040aa:	2100      	movs	r1, #0
 80040ac:	2000      	movs	r0, #0
 80040ae:	f000 f81f 	bl	80040f0 <Can_InitFilter>
	MCP2515_CanOverSpi_Reset();
 80040b2:	f00d f997 	bl	80113e4 <MCP2515_CanOverSpi_Reset>
}
 80040b6:	bf00      	nop
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	2000028c 	.word	0x2000028c

080040c0 <Can_InitMask>:
/***********************************************************************************
* Function: Can_InitMask													   	   *
* Description: Protocol mask initialization.		 	   						   *
************************************************************************************/
VOID Can_InitMask(uint8 MaskNumber, uint8 MaskIdType, uint32 MaskId)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	4603      	mov	r3, r0
 80040c8:	603a      	str	r2, [r7, #0]
 80040ca:	71fb      	strb	r3, [r7, #7]
 80040cc:	460b      	mov	r3, r1
 80040ce:	71bb      	strb	r3, [r7, #6]
	Can_BswState = CAN_INIT_MASK_STATE;
 80040d0:	4b06      	ldr	r3, [pc, #24]	; (80040ec <Can_InitMask+0x2c>)
 80040d2:	2206      	movs	r2, #6
 80040d4:	701a      	strb	r2, [r3, #0]
	CanOverSpi_Init_Mask(MaskNumber, MaskIdType, MaskId);
 80040d6:	79b9      	ldrb	r1, [r7, #6]
 80040d8:	79fb      	ldrb	r3, [r7, #7]
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f00c fe77 	bl	8010dd0 <CanOverSpi_Init_Mask>
}
 80040e2:	bf00      	nop
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	2000028c 	.word	0x2000028c

080040f0 <Can_InitFilter>:
/***********************************************************************************
* Function: Can_InitFilter													   	   *
* Description: Protocol filter initialization.		 	   						   *
************************************************************************************/
VOID Can_InitFilter(uint8 FilterNumber, uint8 FilterIdType, uint32 FilterId)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	4603      	mov	r3, r0
 80040f8:	603a      	str	r2, [r7, #0]
 80040fa:	71fb      	strb	r3, [r7, #7]
 80040fc:	460b      	mov	r3, r1
 80040fe:	71bb      	strb	r3, [r7, #6]
	Can_BswState = CAN_INIT_FILTER_STATE;
 8004100:	4b06      	ldr	r3, [pc, #24]	; (800411c <Can_InitFilter+0x2c>)
 8004102:	2205      	movs	r2, #5
 8004104:	701a      	strb	r2, [r3, #0]
	CanOverSpi_Init_Filter(FilterNumber, FilterIdType, FilterId);
 8004106:	79b9      	ldrb	r1, [r7, #6]
 8004108:	79fb      	ldrb	r3, [r7, #7]
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f00c fea3 	bl	8010e58 <CanOverSpi_Init_Filter>
}
 8004112:	bf00      	nop
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	2000028c 	.word	0x2000028c

08004120 <Can_MainFunction>:
/***********************************************************************************
* Function: Can_MainFunction													   *
* Description: Driver main function.		 	   								   *
************************************************************************************/
VOID Can_MainFunction()
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
	Can_TransmitEcuState();
 8004124:	f000 f892 	bl	800424c <Can_TransmitEcuState>
	Can_ReceiveNetworkMessages();
 8004128:	f000 facc 	bl	80046c4 <Can_ReceiveNetworkMessages>
	Can_BusState();
 800412c:	f000 f834 	bl	8004198 <Can_BusState>
	Can_MessagePending();
 8004130:	f000 f860 	bl	80041f4 <Can_MessagePending>
	Can_GetErrorStatus();
 8004134:	f000 f842 	bl	80041bc <Can_GetErrorStatus>
	switch(Can_BswState)
 8004138:	4b16      	ldr	r3, [pc, #88]	; (8004194 <Can_MainFunction+0x74>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b09      	cmp	r3, #9
 800413e:	d826      	bhi.n	800418e <Can_MainFunction+0x6e>
 8004140:	a201      	add	r2, pc, #4	; (adr r2, 8004148 <Can_MainFunction+0x28>)
 8004142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004146:	bf00      	nop
 8004148:	0800418f 	.word	0x0800418f
 800414c:	0800418f 	.word	0x0800418f
 8004150:	0800418f 	.word	0x0800418f
 8004154:	0800418f 	.word	0x0800418f
 8004158:	08004171 	.word	0x08004171
 800415c:	0800418f 	.word	0x0800418f
 8004160:	0800418f 	.word	0x0800418f
 8004164:	0800418f 	.word	0x0800418f
 8004168:	0800417b 	.word	0x0800417b
 800416c:	08004185 	.word	0x08004185
		case CAN_RX_STATE:
			break;
		case CAN_PENDING_MESSAGE_STATE:
			break;
		case CAN_BUSOFF_STATE:
			Can_DeInit();
 8004170:	f7ff ff90 	bl	8004094 <Can_DeInit>
			Can_Init();
 8004174:	f7ff ff82 	bl	800407c <Can_Init>
			break;
 8004178:	e00a      	b.n	8004190 <Can_MainFunction+0x70>
		case CAN_INIT_FILTER_STATE:
			break;
		case CAN_INIT_MASK_STATE:
			break;
		case CAN_TX_ERROR:
			Can_DeInit();
 800417a:	f7ff ff8b 	bl	8004094 <Can_DeInit>
			Can_Init();
 800417e:	f7ff ff7d 	bl	800407c <Can_Init>
			break;
 8004182:	e005      	b.n	8004190 <Can_MainFunction+0x70>
		case CAN_RX_ERROR:
			Can_DeInit();
 8004184:	f7ff ff86 	bl	8004094 <Can_DeInit>
			Can_Init();
 8004188:	f7ff ff78 	bl	800407c <Can_Init>
			break;
 800418c:	e000      	b.n	8004190 <Can_MainFunction+0x70>
		default:
			break;
 800418e:	bf00      	nop
	}
}
 8004190:	bf00      	nop
 8004192:	bd80      	pop	{r7, pc}
 8004194:	2000028c 	.word	0x2000028c

08004198 <Can_BusState>:
/***********************************************************************************
* Function: Can_BusState													   	   *
* Description: Protocol bus state.		 	   									   *
************************************************************************************/
StdReturnType Can_BusState()
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
	if(CanOverSpi_isBussOff() == STD_HIGH)
 800419c:	f00c ffde 	bl	801115c <CanOverSpi_isBussOff>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d104      	bne.n	80041b0 <Can_BusState+0x18>
	{
		Can_BswState = CAN_BUSOFF_STATE;
 80041a6:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <Can_BusState+0x20>)
 80041a8:	2204      	movs	r2, #4
 80041aa:	701a      	strb	r2, [r3, #0]
		return E_NOT_OK;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <Can_BusState+0x1a>
	}
	else
	{
		return E_OK;
 80041b0:	2300      	movs	r3, #0
	}
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	2000028c 	.word	0x2000028c

080041bc <Can_GetErrorStatus>:
/***********************************************************************************
* Function: Can_GetErrorStatus													   *
* Description: Driver errost status.		 	   								   *
************************************************************************************/
StdReturnType Can_GetErrorStatus()
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
	if(CanOverSpi_isRxErrorPassive() == 0)
 80041c0:	f00c ffe8 	bl	8011194 <CanOverSpi_isRxErrorPassive>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d104      	bne.n	80041d4 <Can_GetErrorStatus+0x18>
	{
		Can_BswState = CAN_RX_ERROR;
 80041ca:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <Can_GetErrorStatus+0x34>)
 80041cc:	2209      	movs	r2, #9
 80041ce:	701a      	strb	r2, [r3, #0]
		return CAN_RX_ERROR;
 80041d0:	2309      	movs	r3, #9
 80041d2:	e00a      	b.n	80041ea <Can_GetErrorStatus+0x2e>
	else
	{
		/* do nothing */
	}

	if(CanOverSpi_isTxErrorPassive() == 0)
 80041d4:	f00c fffa 	bl	80111cc <CanOverSpi_isTxErrorPassive>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d104      	bne.n	80041e8 <Can_GetErrorStatus+0x2c>
	{
		Can_BswState = CAN_TX_ERROR;
 80041de:	4b04      	ldr	r3, [pc, #16]	; (80041f0 <Can_GetErrorStatus+0x34>)
 80041e0:	2208      	movs	r2, #8
 80041e2:	701a      	strb	r2, [r3, #0]
		return CAN_TX_ERROR;
 80041e4:	2308      	movs	r3, #8
 80041e6:	e000      	b.n	80041ea <Can_GetErrorStatus+0x2e>
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	2000028c 	.word	0x2000028c

080041f4 <Can_MessagePending>:
/***********************************************************************************
* Function: Can_MessagePending													   *
* Description: Check for messages pending.		 	   							   *
************************************************************************************/
StdReturnType Can_MessagePending()
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
	if(CanOverSpi_messagesInBuffer() !=0)
 80041f8:	f00c ff8a 	bl	8011110 <CanOverSpi_messagesInBuffer>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d006      	beq.n	8004210 <Can_MessagePending+0x1c>
	{
		Can_BswState = CAN_PENDING_MESSAGE_STATE;
 8004202:	4b05      	ldr	r3, [pc, #20]	; (8004218 <Can_MessagePending+0x24>)
 8004204:	2203      	movs	r2, #3
 8004206:	701a      	strb	r2, [r3, #0]
		return CanOverSpi_messagesInBuffer();
 8004208:	f00c ff82 	bl	8011110 <CanOverSpi_messagesInBuffer>
 800420c:	4603      	mov	r3, r0
 800420e:	e000      	b.n	8004212 <Can_MessagePending+0x1e>
	}
	else
	{
		return E_OK;
 8004210:	2300      	movs	r3, #0
	}
}
 8004212:	4618      	mov	r0, r3
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	2000028c 	.word	0x2000028c

0800421c <Can_Receive>:
/***********************************************************************************
* Function: Can_Receive													   		   *
* Description: Receive messages.		 	   									   *
************************************************************************************/
StdReturnType Can_Receive(Can_Message CanMsg)
{
 800421c:	b084      	sub	sp, #16
 800421e:	b580      	push	{r7, lr}
 8004220:	af00      	add	r7, sp, #0
 8004222:	f107 0c08 	add.w	ip, r7, #8
 8004226:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	Can_BswState = CAN_RX_STATE;
 800422a:	4b07      	ldr	r3, [pc, #28]	; (8004248 <Can_Receive+0x2c>)
 800422c:	2202      	movs	r2, #2
 800422e:	701a      	strb	r2, [r3, #0]
	CanOverSpi_Receive((uCAN_MSG*)&CanMsg);
 8004230:	f107 0008 	add.w	r0, r7, #8
 8004234:	f00c fef0 	bl	8011018 <CanOverSpi_Receive>
	return E_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	46bd      	mov	sp, r7
 800423e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004242:	b004      	add	sp, #16
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	2000028c 	.word	0x2000028c

0800424c <Can_TransmitEcuState>:
/***********************************************************************************
* Function: Can_TransmitEcuState												   *
* Description: Transmit the ECU state.		 	   							       *
************************************************************************************/
VOID Can_TransmitEcuState()
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
	Can_BswState = CAN_TX_STATE;
 8004250:	4b94      	ldr	r3, [pc, #592]	; (80044a4 <Can_TransmitEcuState+0x258>)
 8004252:	2201      	movs	r2, #1
 8004254:	701a      	strb	r2, [r3, #0]
	CanMsg_BtcState_Tx.frame.id = 0x10;
 8004256:	4b94      	ldr	r3, [pc, #592]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 8004258:	2210      	movs	r2, #16
 800425a:	605a      	str	r2, [r3, #4]
	CanMsg_BtcState_Tx.frame.dlc = 8;
 800425c:	4b92      	ldr	r3, [pc, #584]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 800425e:	2208      	movs	r2, #8
 8004260:	721a      	strb	r2, [r3, #8]
	CanMsg_BtcState_Tx.frame.idType = 0x20;
 8004262:	4b91      	ldr	r3, [pc, #580]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 8004264:	2220      	movs	r2, #32
 8004266:	701a      	strb	r2, [r3, #0]
	CanMsg_CenLocState_Tx.frame.id = 0x11;
 8004268:	4b90      	ldr	r3, [pc, #576]	; (80044ac <Can_TransmitEcuState+0x260>)
 800426a:	2211      	movs	r2, #17
 800426c:	605a      	str	r2, [r3, #4]
	CanMsg_CenLocState_Tx.frame.dlc = 8;
 800426e:	4b8f      	ldr	r3, [pc, #572]	; (80044ac <Can_TransmitEcuState+0x260>)
 8004270:	2208      	movs	r2, #8
 8004272:	721a      	strb	r2, [r3, #8]
	CanMsg_CenLocState_Tx.frame.idType = 0x21;
 8004274:	4b8d      	ldr	r3, [pc, #564]	; (80044ac <Can_TransmitEcuState+0x260>)
 8004276:	2221      	movs	r2, #33	; 0x21
 8004278:	701a      	strb	r2, [r3, #0]
	CanMsg_ExtLightsState_Tx.frame.id = 0x12;
 800427a:	4b8d      	ldr	r3, [pc, #564]	; (80044b0 <Can_TransmitEcuState+0x264>)
 800427c:	2212      	movs	r2, #18
 800427e:	605a      	str	r2, [r3, #4]
	CanMsg_ExtLightsState_Tx.frame.dlc = 8;
 8004280:	4b8b      	ldr	r3, [pc, #556]	; (80044b0 <Can_TransmitEcuState+0x264>)
 8004282:	2208      	movs	r2, #8
 8004284:	721a      	strb	r2, [r3, #8]
	CanMsg_ExtLightsState_Tx.frame.idType = 0x22;
 8004286:	4b8a      	ldr	r3, [pc, #552]	; (80044b0 <Can_TransmitEcuState+0x264>)
 8004288:	2222      	movs	r2, #34	; 0x22
 800428a:	701a      	strb	r2, [r3, #0]
	CanMsg_EcuState_Tx.frame.id = 0x13;
 800428c:	4b89      	ldr	r3, [pc, #548]	; (80044b4 <Can_TransmitEcuState+0x268>)
 800428e:	2213      	movs	r2, #19
 8004290:	605a      	str	r2, [r3, #4]
	CanMsg_EcuState_Tx.frame.dlc = 8;
 8004292:	4b88      	ldr	r3, [pc, #544]	; (80044b4 <Can_TransmitEcuState+0x268>)
 8004294:	2208      	movs	r2, #8
 8004296:	721a      	strb	r2, [r3, #8]
	CanMsg_EcuState_Tx.frame.idType = 0x23;
 8004298:	4b86      	ldr	r3, [pc, #536]	; (80044b4 <Can_TransmitEcuState+0x268>)
 800429a:	2223      	movs	r2, #35	; 0x23
 800429c:	701a      	strb	r2, [r3, #0]
	CanMsg_EcuState_Tx.frame.data0 = EcuM_GlobalState;
 800429e:	4b86      	ldr	r3, [pc, #536]	; (80044b8 <Can_TransmitEcuState+0x26c>)
 80042a0:	781a      	ldrb	r2, [r3, #0]
 80042a2:	4b84      	ldr	r3, [pc, #528]	; (80044b4 <Can_TransmitEcuState+0x268>)
 80042a4:	725a      	strb	r2, [r3, #9]
	CanMsg_EcuState_Tx.frame.data1 = EcuM_BswState;
 80042a6:	4b85      	ldr	r3, [pc, #532]	; (80044bc <Can_TransmitEcuState+0x270>)
 80042a8:	781a      	ldrb	r2, [r3, #0]
 80042aa:	4b82      	ldr	r3, [pc, #520]	; (80044b4 <Can_TransmitEcuState+0x268>)
 80042ac:	729a      	strb	r2, [r3, #10]
	if(Rte_P_Btc_BtcPort_Btc_CenLoc == STD_HIGH)
 80042ae:	4b84      	ldr	r3, [pc, #528]	; (80044c0 <Can_TransmitEcuState+0x274>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	f040 8083 	bne.w	80043be <Can_TransmitEcuState+0x172>
	{
		CanMsg_BtcState_Tx.frame.data0 = 0;
 80042b8:	4b7b      	ldr	r3, [pc, #492]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	725a      	strb	r2, [r3, #9]
		CanMsg_BtcState_Tx.frame.data1 = 0;
 80042be:	4b7a      	ldr	r3, [pc, #488]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	729a      	strb	r2, [r3, #10]
		CanMsg_BtcState_Tx.frame.data2 = 0xA;
 80042c4:	4b78      	ldr	r3, [pc, #480]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 80042c6:	220a      	movs	r2, #10
 80042c8:	72da      	strb	r2, [r3, #11]
		CanMsg_BtcState_Tx.frame.data3 = 0;
 80042ca:	4b77      	ldr	r3, [pc, #476]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	731a      	strb	r2, [r3, #12]
		CanMsg_BtcState_Tx.frame.data4 = 0;
 80042d0:	4b75      	ldr	r3, [pc, #468]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	735a      	strb	r2, [r3, #13]
		CanMsg_BtcState_Tx.frame.data5 = 0;
 80042d6:	4b74      	ldr	r3, [pc, #464]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 80042d8:	2200      	movs	r2, #0
 80042da:	739a      	strb	r2, [r3, #14]
		CanMsg_BtcState_Tx.frame.data6 = 0;
 80042dc:	4b72      	ldr	r3, [pc, #456]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 80042de:	2200      	movs	r2, #0
 80042e0:	73da      	strb	r2, [r3, #15]
		CanMsg_BtcState_Tx.frame.data7 = 0;
 80042e2:	4b71      	ldr	r3, [pc, #452]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	741a      	strb	r2, [r3, #16]
		if(Rte_P_Btc_BtcPort_Btc_IgnitionStepOne == STD_HIGH)
 80042e8:	4b76      	ldr	r3, [pc, #472]	; (80044c4 <Can_TransmitEcuState+0x278>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d118      	bne.n	8004322 <Can_TransmitEcuState+0xd6>
		{
			CanMsg_BtcState_Tx.frame.data0 = 0xF;
 80042f0:	4b6d      	ldr	r3, [pc, #436]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 80042f2:	220f      	movs	r2, #15
 80042f4:	725a      	strb	r2, [r3, #9]
			CanMsg_BtcState_Tx.frame.data1 = 0;
 80042f6:	4b6c      	ldr	r3, [pc, #432]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	729a      	strb	r2, [r3, #10]
			CanMsg_BtcState_Tx.frame.data2 = 0xA;
 80042fc:	4b6a      	ldr	r3, [pc, #424]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 80042fe:	220a      	movs	r2, #10
 8004300:	72da      	strb	r2, [r3, #11]
			CanMsg_BtcState_Tx.frame.data3 = 0;
 8004302:	4b69      	ldr	r3, [pc, #420]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 8004304:	2200      	movs	r2, #0
 8004306:	731a      	strb	r2, [r3, #12]
			CanMsg_BtcState_Tx.frame.data4 = 0;
 8004308:	4b67      	ldr	r3, [pc, #412]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 800430a:	2200      	movs	r2, #0
 800430c:	735a      	strb	r2, [r3, #13]
			CanMsg_BtcState_Tx.frame.data5 = 0;
 800430e:	4b66      	ldr	r3, [pc, #408]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 8004310:	2200      	movs	r2, #0
 8004312:	739a      	strb	r2, [r3, #14]
			CanMsg_BtcState_Tx.frame.data6 = 0;
 8004314:	4b64      	ldr	r3, [pc, #400]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 8004316:	2200      	movs	r2, #0
 8004318:	73da      	strb	r2, [r3, #15]
			CanMsg_BtcState_Tx.frame.data7 = 0;
 800431a:	4b63      	ldr	r3, [pc, #396]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 800431c:	2200      	movs	r2, #0
 800431e:	741a      	strb	r2, [r3, #16]
 8004320:	e069      	b.n	80043f6 <Can_TransmitEcuState+0x1aa>
		}
		else if(Rte_P_Btc_BtcPort_Btc_IgnitionStepTwo == STD_HIGH)
 8004322:	4b69      	ldr	r3, [pc, #420]	; (80044c8 <Can_TransmitEcuState+0x27c>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d118      	bne.n	800435c <Can_TransmitEcuState+0x110>
		{
			CanMsg_BtcState_Tx.frame.data0 = 0xF;
 800432a:	4b5f      	ldr	r3, [pc, #380]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 800432c:	220f      	movs	r2, #15
 800432e:	725a      	strb	r2, [r3, #9]
			CanMsg_BtcState_Tx.frame.data1 = 0x1E;
 8004330:	4b5d      	ldr	r3, [pc, #372]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 8004332:	221e      	movs	r2, #30
 8004334:	729a      	strb	r2, [r3, #10]
			CanMsg_BtcState_Tx.frame.data2 = 0xA;
 8004336:	4b5c      	ldr	r3, [pc, #368]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 8004338:	220a      	movs	r2, #10
 800433a:	72da      	strb	r2, [r3, #11]
			CanMsg_BtcState_Tx.frame.data3 = 0;
 800433c:	4b5a      	ldr	r3, [pc, #360]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 800433e:	2200      	movs	r2, #0
 8004340:	731a      	strb	r2, [r3, #12]
			CanMsg_BtcState_Tx.frame.data4 = 0;
 8004342:	4b59      	ldr	r3, [pc, #356]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 8004344:	2200      	movs	r2, #0
 8004346:	735a      	strb	r2, [r3, #13]
			CanMsg_BtcState_Tx.frame.data5 = 0;
 8004348:	4b57      	ldr	r3, [pc, #348]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 800434a:	2200      	movs	r2, #0
 800434c:	739a      	strb	r2, [r3, #14]
			CanMsg_BtcState_Tx.frame.data6 = 0;
 800434e:	4b56      	ldr	r3, [pc, #344]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 8004350:	2200      	movs	r2, #0
 8004352:	73da      	strb	r2, [r3, #15]
			CanMsg_BtcState_Tx.frame.data7 = 0;
 8004354:	4b54      	ldr	r3, [pc, #336]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 8004356:	2200      	movs	r2, #0
 8004358:	741a      	strb	r2, [r3, #16]
 800435a:	e04c      	b.n	80043f6 <Can_TransmitEcuState+0x1aa>
		}
		else if((Rte_P_Btc_BtcPort_Btc_IgnitionTurnOff == STD_HIGH &&
 800435c:	4b5b      	ldr	r3, [pc, #364]	; (80044cc <Can_TransmitEcuState+0x280>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d107      	bne.n	8004374 <Can_TransmitEcuState+0x128>
				Rte_P_Btc_BtcPort_Btc_IgnitionStepTwo == STD_LOW &&
 8004364:	4b58      	ldr	r3, [pc, #352]	; (80044c8 <Can_TransmitEcuState+0x27c>)
 8004366:	781b      	ldrb	r3, [r3, #0]
		else if((Rte_P_Btc_BtcPort_Btc_IgnitionTurnOff == STD_HIGH &&
 8004368:	2b00      	cmp	r3, #0
 800436a:	d103      	bne.n	8004374 <Can_TransmitEcuState+0x128>
				Rte_P_Btc_BtcPort_Btc_IgnitionStepOne == STD_LOW) ||
 800436c:	4b55      	ldr	r3, [pc, #340]	; (80044c4 <Can_TransmitEcuState+0x278>)
 800436e:	781b      	ldrb	r3, [r3, #0]
				Rte_P_Btc_BtcPort_Btc_IgnitionStepTwo == STD_LOW &&
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00b      	beq.n	800438c <Can_TransmitEcuState+0x140>
				(Rte_P_Btc_BtcPort_Btc_IgnitionTurnOff &&
 8004374:	4b55      	ldr	r3, [pc, #340]	; (80044cc <Can_TransmitEcuState+0x280>)
 8004376:	781b      	ldrb	r3, [r3, #0]
				Rte_P_Btc_BtcPort_Btc_IgnitionStepOne == STD_LOW) ||
 8004378:	2b00      	cmp	r3, #0
 800437a:	d03c      	beq.n	80043f6 <Can_TransmitEcuState+0x1aa>
				Rte_P_Btc_BtcPort_Btc_IgnitionStepTwo == STD_LOW &&
 800437c:	4b52      	ldr	r3, [pc, #328]	; (80044c8 <Can_TransmitEcuState+0x27c>)
 800437e:	781b      	ldrb	r3, [r3, #0]
				(Rte_P_Btc_BtcPort_Btc_IgnitionTurnOff &&
 8004380:	2b00      	cmp	r3, #0
 8004382:	d138      	bne.n	80043f6 <Can_TransmitEcuState+0x1aa>
				Rte_P_Btc_BtcPort_Btc_IgnitionStepOne == STD_LOW))
 8004384:	4b4f      	ldr	r3, [pc, #316]	; (80044c4 <Can_TransmitEcuState+0x278>)
 8004386:	781b      	ldrb	r3, [r3, #0]
				Rte_P_Btc_BtcPort_Btc_IgnitionStepTwo == STD_LOW &&
 8004388:	2b00      	cmp	r3, #0
 800438a:	d134      	bne.n	80043f6 <Can_TransmitEcuState+0x1aa>
		{
			CanMsg_BtcState_Tx.frame.data0 = 0;
 800438c:	4b46      	ldr	r3, [pc, #280]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 800438e:	2200      	movs	r2, #0
 8004390:	725a      	strb	r2, [r3, #9]
			CanMsg_BtcState_Tx.frame.data1 = 0;
 8004392:	4b45      	ldr	r3, [pc, #276]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 8004394:	2200      	movs	r2, #0
 8004396:	729a      	strb	r2, [r3, #10]
			CanMsg_BtcState_Tx.frame.data2 = 0xA;
 8004398:	4b43      	ldr	r3, [pc, #268]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 800439a:	220a      	movs	r2, #10
 800439c:	72da      	strb	r2, [r3, #11]
			CanMsg_BtcState_Tx.frame.data3 = 0;
 800439e:	4b42      	ldr	r3, [pc, #264]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	731a      	strb	r2, [r3, #12]
			CanMsg_BtcState_Tx.frame.data4 = 0;
 80043a4:	4b40      	ldr	r3, [pc, #256]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	735a      	strb	r2, [r3, #13]
			CanMsg_BtcState_Tx.frame.data5 = 0;
 80043aa:	4b3f      	ldr	r3, [pc, #252]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	739a      	strb	r2, [r3, #14]
			CanMsg_BtcState_Tx.frame.data6 = 0;
 80043b0:	4b3d      	ldr	r3, [pc, #244]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	73da      	strb	r2, [r3, #15]
			CanMsg_BtcState_Tx.frame.data7 = 0;
 80043b6:	4b3c      	ldr	r3, [pc, #240]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	741a      	strb	r2, [r3, #16]
 80043bc:	e01b      	b.n	80043f6 <Can_TransmitEcuState+0x1aa>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_Btc_BtcPort_Btc_CenLoc == STD_LOW)
 80043be:	4b40      	ldr	r3, [pc, #256]	; (80044c0 <Can_TransmitEcuState+0x274>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d117      	bne.n	80043f6 <Can_TransmitEcuState+0x1aa>
	{
		CanMsg_BtcState_Tx.frame.data0 = 0;
 80043c6:	4b38      	ldr	r3, [pc, #224]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	725a      	strb	r2, [r3, #9]
		CanMsg_BtcState_Tx.frame.data1 = 0;
 80043cc:	4b36      	ldr	r3, [pc, #216]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	729a      	strb	r2, [r3, #10]
		CanMsg_BtcState_Tx.frame.data2 = 0;
 80043d2:	4b35      	ldr	r3, [pc, #212]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	72da      	strb	r2, [r3, #11]
		CanMsg_BtcState_Tx.frame.data3 = 0;
 80043d8:	4b33      	ldr	r3, [pc, #204]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 80043da:	2200      	movs	r2, #0
 80043dc:	731a      	strb	r2, [r3, #12]
		CanMsg_BtcState_Tx.frame.data4 = 0;
 80043de:	4b32      	ldr	r3, [pc, #200]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	735a      	strb	r2, [r3, #13]
		CanMsg_BtcState_Tx.frame.data5 = 0;
 80043e4:	4b30      	ldr	r3, [pc, #192]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	739a      	strb	r2, [r3, #14]
		CanMsg_BtcState_Tx.frame.data6 = 0;
 80043ea:	4b2f      	ldr	r3, [pc, #188]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	73da      	strb	r2, [r3, #15]
		CanMsg_BtcState_Tx.frame.data7 = 0;
 80043f0:	4b2d      	ldr	r3, [pc, #180]	; (80044a8 <Can_TransmitEcuState+0x25c>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	741a      	strb	r2, [r3, #16]
	else
	{
		/* do nothing */
	}

	if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80043f6:	4b36      	ldr	r3, [pc, #216]	; (80044d0 <Can_TransmitEcuState+0x284>)
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d16c      	bne.n	80044d8 <Can_TransmitEcuState+0x28c>
	{
		CanMsg_CenLocState_Tx.frame.data0 = 0xA;
 80043fe:	4b2b      	ldr	r3, [pc, #172]	; (80044ac <Can_TransmitEcuState+0x260>)
 8004400:	220a      	movs	r2, #10
 8004402:	725a      	strb	r2, [r3, #9]
		CanMsg_CenLocState_Tx.frame.data1 = 0;
 8004404:	4b29      	ldr	r3, [pc, #164]	; (80044ac <Can_TransmitEcuState+0x260>)
 8004406:	2200      	movs	r2, #0
 8004408:	729a      	strb	r2, [r3, #10]
		CanMsg_CenLocState_Tx.frame.data2 = 0;
 800440a:	4b28      	ldr	r3, [pc, #160]	; (80044ac <Can_TransmitEcuState+0x260>)
 800440c:	2200      	movs	r2, #0
 800440e:	72da      	strb	r2, [r3, #11]
		CanMsg_CenLocState_Tx.frame.data3 = 0;
 8004410:	4b26      	ldr	r3, [pc, #152]	; (80044ac <Can_TransmitEcuState+0x260>)
 8004412:	2200      	movs	r2, #0
 8004414:	731a      	strb	r2, [r3, #12]
		CanMsg_CenLocState_Tx.frame.data4 = 0;
 8004416:	4b25      	ldr	r3, [pc, #148]	; (80044ac <Can_TransmitEcuState+0x260>)
 8004418:	2200      	movs	r2, #0
 800441a:	735a      	strb	r2, [r3, #13]
		CanMsg_CenLocState_Tx.frame.data5 = 0;
 800441c:	4b23      	ldr	r3, [pc, #140]	; (80044ac <Can_TransmitEcuState+0x260>)
 800441e:	2200      	movs	r2, #0
 8004420:	739a      	strb	r2, [r3, #14]
		CanMsg_CenLocState_Tx.frame.data6 = 0;
 8004422:	4b22      	ldr	r3, [pc, #136]	; (80044ac <Can_TransmitEcuState+0x260>)
 8004424:	2200      	movs	r2, #0
 8004426:	73da      	strb	r2, [r3, #15]
		CanMsg_CenLocState_Tx.frame.data7 = 0;
 8004428:	4b20      	ldr	r3, [pc, #128]	; (80044ac <Can_TransmitEcuState+0x260>)
 800442a:	2200      	movs	r2, #0
 800442c:	741a      	strb	r2, [r3, #16]
		if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
 800442e:	4b29      	ldr	r3, [pc, #164]	; (80044d4 <Can_TransmitEcuState+0x288>)
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d118      	bne.n	8004468 <Can_TransmitEcuState+0x21c>
		{
			CanMsg_CenLocState_Tx.frame.data0 = 0xA;
 8004436:	4b1d      	ldr	r3, [pc, #116]	; (80044ac <Can_TransmitEcuState+0x260>)
 8004438:	220a      	movs	r2, #10
 800443a:	725a      	strb	r2, [r3, #9]
			CanMsg_CenLocState_Tx.frame.data1 = 0xB;
 800443c:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <Can_TransmitEcuState+0x260>)
 800443e:	220b      	movs	r2, #11
 8004440:	729a      	strb	r2, [r3, #10]
			CanMsg_CenLocState_Tx.frame.data2 = 0;
 8004442:	4b1a      	ldr	r3, [pc, #104]	; (80044ac <Can_TransmitEcuState+0x260>)
 8004444:	2200      	movs	r2, #0
 8004446:	72da      	strb	r2, [r3, #11]
			CanMsg_CenLocState_Tx.frame.data3 = 0;
 8004448:	4b18      	ldr	r3, [pc, #96]	; (80044ac <Can_TransmitEcuState+0x260>)
 800444a:	2200      	movs	r2, #0
 800444c:	731a      	strb	r2, [r3, #12]
			CanMsg_CenLocState_Tx.frame.data4 = 0;
 800444e:	4b17      	ldr	r3, [pc, #92]	; (80044ac <Can_TransmitEcuState+0x260>)
 8004450:	2200      	movs	r2, #0
 8004452:	735a      	strb	r2, [r3, #13]
			CanMsg_CenLocState_Tx.frame.data5 = 0;
 8004454:	4b15      	ldr	r3, [pc, #84]	; (80044ac <Can_TransmitEcuState+0x260>)
 8004456:	2200      	movs	r2, #0
 8004458:	739a      	strb	r2, [r3, #14]
			CanMsg_CenLocState_Tx.frame.data6 = 0;
 800445a:	4b14      	ldr	r3, [pc, #80]	; (80044ac <Can_TransmitEcuState+0x260>)
 800445c:	2200      	movs	r2, #0
 800445e:	73da      	strb	r2, [r3, #15]
			CanMsg_CenLocState_Tx.frame.data7 = 0;
 8004460:	4b12      	ldr	r3, [pc, #72]	; (80044ac <Can_TransmitEcuState+0x260>)
 8004462:	2200      	movs	r2, #0
 8004464:	741a      	strb	r2, [r3, #16]
 8004466:	e08c      	b.n	8004582 <Can_TransmitEcuState+0x336>
		}
		else if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW)
 8004468:	4b1a      	ldr	r3, [pc, #104]	; (80044d4 <Can_TransmitEcuState+0x288>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	f040 8088 	bne.w	8004582 <Can_TransmitEcuState+0x336>
		{
			CanMsg_CenLocState_Tx.frame.data0 = 0xA;
 8004472:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <Can_TransmitEcuState+0x260>)
 8004474:	220a      	movs	r2, #10
 8004476:	725a      	strb	r2, [r3, #9]
			CanMsg_CenLocState_Tx.frame.data1 = 0;
 8004478:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <Can_TransmitEcuState+0x260>)
 800447a:	2200      	movs	r2, #0
 800447c:	729a      	strb	r2, [r3, #10]
			CanMsg_CenLocState_Tx.frame.data2 = 0;
 800447e:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <Can_TransmitEcuState+0x260>)
 8004480:	2200      	movs	r2, #0
 8004482:	72da      	strb	r2, [r3, #11]
			CanMsg_CenLocState_Tx.frame.data3 = 0;
 8004484:	4b09      	ldr	r3, [pc, #36]	; (80044ac <Can_TransmitEcuState+0x260>)
 8004486:	2200      	movs	r2, #0
 8004488:	731a      	strb	r2, [r3, #12]
			CanMsg_CenLocState_Tx.frame.data4 = 0;
 800448a:	4b08      	ldr	r3, [pc, #32]	; (80044ac <Can_TransmitEcuState+0x260>)
 800448c:	2200      	movs	r2, #0
 800448e:	735a      	strb	r2, [r3, #13]
			CanMsg_CenLocState_Tx.frame.data5 = 0;
 8004490:	4b06      	ldr	r3, [pc, #24]	; (80044ac <Can_TransmitEcuState+0x260>)
 8004492:	2200      	movs	r2, #0
 8004494:	739a      	strb	r2, [r3, #14]
			CanMsg_CenLocState_Tx.frame.data6 = 0;
 8004496:	4b05      	ldr	r3, [pc, #20]	; (80044ac <Can_TransmitEcuState+0x260>)
 8004498:	2200      	movs	r2, #0
 800449a:	73da      	strb	r2, [r3, #15]
			CanMsg_CenLocState_Tx.frame.data7 = 0;
 800449c:	4b03      	ldr	r3, [pc, #12]	; (80044ac <Can_TransmitEcuState+0x260>)
 800449e:	2200      	movs	r2, #0
 80044a0:	741a      	strb	r2, [r3, #16]
 80044a2:	e06e      	b.n	8004582 <Can_TransmitEcuState+0x336>
 80044a4:	2000028c 	.word	0x2000028c
 80044a8:	20000228 	.word	0x20000228
 80044ac:	2000023c 	.word	0x2000023c
 80044b0:	20000250 	.word	0x20000250
 80044b4:	20000264 	.word	0x20000264
 80044b8:	2000e635 	.word	0x2000e635
 80044bc:	2000e634 	.word	0x2000e634
 80044c0:	200000f7 	.word	0x200000f7
 80044c4:	20000103 	.word	0x20000103
 80044c8:	20000104 	.word	0x20000104
 80044cc:	20000105 	.word	0x20000105
 80044d0:	20000139 	.word	0x20000139
 80044d4:	2000013b 	.word	0x2000013b
		}
	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW)
 80044d8:	4b6d      	ldr	r3, [pc, #436]	; (8004690 <Can_TransmitEcuState+0x444>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d150      	bne.n	8004582 <Can_TransmitEcuState+0x336>
	{
		CanMsg_CenLocState_Tx.frame.data0 = 0;
 80044e0:	4b6c      	ldr	r3, [pc, #432]	; (8004694 <Can_TransmitEcuState+0x448>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	725a      	strb	r2, [r3, #9]
		CanMsg_CenLocState_Tx.frame.data1 = 0;
 80044e6:	4b6b      	ldr	r3, [pc, #428]	; (8004694 <Can_TransmitEcuState+0x448>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	729a      	strb	r2, [r3, #10]
		CanMsg_CenLocState_Tx.frame.data2 = 0;
 80044ec:	4b69      	ldr	r3, [pc, #420]	; (8004694 <Can_TransmitEcuState+0x448>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	72da      	strb	r2, [r3, #11]
		CanMsg_CenLocState_Tx.frame.data3 = 0;
 80044f2:	4b68      	ldr	r3, [pc, #416]	; (8004694 <Can_TransmitEcuState+0x448>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	731a      	strb	r2, [r3, #12]
		CanMsg_CenLocState_Tx.frame.data4 = 0;
 80044f8:	4b66      	ldr	r3, [pc, #408]	; (8004694 <Can_TransmitEcuState+0x448>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	735a      	strb	r2, [r3, #13]
		CanMsg_CenLocState_Tx.frame.data5 = 0;
 80044fe:	4b65      	ldr	r3, [pc, #404]	; (8004694 <Can_TransmitEcuState+0x448>)
 8004500:	2200      	movs	r2, #0
 8004502:	739a      	strb	r2, [r3, #14]
		CanMsg_CenLocState_Tx.frame.data6 = 0;
 8004504:	4b63      	ldr	r3, [pc, #396]	; (8004694 <Can_TransmitEcuState+0x448>)
 8004506:	2200      	movs	r2, #0
 8004508:	73da      	strb	r2, [r3, #15]
		CanMsg_CenLocState_Tx.frame.data7 = 0;
 800450a:	4b62      	ldr	r3, [pc, #392]	; (8004694 <Can_TransmitEcuState+0x448>)
 800450c:	2200      	movs	r2, #0
 800450e:	741a      	strb	r2, [r3, #16]
		if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
 8004510:	4b61      	ldr	r3, [pc, #388]	; (8004698 <Can_TransmitEcuState+0x44c>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d118      	bne.n	800454a <Can_TransmitEcuState+0x2fe>
		{
			CanMsg_CenLocState_Tx.frame.data0 = 0;
 8004518:	4b5e      	ldr	r3, [pc, #376]	; (8004694 <Can_TransmitEcuState+0x448>)
 800451a:	2200      	movs	r2, #0
 800451c:	725a      	strb	r2, [r3, #9]
			CanMsg_CenLocState_Tx.frame.data1 = 0xB;
 800451e:	4b5d      	ldr	r3, [pc, #372]	; (8004694 <Can_TransmitEcuState+0x448>)
 8004520:	220b      	movs	r2, #11
 8004522:	729a      	strb	r2, [r3, #10]
			CanMsg_CenLocState_Tx.frame.data2 = 0;
 8004524:	4b5b      	ldr	r3, [pc, #364]	; (8004694 <Can_TransmitEcuState+0x448>)
 8004526:	2200      	movs	r2, #0
 8004528:	72da      	strb	r2, [r3, #11]
			CanMsg_CenLocState_Tx.frame.data3 = 0;
 800452a:	4b5a      	ldr	r3, [pc, #360]	; (8004694 <Can_TransmitEcuState+0x448>)
 800452c:	2200      	movs	r2, #0
 800452e:	731a      	strb	r2, [r3, #12]
			CanMsg_CenLocState_Tx.frame.data4 = 0;
 8004530:	4b58      	ldr	r3, [pc, #352]	; (8004694 <Can_TransmitEcuState+0x448>)
 8004532:	2200      	movs	r2, #0
 8004534:	735a      	strb	r2, [r3, #13]
			CanMsg_CenLocState_Tx.frame.data5 = 0;
 8004536:	4b57      	ldr	r3, [pc, #348]	; (8004694 <Can_TransmitEcuState+0x448>)
 8004538:	2200      	movs	r2, #0
 800453a:	739a      	strb	r2, [r3, #14]
			CanMsg_CenLocState_Tx.frame.data6 = 0;
 800453c:	4b55      	ldr	r3, [pc, #340]	; (8004694 <Can_TransmitEcuState+0x448>)
 800453e:	2200      	movs	r2, #0
 8004540:	73da      	strb	r2, [r3, #15]
			CanMsg_CenLocState_Tx.frame.data7 = 0;
 8004542:	4b54      	ldr	r3, [pc, #336]	; (8004694 <Can_TransmitEcuState+0x448>)
 8004544:	2200      	movs	r2, #0
 8004546:	741a      	strb	r2, [r3, #16]
 8004548:	e01b      	b.n	8004582 <Can_TransmitEcuState+0x336>
		}
		else if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW)
 800454a:	4b53      	ldr	r3, [pc, #332]	; (8004698 <Can_TransmitEcuState+0x44c>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d117      	bne.n	8004582 <Can_TransmitEcuState+0x336>
		{
			CanMsg_CenLocState_Tx.frame.data0 = 0;
 8004552:	4b50      	ldr	r3, [pc, #320]	; (8004694 <Can_TransmitEcuState+0x448>)
 8004554:	2200      	movs	r2, #0
 8004556:	725a      	strb	r2, [r3, #9]
			CanMsg_CenLocState_Tx.frame.data1 = 0;
 8004558:	4b4e      	ldr	r3, [pc, #312]	; (8004694 <Can_TransmitEcuState+0x448>)
 800455a:	2200      	movs	r2, #0
 800455c:	729a      	strb	r2, [r3, #10]
			CanMsg_CenLocState_Tx.frame.data2 = 0;
 800455e:	4b4d      	ldr	r3, [pc, #308]	; (8004694 <Can_TransmitEcuState+0x448>)
 8004560:	2200      	movs	r2, #0
 8004562:	72da      	strb	r2, [r3, #11]
			CanMsg_CenLocState_Tx.frame.data3 = 0;
 8004564:	4b4b      	ldr	r3, [pc, #300]	; (8004694 <Can_TransmitEcuState+0x448>)
 8004566:	2200      	movs	r2, #0
 8004568:	731a      	strb	r2, [r3, #12]
			CanMsg_CenLocState_Tx.frame.data4 = 0;
 800456a:	4b4a      	ldr	r3, [pc, #296]	; (8004694 <Can_TransmitEcuState+0x448>)
 800456c:	2200      	movs	r2, #0
 800456e:	735a      	strb	r2, [r3, #13]
			CanMsg_CenLocState_Tx.frame.data5 = 0;
 8004570:	4b48      	ldr	r3, [pc, #288]	; (8004694 <Can_TransmitEcuState+0x448>)
 8004572:	2200      	movs	r2, #0
 8004574:	739a      	strb	r2, [r3, #14]
			CanMsg_CenLocState_Tx.frame.data6 = 0;
 8004576:	4b47      	ldr	r3, [pc, #284]	; (8004694 <Can_TransmitEcuState+0x448>)
 8004578:	2200      	movs	r2, #0
 800457a:	73da      	strb	r2, [r3, #15]
			CanMsg_CenLocState_Tx.frame.data7 = 0;
 800457c:	4b45      	ldr	r3, [pc, #276]	; (8004694 <Can_TransmitEcuState+0x448>)
 800457e:	2200      	movs	r2, #0
 8004580:	741a      	strb	r2, [r3, #16]
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState == STD_HIGH)
 8004582:	4b46      	ldr	r3, [pc, #280]	; (800469c <Can_TransmitEcuState+0x450>)
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d103      	bne.n	8004592 <Can_TransmitEcuState+0x346>
	{
		CanMsg_ExtLightsState_Tx.frame.data1 = 0xC;
 800458a:	4b45      	ldr	r3, [pc, #276]	; (80046a0 <Can_TransmitEcuState+0x454>)
 800458c:	220c      	movs	r2, #12
 800458e:	729a      	strb	r2, [r3, #10]
 8004590:	e006      	b.n	80045a0 <Can_TransmitEcuState+0x354>
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState == STD_LOW)
 8004592:	4b42      	ldr	r3, [pc, #264]	; (800469c <Can_TransmitEcuState+0x450>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d102      	bne.n	80045a0 <Can_TransmitEcuState+0x354>
	{
		CanMsg_ExtLightsState_Tx.frame.data1 = 0;
 800459a:	4b41      	ldr	r3, [pc, #260]	; (80046a0 <Can_TransmitEcuState+0x454>)
 800459c:	2200      	movs	r2, #0
 800459e:	729a      	strb	r2, [r3, #10]
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 80045a0:	4b40      	ldr	r3, [pc, #256]	; (80046a4 <Can_TransmitEcuState+0x458>)
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d103      	bne.n	80045b0 <Can_TransmitEcuState+0x364>
	{
		CanMsg_ExtLightsState_Tx.frame.data2 = 0xB;
 80045a8:	4b3d      	ldr	r3, [pc, #244]	; (80046a0 <Can_TransmitEcuState+0x454>)
 80045aa:	220b      	movs	r2, #11
 80045ac:	72da      	strb	r2, [r3, #11]
 80045ae:	e006      	b.n	80045be <Can_TransmitEcuState+0x372>
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_LOW)
 80045b0:	4b3c      	ldr	r3, [pc, #240]	; (80046a4 <Can_TransmitEcuState+0x458>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d102      	bne.n	80045be <Can_TransmitEcuState+0x372>
	{
		CanMsg_ExtLightsState_Tx.frame.data2 = 0;
 80045b8:	4b39      	ldr	r3, [pc, #228]	; (80046a0 <Can_TransmitEcuState+0x454>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	72da      	strb	r2, [r3, #11]
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 80045be:	4b3a      	ldr	r3, [pc, #232]	; (80046a8 <Can_TransmitEcuState+0x45c>)
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d103      	bne.n	80045ce <Can_TransmitEcuState+0x382>
	{
		CanMsg_ExtLightsState_Tx.frame.data3 = 0xA;
 80045c6:	4b36      	ldr	r3, [pc, #216]	; (80046a0 <Can_TransmitEcuState+0x454>)
 80045c8:	220a      	movs	r2, #10
 80045ca:	731a      	strb	r2, [r3, #12]
 80045cc:	e006      	b.n	80045dc <Can_TransmitEcuState+0x390>
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState == STD_LOW)
 80045ce:	4b36      	ldr	r3, [pc, #216]	; (80046a8 <Can_TransmitEcuState+0x45c>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d102      	bne.n	80045dc <Can_TransmitEcuState+0x390>
	{
		CanMsg_ExtLightsState_Tx.frame.data3 = 0;
 80045d6:	4b32      	ldr	r3, [pc, #200]	; (80046a0 <Can_TransmitEcuState+0x454>)
 80045d8:	2200      	movs	r2, #0
 80045da:	731a      	strb	r2, [r3, #12]
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState == STD_HIGH)
 80045dc:	4b33      	ldr	r3, [pc, #204]	; (80046ac <Can_TransmitEcuState+0x460>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d103      	bne.n	80045ec <Can_TransmitEcuState+0x3a0>
	{
		CanMsg_ExtLightsState_Tx.frame.data4 = 0x9;
 80045e4:	4b2e      	ldr	r3, [pc, #184]	; (80046a0 <Can_TransmitEcuState+0x454>)
 80045e6:	2209      	movs	r2, #9
 80045e8:	735a      	strb	r2, [r3, #13]
 80045ea:	e006      	b.n	80045fa <Can_TransmitEcuState+0x3ae>
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState == STD_LOW)
 80045ec:	4b2f      	ldr	r3, [pc, #188]	; (80046ac <Can_TransmitEcuState+0x460>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d102      	bne.n	80045fa <Can_TransmitEcuState+0x3ae>
	{
		CanMsg_ExtLightsState_Tx.frame.data4 = 0;
 80045f4:	4b2a      	ldr	r3, [pc, #168]	; (80046a0 <Can_TransmitEcuState+0x454>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	735a      	strb	r2, [r3, #13]
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_HIGH)
 80045fa:	4b2d      	ldr	r3, [pc, #180]	; (80046b0 <Can_TransmitEcuState+0x464>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d103      	bne.n	800460a <Can_TransmitEcuState+0x3be>
	{
		CanMsg_ExtLightsState_Tx.frame.data5 = 0x8;
 8004602:	4b27      	ldr	r3, [pc, #156]	; (80046a0 <Can_TransmitEcuState+0x454>)
 8004604:	2208      	movs	r2, #8
 8004606:	739a      	strb	r2, [r3, #14]
 8004608:	e006      	b.n	8004618 <Can_TransmitEcuState+0x3cc>
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_LOW)
 800460a:	4b29      	ldr	r3, [pc, #164]	; (80046b0 <Can_TransmitEcuState+0x464>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d102      	bne.n	8004618 <Can_TransmitEcuState+0x3cc>
	{
		CanMsg_ExtLightsState_Tx.frame.data5 = 0;
 8004612:	4b23      	ldr	r3, [pc, #140]	; (80046a0 <Can_TransmitEcuState+0x454>)
 8004614:	2200      	movs	r2, #0
 8004616:	739a      	strb	r2, [r3, #14]
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState == STD_HIGH)
 8004618:	4b26      	ldr	r3, [pc, #152]	; (80046b4 <Can_TransmitEcuState+0x468>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d103      	bne.n	8004628 <Can_TransmitEcuState+0x3dc>
	{
		CanMsg_ExtLightsState_Tx.frame.data6 = 0x7;
 8004620:	4b1f      	ldr	r3, [pc, #124]	; (80046a0 <Can_TransmitEcuState+0x454>)
 8004622:	2207      	movs	r2, #7
 8004624:	73da      	strb	r2, [r3, #15]
 8004626:	e006      	b.n	8004636 <Can_TransmitEcuState+0x3ea>
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState == STD_LOW)
 8004628:	4b22      	ldr	r3, [pc, #136]	; (80046b4 <Can_TransmitEcuState+0x468>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d102      	bne.n	8004636 <Can_TransmitEcuState+0x3ea>
	{
		CanMsg_ExtLightsState_Tx.frame.data6 = 0;
 8004630:	4b1b      	ldr	r3, [pc, #108]	; (80046a0 <Can_TransmitEcuState+0x454>)
 8004632:	2200      	movs	r2, #0
 8004634:	73da      	strb	r2, [r3, #15]
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState == RTE_P_EXTLIGHTS_LIGHTSWITCH_STATEZERO)
 8004636:	4b20      	ldr	r3, [pc, #128]	; (80046b8 <Can_TransmitEcuState+0x46c>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b17      	cmp	r3, #23
 800463c:	d103      	bne.n	8004646 <Can_TransmitEcuState+0x3fa>
	{
		CanMsg_ExtLightsState_Tx.frame.data0 = 0x10;
 800463e:	4b18      	ldr	r3, [pc, #96]	; (80046a0 <Can_TransmitEcuState+0x454>)
 8004640:	2210      	movs	r2, #16
 8004642:	725a      	strb	r2, [r3, #9]
 8004644:	e016      	b.n	8004674 <Can_TransmitEcuState+0x428>
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState == RTE_P_EXTLIGHTS_LIGHTSWITCH_STATEONE)
 8004646:	4b1c      	ldr	r3, [pc, #112]	; (80046b8 <Can_TransmitEcuState+0x46c>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b18      	cmp	r3, #24
 800464c:	d103      	bne.n	8004656 <Can_TransmitEcuState+0x40a>
	{
		CanMsg_ExtLightsState_Tx.frame.data0 = 0x11;
 800464e:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <Can_TransmitEcuState+0x454>)
 8004650:	2211      	movs	r2, #17
 8004652:	725a      	strb	r2, [r3, #9]
 8004654:	e00e      	b.n	8004674 <Can_TransmitEcuState+0x428>
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState == RTE_P_EXTLIGHTS_LIGHTSWITCH_STATETWO)
 8004656:	4b18      	ldr	r3, [pc, #96]	; (80046b8 <Can_TransmitEcuState+0x46c>)
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	2b19      	cmp	r3, #25
 800465c:	d103      	bne.n	8004666 <Can_TransmitEcuState+0x41a>
	{
		CanMsg_ExtLightsState_Tx.frame.data0 = 0x12;
 800465e:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <Can_TransmitEcuState+0x454>)
 8004660:	2212      	movs	r2, #18
 8004662:	725a      	strb	r2, [r3, #9]
 8004664:	e006      	b.n	8004674 <Can_TransmitEcuState+0x428>
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState == RTE_P_EXTLIGHTS_LIGHTSWITCH_STATETHREE)
 8004666:	4b14      	ldr	r3, [pc, #80]	; (80046b8 <Can_TransmitEcuState+0x46c>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b1a      	cmp	r3, #26
 800466c:	d102      	bne.n	8004674 <Can_TransmitEcuState+0x428>
	{
		CanMsg_ExtLightsState_Tx.frame.data0 = 0x13;
 800466e:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <Can_TransmitEcuState+0x454>)
 8004670:	2213      	movs	r2, #19
 8004672:	725a      	strb	r2, [r3, #9]
	else
	{
		/* do nothing */
	}

	CanOverSpi_Transmit((uCAN_MSG*)&CanMsg_EcuState_Tx);
 8004674:	4811      	ldr	r0, [pc, #68]	; (80046bc <Can_TransmitEcuState+0x470>)
 8004676:	f00c fc57 	bl	8010f28 <CanOverSpi_Transmit>
	CanOverSpi_Transmit((uCAN_MSG*)&CanMsg_BtcState_Tx);
 800467a:	4811      	ldr	r0, [pc, #68]	; (80046c0 <Can_TransmitEcuState+0x474>)
 800467c:	f00c fc54 	bl	8010f28 <CanOverSpi_Transmit>
	CanOverSpi_Transmit((uCAN_MSG*)&CanMsg_CenLocState_Tx);
 8004680:	4804      	ldr	r0, [pc, #16]	; (8004694 <Can_TransmitEcuState+0x448>)
 8004682:	f00c fc51 	bl	8010f28 <CanOverSpi_Transmit>
	CanOverSpi_Transmit((uCAN_MSG*)&CanMsg_ExtLightsState_Tx);
 8004686:	4806      	ldr	r0, [pc, #24]	; (80046a0 <Can_TransmitEcuState+0x454>)
 8004688:	f00c fc4e 	bl	8010f28 <CanOverSpi_Transmit>
}
 800468c:	bf00      	nop
 800468e:	bd80      	pop	{r7, pc}
 8004690:	20000139 	.word	0x20000139
 8004694:	2000023c 	.word	0x2000023c
 8004698:	2000013b 	.word	0x2000013b
 800469c:	20000182 	.word	0x20000182
 80046a0:	20000250 	.word	0x20000250
 80046a4:	2000017d 	.word	0x2000017d
 80046a8:	2000017e 	.word	0x2000017e
 80046ac:	20000181 	.word	0x20000181
 80046b0:	20000179 	.word	0x20000179
 80046b4:	20000177 	.word	0x20000177
 80046b8:	2000017a 	.word	0x2000017a
 80046bc:	20000264 	.word	0x20000264
 80046c0:	20000228 	.word	0x20000228

080046c4 <Can_ReceiveNetworkMessages>:
/***********************************************************************************
* Function: Can_ReceiveNetworkMessages											   *
* Description: Receive expected messages from the network and process them.		   *
************************************************************************************/
VOID Can_ReceiveNetworkMessages()
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af02      	add	r7, sp, #8
	Can_Receive(CanMsg_Rx);
 80046ca:	4b04      	ldr	r3, [pc, #16]	; (80046dc <Can_ReceiveNetworkMessages+0x18>)
 80046cc:	691a      	ldr	r2, [r3, #16]
 80046ce:	9200      	str	r2, [sp, #0]
 80046d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046d2:	f7ff fda3 	bl	800421c <Can_Receive>
}
 80046d6:	bf00      	nop
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	20000278 	.word	0x20000278

080046e0 <I2cExtEeprom_WriteAll>:
/***********************************************************************************
* Function: I2cExtEeprom_WriteAll										   	       *
* Description: Driver initialization.									           *
************************************************************************************/
VOID I2cExtEeprom_WriteAll()
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
	if(ArrayReadAll[0] != Rte_P_Btc_BtcPort_Btc_IgnitionStepOne)
 80046e4:	4b9b      	ldr	r3, [pc, #620]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 80046e6:	781a      	ldrb	r2, [r3, #0]
 80046e8:	4b9b      	ldr	r3, [pc, #620]	; (8004958 <I2cExtEeprom_WriteAll+0x278>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d009      	beq.n	8004704 <I2cExtEeprom_WriteAll+0x24>
	{
		I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
 80046f0:	2301      	movs	r3, #1
 80046f2:	4a98      	ldr	r2, [pc, #608]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 80046f4:	2100      	movs	r1, #0
 80046f6:	2000      	movs	r0, #0
 80046f8:	f000 fa92 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[0] = Rte_P_Btc_BtcPort_Btc_IgnitionStepOne;
 80046fc:	4b96      	ldr	r3, [pc, #600]	; (8004958 <I2cExtEeprom_WriteAll+0x278>)
 80046fe:	781a      	ldrb	r2, [r3, #0]
 8004700:	4b94      	ldr	r3, [pc, #592]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004702:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[1] != Rte_P_Btc_BtcPort_Btc_IgnitionStepTwo)
 8004704:	4b93      	ldr	r3, [pc, #588]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004706:	785a      	ldrb	r2, [r3, #1]
 8004708:	4b94      	ldr	r3, [pc, #592]	; (800495c <I2cExtEeprom_WriteAll+0x27c>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	429a      	cmp	r2, r3
 800470e:	d009      	beq.n	8004724 <I2cExtEeprom_WriteAll+0x44>
	{
		I2cExtEeprom_Write(0, 1, &ArrayReadAll[1], 1);
 8004710:	2301      	movs	r3, #1
 8004712:	4a93      	ldr	r2, [pc, #588]	; (8004960 <I2cExtEeprom_WriteAll+0x280>)
 8004714:	2101      	movs	r1, #1
 8004716:	2000      	movs	r0, #0
 8004718:	f000 fa82 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[1] = Rte_P_Btc_BtcPort_Btc_IgnitionStepTwo;
 800471c:	4b8f      	ldr	r3, [pc, #572]	; (800495c <I2cExtEeprom_WriteAll+0x27c>)
 800471e:	781a      	ldrb	r2, [r3, #0]
 8004720:	4b8c      	ldr	r3, [pc, #560]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004722:	705a      	strb	r2, [r3, #1]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[2] != Rte_P_Btc_BtcPort_Btc_IgnitionTurnOff)
 8004724:	4b8b      	ldr	r3, [pc, #556]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004726:	789a      	ldrb	r2, [r3, #2]
 8004728:	4b8e      	ldr	r3, [pc, #568]	; (8004964 <I2cExtEeprom_WriteAll+0x284>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d009      	beq.n	8004744 <I2cExtEeprom_WriteAll+0x64>
	{
		I2cExtEeprom_Write(0, 2, &ArrayReadAll[2], 1);
 8004730:	2301      	movs	r3, #1
 8004732:	4a8d      	ldr	r2, [pc, #564]	; (8004968 <I2cExtEeprom_WriteAll+0x288>)
 8004734:	2102      	movs	r1, #2
 8004736:	2000      	movs	r0, #0
 8004738:	f000 fa72 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[2] = Rte_P_Btc_BtcPort_Btc_IgnitionTurnOff;
 800473c:	4b89      	ldr	r3, [pc, #548]	; (8004964 <I2cExtEeprom_WriteAll+0x284>)
 800473e:	781a      	ldrb	r2, [r3, #0]
 8004740:	4b84      	ldr	r3, [pc, #528]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004742:	709a      	strb	r2, [r3, #2]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[3] != Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState)
 8004744:	4b83      	ldr	r3, [pc, #524]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004746:	78da      	ldrb	r2, [r3, #3]
 8004748:	4b88      	ldr	r3, [pc, #544]	; (800496c <I2cExtEeprom_WriteAll+0x28c>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	429a      	cmp	r2, r3
 800474e:	d009      	beq.n	8004764 <I2cExtEeprom_WriteAll+0x84>
	{
		I2cExtEeprom_Write(0, 3, &ArrayReadAll[3], 1);
 8004750:	2301      	movs	r3, #1
 8004752:	4a87      	ldr	r2, [pc, #540]	; (8004970 <I2cExtEeprom_WriteAll+0x290>)
 8004754:	2103      	movs	r1, #3
 8004756:	2000      	movs	r0, #0
 8004758:	f000 fa62 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[3] = Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState;
 800475c:	4b83      	ldr	r3, [pc, #524]	; (800496c <I2cExtEeprom_WriteAll+0x28c>)
 800475e:	781a      	ldrb	r2, [r3, #0]
 8004760:	4b7c      	ldr	r3, [pc, #496]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004762:	70da      	strb	r2, [r3, #3]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[4] != Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState)
 8004764:	4b7b      	ldr	r3, [pc, #492]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004766:	791a      	ldrb	r2, [r3, #4]
 8004768:	4b82      	ldr	r3, [pc, #520]	; (8004974 <I2cExtEeprom_WriteAll+0x294>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d009      	beq.n	8004784 <I2cExtEeprom_WriteAll+0xa4>
	{
		I2cExtEeprom_Write(0, 4, &ArrayReadAll[4], 1);
 8004770:	2301      	movs	r3, #1
 8004772:	4a81      	ldr	r2, [pc, #516]	; (8004978 <I2cExtEeprom_WriteAll+0x298>)
 8004774:	2104      	movs	r1, #4
 8004776:	2000      	movs	r0, #0
 8004778:	f000 fa52 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[4] = Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState;
 800477c:	4b7d      	ldr	r3, [pc, #500]	; (8004974 <I2cExtEeprom_WriteAll+0x294>)
 800477e:	781a      	ldrb	r2, [r3, #0]
 8004780:	4b74      	ldr	r3, [pc, #464]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004782:	711a      	strb	r2, [r3, #4]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[5] != Rte_P_CenLoc_CenLocPort_CenLoc_BlinkCounter)
 8004784:	4b73      	ldr	r3, [pc, #460]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004786:	795a      	ldrb	r2, [r3, #5]
 8004788:	4b7c      	ldr	r3, [pc, #496]	; (800497c <I2cExtEeprom_WriteAll+0x29c>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d009      	beq.n	80047a4 <I2cExtEeprom_WriteAll+0xc4>
	{
		I2cExtEeprom_Write(0, 5, &ArrayReadAll[5], 1);
 8004790:	2301      	movs	r3, #1
 8004792:	4a7b      	ldr	r2, [pc, #492]	; (8004980 <I2cExtEeprom_WriteAll+0x2a0>)
 8004794:	2105      	movs	r1, #5
 8004796:	2000      	movs	r0, #0
 8004798:	f000 fa42 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[5] = Rte_P_CenLoc_CenLocPort_CenLoc_BlinkCounter;
 800479c:	4b77      	ldr	r3, [pc, #476]	; (800497c <I2cExtEeprom_WriteAll+0x29c>)
 800479e:	781a      	ldrb	r2, [r3, #0]
 80047a0:	4b6c      	ldr	r3, [pc, #432]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 80047a2:	715a      	strb	r2, [r3, #5]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[7] != Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter)
 80047a4:	4b6b      	ldr	r3, [pc, #428]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 80047a6:	79da      	ldrb	r2, [r3, #7]
 80047a8:	4b76      	ldr	r3, [pc, #472]	; (8004984 <I2cExtEeprom_WriteAll+0x2a4>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d009      	beq.n	80047c4 <I2cExtEeprom_WriteAll+0xe4>
	{
		I2cExtEeprom_Write(0, 7, &ArrayReadAll[7], 1);
 80047b0:	2301      	movs	r3, #1
 80047b2:	4a75      	ldr	r2, [pc, #468]	; (8004988 <I2cExtEeprom_WriteAll+0x2a8>)
 80047b4:	2107      	movs	r1, #7
 80047b6:	2000      	movs	r0, #0
 80047b8:	f000 fa32 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[7] = Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter;
 80047bc:	4b71      	ldr	r3, [pc, #452]	; (8004984 <I2cExtEeprom_WriteAll+0x2a4>)
 80047be:	781a      	ldrb	r2, [r3, #0]
 80047c0:	4b64      	ldr	r3, [pc, #400]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 80047c2:	71da      	strb	r2, [r3, #7]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[9] != Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag)
 80047c4:	4b63      	ldr	r3, [pc, #396]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 80047c6:	7a5a      	ldrb	r2, [r3, #9]
 80047c8:	4b70      	ldr	r3, [pc, #448]	; (800498c <I2cExtEeprom_WriteAll+0x2ac>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d009      	beq.n	80047e4 <I2cExtEeprom_WriteAll+0x104>
	{
		I2cExtEeprom_Write(0, 9, &ArrayReadAll[9], 1);
 80047d0:	2301      	movs	r3, #1
 80047d2:	4a6f      	ldr	r2, [pc, #444]	; (8004990 <I2cExtEeprom_WriteAll+0x2b0>)
 80047d4:	2109      	movs	r1, #9
 80047d6:	2000      	movs	r0, #0
 80047d8:	f000 fa22 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[9] = Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag;
 80047dc:	4b6b      	ldr	r3, [pc, #428]	; (800498c <I2cExtEeprom_WriteAll+0x2ac>)
 80047de:	781a      	ldrb	r2, [r3, #0]
 80047e0:	4b5c      	ldr	r3, [pc, #368]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 80047e2:	725a      	strb	r2, [r3, #9]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[10] != Rte_P_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState)
 80047e4:	4b5b      	ldr	r3, [pc, #364]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 80047e6:	7a9a      	ldrb	r2, [r3, #10]
 80047e8:	4b6a      	ldr	r3, [pc, #424]	; (8004994 <I2cExtEeprom_WriteAll+0x2b4>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d009      	beq.n	8004804 <I2cExtEeprom_WriteAll+0x124>
	{
		I2cExtEeprom_Write(0, 10, &ArrayReadAll[10], 1);
 80047f0:	2301      	movs	r3, #1
 80047f2:	4a69      	ldr	r2, [pc, #420]	; (8004998 <I2cExtEeprom_WriteAll+0x2b8>)
 80047f4:	210a      	movs	r1, #10
 80047f6:	2000      	movs	r0, #0
 80047f8:	f000 fa12 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[10] = Rte_P_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState;
 80047fc:	4b65      	ldr	r3, [pc, #404]	; (8004994 <I2cExtEeprom_WriteAll+0x2b4>)
 80047fe:	781a      	ldrb	r2, [r3, #0]
 8004800:	4b54      	ldr	r3, [pc, #336]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004802:	729a      	strb	r2, [r3, #10]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[11] != Rte_P_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState)
 8004804:	4b53      	ldr	r3, [pc, #332]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004806:	7ada      	ldrb	r2, [r3, #11]
 8004808:	4b64      	ldr	r3, [pc, #400]	; (800499c <I2cExtEeprom_WriteAll+0x2bc>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	429a      	cmp	r2, r3
 800480e:	d009      	beq.n	8004824 <I2cExtEeprom_WriteAll+0x144>
	{
		I2cExtEeprom_Write(0, 11, &ArrayReadAll[11], 1);
 8004810:	2301      	movs	r3, #1
 8004812:	4a63      	ldr	r2, [pc, #396]	; (80049a0 <I2cExtEeprom_WriteAll+0x2c0>)
 8004814:	210b      	movs	r1, #11
 8004816:	2000      	movs	r0, #0
 8004818:	f000 fa02 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[11] = Rte_P_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState;
 800481c:	4b5f      	ldr	r3, [pc, #380]	; (800499c <I2cExtEeprom_WriteAll+0x2bc>)
 800481e:	781a      	ldrb	r2, [r3, #0]
 8004820:	4b4c      	ldr	r3, [pc, #304]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004822:	72da      	strb	r2, [r3, #11]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[12] != Rte_P_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState)
 8004824:	4b4b      	ldr	r3, [pc, #300]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004826:	7b1a      	ldrb	r2, [r3, #12]
 8004828:	4b5e      	ldr	r3, [pc, #376]	; (80049a4 <I2cExtEeprom_WriteAll+0x2c4>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d009      	beq.n	8004844 <I2cExtEeprom_WriteAll+0x164>
	{
		I2cExtEeprom_Write(0, 12, &ArrayReadAll[12], 1);
 8004830:	2301      	movs	r3, #1
 8004832:	4a5d      	ldr	r2, [pc, #372]	; (80049a8 <I2cExtEeprom_WriteAll+0x2c8>)
 8004834:	210c      	movs	r1, #12
 8004836:	2000      	movs	r0, #0
 8004838:	f000 f9f2 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[12] = Rte_P_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState;
 800483c:	4b59      	ldr	r3, [pc, #356]	; (80049a4 <I2cExtEeprom_WriteAll+0x2c4>)
 800483e:	781a      	ldrb	r2, [r3, #0]
 8004840:	4b44      	ldr	r3, [pc, #272]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004842:	731a      	strb	r2, [r3, #12]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[13] != Rte_P_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState)
 8004844:	4b43      	ldr	r3, [pc, #268]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004846:	7b5a      	ldrb	r2, [r3, #13]
 8004848:	4b58      	ldr	r3, [pc, #352]	; (80049ac <I2cExtEeprom_WriteAll+0x2cc>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d009      	beq.n	8004864 <I2cExtEeprom_WriteAll+0x184>
	{
		I2cExtEeprom_Write(0, 13, &ArrayReadAll[13], 1);
 8004850:	2301      	movs	r3, #1
 8004852:	4a57      	ldr	r2, [pc, #348]	; (80049b0 <I2cExtEeprom_WriteAll+0x2d0>)
 8004854:	210d      	movs	r1, #13
 8004856:	2000      	movs	r0, #0
 8004858:	f000 f9e2 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[13] = Rte_P_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState;
 800485c:	4b53      	ldr	r3, [pc, #332]	; (80049ac <I2cExtEeprom_WriteAll+0x2cc>)
 800485e:	781a      	ldrb	r2, [r3, #0]
 8004860:	4b3c      	ldr	r3, [pc, #240]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004862:	735a      	strb	r2, [r3, #13]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[14] != Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState)
 8004864:	4b3b      	ldr	r3, [pc, #236]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004866:	7b9a      	ldrb	r2, [r3, #14]
 8004868:	4b52      	ldr	r3, [pc, #328]	; (80049b4 <I2cExtEeprom_WriteAll+0x2d4>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	429a      	cmp	r2, r3
 800486e:	d009      	beq.n	8004884 <I2cExtEeprom_WriteAll+0x1a4>
	{
		I2cExtEeprom_Write(0, 14, &ArrayReadAll[14], 1);
 8004870:	2301      	movs	r3, #1
 8004872:	4a51      	ldr	r2, [pc, #324]	; (80049b8 <I2cExtEeprom_WriteAll+0x2d8>)
 8004874:	210e      	movs	r1, #14
 8004876:	2000      	movs	r0, #0
 8004878:	f000 f9d2 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[14] = Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState;
 800487c:	4b4d      	ldr	r3, [pc, #308]	; (80049b4 <I2cExtEeprom_WriteAll+0x2d4>)
 800487e:	781a      	ldrb	r2, [r3, #0]
 8004880:	4b34      	ldr	r3, [pc, #208]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004882:	739a      	strb	r2, [r3, #14]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[15] != Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState)
 8004884:	4b33      	ldr	r3, [pc, #204]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004886:	7bda      	ldrb	r2, [r3, #15]
 8004888:	4b4c      	ldr	r3, [pc, #304]	; (80049bc <I2cExtEeprom_WriteAll+0x2dc>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d009      	beq.n	80048a4 <I2cExtEeprom_WriteAll+0x1c4>
	{
		I2cExtEeprom_Write(0, 15, &ArrayReadAll[15], 1);
 8004890:	2301      	movs	r3, #1
 8004892:	4a4b      	ldr	r2, [pc, #300]	; (80049c0 <I2cExtEeprom_WriteAll+0x2e0>)
 8004894:	210f      	movs	r1, #15
 8004896:	2000      	movs	r0, #0
 8004898:	f000 f9c2 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[15] = Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState;
 800489c:	4b47      	ldr	r3, [pc, #284]	; (80049bc <I2cExtEeprom_WriteAll+0x2dc>)
 800489e:	781a      	ldrb	r2, [r3, #0]
 80048a0:	4b2c      	ldr	r3, [pc, #176]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 80048a2:	73da      	strb	r2, [r3, #15]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[16] != Rte_P_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState)
 80048a4:	4b2b      	ldr	r3, [pc, #172]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 80048a6:	7c1a      	ldrb	r2, [r3, #16]
 80048a8:	4b46      	ldr	r3, [pc, #280]	; (80049c4 <I2cExtEeprom_WriteAll+0x2e4>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d009      	beq.n	80048c4 <I2cExtEeprom_WriteAll+0x1e4>
	{
		I2cExtEeprom_Write(0, 16, &ArrayReadAll[16], 1);
 80048b0:	2301      	movs	r3, #1
 80048b2:	4a45      	ldr	r2, [pc, #276]	; (80049c8 <I2cExtEeprom_WriteAll+0x2e8>)
 80048b4:	2110      	movs	r1, #16
 80048b6:	2000      	movs	r0, #0
 80048b8:	f000 f9b2 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[16] = Rte_P_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState;
 80048bc:	4b41      	ldr	r3, [pc, #260]	; (80049c4 <I2cExtEeprom_WriteAll+0x2e4>)
 80048be:	781a      	ldrb	r2, [r3, #0]
 80048c0:	4b24      	ldr	r3, [pc, #144]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 80048c2:	741a      	strb	r2, [r3, #16]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[17] != Rte_P_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState)
 80048c4:	4b23      	ldr	r3, [pc, #140]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 80048c6:	7c5a      	ldrb	r2, [r3, #17]
 80048c8:	4b40      	ldr	r3, [pc, #256]	; (80049cc <I2cExtEeprom_WriteAll+0x2ec>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d009      	beq.n	80048e4 <I2cExtEeprom_WriteAll+0x204>
	{
		I2cExtEeprom_Write(0, 17, &ArrayReadAll[17], 1);
 80048d0:	2301      	movs	r3, #1
 80048d2:	4a3f      	ldr	r2, [pc, #252]	; (80049d0 <I2cExtEeprom_WriteAll+0x2f0>)
 80048d4:	2111      	movs	r1, #17
 80048d6:	2000      	movs	r0, #0
 80048d8:	f000 f9a2 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[17] = Rte_P_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState;
 80048dc:	4b3b      	ldr	r3, [pc, #236]	; (80049cc <I2cExtEeprom_WriteAll+0x2ec>)
 80048de:	781a      	ldrb	r2, [r3, #0]
 80048e0:	4b1c      	ldr	r3, [pc, #112]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 80048e2:	745a      	strb	r2, [r3, #17]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[18] != Rte_P_ExtLights_ExtLightsPort_ExtLights_RTS_PrevState)
 80048e4:	4b1b      	ldr	r3, [pc, #108]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 80048e6:	7c9a      	ldrb	r2, [r3, #18]
 80048e8:	4b3a      	ldr	r3, [pc, #232]	; (80049d4 <I2cExtEeprom_WriteAll+0x2f4>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d009      	beq.n	8004904 <I2cExtEeprom_WriteAll+0x224>
	{
		I2cExtEeprom_Write(0, 18, &ArrayReadAll[18], 1);
 80048f0:	2301      	movs	r3, #1
 80048f2:	4a39      	ldr	r2, [pc, #228]	; (80049d8 <I2cExtEeprom_WriteAll+0x2f8>)
 80048f4:	2112      	movs	r1, #18
 80048f6:	2000      	movs	r0, #0
 80048f8:	f000 f992 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[18] = Rte_P_ExtLights_ExtLightsPort_ExtLights_RTS_PrevState;
 80048fc:	4b35      	ldr	r3, [pc, #212]	; (80049d4 <I2cExtEeprom_WriteAll+0x2f4>)
 80048fe:	781a      	ldrb	r2, [r3, #0]
 8004900:	4b14      	ldr	r3, [pc, #80]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004902:	749a      	strb	r2, [r3, #18]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[19] != Rte_P_ExtLights_ExtLightsPort_ExtLights_LTS_PrevState)
 8004904:	4b13      	ldr	r3, [pc, #76]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004906:	7cda      	ldrb	r2, [r3, #19]
 8004908:	4b34      	ldr	r3, [pc, #208]	; (80049dc <I2cExtEeprom_WriteAll+0x2fc>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	429a      	cmp	r2, r3
 800490e:	d009      	beq.n	8004924 <I2cExtEeprom_WriteAll+0x244>
	{
		I2cExtEeprom_Write(0, 19, &ArrayReadAll[19], 1);
 8004910:	2301      	movs	r3, #1
 8004912:	4a33      	ldr	r2, [pc, #204]	; (80049e0 <I2cExtEeprom_WriteAll+0x300>)
 8004914:	2113      	movs	r1, #19
 8004916:	2000      	movs	r0, #0
 8004918:	f000 f982 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[19] = Rte_P_ExtLights_ExtLightsPort_ExtLights_LTS_PrevState;
 800491c:	4b2f      	ldr	r3, [pc, #188]	; (80049dc <I2cExtEeprom_WriteAll+0x2fc>)
 800491e:	781a      	ldrb	r2, [r3, #0]
 8004920:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004922:	74da      	strb	r2, [r3, #19]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[20] != Rte_P_ExtLights_ExtLightsPort_ExtLights_HL_PrevState)
 8004924:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004926:	7d1a      	ldrb	r2, [r3, #20]
 8004928:	4b2e      	ldr	r3, [pc, #184]	; (80049e4 <I2cExtEeprom_WriteAll+0x304>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d009      	beq.n	8004944 <I2cExtEeprom_WriteAll+0x264>
	{
		I2cExtEeprom_Write(0, 20, &ArrayReadAll[20], 1);
 8004930:	2301      	movs	r3, #1
 8004932:	4a2d      	ldr	r2, [pc, #180]	; (80049e8 <I2cExtEeprom_WriteAll+0x308>)
 8004934:	2114      	movs	r1, #20
 8004936:	2000      	movs	r0, #0
 8004938:	f000 f972 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[20] = Rte_P_ExtLights_ExtLightsPort_ExtLights_HL_PrevState;
 800493c:	4b29      	ldr	r3, [pc, #164]	; (80049e4 <I2cExtEeprom_WriteAll+0x304>)
 800493e:	781a      	ldrb	r2, [r3, #0]
 8004940:	4b04      	ldr	r3, [pc, #16]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004942:	751a      	strb	r2, [r3, #20]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[21] != Rte_P_ExtLights_ExtLightsPort_ExtLights_RTSFlag)
 8004944:	4b03      	ldr	r3, [pc, #12]	; (8004954 <I2cExtEeprom_WriteAll+0x274>)
 8004946:	7d5b      	ldrb	r3, [r3, #21]
 8004948:	461a      	mov	r2, r3
 800494a:	4b28      	ldr	r3, [pc, #160]	; (80049ec <I2cExtEeprom_WriteAll+0x30c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d059      	beq.n	8004a06 <I2cExtEeprom_WriteAll+0x326>
 8004952:	e04d      	b.n	80049f0 <I2cExtEeprom_WriteAll+0x310>
 8004954:	20000290 	.word	0x20000290
 8004958:	20000103 	.word	0x20000103
 800495c:	20000104 	.word	0x20000104
 8004960:	20000291 	.word	0x20000291
 8004964:	20000105 	.word	0x20000105
 8004968:	20000292 	.word	0x20000292
 800496c:	20000139 	.word	0x20000139
 8004970:	20000293 	.word	0x20000293
 8004974:	2000013c 	.word	0x2000013c
 8004978:	20000294 	.word	0x20000294
 800497c:	2000013d 	.word	0x2000013d
 8004980:	20000295 	.word	0x20000295
 8004984:	2000013f 	.word	0x2000013f
 8004988:	20000297 	.word	0x20000297
 800498c:	20000141 	.word	0x20000141
 8004990:	20000299 	.word	0x20000299
 8004994:	20000177 	.word	0x20000177
 8004998:	2000029a 	.word	0x2000029a
 800499c:	2000017a 	.word	0x2000017a
 80049a0:	2000029b 	.word	0x2000029b
 80049a4:	2000017b 	.word	0x2000017b
 80049a8:	2000029c 	.word	0x2000029c
 80049ac:	2000017c 	.word	0x2000017c
 80049b0:	2000029d 	.word	0x2000029d
 80049b4:	2000017d 	.word	0x2000017d
 80049b8:	2000029e 	.word	0x2000029e
 80049bc:	2000017e 	.word	0x2000017e
 80049c0:	2000029f 	.word	0x2000029f
 80049c4:	20000181 	.word	0x20000181
 80049c8:	200002a0 	.word	0x200002a0
 80049cc:	20000182 	.word	0x20000182
 80049d0:	200002a1 	.word	0x200002a1
 80049d4:	20000183 	.word	0x20000183
 80049d8:	200002a2 	.word	0x200002a2
 80049dc:	20000184 	.word	0x20000184
 80049e0:	200002a3 	.word	0x200002a3
 80049e4:	20000185 	.word	0x20000185
 80049e8:	200002a4 	.word	0x200002a4
 80049ec:	20000188 	.word	0x20000188
	{
		I2cExtEeprom_Write(0, 21, &ArrayReadAll[21], 1);
 80049f0:	2301      	movs	r3, #1
 80049f2:	4a61      	ldr	r2, [pc, #388]	; (8004b78 <I2cExtEeprom_WriteAll+0x498>)
 80049f4:	2115      	movs	r1, #21
 80049f6:	2000      	movs	r0, #0
 80049f8:	f000 f912 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[21] = Rte_P_ExtLights_ExtLightsPort_ExtLights_RTSFlag;
 80049fc:	4b5f      	ldr	r3, [pc, #380]	; (8004b7c <I2cExtEeprom_WriteAll+0x49c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	4b5f      	ldr	r3, [pc, #380]	; (8004b80 <I2cExtEeprom_WriteAll+0x4a0>)
 8004a04:	755a      	strb	r2, [r3, #21]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[22] != Rte_P_ExtLights_ExtLightsPort_ExtLights_LTSFlag)
 8004a06:	4b5e      	ldr	r3, [pc, #376]	; (8004b80 <I2cExtEeprom_WriteAll+0x4a0>)
 8004a08:	7d9b      	ldrb	r3, [r3, #22]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	4b5d      	ldr	r3, [pc, #372]	; (8004b84 <I2cExtEeprom_WriteAll+0x4a4>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d00a      	beq.n	8004a2a <I2cExtEeprom_WriteAll+0x34a>
	{
		I2cExtEeprom_Write(0, 22, &ArrayReadAll[22], 1);
 8004a14:	2301      	movs	r3, #1
 8004a16:	4a5c      	ldr	r2, [pc, #368]	; (8004b88 <I2cExtEeprom_WriteAll+0x4a8>)
 8004a18:	2116      	movs	r1, #22
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	f000 f900 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[22] = Rte_P_ExtLights_ExtLightsPort_ExtLights_LTSFlag;
 8004a20:	4b58      	ldr	r3, [pc, #352]	; (8004b84 <I2cExtEeprom_WriteAll+0x4a4>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	4b56      	ldr	r3, [pc, #344]	; (8004b80 <I2cExtEeprom_WriteAll+0x4a0>)
 8004a28:	759a      	strb	r2, [r3, #22]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[23] != Rte_P_ExtLights_ExtLightsPort_ExtLights_HLFlag)
 8004a2a:	4b55      	ldr	r3, [pc, #340]	; (8004b80 <I2cExtEeprom_WriteAll+0x4a0>)
 8004a2c:	7ddb      	ldrb	r3, [r3, #23]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	4b56      	ldr	r3, [pc, #344]	; (8004b8c <I2cExtEeprom_WriteAll+0x4ac>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d00a      	beq.n	8004a4e <I2cExtEeprom_WriteAll+0x36e>
	{
		I2cExtEeprom_Write(0, 23, &ArrayReadAll[23], 1);
 8004a38:	2301      	movs	r3, #1
 8004a3a:	4a55      	ldr	r2, [pc, #340]	; (8004b90 <I2cExtEeprom_WriteAll+0x4b0>)
 8004a3c:	2117      	movs	r1, #23
 8004a3e:	2000      	movs	r0, #0
 8004a40:	f000 f8ee 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[23] = Rte_P_ExtLights_ExtLightsPort_ExtLights_HLFlag;
 8004a44:	4b51      	ldr	r3, [pc, #324]	; (8004b8c <I2cExtEeprom_WriteAll+0x4ac>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	4b4d      	ldr	r3, [pc, #308]	; (8004b80 <I2cExtEeprom_WriteAll+0x4a0>)
 8004a4c:	75da      	strb	r2, [r3, #23]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[24] != Rte_P_Hvac_HvacPort_Hvac_CurrentState)
 8004a4e:	4b4c      	ldr	r3, [pc, #304]	; (8004b80 <I2cExtEeprom_WriteAll+0x4a0>)
 8004a50:	7e1a      	ldrb	r2, [r3, #24]
 8004a52:	4b50      	ldr	r3, [pc, #320]	; (8004b94 <I2cExtEeprom_WriteAll+0x4b4>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d009      	beq.n	8004a6e <I2cExtEeprom_WriteAll+0x38e>
	{
		I2cExtEeprom_Write(0, 24, &ArrayReadAll[24], 1);
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	4a4e      	ldr	r2, [pc, #312]	; (8004b98 <I2cExtEeprom_WriteAll+0x4b8>)
 8004a5e:	2118      	movs	r1, #24
 8004a60:	2000      	movs	r0, #0
 8004a62:	f000 f8dd 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[24] = Rte_P_Hvac_HvacPort_Hvac_CurrentState;
 8004a66:	4b4b      	ldr	r3, [pc, #300]	; (8004b94 <I2cExtEeprom_WriteAll+0x4b4>)
 8004a68:	781a      	ldrb	r2, [r3, #0]
 8004a6a:	4b45      	ldr	r3, [pc, #276]	; (8004b80 <I2cExtEeprom_WriteAll+0x4a0>)
 8004a6c:	761a      	strb	r2, [r3, #24]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[25] != Rte_P_Hvac_HvacPort_Hvac_FanValue)
 8004a6e:	4b44      	ldr	r3, [pc, #272]	; (8004b80 <I2cExtEeprom_WriteAll+0x4a0>)
 8004a70:	7e5a      	ldrb	r2, [r3, #25]
 8004a72:	4b4a      	ldr	r3, [pc, #296]	; (8004b9c <I2cExtEeprom_WriteAll+0x4bc>)
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d009      	beq.n	8004a8e <I2cExtEeprom_WriteAll+0x3ae>
	{
		I2cExtEeprom_Write(0, 25, &ArrayReadAll[25], 1);
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	4a48      	ldr	r2, [pc, #288]	; (8004ba0 <I2cExtEeprom_WriteAll+0x4c0>)
 8004a7e:	2119      	movs	r1, #25
 8004a80:	2000      	movs	r0, #0
 8004a82:	f000 f8cd 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[25] = Rte_P_Hvac_HvacPort_Hvac_FanValue;
 8004a86:	4b45      	ldr	r3, [pc, #276]	; (8004b9c <I2cExtEeprom_WriteAll+0x4bc>)
 8004a88:	781a      	ldrb	r2, [r3, #0]
 8004a8a:	4b3d      	ldr	r3, [pc, #244]	; (8004b80 <I2cExtEeprom_WriteAll+0x4a0>)
 8004a8c:	765a      	strb	r2, [r3, #25]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[26] != Rte_P_Hvac_HvacPort_Hvac_TemperatureValue)
 8004a8e:	4b3c      	ldr	r3, [pc, #240]	; (8004b80 <I2cExtEeprom_WriteAll+0x4a0>)
 8004a90:	7e9a      	ldrb	r2, [r3, #26]
 8004a92:	4b44      	ldr	r3, [pc, #272]	; (8004ba4 <I2cExtEeprom_WriteAll+0x4c4>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d009      	beq.n	8004aae <I2cExtEeprom_WriteAll+0x3ce>
	{
		I2cExtEeprom_Write(0, 26, &ArrayReadAll[26], 1);
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	4a42      	ldr	r2, [pc, #264]	; (8004ba8 <I2cExtEeprom_WriteAll+0x4c8>)
 8004a9e:	211a      	movs	r1, #26
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	f000 f8bd 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[26] = Rte_P_Hvac_HvacPort_Hvac_TemperatureValue;
 8004aa6:	4b3f      	ldr	r3, [pc, #252]	; (8004ba4 <I2cExtEeprom_WriteAll+0x4c4>)
 8004aa8:	781a      	ldrb	r2, [r3, #0]
 8004aaa:	4b35      	ldr	r3, [pc, #212]	; (8004b80 <I2cExtEeprom_WriteAll+0x4a0>)
 8004aac:	769a      	strb	r2, [r3, #26]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[27] != Rte_P_Hvac_HvacPort_Hvac_LegVent)
 8004aae:	4b34      	ldr	r3, [pc, #208]	; (8004b80 <I2cExtEeprom_WriteAll+0x4a0>)
 8004ab0:	7eda      	ldrb	r2, [r3, #27]
 8004ab2:	4b3e      	ldr	r3, [pc, #248]	; (8004bac <I2cExtEeprom_WriteAll+0x4cc>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d009      	beq.n	8004ace <I2cExtEeprom_WriteAll+0x3ee>
	{
		I2cExtEeprom_Write(0, 27, &ArrayReadAll[27], 1);
 8004aba:	2301      	movs	r3, #1
 8004abc:	4a3c      	ldr	r2, [pc, #240]	; (8004bb0 <I2cExtEeprom_WriteAll+0x4d0>)
 8004abe:	211b      	movs	r1, #27
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	f000 f8ad 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[27] = Rte_P_Hvac_HvacPort_Hvac_LegVent;
 8004ac6:	4b39      	ldr	r3, [pc, #228]	; (8004bac <I2cExtEeprom_WriteAll+0x4cc>)
 8004ac8:	781a      	ldrb	r2, [r3, #0]
 8004aca:	4b2d      	ldr	r3, [pc, #180]	; (8004b80 <I2cExtEeprom_WriteAll+0x4a0>)
 8004acc:	76da      	strb	r2, [r3, #27]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[28] != Rte_P_Hvac_HvacPort_Hvac_MidVent)
 8004ace:	4b2c      	ldr	r3, [pc, #176]	; (8004b80 <I2cExtEeprom_WriteAll+0x4a0>)
 8004ad0:	7f1a      	ldrb	r2, [r3, #28]
 8004ad2:	4b38      	ldr	r3, [pc, #224]	; (8004bb4 <I2cExtEeprom_WriteAll+0x4d4>)
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d009      	beq.n	8004aee <I2cExtEeprom_WriteAll+0x40e>
	{
		I2cExtEeprom_Write(0, 28, &ArrayReadAll[28], 1);
 8004ada:	2301      	movs	r3, #1
 8004adc:	4a36      	ldr	r2, [pc, #216]	; (8004bb8 <I2cExtEeprom_WriteAll+0x4d8>)
 8004ade:	211c      	movs	r1, #28
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	f000 f89d 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[28] = Rte_P_Hvac_HvacPort_Hvac_MidVent;
 8004ae6:	4b33      	ldr	r3, [pc, #204]	; (8004bb4 <I2cExtEeprom_WriteAll+0x4d4>)
 8004ae8:	781a      	ldrb	r2, [r3, #0]
 8004aea:	4b25      	ldr	r3, [pc, #148]	; (8004b80 <I2cExtEeprom_WriteAll+0x4a0>)
 8004aec:	771a      	strb	r2, [r3, #28]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[29] != Rte_P_Hvac_HvacPort_Hvac_WindshieldVent)
 8004aee:	4b24      	ldr	r3, [pc, #144]	; (8004b80 <I2cExtEeprom_WriteAll+0x4a0>)
 8004af0:	7f5a      	ldrb	r2, [r3, #29]
 8004af2:	4b32      	ldr	r3, [pc, #200]	; (8004bbc <I2cExtEeprom_WriteAll+0x4dc>)
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d009      	beq.n	8004b0e <I2cExtEeprom_WriteAll+0x42e>
	{
		I2cExtEeprom_Write(0, 29, &ArrayReadAll[29], 1);
 8004afa:	2301      	movs	r3, #1
 8004afc:	4a30      	ldr	r2, [pc, #192]	; (8004bc0 <I2cExtEeprom_WriteAll+0x4e0>)
 8004afe:	211d      	movs	r1, #29
 8004b00:	2000      	movs	r0, #0
 8004b02:	f000 f88d 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[29] = Rte_P_Hvac_HvacPort_Hvac_WindshieldVent;
 8004b06:	4b2d      	ldr	r3, [pc, #180]	; (8004bbc <I2cExtEeprom_WriteAll+0x4dc>)
 8004b08:	781a      	ldrb	r2, [r3, #0]
 8004b0a:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <I2cExtEeprom_WriteAll+0x4a0>)
 8004b0c:	775a      	strb	r2, [r3, #29]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[30] != Rte_P_Hvac_HvacPort_Hvac_WindshieldDefrost)
 8004b0e:	4b1c      	ldr	r3, [pc, #112]	; (8004b80 <I2cExtEeprom_WriteAll+0x4a0>)
 8004b10:	7f9a      	ldrb	r2, [r3, #30]
 8004b12:	4b2c      	ldr	r3, [pc, #176]	; (8004bc4 <I2cExtEeprom_WriteAll+0x4e4>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d009      	beq.n	8004b2e <I2cExtEeprom_WriteAll+0x44e>
	{
		I2cExtEeprom_Write(0, 30, &ArrayReadAll[30], 1);
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	4a2a      	ldr	r2, [pc, #168]	; (8004bc8 <I2cExtEeprom_WriteAll+0x4e8>)
 8004b1e:	211e      	movs	r1, #30
 8004b20:	2000      	movs	r0, #0
 8004b22:	f000 f87d 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[30] = Rte_P_Hvac_HvacPort_Hvac_WindshieldDefrost;
 8004b26:	4b27      	ldr	r3, [pc, #156]	; (8004bc4 <I2cExtEeprom_WriteAll+0x4e4>)
 8004b28:	781a      	ldrb	r2, [r3, #0]
 8004b2a:	4b15      	ldr	r3, [pc, #84]	; (8004b80 <I2cExtEeprom_WriteAll+0x4a0>)
 8004b2c:	779a      	strb	r2, [r3, #30]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[31] != Rte_P_Hvac_HvacPort_Hvac_Ac)
 8004b2e:	4b14      	ldr	r3, [pc, #80]	; (8004b80 <I2cExtEeprom_WriteAll+0x4a0>)
 8004b30:	7fda      	ldrb	r2, [r3, #31]
 8004b32:	4b26      	ldr	r3, [pc, #152]	; (8004bcc <I2cExtEeprom_WriteAll+0x4ec>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d009      	beq.n	8004b4e <I2cExtEeprom_WriteAll+0x46e>
	{
		I2cExtEeprom_Write(0, 31, &ArrayReadAll[31], 1);
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	4a24      	ldr	r2, [pc, #144]	; (8004bd0 <I2cExtEeprom_WriteAll+0x4f0>)
 8004b3e:	211f      	movs	r1, #31
 8004b40:	2000      	movs	r0, #0
 8004b42:	f000 f86d 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[31] = Rte_P_Hvac_HvacPort_Hvac_Ac;
 8004b46:	4b21      	ldr	r3, [pc, #132]	; (8004bcc <I2cExtEeprom_WriteAll+0x4ec>)
 8004b48:	781a      	ldrb	r2, [r3, #0]
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	; (8004b80 <I2cExtEeprom_WriteAll+0x4a0>)
 8004b4c:	77da      	strb	r2, [r3, #31]
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[32] != Rte_P_Hvac_HvacPort_Hvac_AutomaticMode)
 8004b4e:	4b0c      	ldr	r3, [pc, #48]	; (8004b80 <I2cExtEeprom_WriteAll+0x4a0>)
 8004b50:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004b54:	4b1f      	ldr	r3, [pc, #124]	; (8004bd4 <I2cExtEeprom_WriteAll+0x4f4>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d00a      	beq.n	8004b72 <I2cExtEeprom_WriteAll+0x492>
	{
		I2cExtEeprom_Write(0, 32, &ArrayReadAll[32], 1);
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	4a1e      	ldr	r2, [pc, #120]	; (8004bd8 <I2cExtEeprom_WriteAll+0x4f8>)
 8004b60:	2120      	movs	r1, #32
 8004b62:	2000      	movs	r0, #0
 8004b64:	f000 f85c 	bl	8004c20 <I2cExtEeprom_Write>
		ArrayReadAll[32] = Rte_P_Hvac_HvacPort_Hvac_AutomaticMode;
 8004b68:	4b1a      	ldr	r3, [pc, #104]	; (8004bd4 <I2cExtEeprom_WriteAll+0x4f4>)
 8004b6a:	781a      	ldrb	r2, [r3, #0]
 8004b6c:	4b04      	ldr	r3, [pc, #16]	; (8004b80 <I2cExtEeprom_WriteAll+0x4a0>)
 8004b6e:	f883 2020 	strb.w	r2, [r3, #32]
	}
	else
	{
		/* do nothing */
	}
}
 8004b72:	bf00      	nop
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	200002a5 	.word	0x200002a5
 8004b7c:	20000188 	.word	0x20000188
 8004b80:	20000290 	.word	0x20000290
 8004b84:	2000018c 	.word	0x2000018c
 8004b88:	200002a6 	.word	0x200002a6
 8004b8c:	20000190 	.word	0x20000190
 8004b90:	200002a7 	.word	0x200002a7
 8004b94:	200001ae 	.word	0x200001ae
 8004b98:	200002a8 	.word	0x200002a8
 8004b9c:	200001af 	.word	0x200001af
 8004ba0:	200002a9 	.word	0x200002a9
 8004ba4:	200001b0 	.word	0x200001b0
 8004ba8:	200002aa 	.word	0x200002aa
 8004bac:	200001b1 	.word	0x200001b1
 8004bb0:	200002ab 	.word	0x200002ab
 8004bb4:	200001b2 	.word	0x200001b2
 8004bb8:	200002ac 	.word	0x200002ac
 8004bbc:	200001b3 	.word	0x200001b3
 8004bc0:	200002ad 	.word	0x200002ad
 8004bc4:	200001b4 	.word	0x200001b4
 8004bc8:	200002ae 	.word	0x200002ae
 8004bcc:	200001b6 	.word	0x200001b6
 8004bd0:	200002af 	.word	0x200002af
 8004bd4:	200001ba 	.word	0x200001ba
 8004bd8:	200002b0 	.word	0x200002b0

08004bdc <I2cExtEeprom_BytesToWrite>:
/***********************************************************************************
* Function: I2cExtEeprom_BytesToWrite						    		           *
* Description: Returns the bytes that need to be written.					       *
************************************************************************************/
uint16 I2cExtEeprom_BytesToWrite(uint16 size, uint16 offset)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	4603      	mov	r3, r0
 8004be4:	460a      	mov	r2, r1
 8004be6:	80fb      	strh	r3, [r7, #6]
 8004be8:	4613      	mov	r3, r2
 8004bea:	80bb      	strh	r3, [r7, #4]
	/* Returns the number of bytes to write into memory. */
	if((size + offset) < I2C_EXTEEPROM_PAGE_SIZE)
 8004bec:	88fa      	ldrh	r2, [r7, #6]
 8004bee:	88bb      	ldrh	r3, [r7, #4]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	2b3f      	cmp	r3, #63	; 0x3f
 8004bf4:	dc01      	bgt.n	8004bfa <I2cExtEeprom_BytesToWrite+0x1e>
	{
		return size;
 8004bf6:	88fb      	ldrh	r3, [r7, #6]
 8004bf8:	e003      	b.n	8004c02 <I2cExtEeprom_BytesToWrite+0x26>
	}
	else
	{
		return I2C_EXTEEPROM_PAGE_SIZE - offset;
 8004bfa:	88bb      	ldrh	r3, [r7, #4]
 8004bfc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004c00:	b29b      	uxth	r3, r3
	}
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <I2cExtEeprom_DeInit>:
/***********************************************************************************
* Function: I2cExtEeprom_DeInit										   			   *
* Description: Driver de-initialization.									       *
************************************************************************************/
StdReturnType I2cExtEeprom_DeInit()
{
 8004c0e:	b480      	push	{r7}
 8004c10:	af00      	add	r7, sp, #0
	/* De-initialize the driver. */
	return E_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
	...

08004c20 <I2cExtEeprom_Write>:
/***********************************************************************************
* Function: I2cExtEeprom_Write										   			   *
* Description: Driver write to memory function.									   *
************************************************************************************/
VOID I2cExtEeprom_Write(uint16 page, uint16 offset, uint8 *data, uint16 size)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08c      	sub	sp, #48	; 0x30
 8004c24:	af02      	add	r7, sp, #8
 8004c26:	60ba      	str	r2, [r7, #8]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	81fb      	strh	r3, [r7, #14]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	81bb      	strh	r3, [r7, #12]
 8004c32:	4613      	mov	r3, r2
 8004c34:	80fb      	strh	r3, [r7, #6]
	uint32 paddrposition = log(I2C_EXTEEPROM_PAGE_SIZE) / log(2);
 8004c36:	2306      	movs	r3, #6
 8004c38:	61fb      	str	r3, [r7, #28]
	uint16 startPage = page;
 8004c3a:	89fb      	ldrh	r3, [r7, #14]
 8004c3c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16 endPage = page + ((size + offset) / I2C_EXTEEPROM_PAGE_SIZE);
 8004c3e:	88fa      	ldrh	r2, [r7, #6]
 8004c40:	89bb      	ldrh	r3, [r7, #12]
 8004c42:	4413      	add	r3, r2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	da00      	bge.n	8004c4a <I2cExtEeprom_Write+0x2a>
 8004c48:	333f      	adds	r3, #63	; 0x3f
 8004c4a:	119b      	asrs	r3, r3, #6
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	89fb      	ldrh	r3, [r7, #14]
 8004c50:	4413      	add	r3, r2
 8004c52:	837b      	strh	r3, [r7, #26]
	uint16 numofpages = (endPage - startPage) + 1;
 8004c54:	8b7a      	ldrh	r2, [r7, #26]
 8004c56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	833b      	strh	r3, [r7, #24]
	uint16 pos = 0;
 8004c60:	2300      	movs	r3, #0
 8004c62:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (uint8 i = 0; i < numofpages; i++)
 8004c64:	2300      	movs	r3, #0
 8004c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c6a:	e033      	b.n	8004cd4 <I2cExtEeprom_Write+0xb4>
	{
		uint16 MemAddress = startPage << paddrposition | offset;
 8004c6c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	b21a      	sxth	r2, r3
 8004c76:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	b21b      	sxth	r3, r3
 8004c7e:	82fb      	strh	r3, [r7, #22]
		uint16 bytesremaining = I2cExtEeprom_BytesToWrite(size, offset);
 8004c80:	89ba      	ldrh	r2, [r7, #12]
 8004c82:	88fb      	ldrh	r3, [r7, #6]
 8004c84:	4611      	mov	r1, r2
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff ffa8 	bl	8004bdc <I2cExtEeprom_BytesToWrite>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Write_IT(&hi2c3, I2C_EXTEEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining);
 8004c90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	4413      	add	r3, r2
 8004c96:	8af9      	ldrh	r1, [r7, #22]
 8004c98:	8aba      	ldrh	r2, [r7, #20]
 8004c9a:	9201      	str	r2, [sp, #4]
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	460a      	mov	r2, r1
 8004ca2:	21a0      	movs	r1, #160	; 0xa0
 8004ca4:	4811      	ldr	r0, [pc, #68]	; (8004cec <I2cExtEeprom_Write+0xcc>)
 8004ca6:	f005 fb6b 	bl	800a380 <HAL_I2C_Mem_Write_IT>
		startPage = startPage + 1;
 8004caa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004cac:	3301      	adds	r3, #1
 8004cae:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	81bb      	strh	r3, [r7, #12]
		size = size - bytesremaining;
 8004cb4:	88fa      	ldrh	r2, [r7, #6]
 8004cb6:	8abb      	ldrh	r3, [r7, #20]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	80fb      	strh	r3, [r7, #6]
		pos = pos+ bytesremaining;
 8004cbc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004cbe:	8abb      	ldrh	r3, [r7, #20]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	84bb      	strh	r3, [r7, #36]	; 0x24
		HAL_Delay(5);
 8004cc4:	2005      	movs	r0, #5
 8004cc6:	f003 f85b 	bl	8007d80 <HAL_Delay>
	for (uint8 i = 0; i < numofpages; i++)
 8004cca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cce:	3301      	adds	r3, #1
 8004cd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	8b3a      	ldrh	r2, [r7, #24]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d8c5      	bhi.n	8004c6c <I2cExtEeprom_Write+0x4c>
	}
}
 8004ce0:	bf00      	nop
 8004ce2:	bf00      	nop
 8004ce4:	3728      	adds	r7, #40	; 0x28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	200004dc 	.word	0x200004dc

08004cf0 <HAL_I2C_MemTxCpltCallback>:
/***********************************************************************************
* Function: HAL_I2C_MemTxCpltCallback										       *
* Description: Handler memory transmission complete.							   *
************************************************************************************/
VOID HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
	}
	else
	{
		/* do nothing */
	}
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_I2C_MemRxCpltCallback>:
/***********************************************************************************
* Function: HAL_I2C_MemRxCpltCallback										       *
* Description: Handler memory receiving complete.							       *
************************************************************************************/
VOID HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
	}
	else
	{
		/* do nothing */
	}
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_I2C_MasterTxCpltCallback>:
/***********************************************************************************
* Function: HAL_I2C_MasterTxCpltCallback										   *
* Description: Handler master transmission complete.							   *
************************************************************************************/
VOID HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a05      	ldr	r2, [pc, #20]	; (8004d3c <HAL_I2C_MasterTxCpltCallback+0x24>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d104      	bne.n	8004d34 <HAL_I2C_MasterTxCpltCallback+0x1c>
	{
		xTaskResumeFromISR(I2C_ISRHandle);
 8004d2a:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f00f fbf8 	bl	8014524 <xTaskResumeFromISR>
	}
	else
	{
		/* do nothing */
	}
}
 8004d34:	bf00      	nop
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40005400 	.word	0x40005400
 8004d40:	20000430 	.word	0x20000430

08004d44 <HAL_I2C_ErrorCallback>:
/***********************************************************************************
* Function: HAL_I2C_ErrorCallback										   		   *
* Description: Handler error callback.									           *
************************************************************************************/
VOID HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4aca      	ldr	r2, [pc, #808]	; (800507c <HAL_I2C_ErrorCallback+0x338>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	f040 80d5 	bne.w	8004f02 <HAL_I2C_ErrorCallback+0x1be>
	{
		/* Store the fault. */
		uint32 receivedValue = HAL_I2C_GetError(hi2c);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f005 fe29 	bl	800a9b0 <HAL_I2C_GetError>
 8004d5e:	60f8      	str	r0, [r7, #12]
		/* Process the fault. */
		switch(receivedValue)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2b80      	cmp	r3, #128	; 0x80
 8004d64:	f000 80bd 	beq.w	8004ee2 <HAL_I2C_ErrorCallback+0x19e>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b80      	cmp	r3, #128	; 0x80
 8004d6c:	f200 80c8 	bhi.w	8004f00 <HAL_I2C_ErrorCallback+0x1bc>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2b20      	cmp	r3, #32
 8004d74:	d848      	bhi.n	8004e08 <HAL_I2C_ErrorCallback+0xc4>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b20      	cmp	r3, #32
 8004d7a:	f200 80c1 	bhi.w	8004f00 <HAL_I2C_ErrorCallback+0x1bc>
 8004d7e:	a201      	add	r2, pc, #4	; (adr r2, 8004d84 <HAL_I2C_ErrorCallback+0x40>)
 8004d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d84:	08004f01 	.word	0x08004f01
 8004d88:	08004e11 	.word	0x08004e11
 8004d8c:	08004e2f 	.word	0x08004e2f
 8004d90:	08004f01 	.word	0x08004f01
 8004d94:	08004e4d 	.word	0x08004e4d
 8004d98:	08004f01 	.word	0x08004f01
 8004d9c:	08004f01 	.word	0x08004f01
 8004da0:	08004f01 	.word	0x08004f01
 8004da4:	08004e6b 	.word	0x08004e6b
 8004da8:	08004f01 	.word	0x08004f01
 8004dac:	08004f01 	.word	0x08004f01
 8004db0:	08004f01 	.word	0x08004f01
 8004db4:	08004f01 	.word	0x08004f01
 8004db8:	08004f01 	.word	0x08004f01
 8004dbc:	08004f01 	.word	0x08004f01
 8004dc0:	08004f01 	.word	0x08004f01
 8004dc4:	08004e89 	.word	0x08004e89
 8004dc8:	08004f01 	.word	0x08004f01
 8004dcc:	08004f01 	.word	0x08004f01
 8004dd0:	08004f01 	.word	0x08004f01
 8004dd4:	08004f01 	.word	0x08004f01
 8004dd8:	08004f01 	.word	0x08004f01
 8004ddc:	08004f01 	.word	0x08004f01
 8004de0:	08004f01 	.word	0x08004f01
 8004de4:	08004f01 	.word	0x08004f01
 8004de8:	08004f01 	.word	0x08004f01
 8004dec:	08004f01 	.word	0x08004f01
 8004df0:	08004f01 	.word	0x08004f01
 8004df4:	08004f01 	.word	0x08004f01
 8004df8:	08004f01 	.word	0x08004f01
 8004dfc:	08004f01 	.word	0x08004f01
 8004e00:	08004f01 	.word	0x08004f01
 8004e04:	08004ea7 	.word	0x08004ea7
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b40      	cmp	r3, #64	; 0x40
 8004e0c:	d05a      	beq.n	8004ec4 <HAL_I2C_ErrorCallback+0x180>
				SystemManager_Fault[I2C_ERROR_DMA_PARAM_ONE]++;
				I2c_DeInit(I2C_CHANNEL_ONE);
				I2c_Init(I2C_CHANNEL_ONE);
				break;
			default:
				break;
 8004e0e:	e077      	b.n	8004f00 <HAL_I2C_ErrorCallback+0x1bc>
				SystemManager_Fault[I2C_ERROR_BERR_ONE]++;
 8004e10:	4b9b      	ldr	r3, [pc, #620]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8004e12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e16:	3301      	adds	r3, #1
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	4b99      	ldr	r3, [pc, #612]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8004e1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				I2c_DeInit(I2C_CHANNEL_ONE);
 8004e20:	2001      	movs	r0, #1
 8004e22:	f000 f9bf 	bl	80051a4 <I2c_DeInit>
				I2c_Init(I2C_CHANNEL_ONE);
 8004e26:	2001      	movs	r0, #1
 8004e28:	f000 f954 	bl	80050d4 <I2c_Init>
				break;
 8004e2c:	e069      	b.n	8004f02 <HAL_I2C_ErrorCallback+0x1be>
				SystemManager_Fault[I2C_ERROR_ARLO_ONE]++;
 8004e2e:	4b94      	ldr	r3, [pc, #592]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8004e30:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004e34:	3301      	adds	r3, #1
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	4b91      	ldr	r3, [pc, #580]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8004e3a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				I2c_DeInit(I2C_CHANNEL_ONE);
 8004e3e:	2001      	movs	r0, #1
 8004e40:	f000 f9b0 	bl	80051a4 <I2c_DeInit>
				I2c_Init(I2C_CHANNEL_ONE);
 8004e44:	2001      	movs	r0, #1
 8004e46:	f000 f945 	bl	80050d4 <I2c_Init>
				break;
 8004e4a:	e05a      	b.n	8004f02 <HAL_I2C_ErrorCallback+0x1be>
				SystemManager_Fault[I2C_ERROR_AF_ONE]++;
 8004e4c:	4b8c      	ldr	r3, [pc, #560]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8004e4e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004e52:	3301      	adds	r3, #1
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	4b8a      	ldr	r3, [pc, #552]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8004e58:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				I2c_DeInit(I2C_CHANNEL_ONE);
 8004e5c:	2001      	movs	r0, #1
 8004e5e:	f000 f9a1 	bl	80051a4 <I2c_DeInit>
				I2c_Init(I2C_CHANNEL_ONE);
 8004e62:	2001      	movs	r0, #1
 8004e64:	f000 f936 	bl	80050d4 <I2c_Init>
				break;
 8004e68:	e04b      	b.n	8004f02 <HAL_I2C_ErrorCallback+0x1be>
				SystemManager_Fault[I2C_ERROR_OVR_ONE]++;
 8004e6a:	4b85      	ldr	r3, [pc, #532]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8004e6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e70:	3301      	adds	r3, #1
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	4b82      	ldr	r3, [pc, #520]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8004e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				I2c_DeInit(I2C_CHANNEL_ONE);
 8004e7a:	2001      	movs	r0, #1
 8004e7c:	f000 f992 	bl	80051a4 <I2c_DeInit>
				I2c_Init(I2C_CHANNEL_ONE);
 8004e80:	2001      	movs	r0, #1
 8004e82:	f000 f927 	bl	80050d4 <I2c_Init>
				break;
 8004e86:	e03c      	b.n	8004f02 <HAL_I2C_ErrorCallback+0x1be>
				SystemManager_Fault[I2C_ERROR_DMA_ONE]++;
 8004e88:	4b7d      	ldr	r3, [pc, #500]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8004e8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e8e:	3301      	adds	r3, #1
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	4b7b      	ldr	r3, [pc, #492]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8004e94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				I2c_DeInit(I2C_CHANNEL_ONE);
 8004e98:	2001      	movs	r0, #1
 8004e9a:	f000 f983 	bl	80051a4 <I2c_DeInit>
				I2c_Init(I2C_CHANNEL_ONE);
 8004e9e:	2001      	movs	r0, #1
 8004ea0:	f000 f918 	bl	80050d4 <I2c_Init>
				break;
 8004ea4:	e02d      	b.n	8004f02 <HAL_I2C_ErrorCallback+0x1be>
				SystemManager_Fault[I2C_ERROR_TIMEOUT_ONE]++;
 8004ea6:	4b76      	ldr	r3, [pc, #472]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8004ea8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004eac:	3301      	adds	r3, #1
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	4b73      	ldr	r3, [pc, #460]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8004eb2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				I2c_DeInit(I2C_CHANNEL_ONE);
 8004eb6:	2001      	movs	r0, #1
 8004eb8:	f000 f974 	bl	80051a4 <I2c_DeInit>
				I2c_Init(I2C_CHANNEL_ONE);
 8004ebc:	2001      	movs	r0, #1
 8004ebe:	f000 f909 	bl	80050d4 <I2c_Init>
				break;
 8004ec2:	e01e      	b.n	8004f02 <HAL_I2C_ErrorCallback+0x1be>
				SystemManager_Fault[I2C_ERROR_SIZE_ONE]++;
 8004ec4:	4b6e      	ldr	r3, [pc, #440]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8004ec6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004eca:	3301      	adds	r3, #1
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	4b6c      	ldr	r3, [pc, #432]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8004ed0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				I2c_DeInit(I2C_CHANNEL_ONE);
 8004ed4:	2001      	movs	r0, #1
 8004ed6:	f000 f965 	bl	80051a4 <I2c_DeInit>
				I2c_Init(I2C_CHANNEL_ONE);
 8004eda:	2001      	movs	r0, #1
 8004edc:	f000 f8fa 	bl	80050d4 <I2c_Init>
				break;
 8004ee0:	e00f      	b.n	8004f02 <HAL_I2C_ErrorCallback+0x1be>
				SystemManager_Fault[I2C_ERROR_DMA_PARAM_ONE]++;
 8004ee2:	4b67      	ldr	r3, [pc, #412]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8004ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ee8:	3301      	adds	r3, #1
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	4b64      	ldr	r3, [pc, #400]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8004eee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				I2c_DeInit(I2C_CHANNEL_ONE);
 8004ef2:	2001      	movs	r0, #1
 8004ef4:	f000 f956 	bl	80051a4 <I2c_DeInit>
				I2c_Init(I2C_CHANNEL_ONE);
 8004ef8:	2001      	movs	r0, #1
 8004efa:	f000 f8eb 	bl	80050d4 <I2c_Init>
				break;
 8004efe:	e000      	b.n	8004f02 <HAL_I2C_ErrorCallback+0x1be>
				break;
 8004f00:	bf00      	nop
	else
	{
		/* do nothing */
	}

	if(hi2c->Instance == I2C3)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a5f      	ldr	r2, [pc, #380]	; (8005084 <HAL_I2C_ErrorCallback+0x340>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	f040 80dc 	bne.w	80050c6 <HAL_I2C_ErrorCallback+0x382>
	{
		/* Store the fault. */
		uint32 receivedValue = HAL_I2C_GetError(hi2c);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f005 fd4e 	bl	800a9b0 <HAL_I2C_GetError>
 8004f14:	60b8      	str	r0, [r7, #8]
		/* Process the fault. */
		switch(receivedValue)
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2b80      	cmp	r3, #128	; 0x80
 8004f1a:	f000 80c4 	beq.w	80050a6 <HAL_I2C_ErrorCallback+0x362>
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b80      	cmp	r3, #128	; 0x80
 8004f22:	f200 80cf 	bhi.w	80050c4 <HAL_I2C_ErrorCallback+0x380>
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d849      	bhi.n	8004fc0 <HAL_I2C_ErrorCallback+0x27c>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b20      	cmp	r3, #32
 8004f30:	f200 80c8 	bhi.w	80050c4 <HAL_I2C_ErrorCallback+0x380>
 8004f34:	a201      	add	r2, pc, #4	; (adr r2, 8004f3c <HAL_I2C_ErrorCallback+0x1f8>)
 8004f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3a:	bf00      	nop
 8004f3c:	080050c5 	.word	0x080050c5
 8004f40:	08004fc9 	.word	0x08004fc9
 8004f44:	08004fe7 	.word	0x08004fe7
 8004f48:	080050c5 	.word	0x080050c5
 8004f4c:	08005005 	.word	0x08005005
 8004f50:	080050c5 	.word	0x080050c5
 8004f54:	080050c5 	.word	0x080050c5
 8004f58:	080050c5 	.word	0x080050c5
 8004f5c:	08005023 	.word	0x08005023
 8004f60:	080050c5 	.word	0x080050c5
 8004f64:	080050c5 	.word	0x080050c5
 8004f68:	080050c5 	.word	0x080050c5
 8004f6c:	080050c5 	.word	0x080050c5
 8004f70:	080050c5 	.word	0x080050c5
 8004f74:	080050c5 	.word	0x080050c5
 8004f78:	080050c5 	.word	0x080050c5
 8004f7c:	08005041 	.word	0x08005041
 8004f80:	080050c5 	.word	0x080050c5
 8004f84:	080050c5 	.word	0x080050c5
 8004f88:	080050c5 	.word	0x080050c5
 8004f8c:	080050c5 	.word	0x080050c5
 8004f90:	080050c5 	.word	0x080050c5
 8004f94:	080050c5 	.word	0x080050c5
 8004f98:	080050c5 	.word	0x080050c5
 8004f9c:	080050c5 	.word	0x080050c5
 8004fa0:	080050c5 	.word	0x080050c5
 8004fa4:	080050c5 	.word	0x080050c5
 8004fa8:	080050c5 	.word	0x080050c5
 8004fac:	080050c5 	.word	0x080050c5
 8004fb0:	080050c5 	.word	0x080050c5
 8004fb4:	080050c5 	.word	0x080050c5
 8004fb8:	080050c5 	.word	0x080050c5
 8004fbc:	0800505f 	.word	0x0800505f
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b40      	cmp	r3, #64	; 0x40
 8004fc4:	d060      	beq.n	8005088 <HAL_I2C_ErrorCallback+0x344>
				SystemManager_Fault[I2C_ERROR_DMA_PARAM_THREE]++;
				I2c_DeInit(I2C_CHANNEL_THREE);
				I2c_Init(I2C_CHANNEL_THREE);
				break;
			default:
				break;
 8004fc6:	e07d      	b.n	80050c4 <HAL_I2C_ErrorCallback+0x380>
				SystemManager_Fault[I2C_ERROR_BERR_THREE]++;
 8004fc8:	4b2d      	ldr	r3, [pc, #180]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8004fca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004fce:	3301      	adds	r3, #1
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	4b2b      	ldr	r3, [pc, #172]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8004fd4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				I2c_DeInit(I2C_CHANNEL_THREE);
 8004fd8:	2003      	movs	r0, #3
 8004fda:	f000 f8e3 	bl	80051a4 <I2c_DeInit>
				I2c_Init(I2C_CHANNEL_THREE);
 8004fde:	2003      	movs	r0, #3
 8004fe0:	f000 f878 	bl	80050d4 <I2c_Init>
				break;
 8004fe4:	e06f      	b.n	80050c6 <HAL_I2C_ErrorCallback+0x382>
				SystemManager_Fault[I2C_ERROR_ARLO_THREE]++;
 8004fe6:	4b26      	ldr	r3, [pc, #152]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8004fe8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004fec:	3301      	adds	r3, #1
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	4b23      	ldr	r3, [pc, #140]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8004ff2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				I2c_DeInit(I2C_CHANNEL_THREE);
 8004ff6:	2003      	movs	r0, #3
 8004ff8:	f000 f8d4 	bl	80051a4 <I2c_DeInit>
				I2c_Init(I2C_CHANNEL_THREE);
 8004ffc:	2003      	movs	r0, #3
 8004ffe:	f000 f869 	bl	80050d4 <I2c_Init>
				break;
 8005002:	e060      	b.n	80050c6 <HAL_I2C_ErrorCallback+0x382>
				SystemManager_Fault[I2C_ERROR_AF_THREE]++;
 8005004:	4b1e      	ldr	r3, [pc, #120]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8005006:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800500a:	3301      	adds	r3, #1
 800500c:	b2da      	uxtb	r2, r3
 800500e:	4b1c      	ldr	r3, [pc, #112]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8005010:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				I2c_DeInit(I2C_CHANNEL_THREE);
 8005014:	2003      	movs	r0, #3
 8005016:	f000 f8c5 	bl	80051a4 <I2c_DeInit>
				I2c_Init(I2C_CHANNEL_THREE);
 800501a:	2003      	movs	r0, #3
 800501c:	f000 f85a 	bl	80050d4 <I2c_Init>
				break;
 8005020:	e051      	b.n	80050c6 <HAL_I2C_ErrorCallback+0x382>
				SystemManager_Fault[I2C_ERROR_OVR_THREE]++;
 8005022:	4b17      	ldr	r3, [pc, #92]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8005024:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005028:	3301      	adds	r3, #1
 800502a:	b2da      	uxtb	r2, r3
 800502c:	4b14      	ldr	r3, [pc, #80]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 800502e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				I2c_DeInit(I2C_CHANNEL_THREE);
 8005032:	2003      	movs	r0, #3
 8005034:	f000 f8b6 	bl	80051a4 <I2c_DeInit>
				I2c_Init(I2C_CHANNEL_THREE);
 8005038:	2003      	movs	r0, #3
 800503a:	f000 f84b 	bl	80050d4 <I2c_Init>
				break;
 800503e:	e042      	b.n	80050c6 <HAL_I2C_ErrorCallback+0x382>
				SystemManager_Fault[I2C_ERROR_DMA_THREE]++;
 8005040:	4b0f      	ldr	r3, [pc, #60]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8005042:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005046:	3301      	adds	r3, #1
 8005048:	b2da      	uxtb	r2, r3
 800504a:	4b0d      	ldr	r3, [pc, #52]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 800504c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				I2c_DeInit(I2C_CHANNEL_THREE);
 8005050:	2003      	movs	r0, #3
 8005052:	f000 f8a7 	bl	80051a4 <I2c_DeInit>
				I2c_Init(I2C_CHANNEL_THREE);
 8005056:	2003      	movs	r0, #3
 8005058:	f000 f83c 	bl	80050d4 <I2c_Init>
				break;
 800505c:	e033      	b.n	80050c6 <HAL_I2C_ErrorCallback+0x382>
				SystemManager_Fault[I2C_ERROR_TIMEOUT_THREE]++;
 800505e:	4b08      	ldr	r3, [pc, #32]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 8005060:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005064:	3301      	adds	r3, #1
 8005066:	b2da      	uxtb	r2, r3
 8005068:	4b05      	ldr	r3, [pc, #20]	; (8005080 <HAL_I2C_ErrorCallback+0x33c>)
 800506a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				I2c_DeInit(I2C_CHANNEL_THREE);
 800506e:	2003      	movs	r0, #3
 8005070:	f000 f898 	bl	80051a4 <I2c_DeInit>
				I2c_Init(I2C_CHANNEL_THREE);
 8005074:	2003      	movs	r0, #3
 8005076:	f000 f82d 	bl	80050d4 <I2c_Init>
				break;
 800507a:	e024      	b.n	80050c6 <HAL_I2C_ErrorCallback+0x382>
 800507c:	40005400 	.word	0x40005400
 8005080:	2000e638 	.word	0x2000e638
 8005084:	40005c00 	.word	0x40005c00
				SystemManager_Fault[I2C_ERROR_SIZE_THREE]++;
 8005088:	4b11      	ldr	r3, [pc, #68]	; (80050d0 <HAL_I2C_ErrorCallback+0x38c>)
 800508a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800508e:	3301      	adds	r3, #1
 8005090:	b2da      	uxtb	r2, r3
 8005092:	4b0f      	ldr	r3, [pc, #60]	; (80050d0 <HAL_I2C_ErrorCallback+0x38c>)
 8005094:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				I2c_DeInit(I2C_CHANNEL_THREE);
 8005098:	2003      	movs	r0, #3
 800509a:	f000 f883 	bl	80051a4 <I2c_DeInit>
				I2c_Init(I2C_CHANNEL_THREE);
 800509e:	2003      	movs	r0, #3
 80050a0:	f000 f818 	bl	80050d4 <I2c_Init>
				break;
 80050a4:	e00f      	b.n	80050c6 <HAL_I2C_ErrorCallback+0x382>
				SystemManager_Fault[I2C_ERROR_DMA_PARAM_THREE]++;
 80050a6:	4b0a      	ldr	r3, [pc, #40]	; (80050d0 <HAL_I2C_ErrorCallback+0x38c>)
 80050a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050ac:	3301      	adds	r3, #1
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <HAL_I2C_ErrorCallback+0x38c>)
 80050b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				I2c_DeInit(I2C_CHANNEL_THREE);
 80050b6:	2003      	movs	r0, #3
 80050b8:	f000 f874 	bl	80051a4 <I2c_DeInit>
				I2c_Init(I2C_CHANNEL_THREE);
 80050bc:	2003      	movs	r0, #3
 80050be:	f000 f809 	bl	80050d4 <I2c_Init>
				break;
 80050c2:	e000      	b.n	80050c6 <HAL_I2C_ErrorCallback+0x382>
				break;
 80050c4:	bf00      	nop
	}
	else
	{
		/* do nothing */
	}
}
 80050c6:	bf00      	nop
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	2000e638 	.word	0x2000e638

080050d4 <I2c_Init>:
/***********************************************************************************
* Function: I2c_Init										   			           *
* Description: Handler initialization.									           *
************************************************************************************/
StdReturnType I2c_Init(uint8 I2c_Channel)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4603      	mov	r3, r0
 80050dc:	71fb      	strb	r3, [r7, #7]
	/* Initialize the protocol on the respective channel. */
	if(I2c_Channel == I2C_CHANNEL_ONE)
 80050de:	79fb      	ldrb	r3, [r7, #7]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d125      	bne.n	8005130 <I2c_Init+0x5c>
	{
		hi2c1.Instance = I2C1;
 80050e4:	4b29      	ldr	r3, [pc, #164]	; (800518c <I2c_Init+0xb8>)
 80050e6:	4a2a      	ldr	r2, [pc, #168]	; (8005190 <I2c_Init+0xbc>)
 80050e8:	601a      	str	r2, [r3, #0]
		hi2c1.Init.ClockSpeed = 100000;
 80050ea:	4b28      	ldr	r3, [pc, #160]	; (800518c <I2c_Init+0xb8>)
 80050ec:	4a29      	ldr	r2, [pc, #164]	; (8005194 <I2c_Init+0xc0>)
 80050ee:	605a      	str	r2, [r3, #4]
		hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80050f0:	4b26      	ldr	r3, [pc, #152]	; (800518c <I2c_Init+0xb8>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	609a      	str	r2, [r3, #8]
		hi2c1.Init.OwnAddress1 = 0;
 80050f6:	4b25      	ldr	r3, [pc, #148]	; (800518c <I2c_Init+0xb8>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	60da      	str	r2, [r3, #12]
		hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80050fc:	4b23      	ldr	r3, [pc, #140]	; (800518c <I2c_Init+0xb8>)
 80050fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005102:	611a      	str	r2, [r3, #16]
		hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005104:	4b21      	ldr	r3, [pc, #132]	; (800518c <I2c_Init+0xb8>)
 8005106:	2200      	movs	r2, #0
 8005108:	615a      	str	r2, [r3, #20]
		hi2c1.Init.OwnAddress2 = 0;
 800510a:	4b20      	ldr	r3, [pc, #128]	; (800518c <I2c_Init+0xb8>)
 800510c:	2200      	movs	r2, #0
 800510e:	619a      	str	r2, [r3, #24]
		hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005110:	4b1e      	ldr	r3, [pc, #120]	; (800518c <I2c_Init+0xb8>)
 8005112:	2200      	movs	r2, #0
 8005114:	61da      	str	r2, [r3, #28]
		hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005116:	4b1d      	ldr	r3, [pc, #116]	; (800518c <I2c_Init+0xb8>)
 8005118:	2200      	movs	r2, #0
 800511a:	621a      	str	r2, [r3, #32]
		if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800511c:	481b      	ldr	r0, [pc, #108]	; (800518c <I2c_Init+0xb8>)
 800511e:	f004 fecd 	bl	8009ebc <HAL_I2C_Init>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d02b      	beq.n	8005180 <I2c_Init+0xac>
		{
			HAL_I2C_ErrorCallback(&hi2c1);
 8005128:	4818      	ldr	r0, [pc, #96]	; (800518c <I2c_Init+0xb8>)
 800512a:	f7ff fe0b 	bl	8004d44 <HAL_I2C_ErrorCallback>
 800512e:	e027      	b.n	8005180 <I2c_Init+0xac>
		else
		{
			/* do nothing */
		}
	}
	else if(I2c_Channel == I2C_CHANNEL_THREE)
 8005130:	79fb      	ldrb	r3, [r7, #7]
 8005132:	2b03      	cmp	r3, #3
 8005134:	d124      	bne.n	8005180 <I2c_Init+0xac>
	{
		hi2c3.Instance = I2C3;
 8005136:	4b18      	ldr	r3, [pc, #96]	; (8005198 <I2c_Init+0xc4>)
 8005138:	4a18      	ldr	r2, [pc, #96]	; (800519c <I2c_Init+0xc8>)
 800513a:	601a      	str	r2, [r3, #0]
		hi2c3.Init.ClockSpeed = 400000;
 800513c:	4b16      	ldr	r3, [pc, #88]	; (8005198 <I2c_Init+0xc4>)
 800513e:	4a18      	ldr	r2, [pc, #96]	; (80051a0 <I2c_Init+0xcc>)
 8005140:	605a      	str	r2, [r3, #4]
		hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005142:	4b15      	ldr	r3, [pc, #84]	; (8005198 <I2c_Init+0xc4>)
 8005144:	2200      	movs	r2, #0
 8005146:	609a      	str	r2, [r3, #8]
		hi2c3.Init.OwnAddress1 = 0;
 8005148:	4b13      	ldr	r3, [pc, #76]	; (8005198 <I2c_Init+0xc4>)
 800514a:	2200      	movs	r2, #0
 800514c:	60da      	str	r2, [r3, #12]
		hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800514e:	4b12      	ldr	r3, [pc, #72]	; (8005198 <I2c_Init+0xc4>)
 8005150:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005154:	611a      	str	r2, [r3, #16]
		hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005156:	4b10      	ldr	r3, [pc, #64]	; (8005198 <I2c_Init+0xc4>)
 8005158:	2200      	movs	r2, #0
 800515a:	615a      	str	r2, [r3, #20]
		hi2c3.Init.OwnAddress2 = 0;
 800515c:	4b0e      	ldr	r3, [pc, #56]	; (8005198 <I2c_Init+0xc4>)
 800515e:	2200      	movs	r2, #0
 8005160:	619a      	str	r2, [r3, #24]
		hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005162:	4b0d      	ldr	r3, [pc, #52]	; (8005198 <I2c_Init+0xc4>)
 8005164:	2200      	movs	r2, #0
 8005166:	61da      	str	r2, [r3, #28]
		hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005168:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <I2c_Init+0xc4>)
 800516a:	2200      	movs	r2, #0
 800516c:	621a      	str	r2, [r3, #32]
		if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800516e:	480a      	ldr	r0, [pc, #40]	; (8005198 <I2c_Init+0xc4>)
 8005170:	f004 fea4 	bl	8009ebc <HAL_I2C_Init>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <I2c_Init+0xac>
		{
			HAL_I2C_ErrorCallback(&hi2c3);
 800517a:	4807      	ldr	r0, [pc, #28]	; (8005198 <I2c_Init+0xc4>)
 800517c:	f7ff fde2 	bl	8004d44 <HAL_I2C_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	20000458 	.word	0x20000458
 8005190:	40005400 	.word	0x40005400
 8005194:	000186a0 	.word	0x000186a0
 8005198:	200004dc 	.word	0x200004dc
 800519c:	40005c00 	.word	0x40005c00
 80051a0:	00061a80 	.word	0x00061a80

080051a4 <I2c_DeInit>:
/***********************************************************************************
* Function: I2c_DeInit										   			           *
* Description: Handler de-initialization.									       *
************************************************************************************/
StdReturnType I2c_DeInit(uint8 I2c_Channel)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	4603      	mov	r3, r0
 80051ac:	71fb      	strb	r3, [r7, #7]
	/* De-initialize the protocol on the respective channel. */
	if(I2c_Channel == I2C_CHANNEL_ONE)
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d103      	bne.n	80051bc <I2c_DeInit+0x18>
	{
		HAL_I2C_DeInit(&hi2c1);
 80051b4:	4807      	ldr	r0, [pc, #28]	; (80051d4 <I2c_DeInit+0x30>)
 80051b6:	f005 f801 	bl	800a1bc <HAL_I2C_DeInit>
 80051ba:	e005      	b.n	80051c8 <I2c_DeInit+0x24>
	}
	else if(I2c_Channel == I2C_CHANNEL_THREE)
 80051bc:	79fb      	ldrb	r3, [r7, #7]
 80051be:	2b03      	cmp	r3, #3
 80051c0:	d102      	bne.n	80051c8 <I2c_DeInit+0x24>
	{
		HAL_I2C_DeInit(&hi2c3);
 80051c2:	4805      	ldr	r0, [pc, #20]	; (80051d8 <I2c_DeInit+0x34>)
 80051c4:	f004 fffa 	bl	800a1bc <HAL_I2C_DeInit>
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20000458 	.word	0x20000458
 80051d8:	200004dc 	.word	0x200004dc

080051dc <I2c_MainFunction>:
/***********************************************************************************
* Function: I2c_MainFunction										   			   *
* Description: Handler main function.									           *
************************************************************************************/
VOID I2c_MainFunction()
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
	uint32 localStatusOne = HAL_I2C_GetState(&hi2c1);
 80051e2:	488a      	ldr	r0, [pc, #552]	; (800540c <I2c_MainFunction+0x230>)
 80051e4:	f005 fbd6 	bl	800a994 <HAL_I2C_GetState>
 80051e8:	4603      	mov	r3, r0
 80051ea:	607b      	str	r3, [r7, #4]
	uint32 localStatusThree = HAL_I2C_GetState(&hi2c3);
 80051ec:	4888      	ldr	r0, [pc, #544]	; (8005410 <I2c_MainFunction+0x234>)
 80051ee:	f005 fbd1 	bl	800a994 <HAL_I2C_GetState>
 80051f2:	4603      	mov	r3, r0
 80051f4:	603b      	str	r3, [r7, #0]
	//I2cExtEeprom_ReadAll();
	//I2cExtEeprom_WriteAll();
	/* Process channel one. */
	switch(localStatusOne)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2be0      	cmp	r3, #224	; 0xe0
 80051fa:	d077      	beq.n	80052ec <I2c_MainFunction+0x110>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2be0      	cmp	r3, #224	; 0xe0
 8005200:	d87b      	bhi.n	80052fa <I2c_MainFunction+0x11e>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b24      	cmp	r3, #36	; 0x24
 8005206:	d84f      	bhi.n	80052a8 <I2c_MainFunction+0xcc>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b24      	cmp	r3, #36	; 0x24
 800520c:	d875      	bhi.n	80052fa <I2c_MainFunction+0x11e>
 800520e:	a201      	add	r2, pc, #4	; (adr r2, 8005214 <I2c_MainFunction+0x38>)
 8005210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005214:	080052b1 	.word	0x080052b1
 8005218:	080052fb 	.word	0x080052fb
 800521c:	080052fb 	.word	0x080052fb
 8005220:	080052fb 	.word	0x080052fb
 8005224:	080052fb 	.word	0x080052fb
 8005228:	080052fb 	.word	0x080052fb
 800522c:	080052fb 	.word	0x080052fb
 8005230:	080052fb 	.word	0x080052fb
 8005234:	080052fb 	.word	0x080052fb
 8005238:	080052fb 	.word	0x080052fb
 800523c:	080052fb 	.word	0x080052fb
 8005240:	080052fb 	.word	0x080052fb
 8005244:	080052fb 	.word	0x080052fb
 8005248:	080052fb 	.word	0x080052fb
 800524c:	080052fb 	.word	0x080052fb
 8005250:	080052fb 	.word	0x080052fb
 8005254:	080052fb 	.word	0x080052fb
 8005258:	080052fb 	.word	0x080052fb
 800525c:	080052fb 	.word	0x080052fb
 8005260:	080052fb 	.word	0x080052fb
 8005264:	080052fb 	.word	0x080052fb
 8005268:	080052fb 	.word	0x080052fb
 800526c:	080052fb 	.word	0x080052fb
 8005270:	080052fb 	.word	0x080052fb
 8005274:	080052fb 	.word	0x080052fb
 8005278:	080052fb 	.word	0x080052fb
 800527c:	080052fb 	.word	0x080052fb
 8005280:	080052fb 	.word	0x080052fb
 8005284:	080052fb 	.word	0x080052fb
 8005288:	080052fb 	.word	0x080052fb
 800528c:	080052fb 	.word	0x080052fb
 8005290:	080052fb 	.word	0x080052fb
 8005294:	080052bf 	.word	0x080052bf
 8005298:	080052cf 	.word	0x080052cf
 800529c:	080052d7 	.word	0x080052d7
 80052a0:	080052fb 	.word	0x080052fb
 80052a4:	080052c7 	.word	0x080052c7
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2ba0      	cmp	r3, #160	; 0xa0
 80052ac:	d017      	beq.n	80052de <I2c_MainFunction+0x102>
		case HAL_I2C_STATE_ERROR:
			I2c_BswState_ChannelOne = localStatusOne;
			HAL_I2C_ErrorCallback(&hi2c1);
			break;
		default:
			break;
 80052ae:	e024      	b.n	80052fa <I2c_MainFunction+0x11e>
			I2c_BswState_ChannelOne = localStatusOne;
 80052b0:	4a58      	ldr	r2, [pc, #352]	; (8005414 <I2c_MainFunction+0x238>)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6013      	str	r3, [r2, #0]
			I2c_Init(I2C_CHANNEL_ONE);
 80052b6:	2001      	movs	r0, #1
 80052b8:	f7ff ff0c 	bl	80050d4 <I2c_Init>
			break;
 80052bc:	e01e      	b.n	80052fc <I2c_MainFunction+0x120>
			I2c_BswState_ChannelOne = localStatusOne;
 80052be:	4a55      	ldr	r2, [pc, #340]	; (8005414 <I2c_MainFunction+0x238>)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6013      	str	r3, [r2, #0]
			break;
 80052c4:	e01a      	b.n	80052fc <I2c_MainFunction+0x120>
			I2c_BswState_ChannelOne = localStatusOne;
 80052c6:	4a53      	ldr	r2, [pc, #332]	; (8005414 <I2c_MainFunction+0x238>)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6013      	str	r3, [r2, #0]
			break;
 80052cc:	e016      	b.n	80052fc <I2c_MainFunction+0x120>
			I2c_BswState_ChannelOne = localStatusOne;
 80052ce:	4a51      	ldr	r2, [pc, #324]	; (8005414 <I2c_MainFunction+0x238>)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6013      	str	r3, [r2, #0]
			break;
 80052d4:	e012      	b.n	80052fc <I2c_MainFunction+0x120>
			I2c_BswState_ChannelOne = localStatusOne;
 80052d6:	4a4f      	ldr	r2, [pc, #316]	; (8005414 <I2c_MainFunction+0x238>)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6013      	str	r3, [r2, #0]
			break;
 80052dc:	e00e      	b.n	80052fc <I2c_MainFunction+0x120>
			I2c_BswState_ChannelOne = localStatusOne;
 80052de:	4a4d      	ldr	r2, [pc, #308]	; (8005414 <I2c_MainFunction+0x238>)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6013      	str	r3, [r2, #0]
			HAL_I2C_ErrorCallback(&hi2c1);
 80052e4:	4849      	ldr	r0, [pc, #292]	; (800540c <I2c_MainFunction+0x230>)
 80052e6:	f7ff fd2d 	bl	8004d44 <HAL_I2C_ErrorCallback>
			break;
 80052ea:	e007      	b.n	80052fc <I2c_MainFunction+0x120>
			I2c_BswState_ChannelOne = localStatusOne;
 80052ec:	4a49      	ldr	r2, [pc, #292]	; (8005414 <I2c_MainFunction+0x238>)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6013      	str	r3, [r2, #0]
			HAL_I2C_ErrorCallback(&hi2c1);
 80052f2:	4846      	ldr	r0, [pc, #280]	; (800540c <I2c_MainFunction+0x230>)
 80052f4:	f7ff fd26 	bl	8004d44 <HAL_I2C_ErrorCallback>
			break;
 80052f8:	e000      	b.n	80052fc <I2c_MainFunction+0x120>
			break;
 80052fa:	bf00      	nop
	}
	/* Process channel two. */
	switch(localStatusThree)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	2be0      	cmp	r3, #224	; 0xe0
 8005300:	d078      	beq.n	80053f4 <I2c_MainFunction+0x218>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2be0      	cmp	r3, #224	; 0xe0
 8005306:	d87c      	bhi.n	8005402 <I2c_MainFunction+0x226>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b24      	cmp	r3, #36	; 0x24
 800530c:	d850      	bhi.n	80053b0 <I2c_MainFunction+0x1d4>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b24      	cmp	r3, #36	; 0x24
 8005312:	d876      	bhi.n	8005402 <I2c_MainFunction+0x226>
 8005314:	a201      	add	r2, pc, #4	; (adr r2, 800531c <I2c_MainFunction+0x140>)
 8005316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531a:	bf00      	nop
 800531c:	080053b9 	.word	0x080053b9
 8005320:	08005403 	.word	0x08005403
 8005324:	08005403 	.word	0x08005403
 8005328:	08005403 	.word	0x08005403
 800532c:	08005403 	.word	0x08005403
 8005330:	08005403 	.word	0x08005403
 8005334:	08005403 	.word	0x08005403
 8005338:	08005403 	.word	0x08005403
 800533c:	08005403 	.word	0x08005403
 8005340:	08005403 	.word	0x08005403
 8005344:	08005403 	.word	0x08005403
 8005348:	08005403 	.word	0x08005403
 800534c:	08005403 	.word	0x08005403
 8005350:	08005403 	.word	0x08005403
 8005354:	08005403 	.word	0x08005403
 8005358:	08005403 	.word	0x08005403
 800535c:	08005403 	.word	0x08005403
 8005360:	08005403 	.word	0x08005403
 8005364:	08005403 	.word	0x08005403
 8005368:	08005403 	.word	0x08005403
 800536c:	08005403 	.word	0x08005403
 8005370:	08005403 	.word	0x08005403
 8005374:	08005403 	.word	0x08005403
 8005378:	08005403 	.word	0x08005403
 800537c:	08005403 	.word	0x08005403
 8005380:	08005403 	.word	0x08005403
 8005384:	08005403 	.word	0x08005403
 8005388:	08005403 	.word	0x08005403
 800538c:	08005403 	.word	0x08005403
 8005390:	08005403 	.word	0x08005403
 8005394:	08005403 	.word	0x08005403
 8005398:	08005403 	.word	0x08005403
 800539c:	080053c7 	.word	0x080053c7
 80053a0:	080053d7 	.word	0x080053d7
 80053a4:	080053df 	.word	0x080053df
 80053a8:	08005403 	.word	0x08005403
 80053ac:	080053cf 	.word	0x080053cf
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2ba0      	cmp	r3, #160	; 0xa0
 80053b4:	d017      	beq.n	80053e6 <I2c_MainFunction+0x20a>
		case HAL_I2C_STATE_ERROR:
			I2c_BswState_ChannelThree = localStatusThree;
			HAL_I2C_ErrorCallback(&hi2c3);
			break;
		default:
			break;
 80053b6:	e024      	b.n	8005402 <I2c_MainFunction+0x226>
			I2c_BswState_ChannelThree = localStatusThree;
 80053b8:	4a17      	ldr	r2, [pc, #92]	; (8005418 <I2c_MainFunction+0x23c>)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	6013      	str	r3, [r2, #0]
			I2c_Init(I2C_CHANNEL_THREE);
 80053be:	2003      	movs	r0, #3
 80053c0:	f7ff fe88 	bl	80050d4 <I2c_Init>
			break;
 80053c4:	e01e      	b.n	8005404 <I2c_MainFunction+0x228>
			I2c_BswState_ChannelThree = localStatusThree;
 80053c6:	4a14      	ldr	r2, [pc, #80]	; (8005418 <I2c_MainFunction+0x23c>)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	6013      	str	r3, [r2, #0]
			break;
 80053cc:	e01a      	b.n	8005404 <I2c_MainFunction+0x228>
			I2c_BswState_ChannelThree = localStatusThree;
 80053ce:	4a12      	ldr	r2, [pc, #72]	; (8005418 <I2c_MainFunction+0x23c>)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	6013      	str	r3, [r2, #0]
			break;
 80053d4:	e016      	b.n	8005404 <I2c_MainFunction+0x228>
			I2c_BswState_ChannelThree = localStatusThree;
 80053d6:	4a10      	ldr	r2, [pc, #64]	; (8005418 <I2c_MainFunction+0x23c>)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	6013      	str	r3, [r2, #0]
			break;
 80053dc:	e012      	b.n	8005404 <I2c_MainFunction+0x228>
			I2c_BswState_ChannelThree = localStatusThree;
 80053de:	4a0e      	ldr	r2, [pc, #56]	; (8005418 <I2c_MainFunction+0x23c>)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	6013      	str	r3, [r2, #0]
			break;
 80053e4:	e00e      	b.n	8005404 <I2c_MainFunction+0x228>
			I2c_BswState_ChannelThree = localStatusThree;
 80053e6:	4a0c      	ldr	r2, [pc, #48]	; (8005418 <I2c_MainFunction+0x23c>)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	6013      	str	r3, [r2, #0]
			HAL_I2C_ErrorCallback(&hi2c3);
 80053ec:	4808      	ldr	r0, [pc, #32]	; (8005410 <I2c_MainFunction+0x234>)
 80053ee:	f7ff fca9 	bl	8004d44 <HAL_I2C_ErrorCallback>
			break;
 80053f2:	e007      	b.n	8005404 <I2c_MainFunction+0x228>
			I2c_BswState_ChannelThree = localStatusThree;
 80053f4:	4a08      	ldr	r2, [pc, #32]	; (8005418 <I2c_MainFunction+0x23c>)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	6013      	str	r3, [r2, #0]
			HAL_I2C_ErrorCallback(&hi2c3);
 80053fa:	4805      	ldr	r0, [pc, #20]	; (8005410 <I2c_MainFunction+0x234>)
 80053fc:	f7ff fca2 	bl	8004d44 <HAL_I2C_ErrorCallback>
			break;
 8005400:	e000      	b.n	8005404 <I2c_MainFunction+0x228>
			break;
 8005402:	bf00      	nop
	}
}
 8005404:	bf00      	nop
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	20000458 	.word	0x20000458
 8005410:	200004dc 	.word	0x200004dc
 8005414:	200002c4 	.word	0x200002c4
 8005418:	200002c8 	.word	0x200002c8

0800541c <I2cLcd_Init>:
/***********************************************************************************
* Function: I2cLcd_Init										   			           *
* Description: Driver initialization.									           *
************************************************************************************/
StdReturnType I2cLcd_Init()
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
	if(init1 == STD_LOW)
 8005420:	4b42      	ldr	r3, [pc, #264]	; (800552c <I2cLcd_Init+0x110>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d105      	bne.n	8005434 <I2cLcd_Init+0x18>
	{
		init1 = STD_HIGH;
 8005428:	4b40      	ldr	r3, [pc, #256]	; (800552c <I2cLcd_Init+0x110>)
 800542a:	2201      	movs	r2, #1
 800542c:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x30);
 800542e:	2030      	movs	r0, #48	; 0x30
 8005430:	f000 f898 	bl	8005564 <I2cLcd_SendCommand>
	}
	if(init2 == STD_LOW)
 8005434:	4b3e      	ldr	r3, [pc, #248]	; (8005530 <I2cLcd_Init+0x114>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d105      	bne.n	8005448 <I2cLcd_Init+0x2c>
	{
		init2 = STD_HIGH;
 800543c:	4b3c      	ldr	r3, [pc, #240]	; (8005530 <I2cLcd_Init+0x114>)
 800543e:	2201      	movs	r2, #1
 8005440:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x30);
 8005442:	2030      	movs	r0, #48	; 0x30
 8005444:	f000 f88e 	bl	8005564 <I2cLcd_SendCommand>
	}
	if(init3 == STD_LOW)
 8005448:	4b3a      	ldr	r3, [pc, #232]	; (8005534 <I2cLcd_Init+0x118>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d105      	bne.n	800545c <I2cLcd_Init+0x40>
	{
		init3 = STD_HIGH;
 8005450:	4b38      	ldr	r3, [pc, #224]	; (8005534 <I2cLcd_Init+0x118>)
 8005452:	2201      	movs	r2, #1
 8005454:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x30);
 8005456:	2030      	movs	r0, #48	; 0x30
 8005458:	f000 f884 	bl	8005564 <I2cLcd_SendCommand>
	}
	if(init4 == STD_LOW)
 800545c:	4b36      	ldr	r3, [pc, #216]	; (8005538 <I2cLcd_Init+0x11c>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d105      	bne.n	8005470 <I2cLcd_Init+0x54>
	{
		init4 = STD_HIGH;
 8005464:	4b34      	ldr	r3, [pc, #208]	; (8005538 <I2cLcd_Init+0x11c>)
 8005466:	2201      	movs	r2, #1
 8005468:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x20);
 800546a:	2020      	movs	r0, #32
 800546c:	f000 f87a 	bl	8005564 <I2cLcd_SendCommand>
	}
	if(init5 == STD_LOW)
 8005470:	4b32      	ldr	r3, [pc, #200]	; (800553c <I2cLcd_Init+0x120>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d105      	bne.n	8005484 <I2cLcd_Init+0x68>
	{
		init5 = STD_HIGH;
 8005478:	4b30      	ldr	r3, [pc, #192]	; (800553c <I2cLcd_Init+0x120>)
 800547a:	2201      	movs	r2, #1
 800547c:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x28);
 800547e:	2028      	movs	r0, #40	; 0x28
 8005480:	f000 f870 	bl	8005564 <I2cLcd_SendCommand>
	}
	if(init6 == STD_LOW)
 8005484:	4b2e      	ldr	r3, [pc, #184]	; (8005540 <I2cLcd_Init+0x124>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d105      	bne.n	8005498 <I2cLcd_Init+0x7c>
	{
		init6 = STD_HIGH;
 800548c:	4b2c      	ldr	r3, [pc, #176]	; (8005540 <I2cLcd_Init+0x124>)
 800548e:	2201      	movs	r2, #1
 8005490:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x08);
 8005492:	2008      	movs	r0, #8
 8005494:	f000 f866 	bl	8005564 <I2cLcd_SendCommand>
	}
	if(init7 == STD_LOW)
 8005498:	4b2a      	ldr	r3, [pc, #168]	; (8005544 <I2cLcd_Init+0x128>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d105      	bne.n	80054ac <I2cLcd_Init+0x90>
	{
		init7 = STD_HIGH;
 80054a0:	4b28      	ldr	r3, [pc, #160]	; (8005544 <I2cLcd_Init+0x128>)
 80054a2:	2201      	movs	r2, #1
 80054a4:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x01);
 80054a6:	2001      	movs	r0, #1
 80054a8:	f000 f85c 	bl	8005564 <I2cLcd_SendCommand>
	}
	if(init8 == STD_LOW)
 80054ac:	4b26      	ldr	r3, [pc, #152]	; (8005548 <I2cLcd_Init+0x12c>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d105      	bne.n	80054c0 <I2cLcd_Init+0xa4>
	{
		init8 = STD_HIGH;
 80054b4:	4b24      	ldr	r3, [pc, #144]	; (8005548 <I2cLcd_Init+0x12c>)
 80054b6:	2201      	movs	r2, #1
 80054b8:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x06);
 80054ba:	2006      	movs	r0, #6
 80054bc:	f000 f852 	bl	8005564 <I2cLcd_SendCommand>
	}
	if(init9 == STD_LOW)
 80054c0:	4b22      	ldr	r3, [pc, #136]	; (800554c <I2cLcd_Init+0x130>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d105      	bne.n	80054d4 <I2cLcd_Init+0xb8>
	{
		init9 = STD_HIGH;
 80054c8:	4b20      	ldr	r3, [pc, #128]	; (800554c <I2cLcd_Init+0x130>)
 80054ca:	2201      	movs	r2, #1
 80054cc:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x0C);
 80054ce:	200c      	movs	r0, #12
 80054d0:	f000 f848 	bl	8005564 <I2cLcd_SendCommand>
	}
	if(init1 == STD_HIGH && init2 == STD_HIGH && init3 == STD_HIGH
 80054d4:	4b15      	ldr	r3, [pc, #84]	; (800552c <I2cLcd_Init+0x110>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d124      	bne.n	8005526 <I2cLcd_Init+0x10a>
 80054dc:	4b14      	ldr	r3, [pc, #80]	; (8005530 <I2cLcd_Init+0x114>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d120      	bne.n	8005526 <I2cLcd_Init+0x10a>
 80054e4:	4b13      	ldr	r3, [pc, #76]	; (8005534 <I2cLcd_Init+0x118>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d11c      	bne.n	8005526 <I2cLcd_Init+0x10a>
			&& init4 == STD_HIGH && init5 == STD_HIGH && init6 == STD_HIGH
 80054ec:	4b12      	ldr	r3, [pc, #72]	; (8005538 <I2cLcd_Init+0x11c>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d118      	bne.n	8005526 <I2cLcd_Init+0x10a>
 80054f4:	4b11      	ldr	r3, [pc, #68]	; (800553c <I2cLcd_Init+0x120>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d114      	bne.n	8005526 <I2cLcd_Init+0x10a>
 80054fc:	4b10      	ldr	r3, [pc, #64]	; (8005540 <I2cLcd_Init+0x124>)
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d110      	bne.n	8005526 <I2cLcd_Init+0x10a>
			&& init7 == STD_HIGH && init8 == STD_HIGH && init9 == STD_HIGH)
 8005504:	4b0f      	ldr	r3, [pc, #60]	; (8005544 <I2cLcd_Init+0x128>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d10c      	bne.n	8005526 <I2cLcd_Init+0x10a>
 800550c:	4b0e      	ldr	r3, [pc, #56]	; (8005548 <I2cLcd_Init+0x12c>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d108      	bne.n	8005526 <I2cLcd_Init+0x10a>
 8005514:	4b0d      	ldr	r3, [pc, #52]	; (800554c <I2cLcd_Init+0x130>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d104      	bne.n	8005526 <I2cLcd_Init+0x10a>
	{
		I2cLcd_Clear();
 800551c:	f000 f8be 	bl	800569c <I2cLcd_Clear>
		I2c_Lcd_Init_Flag = STD_HIGH;
 8005520:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <I2cLcd_Init+0x134>)
 8005522:	2201      	movs	r2, #1
 8005524:	701a      	strb	r2, [r3, #0]
	}
	return E_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	bd80      	pop	{r7, pc}
 800552c:	200002cc 	.word	0x200002cc
 8005530:	200002cd 	.word	0x200002cd
 8005534:	200002ce 	.word	0x200002ce
 8005538:	200002cf 	.word	0x200002cf
 800553c:	200002d0 	.word	0x200002d0
 8005540:	200002d1 	.word	0x200002d1
 8005544:	200002d2 	.word	0x200002d2
 8005548:	200002d3 	.word	0x200002d3
 800554c:	200002d4 	.word	0x200002d4
 8005550:	200003c1 	.word	0x200003c1

08005554 <I2cLcd_DeInit>:
/***********************************************************************************
* Function: I2cLcd_DeInit										   			       *
* Description: Driver de-initialization.									       *
************************************************************************************/
StdReturnType I2cLcd_DeInit()
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
	return E_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <I2cLcd_SendCommand>:
/***********************************************************************************
* Function: I2cLcd_SendCommand										   			   *
* Description: Driver command transmitting.									       *
************************************************************************************/
VOID I2cLcd_SendCommand(char cmd)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	4603      	mov	r3, r0
 800556c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8 data_t[4];
	data_u = (cmd & 0xf0);
 800556e:	79fb      	ldrb	r3, [r7, #7]
 8005570:	f023 030f 	bic.w	r3, r3, #15
 8005574:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8005576:	79fb      	ldrb	r3, [r7, #7]
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;
 800557c:	7bfb      	ldrb	r3, [r7, #15]
 800557e:	f043 030c 	orr.w	r3, r3, #12
 8005582:	b2db      	uxtb	r3, r3
 8005584:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;
 8005586:	7bfb      	ldrb	r3, [r7, #15]
 8005588:	f043 0308 	orr.w	r3, r3, #8
 800558c:	b2db      	uxtb	r3, r3
 800558e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;
 8005590:	7bbb      	ldrb	r3, [r7, #14]
 8005592:	f043 030c 	orr.w	r3, r3, #12
 8005596:	b2db      	uxtb	r3, r3
 8005598:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;
 800559a:	7bbb      	ldrb	r3, [r7, #14]
 800559c:	f043 0308 	orr.w	r3, r3, #8
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit_IT(&hi2c1, I2CLCD_SLAVE_ADDRESS, (uint8 *) data_t, 4);
 80055a4:	f107 0208 	add.w	r2, r7, #8
 80055a8:	2304      	movs	r3, #4
 80055aa:	214e      	movs	r1, #78	; 0x4e
 80055ac:	4805      	ldr	r0, [pc, #20]	; (80055c4 <I2cLcd_SendCommand+0x60>)
 80055ae:	f004 fe41 	bl	800a234 <HAL_I2C_Master_Transmit_IT>
	vTaskSuspend(I2C_ISRHandle);
 80055b2:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <I2cLcd_SendCommand+0x64>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f00e feae 	bl	8014318 <vTaskSuspend>
}
 80055bc:	bf00      	nop
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20000458 	.word	0x20000458
 80055c8:	20000430 	.word	0x20000430

080055cc <I2cLcd_SendData>:
/***********************************************************************************
* Function: I2cLcd_SendData										   			       *
* Description: Driver data transmitting.									       *
************************************************************************************/
VOID I2cLcd_SendData(char data)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4603      	mov	r3, r0
 80055d4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8 data_t[4];
	data_u = (data & 0xf0);
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	f023 030f 	bic.w	r3, r3, #15
 80055dc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 80055de:	79fb      	ldrb	r3, [r7, #7]
 80055e0:	011b      	lsls	r3, r3, #4
 80055e2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
 80055e6:	f043 030d 	orr.w	r3, r3, #13
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;
 80055ee:	7bfb      	ldrb	r3, [r7, #15]
 80055f0:	f043 0309 	orr.w	r3, r3, #9
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 80055f8:	7bbb      	ldrb	r3, [r7, #14]
 80055fa:	f043 030d 	orr.w	r3, r3, #13
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 8005602:	7bbb      	ldrb	r3, [r7, #14]
 8005604:	f043 0309 	orr.w	r3, r3, #9
 8005608:	b2db      	uxtb	r3, r3
 800560a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit_IT(&hi2c1, I2CLCD_SLAVE_ADDRESS, (uint8 *) data_t, 4);
 800560c:	f107 0208 	add.w	r2, r7, #8
 8005610:	2304      	movs	r3, #4
 8005612:	214e      	movs	r1, #78	; 0x4e
 8005614:	4805      	ldr	r0, [pc, #20]	; (800562c <I2cLcd_SendData+0x60>)
 8005616:	f004 fe0d 	bl	800a234 <HAL_I2C_Master_Transmit_IT>
	vTaskSuspend(I2C_ISRHandle);
 800561a:	4b05      	ldr	r3, [pc, #20]	; (8005630 <I2cLcd_SendData+0x64>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4618      	mov	r0, r3
 8005620:	f00e fe7a 	bl	8014318 <vTaskSuspend>
}
 8005624:	bf00      	nop
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	20000458 	.word	0x20000458
 8005630:	20000430 	.word	0x20000430

08005634 <I2cLcd_SendString>:
/***********************************************************************************
* Function: I2cLcd_SendString										   			   *
* Description: Driver string transmitting.									       *
************************************************************************************/
VOID I2cLcd_SendString(char *str)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
	while (*str)
 800563c:	e006      	b.n	800564c <I2cLcd_SendString+0x18>
	{
		I2cLcd_SendData(*str++);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	1c5a      	adds	r2, r3, #1
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	4618      	mov	r0, r3
 8005648:	f7ff ffc0 	bl	80055cc <I2cLcd_SendData>
	while (*str)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1f4      	bne.n	800563e <I2cLcd_SendString+0xa>
	}
}
 8005654:	bf00      	nop
 8005656:	bf00      	nop
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <I2cLcd_SetCursor>:
/***********************************************************************************
* Function: I2cLcd_SetCursor										   			   *
* Description: Driver cursor setting.									           *
************************************************************************************/
VOID I2cLcd_SetCursor(int row, int col)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b082      	sub	sp, #8
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	6039      	str	r1, [r7, #0]
	switch (row)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <I2cLcd_SetCursor+0x18>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d005      	beq.n	8005680 <I2cLcd_SetCursor+0x22>
 8005674:	e009      	b.n	800568a <I2cLcd_SetCursor+0x2c>
	{
		case 0:
			col |= 0x80;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800567c:	603b      	str	r3, [r7, #0]
			break;
 800567e:	e004      	b.n	800568a <I2cLcd_SetCursor+0x2c>
		case 1:
			col |= 0xC0;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005686:	603b      	str	r3, [r7, #0]
			break;
 8005688:	bf00      	nop
	}
	I2cLcd_SendCommand(col);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	b2db      	uxtb	r3, r3
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff ff68 	bl	8005564 <I2cLcd_SendCommand>
}
 8005694:	bf00      	nop
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <I2cLcd_Clear>:
/***********************************************************************************
* Function: I2cLcd_Clear										   			       *
* Description: Driver LCD clearing.									               *
************************************************************************************/
VOID I2cLcd_Clear()
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
	I2cLcd_SendCommand(0x80);
 80056a2:	2080      	movs	r0, #128	; 0x80
 80056a4:	f7ff ff5e 	bl	8005564 <I2cLcd_SendCommand>
	for (uint8 i=0; i < 70; i++)
 80056a8:	2300      	movs	r3, #0
 80056aa:	71fb      	strb	r3, [r7, #7]
 80056ac:	e005      	b.n	80056ba <I2cLcd_Clear+0x1e>
	{
		I2cLcd_SendData(' ');
 80056ae:	2020      	movs	r0, #32
 80056b0:	f7ff ff8c 	bl	80055cc <I2cLcd_SendData>
	for (uint8 i=0; i < 70; i++)
 80056b4:	79fb      	ldrb	r3, [r7, #7]
 80056b6:	3301      	adds	r3, #1
 80056b8:	71fb      	strb	r3, [r7, #7]
 80056ba:	79fb      	ldrb	r3, [r7, #7]
 80056bc:	2b45      	cmp	r3, #69	; 0x45
 80056be:	d9f6      	bls.n	80056ae <I2cLcd_Clear+0x12>
	}
}
 80056c0:	bf00      	nop
 80056c2:	bf00      	nop
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <Uart_Init>:
/***********************************************************************************
* Function: Uart_Init										       				   *
* Description: Initialize the protocol.									 		   *
************************************************************************************/
StdReturnType Uart_Init()
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
	/* Set the instance. */
	huart1.Instance = USART1;
 80056d0:	4b12      	ldr	r3, [pc, #72]	; (800571c <Uart_Init+0x50>)
 80056d2:	4a13      	ldr	r2, [pc, #76]	; (8005720 <Uart_Init+0x54>)
 80056d4:	601a      	str	r2, [r3, #0]
	/* Set the baud rate for the protocol. */
	huart1.Init.BaudRate = 9600;
 80056d6:	4b11      	ldr	r3, [pc, #68]	; (800571c <Uart_Init+0x50>)
 80056d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80056dc:	605a      	str	r2, [r3, #4]
	/* Set the number of data bits transmitted or received. */
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80056de:	4b0f      	ldr	r3, [pc, #60]	; (800571c <Uart_Init+0x50>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	609a      	str	r2, [r3, #8]
	/* Set the number of stop bits transmitted. */
	huart1.Init.StopBits = UART_STOPBITS_1;
 80056e4:	4b0d      	ldr	r3, [pc, #52]	; (800571c <Uart_Init+0x50>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	60da      	str	r2, [r3, #12]
	/* Set the parity mode. */
	huart1.Init.Parity = UART_PARITY_NONE;
 80056ea:	4b0c      	ldr	r3, [pc, #48]	; (800571c <Uart_Init+0x50>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	611a      	str	r2, [r3, #16]
	/* Set the protocol mode. */
	huart1.Init.Mode = UART_MODE_TX_RX;
 80056f0:	4b0a      	ldr	r3, [pc, #40]	; (800571c <Uart_Init+0x50>)
 80056f2:	220c      	movs	r2, #12
 80056f4:	615a      	str	r2, [r3, #20]
	/* Set the hardware flow control. */
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056f6:	4b09      	ldr	r3, [pc, #36]	; (800571c <Uart_Init+0x50>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	619a      	str	r2, [r3, #24]
	/* Set the over sampling value. */
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80056fc:	4b07      	ldr	r3, [pc, #28]	; (800571c <Uart_Init+0x50>)
 80056fe:	2200      	movs	r2, #0
 8005700:	61da      	str	r2, [r3, #28]
	/* Call for error callback if the initialization is not performed accordingly. */
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8005702:	4806      	ldr	r0, [pc, #24]	; (800571c <Uart_Init+0x50>)
 8005704:	f009 ffa8 	bl	800f658 <HAL_UART_Init>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <Uart_Init+0x48>
	{
		HAL_UART_ErrorCallback(&huart1);
 800570e:	4803      	ldr	r0, [pc, #12]	; (800571c <Uart_Init+0x50>)
 8005710:	f000 f8b2 	bl	8005878 <HAL_UART_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20000b90 	.word	0x20000b90
 8005720:	40011000 	.word	0x40011000

08005724 <Uart_DeInit>:
/***********************************************************************************
* Function: Uart_DeInit										   					   *
* Description: De-initialize the protocol.									       *
************************************************************************************/
StdReturnType Uart_DeInit()
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
	/* Call for protocol de-init function. */
	HAL_UART_DeInit(&huart1);
 8005728:	4802      	ldr	r0, [pc, #8]	; (8005734 <Uart_DeInit+0x10>)
 800572a:	f009 ffef 	bl	800f70c <HAL_UART_DeInit>
	return E_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	bd80      	pop	{r7, pc}
 8005734:	20000b90 	.word	0x20000b90

08005738 <Uart_MainFunction>:
/***********************************************************************************
* Function: Uart_MainFunction										   			   *
* Description: Protocol main function.									           *
************************************************************************************/
VOID Uart_MainFunction()
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
	/* Get the error status in local variable. */
	uint32 localState = HAL_UART_GetState(&huart1);
 800573e:	484b      	ldr	r0, [pc, #300]	; (800586c <Uart_MainFunction+0x134>)
 8005740:	f00a fb6e 	bl	800fe20 <HAL_UART_GetState>
 8005744:	4603      	mov	r3, r0
 8005746:	607b      	str	r3, [r7, #4]
	switch(localState)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2be0      	cmp	r3, #224	; 0xe0
 800574c:	f000 8082 	beq.w	8005854 <Uart_MainFunction+0x11c>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2be0      	cmp	r3, #224	; 0xe0
 8005754:	f200 8085 	bhi.w	8005862 <Uart_MainFunction+0x12a>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b24      	cmp	r3, #36	; 0x24
 800575c:	d850      	bhi.n	8005800 <Uart_MainFunction+0xc8>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b24      	cmp	r3, #36	; 0x24
 8005762:	d87e      	bhi.n	8005862 <Uart_MainFunction+0x12a>
 8005764:	a201      	add	r2, pc, #4	; (adr r2, 800576c <Uart_MainFunction+0x34>)
 8005766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576a:	bf00      	nop
 800576c:	08005809 	.word	0x08005809
 8005770:	08005863 	.word	0x08005863
 8005774:	08005863 	.word	0x08005863
 8005778:	08005863 	.word	0x08005863
 800577c:	08005863 	.word	0x08005863
 8005780:	08005863 	.word	0x08005863
 8005784:	08005863 	.word	0x08005863
 8005788:	08005863 	.word	0x08005863
 800578c:	08005863 	.word	0x08005863
 8005790:	08005863 	.word	0x08005863
 8005794:	08005863 	.word	0x08005863
 8005798:	08005863 	.word	0x08005863
 800579c:	08005863 	.word	0x08005863
 80057a0:	08005863 	.word	0x08005863
 80057a4:	08005863 	.word	0x08005863
 80057a8:	08005863 	.word	0x08005863
 80057ac:	08005863 	.word	0x08005863
 80057b0:	08005863 	.word	0x08005863
 80057b4:	08005863 	.word	0x08005863
 80057b8:	08005863 	.word	0x08005863
 80057bc:	08005863 	.word	0x08005863
 80057c0:	08005863 	.word	0x08005863
 80057c4:	08005863 	.word	0x08005863
 80057c8:	08005863 	.word	0x08005863
 80057cc:	08005863 	.word	0x08005863
 80057d0:	08005863 	.word	0x08005863
 80057d4:	08005863 	.word	0x08005863
 80057d8:	08005863 	.word	0x08005863
 80057dc:	08005863 	.word	0x08005863
 80057e0:	08005863 	.word	0x08005863
 80057e4:	08005863 	.word	0x08005863
 80057e8:	08005863 	.word	0x08005863
 80057ec:	08005815 	.word	0x08005815
 80057f0:	0800582f 	.word	0x0800582f
 80057f4:	08005837 	.word	0x08005837
 80057f8:	0800583f 	.word	0x0800583f
 80057fc:	08005827 	.word	0x08005827
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2ba0      	cmp	r3, #160	; 0xa0
 8005804:	d01f      	beq.n	8005846 <Uart_MainFunction+0x10e>
		case HAL_UART_STATE_ERROR:
			Uart_BswState = localState;
			HAL_UART_ErrorCallback(&huart1);
			break;
		default:
			break;
 8005806:	e02c      	b.n	8005862 <Uart_MainFunction+0x12a>
			Uart_BswState = localState;
 8005808:	4a19      	ldr	r2, [pc, #100]	; (8005870 <Uart_MainFunction+0x138>)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6013      	str	r3, [r2, #0]
			Uart_Init();
 800580e:	f7ff ff5d 	bl	80056cc <Uart_Init>
			break;
 8005812:	e027      	b.n	8005864 <Uart_MainFunction+0x12c>
			HAL_UART_Receive_IT(&huart1, &Rte_P_Btc_BtcPort_Btc_RxData, 1);
 8005814:	2201      	movs	r2, #1
 8005816:	4917      	ldr	r1, [pc, #92]	; (8005874 <Uart_MainFunction+0x13c>)
 8005818:	4814      	ldr	r0, [pc, #80]	; (800586c <Uart_MainFunction+0x134>)
 800581a:	f009 fff6 	bl	800f80a <HAL_UART_Receive_IT>
			Uart_BswState = localState;
 800581e:	4a14      	ldr	r2, [pc, #80]	; (8005870 <Uart_MainFunction+0x138>)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6013      	str	r3, [r2, #0]
			break;
 8005824:	e01e      	b.n	8005864 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 8005826:	4a12      	ldr	r2, [pc, #72]	; (8005870 <Uart_MainFunction+0x138>)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6013      	str	r3, [r2, #0]
			break;
 800582c:	e01a      	b.n	8005864 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 800582e:	4a10      	ldr	r2, [pc, #64]	; (8005870 <Uart_MainFunction+0x138>)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6013      	str	r3, [r2, #0]
			break;
 8005834:	e016      	b.n	8005864 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 8005836:	4a0e      	ldr	r2, [pc, #56]	; (8005870 <Uart_MainFunction+0x138>)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6013      	str	r3, [r2, #0]
			break;
 800583c:	e012      	b.n	8005864 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 800583e:	4a0c      	ldr	r2, [pc, #48]	; (8005870 <Uart_MainFunction+0x138>)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6013      	str	r3, [r2, #0]
			break;
 8005844:	e00e      	b.n	8005864 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 8005846:	4a0a      	ldr	r2, [pc, #40]	; (8005870 <Uart_MainFunction+0x138>)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6013      	str	r3, [r2, #0]
			HAL_UART_ErrorCallback(&huart1);
 800584c:	4807      	ldr	r0, [pc, #28]	; (800586c <Uart_MainFunction+0x134>)
 800584e:	f000 f813 	bl	8005878 <HAL_UART_ErrorCallback>
			break;
 8005852:	e007      	b.n	8005864 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 8005854:	4a06      	ldr	r2, [pc, #24]	; (8005870 <Uart_MainFunction+0x138>)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6013      	str	r3, [r2, #0]
			HAL_UART_ErrorCallback(&huart1);
 800585a:	4804      	ldr	r0, [pc, #16]	; (800586c <Uart_MainFunction+0x134>)
 800585c:	f000 f80c 	bl	8005878 <HAL_UART_ErrorCallback>
			break;
 8005860:	e000      	b.n	8005864 <Uart_MainFunction+0x12c>
			break;
 8005862:	bf00      	nop
	}
}
 8005864:	bf00      	nop
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	20000b90 	.word	0x20000b90
 8005870:	200002d8 	.word	0x200002d8
 8005874:	200000f4 	.word	0x200000f4

08005878 <HAL_UART_ErrorCallback>:
/***********************************************************************************
* Function: HAL_UART_ErrorCallback										   		   *
* Description: Process error callback.								               *
************************************************************************************/
VOID HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
	/* Get error status in local variable. */
	uint32 receivedValue = HAL_UART_GetError(huart);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f00a faeb 	bl	800fe5c <HAL_UART_GetError>
 8005886:	60f8      	str	r0, [r7, #12]
	/* Process each error.
	 * Store each in error in the system manager fault array.
	 * In case of DMA error re-initialize the protocol. */
	switch(receivedValue)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b10      	cmp	r3, #16
 800588c:	d84b      	bhi.n	8005926 <HAL_UART_ErrorCallback+0xae>
 800588e:	a201      	add	r2, pc, #4	; (adr r2, 8005894 <HAL_UART_ErrorCallback+0x1c>)
 8005890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005894:	08005927 	.word	0x08005927
 8005898:	080058d9 	.word	0x080058d9
 800589c:	080058e7 	.word	0x080058e7
 80058a0:	08005927 	.word	0x08005927
 80058a4:	080058f5 	.word	0x080058f5
 80058a8:	08005927 	.word	0x08005927
 80058ac:	08005927 	.word	0x08005927
 80058b0:	08005927 	.word	0x08005927
 80058b4:	08005903 	.word	0x08005903
 80058b8:	08005927 	.word	0x08005927
 80058bc:	08005927 	.word	0x08005927
 80058c0:	08005927 	.word	0x08005927
 80058c4:	08005927 	.word	0x08005927
 80058c8:	08005927 	.word	0x08005927
 80058cc:	08005927 	.word	0x08005927
 80058d0:	08005927 	.word	0x08005927
 80058d4:	08005911 	.word	0x08005911
	{
		case HAL_UART_ERROR_NONE:
			/* do nothing */
			break;
		case HAL_UART_ERROR_PE:
			SystemManager_Fault[UART_ERROR_PE]++;
 80058d8:	4b15      	ldr	r3, [pc, #84]	; (8005930 <HAL_UART_ErrorCallback+0xb8>)
 80058da:	7c5b      	ldrb	r3, [r3, #17]
 80058dc:	3301      	adds	r3, #1
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	4b13      	ldr	r3, [pc, #76]	; (8005930 <HAL_UART_ErrorCallback+0xb8>)
 80058e2:	745a      	strb	r2, [r3, #17]
			break;
 80058e4:	e020      	b.n	8005928 <HAL_UART_ErrorCallback+0xb0>
		case HAL_UART_ERROR_NE:
			SystemManager_Fault[UART_ERROR_NE]++;
 80058e6:	4b12      	ldr	r3, [pc, #72]	; (8005930 <HAL_UART_ErrorCallback+0xb8>)
 80058e8:	7c9b      	ldrb	r3, [r3, #18]
 80058ea:	3301      	adds	r3, #1
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	4b10      	ldr	r3, [pc, #64]	; (8005930 <HAL_UART_ErrorCallback+0xb8>)
 80058f0:	749a      	strb	r2, [r3, #18]
			break;
 80058f2:	e019      	b.n	8005928 <HAL_UART_ErrorCallback+0xb0>
		case HAL_UART_ERROR_FE:
			SystemManager_Fault[UART_ERROR_FE]++;
 80058f4:	4b0e      	ldr	r3, [pc, #56]	; (8005930 <HAL_UART_ErrorCallback+0xb8>)
 80058f6:	7cdb      	ldrb	r3, [r3, #19]
 80058f8:	3301      	adds	r3, #1
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	4b0c      	ldr	r3, [pc, #48]	; (8005930 <HAL_UART_ErrorCallback+0xb8>)
 80058fe:	74da      	strb	r2, [r3, #19]
			break;
 8005900:	e012      	b.n	8005928 <HAL_UART_ErrorCallback+0xb0>
		case HAL_UART_ERROR_ORE:
			SystemManager_Fault[UART_ERROR_ORE]++;
 8005902:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <HAL_UART_ErrorCallback+0xb8>)
 8005904:	7d1b      	ldrb	r3, [r3, #20]
 8005906:	3301      	adds	r3, #1
 8005908:	b2da      	uxtb	r2, r3
 800590a:	4b09      	ldr	r3, [pc, #36]	; (8005930 <HAL_UART_ErrorCallback+0xb8>)
 800590c:	751a      	strb	r2, [r3, #20]
			break;
 800590e:	e00b      	b.n	8005928 <HAL_UART_ErrorCallback+0xb0>
		case HAL_UART_ERROR_DMA:
			SystemManager_Fault[UART_ERROR_ORE]++;
 8005910:	4b07      	ldr	r3, [pc, #28]	; (8005930 <HAL_UART_ErrorCallback+0xb8>)
 8005912:	7d1b      	ldrb	r3, [r3, #20]
 8005914:	3301      	adds	r3, #1
 8005916:	b2da      	uxtb	r2, r3
 8005918:	4b05      	ldr	r3, [pc, #20]	; (8005930 <HAL_UART_ErrorCallback+0xb8>)
 800591a:	751a      	strb	r2, [r3, #20]
			Uart_Init();
 800591c:	f7ff fed6 	bl	80056cc <Uart_Init>
			Uart_DeInit();
 8005920:	f7ff ff00 	bl	8005724 <Uart_DeInit>
			break;
 8005924:	e000      	b.n	8005928 <HAL_UART_ErrorCallback+0xb0>
		default:
			break;
 8005926:	bf00      	nop
	}
}
 8005928:	bf00      	nop
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	2000e638 	.word	0x2000e638

08005934 <HAL_UART_RxCpltCallback>:
/***********************************************************************************
* Function: HAL_UART_RxCpltCallback										           *
* Description: Process received data.									   		   *
************************************************************************************/
VOID HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
	/* If the UART 1 is calling the callback. */
	if(huart->Instance == USART1)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a22      	ldr	r2, [pc, #136]	; (80059cc <HAL_UART_RxCpltCallback+0x98>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d13d      	bne.n	80059c2 <HAL_UART_RxCpltCallback+0x8e>
	{
		Rte_Write_Btc_BtcPort_Btc_ApplState((uint8*)0x02);
 8005946:	2002      	movs	r0, #2
 8005948:	f010 fa74 	bl	8015e34 <Rte_Write_Btc_BtcPort_Btc_ApplState>
		/* If the data received is not nullptr. */
		if(Rte_P_Btc_BtcPort_Btc_RxData == '\n')
 800594c:	4b20      	ldr	r3, [pc, #128]	; (80059d0 <HAL_UART_RxCpltCallback+0x9c>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b0a      	cmp	r3, #10
 8005952:	d11a      	bne.n	800598a <HAL_UART_RxCpltCallback+0x56>
		{
			/* If the buffer length counter is less than maximum value. */
			if(Rte_P_Btc_BtcPort_Btc_RxCount <= 3)
 8005954:	4b1f      	ldr	r3, [pc, #124]	; (80059d4 <HAL_UART_RxCpltCallback+0xa0>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	2b03      	cmp	r3, #3
 800595a:	d80f      	bhi.n	800597c <HAL_UART_RxCpltCallback+0x48>
			{
				/* Convert the data received to uint8.*/
				uint8 asciiToUint = 0;
 800595c:	2300      	movs	r3, #0
 800595e:	73fb      	strb	r3, [r7, #15]
				asciiToUint = atoi((char*)Rte_P_Btc_BtcPort_Btc_DataBuffer);
 8005960:	481d      	ldr	r0, [pc, #116]	; (80059d8 <HAL_UART_RxCpltCallback+0xa4>)
 8005962:	f012 f825 	bl	80179b0 <atoi>
 8005966:	4603      	mov	r3, r0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	73fb      	strb	r3, [r7, #15]
				Rte_Write_Btc_BtcPort_Btc_RxData(&asciiToUint);
 800596c:	f107 030f 	add.w	r3, r7, #15
 8005970:	4618      	mov	r0, r3
 8005972:	f010 fbd3 	bl	801611c <Rte_Write_Btc_BtcPort_Btc_RxData>
				Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&Rte_P_Btc_BtcPort_Btc_RxData);
 8005976:	4816      	ldr	r0, [pc, #88]	; (80059d0 <HAL_UART_RxCpltCallback+0x9c>)
 8005978:	f010 fc18 	bl	80161ac <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>
			else
			{
				/* do nothing */
			}
			/* Set the counter to 0 if it is more than maximum value. */
			UartCounter_Btc_RxCount = 0;
 800597c:	4b17      	ldr	r3, [pc, #92]	; (80059dc <HAL_UART_RxCpltCallback+0xa8>)
 800597e:	2200      	movs	r2, #0
 8005980:	701a      	strb	r2, [r3, #0]
			Rte_Write_Btc_BtcPort_Btc_RxCount(&UartCounter_Btc_RxCount);
 8005982:	4816      	ldr	r0, [pc, #88]	; (80059dc <HAL_UART_RxCpltCallback+0xa8>)
 8005984:	f010 fbda 	bl	801613c <Rte_Write_Btc_BtcPort_Btc_RxCount>
 8005988:	e016      	b.n	80059b8 <HAL_UART_RxCpltCallback+0x84>
		}/* If the message was not fully processed, continue with the processing into the buffer. */
		else if(Rte_P_Btc_BtcPort_Btc_RxCount < 3)
 800598a:	4b12      	ldr	r3, [pc, #72]	; (80059d4 <HAL_UART_RxCpltCallback+0xa0>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	2b02      	cmp	r3, #2
 8005990:	d80c      	bhi.n	80059ac <HAL_UART_RxCpltCallback+0x78>
		{
			Rte_Write_Btc_BtcPort_Btc_DataBuffer(&Rte_P_Btc_BtcPort_Btc_RxData, UartCounter_Btc_RxCount);
 8005992:	4b12      	ldr	r3, [pc, #72]	; (80059dc <HAL_UART_RxCpltCallback+0xa8>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	4619      	mov	r1, r3
 8005998:	480d      	ldr	r0, [pc, #52]	; (80059d0 <HAL_UART_RxCpltCallback+0x9c>)
 800599a:	f010 fbdf 	bl	801615c <Rte_Write_Btc_BtcPort_Btc_DataBuffer>
			UartCounter_Btc_RxCount++;
 800599e:	4b0f      	ldr	r3, [pc, #60]	; (80059dc <HAL_UART_RxCpltCallback+0xa8>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	3301      	adds	r3, #1
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	4b0d      	ldr	r3, [pc, #52]	; (80059dc <HAL_UART_RxCpltCallback+0xa8>)
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	e005      	b.n	80059b8 <HAL_UART_RxCpltCallback+0x84>
		}
		else
		{
			/* Set the counter to 0 otherwise. */
			UartCounter_Btc_RxCount = 0;
 80059ac:	4b0b      	ldr	r3, [pc, #44]	; (80059dc <HAL_UART_RxCpltCallback+0xa8>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	701a      	strb	r2, [r3, #0]
			Rte_Write_Btc_BtcPort_Btc_RxCount(&UartCounter_Btc_RxCount);
 80059b2:	480a      	ldr	r0, [pc, #40]	; (80059dc <HAL_UART_RxCpltCallback+0xa8>)
 80059b4:	f010 fbc2 	bl	801613c <Rte_Write_Btc_BtcPort_Btc_RxCount>
		}
		/* Re-enable data transmission throuhg the protocol in interrupt mode. */
		Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(&huart1, &Btc_RxData, 1);
 80059b8:	2201      	movs	r2, #1
 80059ba:	4905      	ldr	r1, [pc, #20]	; (80059d0 <HAL_UART_RxCpltCallback+0x9c>)
 80059bc:	4808      	ldr	r0, [pc, #32]	; (80059e0 <HAL_UART_RxCpltCallback+0xac>)
 80059be:	f010 fd53 	bl	8016468 <Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT>
	}
	else
	{
		/* do nothing */
	}
}
 80059c2:	bf00      	nop
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	40011000 	.word	0x40011000
 80059d0:	200000f4 	.word	0x200000f4
 80059d4:	200000f5 	.word	0x200000f5
 80059d8:	200000f0 	.word	0x200000f0
 80059dc:	200002dc 	.word	0x200002dc
 80059e0:	20000b90 	.word	0x20000b90

080059e4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80059ea:	463b      	mov	r3, r7
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	605a      	str	r2, [r3, #4]
 80059f2:	609a      	str	r2, [r3, #8]
 80059f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80059f6:	4b7c      	ldr	r3, [pc, #496]	; (8005be8 <MX_ADC1_Init+0x204>)
 80059f8:	4a7c      	ldr	r2, [pc, #496]	; (8005bec <MX_ADC1_Init+0x208>)
 80059fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80059fc:	4b7a      	ldr	r3, [pc, #488]	; (8005be8 <MX_ADC1_Init+0x204>)
 80059fe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005a02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005a04:	4b78      	ldr	r3, [pc, #480]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8005a0a:	4b77      	ldr	r3, [pc, #476]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005a10:	4b75      	ldr	r3, [pc, #468]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005a12:	2201      	movs	r2, #1
 8005a14:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005a16:	4b74      	ldr	r3, [pc, #464]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005a1e:	4b72      	ldr	r3, [pc, #456]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005a24:	4b70      	ldr	r3, [pc, #448]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005a26:	4a72      	ldr	r2, [pc, #456]	; (8005bf0 <MX_ADC1_Init+0x20c>)
 8005a28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005a2a:	4b6f      	ldr	r3, [pc, #444]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8005a30:	4b6d      	ldr	r3, [pc, #436]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005a32:	220e      	movs	r2, #14
 8005a34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005a36:	4b6c      	ldr	r3, [pc, #432]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005a3e:	4b6a      	ldr	r3, [pc, #424]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005a40:	2201      	movs	r2, #1
 8005a42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005a44:	4868      	ldr	r0, [pc, #416]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005a46:	f002 f9bf 	bl	8007dc8 <HAL_ADC_Init>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8005a50:	f011 ff6c 	bl	801792c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005a54:	230d      	movs	r3, #13
 8005a56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8005a5c:	2307      	movs	r3, #7
 8005a5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005a60:	463b      	mov	r3, r7
 8005a62:	4619      	mov	r1, r3
 8005a64:	4860      	ldr	r0, [pc, #384]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005a66:	f002 fc69 	bl	800833c <HAL_ADC_ConfigChannel>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8005a70:	f011 ff5c 	bl	801792c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005a74:	2302      	movs	r3, #2
 8005a76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005a78:	2302      	movs	r3, #2
 8005a7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005a7c:	463b      	mov	r3, r7
 8005a7e:	4619      	mov	r1, r3
 8005a80:	4859      	ldr	r0, [pc, #356]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005a82:	f002 fc5b 	bl	800833c <HAL_ADC_ConfigChannel>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8005a8c:	f011 ff4e 	bl	801792c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005a90:	230c      	movs	r3, #12
 8005a92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005a94:	2303      	movs	r3, #3
 8005a96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005a98:	463b      	mov	r3, r7
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	4852      	ldr	r0, [pc, #328]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005a9e:	f002 fc4d 	bl	800833c <HAL_ADC_ConfigChannel>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8005aa8:	f011 ff40 	bl	801792c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005aac:	230a      	movs	r3, #10
 8005aae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005ab0:	2304      	movs	r3, #4
 8005ab2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005ab4:	463b      	mov	r3, r7
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	484b      	ldr	r0, [pc, #300]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005aba:	f002 fc3f 	bl	800833c <HAL_ADC_ConfigChannel>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8005ac4:	f011 ff32 	bl	801792c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005ac8:	2304      	movs	r3, #4
 8005aca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005acc:	2305      	movs	r3, #5
 8005ace:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005ad0:	463b      	mov	r3, r7
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	4844      	ldr	r0, [pc, #272]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005ad6:	f002 fc31 	bl	800833c <HAL_ADC_ConfigChannel>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8005ae0:	f011 ff24 	bl	801792c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005ae4:	2305      	movs	r3, #5
 8005ae6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005ae8:	2306      	movs	r3, #6
 8005aea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005aec:	463b      	mov	r3, r7
 8005aee:	4619      	mov	r1, r3
 8005af0:	483d      	ldr	r0, [pc, #244]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005af2:	f002 fc23 	bl	800833c <HAL_ADC_ConfigChannel>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8005afc:	f011 ff16 	bl	801792c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005b00:	2306      	movs	r3, #6
 8005b02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005b04:	2307      	movs	r3, #7
 8005b06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005b08:	463b      	mov	r3, r7
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4836      	ldr	r0, [pc, #216]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005b0e:	f002 fc15 	bl	800833c <HAL_ADC_ConfigChannel>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8005b18:	f011 ff08 	bl	801792c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005b1c:	2307      	movs	r3, #7
 8005b1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005b20:	2308      	movs	r3, #8
 8005b22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005b24:	463b      	mov	r3, r7
 8005b26:	4619      	mov	r1, r3
 8005b28:	482f      	ldr	r0, [pc, #188]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005b2a:	f002 fc07 	bl	800833c <HAL_ADC_ConfigChannel>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8005b34:	f011 fefa 	bl	801792c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005b38:	2308      	movs	r3, #8
 8005b3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8005b3c:	2309      	movs	r3, #9
 8005b3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005b40:	463b      	mov	r3, r7
 8005b42:	4619      	mov	r1, r3
 8005b44:	4828      	ldr	r0, [pc, #160]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005b46:	f002 fbf9 	bl	800833c <HAL_ADC_ConfigChannel>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8005b50:	f011 feec 	bl	801792c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005b54:	2309      	movs	r3, #9
 8005b56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8005b58:	230a      	movs	r3, #10
 8005b5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005b5c:	463b      	mov	r3, r7
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4821      	ldr	r0, [pc, #132]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005b62:	f002 fbeb 	bl	800833c <HAL_ADC_ConfigChannel>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8005b6c:	f011 fede 	bl	801792c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8005b70:	230f      	movs	r3, #15
 8005b72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8005b74:	230b      	movs	r3, #11
 8005b76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005b78:	463b      	mov	r3, r7
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	481a      	ldr	r0, [pc, #104]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005b7e:	f002 fbdd 	bl	800833c <HAL_ADC_ConfigChannel>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8005b88:	f011 fed0 	bl	801792c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8005b8c:	230e      	movs	r3, #14
 8005b8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8005b90:	230c      	movs	r3, #12
 8005b92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005b94:	463b      	mov	r3, r7
 8005b96:	4619      	mov	r1, r3
 8005b98:	4813      	ldr	r0, [pc, #76]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005b9a:	f002 fbcf 	bl	800833c <HAL_ADC_ConfigChannel>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8005ba4:	f011 fec2 	bl	801792c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8005bac:	230d      	movs	r3, #13
 8005bae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005bb0:	463b      	mov	r3, r7
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	480c      	ldr	r0, [pc, #48]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005bb6:	f002 fbc1 	bl	800833c <HAL_ADC_ConfigChannel>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8005bc0:	f011 feb4 	bl	801792c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005bc4:	230b      	movs	r3, #11
 8005bc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8005bc8:	230e      	movs	r3, #14
 8005bca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005bcc:	463b      	mov	r3, r7
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4805      	ldr	r0, [pc, #20]	; (8005be8 <MX_ADC1_Init+0x204>)
 8005bd2:	f002 fbb3 	bl	800833c <HAL_ADC_ConfigChannel>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8005bdc:	f011 fea6 	bl	801792c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005be0:	bf00      	nop
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	200002e0 	.word	0x200002e0
 8005bec:	40012000 	.word	0x40012000
 8005bf0:	0f000001 	.word	0x0f000001

08005bf4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b08c      	sub	sp, #48	; 0x30
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bfc:	f107 031c 	add.w	r3, r7, #28
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	605a      	str	r2, [r3, #4]
 8005c06:	609a      	str	r2, [r3, #8]
 8005c08:	60da      	str	r2, [r3, #12]
 8005c0a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a4e      	ldr	r2, [pc, #312]	; (8005d4c <HAL_ADC_MspInit+0x158>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	f040 8096 	bne.w	8005d44 <HAL_ADC_MspInit+0x150>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005c18:	2300      	movs	r3, #0
 8005c1a:	61bb      	str	r3, [r7, #24]
 8005c1c:	4b4c      	ldr	r3, [pc, #304]	; (8005d50 <HAL_ADC_MspInit+0x15c>)
 8005c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c20:	4a4b      	ldr	r2, [pc, #300]	; (8005d50 <HAL_ADC_MspInit+0x15c>)
 8005c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c26:	6453      	str	r3, [r2, #68]	; 0x44
 8005c28:	4b49      	ldr	r3, [pc, #292]	; (8005d50 <HAL_ADC_MspInit+0x15c>)
 8005c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c30:	61bb      	str	r3, [r7, #24]
 8005c32:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c34:	2300      	movs	r3, #0
 8005c36:	617b      	str	r3, [r7, #20]
 8005c38:	4b45      	ldr	r3, [pc, #276]	; (8005d50 <HAL_ADC_MspInit+0x15c>)
 8005c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3c:	4a44      	ldr	r2, [pc, #272]	; (8005d50 <HAL_ADC_MspInit+0x15c>)
 8005c3e:	f043 0304 	orr.w	r3, r3, #4
 8005c42:	6313      	str	r3, [r2, #48]	; 0x30
 8005c44:	4b42      	ldr	r3, [pc, #264]	; (8005d50 <HAL_ADC_MspInit+0x15c>)
 8005c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c48:	f003 0304 	and.w	r3, r3, #4
 8005c4c:	617b      	str	r3, [r7, #20]
 8005c4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c50:	2300      	movs	r3, #0
 8005c52:	613b      	str	r3, [r7, #16]
 8005c54:	4b3e      	ldr	r3, [pc, #248]	; (8005d50 <HAL_ADC_MspInit+0x15c>)
 8005c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c58:	4a3d      	ldr	r2, [pc, #244]	; (8005d50 <HAL_ADC_MspInit+0x15c>)
 8005c5a:	f043 0301 	orr.w	r3, r3, #1
 8005c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8005c60:	4b3b      	ldr	r3, [pc, #236]	; (8005d50 <HAL_ADC_MspInit+0x15c>)
 8005c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	613b      	str	r3, [r7, #16]
 8005c6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	4b37      	ldr	r3, [pc, #220]	; (8005d50 <HAL_ADC_MspInit+0x15c>)
 8005c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c74:	4a36      	ldr	r2, [pc, #216]	; (8005d50 <HAL_ADC_MspInit+0x15c>)
 8005c76:	f043 0302 	orr.w	r3, r3, #2
 8005c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8005c7c:	4b34      	ldr	r3, [pc, #208]	; (8005d50 <HAL_ADC_MspInit+0x15c>)
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = TS_Pin|RTS_F_Pin|AQS_Pin|LS_Pin
 8005c88:	233f      	movs	r3, #63	; 0x3f
 8005c8a:	61fb      	str	r3, [r7, #28]
                          |LTS_R_Pin|LTS_F_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c90:	2300      	movs	r3, #0
 8005c92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c94:	f107 031c 	add.w	r3, r7, #28
 8005c98:	4619      	mov	r1, r3
 8005c9a:	482e      	ldr	r0, [pc, #184]	; (8005d54 <HAL_ADC_MspInit+0x160>)
 8005c9c:	f003 fe72 	bl	8009984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VS_Pin|RTS_R_Pin|LB_L_Pin|LB_R_Pin
 8005ca0:	23fc      	movs	r3, #252	; 0xfc
 8005ca2:	61fb      	str	r3, [r7, #28]
                          |RPL_L_Pin|RPL_R_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cac:	f107 031c 	add.w	r3, r7, #28
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4829      	ldr	r0, [pc, #164]	; (8005d58 <HAL_ADC_MspInit+0x164>)
 8005cb4:	f003 fe66 	bl	8009984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BL_R_Pin|BL_L_Pin;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cc4:	f107 031c 	add.w	r3, r7, #28
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4824      	ldr	r0, [pc, #144]	; (8005d5c <HAL_ADC_MspInit+0x168>)
 8005ccc:	f003 fe5a 	bl	8009984 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005cd0:	4b23      	ldr	r3, [pc, #140]	; (8005d60 <HAL_ADC_MspInit+0x16c>)
 8005cd2:	4a24      	ldr	r2, [pc, #144]	; (8005d64 <HAL_ADC_MspInit+0x170>)
 8005cd4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005cd6:	4b22      	ldr	r3, [pc, #136]	; (8005d60 <HAL_ADC_MspInit+0x16c>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005cdc:	4b20      	ldr	r3, [pc, #128]	; (8005d60 <HAL_ADC_MspInit+0x16c>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ce2:	4b1f      	ldr	r3, [pc, #124]	; (8005d60 <HAL_ADC_MspInit+0x16c>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005ce8:	4b1d      	ldr	r3, [pc, #116]	; (8005d60 <HAL_ADC_MspInit+0x16c>)
 8005cea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005cee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005cf0:	4b1b      	ldr	r3, [pc, #108]	; (8005d60 <HAL_ADC_MspInit+0x16c>)
 8005cf2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005cf6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005cf8:	4b19      	ldr	r3, [pc, #100]	; (8005d60 <HAL_ADC_MspInit+0x16c>)
 8005cfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005cfe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005d00:	4b17      	ldr	r3, [pc, #92]	; (8005d60 <HAL_ADC_MspInit+0x16c>)
 8005d02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d06:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005d08:	4b15      	ldr	r3, [pc, #84]	; (8005d60 <HAL_ADC_MspInit+0x16c>)
 8005d0a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005d0e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005d10:	4b13      	ldr	r3, [pc, #76]	; (8005d60 <HAL_ADC_MspInit+0x16c>)
 8005d12:	2204      	movs	r2, #4
 8005d14:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005d16:	4b12      	ldr	r3, [pc, #72]	; (8005d60 <HAL_ADC_MspInit+0x16c>)
 8005d18:	2203      	movs	r2, #3
 8005d1a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8005d1c:	4b10      	ldr	r3, [pc, #64]	; (8005d60 <HAL_ADC_MspInit+0x16c>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005d22:	4b0f      	ldr	r3, [pc, #60]	; (8005d60 <HAL_ADC_MspInit+0x16c>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005d28:	480d      	ldr	r0, [pc, #52]	; (8005d60 <HAL_ADC_MspInit+0x16c>)
 8005d2a:	f003 f815 	bl	8008d58 <HAL_DMA_Init>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <HAL_ADC_MspInit+0x144>
    {
      Error_Handler();
 8005d34:	f011 fdfa 	bl	801792c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a09      	ldr	r2, [pc, #36]	; (8005d60 <HAL_ADC_MspInit+0x16c>)
 8005d3c:	639a      	str	r2, [r3, #56]	; 0x38
 8005d3e:	4a08      	ldr	r2, [pc, #32]	; (8005d60 <HAL_ADC_MspInit+0x16c>)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005d44:	bf00      	nop
 8005d46:	3730      	adds	r7, #48	; 0x30
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	40012000 	.word	0x40012000
 8005d50:	40023800 	.word	0x40023800
 8005d54:	40020800 	.word	0x40020800
 8005d58:	40020000 	.word	0x40020000
 8005d5c:	40020400 	.word	0x40020400
 8005d60:	20000344 	.word	0x20000344
 8005d64:	40026410 	.word	0x40026410

08005d68 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a10      	ldr	r2, [pc, #64]	; (8005db8 <HAL_ADC_MspDeInit+0x50>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d119      	bne.n	8005dae <HAL_ADC_MspDeInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8005d7a:	4b10      	ldr	r3, [pc, #64]	; (8005dbc <HAL_ADC_MspDeInit+0x54>)
 8005d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7e:	4a0f      	ldr	r2, [pc, #60]	; (8005dbc <HAL_ADC_MspDeInit+0x54>)
 8005d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d84:	6453      	str	r3, [r2, #68]	; 0x44
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    HAL_GPIO_DeInit(GPIOC, TS_Pin|RTS_F_Pin|AQS_Pin|LS_Pin
 8005d86:	213f      	movs	r1, #63	; 0x3f
 8005d88:	480d      	ldr	r0, [pc, #52]	; (8005dc0 <HAL_ADC_MspDeInit+0x58>)
 8005d8a:	f003 ff7f 	bl	8009c8c <HAL_GPIO_DeInit>
                          |LTS_R_Pin|LTS_F_Pin);

    HAL_GPIO_DeInit(GPIOA, VS_Pin|RTS_R_Pin|LB_L_Pin|LB_R_Pin
 8005d8e:	21fc      	movs	r1, #252	; 0xfc
 8005d90:	480c      	ldr	r0, [pc, #48]	; (8005dc4 <HAL_ADC_MspDeInit+0x5c>)
 8005d92:	f003 ff7b 	bl	8009c8c <HAL_GPIO_DeInit>
                          |RPL_L_Pin|RPL_R_Pin);

    HAL_GPIO_DeInit(GPIOB, BL_R_Pin|BL_L_Pin);
 8005d96:	2103      	movs	r1, #3
 8005d98:	480b      	ldr	r0, [pc, #44]	; (8005dc8 <HAL_ADC_MspDeInit+0x60>)
 8005d9a:	f003 ff77 	bl	8009c8c <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da2:	4618      	mov	r0, r3
 8005da4:	f003 f886 	bl	8008eb4 <HAL_DMA_DeInit>

    /* ADC1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(ADC_IRQn);
 8005da8:	2012      	movs	r0, #18
 8005daa:	f002 feba 	bl	8008b22 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 8005dae:	bf00      	nop
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	40012000 	.word	0x40012000
 8005dbc:	40023800 	.word	0x40023800
 8005dc0:	40020800 	.word	0x40020800
 8005dc4:	40020000 	.word	0x40020000
 8005dc8:	40020400 	.word	0x40020400

08005dcc <HAL_CRC_MspInit>:
  /* USER CODE END CRC_Init 2 */

}

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a0b      	ldr	r2, [pc, #44]	; (8005e08 <HAL_CRC_MspInit+0x3c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d10d      	bne.n	8005dfa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	4b0a      	ldr	r3, [pc, #40]	; (8005e0c <HAL_CRC_MspInit+0x40>)
 8005de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de6:	4a09      	ldr	r2, [pc, #36]	; (8005e0c <HAL_CRC_MspInit+0x40>)
 8005de8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005dec:	6313      	str	r3, [r2, #48]	; 0x30
 8005dee:	4b07      	ldr	r3, [pc, #28]	; (8005e0c <HAL_CRC_MspInit+0x40>)
 8005df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8005dfa:	bf00      	nop
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	40023000 	.word	0x40023000
 8005e0c:	40023800 	.word	0x40023800

08005e10 <HAL_CRC_MspDeInit>:

void HAL_CRC_MspDeInit(CRC_HandleTypeDef* crcHandle)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a07      	ldr	r2, [pc, #28]	; (8005e3c <HAL_CRC_MspDeInit+0x2c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d105      	bne.n	8005e2e <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 8005e22:	4b07      	ldr	r3, [pc, #28]	; (8005e40 <HAL_CRC_MspDeInit+0x30>)
 8005e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e26:	4a06      	ldr	r2, [pc, #24]	; (8005e40 <HAL_CRC_MspDeInit+0x30>)
 8005e28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e2c:	6313      	str	r3, [r2, #48]	; 0x30
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }
}
 8005e2e:	bf00      	nop
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40023000 	.word	0x40023000
 8005e40:	40023800 	.word	0x40023800

08005e44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	607b      	str	r3, [r7, #4]
 8005e4e:	4b10      	ldr	r3, [pc, #64]	; (8005e90 <MX_DMA_Init+0x4c>)
 8005e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e52:	4a0f      	ldr	r2, [pc, #60]	; (8005e90 <MX_DMA_Init+0x4c>)
 8005e54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e58:	6313      	str	r3, [r2, #48]	; 0x30
 8005e5a:	4b0d      	ldr	r3, [pc, #52]	; (8005e90 <MX_DMA_Init+0x4c>)
 8005e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e62:	607b      	str	r3, [r7, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005e66:	2300      	movs	r3, #0
 8005e68:	603b      	str	r3, [r7, #0]
 8005e6a:	4b09      	ldr	r3, [pc, #36]	; (8005e90 <MX_DMA_Init+0x4c>)
 8005e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6e:	4a08      	ldr	r2, [pc, #32]	; (8005e90 <MX_DMA_Init+0x4c>)
 8005e70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e74:	6313      	str	r3, [r2, #48]	; 0x30
 8005e76:	4b06      	ldr	r3, [pc, #24]	; (8005e90 <MX_DMA_Init+0x4c>)
 8005e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e7e:	603b      	str	r3, [r7, #0]
 8005e80:	683b      	ldr	r3, [r7, #0]

}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	40023800 	.word	0x40023800

08005e94 <OS_CPU_Load>:
void vApplicationMallocFailedHook(void);
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 1 */
void OS_CPU_Load()
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	af00      	add	r7, sp, #0
	SystemTimer = getRunTimeCounterValue();
 8005e98:	f000 f868 	bl	8005f6c <getRunTimeCounterValue>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	4a08      	ldr	r2, [pc, #32]	; (8005ec0 <OS_CPU_Load+0x2c>)
 8005ea0:	6013      	str	r3, [r2, #0]
	CPU_Load = 100 - (Os_Counter * 100 / SystemTimer);
 8005ea2:	4b08      	ldr	r3, [pc, #32]	; (8005ec4 <OS_CPU_Load+0x30>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2264      	movs	r2, #100	; 0x64
 8005ea8:	fb03 f202 	mul.w	r2, r3, r2
 8005eac:	4b04      	ldr	r3, [pc, #16]	; (8005ec0 <OS_CPU_Load+0x2c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8005eb8:	4a03      	ldr	r2, [pc, #12]	; (8005ec8 <OS_CPU_Load+0x34>)
 8005eba:	6013      	str	r3, [r2, #0]
}
 8005ebc:	bf00      	nop
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	200003c8 	.word	0x200003c8
 8005ec4:	200003ac 	.word	0x200003ac
 8005ec8:	200003c4 	.word	0x200003c4

08005ecc <configureTimerForRunTimeStats>:
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
void configureTimerForRunTimeStats(void)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005ed2:	463b      	mov	r3, r7
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	601a      	str	r2, [r3, #0]
 8005ed8:	605a      	str	r2, [r3, #4]
 8005eda:	609a      	str	r2, [r3, #8]
 8005edc:	60da      	str	r2, [r3, #12]
	htim9.Instance = TIM9;
 8005ede:	4b1f      	ldr	r3, [pc, #124]	; (8005f5c <configureTimerForRunTimeStats+0x90>)
 8005ee0:	4a1f      	ldr	r2, [pc, #124]	; (8005f60 <configureTimerForRunTimeStats+0x94>)
 8005ee2:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 0;
 8005ee4:	4b1d      	ldr	r3, [pc, #116]	; (8005f5c <configureTimerForRunTimeStats+0x90>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005eea:	4b1c      	ldr	r3, [pc, #112]	; (8005f5c <configureTimerForRunTimeStats+0x90>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = (configCPU_CLOCK_HZ / configTICK_RATE_HZ)-1;
 8005ef0:	4b1c      	ldr	r3, [pc, #112]	; (8005f64 <configureTimerForRunTimeStats+0x98>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1c      	ldr	r2, [pc, #112]	; (8005f68 <configureTimerForRunTimeStats+0x9c>)
 8005ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8005efa:	099b      	lsrs	r3, r3, #6
 8005efc:	3b01      	subs	r3, #1
 8005efe:	4a17      	ldr	r2, [pc, #92]	; (8005f5c <configureTimerForRunTimeStats+0x90>)
 8005f00:	60d3      	str	r3, [r2, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f02:	4b16      	ldr	r3, [pc, #88]	; (8005f5c <configureTimerForRunTimeStats+0x90>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f08:	4b14      	ldr	r3, [pc, #80]	; (8005f5c <configureTimerForRunTimeStats+0x90>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8005f0e:	4813      	ldr	r0, [pc, #76]	; (8005f5c <configureTimerForRunTimeStats+0x90>)
 8005f10:	f007 fe9a 	bl	800dc48 <HAL_TIM_Base_Init>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d002      	beq.n	8005f20 <configureTimerForRunTimeStats+0x54>
	{
		HAL_TIM_ErrorCallback(&htim9);
 8005f1a:	4810      	ldr	r0, [pc, #64]	; (8005f5c <configureTimerForRunTimeStats+0x90>)
 8005f1c:	f00c f898 	bl	8012050 <HAL_TIM_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f24:	603b      	str	r3, [r7, #0]
	if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8005f26:	463b      	mov	r3, r7
 8005f28:	4619      	mov	r1, r3
 8005f2a:	480c      	ldr	r0, [pc, #48]	; (8005f5c <configureTimerForRunTimeStats+0x90>)
 8005f2c:	f008 fd66 	bl	800e9fc <HAL_TIM_ConfigClockSource>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <configureTimerForRunTimeStats+0x70>
	{
		HAL_TIM_ErrorCallback(&htim9);
 8005f36:	4809      	ldr	r0, [pc, #36]	; (8005f5c <configureTimerForRunTimeStats+0x90>)
 8005f38:	f00c f88a 	bl	8012050 <HAL_TIM_ErrorCallback>
	else
	{
		/* do nothing */
	}
	/* TIM1_BRK_TIM9_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 11, 0);
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	210b      	movs	r1, #11
 8005f40:	2018      	movs	r0, #24
 8005f42:	f002 fdc4 	bl	8008ace <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005f46:	2018      	movs	r0, #24
 8005f48:	f002 fddd 	bl	8008b06 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim9);
 8005f4c:	4803      	ldr	r0, [pc, #12]	; (8005f5c <configureTimerForRunTimeStats+0x90>)
 8005f4e:	f007 fed7 	bl	800dd00 <HAL_TIM_Base_Start_IT>
}
 8005f52:	bf00      	nop
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20000a28 	.word	0x20000a28
 8005f60:	40014000 	.word	0x40014000
 8005f64:	2000004c 	.word	0x2000004c
 8005f68:	10624dd3 	.word	0x10624dd3

08005f6c <getRunTimeCounterValue>:
unsigned long getRunTimeCounterValue(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
	return (unsigned long)xTaskGetTickCountFromISR();
 8005f70:	f00e fcb0 	bl	80148d4 <xTaskGetTickCountFromISR>
 8005f74:	4603      	mov	r3, r0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	af00      	add	r7, sp, #0

}
 8005f7e:	bf00      	nop
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook(void)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	af00      	add	r7, sp, #0
	Os_Counter++;
 8005f8c:	4b04      	ldr	r3, [pc, #16]	; (8005fa0 <vApplicationTickHook+0x18>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3301      	adds	r3, #1
 8005f92:	4a03      	ldr	r2, [pc, #12]	; (8005fa0 <vApplicationTickHook+0x18>)
 8005f94:	6013      	str	r3, [r2, #0]
}
 8005f96:	bf00      	nop
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	200003ac 	.word	0x200003ac

08005fa4 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
   SystemManager_SetFault(STACK_OVERFLOW_RESET);
 8005fae:	200c      	movs	r0, #12
 8005fb0:	f011 fb5e 	bl	8017670 <SystemManager_SetFault>
   SystemManager_PerformReset();
 8005fb4:	f011 fba4 	bl	8017700 <SystemManager_PerformReset>
}
 8005fb8:	bf00      	nop
 8005fba:	3708      	adds	r7, #8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	af00      	add	r7, sp, #0
	SystemManager_SetFault(MALLOC_FAILED_RESET);
 8005fc4:	200d      	movs	r0, #13
 8005fc6:	f011 fb53 	bl	8017670 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8005fca:	f011 fb99 	bl	8017700 <SystemManager_PerformReset>
}
 8005fce:	bf00      	nop
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;
	HAL_MPU_Disable();
 8005fd8:	f002 fdb6 	bl	8008b48 <HAL_MPU_Disable>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = FLASH_BASE;
 8005fe0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fe4:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8005fe6:	2311      	movs	r3, #17
 8005fe8:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO;
 8005fea:	2305      	movs	r3, #5
 8005fec:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8006002:	2300      	movs	r3, #0
 8006004:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8006006:	2300      	movs	r3, #0
 8006008:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800600a:	2301      	movs	r3, #1
 800600c:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x20000000;
 800600e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006012:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8006014:	230d      	movs	r3, #13
 8006016:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8006018:	2303      	movs	r3, #3
 800601a:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800601c:	2301      	movs	r3, #1
 800601e:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8006020:	2301      	movs	r3, #1
 8006022:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8006024:	2301      	movs	r3, #1
 8006026:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8006028:	2301      	movs	r3, #1
 800602a:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800602c:	2300      	movs	r3, #0
 800602e:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8006030:	2300      	movs	r3, #0
 8006032:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8006034:	2300      	movs	r3, #0
 8006036:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006038:	463b      	mov	r3, r7
 800603a:	4618      	mov	r0, r3
 800603c:	f002 fdbc 	bl	8008bb8 <HAL_MPU_ConfigRegion>
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8006040:	2004      	movs	r0, #4
 8006042:	f002 fd99 	bl	8008b78 <HAL_MPU_Enable>
}
 8006046:	bf00      	nop
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <PreSleepProcessing>:
/* USER CODE END DAEMON_TASK_STARTUP_HOOK */

/* USER CODE BEGIN PREPOSTSLEEP */
void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 800604e:	b480      	push	{r7}
 8006050:	b083      	sub	sp, #12
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]

}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <PostSleepProcessing>:

void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]

}
 800606a:	bf00      	nop
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
	...

08006078 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Os_SecAlm_AlarmReset */
  Os_SecAlm_AlarmResetHandle = osTimerNew(Os_SecAlm_AlarmReset_Callback, osTimerPeriodic, NULL, &Os_SecAlm_AlarmReset_attributes);
 800607c:	4b61      	ldr	r3, [pc, #388]	; (8006204 <MX_FREERTOS_Init+0x18c>)
 800607e:	2200      	movs	r2, #0
 8006080:	2101      	movs	r1, #1
 8006082:	4861      	ldr	r0, [pc, #388]	; (8006208 <MX_FREERTOS_Init+0x190>)
 8006084:	f00c fac4 	bl	8012610 <osTimerNew>
 8006088:	4603      	mov	r3, r0
 800608a:	4a60      	ldr	r2, [pc, #384]	; (800620c <MX_FREERTOS_Init+0x194>)
 800608c:	6013      	str	r3, [r2, #0]

  /* creation of Os_CenLoc_LockUnlockSequence_Timer */
  Os_CenLoc_LockUnlockSequence_TimerHandle = osTimerNew(Os_CenLoc_LockUnlockSequence_Timer_Callback, osTimerPeriodic, NULL, &Os_CenLoc_LockUnlockSequence_Timer_attributes);
 800608e:	4b60      	ldr	r3, [pc, #384]	; (8006210 <MX_FREERTOS_Init+0x198>)
 8006090:	2200      	movs	r2, #0
 8006092:	2101      	movs	r1, #1
 8006094:	485f      	ldr	r0, [pc, #380]	; (8006214 <MX_FREERTOS_Init+0x19c>)
 8006096:	f00c fabb 	bl	8012610 <osTimerNew>
 800609a:	4603      	mov	r3, r0
 800609c:	4a5e      	ldr	r2, [pc, #376]	; (8006218 <MX_FREERTOS_Init+0x1a0>)
 800609e:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmLed_TurnOnCyclic_Timer */
  Os_SecAlmLed_TurnOnCyclic_TimerHandle = osTimerNew(Os_SecAlmLed_TurnOnCyclic_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmLed_TurnOnCyclic_Timer_attributes);
 80060a0:	4b5e      	ldr	r3, [pc, #376]	; (800621c <MX_FREERTOS_Init+0x1a4>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	2101      	movs	r1, #1
 80060a6:	485e      	ldr	r0, [pc, #376]	; (8006220 <MX_FREERTOS_Init+0x1a8>)
 80060a8:	f00c fab2 	bl	8012610 <osTimerNew>
 80060ac:	4603      	mov	r3, r0
 80060ae:	4a5d      	ldr	r2, [pc, #372]	; (8006224 <MX_FREERTOS_Init+0x1ac>)
 80060b0:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmLedTurnOn_Timer */
  Os_SecAlmLedTurnOn_TimerHandle = osTimerNew(Os_SecAlmLedTurnOn_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmLedTurnOn_Timer_attributes);
 80060b2:	4b5d      	ldr	r3, [pc, #372]	; (8006228 <MX_FREERTOS_Init+0x1b0>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	2101      	movs	r1, #1
 80060b8:	485c      	ldr	r0, [pc, #368]	; (800622c <MX_FREERTOS_Init+0x1b4>)
 80060ba:	f00c faa9 	bl	8012610 <osTimerNew>
 80060be:	4603      	mov	r3, r0
 80060c0:	4a5b      	ldr	r2, [pc, #364]	; (8006230 <MX_FREERTOS_Init+0x1b8>)
 80060c2:	6013      	str	r3, [r2, #0]

  /* creation of Os_FollowMeHome_Timer */
  Os_FollowMeHome_TimerHandle = osTimerNew(Os_FollowMeHome_Timer_Callback, osTimerPeriodic, NULL, &Os_FollowMeHome_Timer_attributes);
 80060c4:	4b5b      	ldr	r3, [pc, #364]	; (8006234 <MX_FREERTOS_Init+0x1bc>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	2101      	movs	r1, #1
 80060ca:	485b      	ldr	r0, [pc, #364]	; (8006238 <MX_FREERTOS_Init+0x1c0>)
 80060cc:	f00c faa0 	bl	8012610 <osTimerNew>
 80060d0:	4603      	mov	r3, r0
 80060d2:	4a5a      	ldr	r2, [pc, #360]	; (800623c <MX_FREERTOS_Init+0x1c4>)
 80060d4:	6013      	str	r3, [r2, #0]

  /* creation of Os_TurnSignals_Timer */
  Os_TurnSignals_TimerHandle = osTimerNew(Os_TurnSignals_Timer_Callback, osTimerPeriodic, NULL, &Os_TurnSignals_Timer_attributes);
 80060d6:	4b5a      	ldr	r3, [pc, #360]	; (8006240 <MX_FREERTOS_Init+0x1c8>)
 80060d8:	2200      	movs	r2, #0
 80060da:	2101      	movs	r1, #1
 80060dc:	4859      	ldr	r0, [pc, #356]	; (8006244 <MX_FREERTOS_Init+0x1cc>)
 80060de:	f00c fa97 	bl	8012610 <osTimerNew>
 80060e2:	4603      	mov	r3, r0
 80060e4:	4a58      	ldr	r2, [pc, #352]	; (8006248 <MX_FREERTOS_Init+0x1d0>)
 80060e6:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmAlarm_Timer */
  Os_SecAlmAlarm_TimerHandle = osTimerNew(Os_SecAlmAlarm_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmAlarm_Timer_attributes);
 80060e8:	4b58      	ldr	r3, [pc, #352]	; (800624c <MX_FREERTOS_Init+0x1d4>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	2101      	movs	r1, #1
 80060ee:	4858      	ldr	r0, [pc, #352]	; (8006250 <MX_FREERTOS_Init+0x1d8>)
 80060f0:	f00c fa8e 	bl	8012610 <osTimerNew>
 80060f4:	4603      	mov	r3, r0
 80060f6:	4a57      	ldr	r2, [pc, #348]	; (8006254 <MX_FREERTOS_Init+0x1dc>)
 80060f8:	6013      	str	r3, [r2, #0]

  /* creation of Os_PdcR_Buzzer_Timer */
  Os_PdcR_Buzzer_TimerHandle = osTimerNew(Os_PdcR_Buzzer_Timer_Callback, osTimerOnce, NULL, &Os_PdcR_Buzzer_Timer_attributes);
 80060fa:	4b57      	ldr	r3, [pc, #348]	; (8006258 <MX_FREERTOS_Init+0x1e0>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	2100      	movs	r1, #0
 8006100:	4856      	ldr	r0, [pc, #344]	; (800625c <MX_FREERTOS_Init+0x1e4>)
 8006102:	f00c fa85 	bl	8012610 <osTimerNew>
 8006106:	4603      	mov	r3, r0
 8006108:	4a55      	ldr	r2, [pc, #340]	; (8006260 <MX_FREERTOS_Init+0x1e8>)
 800610a:	6013      	str	r3, [r2, #0]

  /* creation of Os_PdcF_Buzzer_Timer */
  Os_PdcF_Buzzer_TimerHandle = osTimerNew(Os_PdcF_Buzzer_Timer_Callback, osTimerOnce, NULL, &Os_PdcF_Buzzer_Timer_attributes);
 800610c:	4b55      	ldr	r3, [pc, #340]	; (8006264 <MX_FREERTOS_Init+0x1ec>)
 800610e:	2200      	movs	r2, #0
 8006110:	2100      	movs	r1, #0
 8006112:	4855      	ldr	r0, [pc, #340]	; (8006268 <MX_FREERTOS_Init+0x1f0>)
 8006114:	f00c fa7c 	bl	8012610 <osTimerNew>
 8006118:	4603      	mov	r3, r0
 800611a:	4a54      	ldr	r2, [pc, #336]	; (800626c <MX_FREERTOS_Init+0x1f4>)
 800611c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OS_Init */
  OS_InitHandle = osThreadNew(OS_TASK_OS_INIT, NULL, &OS_Init_attributes);
 800611e:	4a54      	ldr	r2, [pc, #336]	; (8006270 <MX_FREERTOS_Init+0x1f8>)
 8006120:	2100      	movs	r1, #0
 8006122:	4854      	ldr	r0, [pc, #336]	; (8006274 <MX_FREERTOS_Init+0x1fc>)
 8006124:	f00c f9cc 	bl	80124c0 <osThreadNew>
 8006128:	4603      	mov	r3, r0
 800612a:	4a53      	ldr	r2, [pc, #332]	; (8006278 <MX_FREERTOS_Init+0x200>)
 800612c:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_PreMain */
  ASIL_APPL_PreMainHandle = osThreadNew(OS_TASK_ASIL_APPL_PreMain, NULL, &ASIL_APPL_PreMain_attributes);
 800612e:	4a53      	ldr	r2, [pc, #332]	; (800627c <MX_FREERTOS_Init+0x204>)
 8006130:	2100      	movs	r1, #0
 8006132:	4853      	ldr	r0, [pc, #332]	; (8006280 <MX_FREERTOS_Init+0x208>)
 8006134:	f00c f9c4 	bl	80124c0 <osThreadNew>
 8006138:	4603      	mov	r3, r0
 800613a:	4a52      	ldr	r2, [pc, #328]	; (8006284 <MX_FREERTOS_Init+0x20c>)
 800613c:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_Main */
  ASIL_APPL_MainHandle = osThreadNew(OS_TASK_ASIL_APPL_Main, NULL, &ASIL_APPL_Main_attributes);
 800613e:	4a52      	ldr	r2, [pc, #328]	; (8006288 <MX_FREERTOS_Init+0x210>)
 8006140:	2100      	movs	r1, #0
 8006142:	4852      	ldr	r0, [pc, #328]	; (800628c <MX_FREERTOS_Init+0x214>)
 8006144:	f00c f9bc 	bl	80124c0 <osThreadNew>
 8006148:	4603      	mov	r3, r0
 800614a:	4a51      	ldr	r2, [pc, #324]	; (8006290 <MX_FREERTOS_Init+0x218>)
 800614c:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_PostMain */
  ASIL_APPL_PostMainHandle = osThreadNew(OS_TASK_ASIL_APPL_PostMain, NULL, &ASIL_APPL_PostMain_attributes);
 800614e:	4a51      	ldr	r2, [pc, #324]	; (8006294 <MX_FREERTOS_Init+0x21c>)
 8006150:	2100      	movs	r1, #0
 8006152:	4851      	ldr	r0, [pc, #324]	; (8006298 <MX_FREERTOS_Init+0x220>)
 8006154:	f00c f9b4 	bl	80124c0 <osThreadNew>
 8006158:	4603      	mov	r3, r0
 800615a:	4a50      	ldr	r2, [pc, #320]	; (800629c <MX_FREERTOS_Init+0x224>)
 800615c:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_PreMain */
  QM_APPL_PreMainHandle = osThreadNew(OS_TASK_QM_APPL_PreMain, NULL, &QM_APPL_PreMain_attributes);
 800615e:	4a50      	ldr	r2, [pc, #320]	; (80062a0 <MX_FREERTOS_Init+0x228>)
 8006160:	2100      	movs	r1, #0
 8006162:	4850      	ldr	r0, [pc, #320]	; (80062a4 <MX_FREERTOS_Init+0x22c>)
 8006164:	f00c f9ac 	bl	80124c0 <osThreadNew>
 8006168:	4603      	mov	r3, r0
 800616a:	4a4f      	ldr	r2, [pc, #316]	; (80062a8 <MX_FREERTOS_Init+0x230>)
 800616c:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_Main */
  QM_APPL_MainHandle = osThreadNew(OS_TASK_QM_APPL_Main, NULL, &QM_APPL_Main_attributes);
 800616e:	4a4f      	ldr	r2, [pc, #316]	; (80062ac <MX_FREERTOS_Init+0x234>)
 8006170:	2100      	movs	r1, #0
 8006172:	484f      	ldr	r0, [pc, #316]	; (80062b0 <MX_FREERTOS_Init+0x238>)
 8006174:	f00c f9a4 	bl	80124c0 <osThreadNew>
 8006178:	4603      	mov	r3, r0
 800617a:	4a4e      	ldr	r2, [pc, #312]	; (80062b4 <MX_FREERTOS_Init+0x23c>)
 800617c:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_PostMain */
  QM_APPL_PostMainHandle = osThreadNew(OS_TASK_QM_APPL_PostMain, NULL, &QM_APPL_PostMain_attributes);
 800617e:	4a4e      	ldr	r2, [pc, #312]	; (80062b8 <MX_FREERTOS_Init+0x240>)
 8006180:	2100      	movs	r1, #0
 8006182:	484e      	ldr	r0, [pc, #312]	; (80062bc <MX_FREERTOS_Init+0x244>)
 8006184:	f00c f99c 	bl	80124c0 <osThreadNew>
 8006188:	4603      	mov	r3, r0
 800618a:	4a4d      	ldr	r2, [pc, #308]	; (80062c0 <MX_FREERTOS_Init+0x248>)
 800618c:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_PreMain */
  ASIL_BSW_PreMainHandle = osThreadNew(OS_TASK_ASIL_BSW_PreMain, NULL, &ASIL_BSW_PreMain_attributes);
 800618e:	4a4d      	ldr	r2, [pc, #308]	; (80062c4 <MX_FREERTOS_Init+0x24c>)
 8006190:	2100      	movs	r1, #0
 8006192:	484d      	ldr	r0, [pc, #308]	; (80062c8 <MX_FREERTOS_Init+0x250>)
 8006194:	f00c f994 	bl	80124c0 <osThreadNew>
 8006198:	4603      	mov	r3, r0
 800619a:	4a4c      	ldr	r2, [pc, #304]	; (80062cc <MX_FREERTOS_Init+0x254>)
 800619c:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_Main */
  ASIL_BSW_MainHandle = osThreadNew(OS_TASK_ASIL_BSW_Main, NULL, &ASIL_BSW_Main_attributes);
 800619e:	4a4c      	ldr	r2, [pc, #304]	; (80062d0 <MX_FREERTOS_Init+0x258>)
 80061a0:	2100      	movs	r1, #0
 80061a2:	484c      	ldr	r0, [pc, #304]	; (80062d4 <MX_FREERTOS_Init+0x25c>)
 80061a4:	f00c f98c 	bl	80124c0 <osThreadNew>
 80061a8:	4603      	mov	r3, r0
 80061aa:	4a4b      	ldr	r2, [pc, #300]	; (80062d8 <MX_FREERTOS_Init+0x260>)
 80061ac:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_PostMain */
  ASIL_BSW_PostMainHandle = osThreadNew(OS_TASK_ASIL_BSW_PostMain, NULL, &ASIL_BSW_PostMain_attributes);
 80061ae:	4a4b      	ldr	r2, [pc, #300]	; (80062dc <MX_FREERTOS_Init+0x264>)
 80061b0:	2100      	movs	r1, #0
 80061b2:	484b      	ldr	r0, [pc, #300]	; (80062e0 <MX_FREERTOS_Init+0x268>)
 80061b4:	f00c f984 	bl	80124c0 <osThreadNew>
 80061b8:	4603      	mov	r3, r0
 80061ba:	4a4a      	ldr	r2, [pc, #296]	; (80062e4 <MX_FREERTOS_Init+0x26c>)
 80061bc:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_PreMain */
  QM_BSW_PreMainHandle = osThreadNew(OS_TASK_QM_BSW_PreMain, NULL, &QM_BSW_PreMain_attributes);
 80061be:	4a4a      	ldr	r2, [pc, #296]	; (80062e8 <MX_FREERTOS_Init+0x270>)
 80061c0:	2100      	movs	r1, #0
 80061c2:	484a      	ldr	r0, [pc, #296]	; (80062ec <MX_FREERTOS_Init+0x274>)
 80061c4:	f00c f97c 	bl	80124c0 <osThreadNew>
 80061c8:	4603      	mov	r3, r0
 80061ca:	4a49      	ldr	r2, [pc, #292]	; (80062f0 <MX_FREERTOS_Init+0x278>)
 80061cc:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_Main */
  QM_BSW_MainHandle = osThreadNew(OS_TASK_QM_BSW_Main, NULL, &QM_BSW_Main_attributes);
 80061ce:	4a49      	ldr	r2, [pc, #292]	; (80062f4 <MX_FREERTOS_Init+0x27c>)
 80061d0:	2100      	movs	r1, #0
 80061d2:	4849      	ldr	r0, [pc, #292]	; (80062f8 <MX_FREERTOS_Init+0x280>)
 80061d4:	f00c f974 	bl	80124c0 <osThreadNew>
 80061d8:	4603      	mov	r3, r0
 80061da:	4a48      	ldr	r2, [pc, #288]	; (80062fc <MX_FREERTOS_Init+0x284>)
 80061dc:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_PostMain */
  QM_BSW_PostMainHandle = osThreadNew(OS_TASK_QM_BSW_PostMain, NULL, &QM_BSW_PostMain_attributes);
 80061de:	4a48      	ldr	r2, [pc, #288]	; (8006300 <MX_FREERTOS_Init+0x288>)
 80061e0:	2100      	movs	r1, #0
 80061e2:	4848      	ldr	r0, [pc, #288]	; (8006304 <MX_FREERTOS_Init+0x28c>)
 80061e4:	f00c f96c 	bl	80124c0 <osThreadNew>
 80061e8:	4603      	mov	r3, r0
 80061ea:	4a47      	ldr	r2, [pc, #284]	; (8006308 <MX_FREERTOS_Init+0x290>)
 80061ec:	6013      	str	r3, [r2, #0]

  /* creation of I2C_ISR */
  I2C_ISRHandle = osThreadNew(OS_TASK_I2C_ISR, NULL, &I2C_ISR_attributes);
 80061ee:	4a47      	ldr	r2, [pc, #284]	; (800630c <MX_FREERTOS_Init+0x294>)
 80061f0:	2100      	movs	r1, #0
 80061f2:	4847      	ldr	r0, [pc, #284]	; (8006310 <MX_FREERTOS_Init+0x298>)
 80061f4:	f00c f964 	bl	80124c0 <osThreadNew>
 80061f8:	4603      	mov	r3, r0
 80061fa:	4a46      	ldr	r2, [pc, #280]	; (8006314 <MX_FREERTOS_Init+0x29c>)
 80061fc:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

}
 80061fe:	bf00      	nop
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	08018a94 	.word	0x08018a94
 8006208:	080064d1 	.word	0x080064d1
 800620c:	20000434 	.word	0x20000434
 8006210:	08018aa4 	.word	0x08018aa4
 8006214:	080064e9 	.word	0x080064e9
 8006218:	20000438 	.word	0x20000438
 800621c:	08018ab4 	.word	0x08018ab4
 8006220:	08006551 	.word	0x08006551
 8006224:	2000043c 	.word	0x2000043c
 8006228:	08018ac4 	.word	0x08018ac4
 800622c:	08006579 	.word	0x08006579
 8006230:	20000440 	.word	0x20000440
 8006234:	08018ad4 	.word	0x08018ad4
 8006238:	080065a1 	.word	0x080065a1
 800623c:	20000444 	.word	0x20000444
 8006240:	08018ae4 	.word	0x08018ae4
 8006244:	080065c9 	.word	0x080065c9
 8006248:	20000448 	.word	0x20000448
 800624c:	08018af4 	.word	0x08018af4
 8006250:	08006639 	.word	0x08006639
 8006254:	2000044c 	.word	0x2000044c
 8006258:	08018b04 	.word	0x08018b04
 800625c:	08006661 	.word	0x08006661
 8006260:	20000450 	.word	0x20000450
 8006264:	08018b14 	.word	0x08018b14
 8006268:	0800667d 	.word	0x0800667d
 800626c:	20000454 	.word	0x20000454
 8006270:	0801889c 	.word	0x0801889c
 8006274:	08006319 	.word	0x08006319
 8006278:	200003fc 	.word	0x200003fc
 800627c:	080188c0 	.word	0x080188c0
 8006280:	08006331 	.word	0x08006331
 8006284:	20000400 	.word	0x20000400
 8006288:	080188e4 	.word	0x080188e4
 800628c:	08006359 	.word	0x08006359
 8006290:	20000404 	.word	0x20000404
 8006294:	08018908 	.word	0x08018908
 8006298:	08006375 	.word	0x08006375
 800629c:	20000408 	.word	0x20000408
 80062a0:	0801892c 	.word	0x0801892c
 80062a4:	08006391 	.word	0x08006391
 80062a8:	2000040c 	.word	0x2000040c
 80062ac:	08018950 	.word	0x08018950
 80062b0:	080063ad 	.word	0x080063ad
 80062b4:	20000410 	.word	0x20000410
 80062b8:	08018974 	.word	0x08018974
 80062bc:	080063c9 	.word	0x080063c9
 80062c0:	20000414 	.word	0x20000414
 80062c4:	08018998 	.word	0x08018998
 80062c8:	080063ed 	.word	0x080063ed
 80062cc:	20000418 	.word	0x20000418
 80062d0:	080189bc 	.word	0x080189bc
 80062d4:	08006415 	.word	0x08006415
 80062d8:	2000041c 	.word	0x2000041c
 80062dc:	080189e0 	.word	0x080189e0
 80062e0:	08006435 	.word	0x08006435
 80062e4:	20000420 	.word	0x20000420
 80062e8:	08018a04 	.word	0x08018a04
 80062ec:	08006451 	.word	0x08006451
 80062f0:	20000424 	.word	0x20000424
 80062f4:	08018a28 	.word	0x08018a28
 80062f8:	08006475 	.word	0x08006475
 80062fc:	20000428 	.word	0x20000428
 8006300:	08018a4c 	.word	0x08018a4c
 8006304:	08006491 	.word	0x08006491
 8006308:	2000042c 	.word	0x2000042c
 800630c:	08018a70 	.word	0x08018a70
 8006310:	080064ad 	.word	0x080064ad
 8006314:	20000430 	.word	0x20000430

08006318 <OS_TASK_OS_INIT>:

/* USER CODE BEGIN Header_OS_TASK_OS_INIT */
/* USER CODE END Header_OS_TASK_OS_INIT */
void OS_TASK_OS_INIT(void *argument)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_OS_INIT */
	for(;;)
	{
		EcuM_DriverInit();
 8006320:	f011 f80e 	bl	8017340 <EcuM_DriverInit>
		OS_CPU_Load();
 8006324:	f7ff fdb6 	bl	8005e94 <OS_CPU_Load>
		vTaskSuspend(NULL);
 8006328:	2000      	movs	r0, #0
 800632a:	f00d fff5 	bl	8014318 <vTaskSuspend>
		EcuM_DriverInit();
 800632e:	e7f7      	b.n	8006320 <OS_TASK_OS_INIT+0x8>

08006330 <OS_TASK_ASIL_APPL_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_APPL_PreMain */
/* USER CODE END Header_OS_TASK_ASIL_APPL_PreMain */
void OS_TASK_ASIL_APPL_PreMain(void *argument)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_APPL_PreMain */
	for(;;)
	{
		Rte_Runnable_Btc_MainFunction();
 8006338:	f010 f868 	bl	801640c <Rte_Runnable_Btc_MainFunction>
		Rte_Runnable_CenLoc_MainFunction();
 800633c:	f010 f86c 	bl	8016418 <Rte_Runnable_CenLoc_MainFunction>
		Rte_Runnable_ExtLights_MainFunction();
 8006340:	f010 f870 	bl	8016424 <Rte_Runnable_ExtLights_MainFunction>
		Rte_Runnable_IntLights_MainFunction();
 8006344:	f010 f874 	bl	8016430 <Rte_Runnable_IntLights_MainFunction>
		vTaskDelayUntil(&ASIL_APPL_PreMain, pdMS_TO_TICKS(5));
 8006348:	2105      	movs	r1, #5
 800634a:	4802      	ldr	r0, [pc, #8]	; (8006354 <OS_TASK_ASIL_APPL_PreMain+0x24>)
 800634c:	f00d ff66 	bl	801421c <vTaskDelayUntil>
		Rte_Runnable_Btc_MainFunction();
 8006350:	e7f2      	b.n	8006338 <OS_TASK_ASIL_APPL_PreMain+0x8>
 8006352:	bf00      	nop
 8006354:	200003cc 	.word	0x200003cc

08006358 <OS_TASK_ASIL_APPL_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_APPL_Main */
/* USER CODE END Header_OS_TASK_ASIL_APPL_Main */
void OS_TASK_ASIL_APPL_Main(void *argument)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_APPL_Main */
	for(;;)
	{
		Rte_Runnable_SenCtrl_MainFunction();
 8006360:	f010 f8c3 	bl	80164ea <Rte_Runnable_SenCtrl_MainFunction>
		vTaskDelayUntil(&ASIL_APPL_Main, pdMS_TO_TICKS(5));
 8006364:	2105      	movs	r1, #5
 8006366:	4802      	ldr	r0, [pc, #8]	; (8006370 <OS_TASK_ASIL_APPL_Main+0x18>)
 8006368:	f00d ff58 	bl	801421c <vTaskDelayUntil>
		Rte_Runnable_SenCtrl_MainFunction();
 800636c:	e7f8      	b.n	8006360 <OS_TASK_ASIL_APPL_Main+0x8>
 800636e:	bf00      	nop
 8006370:	200003d0 	.word	0x200003d0

08006374 <OS_TASK_ASIL_APPL_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_APPL_PostMain */
/* USER CODE END Header_OS_TASK_ASIL_APPL_PostMain */
void OS_TASK_ASIL_APPL_PostMain(void *argument)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_APPL_PostMain */
	for(;;)
	{
		Rte_Runnable_DiagCtrl_MainFunction();
 800637c:	f010 f8af 	bl	80164de <Rte_Runnable_DiagCtrl_MainFunction>
		vTaskDelayUntil(&ASIL_APPL_PostMain, pdMS_TO_TICKS(5));
 8006380:	2105      	movs	r1, #5
 8006382:	4802      	ldr	r0, [pc, #8]	; (800638c <OS_TASK_ASIL_APPL_PostMain+0x18>)
 8006384:	f00d ff4a 	bl	801421c <vTaskDelayUntil>
		Rte_Runnable_DiagCtrl_MainFunction();
 8006388:	e7f8      	b.n	800637c <OS_TASK_ASIL_APPL_PostMain+0x8>
 800638a:	bf00      	nop
 800638c:	200003d4 	.word	0x200003d4

08006390 <OS_TASK_QM_APPL_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_APPL_PreMain */
/* USER CODE END Header_OS_TASK_QM_APPL_PreMain */
void OS_TASK_QM_APPL_PreMain(void *argument)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_APPL_PreMain */
	for(;;)
	{
		Rte_Runnable_SecAlm_MainFunction();
 8006398:	f010 f850 	bl	801643c <Rte_Runnable_SecAlm_MainFunction>
		vTaskDelayUntil(&QM_APPL_PreMain, pdMS_TO_TICKS(5));
 800639c:	2105      	movs	r1, #5
 800639e:	4802      	ldr	r0, [pc, #8]	; (80063a8 <OS_TASK_QM_APPL_PreMain+0x18>)
 80063a0:	f00d ff3c 	bl	801421c <vTaskDelayUntil>
		Rte_Runnable_SecAlm_MainFunction();
 80063a4:	e7f8      	b.n	8006398 <OS_TASK_QM_APPL_PreMain+0x8>
 80063a6:	bf00      	nop
 80063a8:	200003d8 	.word	0x200003d8

080063ac <OS_TASK_QM_APPL_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_APPL_Main */
/* USER CODE END Header_OS_TASK_QM_APPL_Main */
void OS_TASK_QM_APPL_Main(void *argument)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_APPL_Main */
	for(;;)
	{
		Rte_Runnable_Pdc_MainFunction();
 80063b4:	f010 f8a5 	bl	8016502 <Rte_Runnable_Pdc_MainFunction>
		vTaskDelayUntil(&QM_APPL_Main, pdMS_TO_TICKS(100));
 80063b8:	2164      	movs	r1, #100	; 0x64
 80063ba:	4802      	ldr	r0, [pc, #8]	; (80063c4 <OS_TASK_QM_APPL_Main+0x18>)
 80063bc:	f00d ff2e 	bl	801421c <vTaskDelayUntil>
		Rte_Runnable_Pdc_MainFunction();
 80063c0:	e7f8      	b.n	80063b4 <OS_TASK_QM_APPL_Main+0x8>
 80063c2:	bf00      	nop
 80063c4:	200003dc 	.word	0x200003dc

080063c8 <OS_TASK_QM_APPL_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_APPL_PostMain */
/* USER CODE END Header_OS_TASK_QM_APPL_PostMain */
void OS_TASK_QM_APPL_PostMain(void *argument)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_APPL_PostMain */
	for(;;)
	{
		vTaskResume(I2C_ISRHandle);
 80063d0:	4b04      	ldr	r3, [pc, #16]	; (80063e4 <OS_TASK_QM_APPL_PostMain+0x1c>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f00e f847 	bl	8014468 <vTaskResume>
		vTaskDelayUntil(&QM_APPL_PostMain, pdMS_TO_TICKS(250));
 80063da:	21fa      	movs	r1, #250	; 0xfa
 80063dc:	4802      	ldr	r0, [pc, #8]	; (80063e8 <OS_TASK_QM_APPL_PostMain+0x20>)
 80063de:	f00d ff1d 	bl	801421c <vTaskDelayUntil>
		vTaskResume(I2C_ISRHandle);
 80063e2:	e7f5      	b.n	80063d0 <OS_TASK_QM_APPL_PostMain+0x8>
 80063e4:	20000430 	.word	0x20000430
 80063e8:	200003e0 	.word	0x200003e0

080063ec <OS_TASK_ASIL_BSW_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_PreMain */
/* USER CODE END Header_OS_TASK_ASIL_BSW_PreMain */
void OS_TASK_ASIL_BSW_PreMain(void *argument)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_PreMain */
	for(;;)
	{
		OS_CPU_Load();
 80063f4:	f7ff fd4e 	bl	8005e94 <OS_CPU_Load>
		Rte_Runnable_Wdg_MainFunction();
 80063f8:	f00f fe5e 	bl	80160b8 <Rte_Runnable_Wdg_MainFunction>
		Rte_Runnable_Uart_MainFunction();
 80063fc:	f00f fe6e 	bl	80160dc <Rte_Runnable_Uart_MainFunction>
		Rte_Runnable_Crc_MainFunction();
 8006400:	f00f fe54 	bl	80160ac <Rte_Runnable_Crc_MainFunction>
		vTaskDelayUntil(&ASIL_BSW_PreMain, pdMS_TO_TICKS(5));
 8006404:	2105      	movs	r1, #5
 8006406:	4802      	ldr	r0, [pc, #8]	; (8006410 <OS_TASK_ASIL_BSW_PreMain+0x24>)
 8006408:	f00d ff08 	bl	801421c <vTaskDelayUntil>
		OS_CPU_Load();
 800640c:	e7f2      	b.n	80063f4 <OS_TASK_ASIL_BSW_PreMain+0x8>
 800640e:	bf00      	nop
 8006410:	200003e4 	.word	0x200003e4

08006414 <OS_TASK_ASIL_BSW_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_Main */
/* USER CODE END Header_OS_TASK_ASIL_BSW_Main */
void OS_TASK_ASIL_BSW_Main(void *argument)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_Main */
	for(;;)
	{
		Rte_Runnable_Spi_MainFunction();
 800641c:	f010 f889 	bl	8016532 <Rte_Runnable_Spi_MainFunction>
		Rte_Runnable_Can_MainFunction();
 8006420:	f010 f875 	bl	801650e <Rte_Runnable_Can_MainFunction>
		vTaskDelayUntil(&ASIL_BSW_Main, pdMS_TO_TICKS(5));
 8006424:	2105      	movs	r1, #5
 8006426:	4802      	ldr	r0, [pc, #8]	; (8006430 <OS_TASK_ASIL_BSW_Main+0x1c>)
 8006428:	f00d fef8 	bl	801421c <vTaskDelayUntil>
		Rte_Runnable_Spi_MainFunction();
 800642c:	e7f6      	b.n	800641c <OS_TASK_ASIL_BSW_Main+0x8>
 800642e:	bf00      	nop
 8006430:	200003e8 	.word	0x200003e8

08006434 <OS_TASK_ASIL_BSW_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_PostMain */
/* USER CODE END Header_OS_TASK_ASIL_BSW_PostMain */
void OS_TASK_ASIL_BSW_PostMain(void *argument)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_PostMain */
	for(;;)
	{
		Rte_Runnable_Tim_MainFunction();
 800643c:	f00f fe48 	bl	80160d0 <Rte_Runnable_Tim_MainFunction>
		vTaskDelayUntil(&ASIL_BSW_PostMain, pdMS_TO_TICKS(5));
 8006440:	2105      	movs	r1, #5
 8006442:	4802      	ldr	r0, [pc, #8]	; (800644c <OS_TASK_ASIL_BSW_PostMain+0x18>)
 8006444:	f00d feea 	bl	801421c <vTaskDelayUntil>
		Rte_Runnable_Tim_MainFunction();
 8006448:	e7f8      	b.n	800643c <OS_TASK_ASIL_BSW_PostMain+0x8>
 800644a:	bf00      	nop
 800644c:	200003ec 	.word	0x200003ec

08006450 <OS_TASK_QM_BSW_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_PreMain */
/* USER CODE END Header_OS_TASK_QM_BSW_PreMain */
void OS_TASK_QM_BSW_PreMain(void *argument)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_PreMain */
	for(;;)
	{
		Rte_Runnable_EcuM_MainFunction();
 8006458:	f00f fe1c 	bl	8016094 <Rte_Runnable_EcuM_MainFunction>
		Rte_Runnable_SystemManager_MainFunction();
 800645c:	f00f fe20 	bl	80160a0 <Rte_Runnable_SystemManager_MainFunction>
		Rte_Runnable_Adc_MainFunction();
 8006460:	f00f fe30 	bl	80160c4 <Rte_Runnable_Adc_MainFunction>
		vTaskDelayUntil(&QM_BSW_PreMain, pdMS_TO_TICKS(5));
 8006464:	2105      	movs	r1, #5
 8006466:	4802      	ldr	r0, [pc, #8]	; (8006470 <OS_TASK_QM_BSW_PreMain+0x20>)
 8006468:	f00d fed8 	bl	801421c <vTaskDelayUntil>
		Rte_Runnable_EcuM_MainFunction();
 800646c:	e7f4      	b.n	8006458 <OS_TASK_QM_BSW_PreMain+0x8>
 800646e:	bf00      	nop
 8006470:	200003f0 	.word	0x200003f0

08006474 <OS_TASK_QM_BSW_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_Main */
/* USER CODE END Header_OS_TASK_QM_BSW_Main */
void OS_TASK_QM_BSW_Main(void *argument)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_Main */
	for(;;)
	{
		Rte_Runnable_I2c_MainFunction();
 800647c:	f010 f84d 	bl	801651a <Rte_Runnable_I2c_MainFunction>
		vTaskDelayUntil(&QM_BSW_Main, pdMS_TO_TICKS(5));
 8006480:	2105      	movs	r1, #5
 8006482:	4802      	ldr	r0, [pc, #8]	; (800648c <OS_TASK_QM_BSW_Main+0x18>)
 8006484:	f00d feca 	bl	801421c <vTaskDelayUntil>
		Rte_Runnable_I2c_MainFunction();
 8006488:	e7f8      	b.n	800647c <OS_TASK_QM_BSW_Main+0x8>
 800648a:	bf00      	nop
 800648c:	200003f4 	.word	0x200003f4

08006490 <OS_TASK_QM_BSW_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_PostMain */
/* USER CODE END Header_OS_TASK_QM_BSW_PostMain */
void OS_TASK_QM_BSW_PostMain(void *argument)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_PostMain */
  for(;;)
  {
	  Rte_Runnable_Dem_MainFunction();
 8006498:	f010 f845 	bl	8016526 <Rte_Runnable_Dem_MainFunction>
	  vTaskDelayUntil(&QM_BSW_PostMain, pdMS_TO_TICKS(5));
 800649c:	2105      	movs	r1, #5
 800649e:	4802      	ldr	r0, [pc, #8]	; (80064a8 <OS_TASK_QM_BSW_PostMain+0x18>)
 80064a0:	f00d febc 	bl	801421c <vTaskDelayUntil>
	  Rte_Runnable_Dem_MainFunction();
 80064a4:	e7f8      	b.n	8006498 <OS_TASK_QM_BSW_PostMain+0x8>
 80064a6:	bf00      	nop
 80064a8:	200003f8 	.word	0x200003f8

080064ac <OS_TASK_I2C_ISR>:
}

/* USER CODE BEGIN Header_OS_TASK_I2C_ISR */
/* USER CODE END Header_OS_TASK_I2C_ISR */
void OS_TASK_I2C_ISR(void *argument)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_I2C_ISR */
	for(;;)
	{
		if(I2c_Lcd_Init_Flag == STD_LOW)
 80064b4:	4b05      	ldr	r3, [pc, #20]	; (80064cc <OS_TASK_I2C_ISR+0x20>)
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <OS_TASK_I2C_ISR+0x14>
		{
			I2cLcd_Init();
 80064bc:	f7fe ffae 	bl	800541c <I2cLcd_Init>
		}
		else
		{
			/* do nothing */
		}
		Rte_Runnable_Hvac_MainFunction();
 80064c0:	f010 f819 	bl	80164f6 <Rte_Runnable_Hvac_MainFunction>
		vTaskSuspend(NULL);
 80064c4:	2000      	movs	r0, #0
 80064c6:	f00d ff27 	bl	8014318 <vTaskSuspend>
		if(I2c_Lcd_Init_Flag == STD_LOW)
 80064ca:	e7f3      	b.n	80064b4 <OS_TASK_I2C_ISR+0x8>
 80064cc:	200003c1 	.word	0x200003c1

080064d0 <Os_SecAlm_AlarmReset_Callback>:
  /* USER CODE END OS_TASK_I2C_ISR */
}

/* Os_SecAlm_AlarmReset_Callback function */
void Os_SecAlm_AlarmReset_Callback(void *argument)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlm_AlarmReset_Callback */
	/* Reset the security alarm counter trigger. */
	Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter((uint16*)0);
 80064d8:	2000      	movs	r0, #0
 80064da:	f00f ff87 	bl	80163ec <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter>
  /* USER CODE END Os_SecAlm_AlarmReset_Callback */
}
 80064de:	bf00      	nop
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
	...

080064e8 <Os_CenLoc_LockUnlockSequence_Timer_Callback>:

/* Os_CenLoc_LockUnlockSequence_Timer_Callback function */
void Os_CenLoc_LockUnlockSequence_Timer_Callback(void *argument)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_CenLoc_LockUnlockSequence_Timer_Callback */
	/* If the counter variable for the lock unlock turn signals sequence is less than or equal to 6
	 * Then if there is either a lock or an unlock sequence increase the counter to process the states
	 * in the application. */
	if(Os_LockUnlockSequence_Counter <= 6
 80064f0:	4b14      	ldr	r3, [pc, #80]	; (8006544 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	2b06      	cmp	r3, #6
 80064f6:	d819      	bhi.n	800652c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
		&& ((Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_HIGH)
 80064f8:	4b13      	ldr	r3, [pc, #76]	; (8006548 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d103      	bne.n	8006508 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x20>
 8006500:	4b12      	ldr	r3, [pc, #72]	; (800654c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d007      	beq.n	8006518 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x30>
		|| (Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_LOW)))
 8006508:	4b0f      	ldr	r3, [pc, #60]	; (8006548 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d10d      	bne.n	800652c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
 8006510:	4b0e      	ldr	r3, [pc, #56]	; (800654c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d109      	bne.n	800652c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
	{
		Os_LockUnlockSequence_Counter = Os_LockUnlockSequence_Counter + 1;
 8006518:	4b0a      	ldr	r3, [pc, #40]	; (8006544 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	3301      	adds	r3, #1
 800651e:	b2da      	uxtb	r2, r3
 8006520:	4b08      	ldr	r3, [pc, #32]	; (8006544 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8006522:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(&Os_LockUnlockSequence_Counter);
 8006524:	4807      	ldr	r0, [pc, #28]	; (8006544 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8006526:	f00f fd35 	bl	8015f94 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>
 800652a:	e006      	b.n	800653a <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x52>
	}
	else
	{
		/* Update the counter with out of bounds value to prevent unexpected triggering. */
		Os_LockUnlockSequence_Counter = 7;
 800652c:	4b05      	ldr	r3, [pc, #20]	; (8006544 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 800652e:	2207      	movs	r2, #7
 8006530:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(&Os_LockUnlockSequence_Counter);
 8006532:	4804      	ldr	r0, [pc, #16]	; (8006544 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8006534:	f00f fd2e 	bl	8015f94 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>
	}

  /* USER CODE END Os_CenLoc_LockUnlockSequence_Timer_Callback */
}
 8006538:	bf00      	nop
 800653a:	bf00      	nop
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	200003b0 	.word	0x200003b0
 8006548:	20000139 	.word	0x20000139
 800654c:	20000141 	.word	0x20000141

08006550 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback>:

/* Os_SecAlmLed_TurnOnCyclic_Timer_Callback function */
void Os_SecAlmLed_TurnOnCyclic_Timer_Callback(void *argument)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmLed_TurnOnCyclic_Timer_Callback */
	/* Increase the counter variable used in the timer for the alarm LED
	 * that expires every 3,75 seconds. */
	Os_TurnOnCyclic_Counter = Os_TurnOnCyclic_Counter + 1;
 8006558:	4b06      	ldr	r3, [pc, #24]	; (8006574 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	3301      	adds	r3, #1
 800655e:	b2da      	uxtb	r2, r3
 8006560:	4b04      	ldr	r3, [pc, #16]	; (8006574 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8006562:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter(&Os_TurnOnCyclic_Counter);
 8006564:	4803      	ldr	r0, [pc, #12]	; (8006574 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8006566:	f00f fd05 	bl	8015f74 <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter>
  /* USER CODE END Os_SecAlmLed_TurnOnCyclic_Timer_Callback */
}
 800656a:	bf00      	nop
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	200003b1 	.word	0x200003b1

08006578 <Os_SecAlmLedTurnOn_Timer_Callback>:

/* Os_SecAlmLedTurnOn_Timer_Callback function */
void Os_SecAlmLedTurnOn_Timer_Callback(void *argument)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmLedTurnOn_Timer_Callback */
	/* Increase the counter variable used in the turning on the alarm LED for 0,25 seconds. */
	Os_TurnOnLed_Counter = Os_TurnOnLed_Counter + 1;
 8006580:	4b06      	ldr	r3, [pc, #24]	; (800659c <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	3301      	adds	r3, #1
 8006586:	b2da      	uxtb	r2, r3
 8006588:	4b04      	ldr	r3, [pc, #16]	; (800659c <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 800658a:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter(&Os_TurnOnLed_Counter);
 800658c:	4803      	ldr	r0, [pc, #12]	; (800659c <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 800658e:	f00f fce1 	bl	8015f54 <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter>
  /* USER CODE END Os_SecAlmLedTurnOn_Timer_Callback */
}
 8006592:	bf00      	nop
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	200003b2 	.word	0x200003b2

080065a0 <Os_FollowMeHome_Timer_Callback>:

/* Os_FollowMeHome_Timer_Callback function */
void Os_FollowMeHome_Timer_Callback(void *argument)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_FollowMeHome_Timer_Callback */
	/* Increase the counter variable used in the follow me home concept when the timer
	 * period expires for the lights to go off. */
	Os_FollowMeHome_Counter = Os_FollowMeHome_Counter + 1;
 80065a8:	4b06      	ldr	r3, [pc, #24]	; (80065c4 <Os_FollowMeHome_Timer_Callback+0x24>)
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	3301      	adds	r3, #1
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	4b04      	ldr	r3, [pc, #16]	; (80065c4 <Os_FollowMeHome_Timer_Callback+0x24>)
 80065b2:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter(&Os_FollowMeHome_Counter);
 80065b4:	4803      	ldr	r0, [pc, #12]	; (80065c4 <Os_FollowMeHome_Timer_Callback+0x24>)
 80065b6:	f00f fcbd 	bl	8015f34 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>
  /* USER CODE END Os_FollowMeHome_Timer_Callback */
}
 80065ba:	bf00      	nop
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	200003b3 	.word	0x200003b3

080065c8 <Os_TurnSignals_Timer_Callback>:

/* Os_TurnSignals_Timer_Callback function */
void Os_TurnSignals_Timer_Callback(void *argument)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_TurnSignals_Timer_Callback */
	/* Increase the respective counter on request from the specific light in turn signals. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 80065d0:	4b13      	ldr	r3, [pc, #76]	; (8006620 <Os_TurnSignals_Timer_Callback+0x58>)
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d107      	bne.n	80065e8 <Os_TurnSignals_Timer_Callback+0x20>
	{
		Os_Lts_Counter = Os_Lts_Counter + 1;
 80065d8:	4b12      	ldr	r3, [pc, #72]	; (8006624 <Os_TurnSignals_Timer_Callback+0x5c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3301      	adds	r3, #1
 80065de:	4a11      	ldr	r2, [pc, #68]	; (8006624 <Os_TurnSignals_Timer_Callback+0x5c>)
 80065e0:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(&Os_Lts_Counter);
 80065e2:	4810      	ldr	r0, [pc, #64]	; (8006624 <Os_TurnSignals_Timer_Callback+0x5c>)
 80065e4:	f00f fec2 	bl	801636c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 80065e8:	4b0f      	ldr	r3, [pc, #60]	; (8006628 <Os_TurnSignals_Timer_Callback+0x60>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d107      	bne.n	8006600 <Os_TurnSignals_Timer_Callback+0x38>
	{
		Os_Rts_Counter = Os_Rts_Counter + 1;
 80065f0:	4b0e      	ldr	r3, [pc, #56]	; (800662c <Os_TurnSignals_Timer_Callback+0x64>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3301      	adds	r3, #1
 80065f6:	4a0d      	ldr	r2, [pc, #52]	; (800662c <Os_TurnSignals_Timer_Callback+0x64>)
 80065f8:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(&Os_Rts_Counter);
 80065fa:	480c      	ldr	r0, [pc, #48]	; (800662c <Os_TurnSignals_Timer_Callback+0x64>)
 80065fc:	f00f fea6 	bl	801634c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState == STD_HIGH)
 8006600:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <Os_TurnSignals_Timer_Callback+0x68>)
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d107      	bne.n	8006618 <Os_TurnSignals_Timer_Callback+0x50>
	{
		Os_HL_Counter = Os_HL_Counter + 1;
 8006608:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <Os_TurnSignals_Timer_Callback+0x6c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3301      	adds	r3, #1
 800660e:	4a09      	ldr	r2, [pc, #36]	; (8006634 <Os_TurnSignals_Timer_Callback+0x6c>)
 8006610:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(&Os_HL_Counter);
 8006612:	4808      	ldr	r0, [pc, #32]	; (8006634 <Os_TurnSignals_Timer_Callback+0x6c>)
 8006614:	f00f feba 	bl	801638c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>
	else
	{
		/* do nothing */
	}
  /* USER CODE END Os_TurnSignals_Timer_Callback */
}
 8006618:	bf00      	nop
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	2000017d 	.word	0x2000017d
 8006624:	200003b4 	.word	0x200003b4
 8006628:	2000017e 	.word	0x2000017e
 800662c:	200003b8 	.word	0x200003b8
 8006630:	20000181 	.word	0x20000181
 8006634:	200003bc 	.word	0x200003bc

08006638 <Os_SecAlmAlarm_Timer_Callback>:

/* Os_SecAlmAlarm_Timer_Callback function */
void Os_SecAlmAlarm_Timer_Callback(void *argument)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmAlarm_Timer_Callback */
	/* Increase the security alarm trigger counter when the alarm is on. */
	Os_Alarm_Counter = Os_Alarm_Counter + 1;
 8006640:	4b06      	ldr	r3, [pc, #24]	; (800665c <Os_SecAlmAlarm_Timer_Callback+0x24>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	3301      	adds	r3, #1
 8006646:	b2da      	uxtb	r2, r3
 8006648:	4b04      	ldr	r3, [pc, #16]	; (800665c <Os_SecAlmAlarm_Timer_Callback+0x24>)
 800664a:	701a      	strb	r2, [r3, #0]
	Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(&Os_Alarm_Counter);
 800664c:	4803      	ldr	r0, [pc, #12]	; (800665c <Os_SecAlmAlarm_Timer_Callback+0x24>)
 800664e:	f00f febd 	bl	80163cc <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>
  /* USER CODE END Os_SecAlmAlarm_Timer_Callback */
}
 8006652:	bf00      	nop
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	200003c0 	.word	0x200003c0

08006660 <Os_PdcR_Buzzer_Timer_Callback>:

/* Os_PdcR_Buzzer_Timer_Callback function */
void Os_PdcR_Buzzer_Timer_Callback(void *argument)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_PdcR_Buzzer_Timer_Callback */
	HAL_GPIO_TogglePin(PDCR_BUZZER_PORT, PDCR_BUZZER_PIN);
 8006668:	2120      	movs	r1, #32
 800666a:	4803      	ldr	r0, [pc, #12]	; (8006678 <Os_PdcR_Buzzer_Timer_Callback+0x18>)
 800666c:	f003 fc0b 	bl	8009e86 <HAL_GPIO_TogglePin>
  /* USER CODE END Os_PdcR_Buzzer_Timer_Callback */
}
 8006670:	bf00      	nop
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	40020400 	.word	0x40020400

0800667c <Os_PdcF_Buzzer_Timer_Callback>:

/* Os_PdcF_Buzzer_Timer_Callback function */
void Os_PdcF_Buzzer_Timer_Callback(void *argument)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_PdcF_Buzzer_Timer_Callback */
	HAL_GPIO_TogglePin(PDCF_BUZZER_PORT, PDCF_BUZZER_PIN);
 8006684:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006688:	4803      	ldr	r0, [pc, #12]	; (8006698 <Os_PdcF_Buzzer_Timer_Callback+0x1c>)
 800668a:	f003 fbfc 	bl	8009e86 <HAL_GPIO_TogglePin>
  /* USER CODE END Os_PdcF_Buzzer_Timer_Callback */
}
 800668e:	bf00      	nop
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	40020800 	.word	0x40020800

0800669c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b08a      	sub	sp, #40	; 0x28
 80066a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066a2:	f107 0314 	add.w	r3, r7, #20
 80066a6:	2200      	movs	r2, #0
 80066a8:	601a      	str	r2, [r3, #0]
 80066aa:	605a      	str	r2, [r3, #4]
 80066ac:	609a      	str	r2, [r3, #8]
 80066ae:	60da      	str	r2, [r3, #12]
 80066b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80066b2:	2300      	movs	r3, #0
 80066b4:	613b      	str	r3, [r7, #16]
 80066b6:	4b50      	ldr	r3, [pc, #320]	; (80067f8 <MX_GPIO_Init+0x15c>)
 80066b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ba:	4a4f      	ldr	r2, [pc, #316]	; (80067f8 <MX_GPIO_Init+0x15c>)
 80066bc:	f043 0304 	orr.w	r3, r3, #4
 80066c0:	6313      	str	r3, [r2, #48]	; 0x30
 80066c2:	4b4d      	ldr	r3, [pc, #308]	; (80067f8 <MX_GPIO_Init+0x15c>)
 80066c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c6:	f003 0304 	and.w	r3, r3, #4
 80066ca:	613b      	str	r3, [r7, #16]
 80066cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80066ce:	2300      	movs	r3, #0
 80066d0:	60fb      	str	r3, [r7, #12]
 80066d2:	4b49      	ldr	r3, [pc, #292]	; (80067f8 <MX_GPIO_Init+0x15c>)
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d6:	4a48      	ldr	r2, [pc, #288]	; (80067f8 <MX_GPIO_Init+0x15c>)
 80066d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066dc:	6313      	str	r3, [r2, #48]	; 0x30
 80066de:	4b46      	ldr	r3, [pc, #280]	; (80067f8 <MX_GPIO_Init+0x15c>)
 80066e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80066ea:	2300      	movs	r3, #0
 80066ec:	60bb      	str	r3, [r7, #8]
 80066ee:	4b42      	ldr	r3, [pc, #264]	; (80067f8 <MX_GPIO_Init+0x15c>)
 80066f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f2:	4a41      	ldr	r2, [pc, #260]	; (80067f8 <MX_GPIO_Init+0x15c>)
 80066f4:	f043 0301 	orr.w	r3, r3, #1
 80066f8:	6313      	str	r3, [r2, #48]	; 0x30
 80066fa:	4b3f      	ldr	r3, [pc, #252]	; (80067f8 <MX_GPIO_Init+0x15c>)
 80066fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	60bb      	str	r3, [r7, #8]
 8006704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006706:	2300      	movs	r3, #0
 8006708:	607b      	str	r3, [r7, #4]
 800670a:	4b3b      	ldr	r3, [pc, #236]	; (80067f8 <MX_GPIO_Init+0x15c>)
 800670c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670e:	4a3a      	ldr	r2, [pc, #232]	; (80067f8 <MX_GPIO_Init+0x15c>)
 8006710:	f043 0302 	orr.w	r3, r3, #2
 8006714:	6313      	str	r3, [r2, #48]	; 0x30
 8006716:	4b38      	ldr	r3, [pc, #224]	; (80067f8 <MX_GPIO_Init+0x15c>)
 8006718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	607b      	str	r3, [r7, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006722:	2300      	movs	r3, #0
 8006724:	603b      	str	r3, [r7, #0]
 8006726:	4b34      	ldr	r3, [pc, #208]	; (80067f8 <MX_GPIO_Init+0x15c>)
 8006728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672a:	4a33      	ldr	r2, [pc, #204]	; (80067f8 <MX_GPIO_Init+0x15c>)
 800672c:	f043 0308 	orr.w	r3, r3, #8
 8006730:	6313      	str	r3, [r2, #48]	; 0x30
 8006732:	4b31      	ldr	r3, [pc, #196]	; (80067f8 <MX_GPIO_Init+0x15c>)
 8006734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006736:	f003 0308 	and.w	r3, r3, #8
 800673a:	603b      	str	r3, [r7, #0]
 800673c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PDCF_BUZZER_Pin|CANCS_Pin, GPIO_PIN_RESET);
 800673e:	2200      	movs	r2, #0
 8006740:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8006744:	482d      	ldr	r0, [pc, #180]	; (80067fc <MX_GPIO_Init+0x160>)
 8006746:	f003 fb85 	bl	8009e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CENLOC_BUZZER_Pin|SECALM_BUZZER_Pin|PDCR_TRIG_Pin|AL_Pin
 800674a:	2200      	movs	r2, #0
 800674c:	f24f 0124 	movw	r1, #61476	; 0xf024
 8006750:	482b      	ldr	r0, [pc, #172]	; (8006800 <MX_GPIO_Init+0x164>)
 8006752:	f003 fb7f 	bl	8009e54 <HAL_GPIO_WritePin>
                          |RL_Pin|PDCR_BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PDCF_TRIG_Pin|HB_Pin, GPIO_PIN_RESET);
 8006756:	2200      	movs	r2, #0
 8006758:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800675c:	4829      	ldr	r0, [pc, #164]	; (8006804 <MX_GPIO_Init+0x168>)
 800675e:	f003 fb79 	bl	8009e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = PDCF_BUZZER_Pin|CANCS_Pin;
 8006762:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006768:	2301      	movs	r3, #1
 800676a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800676c:	2300      	movs	r3, #0
 800676e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006770:	2300      	movs	r3, #0
 8006772:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006774:	f107 0314 	add.w	r3, r7, #20
 8006778:	4619      	mov	r1, r3
 800677a:	4820      	ldr	r0, [pc, #128]	; (80067fc <MX_GPIO_Init+0x160>)
 800677c:	f003 f902 	bl	8009984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006780:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006786:	2303      	movs	r3, #3
 8006788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800678a:	2300      	movs	r3, #0
 800678c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800678e:	f107 0314 	add.w	r3, r7, #20
 8006792:	4619      	mov	r1, r3
 8006794:	4819      	ldr	r0, [pc, #100]	; (80067fc <MX_GPIO_Init+0x160>)
 8006796:	f003 f8f5 	bl	8009984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = CENLOC_BUZZER_Pin|SECALM_BUZZER_Pin|PDCR_TRIG_Pin|AL_Pin
 800679a:	f24f 0324 	movw	r3, #61476	; 0xf024
 800679e:	617b      	str	r3, [r7, #20]
                          |RL_Pin|PDCR_BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067a0:	2301      	movs	r3, #1
 80067a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067a4:	2300      	movs	r3, #0
 80067a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067a8:	2300      	movs	r3, #0
 80067aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067ac:	f107 0314 	add.w	r3, r7, #20
 80067b0:	4619      	mov	r1, r3
 80067b2:	4813      	ldr	r0, [pc, #76]	; (8006800 <MX_GPIO_Init+0x164>)
 80067b4:	f003 f8e6 	bl	8009984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = PDCF_TRIG_Pin|HB_Pin;
 80067b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80067bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067be:	2301      	movs	r3, #1
 80067c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067c2:	2300      	movs	r3, #0
 80067c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067c6:	2300      	movs	r3, #0
 80067c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067ca:	f107 0314 	add.w	r3, r7, #20
 80067ce:	4619      	mov	r1, r3
 80067d0:	480c      	ldr	r0, [pc, #48]	; (8006804 <MX_GPIO_Init+0x168>)
 80067d2:	f003 f8d7 	bl	8009984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80067d6:	2304      	movs	r3, #4
 80067d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80067da:	2303      	movs	r3, #3
 80067dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067de:	2300      	movs	r3, #0
 80067e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80067e2:	f107 0314 	add.w	r3, r7, #20
 80067e6:	4619      	mov	r1, r3
 80067e8:	4807      	ldr	r0, [pc, #28]	; (8006808 <MX_GPIO_Init+0x16c>)
 80067ea:	f003 f8cb 	bl	8009984 <HAL_GPIO_Init>

}
 80067ee:	bf00      	nop
 80067f0:	3728      	adds	r7, #40	; 0x28
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	40023800 	.word	0x40023800
 80067fc:	40020800 	.word	0x40020800
 8006800:	40020400 	.word	0x40020400
 8006804:	40020000 	.word	0x40020000
 8006808:	40020c00 	.word	0x40020c00

0800680c <HAL_I2C_MspInit>:
  /* USER CODE END I2C3_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08c      	sub	sp, #48	; 0x30
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006814:	f107 031c 	add.w	r3, r7, #28
 8006818:	2200      	movs	r2, #0
 800681a:	601a      	str	r2, [r3, #0]
 800681c:	605a      	str	r2, [r3, #4]
 800681e:	609a      	str	r2, [r3, #8]
 8006820:	60da      	str	r2, [r3, #12]
 8006822:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a73      	ldr	r2, [pc, #460]	; (80069f8 <HAL_I2C_MspInit+0x1ec>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d12c      	bne.n	8006888 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800682e:	2300      	movs	r3, #0
 8006830:	61bb      	str	r3, [r7, #24]
 8006832:	4b72      	ldr	r3, [pc, #456]	; (80069fc <HAL_I2C_MspInit+0x1f0>)
 8006834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006836:	4a71      	ldr	r2, [pc, #452]	; (80069fc <HAL_I2C_MspInit+0x1f0>)
 8006838:	f043 0302 	orr.w	r3, r3, #2
 800683c:	6313      	str	r3, [r2, #48]	; 0x30
 800683e:	4b6f      	ldr	r3, [pc, #444]	; (80069fc <HAL_I2C_MspInit+0x1f0>)
 8006840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	61bb      	str	r3, [r7, #24]
 8006848:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800684a:	23c0      	movs	r3, #192	; 0xc0
 800684c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800684e:	2312      	movs	r3, #18
 8006850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006852:	2300      	movs	r3, #0
 8006854:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006856:	2303      	movs	r3, #3
 8006858:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800685a:	2304      	movs	r3, #4
 800685c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800685e:	f107 031c 	add.w	r3, r7, #28
 8006862:	4619      	mov	r1, r3
 8006864:	4866      	ldr	r0, [pc, #408]	; (8006a00 <HAL_I2C_MspInit+0x1f4>)
 8006866:	f003 f88d 	bl	8009984 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800686a:	2300      	movs	r3, #0
 800686c:	617b      	str	r3, [r7, #20]
 800686e:	4b63      	ldr	r3, [pc, #396]	; (80069fc <HAL_I2C_MspInit+0x1f0>)
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	4a62      	ldr	r2, [pc, #392]	; (80069fc <HAL_I2C_MspInit+0x1f0>)
 8006874:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006878:	6413      	str	r3, [r2, #64]	; 0x40
 800687a:	4b60      	ldr	r3, [pc, #384]	; (80069fc <HAL_I2C_MspInit+0x1f0>)
 800687c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8006886:	e0b3      	b.n	80069f0 <HAL_I2C_MspInit+0x1e4>
  else if(i2cHandle->Instance==I2C3)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a5d      	ldr	r2, [pc, #372]	; (8006a04 <HAL_I2C_MspInit+0x1f8>)
 800688e:	4293      	cmp	r3, r2
 8006890:	f040 80ae 	bne.w	80069f0 <HAL_I2C_MspInit+0x1e4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006894:	2300      	movs	r3, #0
 8006896:	613b      	str	r3, [r7, #16]
 8006898:	4b58      	ldr	r3, [pc, #352]	; (80069fc <HAL_I2C_MspInit+0x1f0>)
 800689a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689c:	4a57      	ldr	r2, [pc, #348]	; (80069fc <HAL_I2C_MspInit+0x1f0>)
 800689e:	f043 0301 	orr.w	r3, r3, #1
 80068a2:	6313      	str	r3, [r2, #48]	; 0x30
 80068a4:	4b55      	ldr	r3, [pc, #340]	; (80069fc <HAL_I2C_MspInit+0x1f0>)
 80068a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	613b      	str	r3, [r7, #16]
 80068ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068b0:	2300      	movs	r3, #0
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	4b51      	ldr	r3, [pc, #324]	; (80069fc <HAL_I2C_MspInit+0x1f0>)
 80068b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b8:	4a50      	ldr	r2, [pc, #320]	; (80069fc <HAL_I2C_MspInit+0x1f0>)
 80068ba:	f043 0302 	orr.w	r3, r3, #2
 80068be:	6313      	str	r3, [r2, #48]	; 0x30
 80068c0:	4b4e      	ldr	r3, [pc, #312]	; (80069fc <HAL_I2C_MspInit+0x1f0>)
 80068c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	60fb      	str	r3, [r7, #12]
 80068ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80068cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80068d2:	2312      	movs	r3, #18
 80068d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068d6:	2300      	movs	r3, #0
 80068d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068da:	2303      	movs	r3, #3
 80068dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80068de:	2304      	movs	r3, #4
 80068e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068e2:	f107 031c 	add.w	r3, r7, #28
 80068e6:	4619      	mov	r1, r3
 80068e8:	4847      	ldr	r0, [pc, #284]	; (8006a08 <HAL_I2C_MspInit+0x1fc>)
 80068ea:	f003 f84b 	bl	8009984 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80068ee:	2310      	movs	r3, #16
 80068f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80068f2:	2312      	movs	r3, #18
 80068f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068f6:	2300      	movs	r3, #0
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068fa:	2303      	movs	r3, #3
 80068fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80068fe:	2309      	movs	r3, #9
 8006900:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006902:	f107 031c 	add.w	r3, r7, #28
 8006906:	4619      	mov	r1, r3
 8006908:	483d      	ldr	r0, [pc, #244]	; (8006a00 <HAL_I2C_MspInit+0x1f4>)
 800690a:	f003 f83b 	bl	8009984 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800690e:	2300      	movs	r3, #0
 8006910:	60bb      	str	r3, [r7, #8]
 8006912:	4b3a      	ldr	r3, [pc, #232]	; (80069fc <HAL_I2C_MspInit+0x1f0>)
 8006914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006916:	4a39      	ldr	r2, [pc, #228]	; (80069fc <HAL_I2C_MspInit+0x1f0>)
 8006918:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800691c:	6413      	str	r3, [r2, #64]	; 0x40
 800691e:	4b37      	ldr	r3, [pc, #220]	; (80069fc <HAL_I2C_MspInit+0x1f0>)
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006926:	60bb      	str	r3, [r7, #8]
 8006928:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 800692a:	4b38      	ldr	r3, [pc, #224]	; (8006a0c <HAL_I2C_MspInit+0x200>)
 800692c:	4a38      	ldr	r2, [pc, #224]	; (8006a10 <HAL_I2C_MspInit+0x204>)
 800692e:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 8006930:	4b36      	ldr	r3, [pc, #216]	; (8006a0c <HAL_I2C_MspInit+0x200>)
 8006932:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006936:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006938:	4b34      	ldr	r3, [pc, #208]	; (8006a0c <HAL_I2C_MspInit+0x200>)
 800693a:	2200      	movs	r2, #0
 800693c:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800693e:	4b33      	ldr	r3, [pc, #204]	; (8006a0c <HAL_I2C_MspInit+0x200>)
 8006940:	2200      	movs	r2, #0
 8006942:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006944:	4b31      	ldr	r3, [pc, #196]	; (8006a0c <HAL_I2C_MspInit+0x200>)
 8006946:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800694a:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800694c:	4b2f      	ldr	r3, [pc, #188]	; (8006a0c <HAL_I2C_MspInit+0x200>)
 800694e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006952:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006954:	4b2d      	ldr	r3, [pc, #180]	; (8006a0c <HAL_I2C_MspInit+0x200>)
 8006956:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800695a:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 800695c:	4b2b      	ldr	r3, [pc, #172]	; (8006a0c <HAL_I2C_MspInit+0x200>)
 800695e:	2200      	movs	r2, #0
 8006960:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006962:	4b2a      	ldr	r3, [pc, #168]	; (8006a0c <HAL_I2C_MspInit+0x200>)
 8006964:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006968:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800696a:	4b28      	ldr	r3, [pc, #160]	; (8006a0c <HAL_I2C_MspInit+0x200>)
 800696c:	2200      	movs	r2, #0
 800696e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8006970:	4826      	ldr	r0, [pc, #152]	; (8006a0c <HAL_I2C_MspInit+0x200>)
 8006972:	f002 f9f1 	bl	8008d58 <HAL_DMA_Init>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <HAL_I2C_MspInit+0x174>
      Error_Handler();
 800697c:	f010 ffd6 	bl	801792c <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a22      	ldr	r2, [pc, #136]	; (8006a0c <HAL_I2C_MspInit+0x200>)
 8006984:	639a      	str	r2, [r3, #56]	; 0x38
 8006986:	4a21      	ldr	r2, [pc, #132]	; (8006a0c <HAL_I2C_MspInit+0x200>)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 800698c:	4b21      	ldr	r3, [pc, #132]	; (8006a14 <HAL_I2C_MspInit+0x208>)
 800698e:	4a22      	ldr	r2, [pc, #136]	; (8006a18 <HAL_I2C_MspInit+0x20c>)
 8006990:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 8006992:	4b20      	ldr	r3, [pc, #128]	; (8006a14 <HAL_I2C_MspInit+0x208>)
 8006994:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006998:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800699a:	4b1e      	ldr	r3, [pc, #120]	; (8006a14 <HAL_I2C_MspInit+0x208>)
 800699c:	2240      	movs	r2, #64	; 0x40
 800699e:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80069a0:	4b1c      	ldr	r3, [pc, #112]	; (8006a14 <HAL_I2C_MspInit+0x208>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80069a6:	4b1b      	ldr	r3, [pc, #108]	; (8006a14 <HAL_I2C_MspInit+0x208>)
 80069a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069ac:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80069ae:	4b19      	ldr	r3, [pc, #100]	; (8006a14 <HAL_I2C_MspInit+0x208>)
 80069b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80069b4:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80069b6:	4b17      	ldr	r3, [pc, #92]	; (8006a14 <HAL_I2C_MspInit+0x208>)
 80069b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80069bc:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_CIRCULAR;
 80069be:	4b15      	ldr	r3, [pc, #84]	; (8006a14 <HAL_I2C_MspInit+0x208>)
 80069c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069c4:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80069c6:	4b13      	ldr	r3, [pc, #76]	; (8006a14 <HAL_I2C_MspInit+0x208>)
 80069c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80069cc:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80069ce:	4b11      	ldr	r3, [pc, #68]	; (8006a14 <HAL_I2C_MspInit+0x208>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80069d4:	480f      	ldr	r0, [pc, #60]	; (8006a14 <HAL_I2C_MspInit+0x208>)
 80069d6:	f002 f9bf 	bl	8008d58 <HAL_DMA_Init>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d001      	beq.n	80069e4 <HAL_I2C_MspInit+0x1d8>
      Error_Handler();
 80069e0:	f010 ffa4 	bl	801792c <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a0b      	ldr	r2, [pc, #44]	; (8006a14 <HAL_I2C_MspInit+0x208>)
 80069e8:	635a      	str	r2, [r3, #52]	; 0x34
 80069ea:	4a0a      	ldr	r2, [pc, #40]	; (8006a14 <HAL_I2C_MspInit+0x208>)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6393      	str	r3, [r2, #56]	; 0x38
}
 80069f0:	bf00      	nop
 80069f2:	3730      	adds	r7, #48	; 0x30
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	40005400 	.word	0x40005400
 80069fc:	40023800 	.word	0x40023800
 8006a00:	40020400 	.word	0x40020400
 8006a04:	40005c00 	.word	0x40005c00
 8006a08:	40020000 	.word	0x40020000
 8006a0c:	20000560 	.word	0x20000560
 8006a10:	40026040 	.word	0x40026040
 8006a14:	200005c0 	.word	0x200005c0
 8006a18:	40026070 	.word	0x40026070

08006a1c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a1f      	ldr	r2, [pc, #124]	; (8006aa8 <HAL_I2C_MspDeInit+0x8c>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d114      	bne.n	8006a58 <HAL_I2C_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8006a2e:	4b1f      	ldr	r3, [pc, #124]	; (8006aac <HAL_I2C_MspDeInit+0x90>)
 8006a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a32:	4a1e      	ldr	r2, [pc, #120]	; (8006aac <HAL_I2C_MspDeInit+0x90>)
 8006a34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a38:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8006a3a:	2140      	movs	r1, #64	; 0x40
 8006a3c:	481c      	ldr	r0, [pc, #112]	; (8006ab0 <HAL_I2C_MspDeInit+0x94>)
 8006a3e:	f003 f925 	bl	8009c8c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8006a42:	2180      	movs	r1, #128	; 0x80
 8006a44:	481a      	ldr	r0, [pc, #104]	; (8006ab0 <HAL_I2C_MspDeInit+0x94>)
 8006a46:	f003 f921 	bl	8009c8c <HAL_GPIO_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8006a4a:	201f      	movs	r0, #31
 8006a4c:	f002 f869 	bl	8008b22 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8006a50:	2020      	movs	r0, #32
 8006a52:	f002 f866 	bl	8008b22 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8006a56:	e023      	b.n	8006aa0 <HAL_I2C_MspDeInit+0x84>
  else if(i2cHandle->Instance==I2C3)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a15      	ldr	r2, [pc, #84]	; (8006ab4 <HAL_I2C_MspDeInit+0x98>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d11e      	bne.n	8006aa0 <HAL_I2C_MspDeInit+0x84>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8006a62:	4b12      	ldr	r3, [pc, #72]	; (8006aac <HAL_I2C_MspDeInit+0x90>)
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	4a11      	ldr	r2, [pc, #68]	; (8006aac <HAL_I2C_MspDeInit+0x90>)
 8006a68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006a6c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8006a6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a72:	4811      	ldr	r0, [pc, #68]	; (8006ab8 <HAL_I2C_MspDeInit+0x9c>)
 8006a74:	f003 f90a 	bl	8009c8c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 8006a78:	2110      	movs	r1, #16
 8006a7a:	480d      	ldr	r0, [pc, #52]	; (8006ab0 <HAL_I2C_MspDeInit+0x94>)
 8006a7c:	f003 f906 	bl	8009c8c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a84:	4618      	mov	r0, r3
 8006a86:	f002 fa15 	bl	8008eb4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(i2cHandle->hdmatx);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f002 fa10 	bl	8008eb4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8006a94:	2048      	movs	r0, #72	; 0x48
 8006a96:	f002 f844 	bl	8008b22 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8006a9a:	2049      	movs	r0, #73	; 0x49
 8006a9c:	f002 f841 	bl	8008b22 <HAL_NVIC_DisableIRQ>
}
 8006aa0:	bf00      	nop
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40005400 	.word	0x40005400
 8006aac:	40023800 	.word	0x40023800
 8006ab0:	40020400 	.word	0x40020400
 8006ab4:	40005c00 	.word	0x40005c00
 8006ab8:	40020000 	.word	0x40020000

08006abc <HAL_SPI_MspInit>:
  /* USER CODE END SPI3_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08a      	sub	sp, #40	; 0x28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ac4:	f107 0314 	add.w	r3, r7, #20
 8006ac8:	2200      	movs	r2, #0
 8006aca:	601a      	str	r2, [r3, #0]
 8006acc:	605a      	str	r2, [r3, #4]
 8006ace:	609a      	str	r2, [r3, #8]
 8006ad0:	60da      	str	r2, [r3, #12]
 8006ad2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a19      	ldr	r2, [pc, #100]	; (8006b40 <HAL_SPI_MspInit+0x84>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d12c      	bne.n	8006b38 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006ade:	2300      	movs	r3, #0
 8006ae0:	613b      	str	r3, [r7, #16]
 8006ae2:	4b18      	ldr	r3, [pc, #96]	; (8006b44 <HAL_SPI_MspInit+0x88>)
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	4a17      	ldr	r2, [pc, #92]	; (8006b44 <HAL_SPI_MspInit+0x88>)
 8006ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aec:	6413      	str	r3, [r2, #64]	; 0x40
 8006aee:	4b15      	ldr	r3, [pc, #84]	; (8006b44 <HAL_SPI_MspInit+0x88>)
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006af6:	613b      	str	r3, [r7, #16]
 8006af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006afa:	2300      	movs	r3, #0
 8006afc:	60fb      	str	r3, [r7, #12]
 8006afe:	4b11      	ldr	r3, [pc, #68]	; (8006b44 <HAL_SPI_MspInit+0x88>)
 8006b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b02:	4a10      	ldr	r2, [pc, #64]	; (8006b44 <HAL_SPI_MspInit+0x88>)
 8006b04:	f043 0304 	orr.w	r3, r3, #4
 8006b08:	6313      	str	r3, [r2, #48]	; 0x30
 8006b0a:	4b0e      	ldr	r3, [pc, #56]	; (8006b44 <HAL_SPI_MspInit+0x88>)
 8006b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0e:	f003 0304 	and.w	r3, r3, #4
 8006b12:	60fb      	str	r3, [r7, #12]
 8006b14:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8006b16:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b20:	2300      	movs	r3, #0
 8006b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b24:	2303      	movs	r3, #3
 8006b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006b28:	2306      	movs	r3, #6
 8006b2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b2c:	f107 0314 	add.w	r3, r7, #20
 8006b30:	4619      	mov	r1, r3
 8006b32:	4805      	ldr	r0, [pc, #20]	; (8006b48 <HAL_SPI_MspInit+0x8c>)
 8006b34:	f002 ff26 	bl	8009984 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8006b38:	bf00      	nop
 8006b3a:	3728      	adds	r7, #40	; 0x28
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	40003c00 	.word	0x40003c00
 8006b44:	40023800 	.word	0x40023800
 8006b48:	40020800 	.word	0x40020800

08006b4c <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI3)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a0a      	ldr	r2, [pc, #40]	; (8006b84 <HAL_SPI_MspDeInit+0x38>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d10d      	bne.n	8006b7a <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8006b5e:	4b0a      	ldr	r3, [pc, #40]	; (8006b88 <HAL_SPI_MspDeInit+0x3c>)
 8006b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b62:	4a09      	ldr	r2, [pc, #36]	; (8006b88 <HAL_SPI_MspDeInit+0x3c>)
 8006b64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b68:	6413      	str	r3, [r2, #64]	; 0x40
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 8006b6a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8006b6e:	4807      	ldr	r0, [pc, #28]	; (8006b8c <HAL_SPI_MspDeInit+0x40>)
 8006b70:	f003 f88c 	bl	8009c8c <HAL_GPIO_DeInit>

    /* SPI3 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 8006b74:	2033      	movs	r0, #51	; 0x33
 8006b76:	f001 ffd4 	bl	8008b22 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
}
 8006b7a:	bf00      	nop
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	40003c00 	.word	0x40003c00
 8006b88:	40023800 	.word	0x40023800
 8006b8c:	40020800 	.word	0x40020800

08006b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b96:	2300      	movs	r3, #0
 8006b98:	607b      	str	r3, [r7, #4]
 8006b9a:	4b21      	ldr	r3, [pc, #132]	; (8006c20 <HAL_MspInit+0x90>)
 8006b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b9e:	4a20      	ldr	r2, [pc, #128]	; (8006c20 <HAL_MspInit+0x90>)
 8006ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8006ba6:	4b1e      	ldr	r3, [pc, #120]	; (8006c20 <HAL_MspInit+0x90>)
 8006ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bae:	607b      	str	r3, [r7, #4]
 8006bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	603b      	str	r3, [r7, #0]
 8006bb6:	4b1a      	ldr	r3, [pc, #104]	; (8006c20 <HAL_MspInit+0x90>)
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	4a19      	ldr	r2, [pc, #100]	; (8006c20 <HAL_MspInit+0x90>)
 8006bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8006bc2:	4b17      	ldr	r3, [pc, #92]	; (8006c20 <HAL_MspInit+0x90>)
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bca:	603b      	str	r3, [r7, #0]
 8006bcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 15, 0);
 8006bce:	2200      	movs	r2, #0
 8006bd0:	210f      	movs	r1, #15
 8006bd2:	f06f 000b 	mvn.w	r0, #11
 8006bd6:	f001 ff7a 	bl	8008ace <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 15, 0);
 8006bda:	2200      	movs	r2, #0
 8006bdc:	210f      	movs	r1, #15
 8006bde:	f06f 000a 	mvn.w	r0, #10
 8006be2:	f001 ff74 	bl	8008ace <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 15, 0);
 8006be6:	2200      	movs	r2, #0
 8006be8:	210f      	movs	r1, #15
 8006bea:	f06f 0009 	mvn.w	r0, #9
 8006bee:	f001 ff6e 	bl	8008ace <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 15, 0);
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	210f      	movs	r1, #15
 8006bf6:	f06f 0004 	mvn.w	r0, #4
 8006bfa:	f001 ff68 	bl	8008ace <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8006bfe:	2200      	movs	r2, #0
 8006c00:	210f      	movs	r1, #15
 8006c02:	f06f 0003 	mvn.w	r0, #3
 8006c06:	f001 ff62 	bl	8008ace <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	210f      	movs	r1, #15
 8006c0e:	f06f 0001 	mvn.w	r0, #1
 8006c12:	f001 ff5c 	bl	8008ace <HAL_NVIC_SetPriority>
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006c16:	bf00      	nop
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	40023800 	.word	0x40023800

08006c24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b08c      	sub	sp, #48	; 0x30
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8006c34:	2300      	movs	r3, #0
 8006c36:	60bb      	str	r3, [r7, #8]
 8006c38:	4b2e      	ldr	r3, [pc, #184]	; (8006cf4 <HAL_InitTick+0xd0>)
 8006c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c3c:	4a2d      	ldr	r2, [pc, #180]	; (8006cf4 <HAL_InitTick+0xd0>)
 8006c3e:	f043 0301 	orr.w	r3, r3, #1
 8006c42:	6453      	str	r3, [r2, #68]	; 0x44
 8006c44:	4b2b      	ldr	r3, [pc, #172]	; (8006cf4 <HAL_InitTick+0xd0>)
 8006c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	60bb      	str	r3, [r7, #8]
 8006c4e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006c50:	f107 020c 	add.w	r2, r7, #12
 8006c54:	f107 0310 	add.w	r3, r7, #16
 8006c58:	4611      	mov	r1, r2
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f005 fddc 	bl	800c818 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8006c60:	f005 fdc6 	bl	800c7f0 <HAL_RCC_GetPCLK2Freq>
 8006c64:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c68:	4a23      	ldr	r2, [pc, #140]	; (8006cf8 <HAL_InitTick+0xd4>)
 8006c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c6e:	0c9b      	lsrs	r3, r3, #18
 8006c70:	3b01      	subs	r3, #1
 8006c72:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8006c74:	4b21      	ldr	r3, [pc, #132]	; (8006cfc <HAL_InitTick+0xd8>)
 8006c76:	4a22      	ldr	r2, [pc, #136]	; (8006d00 <HAL_InitTick+0xdc>)
 8006c78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8006c7a:	4b20      	ldr	r3, [pc, #128]	; (8006cfc <HAL_InitTick+0xd8>)
 8006c7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006c80:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8006c82:	4a1e      	ldr	r2, [pc, #120]	; (8006cfc <HAL_InitTick+0xd8>)
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c86:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8006c88:	4b1c      	ldr	r3, [pc, #112]	; (8006cfc <HAL_InitTick+0xd8>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c8e:	4b1b      	ldr	r3, [pc, #108]	; (8006cfc <HAL_InitTick+0xd8>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c94:	4b19      	ldr	r3, [pc, #100]	; (8006cfc <HAL_InitTick+0xd8>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8006c9a:	4818      	ldr	r0, [pc, #96]	; (8006cfc <HAL_InitTick+0xd8>)
 8006c9c:	f006 ffd4 	bl	800dc48 <HAL_TIM_Base_Init>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8006ca6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d11b      	bne.n	8006ce6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8006cae:	4813      	ldr	r0, [pc, #76]	; (8006cfc <HAL_InitTick+0xd8>)
 8006cb0:	f007 f826 	bl	800dd00 <HAL_TIM_Base_Start_IT>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8006cba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d111      	bne.n	8006ce6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006cc2:	2019      	movs	r0, #25
 8006cc4:	f001 ff1f 	bl	8008b06 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b0f      	cmp	r3, #15
 8006ccc:	d808      	bhi.n	8006ce0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8006cce:	2200      	movs	r2, #0
 8006cd0:	6879      	ldr	r1, [r7, #4]
 8006cd2:	2019      	movs	r0, #25
 8006cd4:	f001 fefb 	bl	8008ace <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006cd8:	4a0a      	ldr	r2, [pc, #40]	; (8006d04 <HAL_InitTick+0xe0>)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6013      	str	r3, [r2, #0]
 8006cde:	e002      	b.n	8006ce6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8006ce6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3730      	adds	r7, #48	; 0x30
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	40023800 	.word	0x40023800
 8006cf8:	431bde83 	.word	0x431bde83
 8006cfc:	200006a0 	.word	0x200006a0
 8006d00:	40010000 	.word	0x40010000
 8006d04:	20000050 	.word	0x20000050

08006d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	SystemManager_SetFault(NMI_RESET);
 8006d0c:	2008      	movs	r0, #8
 8006d0e:	f010 fcaf 	bl	8017670 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8006d12:	f010 fcf5 	bl	8017700 <SystemManager_PerformReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006d16:	e7fe      	b.n	8006d16 <NMI_Handler+0xe>

08006d18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	SystemManager_SetFault(HARDWARE_RESET);
 8006d1c:	2006      	movs	r0, #6
 8006d1e:	f010 fca7 	bl	8017670 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8006d22:	f010 fced 	bl	8017700 <SystemManager_PerformReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d26:	e7fe      	b.n	8006d26 <HardFault_Handler+0xe>

08006d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	SystemManager_SetFault(MEMORY_FAULT_RESET);
 8006d2c:	2009      	movs	r0, #9
 8006d2e:	f010 fc9f 	bl	8017670 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8006d32:	f010 fce5 	bl	8017700 <SystemManager_PerformReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d36:	e7fe      	b.n	8006d36 <MemManage_Handler+0xe>

08006d38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	SystemManager_SetFault(BUS_FAULT_RESET);
 8006d3c:	200b      	movs	r0, #11
 8006d3e:	f010 fc97 	bl	8017670 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8006d42:	f010 fcdd 	bl	8017700 <SystemManager_PerformReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006d46:	e7fe      	b.n	8006d46 <BusFault_Handler+0xe>

08006d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	SystemManager_SetFault(USAGE_FAULT_RESET);
 8006d4c:	200a      	movs	r0, #10
 8006d4e:	f010 fc8f 	bl	8017670 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8006d52:	f010 fcd5 	bl	8017700 <SystemManager_PerformReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006d56:	e7fe      	b.n	8006d56 <UsageFault_Handler+0xe>

08006d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006d5c:	bf00      	nop
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
	...

08006d68 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */
	SystemManager_SetFault(WATCHDOG_RESET);
 8006d6c:	2003      	movs	r0, #3
 8006d6e:	f010 fc7f 	bl	8017670 <SystemManager_SetFault>
  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 8006d72:	4802      	ldr	r0, [pc, #8]	; (8006d7c <WWDG_IRQHandler+0x14>)
 8006d74:	f009 fd4e 	bl	8010814 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 8006d78:	bf00      	nop
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	20000c04 	.word	0x20000c04

08006d80 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */
	SystemManager_PerformReset();
 8006d84:	f010 fcbc 	bl	8017700 <SystemManager_PerformReset>
  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8006d88:	f005 f894 	bl	800beb4 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */
  /* USER CODE END PVD_IRQn 1 */
}
 8006d8c:	bf00      	nop
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */
	SystemManager_SetFault(FLASH_FAULT_RESET);
 8006d94:	2007      	movs	r0, #7
 8006d96:	f010 fc6b 	bl	8017670 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8006d9a:	f010 fcb1 	bl	8017700 <SystemManager_PerformReset>
  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8006d9e:	f002 fc49 	bl	8009634 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */
  /* USER CODE END FLASH_IRQn 1 */
}
 8006da2:	bf00      	nop
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8006da6:	b480      	push	{r7}
 8006da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_IRQn 0 */
  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */
  /* USER CODE END RCC_IRQn 1 */
}
 8006daa:	bf00      	nop
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8006db8:	4802      	ldr	r0, [pc, #8]	; (8006dc4 <DMA1_Stream2_IRQHandler+0x10>)
 8006dba:	f002 f9c3 	bl	8009144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8006dbe:	bf00      	nop
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20000560 	.word	0x20000560

08006dc8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8006dcc:	4802      	ldr	r0, [pc, #8]	; (8006dd8 <DMA1_Stream4_IRQHandler+0x10>)
 8006dce:	f002 f9b9 	bl	8009144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006dd2:	bf00      	nop
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	200005c0 	.word	0x200005c0

08006ddc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006de0:	4802      	ldr	r0, [pc, #8]	; (8006dec <ADC_IRQHandler+0x10>)
 8006de2:	f001 f893 	bl	8007f0c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */
  /* USER CODE END ADC_IRQn 1 */
}
 8006de6:	bf00      	nop
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	200002e0 	.word	0x200002e0

08006df0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
	vTaskStepTick(0);
 8006df4:	2000      	movs	r0, #0
 8006df6:	f00d fd7f 	bl	80148f8 <vTaskStepTick>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8006dfa:	4802      	ldr	r0, [pc, #8]	; (8006e04 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8006dfc:	f007 fb78 	bl	800e4f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8006e00:	bf00      	nop
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	20000a28 	.word	0x20000a28

08006e08 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006e0c:	4802      	ldr	r0, [pc, #8]	; (8006e18 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006e0e:	f007 fb6f 	bl	800e4f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006e12:	bf00      	nop
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	200006a0 	.word	0x200006a0

08006e1c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8006e20:	4802      	ldr	r0, [pc, #8]	; (8006e2c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8006e22:	f007 fb65 	bl	800e4f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8006e26:	bf00      	nop
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	20000adc 	.word	0x20000adc

08006e30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	/* When alarm is on turn on the LEDs at full duty cycle for the designated time. */
	if(Rte_P_SecAlm_SecAlmPort_SecAlm_PinStateChange == STD_HIGH)
 8006e34:	4b43      	ldr	r3, [pc, #268]	; (8006f44 <TIM2_IRQHandler+0x114>)
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d10b      	bne.n	8006e54 <TIM2_IRQHandler+0x24>
	{
		TIM2->CCR1 = TIM2->ARR;
 8006e3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e46:	6353      	str	r3, [r2, #52]	; 0x34
		TIM2->CCR2 = TIM2->ARR;
 8006e48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e52:	6393      	str	r3, [r2, #56]	; 0x38
		/* do nothing */
	}
	/* Upon timer interrupt generation
	 * proceed to increase the PWM duty cycle
	 * for the low beam light until 75%. */
	if(TIM2->CCR1 < 1999)
 8006e54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5a:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d807      	bhi.n	8006e72 <TIM2_IRQHandler+0x42>
	{
		TIM2->CCR1 = TIM2->CCR1 + 5;
 8006e62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006e6c:	3305      	adds	r3, #5
 8006e6e:	6353      	str	r3, [r2, #52]	; 0x34
 8006e70:	e00c      	b.n	8006e8c <TIM2_IRQHandler+0x5c>
	}
	else if(TIM2->CCR1 >= 1999)
 8006e72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e78:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d905      	bls.n	8006e8c <TIM2_IRQHandler+0x5c>
	{
		TIM2->CCR1 = TIM2->ARR;
 8006e80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8a:	6353      	str	r3, [r2, #52]	; 0x34
		/* do nothing */
	}
	/* Upon timer interrupt generation
	 * proceed to increase the PWM duty cycle
	 * for the rear position light until 75%. */
	if(TIM2->CCR2 < 1999)
 8006e8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e92:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d807      	bhi.n	8006eaa <TIM2_IRQHandler+0x7a>
	{
		TIM2->CCR2 = TIM2->CCR2 + 5;
 8006e9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006ea4:	3305      	adds	r3, #5
 8006ea6:	6393      	str	r3, [r2, #56]	; 0x38
 8006ea8:	e00c      	b.n	8006ec4 <TIM2_IRQHandler+0x94>
	}
	else if(TIM2->CCR2 >= 1999)
 8006eaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb0:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d905      	bls.n	8006ec4 <TIM2_IRQHandler+0x94>
	{
		TIM2->CCR2 = TIM2->ARR;
 8006eb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ebc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec2:	6393      	str	r3, [r2, #56]	; 0x38
	else
	{
		/* do nothing */
	}

	if(Rte_P_IntLights_IntLightsPort_IntLights_CurrentState == STD_HIGH)
 8006ec4:	4b20      	ldr	r3, [pc, #128]	; (8006f48 <TIM2_IRQHandler+0x118>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d11c      	bne.n	8006f06 <TIM2_IRQHandler+0xd6>
	{
		if(TIM2->CCR3 < 1999)
 8006ecc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed2:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d807      	bhi.n	8006eea <TIM2_IRQHandler+0xba>
		{
			TIM2->CCR3 = TIM2->CCR3 + 20;
 8006eda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006ee4:	3314      	adds	r3, #20
 8006ee6:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006ee8:	e027      	b.n	8006f3a <TIM2_IRQHandler+0x10a>
		}
		else if(TIM2->CCR3 >= 1999)
 8006eea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef0:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d920      	bls.n	8006f3a <TIM2_IRQHandler+0x10a>
		{
			TIM2->CCR3 = TIM2->ARR;
 8006ef8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006efc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f02:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006f04:	e019      	b.n	8006f3a <TIM2_IRQHandler+0x10a>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_IntLights_IntLightsPort_IntLights_CurrentState == STD_LOW)
 8006f06:	4b10      	ldr	r3, [pc, #64]	; (8006f48 <TIM2_IRQHandler+0x118>)
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d115      	bne.n	8006f3a <TIM2_IRQHandler+0x10a>
	{
		if(TIM2->CCR3 > 20)
 8006f0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f14:	2b14      	cmp	r3, #20
 8006f16:	d907      	bls.n	8006f28 <TIM2_IRQHandler+0xf8>
		{
			TIM2->CCR3 = TIM2->CCR3 - 20;
 8006f18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006f22:	3b14      	subs	r3, #20
 8006f24:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006f26:	e008      	b.n	8006f3a <TIM2_IRQHandler+0x10a>
		}
		else if(TIM2->CCR3 <= 20)
 8006f28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2e:	2b14      	cmp	r3, #20
 8006f30:	d803      	bhi.n	8006f3a <TIM2_IRQHandler+0x10a>
		{
			TIM2->CCR3 = 0;
 8006f32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f36:	2200      	movs	r2, #0
 8006f38:	63da      	str	r2, [r3, #60]	; 0x3c
	else
	{
		/* do nothing */
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006f3a:	4804      	ldr	r0, [pc, #16]	; (8006f4c <TIM2_IRQHandler+0x11c>)
 8006f3c:	f007 fad8 	bl	800e4f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 8006f40:	bf00      	nop
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	200001de 	.word	0x200001de
 8006f48:	200001c8 	.word	0x200001c8
 8006f4c:	20000758 	.word	0x20000758

08006f50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
	/* On central lock set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the central lock is set to low, set duty cycle to 0. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8006f54:	4b46      	ldr	r3, [pc, #280]	; (8007070 <TIM3_IRQHandler+0x120>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d116      	bne.n	8006f8a <TIM3_IRQHandler+0x3a>
	{
		if(TIM3->CCR1 < TIM3->ARR)
 8006f5c:	4b45      	ldr	r3, [pc, #276]	; (8007074 <TIM3_IRQHandler+0x124>)
 8006f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f60:	4b44      	ldr	r3, [pc, #272]	; (8007074 <TIM3_IRQHandler+0x124>)
 8006f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d205      	bcs.n	8006f74 <TIM3_IRQHandler+0x24>
		{
			TIM3->CCR1 = TIM3->CCR1 + 5;
 8006f68:	4b42      	ldr	r3, [pc, #264]	; (8007074 <TIM3_IRQHandler+0x124>)
 8006f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f6c:	4a41      	ldr	r2, [pc, #260]	; (8007074 <TIM3_IRQHandler+0x124>)
 8006f6e:	3305      	adds	r3, #5
 8006f70:	6353      	str	r3, [r2, #52]	; 0x34
 8006f72:	e011      	b.n	8006f98 <TIM3_IRQHandler+0x48>
		}
		else if(TIM3->CCR1 == TIM3->ARR)
 8006f74:	4b3f      	ldr	r3, [pc, #252]	; (8007074 <TIM3_IRQHandler+0x124>)
 8006f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f78:	4b3e      	ldr	r3, [pc, #248]	; (8007074 <TIM3_IRQHandler+0x124>)
 8006f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d10b      	bne.n	8006f98 <TIM3_IRQHandler+0x48>
		{
			TIM3->CCR1 = TIM3->ARR;
 8006f80:	4b3c      	ldr	r3, [pc, #240]	; (8007074 <TIM3_IRQHandler+0x124>)
 8006f82:	4a3c      	ldr	r2, [pc, #240]	; (8007074 <TIM3_IRQHandler+0x124>)
 8006f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f86:	6353      	str	r3, [r2, #52]	; 0x34
 8006f88:	e006      	b.n	8006f98 <TIM3_IRQHandler+0x48>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW)
 8006f8a:	4b39      	ldr	r3, [pc, #228]	; (8007070 <TIM3_IRQHandler+0x120>)
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d102      	bne.n	8006f98 <TIM3_IRQHandler+0x48>
	{
		TIM3->CCR1 = 0;
 8006f92:	4b38      	ldr	r3, [pc, #224]	; (8007074 <TIM3_IRQHandler+0x124>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	635a      	str	r2, [r3, #52]	; 0x34
	/* On brake lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the brake lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_HIGH)
 8006f98:	4b37      	ldr	r3, [pc, #220]	; (8007078 <TIM3_IRQHandler+0x128>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d116      	bne.n	8006fce <TIM3_IRQHandler+0x7e>
	{
		if(TIM3->CCR2 < TIM3->ARR)
 8006fa0:	4b34      	ldr	r3, [pc, #208]	; (8007074 <TIM3_IRQHandler+0x124>)
 8006fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fa4:	4b33      	ldr	r3, [pc, #204]	; (8007074 <TIM3_IRQHandler+0x124>)
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d205      	bcs.n	8006fb8 <TIM3_IRQHandler+0x68>
		{
			TIM3->CCR2 = TIM3->CCR2 + 1;
 8006fac:	4b31      	ldr	r3, [pc, #196]	; (8007074 <TIM3_IRQHandler+0x124>)
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	4a30      	ldr	r2, [pc, #192]	; (8007074 <TIM3_IRQHandler+0x124>)
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	6393      	str	r3, [r2, #56]	; 0x38
 8006fb6:	e011      	b.n	8006fdc <TIM3_IRQHandler+0x8c>
		}
		else if(TIM3->CCR2 == TIM3->ARR)
 8006fb8:	4b2e      	ldr	r3, [pc, #184]	; (8007074 <TIM3_IRQHandler+0x124>)
 8006fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fbc:	4b2d      	ldr	r3, [pc, #180]	; (8007074 <TIM3_IRQHandler+0x124>)
 8006fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d10b      	bne.n	8006fdc <TIM3_IRQHandler+0x8c>
		{
			TIM3->CCR2 = TIM3->ARR;
 8006fc4:	4b2b      	ldr	r3, [pc, #172]	; (8007074 <TIM3_IRQHandler+0x124>)
 8006fc6:	4a2b      	ldr	r2, [pc, #172]	; (8007074 <TIM3_IRQHandler+0x124>)
 8006fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fca:	6393      	str	r3, [r2, #56]	; 0x38
 8006fcc:	e006      	b.n	8006fdc <TIM3_IRQHandler+0x8c>
		{
			/* do nothing */
		}

	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_LOW)
 8006fce:	4b2a      	ldr	r3, [pc, #168]	; (8007078 <TIM3_IRQHandler+0x128>)
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d102      	bne.n	8006fdc <TIM3_IRQHandler+0x8c>
	{
		TIM3->CCR2 = 0;
 8006fd6:	4b27      	ldr	r3, [pc, #156]	; (8007074 <TIM3_IRQHandler+0x124>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	639a      	str	r2, [r3, #56]	; 0x38
	/* On front fog lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the front fog lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState == STD_HIGH)
 8006fdc:	4b27      	ldr	r3, [pc, #156]	; (800707c <TIM3_IRQHandler+0x12c>)
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d116      	bne.n	8007012 <TIM3_IRQHandler+0xc2>
	{
		if(TIM3->CCR3 < TIM3->ARR)
 8006fe4:	4b23      	ldr	r3, [pc, #140]	; (8007074 <TIM3_IRQHandler+0x124>)
 8006fe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fe8:	4b22      	ldr	r3, [pc, #136]	; (8007074 <TIM3_IRQHandler+0x124>)
 8006fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d205      	bcs.n	8006ffc <TIM3_IRQHandler+0xac>
		{
			TIM3->CCR3 = TIM3->CCR3 + 1;
 8006ff0:	4b20      	ldr	r3, [pc, #128]	; (8007074 <TIM3_IRQHandler+0x124>)
 8006ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff4:	4a1f      	ldr	r2, [pc, #124]	; (8007074 <TIM3_IRQHandler+0x124>)
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006ffa:	e011      	b.n	8007020 <TIM3_IRQHandler+0xd0>
		}
		else if(TIM3->CCR3 == TIM3->ARR)
 8006ffc:	4b1d      	ldr	r3, [pc, #116]	; (8007074 <TIM3_IRQHandler+0x124>)
 8006ffe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007000:	4b1c      	ldr	r3, [pc, #112]	; (8007074 <TIM3_IRQHandler+0x124>)
 8007002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007004:	429a      	cmp	r2, r3
 8007006:	d10b      	bne.n	8007020 <TIM3_IRQHandler+0xd0>
		{
			TIM3->CCR3 = TIM3->ARR;
 8007008:	4b1a      	ldr	r3, [pc, #104]	; (8007074 <TIM3_IRQHandler+0x124>)
 800700a:	4a1a      	ldr	r2, [pc, #104]	; (8007074 <TIM3_IRQHandler+0x124>)
 800700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8007010:	e006      	b.n	8007020 <TIM3_IRQHandler+0xd0>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState == STD_LOW)
 8007012:	4b1a      	ldr	r3, [pc, #104]	; (800707c <TIM3_IRQHandler+0x12c>)
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d102      	bne.n	8007020 <TIM3_IRQHandler+0xd0>
	{
		TIM3->CCR3 = 0;
 800701a:	4b16      	ldr	r3, [pc, #88]	; (8007074 <TIM3_IRQHandler+0x124>)
 800701c:	2200      	movs	r2, #0
 800701e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* On rear fog lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the rear fog lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState == STD_HIGH)
 8007020:	4b17      	ldr	r3, [pc, #92]	; (8007080 <TIM3_IRQHandler+0x130>)
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d116      	bne.n	8007056 <TIM3_IRQHandler+0x106>
	{
		if(TIM3->CCR4 < TIM3->ARR)
 8007028:	4b12      	ldr	r3, [pc, #72]	; (8007074 <TIM3_IRQHandler+0x124>)
 800702a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800702c:	4b11      	ldr	r3, [pc, #68]	; (8007074 <TIM3_IRQHandler+0x124>)
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	429a      	cmp	r2, r3
 8007032:	d205      	bcs.n	8007040 <TIM3_IRQHandler+0xf0>
		{
			TIM3->CCR4 = TIM3->CCR4 + 1;
 8007034:	4b0f      	ldr	r3, [pc, #60]	; (8007074 <TIM3_IRQHandler+0x124>)
 8007036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007038:	4a0e      	ldr	r2, [pc, #56]	; (8007074 <TIM3_IRQHandler+0x124>)
 800703a:	3301      	adds	r3, #1
 800703c:	6413      	str	r3, [r2, #64]	; 0x40
 800703e:	e011      	b.n	8007064 <TIM3_IRQHandler+0x114>
		}
		else if(TIM3->CCR4 == TIM3->ARR)
 8007040:	4b0c      	ldr	r3, [pc, #48]	; (8007074 <TIM3_IRQHandler+0x124>)
 8007042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007044:	4b0b      	ldr	r3, [pc, #44]	; (8007074 <TIM3_IRQHandler+0x124>)
 8007046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007048:	429a      	cmp	r2, r3
 800704a:	d10b      	bne.n	8007064 <TIM3_IRQHandler+0x114>
		{
			TIM3->CCR4 = TIM3->ARR;
 800704c:	4b09      	ldr	r3, [pc, #36]	; (8007074 <TIM3_IRQHandler+0x124>)
 800704e:	4a09      	ldr	r2, [pc, #36]	; (8007074 <TIM3_IRQHandler+0x124>)
 8007050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007052:	6413      	str	r3, [r2, #64]	; 0x40
 8007054:	e006      	b.n	8007064 <TIM3_IRQHandler+0x114>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState == STD_LOW)
 8007056:	4b0a      	ldr	r3, [pc, #40]	; (8007080 <TIM3_IRQHandler+0x130>)
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d102      	bne.n	8007064 <TIM3_IRQHandler+0x114>
	{
		TIM3->CCR4 = 0;
 800705e:	4b05      	ldr	r3, [pc, #20]	; (8007074 <TIM3_IRQHandler+0x124>)
 8007060:	2200      	movs	r2, #0
 8007062:	641a      	str	r2, [r3, #64]	; 0x40
	else
	{
		/* do nothing */
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007064:	4807      	ldr	r0, [pc, #28]	; (8007084 <TIM3_IRQHandler+0x134>)
 8007066:	f007 fa43 	bl	800e4f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 800706a:	bf00      	nop
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	20000139 	.word	0x20000139
 8007074:	40000400 	.word	0x40000400
 8007078:	20000179 	.word	0x20000179
 800707c:	2000017c 	.word	0x2000017c
 8007080:	20000182 	.word	0x20000182
 8007084:	2000080c 	.word	0x2000080c

08007088 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800708c:	4802      	ldr	r0, [pc, #8]	; (8007098 <TIM4_IRQHandler+0x10>)
 800708e:	f007 fa2f 	bl	800e4f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  /* USER CODE END TIM4_IRQn 1 */
}
 8007092:	bf00      	nop
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	200008c0 	.word	0x200008c0

0800709c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80070a0:	4802      	ldr	r0, [pc, #8]	; (80070ac <I2C1_EV_IRQHandler+0x10>)
 80070a2:	f003 fa1f 	bl	800a4e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80070a6:	bf00      	nop
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	20000458 	.word	0x20000458

080070b0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80070b4:	4802      	ldr	r0, [pc, #8]	; (80070c0 <I2C1_ER_IRQHandler+0x10>)
 80070b6:	f003 fb86 	bl	800a7c6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80070ba:	bf00      	nop
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	20000458 	.word	0x20000458

080070c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80070c8:	4802      	ldr	r0, [pc, #8]	; (80070d4 <USART1_IRQHandler+0x10>)
 80070ca:	f008 fbcf 	bl	800f86c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  /* USER CODE END USART1_IRQn 1 */
}
 80070ce:	bf00      	nop
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20000b90 	.word	0x20000b90

080070d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80070dc:	4802      	ldr	r0, [pc, #8]	; (80070e8 <TIM5_IRQHandler+0x10>)
 80070de:	f007 fa07 	bl	800e4f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  /* USER CODE END TIM5_IRQn 1 */
}
 80070e2:	bf00      	nop
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	20000974 	.word	0x20000974

080070ec <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80070f0:	4802      	ldr	r0, [pc, #8]	; (80070fc <SPI3_IRQHandler+0x10>)
 80070f2:	f005 ff67 	bl	800cfc4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80070f6:	bf00      	nop
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	20000620 	.word	0x20000620

08007100 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007104:	4802      	ldr	r0, [pc, #8]	; (8007110 <DMA2_Stream0_IRQHandler+0x10>)
 8007106:	f002 f81d 	bl	8009144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800710a:	bf00      	nop
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	20000344 	.word	0x20000344

08007114 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8007118:	4802      	ldr	r0, [pc, #8]	; (8007124 <I2C3_EV_IRQHandler+0x10>)
 800711a:	f003 f9e3 	bl	800a4e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800711e:	bf00      	nop
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	200004dc 	.word	0x200004dc

08007128 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 800712c:	4802      	ldr	r0, [pc, #8]	; (8007138 <I2C3_ER_IRQHandler+0x10>)
 800712e:	f003 fb4a 	bl	800a7c6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8007132:	bf00      	nop
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	200004dc 	.word	0x200004dc

0800713c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 800713c:	b480      	push	{r7}
 800713e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FPU_IRQn 0 */
  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */
  /* USER CODE END FPU_IRQn 1 */
}
 8007140:	bf00      	nop
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
	...

0800714c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007154:	4a14      	ldr	r2, [pc, #80]	; (80071a8 <_sbrk+0x5c>)
 8007156:	4b15      	ldr	r3, [pc, #84]	; (80071ac <_sbrk+0x60>)
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007160:	4b13      	ldr	r3, [pc, #76]	; (80071b0 <_sbrk+0x64>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d102      	bne.n	800716e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007168:	4b11      	ldr	r3, [pc, #68]	; (80071b0 <_sbrk+0x64>)
 800716a:	4a12      	ldr	r2, [pc, #72]	; (80071b4 <_sbrk+0x68>)
 800716c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800716e:	4b10      	ldr	r3, [pc, #64]	; (80071b0 <_sbrk+0x64>)
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4413      	add	r3, r2
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	429a      	cmp	r2, r3
 800717a:	d207      	bcs.n	800718c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800717c:	f010 fc1c 	bl	80179b8 <__errno>
 8007180:	4603      	mov	r3, r0
 8007182:	220c      	movs	r2, #12
 8007184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007186:	f04f 33ff 	mov.w	r3, #4294967295
 800718a:	e009      	b.n	80071a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800718c:	4b08      	ldr	r3, [pc, #32]	; (80071b0 <_sbrk+0x64>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007192:	4b07      	ldr	r3, [pc, #28]	; (80071b0 <_sbrk+0x64>)
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4413      	add	r3, r2
 800719a:	4a05      	ldr	r2, [pc, #20]	; (80071b0 <_sbrk+0x64>)
 800719c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800719e:	68fb      	ldr	r3, [r7, #12]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	20020000 	.word	0x20020000
 80071ac:	00000400 	.word	0x00000400
 80071b0:	20000754 	.word	0x20000754
 80071b4:	2000e678 	.word	0x2000e678

080071b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80071b8:	b480      	push	{r7}
 80071ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80071bc:	4b06      	ldr	r3, [pc, #24]	; (80071d8 <SystemInit+0x20>)
 80071be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071c2:	4a05      	ldr	r2, [pc, #20]	; (80071d8 <SystemInit+0x20>)
 80071c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80071cc:	bf00      	nop
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	e000ed00 	.word	0xe000ed00

080071dc <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM11_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b08e      	sub	sp, #56	; 0x38
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071e8:	2200      	movs	r2, #0
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	605a      	str	r2, [r3, #4]
 80071ee:	609a      	str	r2, [r3, #8]
 80071f0:	60da      	str	r2, [r3, #12]
 80071f2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071fc:	d10e      	bne.n	800721c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80071fe:	2300      	movs	r3, #0
 8007200:	623b      	str	r3, [r7, #32]
 8007202:	4b49      	ldr	r3, [pc, #292]	; (8007328 <HAL_TIM_Base_MspInit+0x14c>)
 8007204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007206:	4a48      	ldr	r2, [pc, #288]	; (8007328 <HAL_TIM_Base_MspInit+0x14c>)
 8007208:	f043 0301 	orr.w	r3, r3, #1
 800720c:	6413      	str	r3, [r2, #64]	; 0x40
 800720e:	4b46      	ldr	r3, [pc, #280]	; (8007328 <HAL_TIM_Base_MspInit+0x14c>)
 8007210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	623b      	str	r3, [r7, #32]
 8007218:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800721a:	e080      	b.n	800731e <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM3)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a42      	ldr	r2, [pc, #264]	; (800732c <HAL_TIM_Base_MspInit+0x150>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d10e      	bne.n	8007244 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007226:	2300      	movs	r3, #0
 8007228:	61fb      	str	r3, [r7, #28]
 800722a:	4b3f      	ldr	r3, [pc, #252]	; (8007328 <HAL_TIM_Base_MspInit+0x14c>)
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	4a3e      	ldr	r2, [pc, #248]	; (8007328 <HAL_TIM_Base_MspInit+0x14c>)
 8007230:	f043 0302 	orr.w	r3, r3, #2
 8007234:	6413      	str	r3, [r2, #64]	; 0x40
 8007236:	4b3c      	ldr	r3, [pc, #240]	; (8007328 <HAL_TIM_Base_MspInit+0x14c>)
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	61fb      	str	r3, [r7, #28]
 8007240:	69fb      	ldr	r3, [r7, #28]
}
 8007242:	e06c      	b.n	800731e <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM4)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a39      	ldr	r2, [pc, #228]	; (8007330 <HAL_TIM_Base_MspInit+0x154>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d10e      	bne.n	800726c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800724e:	2300      	movs	r3, #0
 8007250:	61bb      	str	r3, [r7, #24]
 8007252:	4b35      	ldr	r3, [pc, #212]	; (8007328 <HAL_TIM_Base_MspInit+0x14c>)
 8007254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007256:	4a34      	ldr	r2, [pc, #208]	; (8007328 <HAL_TIM_Base_MspInit+0x14c>)
 8007258:	f043 0304 	orr.w	r3, r3, #4
 800725c:	6413      	str	r3, [r2, #64]	; 0x40
 800725e:	4b32      	ldr	r3, [pc, #200]	; (8007328 <HAL_TIM_Base_MspInit+0x14c>)
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	f003 0304 	and.w	r3, r3, #4
 8007266:	61bb      	str	r3, [r7, #24]
 8007268:	69bb      	ldr	r3, [r7, #24]
}
 800726a:	e058      	b.n	800731e <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM5)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a30      	ldr	r2, [pc, #192]	; (8007334 <HAL_TIM_Base_MspInit+0x158>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d12c      	bne.n	80072d0 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007276:	2300      	movs	r3, #0
 8007278:	617b      	str	r3, [r7, #20]
 800727a:	4b2b      	ldr	r3, [pc, #172]	; (8007328 <HAL_TIM_Base_MspInit+0x14c>)
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	4a2a      	ldr	r2, [pc, #168]	; (8007328 <HAL_TIM_Base_MspInit+0x14c>)
 8007280:	f043 0308 	orr.w	r3, r3, #8
 8007284:	6413      	str	r3, [r2, #64]	; 0x40
 8007286:	4b28      	ldr	r3, [pc, #160]	; (8007328 <HAL_TIM_Base_MspInit+0x14c>)
 8007288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728a:	f003 0308 	and.w	r3, r3, #8
 800728e:	617b      	str	r3, [r7, #20]
 8007290:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007292:	2300      	movs	r3, #0
 8007294:	613b      	str	r3, [r7, #16]
 8007296:	4b24      	ldr	r3, [pc, #144]	; (8007328 <HAL_TIM_Base_MspInit+0x14c>)
 8007298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729a:	4a23      	ldr	r2, [pc, #140]	; (8007328 <HAL_TIM_Base_MspInit+0x14c>)
 800729c:	f043 0301 	orr.w	r3, r3, #1
 80072a0:	6313      	str	r3, [r2, #48]	; 0x30
 80072a2:	4b21      	ldr	r3, [pc, #132]	; (8007328 <HAL_TIM_Base_MspInit+0x14c>)
 80072a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	613b      	str	r3, [r7, #16]
 80072ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PDCF_IC_Pin|PDCR_IC_Pin;
 80072ae:	2303      	movs	r3, #3
 80072b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072b2:	2302      	movs	r3, #2
 80072b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072b6:	2300      	movs	r3, #0
 80072b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072ba:	2300      	movs	r3, #0
 80072bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80072be:	2302      	movs	r3, #2
 80072c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072c6:	4619      	mov	r1, r3
 80072c8:	481b      	ldr	r0, [pc, #108]	; (8007338 <HAL_TIM_Base_MspInit+0x15c>)
 80072ca:	f002 fb5b 	bl	8009984 <HAL_GPIO_Init>
}
 80072ce:	e026      	b.n	800731e <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM9)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a19      	ldr	r2, [pc, #100]	; (800733c <HAL_TIM_Base_MspInit+0x160>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d10e      	bne.n	80072f8 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80072da:	2300      	movs	r3, #0
 80072dc:	60fb      	str	r3, [r7, #12]
 80072de:	4b12      	ldr	r3, [pc, #72]	; (8007328 <HAL_TIM_Base_MspInit+0x14c>)
 80072e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e2:	4a11      	ldr	r2, [pc, #68]	; (8007328 <HAL_TIM_Base_MspInit+0x14c>)
 80072e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072e8:	6453      	str	r3, [r2, #68]	; 0x44
 80072ea:	4b0f      	ldr	r3, [pc, #60]	; (8007328 <HAL_TIM_Base_MspInit+0x14c>)
 80072ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072f2:	60fb      	str	r3, [r7, #12]
 80072f4:	68fb      	ldr	r3, [r7, #12]
}
 80072f6:	e012      	b.n	800731e <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM11)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a10      	ldr	r2, [pc, #64]	; (8007340 <HAL_TIM_Base_MspInit+0x164>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d10d      	bne.n	800731e <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007302:	2300      	movs	r3, #0
 8007304:	60bb      	str	r3, [r7, #8]
 8007306:	4b08      	ldr	r3, [pc, #32]	; (8007328 <HAL_TIM_Base_MspInit+0x14c>)
 8007308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730a:	4a07      	ldr	r2, [pc, #28]	; (8007328 <HAL_TIM_Base_MspInit+0x14c>)
 800730c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007310:	6453      	str	r3, [r2, #68]	; 0x44
 8007312:	4b05      	ldr	r3, [pc, #20]	; (8007328 <HAL_TIM_Base_MspInit+0x14c>)
 8007314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007316:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800731a:	60bb      	str	r3, [r7, #8]
 800731c:	68bb      	ldr	r3, [r7, #8]
}
 800731e:	bf00      	nop
 8007320:	3738      	adds	r7, #56	; 0x38
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	40023800 	.word	0x40023800
 800732c:	40000400 	.word	0x40000400
 8007330:	40000800 	.word	0x40000800
 8007334:	40000c00 	.word	0x40000c00
 8007338:	40020000 	.word	0x40020000
 800733c:	40014000 	.word	0x40014000
 8007340:	40014800 	.word	0x40014800

08007344 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b08c      	sub	sp, #48	; 0x30
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800734c:	f107 031c 	add.w	r3, r7, #28
 8007350:	2200      	movs	r2, #0
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	605a      	str	r2, [r3, #4]
 8007356:	609a      	str	r2, [r3, #8]
 8007358:	60da      	str	r2, [r3, #12]
 800735a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007364:	d13e      	bne.n	80073e4 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007366:	2300      	movs	r3, #0
 8007368:	61bb      	str	r3, [r7, #24]
 800736a:	4b45      	ldr	r3, [pc, #276]	; (8007480 <HAL_TIM_MspPostInit+0x13c>)
 800736c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736e:	4a44      	ldr	r2, [pc, #272]	; (8007480 <HAL_TIM_MspPostInit+0x13c>)
 8007370:	f043 0302 	orr.w	r3, r3, #2
 8007374:	6313      	str	r3, [r2, #48]	; 0x30
 8007376:	4b42      	ldr	r3, [pc, #264]	; (8007480 <HAL_TIM_MspPostInit+0x13c>)
 8007378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737a:	f003 0302 	and.w	r3, r3, #2
 800737e:	61bb      	str	r3, [r7, #24]
 8007380:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007382:	2300      	movs	r3, #0
 8007384:	617b      	str	r3, [r7, #20]
 8007386:	4b3e      	ldr	r3, [pc, #248]	; (8007480 <HAL_TIM_MspPostInit+0x13c>)
 8007388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738a:	4a3d      	ldr	r2, [pc, #244]	; (8007480 <HAL_TIM_MspPostInit+0x13c>)
 800738c:	f043 0301 	orr.w	r3, r3, #1
 8007390:	6313      	str	r3, [r2, #48]	; 0x30
 8007392:	4b3b      	ldr	r3, [pc, #236]	; (8007480 <HAL_TIM_MspPostInit+0x13c>)
 8007394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	617b      	str	r3, [r7, #20]
 800739c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = IL_PWM_Pin|RPL_PWM_Pin;
 800739e:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80073a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073a4:	2302      	movs	r3, #2
 80073a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073a8:	2300      	movs	r3, #0
 80073aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073ac:	2300      	movs	r3, #0
 80073ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80073b0:	2301      	movs	r3, #1
 80073b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073b4:	f107 031c 	add.w	r3, r7, #28
 80073b8:	4619      	mov	r1, r3
 80073ba:	4832      	ldr	r0, [pc, #200]	; (8007484 <HAL_TIM_MspPostInit+0x140>)
 80073bc:	f002 fae2 	bl	8009984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LB_PWM_Pin;
 80073c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073c6:	2302      	movs	r3, #2
 80073c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073ce:	2300      	movs	r3, #0
 80073d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80073d2:	2301      	movs	r3, #1
 80073d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LB_PWM_GPIO_Port, &GPIO_InitStruct);
 80073d6:	f107 031c 	add.w	r3, r7, #28
 80073da:	4619      	mov	r1, r3
 80073dc:	482a      	ldr	r0, [pc, #168]	; (8007488 <HAL_TIM_MspPostInit+0x144>)
 80073de:	f002 fad1 	bl	8009984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80073e2:	e048      	b.n	8007476 <HAL_TIM_MspPostInit+0x132>
  else if(timHandle->Instance==TIM3)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a28      	ldr	r2, [pc, #160]	; (800748c <HAL_TIM_MspPostInit+0x148>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d11f      	bne.n	800742e <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80073ee:	2300      	movs	r3, #0
 80073f0:	613b      	str	r3, [r7, #16]
 80073f2:	4b23      	ldr	r3, [pc, #140]	; (8007480 <HAL_TIM_MspPostInit+0x13c>)
 80073f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f6:	4a22      	ldr	r2, [pc, #136]	; (8007480 <HAL_TIM_MspPostInit+0x13c>)
 80073f8:	f043 0304 	orr.w	r3, r3, #4
 80073fc:	6313      	str	r3, [r2, #48]	; 0x30
 80073fe:	4b20      	ldr	r3, [pc, #128]	; (8007480 <HAL_TIM_MspPostInit+0x13c>)
 8007400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007402:	f003 0304 	and.w	r3, r3, #4
 8007406:	613b      	str	r3, [r7, #16]
 8007408:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DL_PWM_Pin|BL_PWM_Pin|FFL_PWM_Pin|RFL_PWM_Pin;
 800740a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800740e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007410:	2302      	movs	r3, #2
 8007412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007414:	2300      	movs	r3, #0
 8007416:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007418:	2300      	movs	r3, #0
 800741a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800741c:	2302      	movs	r3, #2
 800741e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007420:	f107 031c 	add.w	r3, r7, #28
 8007424:	4619      	mov	r1, r3
 8007426:	481a      	ldr	r0, [pc, #104]	; (8007490 <HAL_TIM_MspPostInit+0x14c>)
 8007428:	f002 faac 	bl	8009984 <HAL_GPIO_Init>
}
 800742c:	e023      	b.n	8007476 <HAL_TIM_MspPostInit+0x132>
  else if(timHandle->Instance==TIM4)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a18      	ldr	r2, [pc, #96]	; (8007494 <HAL_TIM_MspPostInit+0x150>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d11e      	bne.n	8007476 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007438:	2300      	movs	r3, #0
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	4b10      	ldr	r3, [pc, #64]	; (8007480 <HAL_TIM_MspPostInit+0x13c>)
 800743e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007440:	4a0f      	ldr	r2, [pc, #60]	; (8007480 <HAL_TIM_MspPostInit+0x13c>)
 8007442:	f043 0302 	orr.w	r3, r3, #2
 8007446:	6313      	str	r3, [r2, #48]	; 0x30
 8007448:	4b0d      	ldr	r3, [pc, #52]	; (8007480 <HAL_TIM_MspPostInit+0x13c>)
 800744a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744c:	f003 0302 	and.w	r3, r3, #2
 8007450:	60fb      	str	r3, [r7, #12]
 8007452:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LTS_PWM_Pin|RTS_PWM_Pin;
 8007454:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800745a:	2302      	movs	r3, #2
 800745c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800745e:	2300      	movs	r3, #0
 8007460:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007462:	2300      	movs	r3, #0
 8007464:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007466:	2302      	movs	r3, #2
 8007468:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800746a:	f107 031c 	add.w	r3, r7, #28
 800746e:	4619      	mov	r1, r3
 8007470:	4804      	ldr	r0, [pc, #16]	; (8007484 <HAL_TIM_MspPostInit+0x140>)
 8007472:	f002 fa87 	bl	8009984 <HAL_GPIO_Init>
}
 8007476:	bf00      	nop
 8007478:	3730      	adds	r7, #48	; 0x30
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	40023800 	.word	0x40023800
 8007484:	40020400 	.word	0x40020400
 8007488:	40020000 	.word	0x40020000
 800748c:	40000400 	.word	0x40000400
 8007490:	40020800 	.word	0x40020800
 8007494:	40000800 	.word	0x40000800

08007498 <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a8:	d109      	bne.n	80074be <HAL_TIM_Base_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 80074aa:	4b2e      	ldr	r3, [pc, #184]	; (8007564 <HAL_TIM_Base_MspDeInit+0xcc>)
 80074ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ae:	4a2d      	ldr	r2, [pc, #180]	; (8007564 <HAL_TIM_Base_MspDeInit+0xcc>)
 80074b0:	f023 0301 	bic.w	r3, r3, #1
 80074b4:	6413      	str	r3, [r2, #64]	; 0x40

    /* TIM2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 80074b6:	201c      	movs	r0, #28
 80074b8:	f001 fb33 	bl	8008b22 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspDeInit 1 */

  /* USER CODE END TIM11_MspDeInit 1 */
  }
}
 80074bc:	e04d      	b.n	800755a <HAL_TIM_Base_MspDeInit+0xc2>
  else if(tim_baseHandle->Instance==TIM3)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a29      	ldr	r2, [pc, #164]	; (8007568 <HAL_TIM_Base_MspDeInit+0xd0>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d109      	bne.n	80074dc <HAL_TIM_Base_MspDeInit+0x44>
    __HAL_RCC_TIM3_CLK_DISABLE();
 80074c8:	4b26      	ldr	r3, [pc, #152]	; (8007564 <HAL_TIM_Base_MspDeInit+0xcc>)
 80074ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074cc:	4a25      	ldr	r2, [pc, #148]	; (8007564 <HAL_TIM_Base_MspDeInit+0xcc>)
 80074ce:	f023 0302 	bic.w	r3, r3, #2
 80074d2:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 80074d4:	201d      	movs	r0, #29
 80074d6:	f001 fb24 	bl	8008b22 <HAL_NVIC_DisableIRQ>
}
 80074da:	e03e      	b.n	800755a <HAL_TIM_Base_MspDeInit+0xc2>
  else if(tim_baseHandle->Instance==TIM4)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a22      	ldr	r2, [pc, #136]	; (800756c <HAL_TIM_Base_MspDeInit+0xd4>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d109      	bne.n	80074fa <HAL_TIM_Base_MspDeInit+0x62>
    __HAL_RCC_TIM4_CLK_DISABLE();
 80074e6:	4b1f      	ldr	r3, [pc, #124]	; (8007564 <HAL_TIM_Base_MspDeInit+0xcc>)
 80074e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ea:	4a1e      	ldr	r2, [pc, #120]	; (8007564 <HAL_TIM_Base_MspDeInit+0xcc>)
 80074ec:	f023 0304 	bic.w	r3, r3, #4
 80074f0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 80074f2:	201e      	movs	r0, #30
 80074f4:	f001 fb15 	bl	8008b22 <HAL_NVIC_DisableIRQ>
}
 80074f8:	e02f      	b.n	800755a <HAL_TIM_Base_MspDeInit+0xc2>
  else if(tim_baseHandle->Instance==TIM5)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a1c      	ldr	r2, [pc, #112]	; (8007570 <HAL_TIM_Base_MspDeInit+0xd8>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d10d      	bne.n	8007520 <HAL_TIM_Base_MspDeInit+0x88>
    __HAL_RCC_TIM5_CLK_DISABLE();
 8007504:	4b17      	ldr	r3, [pc, #92]	; (8007564 <HAL_TIM_Base_MspDeInit+0xcc>)
 8007506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007508:	4a16      	ldr	r2, [pc, #88]	; (8007564 <HAL_TIM_Base_MspDeInit+0xcc>)
 800750a:	f023 0308 	bic.w	r3, r3, #8
 800750e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, PDCF_IC_Pin|PDCR_IC_Pin);
 8007510:	2103      	movs	r1, #3
 8007512:	4818      	ldr	r0, [pc, #96]	; (8007574 <HAL_TIM_Base_MspDeInit+0xdc>)
 8007514:	f002 fbba 	bl	8009c8c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
 8007518:	2032      	movs	r0, #50	; 0x32
 800751a:	f001 fb02 	bl	8008b22 <HAL_NVIC_DisableIRQ>
}
 800751e:	e01c      	b.n	800755a <HAL_TIM_Base_MspDeInit+0xc2>
  else if(tim_baseHandle->Instance==TIM9)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a14      	ldr	r2, [pc, #80]	; (8007578 <HAL_TIM_Base_MspDeInit+0xe0>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d109      	bne.n	800753e <HAL_TIM_Base_MspDeInit+0xa6>
    __HAL_RCC_TIM9_CLK_DISABLE();
 800752a:	4b0e      	ldr	r3, [pc, #56]	; (8007564 <HAL_TIM_Base_MspDeInit+0xcc>)
 800752c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800752e:	4a0d      	ldr	r2, [pc, #52]	; (8007564 <HAL_TIM_Base_MspDeInit+0xcc>)
 8007530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007534:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_NVIC_DisableIRQ(TIM1_BRK_TIM9_IRQn);
 8007536:	2018      	movs	r0, #24
 8007538:	f001 faf3 	bl	8008b22 <HAL_NVIC_DisableIRQ>
}
 800753c:	e00d      	b.n	800755a <HAL_TIM_Base_MspDeInit+0xc2>
  else if(tim_baseHandle->Instance==TIM11)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a0e      	ldr	r2, [pc, #56]	; (800757c <HAL_TIM_Base_MspDeInit+0xe4>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d108      	bne.n	800755a <HAL_TIM_Base_MspDeInit+0xc2>
    __HAL_RCC_TIM11_CLK_DISABLE();
 8007548:	4b06      	ldr	r3, [pc, #24]	; (8007564 <HAL_TIM_Base_MspDeInit+0xcc>)
 800754a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800754c:	4a05      	ldr	r2, [pc, #20]	; (8007564 <HAL_TIM_Base_MspDeInit+0xcc>)
 800754e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007552:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_NVIC_DisableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8007554:	201a      	movs	r0, #26
 8007556:	f001 fae4 	bl	8008b22 <HAL_NVIC_DisableIRQ>
}
 800755a:	bf00      	nop
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	40023800 	.word	0x40023800
 8007568:	40000400 	.word	0x40000400
 800756c:	40000800 	.word	0x40000800
 8007570:	40000c00 	.word	0x40000c00
 8007574:	40020000 	.word	0x40020000
 8007578:	40014000 	.word	0x40014000
 800757c:	40014800 	.word	0x40014800

08007580 <HAL_UART_MspInit>:
  /* USER CODE END USART1_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b08a      	sub	sp, #40	; 0x28
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007588:	f107 0314 	add.w	r3, r7, #20
 800758c:	2200      	movs	r2, #0
 800758e:	601a      	str	r2, [r3, #0]
 8007590:	605a      	str	r2, [r3, #4]
 8007592:	609a      	str	r2, [r3, #8]
 8007594:	60da      	str	r2, [r3, #12]
 8007596:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a19      	ldr	r2, [pc, #100]	; (8007604 <HAL_UART_MspInit+0x84>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d12c      	bne.n	80075fc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80075a2:	2300      	movs	r3, #0
 80075a4:	613b      	str	r3, [r7, #16]
 80075a6:	4b18      	ldr	r3, [pc, #96]	; (8007608 <HAL_UART_MspInit+0x88>)
 80075a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075aa:	4a17      	ldr	r2, [pc, #92]	; (8007608 <HAL_UART_MspInit+0x88>)
 80075ac:	f043 0310 	orr.w	r3, r3, #16
 80075b0:	6453      	str	r3, [r2, #68]	; 0x44
 80075b2:	4b15      	ldr	r3, [pc, #84]	; (8007608 <HAL_UART_MspInit+0x88>)
 80075b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b6:	f003 0310 	and.w	r3, r3, #16
 80075ba:	613b      	str	r3, [r7, #16]
 80075bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075be:	2300      	movs	r3, #0
 80075c0:	60fb      	str	r3, [r7, #12]
 80075c2:	4b11      	ldr	r3, [pc, #68]	; (8007608 <HAL_UART_MspInit+0x88>)
 80075c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c6:	4a10      	ldr	r2, [pc, #64]	; (8007608 <HAL_UART_MspInit+0x88>)
 80075c8:	f043 0301 	orr.w	r3, r3, #1
 80075cc:	6313      	str	r3, [r2, #48]	; 0x30
 80075ce:	4b0e      	ldr	r3, [pc, #56]	; (8007608 <HAL_UART_MspInit+0x88>)
 80075d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80075da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80075de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075e0:	2302      	movs	r3, #2
 80075e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075e4:	2300      	movs	r3, #0
 80075e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075e8:	2303      	movs	r3, #3
 80075ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80075ec:	2307      	movs	r3, #7
 80075ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075f0:	f107 0314 	add.w	r3, r7, #20
 80075f4:	4619      	mov	r1, r3
 80075f6:	4805      	ldr	r0, [pc, #20]	; (800760c <HAL_UART_MspInit+0x8c>)
 80075f8:	f002 f9c4 	bl	8009984 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80075fc:	bf00      	nop
 80075fe:	3728      	adds	r7, #40	; 0x28
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	40011000 	.word	0x40011000
 8007608:	40023800 	.word	0x40023800
 800760c:	40020000 	.word	0x40020000

08007610 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a0a      	ldr	r2, [pc, #40]	; (8007648 <HAL_UART_MspDeInit+0x38>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d10d      	bne.n	800763e <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8007622:	4b0a      	ldr	r3, [pc, #40]	; (800764c <HAL_UART_MspDeInit+0x3c>)
 8007624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007626:	4a09      	ldr	r2, [pc, #36]	; (800764c <HAL_UART_MspDeInit+0x3c>)
 8007628:	f023 0310 	bic.w	r3, r3, #16
 800762c:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800762e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007632:	4807      	ldr	r0, [pc, #28]	; (8007650 <HAL_UART_MspDeInit+0x40>)
 8007634:	f002 fb2a 	bl	8009c8c <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8007638:	2025      	movs	r0, #37	; 0x25
 800763a:	f001 fa72 	bl	8008b22 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800763e:	bf00      	nop
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	40011000 	.word	0x40011000
 800764c:	40023800 	.word	0x40023800
 8007650:	40020000 	.word	0x40020000

08007654 <HAL_WWDG_MspInit>:
  /* USER CODE END WWDG_Init 2 */

}

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* wwdgHandle)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]

  if(wwdgHandle->Instance==WWDG)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a0b      	ldr	r2, [pc, #44]	; (8007690 <HAL_WWDG_MspInit+0x3c>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d10d      	bne.n	8007682 <HAL_WWDG_MspInit+0x2e>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* WWDG clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8007666:	2300      	movs	r3, #0
 8007668:	60fb      	str	r3, [r7, #12]
 800766a:	4b0a      	ldr	r3, [pc, #40]	; (8007694 <HAL_WWDG_MspInit+0x40>)
 800766c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766e:	4a09      	ldr	r2, [pc, #36]	; (8007694 <HAL_WWDG_MspInit+0x40>)
 8007670:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007674:	6413      	str	r3, [r2, #64]	; 0x40
 8007676:	4b07      	ldr	r3, [pc, #28]	; (8007694 <HAL_WWDG_MspInit+0x40>)
 8007678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }
}
 8007682:	bf00      	nop
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	40002c00 	.word	0x40002c00
 8007694:	40023800 	.word	0x40023800

08007698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80076d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800769c:	480d      	ldr	r0, [pc, #52]	; (80076d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800769e:	490e      	ldr	r1, [pc, #56]	; (80076d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80076a0:	4a0e      	ldr	r2, [pc, #56]	; (80076dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80076a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80076a4:	e002      	b.n	80076ac <LoopCopyDataInit>

080076a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80076a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80076a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80076aa:	3304      	adds	r3, #4

080076ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80076ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80076ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80076b0:	d3f9      	bcc.n	80076a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80076b2:	4a0b      	ldr	r2, [pc, #44]	; (80076e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80076b4:	4c0b      	ldr	r4, [pc, #44]	; (80076e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80076b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80076b8:	e001      	b.n	80076be <LoopFillZerobss>

080076ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80076ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80076bc:	3204      	adds	r2, #4

080076be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80076be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80076c0:	d3fb      	bcc.n	80076ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80076c2:	f7ff fd79 	bl	80071b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80076c6:	f010 f97d 	bl	80179c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80076ca:	f7f9 fb51 	bl	8000d70 <main>
  bx  lr    
 80076ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80076d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80076d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80076d8:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80076dc:	08018ce8 	.word	0x08018ce8
  ldr r2, =_sbss
 80076e0:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80076e4:	2000e678 	.word	0x2000e678

080076e8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80076e8:	e7fe      	b.n	80076e8 <DMA1_Stream0_IRQHandler>

080076ea <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b084      	sub	sp, #16
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d104      	bne.n	8007702 <stm32_lock_acquire+0x18>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80076f8:	b672      	cpsid	i
}
 80076fa:	bf00      	nop
 80076fc:	f010 f916 	bl	801792c <Error_Handler>
 8007700:	e7fe      	b.n	8007700 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	7a1b      	ldrb	r3, [r3, #8]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d904      	bls.n	8007714 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800770a:	b672      	cpsid	i
}
 800770c:	bf00      	nop
 800770e:	f010 f90d 	bl	801792c <Error_Handler>
 8007712:	e7fe      	b.n	8007712 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	7a1b      	ldrb	r3, [r3, #8]
 8007718:	1c5a      	adds	r2, r3, #1
 800771a:	b2d1      	uxtb	r1, r2
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	7211      	strb	r1, [r2, #8]
 8007720:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007722:	f3ef 8211 	mrs	r2, BASEPRI
 8007726:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800772a:	f383 8811 	msr	BASEPRI, r3
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	f3bf 8f4f 	dsb	sy
 8007736:	60fa      	str	r2, [r7, #12]
 8007738:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8007742:	bf00      	nop
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b084      	sub	sp, #16
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d104      	bne.n	8007762 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8007758:	b672      	cpsid	i
}
 800775a:	bf00      	nop
 800775c:	f010 f8e6 	bl	801792c <Error_Handler>
 8007760:	e7fe      	b.n	8007760 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	7a1b      	ldrb	r3, [r3, #8]
 8007766:	3b01      	subs	r3, #1
 8007768:	b2da      	uxtb	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	7a1b      	ldrb	r3, [r3, #8]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d904      	bls.n	8007780 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8007776:	b672      	cpsid	i
}
 8007778:	bf00      	nop
 800777a:	f010 f8d7 	bl	801792c <Error_Handler>
 800777e:	e7fe      	b.n	800777e <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	7a1b      	ldrb	r3, [r3, #8]
 8007784:	461a      	mov	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800778c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007794:	bf00      	nop
}
 8007796:	bf00      	nop
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b082      	sub	sp, #8
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d104      	bne.n	80077b6 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80077ac:	b672      	cpsid	i
}
 80077ae:	bf00      	nop
 80077b0:	f010 f8bc 	bl	801792c <Error_Handler>
 80077b4:	e7fe      	b.n	80077b4 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7ff ff96 	bl	80076ea <stm32_lock_acquire>
}
 80077be:	bf00      	nop
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b082      	sub	sp, #8
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d104      	bne.n	80077de <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80077d4:	b672      	cpsid	i
}
 80077d6:	bf00      	nop
 80077d8:	f010 f8a8 	bl	801792c <Error_Handler>
 80077dc:	e7fe      	b.n	80077dc <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7ff ffb2 	bl	800774a <stm32_lock_release>
}
 80077e6:	bf00      	nop
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <Dem_Init>:
/***********************************************************************************
* Function: Dem_Init													           *
* Description: Initialize the module.			       							   *
************************************************************************************/
StdReturnType Dem_Init()
{
 80077ee:	b480      	push	{r7}
 80077f0:	af00      	add	r7, sp, #0
	return E_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <Dem_DeInit>:
/***********************************************************************************
* Function: Dem_DeInit													           *
* Description: De-initialize the module. 		   							       *
************************************************************************************/
StdReturnType Dem_DeInit()
{
 80077fe:	b480      	push	{r7}
 8007800:	af00      	add	r7, sp, #0
	return E_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
	...

08007810 <Dem_MainFunction>:
/***********************************************************************************
* Function: Dem_MainFunction													   *
* Description: Module main function.									 		   *
************************************************************************************/
VOID Dem_MainFunction()
{
 8007810:	b580      	push	{r7, lr}
 8007812:	af00      	add	r7, sp, #0
	switch(Dem_BswState)
 8007814:	4b0c      	ldr	r3, [pc, #48]	; (8007848 <Dem_MainFunction+0x38>)
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	2b02      	cmp	r3, #2
 800781a:	d00c      	beq.n	8007836 <Dem_MainFunction+0x26>
 800781c:	2b02      	cmp	r3, #2
 800781e:	dc10      	bgt.n	8007842 <Dem_MainFunction+0x32>
 8007820:	2b00      	cmp	r3, #0
 8007822:	d002      	beq.n	800782a <Dem_MainFunction+0x1a>
 8007824:	2b01      	cmp	r3, #1
 8007826:	d009      	beq.n	800783c <Dem_MainFunction+0x2c>
			break;
		case DEM_PROCESSFAULT_STATE:
			Dem_ProcessFault();
			break;
		default:
			break;
 8007828:	e00b      	b.n	8007842 <Dem_MainFunction+0x32>
			Dem_Init();
 800782a:	f7ff ffe0 	bl	80077ee <Dem_Init>
			Dem_BswState = DEM_PROCESSFAULT_STATE;
 800782e:	4b06      	ldr	r3, [pc, #24]	; (8007848 <Dem_MainFunction+0x38>)
 8007830:	2201      	movs	r2, #1
 8007832:	701a      	strb	r2, [r3, #0]
			break;
 8007834:	e006      	b.n	8007844 <Dem_MainFunction+0x34>
			Dem_DeInit();
 8007836:	f7ff ffe2 	bl	80077fe <Dem_DeInit>
			break;
 800783a:	e003      	b.n	8007844 <Dem_MainFunction+0x34>
			Dem_ProcessFault();
 800783c:	f000 f806 	bl	800784c <Dem_ProcessFault>
			break;
 8007840:	e000      	b.n	8007844 <Dem_MainFunction+0x34>
			break;
 8007842:	bf00      	nop
	}
}
 8007844:	bf00      	nop
 8007846:	bd80      	pop	{r7, pc}
 8007848:	20000c2c 	.word	0x20000c2c

0800784c <Dem_ProcessFault>:
/***********************************************************************************
* Function: Dem_ProcessFault													   *
* Description: Process fault from application.							 		   *
************************************************************************************/
VOID Dem_ProcessFault()
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
	if(firstRun == STD_LOW)
 8007852:	4b3a      	ldr	r3, [pc, #232]	; (800793c <Dem_ProcessFault+0xf0>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d114      	bne.n	8007884 <Dem_ProcessFault+0x38>
	{
		//I2cExtEeprom_Read(10, 0, Dem_MemDtcArray, 24);
		firstRun = STD_HIGH;
 800785a:	4b38      	ldr	r3, [pc, #224]	; (800793c <Dem_ProcessFault+0xf0>)
 800785c:	2201      	movs	r2, #1
 800785e:	701a      	strb	r2, [r3, #0]
		for(uint8 idx = 0; idx < 24; idx++)
 8007860:	2300      	movs	r3, #0
 8007862:	71fb      	strb	r3, [r7, #7]
 8007864:	e00b      	b.n	800787e <Dem_ProcessFault+0x32>
		{
			if(Dem_MemDtcArray[idx] >= 254)
 8007866:	79fb      	ldrb	r3, [r7, #7]
 8007868:	4a35      	ldr	r2, [pc, #212]	; (8007940 <Dem_ProcessFault+0xf4>)
 800786a:	5cd3      	ldrb	r3, [r2, r3]
 800786c:	2bfd      	cmp	r3, #253	; 0xfd
 800786e:	d903      	bls.n	8007878 <Dem_ProcessFault+0x2c>
			{
				Dem_MemDtcArray[idx] = 0;
 8007870:	79fb      	ldrb	r3, [r7, #7]
 8007872:	4a33      	ldr	r2, [pc, #204]	; (8007940 <Dem_ProcessFault+0xf4>)
 8007874:	2100      	movs	r1, #0
 8007876:	54d1      	strb	r1, [r2, r3]
		for(uint8 idx = 0; idx < 24; idx++)
 8007878:	79fb      	ldrb	r3, [r7, #7]
 800787a:	3301      	adds	r3, #1
 800787c:	71fb      	strb	r3, [r7, #7]
 800787e:	79fb      	ldrb	r3, [r7, #7]
 8007880:	2b17      	cmp	r3, #23
 8007882:	d9f0      	bls.n	8007866 <Dem_ProcessFault+0x1a>
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_LOW)
 8007884:	4b2f      	ldr	r3, [pc, #188]	; (8007944 <Dem_ProcessFault+0xf8>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d105      	bne.n	8007898 <Dem_ProcessFault+0x4c>
	{
		Dem_DtcArray[POSITION_DTC_BRAKE_LIGHT_LEFT_MALFUNCTION] = 0;
 800788c:	4b2e      	ldr	r3, [pc, #184]	; (8007948 <Dem_ProcessFault+0xfc>)
 800788e:	2200      	movs	r2, #0
 8007890:	721a      	strb	r2, [r3, #8]
		Dem_DtcArray[POSITION_DTC_BRAKE_LIGHT_RIGHT_MALFUNCTION] = 0;
 8007892:	4b2d      	ldr	r3, [pc, #180]	; (8007948 <Dem_ProcessFault+0xfc>)
 8007894:	2200      	movs	r2, #0
 8007896:	725a      	strb	r2, [r3, #9]
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearPositionLights_CurrentState == STD_LOW)
 8007898:	4b2c      	ldr	r3, [pc, #176]	; (800794c <Dem_ProcessFault+0x100>)
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d105      	bne.n	80078ac <Dem_ProcessFault+0x60>
	{
		Dem_DtcArray[POSITION_DTC_REAR_POSITION_LIGHT_LEFT_MALFUNCTION] = 0;
 80078a0:	4b29      	ldr	r3, [pc, #164]	; (8007948 <Dem_ProcessFault+0xfc>)
 80078a2:	2200      	movs	r2, #0
 80078a4:	709a      	strb	r2, [r3, #2]
		Dem_DtcArray[POSITION_DTC_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION] = 0;
 80078a6:	4b28      	ldr	r3, [pc, #160]	; (8007948 <Dem_ProcessFault+0xfc>)
 80078a8:	2200      	movs	r2, #0
 80078aa:	70da      	strb	r2, [r3, #3]
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_LowBeam_CurrentState == STD_LOW)
 80078ac:	4b28      	ldr	r3, [pc, #160]	; (8007950 <Dem_ProcessFault+0x104>)
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d105      	bne.n	80078c0 <Dem_ProcessFault+0x74>
	{
		Dem_DtcArray[POSITION_DTC_LOW_BEAM_LEFT_MALFUNCTION] = 0;
 80078b4:	4b24      	ldr	r3, [pc, #144]	; (8007948 <Dem_ProcessFault+0xfc>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	701a      	strb	r2, [r3, #0]
		Dem_DtcArray[POSITION_DTC_LOW_BEAM_RIGHT_MALFUNCTION] = 0;
 80078ba:	4b23      	ldr	r3, [pc, #140]	; (8007948 <Dem_ProcessFault+0xfc>)
 80078bc:	2200      	movs	r2, #0
 80078be:	705a      	strb	r2, [r3, #1]
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_LOW)
 80078c0:	4b24      	ldr	r3, [pc, #144]	; (8007954 <Dem_ProcessFault+0x108>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d105      	bne.n	80078d4 <Dem_ProcessFault+0x88>
	{
		Dem_DtcArray[POSITION_DTC_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION] = 0;
 80078c8:	4b1f      	ldr	r3, [pc, #124]	; (8007948 <Dem_ProcessFault+0xfc>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	719a      	strb	r2, [r3, #6]
		Dem_DtcArray[POSITION_DTC_LEFT_TURN_SIGNAL_REAR_MALFUNCTION] = 0;
 80078ce:	4b1e      	ldr	r3, [pc, #120]	; (8007948 <Dem_ProcessFault+0xfc>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	71da      	strb	r2, [r3, #7]
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState == STD_LOW)
 80078d4:	4b20      	ldr	r3, [pc, #128]	; (8007958 <Dem_ProcessFault+0x10c>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d105      	bne.n	80078e8 <Dem_ProcessFault+0x9c>
	{
		Dem_DtcArray[POSITION_DTC_RIGHT_TURN_SIGNAL_FRONT_MALFUNCTION] = 0;
 80078dc:	4b1a      	ldr	r3, [pc, #104]	; (8007948 <Dem_ProcessFault+0xfc>)
 80078de:	2200      	movs	r2, #0
 80078e0:	711a      	strb	r2, [r3, #4]
		Dem_DtcArray[POSITION_DTC_RIGHT_TURN_SIGNAL_REAR_MALFUNCTION] = 0;
 80078e2:	4b19      	ldr	r3, [pc, #100]	; (8007948 <Dem_ProcessFault+0xfc>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	715a      	strb	r2, [r3, #5]
	else
	{
		/* do nothing */
	}

	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour != 0)
 80078e8:	4b1c      	ldr	r3, [pc, #112]	; (800795c <Dem_ProcessFault+0x110>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d002      	beq.n	80078f6 <Dem_ProcessFault+0xaa>
	{
		Dem_DtcArray[POSITION_DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION] = 0;
 80078f0:	4b15      	ldr	r3, [pc, #84]	; (8007948 <Dem_ProcessFault+0xfc>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	739a      	strb	r2, [r3, #14]
	else
	{
		/* do nothing */
	}

	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree != 0)
 80078f6:	4b1a      	ldr	r3, [pc, #104]	; (8007960 <Dem_ProcessFault+0x114>)
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <Dem_ProcessFault+0xb8>
	{
		Dem_DtcArray[POSITION_DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION] = 0;
 80078fe:	4b12      	ldr	r3, [pc, #72]	; (8007948 <Dem_ProcessFault+0xfc>)
 8007900:	2200      	movs	r2, #0
 8007902:	73da      	strb	r2, [r3, #15]
	else
	{
		/* do nothing */
	}

	for(uint8 index = POSITION_DTC_LOW_BEAM_LEFT_MALFUNCTION; index <= POSITION_DTC_PERIPHERAL_ERROR; index++)
 8007904:	2300      	movs	r3, #0
 8007906:	71bb      	strb	r3, [r7, #6]
 8007908:	e00e      	b.n	8007928 <Dem_ProcessFault+0xdc>
	{
		if(Dem_MemDtcArray[index] != Dem_DtcArray[index] && Dem_DtcArray[index] != 0 && Dem_DtcArray[index] != 255)
 800790a:	79bb      	ldrb	r3, [r7, #6]
 800790c:	4a0c      	ldr	r2, [pc, #48]	; (8007940 <Dem_ProcessFault+0xf4>)
 800790e:	5cd2      	ldrb	r2, [r2, r3]
 8007910:	79bb      	ldrb	r3, [r7, #6]
 8007912:	490d      	ldr	r1, [pc, #52]	; (8007948 <Dem_ProcessFault+0xfc>)
 8007914:	5ccb      	ldrb	r3, [r1, r3]
 8007916:	429a      	cmp	r2, r3
 8007918:	d003      	beq.n	8007922 <Dem_ProcessFault+0xd6>
 800791a:	79bb      	ldrb	r3, [r7, #6]
 800791c:	4a0a      	ldr	r2, [pc, #40]	; (8007948 <Dem_ProcessFault+0xfc>)
 800791e:	5cd3      	ldrb	r3, [r2, r3]
 8007920:	2b00      	cmp	r3, #0
	for(uint8 index = POSITION_DTC_LOW_BEAM_LEFT_MALFUNCTION; index <= POSITION_DTC_PERIPHERAL_ERROR; index++)
 8007922:	79bb      	ldrb	r3, [r7, #6]
 8007924:	3301      	adds	r3, #1
 8007926:	71bb      	strb	r3, [r7, #6]
 8007928:	79bb      	ldrb	r3, [r7, #6]
 800792a:	2b17      	cmp	r3, #23
 800792c:	d9ed      	bls.n	800790a <Dem_ProcessFault+0xbe>
			/* do nothing */
		}
	}


}
 800792e:	bf00      	nop
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	20000c60 	.word	0x20000c60
 8007940:	20000c48 	.word	0x20000c48
 8007944:	20000179 	.word	0x20000179
 8007948:	20000c30 	.word	0x20000c30
 800794c:	20000180 	.word	0x20000180
 8007950:	2000017f 	.word	0x2000017f
 8007954:	2000017d 	.word	0x2000017d
 8007958:	2000017e 	.word	0x2000017e
 800795c:	20000cf5 	.word	0x20000cf5
 8007960:	20000ce5 	.word	0x20000ce5

08007964 <Dem_ReceiveFault>:
/***********************************************************************************
* Function: Dem_ReceiveFault													   *
* Description: Receives fault from application.							 		   *
************************************************************************************/
VOID Dem_ReceiveFault(uint8 faultValue)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	4603      	mov	r3, r0
 800796c:	71fb      	strb	r3, [r7, #7]
	switch(faultValue)
 800796e:	79fb      	ldrb	r3, [r7, #7]
 8007970:	3b02      	subs	r3, #2
 8007972:	2b97      	cmp	r3, #151	; 0x97
 8007974:	f200 8184 	bhi.w	8007c80 <Dem_ReceiveFault+0x31c>
 8007978:	a201      	add	r2, pc, #4	; (adr r2, 8007980 <Dem_ReceiveFault+0x1c>)
 800797a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797e:	bf00      	nop
 8007980:	08007c41 	.word	0x08007c41
 8007984:	08007c29 	.word	0x08007c29
 8007988:	08007be1 	.word	0x08007be1
 800798c:	08007be9 	.word	0x08007be9
 8007990:	08007c81 	.word	0x08007c81
 8007994:	08007c81 	.word	0x08007c81
 8007998:	08007c81 	.word	0x08007c81
 800799c:	08007c81 	.word	0x08007c81
 80079a0:	08007c81 	.word	0x08007c81
 80079a4:	08007c81 	.word	0x08007c81
 80079a8:	08007c81 	.word	0x08007c81
 80079ac:	08007c81 	.word	0x08007c81
 80079b0:	08007c81 	.word	0x08007c81
 80079b4:	08007c81 	.word	0x08007c81
 80079b8:	08007c81 	.word	0x08007c81
 80079bc:	08007c81 	.word	0x08007c81
 80079c0:	08007c49 	.word	0x08007c49
 80079c4:	08007c31 	.word	0x08007c31
 80079c8:	08007c81 	.word	0x08007c81
 80079cc:	08007c81 	.word	0x08007c81
 80079d0:	08007c81 	.word	0x08007c81
 80079d4:	08007c81 	.word	0x08007c81
 80079d8:	08007c81 	.word	0x08007c81
 80079dc:	08007c81 	.word	0x08007c81
 80079e0:	08007c81 	.word	0x08007c81
 80079e4:	08007c81 	.word	0x08007c81
 80079e8:	08007c81 	.word	0x08007c81
 80079ec:	08007c81 	.word	0x08007c81
 80079f0:	08007c81 	.word	0x08007c81
 80079f4:	08007c81 	.word	0x08007c81
 80079f8:	08007c81 	.word	0x08007c81
 80079fc:	08007c81 	.word	0x08007c81
 8007a00:	08007c51 	.word	0x08007c51
 8007a04:	08007c81 	.word	0x08007c81
 8007a08:	08007c81 	.word	0x08007c81
 8007a0c:	08007c81 	.word	0x08007c81
 8007a10:	08007c81 	.word	0x08007c81
 8007a14:	08007c81 	.word	0x08007c81
 8007a18:	08007c81 	.word	0x08007c81
 8007a1c:	08007c81 	.word	0x08007c81
 8007a20:	08007c81 	.word	0x08007c81
 8007a24:	08007c81 	.word	0x08007c81
 8007a28:	08007c81 	.word	0x08007c81
 8007a2c:	08007c81 	.word	0x08007c81
 8007a30:	08007c81 	.word	0x08007c81
 8007a34:	08007c81 	.word	0x08007c81
 8007a38:	08007c81 	.word	0x08007c81
 8007a3c:	08007c81 	.word	0x08007c81
 8007a40:	08007c59 	.word	0x08007c59
 8007a44:	08007c39 	.word	0x08007c39
 8007a48:	08007c81 	.word	0x08007c81
 8007a4c:	08007c69 	.word	0x08007c69
 8007a50:	08007c81 	.word	0x08007c81
 8007a54:	08007c81 	.word	0x08007c81
 8007a58:	08007c81 	.word	0x08007c81
 8007a5c:	08007c81 	.word	0x08007c81
 8007a60:	08007c81 	.word	0x08007c81
 8007a64:	08007c81 	.word	0x08007c81
 8007a68:	08007c81 	.word	0x08007c81
 8007a6c:	08007c81 	.word	0x08007c81
 8007a70:	08007c81 	.word	0x08007c81
 8007a74:	08007c81 	.word	0x08007c81
 8007a78:	08007c81 	.word	0x08007c81
 8007a7c:	08007c81 	.word	0x08007c81
 8007a80:	08007c81 	.word	0x08007c81
 8007a84:	08007c81 	.word	0x08007c81
 8007a88:	08007bf1 	.word	0x08007bf1
 8007a8c:	08007bf9 	.word	0x08007bf9
 8007a90:	08007c81 	.word	0x08007c81
 8007a94:	08007c81 	.word	0x08007c81
 8007a98:	08007c81 	.word	0x08007c81
 8007a9c:	08007c81 	.word	0x08007c81
 8007aa0:	08007c81 	.word	0x08007c81
 8007aa4:	08007c81 	.word	0x08007c81
 8007aa8:	08007c81 	.word	0x08007c81
 8007aac:	08007c81 	.word	0x08007c81
 8007ab0:	08007c81 	.word	0x08007c81
 8007ab4:	08007c81 	.word	0x08007c81
 8007ab8:	08007c81 	.word	0x08007c81
 8007abc:	08007c81 	.word	0x08007c81
 8007ac0:	08007c81 	.word	0x08007c81
 8007ac4:	08007c81 	.word	0x08007c81
 8007ac8:	08007c01 	.word	0x08007c01
 8007acc:	08007c81 	.word	0x08007c81
 8007ad0:	08007c71 	.word	0x08007c71
 8007ad4:	08007c81 	.word	0x08007c81
 8007ad8:	08007c81 	.word	0x08007c81
 8007adc:	08007c81 	.word	0x08007c81
 8007ae0:	08007c81 	.word	0x08007c81
 8007ae4:	08007c81 	.word	0x08007c81
 8007ae8:	08007c81 	.word	0x08007c81
 8007aec:	08007c81 	.word	0x08007c81
 8007af0:	08007c81 	.word	0x08007c81
 8007af4:	08007c81 	.word	0x08007c81
 8007af8:	08007c81 	.word	0x08007c81
 8007afc:	08007c81 	.word	0x08007c81
 8007b00:	08007c61 	.word	0x08007c61
 8007b04:	08007c81 	.word	0x08007c81
 8007b08:	08007c09 	.word	0x08007c09
 8007b0c:	08007c11 	.word	0x08007c11
 8007b10:	08007c81 	.word	0x08007c81
 8007b14:	08007c81 	.word	0x08007c81
 8007b18:	08007c81 	.word	0x08007c81
 8007b1c:	08007c81 	.word	0x08007c81
 8007b20:	08007c81 	.word	0x08007c81
 8007b24:	08007c81 	.word	0x08007c81
 8007b28:	08007c81 	.word	0x08007c81
 8007b2c:	08007c81 	.word	0x08007c81
 8007b30:	08007c81 	.word	0x08007c81
 8007b34:	08007c81 	.word	0x08007c81
 8007b38:	08007c81 	.word	0x08007c81
 8007b3c:	08007c81 	.word	0x08007c81
 8007b40:	08007c81 	.word	0x08007c81
 8007b44:	08007c81 	.word	0x08007c81
 8007b48:	08007c19 	.word	0x08007c19
 8007b4c:	08007c21 	.word	0x08007c21
 8007b50:	08007c81 	.word	0x08007c81
 8007b54:	08007c81 	.word	0x08007c81
 8007b58:	08007c81 	.word	0x08007c81
 8007b5c:	08007c81 	.word	0x08007c81
 8007b60:	08007c81 	.word	0x08007c81
 8007b64:	08007c81 	.word	0x08007c81
 8007b68:	08007c81 	.word	0x08007c81
 8007b6c:	08007c81 	.word	0x08007c81
 8007b70:	08007c81 	.word	0x08007c81
 8007b74:	08007c81 	.word	0x08007c81
 8007b78:	08007c81 	.word	0x08007c81
 8007b7c:	08007c81 	.word	0x08007c81
 8007b80:	08007c81 	.word	0x08007c81
 8007b84:	08007c81 	.word	0x08007c81
 8007b88:	08007c81 	.word	0x08007c81
 8007b8c:	08007c81 	.word	0x08007c81
 8007b90:	08007c81 	.word	0x08007c81
 8007b94:	08007c81 	.word	0x08007c81
 8007b98:	08007c81 	.word	0x08007c81
 8007b9c:	08007c81 	.word	0x08007c81
 8007ba0:	08007c81 	.word	0x08007c81
 8007ba4:	08007c81 	.word	0x08007c81
 8007ba8:	08007c81 	.word	0x08007c81
 8007bac:	08007c81 	.word	0x08007c81
 8007bb0:	08007c81 	.word	0x08007c81
 8007bb4:	08007c81 	.word	0x08007c81
 8007bb8:	08007c81 	.word	0x08007c81
 8007bbc:	08007c81 	.word	0x08007c81
 8007bc0:	08007c81 	.word	0x08007c81
 8007bc4:	08007c81 	.word	0x08007c81
 8007bc8:	08007c81 	.word	0x08007c81
 8007bcc:	08007c81 	.word	0x08007c81
 8007bd0:	08007c81 	.word	0x08007c81
 8007bd4:	08007c81 	.word	0x08007c81
 8007bd8:	08007c81 	.word	0x08007c81
 8007bdc:	08007c79 	.word	0x08007c79
	{
		case DTC_LOW_BEAM_LEFT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LOW_BEAM_LEFT_MALFUNCTION] = DTC_LOW_BEAM_LEFT_MALFUNCTION;
 8007be0:	4b2b      	ldr	r3, [pc, #172]	; (8007c90 <Dem_ReceiveFault+0x32c>)
 8007be2:	2204      	movs	r2, #4
 8007be4:	701a      	strb	r2, [r3, #0]
			break;
 8007be6:	e04c      	b.n	8007c82 <Dem_ReceiveFault+0x31e>
		case DTC_LOW_BEAM_RIGHT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LOW_BEAM_RIGHT_MALFUNCTION] = DTC_LOW_BEAM_RIGHT_MALFUNCTION;
 8007be8:	4b29      	ldr	r3, [pc, #164]	; (8007c90 <Dem_ReceiveFault+0x32c>)
 8007bea:	2205      	movs	r2, #5
 8007bec:	705a      	strb	r2, [r3, #1]
			break;
 8007bee:	e048      	b.n	8007c82 <Dem_ReceiveFault+0x31e>
		case DTC_REAR_POSITION_LIGHT_LEFT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_REAR_POSITION_LIGHT_LEFT_MALFUNCTION] = DTC_REAR_POSITION_LIGHT_LEFT_MALFUNCTION;
 8007bf0:	4b27      	ldr	r3, [pc, #156]	; (8007c90 <Dem_ReceiveFault+0x32c>)
 8007bf2:	2244      	movs	r2, #68	; 0x44
 8007bf4:	709a      	strb	r2, [r3, #2]
			break;
 8007bf6:	e044      	b.n	8007c82 <Dem_ReceiveFault+0x31e>
		case DTC_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION] = DTC_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION;
 8007bf8:	4b25      	ldr	r3, [pc, #148]	; (8007c90 <Dem_ReceiveFault+0x32c>)
 8007bfa:	2245      	movs	r2, #69	; 0x45
 8007bfc:	70da      	strb	r2, [r3, #3]
			break;
 8007bfe:	e040      	b.n	8007c82 <Dem_ReceiveFault+0x31e>
		case DTC_RIGHT_TURN_SIGNAL_FRONT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_RIGHT_TURN_SIGNAL_FRONT_MALFUNCTION] = DTC_RIGHT_TURN_SIGNAL_FRONT_MALFUNCTION;
 8007c00:	4b23      	ldr	r3, [pc, #140]	; (8007c90 <Dem_ReceiveFault+0x32c>)
 8007c02:	2254      	movs	r2, #84	; 0x54
 8007c04:	711a      	strb	r2, [r3, #4]
			break;
 8007c06:	e03c      	b.n	8007c82 <Dem_ReceiveFault+0x31e>
		case DTC_RIGHT_TURN_SIGNAL_REAR_MALFUNCTION:
			//Dem_DtcArray[POSITION_DTC_RIGHT_TURN_SIGNAL_REAR_MALFUNCTION]++;
			break;
		case DTC_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION] = DTC_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION;
 8007c08:	4b21      	ldr	r3, [pc, #132]	; (8007c90 <Dem_ReceiveFault+0x32c>)
 8007c0a:	2264      	movs	r2, #100	; 0x64
 8007c0c:	719a      	strb	r2, [r3, #6]
			break;
 8007c0e:	e038      	b.n	8007c82 <Dem_ReceiveFault+0x31e>
		case DTC_LEFT_TURN_SIGNAL_REAR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LEFT_TURN_SIGNAL_REAR_MALFUNCTION] = DTC_LEFT_TURN_SIGNAL_REAR_MALFUNCTION;
 8007c10:	4b1f      	ldr	r3, [pc, #124]	; (8007c90 <Dem_ReceiveFault+0x32c>)
 8007c12:	2265      	movs	r2, #101	; 0x65
 8007c14:	71da      	strb	r2, [r3, #7]
			break;
 8007c16:	e034      	b.n	8007c82 <Dem_ReceiveFault+0x31e>
		case DTC_BRAKE_LIGHT_LEFT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_BRAKE_LIGHT_LEFT_MALFUNCTION] = DTC_BRAKE_LIGHT_LEFT_MALFUNCTION;
 8007c18:	4b1d      	ldr	r3, [pc, #116]	; (8007c90 <Dem_ReceiveFault+0x32c>)
 8007c1a:	2274      	movs	r2, #116	; 0x74
 8007c1c:	721a      	strb	r2, [r3, #8]
			break;
 8007c1e:	e030      	b.n	8007c82 <Dem_ReceiveFault+0x31e>
		case DTC_BRAKE_LIGHT_RIGHT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_BRAKE_LIGHT_RIGHT_MALFUNCTION] = DTC_BRAKE_LIGHT_RIGHT_MALFUNCTION;
 8007c20:	4b1b      	ldr	r3, [pc, #108]	; (8007c90 <Dem_ReceiveFault+0x32c>)
 8007c22:	2275      	movs	r2, #117	; 0x75
 8007c24:	725a      	strb	r2, [r3, #9]
			break;
 8007c26:	e02c      	b.n	8007c82 <Dem_ReceiveFault+0x31e>
		case DTC_LIGHT_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LIGHT_SENSOR_MALFUNCTION] = DTC_LIGHT_SENSOR_MALFUNCTION;
 8007c28:	4b19      	ldr	r3, [pc, #100]	; (8007c90 <Dem_ReceiveFault+0x32c>)
 8007c2a:	2203      	movs	r2, #3
 8007c2c:	729a      	strb	r2, [r3, #10]
			break;
 8007c2e:	e028      	b.n	8007c82 <Dem_ReceiveFault+0x31e>
		case DTC_VIBRATION_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_VIBRATION_SENSOR_MALFUNCTION] = DTC_VIBRATION_SENSOR_MALFUNCTION;
 8007c30:	4b17      	ldr	r3, [pc, #92]	; (8007c90 <Dem_ReceiveFault+0x32c>)
 8007c32:	2213      	movs	r2, #19
 8007c34:	72da      	strb	r2, [r3, #11]
			break;
 8007c36:	e024      	b.n	8007c82 <Dem_ReceiveFault+0x31e>
		case DTC_AIR_QUALITY_SENSOR_MALFUNCTION:
			//Dem_DtcArray[POSITION_DTC_AIR_QUALITY_SENSOR_MALFUNCTION]++;
			break;
		case DTC_TEMPERATURE_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_POSITION_DTC_TEMPERATURE_SENSOR_MALFUNCTION] = DTC_TEMPERATURE_SENSOR_MALFUNCTION;
 8007c38:	4b15      	ldr	r3, [pc, #84]	; (8007c90 <Dem_ReceiveFault+0x32c>)
 8007c3a:	2233      	movs	r2, #51	; 0x33
 8007c3c:	735a      	strb	r2, [r3, #13]
			break;
 8007c3e:	e020      	b.n	8007c82 <Dem_ReceiveFault+0x31e>
		case DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION] = DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION;
 8007c40:	4b13      	ldr	r3, [pc, #76]	; (8007c90 <Dem_ReceiveFault+0x32c>)
 8007c42:	2202      	movs	r2, #2
 8007c44:	739a      	strb	r2, [r3, #14]
			break;
 8007c46:	e01c      	b.n	8007c82 <Dem_ReceiveFault+0x31e>
		case DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION] = DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION;
 8007c48:	4b11      	ldr	r3, [pc, #68]	; (8007c90 <Dem_ReceiveFault+0x32c>)
 8007c4a:	2212      	movs	r2, #18
 8007c4c:	73da      	strb	r2, [r3, #15]
			break;
 8007c4e:	e018      	b.n	8007c82 <Dem_ReceiveFault+0x31e>
		case DTC_BLUETOOTH_MODULE_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_BLUETOOTH_MODULE_MALFUNCTION] = DTC_BLUETOOTH_MODULE_MALFUNCTION;
 8007c50:	4b0f      	ldr	r3, [pc, #60]	; (8007c90 <Dem_ReceiveFault+0x32c>)
 8007c52:	2222      	movs	r2, #34	; 0x22
 8007c54:	741a      	strb	r2, [r3, #16]
			break;
 8007c56:	e014      	b.n	8007c82 <Dem_ReceiveFault+0x31e>
		case DTC_EXTERNAL_EEPROM_MODULE_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_EXTERNAL_EEPROM_MODULE_MALFUNCTION] = DTC_EXTERNAL_EEPROM_MODULE_MALFUNCTION;
 8007c58:	4b0d      	ldr	r3, [pc, #52]	; (8007c90 <Dem_ReceiveFault+0x32c>)
 8007c5a:	2232      	movs	r2, #50	; 0x32
 8007c5c:	745a      	strb	r2, [r3, #17]
			break;
 8007c5e:	e010      	b.n	8007c82 <Dem_ReceiveFault+0x31e>
			break;
		case DTC_CAN_BUS_OFF:
			//Dem_DtcArray[POSITION_DTC_CAN_BUS_OFF]++;
			break;
		case DTC_LCD_MODULE_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LCD_MODULE_MALFUNCTION] = DTC_LCD_MODULE_MALFUNCTION;
 8007c60:	4b0b      	ldr	r3, [pc, #44]	; (8007c90 <Dem_ReceiveFault+0x32c>)
 8007c62:	2262      	movs	r2, #98	; 0x62
 8007c64:	751a      	strb	r2, [r3, #20]
			break;
 8007c66:	e00c      	b.n	8007c82 <Dem_ReceiveFault+0x31e>
		case DTC_SOFTWARE_RESET:
			Dem_DtcArray[POSITION_DTC_SOFTWARE_RESET] = DTC_SOFTWARE_RESET;
 8007c68:	4b09      	ldr	r3, [pc, #36]	; (8007c90 <Dem_ReceiveFault+0x32c>)
 8007c6a:	2235      	movs	r2, #53	; 0x35
 8007c6c:	755a      	strb	r2, [r3, #21]
			break;
 8007c6e:	e008      	b.n	8007c82 <Dem_ReceiveFault+0x31e>
		case DTC_HARDWARE_RESET:
			Dem_DtcArray[POSITION_DTC_HARDWARE_RESET] = DTC_HARDWARE_RESET;
 8007c70:	4b07      	ldr	r3, [pc, #28]	; (8007c90 <Dem_ReceiveFault+0x32c>)
 8007c72:	2256      	movs	r2, #86	; 0x56
 8007c74:	759a      	strb	r2, [r3, #22]
			break;
 8007c76:	e004      	b.n	8007c82 <Dem_ReceiveFault+0x31e>
		case DTC_PERIPHERAL_ERROR:
			Dem_DtcArray[POSITION_DTC_PERIPHERAL_ERROR] = DTC_PERIPHERAL_ERROR;
 8007c78:	4b05      	ldr	r3, [pc, #20]	; (8007c90 <Dem_ReceiveFault+0x32c>)
 8007c7a:	2299      	movs	r2, #153	; 0x99
 8007c7c:	75da      	strb	r2, [r3, #23]
			break;
 8007c7e:	e000      	b.n	8007c82 <Dem_ReceiveFault+0x31e>
		default:
			break;
 8007c80:	bf00      	nop
	}
}
 8007c82:	bf00      	nop
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	20000c30 	.word	0x20000c30

08007c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007c98:	4b0e      	ldr	r3, [pc, #56]	; (8007cd4 <HAL_Init+0x40>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a0d      	ldr	r2, [pc, #52]	; (8007cd4 <HAL_Init+0x40>)
 8007c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ca2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007ca4:	4b0b      	ldr	r3, [pc, #44]	; (8007cd4 <HAL_Init+0x40>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a0a      	ldr	r2, [pc, #40]	; (8007cd4 <HAL_Init+0x40>)
 8007caa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007cae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007cb0:	4b08      	ldr	r3, [pc, #32]	; (8007cd4 <HAL_Init+0x40>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a07      	ldr	r2, [pc, #28]	; (8007cd4 <HAL_Init+0x40>)
 8007cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007cbc:	2003      	movs	r0, #3
 8007cbe:	f000 fefb 	bl	8008ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007cc2:	200f      	movs	r0, #15
 8007cc4:	f7fe ffae 	bl	8006c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007cc8:	f7fe ff62 	bl	8006b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	40023c00 	.word	0x40023c00

08007cd8 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8007cdc:	4b13      	ldr	r3, [pc, #76]	; (8007d2c <HAL_DeInit+0x54>)
 8007cde:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce2:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8007ce4:	4b11      	ldr	r3, [pc, #68]	; (8007d2c <HAL_DeInit+0x54>)
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8007cea:	4b10      	ldr	r3, [pc, #64]	; (8007d2c <HAL_DeInit+0x54>)
 8007cec:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf0:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8007cf2:	4b0e      	ldr	r3, [pc, #56]	; (8007d2c <HAL_DeInit+0x54>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8007cf8:	4b0c      	ldr	r3, [pc, #48]	; (8007d2c <HAL_DeInit+0x54>)
 8007cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8007cfe:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8007d00:	4b0a      	ldr	r3, [pc, #40]	; (8007d2c <HAL_DeInit+0x54>)
 8007d02:	2200      	movs	r2, #0
 8007d04:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8007d06:	4b09      	ldr	r3, [pc, #36]	; (8007d2c <HAL_DeInit+0x54>)
 8007d08:	f04f 32ff 	mov.w	r2, #4294967295
 8007d0c:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8007d0e:	4b07      	ldr	r3, [pc, #28]	; (8007d2c <HAL_DeInit+0x54>)
 8007d10:	2200      	movs	r2, #0
 8007d12:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8007d14:	4b05      	ldr	r3, [pc, #20]	; (8007d2c <HAL_DeInit+0x54>)
 8007d16:	f04f 32ff 	mov.w	r2, #4294967295
 8007d1a:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8007d1c:	4b03      	ldr	r3, [pc, #12]	; (8007d2c <HAL_DeInit+0x54>)
 8007d1e:	2200      	movs	r2, #0
 8007d20:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8007d22:	f000 f805 	bl	8007d30 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	40023800 	.word	0x40023800

08007d30 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8007d30:	b480      	push	{r7}
 8007d32:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8007d34:	bf00      	nop
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
	...

08007d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007d40:	b480      	push	{r7}
 8007d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007d44:	4b06      	ldr	r3, [pc, #24]	; (8007d60 <HAL_IncTick+0x20>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	461a      	mov	r2, r3
 8007d4a:	4b06      	ldr	r3, [pc, #24]	; (8007d64 <HAL_IncTick+0x24>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4413      	add	r3, r2
 8007d50:	4a04      	ldr	r2, [pc, #16]	; (8007d64 <HAL_IncTick+0x24>)
 8007d52:	6013      	str	r3, [r2, #0]
}
 8007d54:	bf00      	nop
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	20000054 	.word	0x20000054
 8007d64:	20000c64 	.word	0x20000c64

08007d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8007d6c:	4b03      	ldr	r3, [pc, #12]	; (8007d7c <HAL_GetTick+0x14>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	20000c64 	.word	0x20000c64

08007d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007d88:	f7ff ffee 	bl	8007d68 <HAL_GetTick>
 8007d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d98:	d005      	beq.n	8007da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007d9a:	4b0a      	ldr	r3, [pc, #40]	; (8007dc4 <HAL_Delay+0x44>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	4413      	add	r3, r2
 8007da4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007da6:	bf00      	nop
 8007da8:	f7ff ffde 	bl	8007d68 <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d8f7      	bhi.n	8007da8 <HAL_Delay+0x28>
  {
  }
}
 8007db8:	bf00      	nop
 8007dba:	bf00      	nop
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20000054 	.word	0x20000054

08007dc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d101      	bne.n	8007dde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e04a      	b.n	8007e74 <HAL_ADC_Init+0xac>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d120      	bne.n	8007e28 <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a24      	ldr	r2, [pc, #144]	; (8007e7c <HAL_ADC_Init+0xb4>)
 8007dea:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a24      	ldr	r2, [pc, #144]	; (8007e80 <HAL_ADC_Init+0xb8>)
 8007df0:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a23      	ldr	r2, [pc, #140]	; (8007e84 <HAL_ADC_Init+0xbc>)
 8007df6:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a23      	ldr	r2, [pc, #140]	; (8007e88 <HAL_ADC_Init+0xc0>)
 8007dfc:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a22      	ldr	r2, [pc, #136]	; (8007e8c <HAL_ADC_Init+0xc4>)
 8007e02:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d102      	bne.n	8007e12 <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a20      	ldr	r2, [pc, #128]	; (8007e90 <HAL_ADC_Init+0xc8>)
 8007e10:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2c:	f003 0310 	and.w	r3, r3, #16
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d118      	bne.n	8007e66 <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007e3c:	f023 0302 	bic.w	r3, r3, #2
 8007e40:	f043 0202 	orr.w	r2, r3, #2
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fbc1 	bl	80085d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e58:	f023 0303 	bic.w	r3, r3, #3
 8007e5c:	f043 0201 	orr.w	r2, r3, #1
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	641a      	str	r2, [r3, #64]	; 0x40
 8007e64:	e001      	b.n	8007e6a <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	08010855 	.word	0x08010855
 8007e80:	08008315 	.word	0x08008315
 8007e84:	08008329 	.word	0x08008329
 8007e88:	08010871 	.word	0x08010871
 8007e8c:	080088d5 	.word	0x080088d5
 8007e90:	08005bf5 	.word	0x08005bf5

08007e94 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d101      	bne.n	8007eaa <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e02a      	b.n	8007f00 <HAL_ADC_DeInit+0x6c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eae:	f043 0202 	orr.w	r2, r3, #2
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	689a      	ldr	r2, [r3, #8]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f022 0201 	bic.w	r2, r2, #1
 8007ec4:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f003 0301 	and.w	r3, r3, #1
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d110      	bne.n	8007ef6 <HAL_ADC_DeInit+0x62>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  if (hadc->MspDeInitCallback == NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d102      	bne.n	8007ee2 <HAL_ADC_DeInit+0x4e>
  {
    hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a0a      	ldr	r2, [pc, #40]	; (8007f08 <HAL_ADC_DeInit+0x74>)
 8007ee0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	4798      	blx	r3
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	08005d69 	.word	0x08005d69

08007f0c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8007f14:	2300      	movs	r3, #0
 8007f16:	617b      	str	r3, [r7, #20]
 8007f18:	2300      	movs	r3, #0
 8007f1a:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f003 0302 	and.w	r3, r3, #2
 8007f32:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	f003 0320 	and.w	r3, r3, #32
 8007f3a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d04a      	beq.n	8007fd8 <HAL_ADC_IRQHandler+0xcc>
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d047      	beq.n	8007fd8 <HAL_ADC_IRQHandler+0xcc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4c:	f003 0310 	and.w	r3, r3, #16
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d105      	bne.n	8007f60 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d12b      	bne.n	8007fc6 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d127      	bne.n	8007fc6 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d006      	beq.n	8007f92 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d119      	bne.n	8007fc6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f022 0220 	bic.w	r2, r2, #32
 8007fa0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d105      	bne.n	8007fc6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbe:	f043 0201 	orr.w	r2, r3, #1
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f06f 0212 	mvn.w	r2, #18
 8007fd6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f003 0304 	and.w	r3, r3, #4
 8007fde:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d058      	beq.n	80080a0 <HAL_ADC_IRQHandler+0x194>
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d055      	beq.n	80080a0 <HAL_ADC_IRQHandler+0x194>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff8:	f003 0310 	and.w	r3, r3, #16
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d105      	bne.n	800800c <HAL_ADC_IRQHandler+0x100>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008004:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008016:	2b00      	cmp	r3, #0
 8008018:	d139      	bne.n	800808e <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008020:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008024:	2b00      	cmp	r3, #0
 8008026:	d006      	beq.n	8008036 <HAL_ADC_IRQHandler+0x12a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8008032:	2b00      	cmp	r3, #0
 8008034:	d12b      	bne.n	800808e <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8008040:	2b00      	cmp	r3, #0
 8008042:	d124      	bne.n	800808e <HAL_ADC_IRQHandler+0x182>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800804e:	2b00      	cmp	r3, #0
 8008050:	d11d      	bne.n	800808e <HAL_ADC_IRQHandler+0x182>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8008056:	2b00      	cmp	r3, #0
 8008058:	d119      	bne.n	800808e <HAL_ADC_IRQHandler+0x182>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	685a      	ldr	r2, [r3, #4]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008068:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800807e:	2b00      	cmp	r3, #0
 8008080:	d105      	bne.n	800808e <HAL_ADC_IRQHandler+0x182>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008086:	f043 0201 	orr.w	r2, r3, #1
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f06f 020c 	mvn.w	r2, #12
 800809e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ae:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d018      	beq.n	80080e8 <HAL_ADC_IRQHandler+0x1dc>
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d015      	beq.n	80080e8 <HAL_ADC_IRQHandler+0x1dc>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d10e      	bne.n	80080e8 <HAL_ADC_IRQHandler+0x1dc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f06f 0201 	mvn.w	r2, #1
 80080e6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f003 0320 	and.w	r3, r3, #32
 80080ee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80080f6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d016      	beq.n	800812c <HAL_ADC_IRQHandler+0x220>
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d013      	beq.n	800812c <HAL_ADC_IRQHandler+0x220>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008108:	f043 0202 	orr.w	r2, r3, #2
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f06f 0220 	mvn.w	r2, #32
 8008118:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f06f 0220 	mvn.w	r2, #32
 800812a:	601a      	str	r2, [r3, #0]
  }
}
 800812c:	bf00      	nop
 800812e:	3718      	adds	r7, #24
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008140:	2300      	movs	r3, #0
 8008142:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800814a:	2b01      	cmp	r3, #1
 800814c:	d101      	bne.n	8008152 <HAL_ADC_Start_DMA+0x1e>
 800814e:	2302      	movs	r3, #2
 8008150:	e0ce      	b.n	80082f0 <HAL_ADC_Start_DMA+0x1bc>
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2201      	movs	r2, #1
 8008156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f003 0301 	and.w	r3, r3, #1
 8008164:	2b01      	cmp	r3, #1
 8008166:	d018      	beq.n	800819a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	689a      	ldr	r2, [r3, #8]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f042 0201 	orr.w	r2, r2, #1
 8008176:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008178:	4b5f      	ldr	r3, [pc, #380]	; (80082f8 <HAL_ADC_Start_DMA+0x1c4>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a5f      	ldr	r2, [pc, #380]	; (80082fc <HAL_ADC_Start_DMA+0x1c8>)
 800817e:	fba2 2303 	umull	r2, r3, r2, r3
 8008182:	0c9a      	lsrs	r2, r3, #18
 8008184:	4613      	mov	r3, r2
 8008186:	005b      	lsls	r3, r3, #1
 8008188:	4413      	add	r3, r2
 800818a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800818c:	e002      	b.n	8008194 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	3b01      	subs	r3, #1
 8008192:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1f9      	bne.n	800818e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081a8:	d107      	bne.n	80081ba <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	689a      	ldr	r2, [r3, #8]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	f040 8086 	bne.w	80082d6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80081d2:	f023 0301 	bic.w	r3, r3, #1
 80081d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d007      	beq.n	80081fc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80081f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008200:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008208:	d106      	bne.n	8008218 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800820e:	f023 0206 	bic.w	r2, r3, #6
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	645a      	str	r2, [r3, #68]	; 0x44
 8008216:	e002      	b.n	800821e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008226:	4b36      	ldr	r3, [pc, #216]	; (8008300 <HAL_ADC_Start_DMA+0x1cc>)
 8008228:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822e:	4a35      	ldr	r2, [pc, #212]	; (8008304 <HAL_ADC_Start_DMA+0x1d0>)
 8008230:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008236:	4a34      	ldr	r2, [pc, #208]	; (8008308 <HAL_ADC_Start_DMA+0x1d4>)
 8008238:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823e:	4a33      	ldr	r2, [pc, #204]	; (800830c <HAL_ADC_Start_DMA+0x1d8>)
 8008240:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800824a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	685a      	ldr	r2, [r3, #4]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800825a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	689a      	ldr	r2, [r3, #8]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800826a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	334c      	adds	r3, #76	; 0x4c
 8008276:	4619      	mov	r1, r3
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f000 fe78 	bl	8008f70 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	f003 031f 	and.w	r3, r3, #31
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10f      	bne.n	80082ac <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d129      	bne.n	80082ee <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	689a      	ldr	r2, [r3, #8]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80082a8:	609a      	str	r2, [r3, #8]
 80082aa:	e020      	b.n	80082ee <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a17      	ldr	r2, [pc, #92]	; (8008310 <HAL_ADC_Start_DMA+0x1dc>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d11b      	bne.n	80082ee <HAL_ADC_Start_DMA+0x1ba>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d114      	bne.n	80082ee <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689a      	ldr	r2, [r3, #8]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80082d2:	609a      	str	r2, [r3, #8]
 80082d4:	e00b      	b.n	80082ee <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082da:	f043 0210 	orr.w	r2, r3, #16
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082e6:	f043 0201 	orr.w	r2, r3, #1
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3718      	adds	r7, #24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	2000004c 	.word	0x2000004c
 80082fc:	431bde83 	.word	0x431bde83
 8008300:	40012300 	.word	0x40012300
 8008304:	080087c9 	.word	0x080087c9
 8008308:	08008887 	.word	0x08008887
 800830c:	080088a5 	.word	0x080088a5
 8008310:	40012000 	.word	0x40012000

08008314 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800831c:	bf00      	nop
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008350:	2b01      	cmp	r3, #1
 8008352:	d101      	bne.n	8008358 <HAL_ADC_ConfigChannel+0x1c>
 8008354:	2302      	movs	r3, #2
 8008356:	e113      	b.n	8008580 <HAL_ADC_ConfigChannel+0x244>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2b09      	cmp	r3, #9
 8008366:	d925      	bls.n	80083b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68d9      	ldr	r1, [r3, #12]
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	b29b      	uxth	r3, r3
 8008374:	461a      	mov	r2, r3
 8008376:	4613      	mov	r3, r2
 8008378:	005b      	lsls	r3, r3, #1
 800837a:	4413      	add	r3, r2
 800837c:	3b1e      	subs	r3, #30
 800837e:	2207      	movs	r2, #7
 8008380:	fa02 f303 	lsl.w	r3, r2, r3
 8008384:	43da      	mvns	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	400a      	ands	r2, r1
 800838c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68d9      	ldr	r1, [r3, #12]
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	689a      	ldr	r2, [r3, #8]
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	b29b      	uxth	r3, r3
 800839e:	4618      	mov	r0, r3
 80083a0:	4603      	mov	r3, r0
 80083a2:	005b      	lsls	r3, r3, #1
 80083a4:	4403      	add	r3, r0
 80083a6:	3b1e      	subs	r3, #30
 80083a8:	409a      	lsls	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	430a      	orrs	r2, r1
 80083b0:	60da      	str	r2, [r3, #12]
 80083b2:	e022      	b.n	80083fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6919      	ldr	r1, [r3, #16]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	b29b      	uxth	r3, r3
 80083c0:	461a      	mov	r2, r3
 80083c2:	4613      	mov	r3, r2
 80083c4:	005b      	lsls	r3, r3, #1
 80083c6:	4413      	add	r3, r2
 80083c8:	2207      	movs	r2, #7
 80083ca:	fa02 f303 	lsl.w	r3, r2, r3
 80083ce:	43da      	mvns	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	400a      	ands	r2, r1
 80083d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6919      	ldr	r1, [r3, #16]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	689a      	ldr	r2, [r3, #8]
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	4618      	mov	r0, r3
 80083ea:	4603      	mov	r3, r0
 80083ec:	005b      	lsls	r3, r3, #1
 80083ee:	4403      	add	r3, r0
 80083f0:	409a      	lsls	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	2b06      	cmp	r3, #6
 8008400:	d824      	bhi.n	800844c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	4613      	mov	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	3b05      	subs	r3, #5
 8008414:	221f      	movs	r2, #31
 8008416:	fa02 f303 	lsl.w	r3, r2, r3
 800841a:	43da      	mvns	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	400a      	ands	r2, r1
 8008422:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	b29b      	uxth	r3, r3
 8008430:	4618      	mov	r0, r3
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	4613      	mov	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4413      	add	r3, r2
 800843c:	3b05      	subs	r3, #5
 800843e:	fa00 f203 	lsl.w	r2, r0, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	430a      	orrs	r2, r1
 8008448:	635a      	str	r2, [r3, #52]	; 0x34
 800844a:	e04c      	b.n	80084e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	2b0c      	cmp	r3, #12
 8008452:	d824      	bhi.n	800849e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	685a      	ldr	r2, [r3, #4]
 800845e:	4613      	mov	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	3b23      	subs	r3, #35	; 0x23
 8008466:	221f      	movs	r2, #31
 8008468:	fa02 f303 	lsl.w	r3, r2, r3
 800846c:	43da      	mvns	r2, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	400a      	ands	r2, r1
 8008474:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	b29b      	uxth	r3, r3
 8008482:	4618      	mov	r0, r3
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	685a      	ldr	r2, [r3, #4]
 8008488:	4613      	mov	r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4413      	add	r3, r2
 800848e:	3b23      	subs	r3, #35	; 0x23
 8008490:	fa00 f203 	lsl.w	r2, r0, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	430a      	orrs	r2, r1
 800849a:	631a      	str	r2, [r3, #48]	; 0x30
 800849c:	e023      	b.n	80084e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	685a      	ldr	r2, [r3, #4]
 80084a8:	4613      	mov	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4413      	add	r3, r2
 80084ae:	3b41      	subs	r3, #65	; 0x41
 80084b0:	221f      	movs	r2, #31
 80084b2:	fa02 f303 	lsl.w	r3, r2, r3
 80084b6:	43da      	mvns	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	400a      	ands	r2, r1
 80084be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	4618      	mov	r0, r3
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	685a      	ldr	r2, [r3, #4]
 80084d2:	4613      	mov	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	3b41      	subs	r3, #65	; 0x41
 80084da:	fa00 f203 	lsl.w	r2, r0, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	430a      	orrs	r2, r1
 80084e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80084e6:	4b29      	ldr	r3, [pc, #164]	; (800858c <HAL_ADC_ConfigChannel+0x250>)
 80084e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a28      	ldr	r2, [pc, #160]	; (8008590 <HAL_ADC_ConfigChannel+0x254>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d10f      	bne.n	8008514 <HAL_ADC_ConfigChannel+0x1d8>
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b12      	cmp	r3, #18
 80084fa:	d10b      	bne.n	8008514 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a1d      	ldr	r2, [pc, #116]	; (8008590 <HAL_ADC_ConfigChannel+0x254>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d12b      	bne.n	8008576 <HAL_ADC_ConfigChannel+0x23a>
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a1c      	ldr	r2, [pc, #112]	; (8008594 <HAL_ADC_ConfigChannel+0x258>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d003      	beq.n	8008530 <HAL_ADC_ConfigChannel+0x1f4>
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2b11      	cmp	r3, #17
 800852e:	d122      	bne.n	8008576 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a11      	ldr	r2, [pc, #68]	; (8008594 <HAL_ADC_ConfigChannel+0x258>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d111      	bne.n	8008576 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008552:	4b11      	ldr	r3, [pc, #68]	; (8008598 <HAL_ADC_ConfigChannel+0x25c>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a11      	ldr	r2, [pc, #68]	; (800859c <HAL_ADC_ConfigChannel+0x260>)
 8008558:	fba2 2303 	umull	r2, r3, r2, r3
 800855c:	0c9a      	lsrs	r2, r3, #18
 800855e:	4613      	mov	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	005b      	lsls	r3, r3, #1
 8008566:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008568:	e002      	b.n	8008570 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	3b01      	subs	r3, #1
 800856e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1f9      	bne.n	800856a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr
 800858c:	40012300 	.word	0x40012300
 8008590:	40012000 	.word	0x40012000
 8008594:	10000012 	.word	0x10000012
 8008598:	2000004c 	.word	0x2000004c
 800859c:	431bde83 	.word	0x431bde83

080085a0 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <HAL_ADC_GetError>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval ADC Error Code
  */
uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  return hadc->ErrorCode;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80085d8:	4b79      	ldr	r3, [pc, #484]	; (80087c0 <ADC_Init+0x1f0>)
 80085da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	431a      	orrs	r2, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008604:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	6859      	ldr	r1, [r3, #4]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	021a      	lsls	r2, r3, #8
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	430a      	orrs	r2, r1
 8008618:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	685a      	ldr	r2, [r3, #4]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008628:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	6859      	ldr	r1, [r3, #4]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	689a      	ldr	r2, [r3, #8]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	430a      	orrs	r2, r1
 800863a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	689a      	ldr	r2, [r3, #8]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800864a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	6899      	ldr	r1, [r3, #8]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	68da      	ldr	r2, [r3, #12]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	430a      	orrs	r2, r1
 800865c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008662:	4a58      	ldr	r2, [pc, #352]	; (80087c4 <ADC_Init+0x1f4>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d022      	beq.n	80086ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	689a      	ldr	r2, [r3, #8]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008676:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	6899      	ldr	r1, [r3, #8]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	430a      	orrs	r2, r1
 8008688:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	689a      	ldr	r2, [r3, #8]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008698:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	6899      	ldr	r1, [r3, #8]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	430a      	orrs	r2, r1
 80086aa:	609a      	str	r2, [r3, #8]
 80086ac:	e00f      	b.n	80086ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	689a      	ldr	r2, [r3, #8]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80086bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	689a      	ldr	r2, [r3, #8]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80086cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	689a      	ldr	r2, [r3, #8]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f022 0202 	bic.w	r2, r2, #2
 80086dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	6899      	ldr	r1, [r3, #8]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	7e1b      	ldrb	r3, [r3, #24]
 80086e8:	005a      	lsls	r2, r3, #1
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	430a      	orrs	r2, r1
 80086f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d01b      	beq.n	8008734 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	685a      	ldr	r2, [r3, #4]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800870a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	685a      	ldr	r2, [r3, #4]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800871a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6859      	ldr	r1, [r3, #4]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008726:	3b01      	subs	r3, #1
 8008728:	035a      	lsls	r2, r3, #13
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	430a      	orrs	r2, r1
 8008730:	605a      	str	r2, [r3, #4]
 8008732:	e007      	b.n	8008744 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	685a      	ldr	r2, [r3, #4]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008742:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008752:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	69db      	ldr	r3, [r3, #28]
 800875e:	3b01      	subs	r3, #1
 8008760:	051a      	lsls	r2, r3, #20
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	430a      	orrs	r2, r1
 8008768:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	689a      	ldr	r2, [r3, #8]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008778:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	6899      	ldr	r1, [r3, #8]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008786:	025a      	lsls	r2, r3, #9
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	430a      	orrs	r2, r1
 800878e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	689a      	ldr	r2, [r3, #8]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800879e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6899      	ldr	r1, [r3, #8]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	029a      	lsls	r2, r3, #10
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	430a      	orrs	r2, r1
 80087b2:	609a      	str	r2, [r3, #8]
}
 80087b4:	bf00      	nop
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr
 80087c0:	40012300 	.word	0x40012300
 80087c4:	0f000001 	.word	0x0f000001

080087c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d13d      	bne.n	800885e <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d12b      	bne.n	8008854 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008800:	2b00      	cmp	r3, #0
 8008802:	d127      	bne.n	8008854 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800880e:	2b00      	cmp	r3, #0
 8008810:	d006      	beq.n	8008820 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800881c:	2b00      	cmp	r3, #0
 800881e:	d119      	bne.n	8008854 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	685a      	ldr	r2, [r3, #4]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f022 0220 	bic.w	r2, r2, #32
 800882e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008834:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008840:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008844:	2b00      	cmp	r3, #0
 8008846:	d105      	bne.n	8008854 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884c:	f043 0201 	orr.w	r2, r3, #1
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800885c:	e00f      	b.n	800887e <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008862:	f003 0310 	and.w	r3, r3, #16
 8008866:	2b00      	cmp	r3, #0
 8008868:	d004      	beq.n	8008874 <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	4798      	blx	r3
}
 8008872:	e004      	b.n	800887e <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	4798      	blx	r3
}
 800887e:	bf00      	nop
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b084      	sub	sp, #16
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008892:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800889c:	bf00      	nop
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b0:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2240      	movs	r2, #64	; 0x40
 80088b6:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088bc:	f043 0204 	orr.w	r2, r3, #4
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80088cc:	bf00      	nop
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f003 0307 	and.w	r3, r3, #7
 80088f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80088f8:	4b0c      	ldr	r3, [pc, #48]	; (800892c <__NVIC_SetPriorityGrouping+0x44>)
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008904:	4013      	ands	r3, r2
 8008906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800891a:	4a04      	ldr	r2, [pc, #16]	; (800892c <__NVIC_SetPriorityGrouping+0x44>)
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	60d3      	str	r3, [r2, #12]
}
 8008920:	bf00      	nop
 8008922:	3714      	adds	r7, #20
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr
 800892c:	e000ed00 	.word	0xe000ed00

08008930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008930:	b480      	push	{r7}
 8008932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008934:	4b04      	ldr	r3, [pc, #16]	; (8008948 <__NVIC_GetPriorityGrouping+0x18>)
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	0a1b      	lsrs	r3, r3, #8
 800893a:	f003 0307 	and.w	r3, r3, #7
}
 800893e:	4618      	mov	r0, r3
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr
 8008948:	e000ed00 	.word	0xe000ed00

0800894c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	4603      	mov	r3, r0
 8008954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800895a:	2b00      	cmp	r3, #0
 800895c:	db0b      	blt.n	8008976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800895e:	79fb      	ldrb	r3, [r7, #7]
 8008960:	f003 021f 	and.w	r2, r3, #31
 8008964:	4907      	ldr	r1, [pc, #28]	; (8008984 <__NVIC_EnableIRQ+0x38>)
 8008966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800896a:	095b      	lsrs	r3, r3, #5
 800896c:	2001      	movs	r0, #1
 800896e:	fa00 f202 	lsl.w	r2, r0, r2
 8008972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008976:	bf00      	nop
 8008978:	370c      	adds	r7, #12
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	e000e100 	.word	0xe000e100

08008988 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	4603      	mov	r3, r0
 8008990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008996:	2b00      	cmp	r3, #0
 8008998:	db12      	blt.n	80089c0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800899a:	79fb      	ldrb	r3, [r7, #7]
 800899c:	f003 021f 	and.w	r2, r3, #31
 80089a0:	490a      	ldr	r1, [pc, #40]	; (80089cc <__NVIC_DisableIRQ+0x44>)
 80089a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089a6:	095b      	lsrs	r3, r3, #5
 80089a8:	2001      	movs	r0, #1
 80089aa:	fa00 f202 	lsl.w	r2, r0, r2
 80089ae:	3320      	adds	r3, #32
 80089b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80089b4:	f3bf 8f4f 	dsb	sy
}
 80089b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80089ba:	f3bf 8f6f 	isb	sy
}
 80089be:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	e000e100 	.word	0xe000e100

080089d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	4603      	mov	r3, r0
 80089d8:	6039      	str	r1, [r7, #0]
 80089da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	db0a      	blt.n	80089fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	490c      	ldr	r1, [pc, #48]	; (8008a1c <__NVIC_SetPriority+0x4c>)
 80089ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089ee:	0112      	lsls	r2, r2, #4
 80089f0:	b2d2      	uxtb	r2, r2
 80089f2:	440b      	add	r3, r1
 80089f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80089f8:	e00a      	b.n	8008a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	b2da      	uxtb	r2, r3
 80089fe:	4908      	ldr	r1, [pc, #32]	; (8008a20 <__NVIC_SetPriority+0x50>)
 8008a00:	79fb      	ldrb	r3, [r7, #7]
 8008a02:	f003 030f 	and.w	r3, r3, #15
 8008a06:	3b04      	subs	r3, #4
 8008a08:	0112      	lsls	r2, r2, #4
 8008a0a:	b2d2      	uxtb	r2, r2
 8008a0c:	440b      	add	r3, r1
 8008a0e:	761a      	strb	r2, [r3, #24]
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr
 8008a1c:	e000e100 	.word	0xe000e100
 8008a20:	e000ed00 	.word	0xe000ed00

08008a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b089      	sub	sp, #36	; 0x24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f003 0307 	and.w	r3, r3, #7
 8008a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	f1c3 0307 	rsb	r3, r3, #7
 8008a3e:	2b04      	cmp	r3, #4
 8008a40:	bf28      	it	cs
 8008a42:	2304      	movcs	r3, #4
 8008a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	3304      	adds	r3, #4
 8008a4a:	2b06      	cmp	r3, #6
 8008a4c:	d902      	bls.n	8008a54 <NVIC_EncodePriority+0x30>
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	3b03      	subs	r3, #3
 8008a52:	e000      	b.n	8008a56 <NVIC_EncodePriority+0x32>
 8008a54:	2300      	movs	r3, #0
 8008a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a58:	f04f 32ff 	mov.w	r2, #4294967295
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a62:	43da      	mvns	r2, r3
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	401a      	ands	r2, r3
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	fa01 f303 	lsl.w	r3, r1, r3
 8008a76:	43d9      	mvns	r1, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a7c:	4313      	orrs	r3, r2
         );
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3724      	adds	r7, #36	; 0x24
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
	...

08008a8c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8008a90:	f3bf 8f4f 	dsb	sy
}
 8008a94:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008a96:	4b06      	ldr	r3, [pc, #24]	; (8008ab0 <__NVIC_SystemReset+0x24>)
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008a9e:	4904      	ldr	r1, [pc, #16]	; (8008ab0 <__NVIC_SystemReset+0x24>)
 8008aa0:	4b04      	ldr	r3, [pc, #16]	; (8008ab4 <__NVIC_SystemReset+0x28>)
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008aa6:	f3bf 8f4f 	dsb	sy
}
 8008aaa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008aac:	bf00      	nop
 8008aae:	e7fd      	b.n	8008aac <__NVIC_SystemReset+0x20>
 8008ab0:	e000ed00 	.word	0xe000ed00
 8008ab4:	05fa0004 	.word	0x05fa0004

08008ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f7ff ff11 	bl	80088e8 <__NVIC_SetPriorityGrouping>
}
 8008ac6:	bf00      	nop
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b086      	sub	sp, #24
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	60b9      	str	r1, [r7, #8]
 8008ad8:	607a      	str	r2, [r7, #4]
 8008ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008adc:	2300      	movs	r3, #0
 8008ade:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008ae0:	f7ff ff26 	bl	8008930 <__NVIC_GetPriorityGrouping>
 8008ae4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	68b9      	ldr	r1, [r7, #8]
 8008aea:	6978      	ldr	r0, [r7, #20]
 8008aec:	f7ff ff9a 	bl	8008a24 <NVIC_EncodePriority>
 8008af0:	4602      	mov	r2, r0
 8008af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008af6:	4611      	mov	r1, r2
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7ff ff69 	bl	80089d0 <__NVIC_SetPriority>
}
 8008afe:	bf00      	nop
 8008b00:	3718      	adds	r7, #24
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b082      	sub	sp, #8
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7ff ff19 	bl	800894c <__NVIC_EnableIRQ>
}
 8008b1a:	bf00      	nop
 8008b1c:	3708      	adds	r7, #8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b082      	sub	sp, #8
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	4603      	mov	r3, r0
 8008b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7ff ff29 	bl	8008988 <__NVIC_DisableIRQ>
}
 8008b36:	bf00      	nop
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8008b42:	f7ff ffa3 	bl	8008a8c <__NVIC_SystemReset>
	...

08008b48 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8008b4c:	f3bf 8f5f 	dmb	sy
}
 8008b50:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8008b52:	4b07      	ldr	r3, [pc, #28]	; (8008b70 <HAL_MPU_Disable+0x28>)
 8008b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b56:	4a06      	ldr	r2, [pc, #24]	; (8008b70 <HAL_MPU_Disable+0x28>)
 8008b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b5c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8008b5e:	4b05      	ldr	r3, [pc, #20]	; (8008b74 <HAL_MPU_Disable+0x2c>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	605a      	str	r2, [r3, #4]
}
 8008b64:	bf00      	nop
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	e000ed00 	.word	0xe000ed00
 8008b74:	e000ed90 	.word	0xe000ed90

08008b78 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8008b80:	4a0b      	ldr	r2, [pc, #44]	; (8008bb0 <HAL_MPU_Enable+0x38>)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f043 0301 	orr.w	r3, r3, #1
 8008b88:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8008b8a:	4b0a      	ldr	r3, [pc, #40]	; (8008bb4 <HAL_MPU_Enable+0x3c>)
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8e:	4a09      	ldr	r2, [pc, #36]	; (8008bb4 <HAL_MPU_Enable+0x3c>)
 8008b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b94:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8008b96:	f3bf 8f4f 	dsb	sy
}
 8008b9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008b9c:	f3bf 8f6f 	isb	sy
}
 8008ba0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8008ba2:	bf00      	nop
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	e000ed90 	.word	0xe000ed90
 8008bb4:	e000ed00 	.word	0xe000ed00

08008bb8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	785a      	ldrb	r2, [r3, #1]
 8008bc4:	4b1d      	ldr	r3, [pc, #116]	; (8008c3c <HAL_MPU_ConfigRegion+0x84>)
 8008bc6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d029      	beq.n	8008c24 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8008bd0:	4a1a      	ldr	r2, [pc, #104]	; (8008c3c <HAL_MPU_ConfigRegion+0x84>)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	7b1b      	ldrb	r3, [r3, #12]
 8008bdc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	7adb      	ldrb	r3, [r3, #11]
 8008be2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008be4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	7a9b      	ldrb	r3, [r3, #10]
 8008bea:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008bec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	7b5b      	ldrb	r3, [r3, #13]
 8008bf2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008bf4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	7b9b      	ldrb	r3, [r3, #14]
 8008bfa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008bfc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	7bdb      	ldrb	r3, [r3, #15]
 8008c02:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008c04:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	7a5b      	ldrb	r3, [r3, #9]
 8008c0a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008c0c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	7a1b      	ldrb	r3, [r3, #8]
 8008c12:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008c14:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	7812      	ldrb	r2, [r2, #0]
 8008c1a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008c1c:	4a07      	ldr	r2, [pc, #28]	; (8008c3c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008c1e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008c20:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
 8008c22:	e005      	b.n	8008c30 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00U;
 8008c24:	4b05      	ldr	r3, [pc, #20]	; (8008c3c <HAL_MPU_ConfigRegion+0x84>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
 8008c2a:	4b04      	ldr	r3, [pc, #16]	; (8008c3c <HAL_MPU_ConfigRegion+0x84>)
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	611a      	str	r2, [r3, #16]
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr
 8008c3c:	e000ed90 	.word	0xe000ed90

08008c40 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d101      	bne.n	8008c52 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e00e      	b.n	8008c70 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	795b      	ldrb	r3, [r3, #5]
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d105      	bne.n	8008c68 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7fd f8b2 	bl	8005dcc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d101      	bne.n	8008c8a <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e022      	b.n	8008cd0 <HAL_CRC_DeInit+0x58>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	795b      	ldrb	r3, [r3, #5]
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d101      	bne.n	8008c98 <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 8008c94:	2302      	movs	r3, #2
 8008c96:	e01b      	b.n	8008cd0 <HAL_CRC_DeInit+0x58>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	715a      	strb	r2, [r3, #5]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	689a      	ldr	r2, [r3, #8]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f042 0201 	orr.w	r2, r2, #1
 8008cac:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	791b      	ldrb	r3, [r3, #4]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7fd f8a7 	bl	8005e10 <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	715a      	strb	r2, [r3, #5]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2202      	movs	r2, #2
 8008cec:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	689a      	ldr	r2, [r3, #8]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f042 0201 	orr.w	r2, r2, #1
 8008cfc:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8008cfe:	2300      	movs	r3, #0
 8008d00:	617b      	str	r3, [r7, #20]
 8008d02:	e00a      	b.n	8008d1a <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	441a      	add	r2, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	6812      	ldr	r2, [r2, #0]
 8008d12:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	3301      	adds	r3, #1
 8008d18:	617b      	str	r3, [r7, #20]
 8008d1a:	697a      	ldr	r2, [r7, #20]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d3f0      	bcc.n	8008d04 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8008d30:	693b      	ldr	r3, [r7, #16]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	371c      	adds	r7, #28
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <HAL_CRC_GetState>:
  * @brief  Return the CRC handle state.
  * @param  hcrc CRC handle
  * @retval HAL state
  */
HAL_CRC_StateTypeDef HAL_CRC_GetState(CRC_HandleTypeDef *hcrc)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b083      	sub	sp, #12
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  /* Return CRC handle state */
  return hcrc->State;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	795b      	ldrb	r3, [r3, #5]
 8008d4a:	b2db      	uxtb	r3, r3
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b086      	sub	sp, #24
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008d60:	2300      	movs	r3, #0
 8008d62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008d64:	f7ff f800 	bl	8007d68 <HAL_GetTick>
 8008d68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e099      	b.n	8008ea8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2202      	movs	r2, #2
 8008d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f022 0201 	bic.w	r2, r2, #1
 8008d92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008d94:	e00f      	b.n	8008db6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008d96:	f7fe ffe7 	bl	8007d68 <HAL_GetTick>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	2b05      	cmp	r3, #5
 8008da2:	d908      	bls.n	8008db6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2220      	movs	r2, #32
 8008da8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2203      	movs	r2, #3
 8008dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	e078      	b.n	8008ea8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 0301 	and.w	r3, r3, #1
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d1e8      	bne.n	8008d96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008dcc:	697a      	ldr	r2, [r7, #20]
 8008dce:	4b38      	ldr	r3, [pc, #224]	; (8008eb0 <HAL_DMA_Init+0x158>)
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	685a      	ldr	r2, [r3, #4]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008dee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	699b      	ldr	r3, [r3, #24]
 8008df4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008dfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6a1b      	ldr	r3, [r3, #32]
 8008e00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0c:	2b04      	cmp	r3, #4
 8008e0e:	d107      	bne.n	8008e20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	697a      	ldr	r2, [r7, #20]
 8008e26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	f023 0307 	bic.w	r3, r3, #7
 8008e36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3c:	697a      	ldr	r2, [r7, #20]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e46:	2b04      	cmp	r3, #4
 8008e48:	d117      	bne.n	8008e7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00e      	beq.n	8008e7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 fb6d 	bl	800953c <DMA_CheckFifoParam>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d008      	beq.n	8008e7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2240      	movs	r2, #64	; 0x40
 8008e6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2201      	movs	r2, #1
 8008e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008e76:	2301      	movs	r3, #1
 8008e78:	e016      	b.n	8008ea8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fb24 	bl	80094d0 <DMA_CalcBaseAndBitshift>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e90:	223f      	movs	r2, #63	; 0x3f
 8008e92:	409a      	lsls	r2, r3
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3718      	adds	r7, #24
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	f010803f 	.word	0xf010803f

08008eb4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d101      	bne.n	8008ec6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e050      	b.n	8008f68 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d101      	bne.n	8008ed6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	e048      	b.n	8008f68 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f022 0201 	bic.w	r2, r2, #1
 8008ee4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2200      	movs	r2, #0
 8008eec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2200      	movs	r2, #0
 8008efc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2200      	movs	r2, #0
 8008f04:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2221      	movs	r2, #33	; 0x21
 8008f14:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fada 	bl	80094d0 <DMA_CalcBaseAndBitshift>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f48:	223f      	movs	r2, #63	; 0x3f
 8008f4a:	409a      	lsls	r2, r3
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b086      	sub	sp, #24
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	607a      	str	r2, [r7, #4]
 8008f7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d101      	bne.n	8008f96 <HAL_DMA_Start_IT+0x26>
 8008f92:	2302      	movs	r3, #2
 8008f94:	e040      	b.n	8009018 <HAL_DMA_Start_IT+0xa8>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d12f      	bne.n	800900a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2202      	movs	r2, #2
 8008fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	68b9      	ldr	r1, [r7, #8]
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f000 fa58 	bl	8009474 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fc8:	223f      	movs	r2, #63	; 0x3f
 8008fca:	409a      	lsls	r2, r3
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f042 0216 	orr.w	r2, r2, #22
 8008fde:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d007      	beq.n	8008ff8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f042 0208 	orr.w	r2, r2, #8
 8008ff6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f042 0201 	orr.w	r2, r2, #1
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	e005      	b.n	8009016 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009012:	2302      	movs	r3, #2
 8009014:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009016:	7dfb      	ldrb	r3, [r7, #23]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3718      	adds	r7, #24
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800902c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800902e:	f7fe fe9b 	bl	8007d68 <HAL_GetTick>
 8009032:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b02      	cmp	r3, #2
 800903e:	d008      	beq.n	8009052 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2280      	movs	r2, #128	; 0x80
 8009044:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e052      	b.n	80090f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f022 0216 	bic.w	r2, r2, #22
 8009060:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	695a      	ldr	r2, [r3, #20]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009070:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009076:	2b00      	cmp	r3, #0
 8009078:	d103      	bne.n	8009082 <HAL_DMA_Abort+0x62>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800907e:	2b00      	cmp	r3, #0
 8009080:	d007      	beq.n	8009092 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f022 0208 	bic.w	r2, r2, #8
 8009090:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f022 0201 	bic.w	r2, r2, #1
 80090a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80090a2:	e013      	b.n	80090cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80090a4:	f7fe fe60 	bl	8007d68 <HAL_GetTick>
 80090a8:	4602      	mov	r2, r0
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	2b05      	cmp	r3, #5
 80090b0:	d90c      	bls.n	80090cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2220      	movs	r2, #32
 80090b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2203      	movs	r2, #3
 80090bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80090c8:	2303      	movs	r3, #3
 80090ca:	e015      	b.n	80090f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 0301 	and.w	r3, r3, #1
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1e4      	bne.n	80090a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090de:	223f      	movs	r2, #63	; 0x3f
 80090e0:	409a      	lsls	r2, r3
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2201      	movs	r2, #1
 80090ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800910e:	b2db      	uxtb	r3, r3
 8009110:	2b02      	cmp	r3, #2
 8009112:	d004      	beq.n	800911e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2280      	movs	r2, #128	; 0x80
 8009118:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e00c      	b.n	8009138 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2205      	movs	r2, #5
 8009122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f022 0201 	bic.w	r2, r2, #1
 8009134:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b086      	sub	sp, #24
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800914c:	2300      	movs	r3, #0
 800914e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009150:	4b8e      	ldr	r3, [pc, #568]	; (800938c <HAL_DMA_IRQHandler+0x248>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a8e      	ldr	r2, [pc, #568]	; (8009390 <HAL_DMA_IRQHandler+0x24c>)
 8009156:	fba2 2303 	umull	r2, r3, r2, r3
 800915a:	0a9b      	lsrs	r3, r3, #10
 800915c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009162:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800916e:	2208      	movs	r2, #8
 8009170:	409a      	lsls	r2, r3
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	4013      	ands	r3, r2
 8009176:	2b00      	cmp	r3, #0
 8009178:	d01a      	beq.n	80091b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 0304 	and.w	r3, r3, #4
 8009184:	2b00      	cmp	r3, #0
 8009186:	d013      	beq.n	80091b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f022 0204 	bic.w	r2, r2, #4
 8009196:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800919c:	2208      	movs	r2, #8
 800919e:	409a      	lsls	r2, r3
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091a8:	f043 0201 	orr.w	r2, r3, #1
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091b4:	2201      	movs	r2, #1
 80091b6:	409a      	lsls	r2, r3
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	4013      	ands	r3, r2
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d012      	beq.n	80091e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	695b      	ldr	r3, [r3, #20]
 80091c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00b      	beq.n	80091e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091d2:	2201      	movs	r2, #1
 80091d4:	409a      	lsls	r2, r3
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091de:	f043 0202 	orr.w	r2, r3, #2
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091ea:	2204      	movs	r2, #4
 80091ec:	409a      	lsls	r2, r3
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	4013      	ands	r3, r2
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d012      	beq.n	800921c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 0302 	and.w	r3, r3, #2
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00b      	beq.n	800921c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009208:	2204      	movs	r2, #4
 800920a:	409a      	lsls	r2, r3
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009214:	f043 0204 	orr.w	r2, r3, #4
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009220:	2210      	movs	r2, #16
 8009222:	409a      	lsls	r2, r3
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	4013      	ands	r3, r2
 8009228:	2b00      	cmp	r3, #0
 800922a:	d043      	beq.n	80092b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 0308 	and.w	r3, r3, #8
 8009236:	2b00      	cmp	r3, #0
 8009238:	d03c      	beq.n	80092b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800923e:	2210      	movs	r2, #16
 8009240:	409a      	lsls	r2, r3
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009250:	2b00      	cmp	r3, #0
 8009252:	d018      	beq.n	8009286 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800925e:	2b00      	cmp	r3, #0
 8009260:	d108      	bne.n	8009274 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009266:	2b00      	cmp	r3, #0
 8009268:	d024      	beq.n	80092b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	4798      	blx	r3
 8009272:	e01f      	b.n	80092b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009278:	2b00      	cmp	r3, #0
 800927a:	d01b      	beq.n	80092b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	4798      	blx	r3
 8009284:	e016      	b.n	80092b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009290:	2b00      	cmp	r3, #0
 8009292:	d107      	bne.n	80092a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f022 0208 	bic.w	r2, r2, #8
 80092a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d003      	beq.n	80092b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092b8:	2220      	movs	r2, #32
 80092ba:	409a      	lsls	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	4013      	ands	r3, r2
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 808f 	beq.w	80093e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f003 0310 	and.w	r3, r3, #16
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f000 8087 	beq.w	80093e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092da:	2220      	movs	r2, #32
 80092dc:	409a      	lsls	r2, r3
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	2b05      	cmp	r3, #5
 80092ec:	d136      	bne.n	800935c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f022 0216 	bic.w	r2, r2, #22
 80092fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	695a      	ldr	r2, [r3, #20]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800930c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009312:	2b00      	cmp	r3, #0
 8009314:	d103      	bne.n	800931e <HAL_DMA_IRQHandler+0x1da>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800931a:	2b00      	cmp	r3, #0
 800931c:	d007      	beq.n	800932e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f022 0208 	bic.w	r2, r2, #8
 800932c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009332:	223f      	movs	r2, #63	; 0x3f
 8009334:	409a      	lsls	r2, r3
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800934e:	2b00      	cmp	r3, #0
 8009350:	d07e      	beq.n	8009450 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	4798      	blx	r3
        }
        return;
 800935a:	e079      	b.n	8009450 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009366:	2b00      	cmp	r3, #0
 8009368:	d01d      	beq.n	80093a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d10d      	bne.n	8009394 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800937c:	2b00      	cmp	r3, #0
 800937e:	d031      	beq.n	80093e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	4798      	blx	r3
 8009388:	e02c      	b.n	80093e4 <HAL_DMA_IRQHandler+0x2a0>
 800938a:	bf00      	nop
 800938c:	2000004c 	.word	0x2000004c
 8009390:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009398:	2b00      	cmp	r3, #0
 800939a:	d023      	beq.n	80093e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	4798      	blx	r3
 80093a4:	e01e      	b.n	80093e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10f      	bne.n	80093d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f022 0210 	bic.w	r2, r2, #16
 80093c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d003      	beq.n	80093e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d032      	beq.n	8009452 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093f0:	f003 0301 	and.w	r3, r3, #1
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d022      	beq.n	800943e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2205      	movs	r2, #5
 80093fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f022 0201 	bic.w	r2, r2, #1
 800940e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	3301      	adds	r3, #1
 8009414:	60bb      	str	r3, [r7, #8]
 8009416:	697a      	ldr	r2, [r7, #20]
 8009418:	429a      	cmp	r2, r3
 800941a:	d307      	bcc.n	800942c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 0301 	and.w	r3, r3, #1
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1f2      	bne.n	8009410 <HAL_DMA_IRQHandler+0x2cc>
 800942a:	e000      	b.n	800942e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800942c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2201      	movs	r2, #1
 8009432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009442:	2b00      	cmp	r3, #0
 8009444:	d005      	beq.n	8009452 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	4798      	blx	r3
 800944e:	e000      	b.n	8009452 <HAL_DMA_IRQHandler+0x30e>
        return;
 8009450:	bf00      	nop
    }
  }
}
 8009452:	3718      	adds	r7, #24
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009466:	b2db      	uxtb	r3, r3
}
 8009468:	4618      	mov	r0, r3
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
 8009480:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009490:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	683a      	ldr	r2, [r7, #0]
 8009498:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	2b40      	cmp	r3, #64	; 0x40
 80094a0:	d108      	bne.n	80094b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80094b2:	e007      	b.n	80094c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68ba      	ldr	r2, [r7, #8]
 80094ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	60da      	str	r2, [r3, #12]
}
 80094c4:	bf00      	nop
 80094c6:	3714      	adds	r7, #20
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	3b10      	subs	r3, #16
 80094e0:	4a14      	ldr	r2, [pc, #80]	; (8009534 <DMA_CalcBaseAndBitshift+0x64>)
 80094e2:	fba2 2303 	umull	r2, r3, r2, r3
 80094e6:	091b      	lsrs	r3, r3, #4
 80094e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80094ea:	4a13      	ldr	r2, [pc, #76]	; (8009538 <DMA_CalcBaseAndBitshift+0x68>)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	4413      	add	r3, r2
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	461a      	mov	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	d909      	bls.n	8009512 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009506:	f023 0303 	bic.w	r3, r3, #3
 800950a:	1d1a      	adds	r2, r3, #4
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	659a      	str	r2, [r3, #88]	; 0x58
 8009510:	e007      	b.n	8009522 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800951a:	f023 0303 	bic.w	r3, r3, #3
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009526:	4618      	mov	r0, r3
 8009528:	3714      	adds	r7, #20
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	aaaaaaab 	.word	0xaaaaaaab
 8009538:	08018b3c 	.word	0x08018b3c

0800953c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800954c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d11f      	bne.n	8009596 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	2b03      	cmp	r3, #3
 800955a:	d856      	bhi.n	800960a <DMA_CheckFifoParam+0xce>
 800955c:	a201      	add	r2, pc, #4	; (adr r2, 8009564 <DMA_CheckFifoParam+0x28>)
 800955e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009562:	bf00      	nop
 8009564:	08009575 	.word	0x08009575
 8009568:	08009587 	.word	0x08009587
 800956c:	08009575 	.word	0x08009575
 8009570:	0800960b 	.word	0x0800960b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800957c:	2b00      	cmp	r3, #0
 800957e:	d046      	beq.n	800960e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009584:	e043      	b.n	800960e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800958e:	d140      	bne.n	8009612 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009594:	e03d      	b.n	8009612 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800959e:	d121      	bne.n	80095e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	2b03      	cmp	r3, #3
 80095a4:	d837      	bhi.n	8009616 <DMA_CheckFifoParam+0xda>
 80095a6:	a201      	add	r2, pc, #4	; (adr r2, 80095ac <DMA_CheckFifoParam+0x70>)
 80095a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ac:	080095bd 	.word	0x080095bd
 80095b0:	080095c3 	.word	0x080095c3
 80095b4:	080095bd 	.word	0x080095bd
 80095b8:	080095d5 	.word	0x080095d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	73fb      	strb	r3, [r7, #15]
      break;
 80095c0:	e030      	b.n	8009624 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d025      	beq.n	800961a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80095d2:	e022      	b.n	800961a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80095dc:	d11f      	bne.n	800961e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80095e2:	e01c      	b.n	800961e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	d903      	bls.n	80095f2 <DMA_CheckFifoParam+0xb6>
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	2b03      	cmp	r3, #3
 80095ee:	d003      	beq.n	80095f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80095f0:	e018      	b.n	8009624 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	73fb      	strb	r3, [r7, #15]
      break;
 80095f6:	e015      	b.n	8009624 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00e      	beq.n	8009622 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	73fb      	strb	r3, [r7, #15]
      break;
 8009608:	e00b      	b.n	8009622 <DMA_CheckFifoParam+0xe6>
      break;
 800960a:	bf00      	nop
 800960c:	e00a      	b.n	8009624 <DMA_CheckFifoParam+0xe8>
      break;
 800960e:	bf00      	nop
 8009610:	e008      	b.n	8009624 <DMA_CheckFifoParam+0xe8>
      break;
 8009612:	bf00      	nop
 8009614:	e006      	b.n	8009624 <DMA_CheckFifoParam+0xe8>
      break;
 8009616:	bf00      	nop
 8009618:	e004      	b.n	8009624 <DMA_CheckFifoParam+0xe8>
      break;
 800961a:	bf00      	nop
 800961c:	e002      	b.n	8009624 <DMA_CheckFifoParam+0xe8>
      break;   
 800961e:	bf00      	nop
 8009620:	e000      	b.n	8009624 <DMA_CheckFifoParam+0xe8>
      break;
 8009622:	bf00      	nop
    }
  } 
  
  return status; 
 8009624:	7bfb      	ldrb	r3, [r7, #15]
}
 8009626:	4618      	mov	r0, r3
 8009628:	3714      	adds	r7, #20
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop

08009634 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800963a:	2300      	movs	r3, #0
 800963c:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800963e:	4b4b      	ldr	r3, [pc, #300]	; (800976c <HAL_FLASH_IRQHandler+0x138>)
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8009646:	2b00      	cmp	r3, #0
 8009648:	d020      	beq.n	800968c <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800964a:	4b49      	ldr	r3, [pc, #292]	; (8009770 <HAL_FLASH_IRQHandler+0x13c>)
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	b2db      	uxtb	r3, r3
 8009650:	2b01      	cmp	r3, #1
 8009652:	d107      	bne.n	8009664 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8009654:	4b46      	ldr	r3, [pc, #280]	; (8009770 <HAL_FLASH_IRQHandler+0x13c>)
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800965a:	4b45      	ldr	r3, [pc, #276]	; (8009770 <HAL_FLASH_IRQHandler+0x13c>)
 800965c:	f04f 32ff 	mov.w	r2, #4294967295
 8009660:	60da      	str	r2, [r3, #12]
 8009662:	e00b      	b.n	800967c <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8009664:	4b42      	ldr	r3, [pc, #264]	; (8009770 <HAL_FLASH_IRQHandler+0x13c>)
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	b2db      	uxtb	r3, r3
 800966a:	2b02      	cmp	r3, #2
 800966c:	d103      	bne.n	8009676 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 800966e:	4b40      	ldr	r3, [pc, #256]	; (8009770 <HAL_FLASH_IRQHandler+0x13c>)
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	607b      	str	r3, [r7, #4]
 8009674:	e002      	b.n	800967c <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8009676:	4b3e      	ldr	r3, [pc, #248]	; (8009770 <HAL_FLASH_IRQHandler+0x13c>)
 8009678:	695b      	ldr	r3, [r3, #20]
 800967a:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 800967c:	f000 f88e 	bl	800979c <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 f881 	bl	8009788 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8009686:	4b3a      	ldr	r3, [pc, #232]	; (8009770 <HAL_FLASH_IRQHandler+0x13c>)
 8009688:	2200      	movs	r2, #0
 800968a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800968c:	4b37      	ldr	r3, [pc, #220]	; (800976c <HAL_FLASH_IRQHandler+0x138>)
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	2b00      	cmp	r3, #0
 8009696:	d04a      	beq.n	800972e <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009698:	4b34      	ldr	r3, [pc, #208]	; (800976c <HAL_FLASH_IRQHandler+0x138>)
 800969a:	2201      	movs	r2, #1
 800969c:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800969e:	4b34      	ldr	r3, [pc, #208]	; (8009770 <HAL_FLASH_IRQHandler+0x13c>)
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d12d      	bne.n	8009704 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 80096a8:	4b31      	ldr	r3, [pc, #196]	; (8009770 <HAL_FLASH_IRQHandler+0x13c>)
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	3b01      	subs	r3, #1
 80096ae:	4a30      	ldr	r2, [pc, #192]	; (8009770 <HAL_FLASH_IRQHandler+0x13c>)
 80096b0:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 80096b2:	4b2f      	ldr	r3, [pc, #188]	; (8009770 <HAL_FLASH_IRQHandler+0x13c>)
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d015      	beq.n	80096e6 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 80096ba:	4b2d      	ldr	r3, [pc, #180]	; (8009770 <HAL_FLASH_IRQHandler+0x13c>)
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 f857 	bl	8009774 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 80096c6:	4b2a      	ldr	r3, [pc, #168]	; (8009770 <HAL_FLASH_IRQHandler+0x13c>)
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	3301      	adds	r3, #1
 80096cc:	4a28      	ldr	r2, [pc, #160]	; (8009770 <HAL_FLASH_IRQHandler+0x13c>)
 80096ce:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 80096d0:	4b27      	ldr	r3, [pc, #156]	; (8009770 <HAL_FLASH_IRQHandler+0x13c>)
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 80096d6:	4b26      	ldr	r3, [pc, #152]	; (8009770 <HAL_FLASH_IRQHandler+0x13c>)
 80096d8:	7a1b      	ldrb	r3, [r3, #8]
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	4619      	mov	r1, r3
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f8c2 	bl	8009868 <FLASH_Erase_Sector>
 80096e4:	e023      	b.n	800972e <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 80096e6:	f04f 33ff 	mov.w	r3, #4294967295
 80096ea:	607b      	str	r3, [r7, #4]
 80096ec:	4a20      	ldr	r2, [pc, #128]	; (8009770 <HAL_FLASH_IRQHandler+0x13c>)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80096f2:	4b1f      	ldr	r3, [pc, #124]	; (8009770 <HAL_FLASH_IRQHandler+0x13c>)
 80096f4:	2200      	movs	r2, #0
 80096f6:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80096f8:	f000 f8fe 	bl	80098f8 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 f839 	bl	8009774 <HAL_FLASH_EndOfOperationCallback>
 8009702:	e014      	b.n	800972e <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8009704:	4b1a      	ldr	r3, [pc, #104]	; (8009770 <HAL_FLASH_IRQHandler+0x13c>)
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	b2db      	uxtb	r3, r3
 800970a:	2b02      	cmp	r3, #2
 800970c:	d107      	bne.n	800971e <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800970e:	f000 f8f3 	bl	80098f8 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8009712:	4b17      	ldr	r3, [pc, #92]	; (8009770 <HAL_FLASH_IRQHandler+0x13c>)
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	4618      	mov	r0, r3
 8009718:	f000 f82c 	bl	8009774 <HAL_FLASH_EndOfOperationCallback>
 800971c:	e004      	b.n	8009728 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800971e:	4b14      	ldr	r3, [pc, #80]	; (8009770 <HAL_FLASH_IRQHandler+0x13c>)
 8009720:	695b      	ldr	r3, [r3, #20]
 8009722:	4618      	mov	r0, r3
 8009724:	f000 f826 	bl	8009774 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8009728:	4b11      	ldr	r3, [pc, #68]	; (8009770 <HAL_FLASH_IRQHandler+0x13c>)
 800972a:	2200      	movs	r2, #0
 800972c:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800972e:	4b10      	ldr	r3, [pc, #64]	; (8009770 <HAL_FLASH_IRQHandler+0x13c>)
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	b2db      	uxtb	r3, r3
 8009734:	2b00      	cmp	r3, #0
 8009736:	d114      	bne.n	8009762 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8009738:	4b0c      	ldr	r3, [pc, #48]	; (800976c <HAL_FLASH_IRQHandler+0x138>)
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	4a0b      	ldr	r2, [pc, #44]	; (800976c <HAL_FLASH_IRQHandler+0x138>)
 800973e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009742:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8009744:	4b09      	ldr	r3, [pc, #36]	; (800976c <HAL_FLASH_IRQHandler+0x138>)
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	4a08      	ldr	r2, [pc, #32]	; (800976c <HAL_FLASH_IRQHandler+0x138>)
 800974a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800974e:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8009750:	4b06      	ldr	r3, [pc, #24]	; (800976c <HAL_FLASH_IRQHandler+0x138>)
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	4a05      	ldr	r2, [pc, #20]	; (800976c <HAL_FLASH_IRQHandler+0x138>)
 8009756:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800975a:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800975c:	4b04      	ldr	r3, [pc, #16]	; (8009770 <HAL_FLASH_IRQHandler+0x13c>)
 800975e:	2200      	movs	r2, #0
 8009760:	761a      	strb	r2, [r3, #24]
  }
}
 8009762:	bf00      	nop
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	40023c00 	.word	0x40023c00
 8009770:	20000c68 	.word	0x20000c68

08009774 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8009790:	bf00      	nop
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800979c:	b480      	push	{r7}
 800979e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80097a0:	4b2f      	ldr	r3, [pc, #188]	; (8009860 <FLASH_SetErrorCode+0xc4>)
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	f003 0310 	and.w	r3, r3, #16
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d008      	beq.n	80097be <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80097ac:	4b2d      	ldr	r3, [pc, #180]	; (8009864 <FLASH_SetErrorCode+0xc8>)
 80097ae:	69db      	ldr	r3, [r3, #28]
 80097b0:	f043 0310 	orr.w	r3, r3, #16
 80097b4:	4a2b      	ldr	r2, [pc, #172]	; (8009864 <FLASH_SetErrorCode+0xc8>)
 80097b6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80097b8:	4b29      	ldr	r3, [pc, #164]	; (8009860 <FLASH_SetErrorCode+0xc4>)
 80097ba:	2210      	movs	r2, #16
 80097bc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80097be:	4b28      	ldr	r3, [pc, #160]	; (8009860 <FLASH_SetErrorCode+0xc4>)
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	f003 0320 	and.w	r3, r3, #32
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d008      	beq.n	80097dc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80097ca:	4b26      	ldr	r3, [pc, #152]	; (8009864 <FLASH_SetErrorCode+0xc8>)
 80097cc:	69db      	ldr	r3, [r3, #28]
 80097ce:	f043 0308 	orr.w	r3, r3, #8
 80097d2:	4a24      	ldr	r2, [pc, #144]	; (8009864 <FLASH_SetErrorCode+0xc8>)
 80097d4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80097d6:	4b22      	ldr	r3, [pc, #136]	; (8009860 <FLASH_SetErrorCode+0xc4>)
 80097d8:	2220      	movs	r2, #32
 80097da:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80097dc:	4b20      	ldr	r3, [pc, #128]	; (8009860 <FLASH_SetErrorCode+0xc4>)
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d008      	beq.n	80097fa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80097e8:	4b1e      	ldr	r3, [pc, #120]	; (8009864 <FLASH_SetErrorCode+0xc8>)
 80097ea:	69db      	ldr	r3, [r3, #28]
 80097ec:	f043 0304 	orr.w	r3, r3, #4
 80097f0:	4a1c      	ldr	r2, [pc, #112]	; (8009864 <FLASH_SetErrorCode+0xc8>)
 80097f2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80097f4:	4b1a      	ldr	r3, [pc, #104]	; (8009860 <FLASH_SetErrorCode+0xc4>)
 80097f6:	2240      	movs	r2, #64	; 0x40
 80097f8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80097fa:	4b19      	ldr	r3, [pc, #100]	; (8009860 <FLASH_SetErrorCode+0xc4>)
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009802:	2b00      	cmp	r3, #0
 8009804:	d008      	beq.n	8009818 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8009806:	4b17      	ldr	r3, [pc, #92]	; (8009864 <FLASH_SetErrorCode+0xc8>)
 8009808:	69db      	ldr	r3, [r3, #28]
 800980a:	f043 0302 	orr.w	r3, r3, #2
 800980e:	4a15      	ldr	r2, [pc, #84]	; (8009864 <FLASH_SetErrorCode+0xc8>)
 8009810:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8009812:	4b13      	ldr	r3, [pc, #76]	; (8009860 <FLASH_SetErrorCode+0xc4>)
 8009814:	2280      	movs	r2, #128	; 0x80
 8009816:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8009818:	4b11      	ldr	r3, [pc, #68]	; (8009860 <FLASH_SetErrorCode+0xc4>)
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009820:	2b00      	cmp	r3, #0
 8009822:	d009      	beq.n	8009838 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8009824:	4b0f      	ldr	r3, [pc, #60]	; (8009864 <FLASH_SetErrorCode+0xc8>)
 8009826:	69db      	ldr	r3, [r3, #28]
 8009828:	f043 0301 	orr.w	r3, r3, #1
 800982c:	4a0d      	ldr	r2, [pc, #52]	; (8009864 <FLASH_SetErrorCode+0xc8>)
 800982e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8009830:	4b0b      	ldr	r3, [pc, #44]	; (8009860 <FLASH_SetErrorCode+0xc4>)
 8009832:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009836:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8009838:	4b09      	ldr	r3, [pc, #36]	; (8009860 <FLASH_SetErrorCode+0xc4>)
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	f003 0302 	and.w	r3, r3, #2
 8009840:	2b00      	cmp	r3, #0
 8009842:	d008      	beq.n	8009856 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8009844:	4b07      	ldr	r3, [pc, #28]	; (8009864 <FLASH_SetErrorCode+0xc8>)
 8009846:	69db      	ldr	r3, [r3, #28]
 8009848:	f043 0320 	orr.w	r3, r3, #32
 800984c:	4a05      	ldr	r2, [pc, #20]	; (8009864 <FLASH_SetErrorCode+0xc8>)
 800984e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8009850:	4b03      	ldr	r3, [pc, #12]	; (8009860 <FLASH_SetErrorCode+0xc4>)
 8009852:	2202      	movs	r2, #2
 8009854:	60da      	str	r2, [r3, #12]
  }
}
 8009856:	bf00      	nop
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr
 8009860:	40023c00 	.word	0x40023c00
 8009864:	20000c68 	.word	0x20000c68

08009868 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	460b      	mov	r3, r1
 8009872:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8009874:	2300      	movs	r3, #0
 8009876:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8009878:	78fb      	ldrb	r3, [r7, #3]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d102      	bne.n	8009884 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800987e:	2300      	movs	r3, #0
 8009880:	60fb      	str	r3, [r7, #12]
 8009882:	e010      	b.n	80098a6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8009884:	78fb      	ldrb	r3, [r7, #3]
 8009886:	2b01      	cmp	r3, #1
 8009888:	d103      	bne.n	8009892 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800988a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800988e:	60fb      	str	r3, [r7, #12]
 8009890:	e009      	b.n	80098a6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8009892:	78fb      	ldrb	r3, [r7, #3]
 8009894:	2b02      	cmp	r3, #2
 8009896:	d103      	bne.n	80098a0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8009898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800989c:	60fb      	str	r3, [r7, #12]
 800989e:	e002      	b.n	80098a6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80098a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80098a4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80098a6:	4b13      	ldr	r3, [pc, #76]	; (80098f4 <FLASH_Erase_Sector+0x8c>)
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	4a12      	ldr	r2, [pc, #72]	; (80098f4 <FLASH_Erase_Sector+0x8c>)
 80098ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80098b2:	4b10      	ldr	r3, [pc, #64]	; (80098f4 <FLASH_Erase_Sector+0x8c>)
 80098b4:	691a      	ldr	r2, [r3, #16]
 80098b6:	490f      	ldr	r1, [pc, #60]	; (80098f4 <FLASH_Erase_Sector+0x8c>)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80098be:	4b0d      	ldr	r3, [pc, #52]	; (80098f4 <FLASH_Erase_Sector+0x8c>)
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	4a0c      	ldr	r2, [pc, #48]	; (80098f4 <FLASH_Erase_Sector+0x8c>)
 80098c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80098c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80098ca:	4b0a      	ldr	r3, [pc, #40]	; (80098f4 <FLASH_Erase_Sector+0x8c>)
 80098cc:	691a      	ldr	r2, [r3, #16]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	00db      	lsls	r3, r3, #3
 80098d2:	4313      	orrs	r3, r2
 80098d4:	4a07      	ldr	r2, [pc, #28]	; (80098f4 <FLASH_Erase_Sector+0x8c>)
 80098d6:	f043 0302 	orr.w	r3, r3, #2
 80098da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80098dc:	4b05      	ldr	r3, [pc, #20]	; (80098f4 <FLASH_Erase_Sector+0x8c>)
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	4a04      	ldr	r2, [pc, #16]	; (80098f4 <FLASH_Erase_Sector+0x8c>)
 80098e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098e6:	6113      	str	r3, [r2, #16]
}
 80098e8:	bf00      	nop
 80098ea:	3714      	adds	r7, #20
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr
 80098f4:	40023c00 	.word	0x40023c00

080098f8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80098f8:	b480      	push	{r7}
 80098fa:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80098fc:	4b20      	ldr	r3, [pc, #128]	; (8009980 <FLASH_FlushCaches+0x88>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009904:	2b00      	cmp	r3, #0
 8009906:	d017      	beq.n	8009938 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8009908:	4b1d      	ldr	r3, [pc, #116]	; (8009980 <FLASH_FlushCaches+0x88>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a1c      	ldr	r2, [pc, #112]	; (8009980 <FLASH_FlushCaches+0x88>)
 800990e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009912:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8009914:	4b1a      	ldr	r3, [pc, #104]	; (8009980 <FLASH_FlushCaches+0x88>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a19      	ldr	r2, [pc, #100]	; (8009980 <FLASH_FlushCaches+0x88>)
 800991a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800991e:	6013      	str	r3, [r2, #0]
 8009920:	4b17      	ldr	r3, [pc, #92]	; (8009980 <FLASH_FlushCaches+0x88>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a16      	ldr	r2, [pc, #88]	; (8009980 <FLASH_FlushCaches+0x88>)
 8009926:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800992a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800992c:	4b14      	ldr	r3, [pc, #80]	; (8009980 <FLASH_FlushCaches+0x88>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a13      	ldr	r2, [pc, #76]	; (8009980 <FLASH_FlushCaches+0x88>)
 8009932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009936:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8009938:	4b11      	ldr	r3, [pc, #68]	; (8009980 <FLASH_FlushCaches+0x88>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009940:	2b00      	cmp	r3, #0
 8009942:	d017      	beq.n	8009974 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8009944:	4b0e      	ldr	r3, [pc, #56]	; (8009980 <FLASH_FlushCaches+0x88>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a0d      	ldr	r2, [pc, #52]	; (8009980 <FLASH_FlushCaches+0x88>)
 800994a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800994e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009950:	4b0b      	ldr	r3, [pc, #44]	; (8009980 <FLASH_FlushCaches+0x88>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a0a      	ldr	r2, [pc, #40]	; (8009980 <FLASH_FlushCaches+0x88>)
 8009956:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800995a:	6013      	str	r3, [r2, #0]
 800995c:	4b08      	ldr	r3, [pc, #32]	; (8009980 <FLASH_FlushCaches+0x88>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a07      	ldr	r2, [pc, #28]	; (8009980 <FLASH_FlushCaches+0x88>)
 8009962:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009966:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009968:	4b05      	ldr	r3, [pc, #20]	; (8009980 <FLASH_FlushCaches+0x88>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a04      	ldr	r2, [pc, #16]	; (8009980 <FLASH_FlushCaches+0x88>)
 800996e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009972:	6013      	str	r3, [r2, #0]
  }
}
 8009974:	bf00      	nop
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	40023c00 	.word	0x40023c00

08009984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009984:	b480      	push	{r7}
 8009986:	b089      	sub	sp, #36	; 0x24
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800998e:	2300      	movs	r3, #0
 8009990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009992:	2300      	movs	r3, #0
 8009994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009996:	2300      	movs	r3, #0
 8009998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800999a:	2300      	movs	r3, #0
 800999c:	61fb      	str	r3, [r7, #28]
 800999e:	e159      	b.n	8009c54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80099a0:	2201      	movs	r2, #1
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	fa02 f303 	lsl.w	r3, r2, r3
 80099a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	4013      	ands	r3, r2
 80099b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80099b4:	693a      	ldr	r2, [r7, #16]
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	f040 8148 	bne.w	8009c4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	f003 0303 	and.w	r3, r3, #3
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d005      	beq.n	80099d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d130      	bne.n	8009a38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	005b      	lsls	r3, r3, #1
 80099e0:	2203      	movs	r2, #3
 80099e2:	fa02 f303 	lsl.w	r3, r2, r3
 80099e6:	43db      	mvns	r3, r3
 80099e8:	69ba      	ldr	r2, [r7, #24]
 80099ea:	4013      	ands	r3, r2
 80099ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	68da      	ldr	r2, [r3, #12]
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	005b      	lsls	r3, r3, #1
 80099f6:	fa02 f303 	lsl.w	r3, r2, r3
 80099fa:	69ba      	ldr	r2, [r7, #24]
 80099fc:	4313      	orrs	r3, r2
 80099fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	69ba      	ldr	r2, [r7, #24]
 8009a04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	fa02 f303 	lsl.w	r3, r2, r3
 8009a14:	43db      	mvns	r3, r3
 8009a16:	69ba      	ldr	r2, [r7, #24]
 8009a18:	4013      	ands	r3, r2
 8009a1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	091b      	lsrs	r3, r3, #4
 8009a22:	f003 0201 	and.w	r2, r3, #1
 8009a26:	69fb      	ldr	r3, [r7, #28]
 8009a28:	fa02 f303 	lsl.w	r3, r2, r3
 8009a2c:	69ba      	ldr	r2, [r7, #24]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	69ba      	ldr	r2, [r7, #24]
 8009a36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	f003 0303 	and.w	r3, r3, #3
 8009a40:	2b03      	cmp	r3, #3
 8009a42:	d017      	beq.n	8009a74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	005b      	lsls	r3, r3, #1
 8009a4e:	2203      	movs	r2, #3
 8009a50:	fa02 f303 	lsl.w	r3, r2, r3
 8009a54:	43db      	mvns	r3, r3
 8009a56:	69ba      	ldr	r2, [r7, #24]
 8009a58:	4013      	ands	r3, r2
 8009a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	689a      	ldr	r2, [r3, #8]
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	005b      	lsls	r3, r3, #1
 8009a64:	fa02 f303 	lsl.w	r3, r2, r3
 8009a68:	69ba      	ldr	r2, [r7, #24]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	69ba      	ldr	r2, [r7, #24]
 8009a72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	f003 0303 	and.w	r3, r3, #3
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d123      	bne.n	8009ac8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	08da      	lsrs	r2, r3, #3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	3208      	adds	r2, #8
 8009a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	f003 0307 	and.w	r3, r3, #7
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	220f      	movs	r2, #15
 8009a98:	fa02 f303 	lsl.w	r3, r2, r3
 8009a9c:	43db      	mvns	r3, r3
 8009a9e:	69ba      	ldr	r2, [r7, #24]
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	691a      	ldr	r2, [r3, #16]
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	f003 0307 	and.w	r3, r3, #7
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab4:	69ba      	ldr	r2, [r7, #24]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	08da      	lsrs	r2, r3, #3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	3208      	adds	r2, #8
 8009ac2:	69b9      	ldr	r1, [r7, #24]
 8009ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	005b      	lsls	r3, r3, #1
 8009ad2:	2203      	movs	r2, #3
 8009ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad8:	43db      	mvns	r3, r3
 8009ada:	69ba      	ldr	r2, [r7, #24]
 8009adc:	4013      	ands	r3, r2
 8009ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	f003 0203 	and.w	r2, r3, #3
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	005b      	lsls	r3, r3, #1
 8009aec:	fa02 f303 	lsl.w	r3, r2, r3
 8009af0:	69ba      	ldr	r2, [r7, #24]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	69ba      	ldr	r2, [r7, #24]
 8009afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f000 80a2 	beq.w	8009c4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	60fb      	str	r3, [r7, #12]
 8009b0e:	4b57      	ldr	r3, [pc, #348]	; (8009c6c <HAL_GPIO_Init+0x2e8>)
 8009b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b12:	4a56      	ldr	r2, [pc, #344]	; (8009c6c <HAL_GPIO_Init+0x2e8>)
 8009b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b18:	6453      	str	r3, [r2, #68]	; 0x44
 8009b1a:	4b54      	ldr	r3, [pc, #336]	; (8009c6c <HAL_GPIO_Init+0x2e8>)
 8009b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b22:	60fb      	str	r3, [r7, #12]
 8009b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009b26:	4a52      	ldr	r2, [pc, #328]	; (8009c70 <HAL_GPIO_Init+0x2ec>)
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	089b      	lsrs	r3, r3, #2
 8009b2c:	3302      	adds	r3, #2
 8009b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	f003 0303 	and.w	r3, r3, #3
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	220f      	movs	r2, #15
 8009b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b42:	43db      	mvns	r3, r3
 8009b44:	69ba      	ldr	r2, [r7, #24]
 8009b46:	4013      	ands	r3, r2
 8009b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4a49      	ldr	r2, [pc, #292]	; (8009c74 <HAL_GPIO_Init+0x2f0>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d019      	beq.n	8009b86 <HAL_GPIO_Init+0x202>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	4a48      	ldr	r2, [pc, #288]	; (8009c78 <HAL_GPIO_Init+0x2f4>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d013      	beq.n	8009b82 <HAL_GPIO_Init+0x1fe>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	4a47      	ldr	r2, [pc, #284]	; (8009c7c <HAL_GPIO_Init+0x2f8>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d00d      	beq.n	8009b7e <HAL_GPIO_Init+0x1fa>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	4a46      	ldr	r2, [pc, #280]	; (8009c80 <HAL_GPIO_Init+0x2fc>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d007      	beq.n	8009b7a <HAL_GPIO_Init+0x1f6>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4a45      	ldr	r2, [pc, #276]	; (8009c84 <HAL_GPIO_Init+0x300>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d101      	bne.n	8009b76 <HAL_GPIO_Init+0x1f2>
 8009b72:	2304      	movs	r3, #4
 8009b74:	e008      	b.n	8009b88 <HAL_GPIO_Init+0x204>
 8009b76:	2307      	movs	r3, #7
 8009b78:	e006      	b.n	8009b88 <HAL_GPIO_Init+0x204>
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e004      	b.n	8009b88 <HAL_GPIO_Init+0x204>
 8009b7e:	2302      	movs	r3, #2
 8009b80:	e002      	b.n	8009b88 <HAL_GPIO_Init+0x204>
 8009b82:	2301      	movs	r3, #1
 8009b84:	e000      	b.n	8009b88 <HAL_GPIO_Init+0x204>
 8009b86:	2300      	movs	r3, #0
 8009b88:	69fa      	ldr	r2, [r7, #28]
 8009b8a:	f002 0203 	and.w	r2, r2, #3
 8009b8e:	0092      	lsls	r2, r2, #2
 8009b90:	4093      	lsls	r3, r2
 8009b92:	69ba      	ldr	r2, [r7, #24]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009b98:	4935      	ldr	r1, [pc, #212]	; (8009c70 <HAL_GPIO_Init+0x2ec>)
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	089b      	lsrs	r3, r3, #2
 8009b9e:	3302      	adds	r3, #2
 8009ba0:	69ba      	ldr	r2, [r7, #24]
 8009ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009ba6:	4b38      	ldr	r3, [pc, #224]	; (8009c88 <HAL_GPIO_Init+0x304>)
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	43db      	mvns	r3, r3
 8009bb0:	69ba      	ldr	r2, [r7, #24]
 8009bb2:	4013      	ands	r3, r2
 8009bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d003      	beq.n	8009bca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8009bc2:	69ba      	ldr	r2, [r7, #24]
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009bca:	4a2f      	ldr	r2, [pc, #188]	; (8009c88 <HAL_GPIO_Init+0x304>)
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009bd0:	4b2d      	ldr	r3, [pc, #180]	; (8009c88 <HAL_GPIO_Init+0x304>)
 8009bd2:	68db      	ldr	r3, [r3, #12]
 8009bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	43db      	mvns	r3, r3
 8009bda:	69ba      	ldr	r2, [r7, #24]
 8009bdc:	4013      	ands	r3, r2
 8009bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d003      	beq.n	8009bf4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8009bec:	69ba      	ldr	r2, [r7, #24]
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009bf4:	4a24      	ldr	r2, [pc, #144]	; (8009c88 <HAL_GPIO_Init+0x304>)
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009bfa:	4b23      	ldr	r3, [pc, #140]	; (8009c88 <HAL_GPIO_Init+0x304>)
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	43db      	mvns	r3, r3
 8009c04:	69ba      	ldr	r2, [r7, #24]
 8009c06:	4013      	ands	r3, r2
 8009c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d003      	beq.n	8009c1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8009c16:	69ba      	ldr	r2, [r7, #24]
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009c1e:	4a1a      	ldr	r2, [pc, #104]	; (8009c88 <HAL_GPIO_Init+0x304>)
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009c24:	4b18      	ldr	r3, [pc, #96]	; (8009c88 <HAL_GPIO_Init+0x304>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	43db      	mvns	r3, r3
 8009c2e:	69ba      	ldr	r2, [r7, #24]
 8009c30:	4013      	ands	r3, r2
 8009c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d003      	beq.n	8009c48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8009c40:	69ba      	ldr	r2, [r7, #24]
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009c48:	4a0f      	ldr	r2, [pc, #60]	; (8009c88 <HAL_GPIO_Init+0x304>)
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	3301      	adds	r3, #1
 8009c52:	61fb      	str	r3, [r7, #28]
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	2b0f      	cmp	r3, #15
 8009c58:	f67f aea2 	bls.w	80099a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009c5c:	bf00      	nop
 8009c5e:	bf00      	nop
 8009c60:	3724      	adds	r7, #36	; 0x24
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	40023800 	.word	0x40023800
 8009c70:	40013800 	.word	0x40013800
 8009c74:	40020000 	.word	0x40020000
 8009c78:	40020400 	.word	0x40020400
 8009c7c:	40020800 	.word	0x40020800
 8009c80:	40020c00 	.word	0x40020c00
 8009c84:	40021000 	.word	0x40021000
 8009c88:	40013c00 	.word	0x40013c00

08009c8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b087      	sub	sp, #28
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009c96:	2300      	movs	r3, #0
 8009c98:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	617b      	str	r3, [r7, #20]
 8009ca6:	e0bb      	b.n	8009e20 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009ca8:	2201      	movs	r2, #1
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	fa02 f303 	lsl.w	r3, r2, r3
 8009cb0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8009cb2:	683a      	ldr	r2, [r7, #0]
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	4013      	ands	r3, r2
 8009cb8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	f040 80ab 	bne.w	8009e1a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8009cc4:	4a5c      	ldr	r2, [pc, #368]	; (8009e38 <HAL_GPIO_DeInit+0x1ac>)
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	089b      	lsrs	r3, r3, #2
 8009cca:	3302      	adds	r3, #2
 8009ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cd0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	f003 0303 	and.w	r3, r3, #3
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	220f      	movs	r2, #15
 8009cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ce0:	68ba      	ldr	r2, [r7, #8]
 8009ce2:	4013      	ands	r3, r2
 8009ce4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a54      	ldr	r2, [pc, #336]	; (8009e3c <HAL_GPIO_DeInit+0x1b0>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d019      	beq.n	8009d22 <HAL_GPIO_DeInit+0x96>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a53      	ldr	r2, [pc, #332]	; (8009e40 <HAL_GPIO_DeInit+0x1b4>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d013      	beq.n	8009d1e <HAL_GPIO_DeInit+0x92>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4a52      	ldr	r2, [pc, #328]	; (8009e44 <HAL_GPIO_DeInit+0x1b8>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d00d      	beq.n	8009d1a <HAL_GPIO_DeInit+0x8e>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4a51      	ldr	r2, [pc, #324]	; (8009e48 <HAL_GPIO_DeInit+0x1bc>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d007      	beq.n	8009d16 <HAL_GPIO_DeInit+0x8a>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4a50      	ldr	r2, [pc, #320]	; (8009e4c <HAL_GPIO_DeInit+0x1c0>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d101      	bne.n	8009d12 <HAL_GPIO_DeInit+0x86>
 8009d0e:	2304      	movs	r3, #4
 8009d10:	e008      	b.n	8009d24 <HAL_GPIO_DeInit+0x98>
 8009d12:	2307      	movs	r3, #7
 8009d14:	e006      	b.n	8009d24 <HAL_GPIO_DeInit+0x98>
 8009d16:	2303      	movs	r3, #3
 8009d18:	e004      	b.n	8009d24 <HAL_GPIO_DeInit+0x98>
 8009d1a:	2302      	movs	r3, #2
 8009d1c:	e002      	b.n	8009d24 <HAL_GPIO_DeInit+0x98>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e000      	b.n	8009d24 <HAL_GPIO_DeInit+0x98>
 8009d22:	2300      	movs	r3, #0
 8009d24:	697a      	ldr	r2, [r7, #20]
 8009d26:	f002 0203 	and.w	r2, r2, #3
 8009d2a:	0092      	lsls	r2, r2, #2
 8009d2c:	4093      	lsls	r3, r2
 8009d2e:	68ba      	ldr	r2, [r7, #8]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d132      	bne.n	8009d9a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009d34:	4b46      	ldr	r3, [pc, #280]	; (8009e50 <HAL_GPIO_DeInit+0x1c4>)
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	43db      	mvns	r3, r3
 8009d3c:	4944      	ldr	r1, [pc, #272]	; (8009e50 <HAL_GPIO_DeInit+0x1c4>)
 8009d3e:	4013      	ands	r3, r2
 8009d40:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8009d42:	4b43      	ldr	r3, [pc, #268]	; (8009e50 <HAL_GPIO_DeInit+0x1c4>)
 8009d44:	685a      	ldr	r2, [r3, #4]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	43db      	mvns	r3, r3
 8009d4a:	4941      	ldr	r1, [pc, #260]	; (8009e50 <HAL_GPIO_DeInit+0x1c4>)
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009d50:	4b3f      	ldr	r3, [pc, #252]	; (8009e50 <HAL_GPIO_DeInit+0x1c4>)
 8009d52:	68da      	ldr	r2, [r3, #12]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	43db      	mvns	r3, r3
 8009d58:	493d      	ldr	r1, [pc, #244]	; (8009e50 <HAL_GPIO_DeInit+0x1c4>)
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009d5e:	4b3c      	ldr	r3, [pc, #240]	; (8009e50 <HAL_GPIO_DeInit+0x1c4>)
 8009d60:	689a      	ldr	r2, [r3, #8]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	43db      	mvns	r3, r3
 8009d66:	493a      	ldr	r1, [pc, #232]	; (8009e50 <HAL_GPIO_DeInit+0x1c4>)
 8009d68:	4013      	ands	r3, r2
 8009d6a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	f003 0303 	and.w	r3, r3, #3
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	220f      	movs	r2, #15
 8009d76:	fa02 f303 	lsl.w	r3, r2, r3
 8009d7a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009d7c:	4a2e      	ldr	r2, [pc, #184]	; (8009e38 <HAL_GPIO_DeInit+0x1ac>)
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	089b      	lsrs	r3, r3, #2
 8009d82:	3302      	adds	r3, #2
 8009d84:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	43da      	mvns	r2, r3
 8009d8c:	482a      	ldr	r0, [pc, #168]	; (8009e38 <HAL_GPIO_DeInit+0x1ac>)
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	089b      	lsrs	r3, r3, #2
 8009d92:	400a      	ands	r2, r1
 8009d94:	3302      	adds	r3, #2
 8009d96:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	005b      	lsls	r3, r3, #1
 8009da2:	2103      	movs	r1, #3
 8009da4:	fa01 f303 	lsl.w	r3, r1, r3
 8009da8:	43db      	mvns	r3, r3
 8009daa:	401a      	ands	r2, r3
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	08da      	lsrs	r2, r3, #3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	3208      	adds	r2, #8
 8009db8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	f003 0307 	and.w	r3, r3, #7
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	220f      	movs	r2, #15
 8009dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8009dca:	43db      	mvns	r3, r3
 8009dcc:	697a      	ldr	r2, [r7, #20]
 8009dce:	08d2      	lsrs	r2, r2, #3
 8009dd0:	4019      	ands	r1, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	3208      	adds	r2, #8
 8009dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	68da      	ldr	r2, [r3, #12]
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	005b      	lsls	r3, r3, #1
 8009de2:	2103      	movs	r1, #3
 8009de4:	fa01 f303 	lsl.w	r3, r1, r3
 8009de8:	43db      	mvns	r3, r3
 8009dea:	401a      	ands	r2, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	685a      	ldr	r2, [r3, #4]
 8009df4:	2101      	movs	r1, #1
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	fa01 f303 	lsl.w	r3, r1, r3
 8009dfc:	43db      	mvns	r3, r3
 8009dfe:	401a      	ands	r2, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	689a      	ldr	r2, [r3, #8]
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	005b      	lsls	r3, r3, #1
 8009e0c:	2103      	movs	r1, #3
 8009e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e12:	43db      	mvns	r3, r3
 8009e14:	401a      	ands	r2, r3
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	617b      	str	r3, [r7, #20]
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	2b0f      	cmp	r3, #15
 8009e24:	f67f af40 	bls.w	8009ca8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009e28:	bf00      	nop
 8009e2a:	bf00      	nop
 8009e2c:	371c      	adds	r7, #28
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr
 8009e36:	bf00      	nop
 8009e38:	40013800 	.word	0x40013800
 8009e3c:	40020000 	.word	0x40020000
 8009e40:	40020400 	.word	0x40020400
 8009e44:	40020800 	.word	0x40020800
 8009e48:	40020c00 	.word	0x40020c00
 8009e4c:	40021000 	.word	0x40021000
 8009e50:	40013c00 	.word	0x40013c00

08009e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	807b      	strh	r3, [r7, #2]
 8009e60:	4613      	mov	r3, r2
 8009e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009e64:	787b      	ldrb	r3, [r7, #1]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d003      	beq.n	8009e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009e6a:	887a      	ldrh	r2, [r7, #2]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009e70:	e003      	b.n	8009e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009e72:	887b      	ldrh	r3, [r7, #2]
 8009e74:	041a      	lsls	r2, r3, #16
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	619a      	str	r2, [r3, #24]
}
 8009e7a:	bf00      	nop
 8009e7c:	370c      	adds	r7, #12
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr

08009e86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009e86:	b480      	push	{r7}
 8009e88:	b085      	sub	sp, #20
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	460b      	mov	r3, r1
 8009e90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	695b      	ldr	r3, [r3, #20]
 8009e96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009e98:	887a      	ldrh	r2, [r7, #2]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	4013      	ands	r3, r2
 8009e9e:	041a      	lsls	r2, r3, #16
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	43d9      	mvns	r1, r3
 8009ea4:	887b      	ldrh	r3, [r7, #2]
 8009ea6:	400b      	ands	r3, r1
 8009ea8:	431a      	orrs	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	619a      	str	r2, [r3, #24]
}
 8009eae:	bf00      	nop
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
	...

08009ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d101      	bne.n	8009ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e171      	b.n	800a1b2 <HAL_I2C_Init+0x2f6>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d12c      	bne.n	8009f34 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	4a77      	ldr	r2, [pc, #476]	; (800a0c4 <HAL_I2C_Init+0x208>)
 8009ee6:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a77      	ldr	r2, [pc, #476]	; (800a0c8 <HAL_I2C_Init+0x20c>)
 8009eec:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a76      	ldr	r2, [pc, #472]	; (800a0cc <HAL_I2C_Init+0x210>)
 8009ef2:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a76      	ldr	r2, [pc, #472]	; (800a0d0 <HAL_I2C_Init+0x214>)
 8009ef8:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4a75      	ldr	r2, [pc, #468]	; (800a0d4 <HAL_I2C_Init+0x218>)
 8009efe:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a75      	ldr	r2, [pc, #468]	; (800a0d8 <HAL_I2C_Init+0x21c>)
 8009f04:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a74      	ldr	r2, [pc, #464]	; (800a0dc <HAL_I2C_Init+0x220>)
 8009f0a:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a74      	ldr	r2, [pc, #464]	; (800a0e0 <HAL_I2C_Init+0x224>)
 8009f10:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a73      	ldr	r2, [pc, #460]	; (800a0e4 <HAL_I2C_Init+0x228>)
 8009f16:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4a73      	ldr	r2, [pc, #460]	; (800a0e8 <HAL_I2C_Init+0x22c>)
 8009f1c:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d102      	bne.n	8009f2c <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4a70      	ldr	r2, [pc, #448]	; (800a0ec <HAL_I2C_Init+0x230>)
 8009f2a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2224      	movs	r2, #36	; 0x24
 8009f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f022 0201 	bic.w	r2, r2, #1
 8009f4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009f6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009f6c:	f002 fc2c 	bl	800c7c8 <HAL_RCC_GetPCLK1Freq>
 8009f70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	4a5e      	ldr	r2, [pc, #376]	; (800a0f0 <HAL_I2C_Init+0x234>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d807      	bhi.n	8009f8c <HAL_I2C_Init+0xd0>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	4a5d      	ldr	r2, [pc, #372]	; (800a0f4 <HAL_I2C_Init+0x238>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	bf94      	ite	ls
 8009f84:	2301      	movls	r3, #1
 8009f86:	2300      	movhi	r3, #0
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	e006      	b.n	8009f9a <HAL_I2C_Init+0xde>
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	4a5a      	ldr	r2, [pc, #360]	; (800a0f8 <HAL_I2C_Init+0x23c>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	bf94      	ite	ls
 8009f94:	2301      	movls	r3, #1
 8009f96:	2300      	movhi	r3, #0
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d001      	beq.n	8009fa2 <HAL_I2C_Init+0xe6>
  {
    return HAL_ERROR;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e107      	b.n	800a1b2 <HAL_I2C_Init+0x2f6>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	4a55      	ldr	r2, [pc, #340]	; (800a0fc <HAL_I2C_Init+0x240>)
 8009fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8009faa:	0c9b      	lsrs	r3, r3, #18
 8009fac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	430a      	orrs	r2, r1
 8009fc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	6a1b      	ldr	r3, [r3, #32]
 8009fc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	4a47      	ldr	r2, [pc, #284]	; (800a0f0 <HAL_I2C_Init+0x234>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d802      	bhi.n	8009fdc <HAL_I2C_Init+0x120>
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	e009      	b.n	8009ff0 <HAL_I2C_Init+0x134>
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009fe2:	fb02 f303 	mul.w	r3, r2, r3
 8009fe6:	4a46      	ldr	r2, [pc, #280]	; (800a100 <HAL_I2C_Init+0x244>)
 8009fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8009fec:	099b      	lsrs	r3, r3, #6
 8009fee:	3301      	adds	r3, #1
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	6812      	ldr	r2, [r2, #0]
 8009ff4:	430b      	orrs	r3, r1
 8009ff6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	69db      	ldr	r3, [r3, #28]
 8009ffe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a002:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	4939      	ldr	r1, [pc, #228]	; (800a0f0 <HAL_I2C_Init+0x234>)
 800a00c:	428b      	cmp	r3, r1
 800a00e:	d819      	bhi.n	800a044 <HAL_I2C_Init+0x188>
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	1e59      	subs	r1, r3, #1
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	005b      	lsls	r3, r3, #1
 800a01a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a01e:	1c59      	adds	r1, r3, #1
 800a020:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a024:	400b      	ands	r3, r1
 800a026:	2b00      	cmp	r3, #0
 800a028:	d00a      	beq.n	800a040 <HAL_I2C_Init+0x184>
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	1e59      	subs	r1, r3, #1
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	005b      	lsls	r3, r3, #1
 800a034:	fbb1 f3f3 	udiv	r3, r1, r3
 800a038:	3301      	adds	r3, #1
 800a03a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a03e:	e071      	b.n	800a124 <HAL_I2C_Init+0x268>
 800a040:	2304      	movs	r3, #4
 800a042:	e06f      	b.n	800a124 <HAL_I2C_Init+0x268>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d111      	bne.n	800a070 <HAL_I2C_Init+0x1b4>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	1e58      	subs	r0, r3, #1
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6859      	ldr	r1, [r3, #4]
 800a054:	460b      	mov	r3, r1
 800a056:	005b      	lsls	r3, r3, #1
 800a058:	440b      	add	r3, r1
 800a05a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a05e:	3301      	adds	r3, #1
 800a060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a064:	2b00      	cmp	r3, #0
 800a066:	bf0c      	ite	eq
 800a068:	2301      	moveq	r3, #1
 800a06a:	2300      	movne	r3, #0
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	e012      	b.n	800a096 <HAL_I2C_Init+0x1da>
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	1e58      	subs	r0, r3, #1
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6859      	ldr	r1, [r3, #4]
 800a078:	460b      	mov	r3, r1
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	440b      	add	r3, r1
 800a07e:	0099      	lsls	r1, r3, #2
 800a080:	440b      	add	r3, r1
 800a082:	fbb0 f3f3 	udiv	r3, r0, r3
 800a086:	3301      	adds	r3, #1
 800a088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	bf0c      	ite	eq
 800a090:	2301      	moveq	r3, #1
 800a092:	2300      	movne	r3, #0
 800a094:	b2db      	uxtb	r3, r3
 800a096:	2b00      	cmp	r3, #0
 800a098:	d001      	beq.n	800a09e <HAL_I2C_Init+0x1e2>
 800a09a:	2301      	movs	r3, #1
 800a09c:	e042      	b.n	800a124 <HAL_I2C_Init+0x268>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d12e      	bne.n	800a104 <HAL_I2C_Init+0x248>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	1e58      	subs	r0, r3, #1
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6859      	ldr	r1, [r3, #4]
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	005b      	lsls	r3, r3, #1
 800a0b2:	440b      	add	r3, r1
 800a0b4:	fbb0 f3f3 	udiv	r3, r0, r3
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0c2:	e02f      	b.n	800a124 <HAL_I2C_Init+0x268>
 800a0c4:	08004d19 	.word	0x08004d19
 800a0c8:	0800a915 	.word	0x0800a915
 800a0cc:	0800a929 	.word	0x0800a929
 800a0d0:	0800a93d 	.word	0x0800a93d
 800a0d4:	0800a96d 	.word	0x0800a96d
 800a0d8:	08004cf1 	.word	0x08004cf1
 800a0dc:	08004d05 	.word	0x08004d05
 800a0e0:	08004d45 	.word	0x08004d45
 800a0e4:	0800a981 	.word	0x0800a981
 800a0e8:	0800a951 	.word	0x0800a951
 800a0ec:	0800680d 	.word	0x0800680d
 800a0f0:	000186a0 	.word	0x000186a0
 800a0f4:	001e847f 	.word	0x001e847f
 800a0f8:	003d08ff 	.word	0x003d08ff
 800a0fc:	431bde83 	.word	0x431bde83
 800a100:	10624dd3 	.word	0x10624dd3
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	1e58      	subs	r0, r3, #1
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6859      	ldr	r1, [r3, #4]
 800a10c:	460b      	mov	r3, r1
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	440b      	add	r3, r1
 800a112:	0099      	lsls	r1, r3, #2
 800a114:	440b      	add	r3, r1
 800a116:	fbb0 f3f3 	udiv	r3, r0, r3
 800a11a:	3301      	adds	r3, #1
 800a11c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a120:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a124:	6879      	ldr	r1, [r7, #4]
 800a126:	6809      	ldr	r1, [r1, #0]
 800a128:	4313      	orrs	r3, r2
 800a12a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	69da      	ldr	r2, [r3, #28]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6a1b      	ldr	r3, [r3, #32]
 800a13e:	431a      	orrs	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	430a      	orrs	r2, r1
 800a146:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a152:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	6911      	ldr	r1, [r2, #16]
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	68d2      	ldr	r2, [r2, #12]
 800a15e:	4311      	orrs	r1, r2
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	6812      	ldr	r2, [r2, #0]
 800a164:	430b      	orrs	r3, r1
 800a166:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	695a      	ldr	r2, [r3, #20]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	699b      	ldr	r3, [r3, #24]
 800a17a:	431a      	orrs	r2, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	430a      	orrs	r2, r1
 800a182:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f042 0201 	orr.w	r2, r2, #1
 800a192:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2220      	movs	r2, #32
 800a19e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop

0800a1bc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d101      	bne.n	800a1ce <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e02c      	b.n	800a228 <HAL_I2C_DeInit+0x6c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2224      	movs	r2, #36	; 0x24
 800a1d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f022 0201 	bic.w	r2, r2, #1
 800a1e4:	601a      	str	r2, [r3, #0]

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  if (hi2c->MspDeInitCallback == NULL)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d103      	bne.n	800a1f8 <HAL_I2C_DeInit+0x3c>
  {
    hi2c->MspDeInitCallback = HAL_I2C_MspDeInit; /* Legacy weak MspDeInit  */
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a0f      	ldr	r2, [pc, #60]	; (800a230 <HAL_I2C_DeInit+0x74>)
 800a1f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	4798      	blx	r3
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	08006a1d 	.word	0x08006a1d

0800a234 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800a234:	b480      	push	{r7}
 800a236:	b087      	sub	sp, #28
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	607a      	str	r2, [r7, #4]
 800a23e:	461a      	mov	r2, r3
 800a240:	460b      	mov	r3, r1
 800a242:	817b      	strh	r3, [r7, #10]
 800a244:	4613      	mov	r3, r2
 800a246:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800a248:	2300      	movs	r3, #0
 800a24a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a252:	b2db      	uxtb	r3, r3
 800a254:	2b20      	cmp	r3, #32
 800a256:	f040 8085 	bne.w	800a364 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800a25a:	4b46      	ldr	r3, [pc, #280]	; (800a374 <HAL_I2C_Master_Transmit_IT+0x140>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	08db      	lsrs	r3, r3, #3
 800a260:	4a45      	ldr	r2, [pc, #276]	; (800a378 <HAL_I2C_Master_Transmit_IT+0x144>)
 800a262:	fba2 2303 	umull	r2, r3, r2, r3
 800a266:	0a1a      	lsrs	r2, r3, #8
 800a268:	4613      	mov	r3, r2
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	4413      	add	r3, r2
 800a26e:	009a      	lsls	r2, r3, #2
 800a270:	4413      	add	r3, r2
 800a272:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	3b01      	subs	r3, #1
 800a278:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d116      	bne.n	800a2ae <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2200      	movs	r2, #0
 800a284:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2220      	movs	r2, #32
 800a28a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2200      	movs	r2, #0
 800a292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29a:	f043 0220 	orr.w	r2, r3, #32
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e05b      	b.n	800a366 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	699b      	ldr	r3, [r3, #24]
 800a2b4:	f003 0302 	and.w	r3, r3, #2
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	d0db      	beq.n	800a274 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d101      	bne.n	800a2ca <HAL_I2C_Master_Transmit_IT+0x96>
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	e04d      	b.n	800a366 <HAL_I2C_Master_Transmit_IT+0x132>
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f003 0301 	and.w	r3, r3, #1
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d007      	beq.n	800a2f0 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f042 0201 	orr.w	r2, r2, #1
 800a2ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2221      	movs	r2, #33	; 0x21
 800a304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2210      	movs	r2, #16
 800a30c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2200      	movs	r2, #0
 800a314:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	893a      	ldrh	r2, [r7, #8]
 800a320:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a326:	b29a      	uxth	r2, r3
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	4a13      	ldr	r2, [pc, #76]	; (800a37c <HAL_I2C_Master_Transmit_IT+0x148>)
 800a330:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800a332:	897a      	ldrh	r2, [r7, #10]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	685a      	ldr	r2, [r3, #4]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800a34e:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a35e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	e000      	b.n	800a366 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 800a364:	2302      	movs	r3, #2
  }
}
 800a366:	4618      	mov	r0, r3
 800a368:	371c      	adds	r7, #28
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	2000004c 	.word	0x2000004c
 800a378:	14f8b589 	.word	0x14f8b589
 800a37c:	ffff0000 	.word	0xffff0000

0800a380 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800a380:	b480      	push	{r7}
 800a382:	b087      	sub	sp, #28
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	4608      	mov	r0, r1
 800a38a:	4611      	mov	r1, r2
 800a38c:	461a      	mov	r2, r3
 800a38e:	4603      	mov	r3, r0
 800a390:	817b      	strh	r3, [r7, #10]
 800a392:	460b      	mov	r3, r1
 800a394:	813b      	strh	r3, [r7, #8]
 800a396:	4613      	mov	r3, r2
 800a398:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a39a:	2300      	movs	r3, #0
 800a39c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b20      	cmp	r3, #32
 800a3a8:	f040 808e 	bne.w	800a4c8 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800a3ac:	4b4a      	ldr	r3, [pc, #296]	; (800a4d8 <HAL_I2C_Mem_Write_IT+0x158>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	08db      	lsrs	r3, r3, #3
 800a3b2:	4a4a      	ldr	r2, [pc, #296]	; (800a4dc <HAL_I2C_Mem_Write_IT+0x15c>)
 800a3b4:	fba2 2303 	umull	r2, r3, r2, r3
 800a3b8:	0a1a      	lsrs	r2, r3, #8
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	4413      	add	r3, r2
 800a3c0:	009a      	lsls	r2, r3, #2
 800a3c2:	4413      	add	r3, r2
 800a3c4:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d116      	bne.n	800a400 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2220      	movs	r2, #32
 800a3dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ec:	f043 0220 	orr.w	r2, r3, #32
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e064      	b.n	800a4ca <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	699b      	ldr	r3, [r3, #24]
 800a406:	f003 0302 	and.w	r3, r3, #2
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d0db      	beq.n	800a3c6 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a414:	2b01      	cmp	r3, #1
 800a416:	d101      	bne.n	800a41c <HAL_I2C_Mem_Write_IT+0x9c>
 800a418:	2302      	movs	r3, #2
 800a41a:	e056      	b.n	800a4ca <HAL_I2C_Mem_Write_IT+0x14a>
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2201      	movs	r2, #1
 800a420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f003 0301 	and.w	r3, r3, #1
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d007      	beq.n	800a442 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f042 0201 	orr.w	r2, r2, #1
 800a440:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a450:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2221      	movs	r2, #33	; 0x21
 800a456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2240      	movs	r2, #64	; 0x40
 800a45e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2200      	movs	r2, #0
 800a466:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6a3a      	ldr	r2, [r7, #32]
 800a46c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a472:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a478:	b29a      	uxth	r2, r3
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	4a17      	ldr	r2, [pc, #92]	; (800a4e0 <HAL_I2C_Mem_Write_IT+0x160>)
 800a482:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800a484:	897a      	ldrh	r2, [r7, #10]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800a48a:	893a      	ldrh	r2, [r7, #8]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800a490:	88fa      	ldrh	r2, [r7, #6]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4aa:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	685a      	ldr	r2, [r3, #4]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800a4c2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	e000      	b.n	800a4ca <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800a4c8:	2302      	movs	r3, #2
  }
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	371c      	adds	r7, #28
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr
 800a4d6:	bf00      	nop
 800a4d8:	2000004c 	.word	0x2000004c
 800a4dc:	14f8b589 	.word	0x14f8b589
 800a4e0:	ffff0000 	.word	0xffff0000

0800a4e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b088      	sub	sp, #32
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4fc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a504:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a50c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a50e:	7bfb      	ldrb	r3, [r7, #15]
 800a510:	2b10      	cmp	r3, #16
 800a512:	d003      	beq.n	800a51c <HAL_I2C_EV_IRQHandler+0x38>
 800a514:	7bfb      	ldrb	r3, [r7, #15]
 800a516:	2b40      	cmp	r3, #64	; 0x40
 800a518:	f040 80c1 	bne.w	800a69e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	699b      	ldr	r3, [r3, #24]
 800a522:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	695b      	ldr	r3, [r3, #20]
 800a52a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	f003 0301 	and.w	r3, r3, #1
 800a532:	2b00      	cmp	r3, #0
 800a534:	d10d      	bne.n	800a552 <HAL_I2C_EV_IRQHandler+0x6e>
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800a53c:	d003      	beq.n	800a546 <HAL_I2C_EV_IRQHandler+0x62>
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800a544:	d101      	bne.n	800a54a <HAL_I2C_EV_IRQHandler+0x66>
 800a546:	2301      	movs	r3, #1
 800a548:	e000      	b.n	800a54c <HAL_I2C_EV_IRQHandler+0x68>
 800a54a:	2300      	movs	r3, #0
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	f000 8132 	beq.w	800a7b6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	f003 0301 	and.w	r3, r3, #1
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00c      	beq.n	800a576 <HAL_I2C_EV_IRQHandler+0x92>
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	0a5b      	lsrs	r3, r3, #9
 800a560:	f003 0301 	and.w	r3, r3, #1
 800a564:	2b00      	cmp	r3, #0
 800a566:	d006      	beq.n	800a576 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f001 fc87 	bl	800be7c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 fd81 	bl	800b076 <I2C_Master_SB>
 800a574:	e092      	b.n	800a69c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	08db      	lsrs	r3, r3, #3
 800a57a:	f003 0301 	and.w	r3, r3, #1
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d009      	beq.n	800a596 <HAL_I2C_EV_IRQHandler+0xb2>
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	0a5b      	lsrs	r3, r3, #9
 800a586:	f003 0301 	and.w	r3, r3, #1
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d003      	beq.n	800a596 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 fdf7 	bl	800b182 <I2C_Master_ADD10>
 800a594:	e082      	b.n	800a69c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a596:	69fb      	ldr	r3, [r7, #28]
 800a598:	085b      	lsrs	r3, r3, #1
 800a59a:	f003 0301 	and.w	r3, r3, #1
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d009      	beq.n	800a5b6 <HAL_I2C_EV_IRQHandler+0xd2>
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	0a5b      	lsrs	r3, r3, #9
 800a5a6:	f003 0301 	and.w	r3, r3, #1
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d003      	beq.n	800a5b6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 fe11 	bl	800b1d6 <I2C_Master_ADDR>
 800a5b4:	e072      	b.n	800a69c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	089b      	lsrs	r3, r3, #2
 800a5ba:	f003 0301 	and.w	r3, r3, #1
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d03b      	beq.n	800a63a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5d0:	f000 80f3 	beq.w	800a7ba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	09db      	lsrs	r3, r3, #7
 800a5d8:	f003 0301 	and.w	r3, r3, #1
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d00f      	beq.n	800a600 <HAL_I2C_EV_IRQHandler+0x11c>
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	0a9b      	lsrs	r3, r3, #10
 800a5e4:	f003 0301 	and.w	r3, r3, #1
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d009      	beq.n	800a600 <HAL_I2C_EV_IRQHandler+0x11c>
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	089b      	lsrs	r3, r3, #2
 800a5f0:	f003 0301 	and.w	r3, r3, #1
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d103      	bne.n	800a600 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 f9e5 	bl	800a9c8 <I2C_MasterTransmit_TXE>
 800a5fe:	e04d      	b.n	800a69c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	089b      	lsrs	r3, r3, #2
 800a604:	f003 0301 	and.w	r3, r3, #1
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f000 80d6 	beq.w	800a7ba <HAL_I2C_EV_IRQHandler+0x2d6>
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	0a5b      	lsrs	r3, r3, #9
 800a612:	f003 0301 	and.w	r3, r3, #1
 800a616:	2b00      	cmp	r3, #0
 800a618:	f000 80cf 	beq.w	800a7ba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a61c:	7bbb      	ldrb	r3, [r7, #14]
 800a61e:	2b21      	cmp	r3, #33	; 0x21
 800a620:	d103      	bne.n	800a62a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 fa6f 	bl	800ab06 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a628:	e0c7      	b.n	800a7ba <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800a62a:	7bfb      	ldrb	r3, [r7, #15]
 800a62c:	2b40      	cmp	r3, #64	; 0x40
 800a62e:	f040 80c4 	bne.w	800a7ba <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 fae0 	bl	800abf8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a638:	e0bf      	b.n	800a7ba <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a644:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a648:	f000 80b7 	beq.w	800a7ba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	099b      	lsrs	r3, r3, #6
 800a650:	f003 0301 	and.w	r3, r3, #1
 800a654:	2b00      	cmp	r3, #0
 800a656:	d00f      	beq.n	800a678 <HAL_I2C_EV_IRQHandler+0x194>
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	0a9b      	lsrs	r3, r3, #10
 800a65c:	f003 0301 	and.w	r3, r3, #1
 800a660:	2b00      	cmp	r3, #0
 800a662:	d009      	beq.n	800a678 <HAL_I2C_EV_IRQHandler+0x194>
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	089b      	lsrs	r3, r3, #2
 800a668:	f003 0301 	and.w	r3, r3, #1
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d103      	bne.n	800a678 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 fb56 	bl	800ad22 <I2C_MasterReceive_RXNE>
 800a676:	e011      	b.n	800a69c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a678:	69fb      	ldr	r3, [r7, #28]
 800a67a:	089b      	lsrs	r3, r3, #2
 800a67c:	f003 0301 	and.w	r3, r3, #1
 800a680:	2b00      	cmp	r3, #0
 800a682:	f000 809a 	beq.w	800a7ba <HAL_I2C_EV_IRQHandler+0x2d6>
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	0a5b      	lsrs	r3, r3, #9
 800a68a:	f003 0301 	and.w	r3, r3, #1
 800a68e:	2b00      	cmp	r3, #0
 800a690:	f000 8093 	beq.w	800a7ba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 fc02 	bl	800ae9e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a69a:	e08e      	b.n	800a7ba <HAL_I2C_EV_IRQHandler+0x2d6>
 800a69c:	e08d      	b.n	800a7ba <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d004      	beq.n	800a6b0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	695b      	ldr	r3, [r3, #20]
 800a6ac:	61fb      	str	r3, [r7, #28]
 800a6ae:	e007      	b.n	800a6c0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	699b      	ldr	r3, [r3, #24]
 800a6b6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	695b      	ldr	r3, [r3, #20]
 800a6be:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	085b      	lsrs	r3, r3, #1
 800a6c4:	f003 0301 	and.w	r3, r3, #1
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d012      	beq.n	800a6f2 <HAL_I2C_EV_IRQHandler+0x20e>
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	0a5b      	lsrs	r3, r3, #9
 800a6d0:	f003 0301 	and.w	r3, r3, #1
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d00c      	beq.n	800a6f2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d003      	beq.n	800a6e8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	699b      	ldr	r3, [r3, #24]
 800a6e6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800a6e8:	69b9      	ldr	r1, [r7, #24]
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 ffc4 	bl	800b678 <I2C_Slave_ADDR>
 800a6f0:	e066      	b.n	800a7c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	091b      	lsrs	r3, r3, #4
 800a6f6:	f003 0301 	and.w	r3, r3, #1
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d009      	beq.n	800a712 <HAL_I2C_EV_IRQHandler+0x22e>
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	0a5b      	lsrs	r3, r3, #9
 800a702:	f003 0301 	and.w	r3, r3, #1
 800a706:	2b00      	cmp	r3, #0
 800a708:	d003      	beq.n	800a712 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 fffe 	bl	800b70c <I2C_Slave_STOPF>
 800a710:	e056      	b.n	800a7c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a712:	7bbb      	ldrb	r3, [r7, #14]
 800a714:	2b21      	cmp	r3, #33	; 0x21
 800a716:	d002      	beq.n	800a71e <HAL_I2C_EV_IRQHandler+0x23a>
 800a718:	7bbb      	ldrb	r3, [r7, #14]
 800a71a:	2b29      	cmp	r3, #41	; 0x29
 800a71c:	d125      	bne.n	800a76a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	09db      	lsrs	r3, r3, #7
 800a722:	f003 0301 	and.w	r3, r3, #1
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00f      	beq.n	800a74a <HAL_I2C_EV_IRQHandler+0x266>
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	0a9b      	lsrs	r3, r3, #10
 800a72e:	f003 0301 	and.w	r3, r3, #1
 800a732:	2b00      	cmp	r3, #0
 800a734:	d009      	beq.n	800a74a <HAL_I2C_EV_IRQHandler+0x266>
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	089b      	lsrs	r3, r3, #2
 800a73a:	f003 0301 	and.w	r3, r3, #1
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d103      	bne.n	800a74a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 fed8 	bl	800b4f8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a748:	e039      	b.n	800a7be <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	089b      	lsrs	r3, r3, #2
 800a74e:	f003 0301 	and.w	r3, r3, #1
 800a752:	2b00      	cmp	r3, #0
 800a754:	d033      	beq.n	800a7be <HAL_I2C_EV_IRQHandler+0x2da>
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	0a5b      	lsrs	r3, r3, #9
 800a75a:	f003 0301 	and.w	r3, r3, #1
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d02d      	beq.n	800a7be <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 ff06 	bl	800b574 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a768:	e029      	b.n	800a7be <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	099b      	lsrs	r3, r3, #6
 800a76e:	f003 0301 	and.w	r3, r3, #1
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00f      	beq.n	800a796 <HAL_I2C_EV_IRQHandler+0x2b2>
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	0a9b      	lsrs	r3, r3, #10
 800a77a:	f003 0301 	and.w	r3, r3, #1
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d009      	beq.n	800a796 <HAL_I2C_EV_IRQHandler+0x2b2>
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	089b      	lsrs	r3, r3, #2
 800a786:	f003 0301 	and.w	r3, r3, #1
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d103      	bne.n	800a796 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 ff11 	bl	800b5b6 <I2C_SlaveReceive_RXNE>
 800a794:	e014      	b.n	800a7c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a796:	69fb      	ldr	r3, [r7, #28]
 800a798:	089b      	lsrs	r3, r3, #2
 800a79a:	f003 0301 	and.w	r3, r3, #1
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d00e      	beq.n	800a7c0 <HAL_I2C_EV_IRQHandler+0x2dc>
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	0a5b      	lsrs	r3, r3, #9
 800a7a6:	f003 0301 	and.w	r3, r3, #1
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d008      	beq.n	800a7c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 ff40 	bl	800b634 <I2C_SlaveReceive_BTF>
 800a7b4:	e004      	b.n	800a7c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800a7b6:	bf00      	nop
 800a7b8:	e002      	b.n	800a7c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a7ba:	bf00      	nop
 800a7bc:	e000      	b.n	800a7c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a7be:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800a7c0:	3720      	adds	r7, #32
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b08a      	sub	sp, #40	; 0x28
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	695b      	ldr	r3, [r3, #20]
 800a7d4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a7e8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a7ea:	6a3b      	ldr	r3, [r7, #32]
 800a7ec:	0a1b      	lsrs	r3, r3, #8
 800a7ee:	f003 0301 	and.w	r3, r3, #1
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d00e      	beq.n	800a814 <HAL_I2C_ER_IRQHandler+0x4e>
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	0a1b      	lsrs	r3, r3, #8
 800a7fa:	f003 0301 	and.w	r3, r3, #1
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d008      	beq.n	800a814 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800a802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a804:	f043 0301 	orr.w	r3, r3, #1
 800a808:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a812:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a814:	6a3b      	ldr	r3, [r7, #32]
 800a816:	0a5b      	lsrs	r3, r3, #9
 800a818:	f003 0301 	and.w	r3, r3, #1
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00e      	beq.n	800a83e <HAL_I2C_ER_IRQHandler+0x78>
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	0a1b      	lsrs	r3, r3, #8
 800a824:	f003 0301 	and.w	r3, r3, #1
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d008      	beq.n	800a83e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800a82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82e:	f043 0302 	orr.w	r3, r3, #2
 800a832:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800a83c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a83e:	6a3b      	ldr	r3, [r7, #32]
 800a840:	0a9b      	lsrs	r3, r3, #10
 800a842:	f003 0301 	and.w	r3, r3, #1
 800a846:	2b00      	cmp	r3, #0
 800a848:	d03f      	beq.n	800a8ca <HAL_I2C_ER_IRQHandler+0x104>
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	0a1b      	lsrs	r3, r3, #8
 800a84e:	f003 0301 	and.w	r3, r3, #1
 800a852:	2b00      	cmp	r3, #0
 800a854:	d039      	beq.n	800a8ca <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800a856:	7efb      	ldrb	r3, [r7, #27]
 800a858:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a85e:	b29b      	uxth	r3, r3
 800a860:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a868:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a86e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800a870:	7ebb      	ldrb	r3, [r7, #26]
 800a872:	2b20      	cmp	r3, #32
 800a874:	d112      	bne.n	800a89c <HAL_I2C_ER_IRQHandler+0xd6>
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d10f      	bne.n	800a89c <HAL_I2C_ER_IRQHandler+0xd6>
 800a87c:	7cfb      	ldrb	r3, [r7, #19]
 800a87e:	2b21      	cmp	r3, #33	; 0x21
 800a880:	d008      	beq.n	800a894 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800a882:	7cfb      	ldrb	r3, [r7, #19]
 800a884:	2b29      	cmp	r3, #41	; 0x29
 800a886:	d005      	beq.n	800a894 <HAL_I2C_ER_IRQHandler+0xce>
 800a888:	7cfb      	ldrb	r3, [r7, #19]
 800a88a:	2b28      	cmp	r3, #40	; 0x28
 800a88c:	d106      	bne.n	800a89c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2b21      	cmp	r3, #33	; 0x21
 800a892:	d103      	bne.n	800a89c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f001 f86d 	bl	800b974 <I2C_Slave_AF>
 800a89a:	e016      	b.n	800a8ca <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a8a4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800a8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a8:	f043 0304 	orr.w	r3, r3, #4
 800a8ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a8ae:	7efb      	ldrb	r3, [r7, #27]
 800a8b0:	2b10      	cmp	r3, #16
 800a8b2:	d002      	beq.n	800a8ba <HAL_I2C_ER_IRQHandler+0xf4>
 800a8b4:	7efb      	ldrb	r3, [r7, #27]
 800a8b6:	2b40      	cmp	r3, #64	; 0x40
 800a8b8:	d107      	bne.n	800a8ca <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8c8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a8ca:	6a3b      	ldr	r3, [r7, #32]
 800a8cc:	0adb      	lsrs	r3, r3, #11
 800a8ce:	f003 0301 	and.w	r3, r3, #1
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00e      	beq.n	800a8f4 <HAL_I2C_ER_IRQHandler+0x12e>
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	0a1b      	lsrs	r3, r3, #8
 800a8da:	f003 0301 	and.w	r3, r3, #1
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d008      	beq.n	800a8f4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800a8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e4:	f043 0308 	orr.w	r3, r3, #8
 800a8e8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800a8f2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800a8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d008      	beq.n	800a90c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a900:	431a      	orrs	r2, r3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f001 f8a6 	bl	800ba58 <I2C_ITError>
  }
}
 800a90c:	bf00      	nop
 800a90e:	3728      	adds	r7, #40	; 0x28
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a91c:	bf00      	nop
 800a91e:	370c      	adds	r7, #12
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a930:	bf00      	nop
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a944:	bf00      	nop
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	460b      	mov	r3, r1
 800a95a:	70fb      	strb	r3, [r7, #3]
 800a95c:	4613      	mov	r3, r2
 800a95e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a960:	bf00      	nop
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800a974:	bf00      	nop
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a988:	bf00      	nop
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9a2:	b2db      	uxtb	r3, r3
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a9de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d153      	bne.n	800aa96 <I2C_MasterTransmit_TXE+0xce>
 800a9ee:	7bfb      	ldrb	r3, [r7, #15]
 800a9f0:	2b21      	cmp	r3, #33	; 0x21
 800a9f2:	d150      	bne.n	800aa96 <I2C_MasterTransmit_TXE+0xce>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	2b08      	cmp	r3, #8
 800a9f8:	d01e      	beq.n	800aa38 <I2C_MasterTransmit_TXE+0x70>
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	2b20      	cmp	r3, #32
 800a9fe:	d01b      	beq.n	800aa38 <I2C_MasterTransmit_TXE+0x70>
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800aa06:	d017      	beq.n	800aa38 <I2C_MasterTransmit_TXE+0x70>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	685a      	ldr	r2, [r3, #4]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800aa16:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2211      	movs	r2, #17
 800aa1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2220      	movs	r2, #32
 800aa2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800aa36:	e062      	b.n	800aafe <I2C_MasterTransmit_TXE+0x136>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	685a      	ldr	r2, [r3, #4]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800aa46:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa56:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2220      	movs	r2, #32
 800aa62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	2b40      	cmp	r3, #64	; 0x40
 800aa70:	d108      	bne.n	800aa84 <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800aa82:	e03c      	b.n	800aafe <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MemTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800aa94:	e033      	b.n	800aafe <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MasterTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800aa96:	7bfb      	ldrb	r3, [r7, #15]
 800aa98:	2b21      	cmp	r3, #33	; 0x21
 800aa9a:	d005      	beq.n	800aaa8 <I2C_MasterTransmit_TXE+0xe0>
 800aa9c:	7bbb      	ldrb	r3, [r7, #14]
 800aa9e:	2b40      	cmp	r3, #64	; 0x40
 800aaa0:	d12d      	bne.n	800aafe <I2C_MasterTransmit_TXE+0x136>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800aaa2:	7bfb      	ldrb	r3, [r7, #15]
 800aaa4:	2b22      	cmp	r3, #34	; 0x22
 800aaa6:	d12a      	bne.n	800aafe <I2C_MasterTransmit_TXE+0x136>
  {
    if (hi2c->XferCount == 0U)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d108      	bne.n	800aac4 <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	685a      	ldr	r2, [r3, #4]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aac0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800aac2:	e01c      	b.n	800aafe <I2C_MasterTransmit_TXE+0x136>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	2b40      	cmp	r3, #64	; 0x40
 800aace:	d103      	bne.n	800aad8 <I2C_MasterTransmit_TXE+0x110>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 f891 	bl	800abf8 <I2C_MemoryTransmit_TXE_BTF>
}
 800aad6:	e012      	b.n	800aafe <I2C_MasterTransmit_TXE+0x136>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aadc:	781a      	ldrb	r2, [r3, #0]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae8:	1c5a      	adds	r2, r3, #1
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800aafc:	e7ff      	b.n	800aafe <I2C_MasterTransmit_TXE+0x136>
 800aafe:	bf00      	nop
 800ab00:	3710      	adds	r7, #16
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}

0800ab06 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800ab06:	b580      	push	{r7, lr}
 800ab08:	b084      	sub	sp, #16
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab12:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	2b21      	cmp	r3, #33	; 0x21
 800ab1e:	d167      	bne.n	800abf0 <I2C_MasterTransmit_BTF+0xea>
  {
    if (hi2c->XferCount != 0U)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d012      	beq.n	800ab50 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2e:	781a      	ldrb	r2, [r3, #0]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab3a:	1c5a      	adds	r2, r3, #1
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	3b01      	subs	r3, #1
 800ab48:	b29a      	uxth	r2, r3
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800ab4e:	e04f      	b.n	800abf0 <I2C_MasterTransmit_BTF+0xea>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2b08      	cmp	r3, #8
 800ab54:	d01e      	beq.n	800ab94 <I2C_MasterTransmit_BTF+0x8e>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2b20      	cmp	r3, #32
 800ab5a:	d01b      	beq.n	800ab94 <I2C_MasterTransmit_BTF+0x8e>
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ab62:	d017      	beq.n	800ab94 <I2C_MasterTransmit_BTF+0x8e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	685a      	ldr	r2, [r3, #4]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ab72:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2211      	movs	r2, #17
 800ab78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2220      	movs	r2, #32
 800ab86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->MasterTxCpltCallback(hi2c);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	4798      	blx	r3
}
 800ab92:	e02d      	b.n	800abf0 <I2C_MasterTransmit_BTF+0xea>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	685a      	ldr	r2, [r3, #4]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800aba2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	681a      	ldr	r2, [r3, #0]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abb2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2220      	movs	r2, #32
 800abbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	2b40      	cmp	r3, #64	; 0x40
 800abcc:	d108      	bne.n	800abe0 <I2C_MasterTransmit_BTF+0xda>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MemTxCpltCallback(hi2c);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	4798      	blx	r3
}
 800abde:	e007      	b.n	800abf0 <I2C_MasterTransmit_BTF+0xea>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MasterTxCpltCallback(hi2c);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	4798      	blx	r3
}
 800abf0:	bf00      	nop
 800abf2:	3710      	adds	r7, #16
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac06:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d11d      	bne.n	800ac4c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d10b      	bne.n	800ac30 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac1c:	b2da      	uxtb	r2, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac28:	1c9a      	adds	r2, r3, #2
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800ac2e:	e074      	b.n	800ad1a <I2C_MemoryTransmit_TXE_BTF+0x122>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	121b      	asrs	r3, r3, #8
 800ac38:	b2da      	uxtb	r2, r3
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac44:	1c5a      	adds	r2, r3, #1
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	651a      	str	r2, [r3, #80]	; 0x50
}
 800ac4a:	e066      	b.n	800ad1a <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 1U)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d10b      	bne.n	800ac6c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac58:	b2da      	uxtb	r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac64:	1c5a      	adds	r2, r3, #1
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	651a      	str	r2, [r3, #80]	; 0x50
}
 800ac6a:	e056      	b.n	800ad1a <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 2U)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac70:	2b02      	cmp	r3, #2
 800ac72:	d152      	bne.n	800ad1a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800ac74:	7bfb      	ldrb	r3, [r7, #15]
 800ac76:	2b22      	cmp	r3, #34	; 0x22
 800ac78:	d10d      	bne.n	800ac96 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac88:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac8e:	1c5a      	adds	r2, r3, #1
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	651a      	str	r2, [r3, #80]	; 0x50
}
 800ac94:	e041      	b.n	800ad1a <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d015      	beq.n	800accc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800aca0:	7bfb      	ldrb	r3, [r7, #15]
 800aca2:	2b21      	cmp	r3, #33	; 0x21
 800aca4:	d112      	bne.n	800accc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acaa:	781a      	ldrb	r2, [r3, #0]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb6:	1c5a      	adds	r2, r3, #1
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	3b01      	subs	r3, #1
 800acc4:	b29a      	uxth	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800acca:	e026      	b.n	800ad1a <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d121      	bne.n	800ad1a <I2C_MemoryTransmit_TXE_BTF+0x122>
 800acd6:	7bfb      	ldrb	r3, [r7, #15]
 800acd8:	2b21      	cmp	r3, #33	; 0x21
 800acda:	d11e      	bne.n	800ad1a <I2C_MemoryTransmit_TXE_BTF+0x122>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	685a      	ldr	r2, [r3, #4]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800acea:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800acfa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2220      	movs	r2, #32
 800ad06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->MemTxCpltCallback(hi2c);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	4798      	blx	r3
}
 800ad1a:	bf00      	nop
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b084      	sub	sp, #16
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	2b22      	cmp	r3, #34	; 0x22
 800ad34:	f040 80af 	bne.w	800ae96 <I2C_MasterReceive_RXNE+0x174>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2b03      	cmp	r3, #3
 800ad44:	d921      	bls.n	800ad8a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	691a      	ldr	r2, [r3, #16]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad50:	b2d2      	uxtb	r2, r2
 800ad52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad58:	1c5a      	adds	r2, r3, #1
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	3b01      	subs	r3, #1
 800ad66:	b29a      	uxth	r2, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	2b03      	cmp	r3, #3
 800ad74:	f040 808f 	bne.w	800ae96 <I2C_MasterReceive_RXNE+0x174>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	685a      	ldr	r2, [r3, #4]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad86:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800ad88:	e085      	b.n	800ae96 <I2C_MasterReceive_RXNE+0x174>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad8e:	2b02      	cmp	r3, #2
 800ad90:	d078      	beq.n	800ae84 <I2C_MasterReceive_RXNE+0x162>
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d002      	beq.n	800ad9e <I2C_MasterReceive_RXNE+0x7c>
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d172      	bne.n	800ae84 <I2C_MasterReceive_RXNE+0x162>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f001 f83a 	bl	800be18 <I2C_WaitOnSTOPRequestThroughIT>
 800ada4:	4603      	mov	r3, r0
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d144      	bne.n	800ae34 <I2C_MasterReceive_RXNE+0x112>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800adb8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	685a      	ldr	r2, [r3, #4]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800adc8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	691a      	ldr	r2, [r3, #16]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add4:	b2d2      	uxtb	r2, r2
 800add6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800addc:	1c5a      	adds	r2, r3, #1
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	3b01      	subs	r3, #1
 800adea:	b29a      	uxth	r2, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2220      	movs	r2, #32
 800adf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	2b40      	cmp	r3, #64	; 0x40
 800ae02:	d10b      	bne.n	800ae1c <I2C_MasterReceive_RXNE+0xfa>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MemRxCpltCallback(hi2c);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800ae1a:	e03c      	b.n	800ae96 <I2C_MasterReceive_RXNE+0x174>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2212      	movs	r2, #18
 800ae28:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MasterRxCpltCallback(hi2c);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800ae32:	e030      	b.n	800ae96 <I2C_MasterReceive_RXNE+0x174>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	685a      	ldr	r2, [r3, #4]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ae42:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	691a      	ldr	r2, [r3, #16]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4e:	b2d2      	uxtb	r2, r2
 800ae50:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae56:	1c5a      	adds	r2, r3, #1
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	3b01      	subs	r3, #1
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2220      	movs	r2, #32
 800ae6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCallback(hi2c);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800ae82:	e008      	b.n	800ae96 <I2C_MasterReceive_RXNE+0x174>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	685a      	ldr	r2, [r3, #4]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae92:	605a      	str	r2, [r3, #4]
}
 800ae94:	e7ff      	b.n	800ae96 <I2C_MasterReceive_RXNE+0x174>
 800ae96:	bf00      	nop
 800ae98:	3710      	adds	r7, #16
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b084      	sub	sp, #16
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeaa:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	2b04      	cmp	r3, #4
 800aeb4:	d11b      	bne.n	800aeee <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	685a      	ldr	r2, [r3, #4]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aec4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	691a      	ldr	r2, [r3, #16]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed0:	b2d2      	uxtb	r2, r2
 800aed2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed8:	1c5a      	adds	r2, r3, #1
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	3b01      	subs	r3, #1
 800aee6:	b29a      	uxth	r2, r3
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800aeec:	e0bf      	b.n	800b06e <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 3U)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	2b03      	cmp	r3, #3
 800aef6:	d129      	bne.n	800af4c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	685a      	ldr	r2, [r3, #4]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af06:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2b04      	cmp	r3, #4
 800af0c:	d00a      	beq.n	800af24 <I2C_MasterReceive_BTF+0x86>
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2b02      	cmp	r3, #2
 800af12:	d007      	beq.n	800af24 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af22:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	691a      	ldr	r2, [r3, #16]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2e:	b2d2      	uxtb	r2, r2
 800af30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af36:	1c5a      	adds	r2, r3, #1
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af40:	b29b      	uxth	r3, r3
 800af42:	3b01      	subs	r3, #1
 800af44:	b29a      	uxth	r2, r3
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800af4a:	e090      	b.n	800b06e <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 2U)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af50:	b29b      	uxth	r3, r3
 800af52:	2b02      	cmp	r3, #2
 800af54:	d178      	bne.n	800b048 <I2C_MasterReceive_BTF+0x1aa>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d002      	beq.n	800af62 <I2C_MasterReceive_BTF+0xc4>
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2b10      	cmp	r3, #16
 800af60:	d108      	bne.n	800af74 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	681a      	ldr	r2, [r3, #0]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af70:	601a      	str	r2, [r3, #0]
 800af72:	e019      	b.n	800afa8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2b04      	cmp	r3, #4
 800af78:	d002      	beq.n	800af80 <I2C_MasterReceive_BTF+0xe2>
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	d108      	bne.n	800af92 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800af8e:	601a      	str	r2, [r3, #0]
 800af90:	e00a      	b.n	800afa8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2b10      	cmp	r3, #16
 800af96:	d007      	beq.n	800afa8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afa6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	691a      	ldr	r2, [r3, #16]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb2:	b2d2      	uxtb	r2, r2
 800afb4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afba:	1c5a      	adds	r2, r3, #1
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	3b01      	subs	r3, #1
 800afc8:	b29a      	uxth	r2, r3
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	691a      	ldr	r2, [r3, #16]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd8:	b2d2      	uxtb	r2, r2
 800afda:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe0:	1c5a      	adds	r2, r3, #1
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afea:	b29b      	uxth	r3, r3
 800afec:	3b01      	subs	r3, #1
 800afee:	b29a      	uxth	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	685a      	ldr	r2, [r3, #4]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b002:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2220      	movs	r2, #32
 800b008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b012:	b2db      	uxtb	r3, r3
 800b014:	2b40      	cmp	r3, #64	; 0x40
 800b016:	d10b      	bne.n	800b030 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MemRxCpltCallback(hi2c);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	4798      	blx	r3
}
 800b02e:	e01e      	b.n	800b06e <I2C_MasterReceive_BTF+0x1d0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2212      	movs	r2, #18
 800b03c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	4798      	blx	r3
}
 800b046:	e012      	b.n	800b06e <I2C_MasterReceive_BTF+0x1d0>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	691a      	ldr	r2, [r3, #16]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b052:	b2d2      	uxtb	r2, r2
 800b054:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b05a:	1c5a      	adds	r2, r3, #1
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b064:	b29b      	uxth	r3, r3
 800b066:	3b01      	subs	r3, #1
 800b068:	b29a      	uxth	r2, r3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800b06e:	bf00      	nop
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}

0800b076 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800b076:	b480      	push	{r7}
 800b078:	b083      	sub	sp, #12
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b084:	b2db      	uxtb	r3, r3
 800b086:	2b40      	cmp	r3, #64	; 0x40
 800b088:	d117      	bne.n	800b0ba <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d109      	bne.n	800b0a6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b096:	b2db      	uxtb	r3, r3
 800b098:	461a      	mov	r2, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b0a2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800b0a4:	e067      	b.n	800b176 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	f043 0301 	orr.w	r3, r3, #1
 800b0b0:	b2da      	uxtb	r2, r3
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	611a      	str	r2, [r3, #16]
}
 800b0b8:	e05d      	b.n	800b176 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	691b      	ldr	r3, [r3, #16]
 800b0be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0c2:	d133      	bne.n	800b12c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	2b21      	cmp	r3, #33	; 0x21
 800b0ce:	d109      	bne.n	800b0e4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b0e0:	611a      	str	r2, [r3, #16]
 800b0e2:	e008      	b.n	800b0f6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	f043 0301 	orr.w	r3, r3, #1
 800b0ee:	b2da      	uxtb	r2, r3
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d004      	beq.n	800b108 <I2C_Master_SB+0x92>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b104:	2b00      	cmp	r3, #0
 800b106:	d108      	bne.n	800b11a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d032      	beq.n	800b176 <I2C_Master_SB+0x100>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b116:	2b00      	cmp	r3, #0
 800b118:	d02d      	beq.n	800b176 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	685a      	ldr	r2, [r3, #4]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b128:	605a      	str	r2, [r3, #4]
}
 800b12a:	e024      	b.n	800b176 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b130:	2b00      	cmp	r3, #0
 800b132:	d10e      	bne.n	800b152 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b138:	b29b      	uxth	r3, r3
 800b13a:	11db      	asrs	r3, r3, #7
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	f003 0306 	and.w	r3, r3, #6
 800b142:	b2db      	uxtb	r3, r3
 800b144:	f063 030f 	orn	r3, r3, #15
 800b148:	b2da      	uxtb	r2, r3
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	611a      	str	r2, [r3, #16]
}
 800b150:	e011      	b.n	800b176 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b156:	2b01      	cmp	r3, #1
 800b158:	d10d      	bne.n	800b176 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b15e:	b29b      	uxth	r3, r3
 800b160:	11db      	asrs	r3, r3, #7
 800b162:	b2db      	uxtb	r3, r3
 800b164:	f003 0306 	and.w	r3, r3, #6
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	f063 030e 	orn	r3, r3, #14
 800b16e:	b2da      	uxtb	r2, r3
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	611a      	str	r2, [r3, #16]
}
 800b176:	bf00      	nop
 800b178:	370c      	adds	r7, #12
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr

0800b182 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800b182:	b480      	push	{r7}
 800b184:	b083      	sub	sp, #12
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b18e:	b2da      	uxtb	r2, r3
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d004      	beq.n	800b1a8 <I2C_Master_ADD10+0x26>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d108      	bne.n	800b1ba <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d00c      	beq.n	800b1ca <I2C_Master_ADD10+0x48>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d007      	beq.n	800b1ca <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	685a      	ldr	r2, [r3, #4]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b1c8:	605a      	str	r2, [r3, #4]
  }
}
 800b1ca:	bf00      	nop
 800b1cc:	370c      	adds	r7, #12
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr

0800b1d6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800b1d6:	b480      	push	{r7}
 800b1d8:	b091      	sub	sp, #68	; 0x44
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b1e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ec:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	2b22      	cmp	r3, #34	; 0x22
 800b1fe:	f040 8169 	bne.w	800b4d4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b206:	2b00      	cmp	r3, #0
 800b208:	d10f      	bne.n	800b22a <I2C_Master_ADDR+0x54>
 800b20a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b20e:	2b40      	cmp	r3, #64	; 0x40
 800b210:	d10b      	bne.n	800b22a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b212:	2300      	movs	r3, #0
 800b214:	633b      	str	r3, [r7, #48]	; 0x30
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	695b      	ldr	r3, [r3, #20]
 800b21c:	633b      	str	r3, [r7, #48]	; 0x30
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	699b      	ldr	r3, [r3, #24]
 800b224:	633b      	str	r3, [r7, #48]	; 0x30
 800b226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b228:	e160      	b.n	800b4ec <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d11d      	bne.n	800b26e <I2C_Master_ADDR+0x98>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	691b      	ldr	r3, [r3, #16]
 800b236:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b23a:	d118      	bne.n	800b26e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b23c:	2300      	movs	r3, #0
 800b23e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	695b      	ldr	r3, [r3, #20]
 800b246:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	699b      	ldr	r3, [r3, #24]
 800b24e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b250:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b260:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b266:	1c5a      	adds	r2, r3, #1
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	651a      	str	r2, [r3, #80]	; 0x50
 800b26c:	e13e      	b.n	800b4ec <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b272:	b29b      	uxth	r3, r3
 800b274:	2b00      	cmp	r3, #0
 800b276:	d113      	bne.n	800b2a0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b278:	2300      	movs	r3, #0
 800b27a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	695b      	ldr	r3, [r3, #20]
 800b282:	62bb      	str	r3, [r7, #40]	; 0x28
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	699b      	ldr	r3, [r3, #24]
 800b28a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b28c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	681a      	ldr	r2, [r3, #0]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b29c:	601a      	str	r2, [r3, #0]
 800b29e:	e115      	b.n	800b4cc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	f040 808a 	bne.w	800b3c0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800b2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b2b2:	d137      	bne.n	800b324 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2c2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2d2:	d113      	bne.n	800b2fc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2e2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	627b      	str	r3, [r7, #36]	; 0x24
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	695b      	ldr	r3, [r3, #20]
 800b2ee:	627b      	str	r3, [r7, #36]	; 0x24
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	699b      	ldr	r3, [r3, #24]
 800b2f6:	627b      	str	r3, [r7, #36]	; 0x24
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fa:	e0e7      	b.n	800b4cc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	623b      	str	r3, [r7, #32]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	695b      	ldr	r3, [r3, #20]
 800b306:	623b      	str	r3, [r7, #32]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	699b      	ldr	r3, [r3, #24]
 800b30e:	623b      	str	r3, [r7, #32]
 800b310:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b320:	601a      	str	r2, [r3, #0]
 800b322:	e0d3      	b.n	800b4cc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800b324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b326:	2b08      	cmp	r3, #8
 800b328:	d02e      	beq.n	800b388 <I2C_Master_ADDR+0x1b2>
 800b32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32c:	2b20      	cmp	r3, #32
 800b32e:	d02b      	beq.n	800b388 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800b330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b332:	2b12      	cmp	r3, #18
 800b334:	d102      	bne.n	800b33c <I2C_Master_ADDR+0x166>
 800b336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d125      	bne.n	800b388 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33e:	2b04      	cmp	r3, #4
 800b340:	d00e      	beq.n	800b360 <I2C_Master_ADDR+0x18a>
 800b342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b344:	2b02      	cmp	r3, #2
 800b346:	d00b      	beq.n	800b360 <I2C_Master_ADDR+0x18a>
 800b348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b34a:	2b10      	cmp	r3, #16
 800b34c:	d008      	beq.n	800b360 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b35c:	601a      	str	r2, [r3, #0]
 800b35e:	e007      	b.n	800b370 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b36e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b370:	2300      	movs	r3, #0
 800b372:	61fb      	str	r3, [r7, #28]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	695b      	ldr	r3, [r3, #20]
 800b37a:	61fb      	str	r3, [r7, #28]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	699b      	ldr	r3, [r3, #24]
 800b382:	61fb      	str	r3, [r7, #28]
 800b384:	69fb      	ldr	r3, [r7, #28]
 800b386:	e0a1      	b.n	800b4cc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b396:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b398:	2300      	movs	r3, #0
 800b39a:	61bb      	str	r3, [r7, #24]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	695b      	ldr	r3, [r3, #20]
 800b3a2:	61bb      	str	r3, [r7, #24]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	699b      	ldr	r3, [r3, #24]
 800b3aa:	61bb      	str	r3, [r7, #24]
 800b3ac:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3bc:	601a      	str	r2, [r3, #0]
 800b3be:	e085      	b.n	800b4cc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	2b02      	cmp	r3, #2
 800b3c8:	d14d      	bne.n	800b466 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3cc:	2b04      	cmp	r3, #4
 800b3ce:	d016      	beq.n	800b3fe <I2C_Master_ADDR+0x228>
 800b3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d2:	2b02      	cmp	r3, #2
 800b3d4:	d013      	beq.n	800b3fe <I2C_Master_ADDR+0x228>
 800b3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d8:	2b10      	cmp	r3, #16
 800b3da:	d010      	beq.n	800b3fe <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b3ea:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b3fa:	601a      	str	r2, [r3, #0]
 800b3fc:	e007      	b.n	800b40e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b40c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b41c:	d117      	bne.n	800b44e <I2C_Master_ADDR+0x278>
 800b41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b420:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b424:	d00b      	beq.n	800b43e <I2C_Master_ADDR+0x268>
 800b426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d008      	beq.n	800b43e <I2C_Master_ADDR+0x268>
 800b42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42e:	2b08      	cmp	r3, #8
 800b430:	d005      	beq.n	800b43e <I2C_Master_ADDR+0x268>
 800b432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b434:	2b10      	cmp	r3, #16
 800b436:	d002      	beq.n	800b43e <I2C_Master_ADDR+0x268>
 800b438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43a:	2b20      	cmp	r3, #32
 800b43c:	d107      	bne.n	800b44e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	685a      	ldr	r2, [r3, #4]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b44c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b44e:	2300      	movs	r3, #0
 800b450:	617b      	str	r3, [r7, #20]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	695b      	ldr	r3, [r3, #20]
 800b458:	617b      	str	r3, [r7, #20]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	699b      	ldr	r3, [r3, #24]
 800b460:	617b      	str	r3, [r7, #20]
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	e032      	b.n	800b4cc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b474:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	685b      	ldr	r3, [r3, #4]
 800b47c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b484:	d117      	bne.n	800b4b6 <I2C_Master_ADDR+0x2e0>
 800b486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b488:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b48c:	d00b      	beq.n	800b4a6 <I2C_Master_ADDR+0x2d0>
 800b48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b490:	2b01      	cmp	r3, #1
 800b492:	d008      	beq.n	800b4a6 <I2C_Master_ADDR+0x2d0>
 800b494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b496:	2b08      	cmp	r3, #8
 800b498:	d005      	beq.n	800b4a6 <I2C_Master_ADDR+0x2d0>
 800b49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b49c:	2b10      	cmp	r3, #16
 800b49e:	d002      	beq.n	800b4a6 <I2C_Master_ADDR+0x2d0>
 800b4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a2:	2b20      	cmp	r3, #32
 800b4a4:	d107      	bne.n	800b4b6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	685a      	ldr	r2, [r3, #4]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b4b4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	613b      	str	r3, [r7, #16]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	695b      	ldr	r3, [r3, #20]
 800b4c0:	613b      	str	r3, [r7, #16]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	699b      	ldr	r3, [r3, #24]
 800b4c8:	613b      	str	r3, [r7, #16]
 800b4ca:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800b4d2:	e00b      	b.n	800b4ec <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	60fb      	str	r3, [r7, #12]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	695b      	ldr	r3, [r3, #20]
 800b4de:	60fb      	str	r3, [r7, #12]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	699b      	ldr	r3, [r3, #24]
 800b4e6:	60fb      	str	r3, [r7, #12]
 800b4e8:	68fb      	ldr	r3, [r7, #12]
}
 800b4ea:	e7ff      	b.n	800b4ec <I2C_Master_ADDR+0x316>
 800b4ec:	bf00      	nop
 800b4ee:	3744      	adds	r7, #68	; 0x44
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b506:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d02c      	beq.n	800b56c <I2C_SlaveTransmit_TXE+0x74>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b516:	781a      	ldrb	r2, [r3, #0]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b522:	1c5a      	adds	r2, r3, #1
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	3b01      	subs	r3, #1
 800b530:	b29a      	uxth	r2, r3
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d115      	bne.n	800b56c <I2C_SlaveTransmit_TXE+0x74>
 800b540:	7bfb      	ldrb	r3, [r7, #15]
 800b542:	2b29      	cmp	r3, #41	; 0x29
 800b544:	d112      	bne.n	800b56c <I2C_SlaveTransmit_TXE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	685a      	ldr	r2, [r3, #4]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b554:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2221      	movs	r2, #33	; 0x21
 800b55a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2228      	movs	r2, #40	; 0x28
 800b560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	4798      	blx	r3
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b56c:	bf00      	nop
 800b56e:	3710      	adds	r7, #16
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b580:	b29b      	uxth	r3, r3
 800b582:	2b00      	cmp	r3, #0
 800b584:	d011      	beq.n	800b5aa <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58a:	781a      	ldrb	r2, [r3, #0]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b596:	1c5a      	adds	r2, r3, #1
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	3b01      	subs	r3, #1
 800b5a4:	b29a      	uxth	r2, r3
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800b5aa:	bf00      	nop
 800b5ac:	370c      	adds	r7, #12
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr

0800b5b6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b084      	sub	sp, #16
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5c4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d02d      	beq.n	800b62c <I2C_SlaveReceive_RXNE+0x76>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	691a      	ldr	r2, [r3, #16]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5da:	b2d2      	uxtb	r2, r2
 800b5dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e2:	1c5a      	adds	r2, r3, #1
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	3b01      	subs	r3, #1
 800b5f0:	b29a      	uxth	r2, r3
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d115      	bne.n	800b62c <I2C_SlaveReceive_RXNE+0x76>
 800b600:	7bfb      	ldrb	r3, [r7, #15]
 800b602:	2b2a      	cmp	r3, #42	; 0x2a
 800b604:	d112      	bne.n	800b62c <I2C_SlaveReceive_RXNE+0x76>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b614:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2222      	movs	r2, #34	; 0x22
 800b61a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2228      	movs	r2, #40	; 0x28
 800b620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	4798      	blx	r3
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b62c:	bf00      	nop
 800b62e:	3710      	adds	r7, #16
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800b634:	b480      	push	{r7}
 800b636:	b083      	sub	sp, #12
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b640:	b29b      	uxth	r3, r3
 800b642:	2b00      	cmp	r3, #0
 800b644:	d012      	beq.n	800b66c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	691a      	ldr	r2, [r3, #16]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b650:	b2d2      	uxtb	r2, r2
 800b652:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b658:	1c5a      	adds	r2, r3, #1
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b662:	b29b      	uxth	r3, r3
 800b664:	3b01      	subs	r3, #1
 800b666:	b29a      	uxth	r2, r3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800b66c:	bf00      	nop
 800b66e:	370c      	adds	r7, #12
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr

0800b678 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800b682:	2300      	movs	r3, #0
 800b684:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b692:	2b28      	cmp	r3, #40	; 0x28
 800b694:	d127      	bne.n	800b6e6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	685a      	ldr	r2, [r3, #4]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b6a4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	089b      	lsrs	r3, r3, #2
 800b6aa:	f003 0301 	and.w	r3, r3, #1
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d101      	bne.n	800b6b6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	09db      	lsrs	r3, r3, #7
 800b6ba:	f003 0301 	and.w	r3, r3, #1
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d103      	bne.n	800b6ca <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	68db      	ldr	r3, [r3, #12]
 800b6c6:	81bb      	strh	r3, [r7, #12]
 800b6c8:	e002      	b.n	800b6d0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	699b      	ldr	r3, [r3, #24]
 800b6ce:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6dc:	89ba      	ldrh	r2, [r7, #12]
 800b6de:	7bf9      	ldrb	r1, [r7, #15]
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	4798      	blx	r3
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b6e4:	e00e      	b.n	800b704 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	60bb      	str	r3, [r7, #8]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	695b      	ldr	r3, [r3, #20]
 800b6f0:	60bb      	str	r3, [r7, #8]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	699b      	ldr	r3, [r3, #24]
 800b6f8:	60bb      	str	r3, [r7, #8]
 800b6fa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800b704:	bf00      	nop
 800b706:	3710      	adds	r7, #16
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b71a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	685a      	ldr	r2, [r3, #4]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b72a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800b72c:	2300      	movs	r3, #0
 800b72e:	60bb      	str	r3, [r7, #8]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	695b      	ldr	r3, [r3, #20]
 800b736:	60bb      	str	r3, [r7, #8]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f042 0201 	orr.w	r2, r2, #1
 800b746:	601a      	str	r2, [r3, #0]
 800b748:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b758:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b768:	d172      	bne.n	800b850 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b76a:	7bfb      	ldrb	r3, [r7, #15]
 800b76c:	2b22      	cmp	r3, #34	; 0x22
 800b76e:	d002      	beq.n	800b776 <I2C_Slave_STOPF+0x6a>
 800b770:	7bfb      	ldrb	r3, [r7, #15]
 800b772:	2b2a      	cmp	r3, #42	; 0x2a
 800b774:	d135      	bne.n	800b7e2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	b29a      	uxth	r2, r3
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b788:	b29b      	uxth	r3, r3
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d005      	beq.n	800b79a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b792:	f043 0204 	orr.w	r2, r3, #4
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	685a      	ldr	r2, [r3, #4]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b7a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f7fd fe52 	bl	8009458 <HAL_DMA_GetState>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d049      	beq.n	800b84e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7be:	4a6b      	ldr	r2, [pc, #428]	; (800b96c <I2C_Slave_STOPF+0x260>)
 800b7c0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7fd fc9a 	bl	8009100 <HAL_DMA_Abort_IT>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d03d      	beq.n	800b84e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b7dc:	4610      	mov	r0, r2
 800b7de:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b7e0:	e035      	b.n	800b84e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	b29a      	uxth	r2, r3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d005      	beq.n	800b806 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7fe:	f043 0204 	orr.w	r2, r3, #4
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b814:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7fd fe1c 	bl	8009458 <HAL_DMA_GetState>
 800b820:	4603      	mov	r3, r0
 800b822:	2b01      	cmp	r3, #1
 800b824:	d014      	beq.n	800b850 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b82a:	4a50      	ldr	r2, [pc, #320]	; (800b96c <I2C_Slave_STOPF+0x260>)
 800b82c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b832:	4618      	mov	r0, r3
 800b834:	f7fd fc64 	bl	8009100 <HAL_DMA_Abort_IT>
 800b838:	4603      	mov	r3, r0
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d008      	beq.n	800b850 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b848:	4610      	mov	r0, r2
 800b84a:	4798      	blx	r3
 800b84c:	e000      	b.n	800b850 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b84e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b854:	b29b      	uxth	r3, r3
 800b856:	2b00      	cmp	r3, #0
 800b858:	d03e      	beq.n	800b8d8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	695b      	ldr	r3, [r3, #20]
 800b860:	f003 0304 	and.w	r3, r3, #4
 800b864:	2b04      	cmp	r3, #4
 800b866:	d112      	bne.n	800b88e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	691a      	ldr	r2, [r3, #16]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b872:	b2d2      	uxtb	r2, r2
 800b874:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b87a:	1c5a      	adds	r2, r3, #1
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b884:	b29b      	uxth	r3, r3
 800b886:	3b01      	subs	r3, #1
 800b888:	b29a      	uxth	r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	695b      	ldr	r3, [r3, #20]
 800b894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b898:	2b40      	cmp	r3, #64	; 0x40
 800b89a:	d112      	bne.n	800b8c2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	691a      	ldr	r2, [r3, #16]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a6:	b2d2      	uxtb	r2, r2
 800b8a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ae:	1c5a      	adds	r2, r3, #1
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	b29a      	uxth	r2, r3
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d005      	beq.n	800b8d8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8d0:	f043 0204 	orr.w	r2, r3, #4
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d003      	beq.n	800b8e8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 f8b9 	bl	800ba58 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800b8e6:	e03c      	b.n	800b962 <I2C_Slave_STOPF+0x256>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b8e8:	7bfb      	ldrb	r3, [r7, #15]
 800b8ea:	2b2a      	cmp	r3, #42	; 0x2a
 800b8ec:	d10a      	bne.n	800b904 <I2C_Slave_STOPF+0x1f8>
      hi2c->PreviousState = I2C_STATE_NONE;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2228      	movs	r2, #40	; 0x28
 800b8f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	2b28      	cmp	r3, #40	; 0x28
 800b90e:	d112      	bne.n	800b936 <I2C_Slave_STOPF+0x22a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4a17      	ldr	r2, [pc, #92]	; (800b970 <I2C_Slave_STOPF+0x264>)
 800b914:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2220      	movs	r2, #32
 800b920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2200      	movs	r2, #0
 800b928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ListenCpltCallback(hi2c);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	4798      	blx	r3
}
 800b934:	e015      	b.n	800b962 <I2C_Slave_STOPF+0x256>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b93a:	2b22      	cmp	r3, #34	; 0x22
 800b93c:	d002      	beq.n	800b944 <I2C_Slave_STOPF+0x238>
 800b93e:	7bfb      	ldrb	r3, [r7, #15]
 800b940:	2b22      	cmp	r3, #34	; 0x22
 800b942:	d10e      	bne.n	800b962 <I2C_Slave_STOPF+0x256>
        hi2c->PreviousState = I2C_STATE_NONE;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2220      	movs	r2, #32
 800b94e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->SlaveRxCpltCallback(hi2c);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	4798      	blx	r3
}
 800b962:	bf00      	nop
 800b964:	3710      	adds	r7, #16
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	bf00      	nop
 800b96c:	0800bcc5 	.word	0x0800bcc5
 800b970:	ffff0000 	.word	0xffff0000

0800b974 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b982:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b988:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	2b08      	cmp	r3, #8
 800b98e:	d002      	beq.n	800b996 <I2C_Slave_AF+0x22>
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	2b20      	cmp	r3, #32
 800b994:	d12a      	bne.n	800b9ec <I2C_Slave_AF+0x78>
 800b996:	7bfb      	ldrb	r3, [r7, #15]
 800b998:	2b28      	cmp	r3, #40	; 0x28
 800b99a:	d127      	bne.n	800b9ec <I2C_Slave_AF+0x78>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4a2d      	ldr	r2, [pc, #180]	; (800ba54 <I2C_Slave_AF+0xe0>)
 800b9a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	685a      	ldr	r2, [r3, #4]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b9b0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b9ba:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9ca:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2220      	movs	r2, #32
 800b9d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	4798      	blx	r3
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800b9ea:	e02f      	b.n	800ba4c <I2C_Slave_AF+0xd8>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800b9ec:	7bfb      	ldrb	r3, [r7, #15]
 800b9ee:	2b21      	cmp	r3, #33	; 0x21
 800b9f0:	d127      	bne.n	800ba42 <I2C_Slave_AF+0xce>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	4a17      	ldr	r2, [pc, #92]	; (800ba54 <I2C_Slave_AF+0xe0>)
 800b9f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2221      	movs	r2, #33	; 0x21
 800b9fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2220      	movs	r2, #32
 800ba02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	685a      	ldr	r2, [r3, #4]
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ba1c:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ba26:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba36:	601a      	str	r2, [r3, #0]
    hi2c->SlaveTxCpltCallback(hi2c);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	4798      	blx	r3
}
 800ba40:	e004      	b.n	800ba4c <I2C_Slave_AF+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ba4a:	615a      	str	r2, [r3, #20]
}
 800ba4c:	bf00      	nop
 800ba4e:	3710      	adds	r7, #16
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	ffff0000 	.word	0xffff0000

0800ba58 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba66:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ba6e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800ba70:	7bbb      	ldrb	r3, [r7, #14]
 800ba72:	2b10      	cmp	r3, #16
 800ba74:	d002      	beq.n	800ba7c <I2C_ITError+0x24>
 800ba76:	7bbb      	ldrb	r3, [r7, #14]
 800ba78:	2b40      	cmp	r3, #64	; 0x40
 800ba7a:	d10a      	bne.n	800ba92 <I2C_ITError+0x3a>
 800ba7c:	7bfb      	ldrb	r3, [r7, #15]
 800ba7e:	2b22      	cmp	r3, #34	; 0x22
 800ba80:	d107      	bne.n	800ba92 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ba90:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ba92:	7bfb      	ldrb	r3, [r7, #15]
 800ba94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ba98:	2b28      	cmp	r3, #40	; 0x28
 800ba9a:	d107      	bne.n	800baac <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2228      	movs	r2, #40	; 0x28
 800baa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800baaa:	e015      	b.n	800bad8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bab6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800baba:	d00a      	beq.n	800bad2 <I2C_ITError+0x7a>
 800babc:	7bfb      	ldrb	r3, [r7, #15]
 800babe:	2b60      	cmp	r3, #96	; 0x60
 800bac0:	d007      	beq.n	800bad2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2220      	movs	r2, #32
 800bac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2200      	movs	r2, #0
 800bace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bae6:	d162      	bne.n	800bbae <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	685a      	ldr	r2, [r3, #4]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800baf6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bafc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d020      	beq.n	800bb48 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb0a:	4a6c      	ldr	r2, [pc, #432]	; (800bcbc <I2C_ITError+0x264>)
 800bb0c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7fd faf4 	bl	8009100 <HAL_DMA_Abort_IT>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	f000 808b 	beq.w	800bc36 <I2C_ITError+0x1de>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f022 0201 	bic.w	r2, r2, #1
 800bb2e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2220      	movs	r2, #32
 800bb34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bb42:	4610      	mov	r0, r2
 800bb44:	4798      	blx	r3
 800bb46:	e076      	b.n	800bc36 <I2C_ITError+0x1de>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb4c:	4a5b      	ldr	r2, [pc, #364]	; (800bcbc <I2C_ITError+0x264>)
 800bb4e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7fd fad3 	bl	8009100 <HAL_DMA_Abort_IT>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d06a      	beq.n	800bc36 <I2C_ITError+0x1de>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	695b      	ldr	r3, [r3, #20]
 800bb66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb6a:	2b40      	cmp	r3, #64	; 0x40
 800bb6c:	d10b      	bne.n	800bb86 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	691a      	ldr	r2, [r3, #16]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb78:	b2d2      	uxtb	r2, r2
 800bb7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb80:	1c5a      	adds	r2, r3, #1
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f022 0201 	bic.w	r2, r2, #1
 800bb94:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2220      	movs	r2, #32
 800bb9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bba4:	687a      	ldr	r2, [r7, #4]
 800bba6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bba8:	4610      	mov	r0, r2
 800bbaa:	4798      	blx	r3
 800bbac:	e043      	b.n	800bc36 <I2C_ITError+0x1de>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	2b60      	cmp	r3, #96	; 0x60
 800bbb8:	d126      	bne.n	800bc08 <I2C_ITError+0x1b0>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2220      	movs	r2, #32
 800bbbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	695b      	ldr	r3, [r3, #20]
 800bbce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbd2:	2b40      	cmp	r3, #64	; 0x40
 800bbd4:	d10b      	bne.n	800bbee <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	691a      	ldr	r2, [r3, #16]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe0:	b2d2      	uxtb	r2, r2
 800bbe2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe8:	1c5a      	adds	r2, r3, #1
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	681a      	ldr	r2, [r3, #0]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f022 0201 	bic.w	r2, r2, #1
 800bbfc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	4798      	blx	r3
 800bc06:	e016      	b.n	800bc36 <I2C_ITError+0x1de>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	695b      	ldr	r3, [r3, #20]
 800bc0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc12:	2b40      	cmp	r3, #64	; 0x40
 800bc14:	d10b      	bne.n	800bc2e <I2C_ITError+0x1d6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	691a      	ldr	r2, [r3, #16]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc20:	b2d2      	uxtb	r2, r2
 800bc22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc28:	1c5a      	adds	r2, r3, #1
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc3a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	f003 0301 	and.w	r3, r3, #1
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d10e      	bne.n	800bc64 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d109      	bne.n	800bc64 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d104      	bne.n	800bc64 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d007      	beq.n	800bc74 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	685a      	ldr	r2, [r3, #4]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bc72:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc7a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc80:	f003 0304 	and.w	r3, r3, #4
 800bc84:	2b04      	cmp	r3, #4
 800bc86:	d114      	bne.n	800bcb2 <I2C_ITError+0x25a>
 800bc88:	7bfb      	ldrb	r3, [r7, #15]
 800bc8a:	2b28      	cmp	r3, #40	; 0x28
 800bc8c:	d111      	bne.n	800bcb2 <I2C_ITError+0x25a>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	4a0b      	ldr	r2, [pc, #44]	; (800bcc0 <I2C_ITError+0x268>)
 800bc92:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2200      	movs	r2, #0
 800bc98:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2220      	movs	r2, #32
 800bc9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2200      	movs	r2, #0
 800bca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	4798      	blx	r3
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bcb2:	bf00      	nop
 800bcb4:	3710      	adds	r7, #16
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	0800bcc5 	.word	0x0800bcc5
 800bcc0:	ffff0000 	.word	0xffff0000

0800bcc4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b086      	sub	sp, #24
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bccc:	2300      	movs	r3, #0
 800bcce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcd4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcdc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800bcde:	4b4c      	ldr	r3, [pc, #304]	; (800be10 <I2C_DMAAbort+0x14c>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	08db      	lsrs	r3, r3, #3
 800bce4:	4a4b      	ldr	r2, [pc, #300]	; (800be14 <I2C_DMAAbort+0x150>)
 800bce6:	fba2 2303 	umull	r2, r3, r2, r3
 800bcea:	0a1a      	lsrs	r2, r3, #8
 800bcec:	4613      	mov	r3, r2
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	4413      	add	r3, r2
 800bcf2:	00da      	lsls	r2, r3, #3
 800bcf4:	1ad3      	subs	r3, r2, r3
 800bcf6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d106      	bne.n	800bd0c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd02:	f043 0220 	orr.w	r2, r3, #32
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800bd0a:	e00a      	b.n	800bd22 <I2C_DMAAbort+0x5e>
    }
    count--;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	3b01      	subs	r3, #1
 800bd10:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd20:	d0ea      	beq.n	800bcf8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d003      	beq.n	800bd32 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd2e:	2200      	movs	r2, #0
 800bd30:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d003      	beq.n	800bd42 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd3e:	2200      	movs	r2, #0
 800bd40:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd50:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	2200      	movs	r2, #0
 800bd56:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d003      	beq.n	800bd68 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd64:	2200      	movs	r2, #0
 800bd66:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d003      	beq.n	800bd78 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd74:	2200      	movs	r2, #0
 800bd76:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	681a      	ldr	r2, [r3, #0]
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f022 0201 	bic.w	r2, r2, #1
 800bd86:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd8e:	b2db      	uxtb	r3, r3
 800bd90:	2b60      	cmp	r3, #96	; 0x60
 800bd92:	d10f      	bne.n	800bdb4 <I2C_DMAAbort+0xf0>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	2220      	movs	r2, #32
 800bd98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	2200      	movs	r2, #0
 800bda8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdae:	6978      	ldr	r0, [r7, #20]
 800bdb0:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bdb2:	e028      	b.n	800be06 <I2C_DMAAbort+0x142>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800bdb4:	7cfb      	ldrb	r3, [r7, #19]
 800bdb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bdba:	2b28      	cmp	r3, #40	; 0x28
 800bdbc:	d117      	bne.n	800bdee <I2C_DMAAbort+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	681a      	ldr	r2, [r3, #0]
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f042 0201 	orr.w	r2, r2, #1
 800bdcc:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bddc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	2200      	movs	r2, #0
 800bde2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	2228      	movs	r2, #40	; 0x28
 800bde8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800bdec:	e007      	b.n	800bdfe <I2C_DMAAbort+0x13a>
      hi2c->State = HAL_I2C_STATE_READY;
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	2220      	movs	r2, #32
 800bdf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCallback(hi2c);
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be02:	6978      	ldr	r0, [r7, #20]
 800be04:	4798      	blx	r3
}
 800be06:	bf00      	nop
 800be08:	3718      	adds	r7, #24
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	bf00      	nop
 800be10:	2000004c 	.word	0x2000004c
 800be14:	14f8b589 	.word	0x14f8b589

0800be18 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800be18:	b480      	push	{r7}
 800be1a:	b085      	sub	sp, #20
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be20:	2300      	movs	r3, #0
 800be22:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800be24:	4b13      	ldr	r3, [pc, #76]	; (800be74 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	08db      	lsrs	r3, r3, #3
 800be2a:	4a13      	ldr	r2, [pc, #76]	; (800be78 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800be2c:	fba2 2303 	umull	r2, r3, r2, r3
 800be30:	0a1a      	lsrs	r2, r3, #8
 800be32:	4613      	mov	r3, r2
 800be34:	009b      	lsls	r3, r3, #2
 800be36:	4413      	add	r3, r2
 800be38:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	3b01      	subs	r3, #1
 800be3e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d107      	bne.n	800be56 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be4a:	f043 0220 	orr.w	r2, r3, #32
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800be52:	2301      	movs	r3, #1
 800be54:	e008      	b.n	800be68 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be64:	d0e9      	beq.n	800be3a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800be66:	2300      	movs	r3, #0
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3714      	adds	r7, #20
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr
 800be74:	2000004c 	.word	0x2000004c
 800be78:	14f8b589 	.word	0x14f8b589

0800be7c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be88:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800be8c:	d103      	bne.n	800be96 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2201      	movs	r2, #1
 800be92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800be94:	e007      	b.n	800bea6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be9a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800be9e:	d102      	bne.n	800bea6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2208      	movs	r2, #8
 800bea4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800bea6:	bf00      	nop
 800bea8:	370c      	adds	r7, #12
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr
	...

0800beb4 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800beb8:	4b06      	ldr	r3, [pc, #24]	; (800bed4 <HAL_PWR_PVD_IRQHandler+0x20>)
 800beba:	695b      	ldr	r3, [r3, #20]
 800bebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d005      	beq.n	800bed0 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800bec4:	f000 f808 	bl	800bed8 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800bec8:	4b02      	ldr	r3, [pc, #8]	; (800bed4 <HAL_PWR_PVD_IRQHandler+0x20>)
 800beca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bece:	615a      	str	r2, [r3, #20]
  }
}
 800bed0:	bf00      	nop
 800bed2:	bd80      	pop	{r7, pc}
 800bed4:	40013c00 	.word	0x40013c00

0800bed8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800bed8:	b480      	push	{r7}
 800beda:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800bedc:	bf00      	nop
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr
	...

0800bee8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b086      	sub	sp, #24
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d101      	bne.n	800befa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bef6:	2301      	movs	r3, #1
 800bef8:	e267      	b.n	800c3ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f003 0301 	and.w	r3, r3, #1
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d075      	beq.n	800bff2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bf06:	4b88      	ldr	r3, [pc, #544]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800bf08:	689b      	ldr	r3, [r3, #8]
 800bf0a:	f003 030c 	and.w	r3, r3, #12
 800bf0e:	2b04      	cmp	r3, #4
 800bf10:	d00c      	beq.n	800bf2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bf12:	4b85      	ldr	r3, [pc, #532]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800bf14:	689b      	ldr	r3, [r3, #8]
 800bf16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bf1a:	2b08      	cmp	r3, #8
 800bf1c:	d112      	bne.n	800bf44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bf1e:	4b82      	ldr	r3, [pc, #520]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf2a:	d10b      	bne.n	800bf44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bf2c:	4b7e      	ldr	r3, [pc, #504]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d05b      	beq.n	800bff0 <HAL_RCC_OscConfig+0x108>
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d157      	bne.n	800bff0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bf40:	2301      	movs	r3, #1
 800bf42:	e242      	b.n	800c3ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf4c:	d106      	bne.n	800bf5c <HAL_RCC_OscConfig+0x74>
 800bf4e:	4b76      	ldr	r3, [pc, #472]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4a75      	ldr	r2, [pc, #468]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800bf54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf58:	6013      	str	r3, [r2, #0]
 800bf5a:	e01d      	b.n	800bf98 <HAL_RCC_OscConfig+0xb0>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bf64:	d10c      	bne.n	800bf80 <HAL_RCC_OscConfig+0x98>
 800bf66:	4b70      	ldr	r3, [pc, #448]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a6f      	ldr	r2, [pc, #444]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800bf6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bf70:	6013      	str	r3, [r2, #0]
 800bf72:	4b6d      	ldr	r3, [pc, #436]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4a6c      	ldr	r2, [pc, #432]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800bf78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf7c:	6013      	str	r3, [r2, #0]
 800bf7e:	e00b      	b.n	800bf98 <HAL_RCC_OscConfig+0xb0>
 800bf80:	4b69      	ldr	r3, [pc, #420]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a68      	ldr	r2, [pc, #416]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800bf86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf8a:	6013      	str	r3, [r2, #0]
 800bf8c:	4b66      	ldr	r3, [pc, #408]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a65      	ldr	r2, [pc, #404]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800bf92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bf96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d013      	beq.n	800bfc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bfa0:	f7fb fee2 	bl	8007d68 <HAL_GetTick>
 800bfa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bfa6:	e008      	b.n	800bfba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bfa8:	f7fb fede 	bl	8007d68 <HAL_GetTick>
 800bfac:	4602      	mov	r2, r0
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	1ad3      	subs	r3, r2, r3
 800bfb2:	2b64      	cmp	r3, #100	; 0x64
 800bfb4:	d901      	bls.n	800bfba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800bfb6:	2303      	movs	r3, #3
 800bfb8:	e207      	b.n	800c3ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bfba:	4b5b      	ldr	r3, [pc, #364]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d0f0      	beq.n	800bfa8 <HAL_RCC_OscConfig+0xc0>
 800bfc6:	e014      	b.n	800bff2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bfc8:	f7fb fece 	bl	8007d68 <HAL_GetTick>
 800bfcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bfce:	e008      	b.n	800bfe2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bfd0:	f7fb feca 	bl	8007d68 <HAL_GetTick>
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	1ad3      	subs	r3, r2, r3
 800bfda:	2b64      	cmp	r3, #100	; 0x64
 800bfdc:	d901      	bls.n	800bfe2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bfde:	2303      	movs	r3, #3
 800bfe0:	e1f3      	b.n	800c3ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bfe2:	4b51      	ldr	r3, [pc, #324]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d1f0      	bne.n	800bfd0 <HAL_RCC_OscConfig+0xe8>
 800bfee:	e000      	b.n	800bff2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f003 0302 	and.w	r3, r3, #2
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d063      	beq.n	800c0c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bffe:	4b4a      	ldr	r3, [pc, #296]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800c000:	689b      	ldr	r3, [r3, #8]
 800c002:	f003 030c 	and.w	r3, r3, #12
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00b      	beq.n	800c022 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c00a:	4b47      	ldr	r3, [pc, #284]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800c00c:	689b      	ldr	r3, [r3, #8]
 800c00e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c012:	2b08      	cmp	r3, #8
 800c014:	d11c      	bne.n	800c050 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c016:	4b44      	ldr	r3, [pc, #272]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d116      	bne.n	800c050 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c022:	4b41      	ldr	r3, [pc, #260]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f003 0302 	and.w	r3, r3, #2
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d005      	beq.n	800c03a <HAL_RCC_OscConfig+0x152>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	68db      	ldr	r3, [r3, #12]
 800c032:	2b01      	cmp	r3, #1
 800c034:	d001      	beq.n	800c03a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c036:	2301      	movs	r3, #1
 800c038:	e1c7      	b.n	800c3ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c03a:	4b3b      	ldr	r3, [pc, #236]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	691b      	ldr	r3, [r3, #16]
 800c046:	00db      	lsls	r3, r3, #3
 800c048:	4937      	ldr	r1, [pc, #220]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800c04a:	4313      	orrs	r3, r2
 800c04c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c04e:	e03a      	b.n	800c0c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d020      	beq.n	800c09a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c058:	4b34      	ldr	r3, [pc, #208]	; (800c12c <HAL_RCC_OscConfig+0x244>)
 800c05a:	2201      	movs	r2, #1
 800c05c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c05e:	f7fb fe83 	bl	8007d68 <HAL_GetTick>
 800c062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c064:	e008      	b.n	800c078 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c066:	f7fb fe7f 	bl	8007d68 <HAL_GetTick>
 800c06a:	4602      	mov	r2, r0
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	1ad3      	subs	r3, r2, r3
 800c070:	2b02      	cmp	r3, #2
 800c072:	d901      	bls.n	800c078 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c074:	2303      	movs	r3, #3
 800c076:	e1a8      	b.n	800c3ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c078:	4b2b      	ldr	r3, [pc, #172]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f003 0302 	and.w	r3, r3, #2
 800c080:	2b00      	cmp	r3, #0
 800c082:	d0f0      	beq.n	800c066 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c084:	4b28      	ldr	r3, [pc, #160]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	691b      	ldr	r3, [r3, #16]
 800c090:	00db      	lsls	r3, r3, #3
 800c092:	4925      	ldr	r1, [pc, #148]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800c094:	4313      	orrs	r3, r2
 800c096:	600b      	str	r3, [r1, #0]
 800c098:	e015      	b.n	800c0c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c09a:	4b24      	ldr	r3, [pc, #144]	; (800c12c <HAL_RCC_OscConfig+0x244>)
 800c09c:	2200      	movs	r2, #0
 800c09e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0a0:	f7fb fe62 	bl	8007d68 <HAL_GetTick>
 800c0a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c0a6:	e008      	b.n	800c0ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c0a8:	f7fb fe5e 	bl	8007d68 <HAL_GetTick>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	1ad3      	subs	r3, r2, r3
 800c0b2:	2b02      	cmp	r3, #2
 800c0b4:	d901      	bls.n	800c0ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c0b6:	2303      	movs	r3, #3
 800c0b8:	e187      	b.n	800c3ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c0ba:	4b1b      	ldr	r3, [pc, #108]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f003 0302 	and.w	r3, r3, #2
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d1f0      	bne.n	800c0a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f003 0308 	and.w	r3, r3, #8
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d036      	beq.n	800c140 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	695b      	ldr	r3, [r3, #20]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d016      	beq.n	800c108 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c0da:	4b15      	ldr	r3, [pc, #84]	; (800c130 <HAL_RCC_OscConfig+0x248>)
 800c0dc:	2201      	movs	r2, #1
 800c0de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0e0:	f7fb fe42 	bl	8007d68 <HAL_GetTick>
 800c0e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c0e6:	e008      	b.n	800c0fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c0e8:	f7fb fe3e 	bl	8007d68 <HAL_GetTick>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	1ad3      	subs	r3, r2, r3
 800c0f2:	2b02      	cmp	r3, #2
 800c0f4:	d901      	bls.n	800c0fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c0f6:	2303      	movs	r3, #3
 800c0f8:	e167      	b.n	800c3ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c0fa:	4b0b      	ldr	r3, [pc, #44]	; (800c128 <HAL_RCC_OscConfig+0x240>)
 800c0fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0fe:	f003 0302 	and.w	r3, r3, #2
 800c102:	2b00      	cmp	r3, #0
 800c104:	d0f0      	beq.n	800c0e8 <HAL_RCC_OscConfig+0x200>
 800c106:	e01b      	b.n	800c140 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c108:	4b09      	ldr	r3, [pc, #36]	; (800c130 <HAL_RCC_OscConfig+0x248>)
 800c10a:	2200      	movs	r2, #0
 800c10c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c10e:	f7fb fe2b 	bl	8007d68 <HAL_GetTick>
 800c112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c114:	e00e      	b.n	800c134 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c116:	f7fb fe27 	bl	8007d68 <HAL_GetTick>
 800c11a:	4602      	mov	r2, r0
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	1ad3      	subs	r3, r2, r3
 800c120:	2b02      	cmp	r3, #2
 800c122:	d907      	bls.n	800c134 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c124:	2303      	movs	r3, #3
 800c126:	e150      	b.n	800c3ca <HAL_RCC_OscConfig+0x4e2>
 800c128:	40023800 	.word	0x40023800
 800c12c:	42470000 	.word	0x42470000
 800c130:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c134:	4b88      	ldr	r3, [pc, #544]	; (800c358 <HAL_RCC_OscConfig+0x470>)
 800c136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c138:	f003 0302 	and.w	r3, r3, #2
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d1ea      	bne.n	800c116 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f003 0304 	and.w	r3, r3, #4
 800c148:	2b00      	cmp	r3, #0
 800c14a:	f000 8097 	beq.w	800c27c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c14e:	2300      	movs	r3, #0
 800c150:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c152:	4b81      	ldr	r3, [pc, #516]	; (800c358 <HAL_RCC_OscConfig+0x470>)
 800c154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d10f      	bne.n	800c17e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c15e:	2300      	movs	r3, #0
 800c160:	60bb      	str	r3, [r7, #8]
 800c162:	4b7d      	ldr	r3, [pc, #500]	; (800c358 <HAL_RCC_OscConfig+0x470>)
 800c164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c166:	4a7c      	ldr	r2, [pc, #496]	; (800c358 <HAL_RCC_OscConfig+0x470>)
 800c168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c16c:	6413      	str	r3, [r2, #64]	; 0x40
 800c16e:	4b7a      	ldr	r3, [pc, #488]	; (800c358 <HAL_RCC_OscConfig+0x470>)
 800c170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c176:	60bb      	str	r3, [r7, #8]
 800c178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c17a:	2301      	movs	r3, #1
 800c17c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c17e:	4b77      	ldr	r3, [pc, #476]	; (800c35c <HAL_RCC_OscConfig+0x474>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c186:	2b00      	cmp	r3, #0
 800c188:	d118      	bne.n	800c1bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c18a:	4b74      	ldr	r3, [pc, #464]	; (800c35c <HAL_RCC_OscConfig+0x474>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	4a73      	ldr	r2, [pc, #460]	; (800c35c <HAL_RCC_OscConfig+0x474>)
 800c190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c196:	f7fb fde7 	bl	8007d68 <HAL_GetTick>
 800c19a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c19c:	e008      	b.n	800c1b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c19e:	f7fb fde3 	bl	8007d68 <HAL_GetTick>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	1ad3      	subs	r3, r2, r3
 800c1a8:	2b02      	cmp	r3, #2
 800c1aa:	d901      	bls.n	800c1b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c1ac:	2303      	movs	r3, #3
 800c1ae:	e10c      	b.n	800c3ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c1b0:	4b6a      	ldr	r3, [pc, #424]	; (800c35c <HAL_RCC_OscConfig+0x474>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d0f0      	beq.n	800c19e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	689b      	ldr	r3, [r3, #8]
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d106      	bne.n	800c1d2 <HAL_RCC_OscConfig+0x2ea>
 800c1c4:	4b64      	ldr	r3, [pc, #400]	; (800c358 <HAL_RCC_OscConfig+0x470>)
 800c1c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1c8:	4a63      	ldr	r2, [pc, #396]	; (800c358 <HAL_RCC_OscConfig+0x470>)
 800c1ca:	f043 0301 	orr.w	r3, r3, #1
 800c1ce:	6713      	str	r3, [r2, #112]	; 0x70
 800c1d0:	e01c      	b.n	800c20c <HAL_RCC_OscConfig+0x324>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	689b      	ldr	r3, [r3, #8]
 800c1d6:	2b05      	cmp	r3, #5
 800c1d8:	d10c      	bne.n	800c1f4 <HAL_RCC_OscConfig+0x30c>
 800c1da:	4b5f      	ldr	r3, [pc, #380]	; (800c358 <HAL_RCC_OscConfig+0x470>)
 800c1dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1de:	4a5e      	ldr	r2, [pc, #376]	; (800c358 <HAL_RCC_OscConfig+0x470>)
 800c1e0:	f043 0304 	orr.w	r3, r3, #4
 800c1e4:	6713      	str	r3, [r2, #112]	; 0x70
 800c1e6:	4b5c      	ldr	r3, [pc, #368]	; (800c358 <HAL_RCC_OscConfig+0x470>)
 800c1e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1ea:	4a5b      	ldr	r2, [pc, #364]	; (800c358 <HAL_RCC_OscConfig+0x470>)
 800c1ec:	f043 0301 	orr.w	r3, r3, #1
 800c1f0:	6713      	str	r3, [r2, #112]	; 0x70
 800c1f2:	e00b      	b.n	800c20c <HAL_RCC_OscConfig+0x324>
 800c1f4:	4b58      	ldr	r3, [pc, #352]	; (800c358 <HAL_RCC_OscConfig+0x470>)
 800c1f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1f8:	4a57      	ldr	r2, [pc, #348]	; (800c358 <HAL_RCC_OscConfig+0x470>)
 800c1fa:	f023 0301 	bic.w	r3, r3, #1
 800c1fe:	6713      	str	r3, [r2, #112]	; 0x70
 800c200:	4b55      	ldr	r3, [pc, #340]	; (800c358 <HAL_RCC_OscConfig+0x470>)
 800c202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c204:	4a54      	ldr	r2, [pc, #336]	; (800c358 <HAL_RCC_OscConfig+0x470>)
 800c206:	f023 0304 	bic.w	r3, r3, #4
 800c20a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	689b      	ldr	r3, [r3, #8]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d015      	beq.n	800c240 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c214:	f7fb fda8 	bl	8007d68 <HAL_GetTick>
 800c218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c21a:	e00a      	b.n	800c232 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c21c:	f7fb fda4 	bl	8007d68 <HAL_GetTick>
 800c220:	4602      	mov	r2, r0
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	1ad3      	subs	r3, r2, r3
 800c226:	f241 3288 	movw	r2, #5000	; 0x1388
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d901      	bls.n	800c232 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c22e:	2303      	movs	r3, #3
 800c230:	e0cb      	b.n	800c3ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c232:	4b49      	ldr	r3, [pc, #292]	; (800c358 <HAL_RCC_OscConfig+0x470>)
 800c234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c236:	f003 0302 	and.w	r3, r3, #2
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d0ee      	beq.n	800c21c <HAL_RCC_OscConfig+0x334>
 800c23e:	e014      	b.n	800c26a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c240:	f7fb fd92 	bl	8007d68 <HAL_GetTick>
 800c244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c246:	e00a      	b.n	800c25e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c248:	f7fb fd8e 	bl	8007d68 <HAL_GetTick>
 800c24c:	4602      	mov	r2, r0
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	1ad3      	subs	r3, r2, r3
 800c252:	f241 3288 	movw	r2, #5000	; 0x1388
 800c256:	4293      	cmp	r3, r2
 800c258:	d901      	bls.n	800c25e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c25a:	2303      	movs	r3, #3
 800c25c:	e0b5      	b.n	800c3ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c25e:	4b3e      	ldr	r3, [pc, #248]	; (800c358 <HAL_RCC_OscConfig+0x470>)
 800c260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c262:	f003 0302 	and.w	r3, r3, #2
 800c266:	2b00      	cmp	r3, #0
 800c268:	d1ee      	bne.n	800c248 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c26a:	7dfb      	ldrb	r3, [r7, #23]
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d105      	bne.n	800c27c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c270:	4b39      	ldr	r3, [pc, #228]	; (800c358 <HAL_RCC_OscConfig+0x470>)
 800c272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c274:	4a38      	ldr	r2, [pc, #224]	; (800c358 <HAL_RCC_OscConfig+0x470>)
 800c276:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c27a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	699b      	ldr	r3, [r3, #24]
 800c280:	2b00      	cmp	r3, #0
 800c282:	f000 80a1 	beq.w	800c3c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c286:	4b34      	ldr	r3, [pc, #208]	; (800c358 <HAL_RCC_OscConfig+0x470>)
 800c288:	689b      	ldr	r3, [r3, #8]
 800c28a:	f003 030c 	and.w	r3, r3, #12
 800c28e:	2b08      	cmp	r3, #8
 800c290:	d05c      	beq.n	800c34c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	699b      	ldr	r3, [r3, #24]
 800c296:	2b02      	cmp	r3, #2
 800c298:	d141      	bne.n	800c31e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c29a:	4b31      	ldr	r3, [pc, #196]	; (800c360 <HAL_RCC_OscConfig+0x478>)
 800c29c:	2200      	movs	r2, #0
 800c29e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c2a0:	f7fb fd62 	bl	8007d68 <HAL_GetTick>
 800c2a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c2a6:	e008      	b.n	800c2ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c2a8:	f7fb fd5e 	bl	8007d68 <HAL_GetTick>
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	1ad3      	subs	r3, r2, r3
 800c2b2:	2b02      	cmp	r3, #2
 800c2b4:	d901      	bls.n	800c2ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c2b6:	2303      	movs	r3, #3
 800c2b8:	e087      	b.n	800c3ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c2ba:	4b27      	ldr	r3, [pc, #156]	; (800c358 <HAL_RCC_OscConfig+0x470>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d1f0      	bne.n	800c2a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	69da      	ldr	r2, [r3, #28]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6a1b      	ldr	r3, [r3, #32]
 800c2ce:	431a      	orrs	r2, r3
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d4:	019b      	lsls	r3, r3, #6
 800c2d6:	431a      	orrs	r2, r3
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2dc:	085b      	lsrs	r3, r3, #1
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	041b      	lsls	r3, r3, #16
 800c2e2:	431a      	orrs	r2, r3
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e8:	061b      	lsls	r3, r3, #24
 800c2ea:	491b      	ldr	r1, [pc, #108]	; (800c358 <HAL_RCC_OscConfig+0x470>)
 800c2ec:	4313      	orrs	r3, r2
 800c2ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c2f0:	4b1b      	ldr	r3, [pc, #108]	; (800c360 <HAL_RCC_OscConfig+0x478>)
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c2f6:	f7fb fd37 	bl	8007d68 <HAL_GetTick>
 800c2fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c2fc:	e008      	b.n	800c310 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c2fe:	f7fb fd33 	bl	8007d68 <HAL_GetTick>
 800c302:	4602      	mov	r2, r0
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	1ad3      	subs	r3, r2, r3
 800c308:	2b02      	cmp	r3, #2
 800c30a:	d901      	bls.n	800c310 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c30c:	2303      	movs	r3, #3
 800c30e:	e05c      	b.n	800c3ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c310:	4b11      	ldr	r3, [pc, #68]	; (800c358 <HAL_RCC_OscConfig+0x470>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d0f0      	beq.n	800c2fe <HAL_RCC_OscConfig+0x416>
 800c31c:	e054      	b.n	800c3c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c31e:	4b10      	ldr	r3, [pc, #64]	; (800c360 <HAL_RCC_OscConfig+0x478>)
 800c320:	2200      	movs	r2, #0
 800c322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c324:	f7fb fd20 	bl	8007d68 <HAL_GetTick>
 800c328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c32a:	e008      	b.n	800c33e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c32c:	f7fb fd1c 	bl	8007d68 <HAL_GetTick>
 800c330:	4602      	mov	r2, r0
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	1ad3      	subs	r3, r2, r3
 800c336:	2b02      	cmp	r3, #2
 800c338:	d901      	bls.n	800c33e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800c33a:	2303      	movs	r3, #3
 800c33c:	e045      	b.n	800c3ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c33e:	4b06      	ldr	r3, [pc, #24]	; (800c358 <HAL_RCC_OscConfig+0x470>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c346:	2b00      	cmp	r3, #0
 800c348:	d1f0      	bne.n	800c32c <HAL_RCC_OscConfig+0x444>
 800c34a:	e03d      	b.n	800c3c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	699b      	ldr	r3, [r3, #24]
 800c350:	2b01      	cmp	r3, #1
 800c352:	d107      	bne.n	800c364 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800c354:	2301      	movs	r3, #1
 800c356:	e038      	b.n	800c3ca <HAL_RCC_OscConfig+0x4e2>
 800c358:	40023800 	.word	0x40023800
 800c35c:	40007000 	.word	0x40007000
 800c360:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c364:	4b1b      	ldr	r3, [pc, #108]	; (800c3d4 <HAL_RCC_OscConfig+0x4ec>)
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	699b      	ldr	r3, [r3, #24]
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d028      	beq.n	800c3c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d121      	bne.n	800c3c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d11a      	bne.n	800c3c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c394:	4013      	ands	r3, r2
 800c396:	687a      	ldr	r2, [r7, #4]
 800c398:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c39a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d111      	bne.n	800c3c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3aa:	085b      	lsrs	r3, r3, #1
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d107      	bne.n	800c3c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d001      	beq.n	800c3c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	e000      	b.n	800c3ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800c3c8:	2300      	movs	r3, #0
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3718      	adds	r7, #24
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	40023800 	.word	0x40023800

0800c3d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d101      	bne.n	800c3ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	e0cc      	b.n	800c586 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c3ec:	4b68      	ldr	r3, [pc, #416]	; (800c590 <HAL_RCC_ClockConfig+0x1b8>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f003 0307 	and.w	r3, r3, #7
 800c3f4:	683a      	ldr	r2, [r7, #0]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d90c      	bls.n	800c414 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c3fa:	4b65      	ldr	r3, [pc, #404]	; (800c590 <HAL_RCC_ClockConfig+0x1b8>)
 800c3fc:	683a      	ldr	r2, [r7, #0]
 800c3fe:	b2d2      	uxtb	r2, r2
 800c400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c402:	4b63      	ldr	r3, [pc, #396]	; (800c590 <HAL_RCC_ClockConfig+0x1b8>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f003 0307 	and.w	r3, r3, #7
 800c40a:	683a      	ldr	r2, [r7, #0]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d001      	beq.n	800c414 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c410:	2301      	movs	r3, #1
 800c412:	e0b8      	b.n	800c586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f003 0302 	and.w	r3, r3, #2
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d020      	beq.n	800c462 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f003 0304 	and.w	r3, r3, #4
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d005      	beq.n	800c438 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c42c:	4b59      	ldr	r3, [pc, #356]	; (800c594 <HAL_RCC_ClockConfig+0x1bc>)
 800c42e:	689b      	ldr	r3, [r3, #8]
 800c430:	4a58      	ldr	r2, [pc, #352]	; (800c594 <HAL_RCC_ClockConfig+0x1bc>)
 800c432:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c436:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f003 0308 	and.w	r3, r3, #8
 800c440:	2b00      	cmp	r3, #0
 800c442:	d005      	beq.n	800c450 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c444:	4b53      	ldr	r3, [pc, #332]	; (800c594 <HAL_RCC_ClockConfig+0x1bc>)
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	4a52      	ldr	r2, [pc, #328]	; (800c594 <HAL_RCC_ClockConfig+0x1bc>)
 800c44a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c44e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c450:	4b50      	ldr	r3, [pc, #320]	; (800c594 <HAL_RCC_ClockConfig+0x1bc>)
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	689b      	ldr	r3, [r3, #8]
 800c45c:	494d      	ldr	r1, [pc, #308]	; (800c594 <HAL_RCC_ClockConfig+0x1bc>)
 800c45e:	4313      	orrs	r3, r2
 800c460:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f003 0301 	and.w	r3, r3, #1
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d044      	beq.n	800c4f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	2b01      	cmp	r3, #1
 800c474:	d107      	bne.n	800c486 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c476:	4b47      	ldr	r3, [pc, #284]	; (800c594 <HAL_RCC_ClockConfig+0x1bc>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d119      	bne.n	800c4b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c482:	2301      	movs	r3, #1
 800c484:	e07f      	b.n	800c586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	2b02      	cmp	r3, #2
 800c48c:	d003      	beq.n	800c496 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c492:	2b03      	cmp	r3, #3
 800c494:	d107      	bne.n	800c4a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c496:	4b3f      	ldr	r3, [pc, #252]	; (800c594 <HAL_RCC_ClockConfig+0x1bc>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d109      	bne.n	800c4b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e06f      	b.n	800c586 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c4a6:	4b3b      	ldr	r3, [pc, #236]	; (800c594 <HAL_RCC_ClockConfig+0x1bc>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f003 0302 	and.w	r3, r3, #2
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d101      	bne.n	800c4b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	e067      	b.n	800c586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c4b6:	4b37      	ldr	r3, [pc, #220]	; (800c594 <HAL_RCC_ClockConfig+0x1bc>)
 800c4b8:	689b      	ldr	r3, [r3, #8]
 800c4ba:	f023 0203 	bic.w	r2, r3, #3
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	4934      	ldr	r1, [pc, #208]	; (800c594 <HAL_RCC_ClockConfig+0x1bc>)
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c4c8:	f7fb fc4e 	bl	8007d68 <HAL_GetTick>
 800c4cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c4ce:	e00a      	b.n	800c4e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c4d0:	f7fb fc4a 	bl	8007d68 <HAL_GetTick>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	1ad3      	subs	r3, r2, r3
 800c4da:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d901      	bls.n	800c4e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c4e2:	2303      	movs	r3, #3
 800c4e4:	e04f      	b.n	800c586 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c4e6:	4b2b      	ldr	r3, [pc, #172]	; (800c594 <HAL_RCC_ClockConfig+0x1bc>)
 800c4e8:	689b      	ldr	r3, [r3, #8]
 800c4ea:	f003 020c 	and.w	r2, r3, #12
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	009b      	lsls	r3, r3, #2
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d1eb      	bne.n	800c4d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c4f8:	4b25      	ldr	r3, [pc, #148]	; (800c590 <HAL_RCC_ClockConfig+0x1b8>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f003 0307 	and.w	r3, r3, #7
 800c500:	683a      	ldr	r2, [r7, #0]
 800c502:	429a      	cmp	r2, r3
 800c504:	d20c      	bcs.n	800c520 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c506:	4b22      	ldr	r3, [pc, #136]	; (800c590 <HAL_RCC_ClockConfig+0x1b8>)
 800c508:	683a      	ldr	r2, [r7, #0]
 800c50a:	b2d2      	uxtb	r2, r2
 800c50c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c50e:	4b20      	ldr	r3, [pc, #128]	; (800c590 <HAL_RCC_ClockConfig+0x1b8>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f003 0307 	and.w	r3, r3, #7
 800c516:	683a      	ldr	r2, [r7, #0]
 800c518:	429a      	cmp	r2, r3
 800c51a:	d001      	beq.n	800c520 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c51c:	2301      	movs	r3, #1
 800c51e:	e032      	b.n	800c586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f003 0304 	and.w	r3, r3, #4
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d008      	beq.n	800c53e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c52c:	4b19      	ldr	r3, [pc, #100]	; (800c594 <HAL_RCC_ClockConfig+0x1bc>)
 800c52e:	689b      	ldr	r3, [r3, #8]
 800c530:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	4916      	ldr	r1, [pc, #88]	; (800c594 <HAL_RCC_ClockConfig+0x1bc>)
 800c53a:	4313      	orrs	r3, r2
 800c53c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f003 0308 	and.w	r3, r3, #8
 800c546:	2b00      	cmp	r3, #0
 800c548:	d009      	beq.n	800c55e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c54a:	4b12      	ldr	r3, [pc, #72]	; (800c594 <HAL_RCC_ClockConfig+0x1bc>)
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	691b      	ldr	r3, [r3, #16]
 800c556:	00db      	lsls	r3, r3, #3
 800c558:	490e      	ldr	r1, [pc, #56]	; (800c594 <HAL_RCC_ClockConfig+0x1bc>)
 800c55a:	4313      	orrs	r3, r2
 800c55c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c55e:	f000 f821 	bl	800c5a4 <HAL_RCC_GetSysClockFreq>
 800c562:	4602      	mov	r2, r0
 800c564:	4b0b      	ldr	r3, [pc, #44]	; (800c594 <HAL_RCC_ClockConfig+0x1bc>)
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	091b      	lsrs	r3, r3, #4
 800c56a:	f003 030f 	and.w	r3, r3, #15
 800c56e:	490a      	ldr	r1, [pc, #40]	; (800c598 <HAL_RCC_ClockConfig+0x1c0>)
 800c570:	5ccb      	ldrb	r3, [r1, r3]
 800c572:	fa22 f303 	lsr.w	r3, r2, r3
 800c576:	4a09      	ldr	r2, [pc, #36]	; (800c59c <HAL_RCC_ClockConfig+0x1c4>)
 800c578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c57a:	4b09      	ldr	r3, [pc, #36]	; (800c5a0 <HAL_RCC_ClockConfig+0x1c8>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	4618      	mov	r0, r3
 800c580:	f7fa fb50 	bl	8006c24 <HAL_InitTick>

  return HAL_OK;
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	40023c00 	.word	0x40023c00
 800c594:	40023800 	.word	0x40023800
 800c598:	08018b24 	.word	0x08018b24
 800c59c:	2000004c 	.word	0x2000004c
 800c5a0:	20000050 	.word	0x20000050

0800c5a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c5a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c5a8:	b094      	sub	sp, #80	; 0x50
 800c5aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	647b      	str	r3, [r7, #68]	; 0x44
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c5bc:	4b79      	ldr	r3, [pc, #484]	; (800c7a4 <HAL_RCC_GetSysClockFreq+0x200>)
 800c5be:	689b      	ldr	r3, [r3, #8]
 800c5c0:	f003 030c 	and.w	r3, r3, #12
 800c5c4:	2b08      	cmp	r3, #8
 800c5c6:	d00d      	beq.n	800c5e4 <HAL_RCC_GetSysClockFreq+0x40>
 800c5c8:	2b08      	cmp	r3, #8
 800c5ca:	f200 80e1 	bhi.w	800c790 <HAL_RCC_GetSysClockFreq+0x1ec>
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d002      	beq.n	800c5d8 <HAL_RCC_GetSysClockFreq+0x34>
 800c5d2:	2b04      	cmp	r3, #4
 800c5d4:	d003      	beq.n	800c5de <HAL_RCC_GetSysClockFreq+0x3a>
 800c5d6:	e0db      	b.n	800c790 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c5d8:	4b73      	ldr	r3, [pc, #460]	; (800c7a8 <HAL_RCC_GetSysClockFreq+0x204>)
 800c5da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800c5dc:	e0db      	b.n	800c796 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c5de:	4b73      	ldr	r3, [pc, #460]	; (800c7ac <HAL_RCC_GetSysClockFreq+0x208>)
 800c5e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c5e2:	e0d8      	b.n	800c796 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c5e4:	4b6f      	ldr	r3, [pc, #444]	; (800c7a4 <HAL_RCC_GetSysClockFreq+0x200>)
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c5ee:	4b6d      	ldr	r3, [pc, #436]	; (800c7a4 <HAL_RCC_GetSysClockFreq+0x200>)
 800c5f0:	685b      	ldr	r3, [r3, #4]
 800c5f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d063      	beq.n	800c6c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c5fa:	4b6a      	ldr	r3, [pc, #424]	; (800c7a4 <HAL_RCC_GetSysClockFreq+0x200>)
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	099b      	lsrs	r3, r3, #6
 800c600:	2200      	movs	r2, #0
 800c602:	63bb      	str	r3, [r7, #56]	; 0x38
 800c604:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c60c:	633b      	str	r3, [r7, #48]	; 0x30
 800c60e:	2300      	movs	r3, #0
 800c610:	637b      	str	r3, [r7, #52]	; 0x34
 800c612:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c616:	4622      	mov	r2, r4
 800c618:	462b      	mov	r3, r5
 800c61a:	f04f 0000 	mov.w	r0, #0
 800c61e:	f04f 0100 	mov.w	r1, #0
 800c622:	0159      	lsls	r1, r3, #5
 800c624:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c628:	0150      	lsls	r0, r2, #5
 800c62a:	4602      	mov	r2, r0
 800c62c:	460b      	mov	r3, r1
 800c62e:	4621      	mov	r1, r4
 800c630:	1a51      	subs	r1, r2, r1
 800c632:	6139      	str	r1, [r7, #16]
 800c634:	4629      	mov	r1, r5
 800c636:	eb63 0301 	sbc.w	r3, r3, r1
 800c63a:	617b      	str	r3, [r7, #20]
 800c63c:	f04f 0200 	mov.w	r2, #0
 800c640:	f04f 0300 	mov.w	r3, #0
 800c644:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c648:	4659      	mov	r1, fp
 800c64a:	018b      	lsls	r3, r1, #6
 800c64c:	4651      	mov	r1, sl
 800c64e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c652:	4651      	mov	r1, sl
 800c654:	018a      	lsls	r2, r1, #6
 800c656:	4651      	mov	r1, sl
 800c658:	ebb2 0801 	subs.w	r8, r2, r1
 800c65c:	4659      	mov	r1, fp
 800c65e:	eb63 0901 	sbc.w	r9, r3, r1
 800c662:	f04f 0200 	mov.w	r2, #0
 800c666:	f04f 0300 	mov.w	r3, #0
 800c66a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c66e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c672:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c676:	4690      	mov	r8, r2
 800c678:	4699      	mov	r9, r3
 800c67a:	4623      	mov	r3, r4
 800c67c:	eb18 0303 	adds.w	r3, r8, r3
 800c680:	60bb      	str	r3, [r7, #8]
 800c682:	462b      	mov	r3, r5
 800c684:	eb49 0303 	adc.w	r3, r9, r3
 800c688:	60fb      	str	r3, [r7, #12]
 800c68a:	f04f 0200 	mov.w	r2, #0
 800c68e:	f04f 0300 	mov.w	r3, #0
 800c692:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800c696:	4629      	mov	r1, r5
 800c698:	024b      	lsls	r3, r1, #9
 800c69a:	4621      	mov	r1, r4
 800c69c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c6a0:	4621      	mov	r1, r4
 800c6a2:	024a      	lsls	r2, r1, #9
 800c6a4:	4610      	mov	r0, r2
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800c6ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c6b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c6b4:	f7f4 f9da 	bl	8000a6c <__aeabi_uldivmod>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	4613      	mov	r3, r2
 800c6be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6c0:	e058      	b.n	800c774 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c6c2:	4b38      	ldr	r3, [pc, #224]	; (800c7a4 <HAL_RCC_GetSysClockFreq+0x200>)
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	099b      	lsrs	r3, r3, #6
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	4611      	mov	r1, r2
 800c6ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c6d2:	623b      	str	r3, [r7, #32]
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	627b      	str	r3, [r7, #36]	; 0x24
 800c6d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800c6dc:	4642      	mov	r2, r8
 800c6de:	464b      	mov	r3, r9
 800c6e0:	f04f 0000 	mov.w	r0, #0
 800c6e4:	f04f 0100 	mov.w	r1, #0
 800c6e8:	0159      	lsls	r1, r3, #5
 800c6ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c6ee:	0150      	lsls	r0, r2, #5
 800c6f0:	4602      	mov	r2, r0
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	4641      	mov	r1, r8
 800c6f6:	ebb2 0a01 	subs.w	sl, r2, r1
 800c6fa:	4649      	mov	r1, r9
 800c6fc:	eb63 0b01 	sbc.w	fp, r3, r1
 800c700:	f04f 0200 	mov.w	r2, #0
 800c704:	f04f 0300 	mov.w	r3, #0
 800c708:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800c70c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800c710:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800c714:	ebb2 040a 	subs.w	r4, r2, sl
 800c718:	eb63 050b 	sbc.w	r5, r3, fp
 800c71c:	f04f 0200 	mov.w	r2, #0
 800c720:	f04f 0300 	mov.w	r3, #0
 800c724:	00eb      	lsls	r3, r5, #3
 800c726:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c72a:	00e2      	lsls	r2, r4, #3
 800c72c:	4614      	mov	r4, r2
 800c72e:	461d      	mov	r5, r3
 800c730:	4643      	mov	r3, r8
 800c732:	18e3      	adds	r3, r4, r3
 800c734:	603b      	str	r3, [r7, #0]
 800c736:	464b      	mov	r3, r9
 800c738:	eb45 0303 	adc.w	r3, r5, r3
 800c73c:	607b      	str	r3, [r7, #4]
 800c73e:	f04f 0200 	mov.w	r2, #0
 800c742:	f04f 0300 	mov.w	r3, #0
 800c746:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c74a:	4629      	mov	r1, r5
 800c74c:	028b      	lsls	r3, r1, #10
 800c74e:	4621      	mov	r1, r4
 800c750:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c754:	4621      	mov	r1, r4
 800c756:	028a      	lsls	r2, r1, #10
 800c758:	4610      	mov	r0, r2
 800c75a:	4619      	mov	r1, r3
 800c75c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c75e:	2200      	movs	r2, #0
 800c760:	61bb      	str	r3, [r7, #24]
 800c762:	61fa      	str	r2, [r7, #28]
 800c764:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c768:	f7f4 f980 	bl	8000a6c <__aeabi_uldivmod>
 800c76c:	4602      	mov	r2, r0
 800c76e:	460b      	mov	r3, r1
 800c770:	4613      	mov	r3, r2
 800c772:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c774:	4b0b      	ldr	r3, [pc, #44]	; (800c7a4 <HAL_RCC_GetSysClockFreq+0x200>)
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	0c1b      	lsrs	r3, r3, #16
 800c77a:	f003 0303 	and.w	r3, r3, #3
 800c77e:	3301      	adds	r3, #1
 800c780:	005b      	lsls	r3, r3, #1
 800c782:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800c784:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c788:	fbb2 f3f3 	udiv	r3, r2, r3
 800c78c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c78e:	e002      	b.n	800c796 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c790:	4b05      	ldr	r3, [pc, #20]	; (800c7a8 <HAL_RCC_GetSysClockFreq+0x204>)
 800c792:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c794:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3750      	adds	r7, #80	; 0x50
 800c79c:	46bd      	mov	sp, r7
 800c79e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c7a2:	bf00      	nop
 800c7a4:	40023800 	.word	0x40023800
 800c7a8:	00f42400 	.word	0x00f42400
 800c7ac:	007a1200 	.word	0x007a1200

0800c7b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c7b4:	4b03      	ldr	r3, [pc, #12]	; (800c7c4 <HAL_RCC_GetHCLKFreq+0x14>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	2000004c 	.word	0x2000004c

0800c7c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c7cc:	f7ff fff0 	bl	800c7b0 <HAL_RCC_GetHCLKFreq>
 800c7d0:	4602      	mov	r2, r0
 800c7d2:	4b05      	ldr	r3, [pc, #20]	; (800c7e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c7d4:	689b      	ldr	r3, [r3, #8]
 800c7d6:	0a9b      	lsrs	r3, r3, #10
 800c7d8:	f003 0307 	and.w	r3, r3, #7
 800c7dc:	4903      	ldr	r1, [pc, #12]	; (800c7ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800c7de:	5ccb      	ldrb	r3, [r1, r3]
 800c7e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	40023800 	.word	0x40023800
 800c7ec:	08018b34 	.word	0x08018b34

0800c7f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c7f4:	f7ff ffdc 	bl	800c7b0 <HAL_RCC_GetHCLKFreq>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	4b05      	ldr	r3, [pc, #20]	; (800c810 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c7fc:	689b      	ldr	r3, [r3, #8]
 800c7fe:	0b5b      	lsrs	r3, r3, #13
 800c800:	f003 0307 	and.w	r3, r3, #7
 800c804:	4903      	ldr	r1, [pc, #12]	; (800c814 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c806:	5ccb      	ldrb	r3, [r1, r3]
 800c808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	40023800 	.word	0x40023800
 800c814:	08018b34 	.word	0x08018b34

0800c818 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c818:	b480      	push	{r7}
 800c81a:	b083      	sub	sp, #12
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	220f      	movs	r2, #15
 800c826:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c828:	4b12      	ldr	r3, [pc, #72]	; (800c874 <HAL_RCC_GetClockConfig+0x5c>)
 800c82a:	689b      	ldr	r3, [r3, #8]
 800c82c:	f003 0203 	and.w	r2, r3, #3
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c834:	4b0f      	ldr	r3, [pc, #60]	; (800c874 <HAL_RCC_GetClockConfig+0x5c>)
 800c836:	689b      	ldr	r3, [r3, #8]
 800c838:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c840:	4b0c      	ldr	r3, [pc, #48]	; (800c874 <HAL_RCC_GetClockConfig+0x5c>)
 800c842:	689b      	ldr	r3, [r3, #8]
 800c844:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800c84c:	4b09      	ldr	r3, [pc, #36]	; (800c874 <HAL_RCC_GetClockConfig+0x5c>)
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	08db      	lsrs	r3, r3, #3
 800c852:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c85a:	4b07      	ldr	r3, [pc, #28]	; (800c878 <HAL_RCC_GetClockConfig+0x60>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f003 0207 	and.w	r2, r3, #7
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	601a      	str	r2, [r3, #0]
}
 800c866:	bf00      	nop
 800c868:	370c      	adds	r7, #12
 800c86a:	46bd      	mov	sp, r7
 800c86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c870:	4770      	bx	lr
 800c872:	bf00      	nop
 800c874:	40023800 	.word	0x40023800
 800c878:	40023c00 	.word	0x40023c00

0800c87c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d101      	bne.n	800c88e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c88a:	2301      	movs	r3, #1
 800c88c:	e09b      	b.n	800c9c6 <HAL_SPI_Init+0x14a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c892:	2b00      	cmp	r3, #0
 800c894:	d108      	bne.n	800c8a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c89e:	d009      	beq.n	800c8b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	61da      	str	r2, [r3, #28]
 800c8a6:	e005      	b.n	800c8b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d126      	bne.n	800c914 <HAL_SPI_Init+0x98>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	4a3f      	ldr	r2, [pc, #252]	; (800c9d0 <HAL_SPI_Init+0x154>)
 800c8d2:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	4a3f      	ldr	r2, [pc, #252]	; (800c9d4 <HAL_SPI_Init+0x158>)
 800c8d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	4a3e      	ldr	r2, [pc, #248]	; (800c9d8 <HAL_SPI_Init+0x15c>)
 800c8de:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	4a3e      	ldr	r2, [pc, #248]	; (800c9dc <HAL_SPI_Init+0x160>)
 800c8e4:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	4a3d      	ldr	r2, [pc, #244]	; (800c9e0 <HAL_SPI_Init+0x164>)
 800c8ea:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	4a3d      	ldr	r2, [pc, #244]	; (800c9e4 <HAL_SPI_Init+0x168>)
 800c8f0:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	4a3c      	ldr	r2, [pc, #240]	; (800c9e8 <HAL_SPI_Init+0x16c>)
 800c8f6:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	4a3c      	ldr	r2, [pc, #240]	; (800c9ec <HAL_SPI_Init+0x170>)
 800c8fc:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c902:	2b00      	cmp	r3, #0
 800c904:	d102      	bne.n	800c90c <HAL_SPI_Init+0x90>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	4a39      	ldr	r2, [pc, #228]	; (800c9f0 <HAL_SPI_Init+0x174>)
 800c90a:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2202      	movs	r2, #2
 800c918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	681a      	ldr	r2, [r3, #0]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c92a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	689b      	ldr	r3, [r3, #8]
 800c938:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c93c:	431a      	orrs	r2, r3
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	68db      	ldr	r3, [r3, #12]
 800c942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c946:	431a      	orrs	r2, r3
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	691b      	ldr	r3, [r3, #16]
 800c94c:	f003 0302 	and.w	r3, r3, #2
 800c950:	431a      	orrs	r2, r3
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	695b      	ldr	r3, [r3, #20]
 800c956:	f003 0301 	and.w	r3, r3, #1
 800c95a:	431a      	orrs	r2, r3
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	699b      	ldr	r3, [r3, #24]
 800c960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c964:	431a      	orrs	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	69db      	ldr	r3, [r3, #28]
 800c96a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c96e:	431a      	orrs	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6a1b      	ldr	r3, [r3, #32]
 800c974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c978:	ea42 0103 	orr.w	r1, r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c980:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	430a      	orrs	r2, r1
 800c98a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	699b      	ldr	r3, [r3, #24]
 800c990:	0c1b      	lsrs	r3, r3, #16
 800c992:	f003 0104 	and.w	r1, r3, #4
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c99a:	f003 0210 	and.w	r2, r3, #16
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	430a      	orrs	r2, r1
 800c9a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	69da      	ldr	r2, [r3, #28]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c9b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2201      	movs	r2, #1
 800c9c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c9c4:	2300      	movs	r3, #0
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3708      	adds	r7, #8
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	0800d1c5 	.word	0x0800d1c5
 800c9d4:	0800d1d9 	.word	0x0800d1d9
 800c9d8:	0800d1ed 	.word	0x0800d1ed
 800c9dc:	0800d201 	.word	0x0800d201
 800c9e0:	0800d215 	.word	0x0800d215
 800c9e4:	0800d229 	.word	0x0800d229
 800c9e8:	080117f5 	.word	0x080117f5
 800c9ec:	0800d23d 	.word	0x0800d23d
 800c9f0:	08006abd 	.word	0x08006abd

0800c9f4 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d101      	bne.n	800ca06 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800ca02:	2301      	movs	r3, #1
 800ca04:	e022      	b.n	800ca4c <HAL_SPI_DeInit+0x58>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2202      	movs	r2, #2
 800ca0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	681a      	ldr	r2, [r3, #0]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca1c:	601a      	str	r2, [r3, #0]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  if (hspi->MspDeInitCallback == NULL)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d102      	bne.n	800ca2c <HAL_SPI_DeInit+0x38>
  {
    hspi->MspDeInitCallback = HAL_SPI_MspDeInit; /* Legacy weak MspDeInit  */
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	4a0a      	ldr	r2, [pc, #40]	; (800ca54 <HAL_SPI_DeInit+0x60>)
 800ca2a:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	4798      	blx	r3
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2200      	movs	r2, #0
 800ca38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2200      	movs	r2, #0
 800ca46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800ca4a:	2300      	movs	r3, #0
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3708      	adds	r7, #8
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	08006b4d 	.word	0x08006b4d

0800ca58 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b087      	sub	sp, #28
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	60f8      	str	r0, [r7, #12]
 800ca60:	60b9      	str	r1, [r7, #8]
 800ca62:	4613      	mov	r3, r2
 800ca64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ca66:	2300      	movs	r3, #0
 800ca68:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d101      	bne.n	800ca78 <HAL_SPI_Transmit_IT+0x20>
 800ca74:	2302      	movs	r3, #2
 800ca76:	e06f      	b.n	800cb58 <HAL_SPI_Transmit_IT+0x100>
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d002      	beq.n	800ca8c <HAL_SPI_Transmit_IT+0x34>
 800ca86:	88fb      	ldrh	r3, [r7, #6]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d102      	bne.n	800ca92 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ca90:	e05d      	b.n	800cb4e <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	d002      	beq.n	800caa4 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800ca9e:	2302      	movs	r3, #2
 800caa0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800caa2:	e054      	b.n	800cb4e <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	2203      	movs	r2, #3
 800caa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	2200      	movs	r2, #0
 800cab0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	68ba      	ldr	r2, [r7, #8]
 800cab6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	88fa      	ldrh	r2, [r7, #6]
 800cabc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	88fa      	ldrh	r2, [r7, #6]
 800cac2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2200      	movs	r2, #0
 800cac8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2200      	movs	r2, #0
 800cace:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2200      	movs	r2, #0
 800cad4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2200      	movs	r2, #0
 800cada:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	68db      	ldr	r3, [r3, #12]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d003      	beq.n	800caec <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	4a1f      	ldr	r2, [pc, #124]	; (800cb64 <HAL_SPI_Transmit_IT+0x10c>)
 800cae8:	645a      	str	r2, [r3, #68]	; 0x44
 800caea:	e002      	b.n	800caf2 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	4a1e      	ldr	r2, [pc, #120]	; (800cb68 <HAL_SPI_Transmit_IT+0x110>)
 800caf0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	689b      	ldr	r3, [r3, #8]
 800caf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cafa:	d10f      	bne.n	800cb1c <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb0a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cb1a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	685a      	ldr	r2, [r3, #4]
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800cb2a:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb36:	2b40      	cmp	r3, #64	; 0x40
 800cb38:	d008      	beq.n	800cb4c <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb48:	601a      	str	r2, [r3, #0]
 800cb4a:	e000      	b.n	800cb4e <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 800cb4c:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	2200      	movs	r2, #0
 800cb52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800cb56:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	371c      	adds	r7, #28
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr
 800cb64:	0800d69f 	.word	0x0800d69f
 800cb68:	0800d659 	.word	0x0800d659

0800cb6c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b086      	sub	sp, #24
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	60f8      	str	r0, [r7, #12]
 800cb74:	60b9      	str	r1, [r7, #8]
 800cb76:	4613      	mov	r3, r2
 800cb78:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	689b      	ldr	r3, [r3, #8]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d110      	bne.n	800cba8 <HAL_SPI_Receive_IT+0x3c>
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cb8e:	d10b      	bne.n	800cba8 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2204      	movs	r2, #4
 800cb94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800cb98:	88fb      	ldrh	r3, [r7, #6]
 800cb9a:	68ba      	ldr	r2, [r7, #8]
 800cb9c:	68b9      	ldr	r1, [r7, #8]
 800cb9e:	68f8      	ldr	r0, [r7, #12]
 800cba0:	f000 f882 	bl	800cca8 <HAL_SPI_TransmitReceive_IT>
 800cba4:	4603      	mov	r3, r0
 800cba6:	e076      	b.n	800cc96 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cbae:	2b01      	cmp	r3, #1
 800cbb0:	d101      	bne.n	800cbb6 <HAL_SPI_Receive_IT+0x4a>
 800cbb2:	2302      	movs	r3, #2
 800cbb4:	e06f      	b.n	800cc96 <HAL_SPI_Receive_IT+0x12a>
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2201      	movs	r2, #1
 800cbba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	d002      	beq.n	800cbd0 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800cbca:	2302      	movs	r3, #2
 800cbcc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cbce:	e05d      	b.n	800cc8c <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d002      	beq.n	800cbdc <HAL_SPI_Receive_IT+0x70>
 800cbd6:	88fb      	ldrh	r3, [r7, #6]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d102      	bne.n	800cbe2 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800cbdc:	2301      	movs	r3, #1
 800cbde:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cbe0:	e054      	b.n	800cc8c <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2204      	movs	r2, #4
 800cbe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2200      	movs	r2, #0
 800cbee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	68ba      	ldr	r2, [r7, #8]
 800cbf4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	88fa      	ldrh	r2, [r7, #6]
 800cbfa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	88fa      	ldrh	r2, [r7, #6]
 800cc00:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	2200      	movs	r2, #0
 800cc06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2200      	movs	r2, #0
 800cc12:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2200      	movs	r2, #0
 800cc18:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	68db      	ldr	r3, [r3, #12]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d003      	beq.n	800cc2a <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	4a1e      	ldr	r2, [pc, #120]	; (800cca0 <HAL_SPI_Receive_IT+0x134>)
 800cc26:	641a      	str	r2, [r3, #64]	; 0x40
 800cc28:	e002      	b.n	800cc30 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	4a1d      	ldr	r2, [pc, #116]	; (800cca4 <HAL_SPI_Receive_IT+0x138>)
 800cc2e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	689b      	ldr	r3, [r3, #8]
 800cc34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc38:	d10f      	bne.n	800cc5a <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	681a      	ldr	r2, [r3, #0]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	681a      	ldr	r2, [r3, #0]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cc58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	685a      	ldr	r2, [r3, #4]
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800cc68:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc74:	2b40      	cmp	r3, #64	; 0x40
 800cc76:	d008      	beq.n	800cc8a <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	681a      	ldr	r2, [r3, #0]
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc86:	601a      	str	r2, [r3, #0]
 800cc88:	e000      	b.n	800cc8c <HAL_SPI_Receive_IT+0x120>
  }

error :
 800cc8a:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800cc94:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3718      	adds	r7, #24
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	0800d613 	.word	0x0800d613
 800cca4:	0800d5c9 	.word	0x0800d5c9

0800cca8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b087      	sub	sp, #28
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	607a      	str	r2, [r7, #4]
 800ccb4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d101      	bne.n	800ccc8 <HAL_SPI_TransmitReceive_IT+0x20>
 800ccc4:	2302      	movs	r3, #2
 800ccc6:	e075      	b.n	800cdb4 <HAL_SPI_TransmitReceive_IT+0x10c>
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2201      	movs	r2, #1
 800cccc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ccd6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ccde:	7dbb      	ldrb	r3, [r7, #22]
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	d00d      	beq.n	800cd00 <HAL_SPI_TransmitReceive_IT+0x58>
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ccea:	d106      	bne.n	800ccfa <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	689b      	ldr	r3, [r3, #8]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d102      	bne.n	800ccfa <HAL_SPI_TransmitReceive_IT+0x52>
 800ccf4:	7dbb      	ldrb	r3, [r7, #22]
 800ccf6:	2b04      	cmp	r3, #4
 800ccf8:	d002      	beq.n	800cd00 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800ccfa:	2302      	movs	r3, #2
 800ccfc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ccfe:	e054      	b.n	800cdaa <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d005      	beq.n	800cd12 <HAL_SPI_TransmitReceive_IT+0x6a>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d002      	beq.n	800cd12 <HAL_SPI_TransmitReceive_IT+0x6a>
 800cd0c:	887b      	ldrh	r3, [r7, #2]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d102      	bne.n	800cd18 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800cd12:	2301      	movs	r3, #1
 800cd14:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cd16:	e048      	b.n	800cdaa <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cd1e:	b2db      	uxtb	r3, r3
 800cd20:	2b04      	cmp	r3, #4
 800cd22:	d003      	beq.n	800cd2c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2205      	movs	r2, #5
 800cd28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	68ba      	ldr	r2, [r7, #8]
 800cd36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	887a      	ldrh	r2, [r7, #2]
 800cd3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	887a      	ldrh	r2, [r7, #2]
 800cd42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	887a      	ldrh	r2, [r7, #2]
 800cd4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	887a      	ldrh	r2, [r7, #2]
 800cd54:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	68db      	ldr	r3, [r3, #12]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d006      	beq.n	800cd6c <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	4a17      	ldr	r2, [pc, #92]	; (800cdc0 <HAL_SPI_TransmitReceive_IT+0x118>)
 800cd62:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	4a17      	ldr	r2, [pc, #92]	; (800cdc4 <HAL_SPI_TransmitReceive_IT+0x11c>)
 800cd68:	645a      	str	r2, [r3, #68]	; 0x44
 800cd6a:	e005      	b.n	800cd78 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	4a16      	ldr	r2, [pc, #88]	; (800cdc8 <HAL_SPI_TransmitReceive_IT+0x120>)
 800cd70:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	4a15      	ldr	r2, [pc, #84]	; (800cdcc <HAL_SPI_TransmitReceive_IT+0x124>)
 800cd76:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	685a      	ldr	r2, [r3, #4]
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800cd86:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd92:	2b40      	cmp	r3, #64	; 0x40
 800cd94:	d008      	beq.n	800cda8 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	681a      	ldr	r2, [r3, #0]
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cda4:	601a      	str	r2, [r3, #0]
 800cda6:	e000      	b.n	800cdaa <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 800cda8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	2200      	movs	r2, #0
 800cdae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800cdb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	371c      	adds	r7, #28
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr
 800cdc0:	0800d50b 	.word	0x0800d50b
 800cdc4:	0800d56b 	.word	0x0800d56b
 800cdc8:	0800d447 	.word	0x0800d447
 800cdcc:	0800d4ab 	.word	0x0800d4ab

0800cdd0 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b088      	sub	sp, #32
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 800cddc:	2301      	movs	r3, #1
 800cdde:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800cde0:	4b72      	ldr	r3, [pc, #456]	; (800cfac <HAL_SPI_Abort_IT+0x1dc>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4a72      	ldr	r2, [pc, #456]	; (800cfb0 <HAL_SPI_Abort_IT+0x1e0>)
 800cde6:	fba2 2303 	umull	r2, r3, r2, r3
 800cdea:	0a5b      	lsrs	r3, r3, #9
 800cdec:	2264      	movs	r2, #100	; 0x64
 800cdee:	fb02 f303 	mul.w	r3, r2, r3
 800cdf2:	613b      	str	r3, [r7, #16]
  count = resetcount;
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	685a      	ldr	r2, [r3, #4]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f022 0220 	bic.w	r2, r2, #32
 800ce06:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce12:	2b80      	cmp	r3, #128	; 0x80
 800ce14:	d117      	bne.n	800ce46 <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	4a66      	ldr	r2, [pc, #408]	; (800cfb4 <HAL_SPI_Abort_IT+0x1e4>)
 800ce1a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d106      	bne.n	800ce30 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800ce2e:	e008      	b.n	800ce42 <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	3b01      	subs	r3, #1
 800ce34:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ce3c:	b2db      	uxtb	r3, r3
 800ce3e:	2b07      	cmp	r3, #7
 800ce40:	d1ec      	bne.n	800ce1c <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	685b      	ldr	r3, [r3, #4]
 800ce4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce50:	2b40      	cmp	r3, #64	; 0x40
 800ce52:	d117      	bne.n	800ce84 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	4a58      	ldr	r2, [pc, #352]	; (800cfb8 <HAL_SPI_Abort_IT+0x1e8>)
 800ce58:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d106      	bne.n	800ce6e <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800ce6c:	e008      	b.n	800ce80 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	3b01      	subs	r3, #1
 800ce72:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ce7a:	b2db      	uxtb	r3, r3
 800ce7c:	2b07      	cmp	r3, #7
 800ce7e:	d1ec      	bne.n	800ce5a <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d00f      	beq.n	800ceac <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	f003 0302 	and.w	r3, r3, #2
 800ce96:	2b02      	cmp	r3, #2
 800ce98:	d104      	bne.n	800cea4 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce9e:	4a47      	ldr	r2, [pc, #284]	; (800cfbc <HAL_SPI_Abort_IT+0x1ec>)
 800cea0:	651a      	str	r2, [r3, #80]	; 0x50
 800cea2:	e003      	b.n	800ceac <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cea8:	2200      	movs	r2, #0
 800ceaa:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d00f      	beq.n	800ced4 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	f003 0301 	and.w	r3, r3, #1
 800cebe:	2b01      	cmp	r3, #1
 800cec0:	d104      	bne.n	800cecc <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cec6:	4a3e      	ldr	r2, [pc, #248]	; (800cfc0 <HAL_SPI_Abort_IT+0x1f0>)
 800cec8:	651a      	str	r2, [r3, #80]	; 0x50
 800ceca:	e003      	b.n	800ced4 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ced0:	2200      	movs	r2, #0
 800ced2:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	f003 0302 	and.w	r3, r3, #2
 800cede:	2b02      	cmp	r3, #2
 800cee0:	d115      	bne.n	800cf0e <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d011      	beq.n	800cf0e <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7fc f906 	bl	8009100 <HAL_DMA_Abort_IT>
 800cef4:	4603      	mov	r3, r0
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d007      	beq.n	800cf0a <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cefe:	2200      	movs	r2, #0
 800cf00:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2240      	movs	r2, #64	; 0x40
 800cf06:	655a      	str	r2, [r3, #84]	; 0x54
 800cf08:	e001      	b.n	800cf0e <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	f003 0301 	and.w	r3, r3, #1
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d115      	bne.n	800cf48 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d011      	beq.n	800cf48 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f7fc f8e9 	bl	8009100 <HAL_DMA_Abort_IT>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d007      	beq.n	800cf44 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf38:	2200      	movs	r2, #0
 800cf3a:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2240      	movs	r2, #64	; 0x40
 800cf40:	655a      	str	r2, [r3, #84]	; 0x54
 800cf42:	e001      	b.n	800cf48 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 800cf44:	2300      	movs	r3, #0
 800cf46:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	2b01      	cmp	r3, #1
 800cf4c:	d129      	bne.n	800cfa2 <HAL_SPI_Abort_IT+0x1d2>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2200      	movs	r2, #0
 800cf52:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf5e:	2b40      	cmp	r3, #64	; 0x40
 800cf60:	d102      	bne.n	800cf68 <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 800cf62:	2301      	movs	r3, #1
 800cf64:	77fb      	strb	r3, [r7, #31]
 800cf66:	e002      	b.n	800cf6e <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cf6e:	2300      	movs	r3, #0
 800cf70:	60fb      	str	r3, [r7, #12]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	68db      	ldr	r3, [r3, #12]
 800cf78:	60fb      	str	r3, [r7, #12]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	689b      	ldr	r3, [r3, #8]
 800cf80:	60fb      	str	r3, [r7, #12]
 800cf82:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cf84:	2300      	movs	r3, #0
 800cf86:	60bb      	str	r3, [r7, #8]
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	689b      	ldr	r3, [r3, #8]
 800cf8e:	60bb      	str	r3, [r7, #8]
 800cf90:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2201      	movs	r2, #1
 800cf96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	4798      	blx	r3
#else
    HAL_SPI_AbortCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 800cfa2:	7ffb      	ldrb	r3, [r7, #31]
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3720      	adds	r7, #32
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}
 800cfac:	2000004c 	.word	0x2000004c
 800cfb0:	057619f1 	.word	0x057619f1
 800cfb4:	0800dc0d 	.word	0x0800dc0d
 800cfb8:	0800db7d 	.word	0x0800db7d
 800cfbc:	0800d2b1 	.word	0x0800d2b1
 800cfc0:	0800d385 	.word	0x0800d385

0800cfc4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b088      	sub	sp, #32
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	689b      	ldr	r3, [r3, #8]
 800cfda:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800cfdc:	69bb      	ldr	r3, [r7, #24]
 800cfde:	099b      	lsrs	r3, r3, #6
 800cfe0:	f003 0301 	and.w	r3, r3, #1
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d10f      	bne.n	800d008 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800cfe8:	69bb      	ldr	r3, [r7, #24]
 800cfea:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d00a      	beq.n	800d008 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800cff2:	69fb      	ldr	r3, [r7, #28]
 800cff4:	099b      	lsrs	r3, r3, #6
 800cff6:	f003 0301 	and.w	r3, r3, #1
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d004      	beq.n	800d008 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	4798      	blx	r3
    return;
 800d006:	e0d8      	b.n	800d1ba <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800d008:	69bb      	ldr	r3, [r7, #24]
 800d00a:	085b      	lsrs	r3, r3, #1
 800d00c:	f003 0301 	and.w	r3, r3, #1
 800d010:	2b00      	cmp	r3, #0
 800d012:	d00a      	beq.n	800d02a <HAL_SPI_IRQHandler+0x66>
 800d014:	69fb      	ldr	r3, [r7, #28]
 800d016:	09db      	lsrs	r3, r3, #7
 800d018:	f003 0301 	and.w	r3, r3, #1
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d004      	beq.n	800d02a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	4798      	blx	r3
    return;
 800d028:	e0c7      	b.n	800d1ba <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d02a:	69bb      	ldr	r3, [r7, #24]
 800d02c:	095b      	lsrs	r3, r3, #5
 800d02e:	f003 0301 	and.w	r3, r3, #1
 800d032:	2b00      	cmp	r3, #0
 800d034:	d10c      	bne.n	800d050 <HAL_SPI_IRQHandler+0x8c>
 800d036:	69bb      	ldr	r3, [r7, #24]
 800d038:	099b      	lsrs	r3, r3, #6
 800d03a:	f003 0301 	and.w	r3, r3, #1
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d106      	bne.n	800d050 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800d042:	69bb      	ldr	r3, [r7, #24]
 800d044:	0a1b      	lsrs	r3, r3, #8
 800d046:	f003 0301 	and.w	r3, r3, #1
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	f000 80b5 	beq.w	800d1ba <HAL_SPI_IRQHandler+0x1f6>
 800d050:	69fb      	ldr	r3, [r7, #28]
 800d052:	095b      	lsrs	r3, r3, #5
 800d054:	f003 0301 	and.w	r3, r3, #1
 800d058:	2b00      	cmp	r3, #0
 800d05a:	f000 80ae 	beq.w	800d1ba <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d05e:	69bb      	ldr	r3, [r7, #24]
 800d060:	099b      	lsrs	r3, r3, #6
 800d062:	f003 0301 	and.w	r3, r3, #1
 800d066:	2b00      	cmp	r3, #0
 800d068:	d023      	beq.n	800d0b2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d070:	b2db      	uxtb	r3, r3
 800d072:	2b03      	cmp	r3, #3
 800d074:	d011      	beq.n	800d09a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d07a:	f043 0204 	orr.w	r2, r3, #4
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d082:	2300      	movs	r3, #0
 800d084:	617b      	str	r3, [r7, #20]
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	68db      	ldr	r3, [r3, #12]
 800d08c:	617b      	str	r3, [r7, #20]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	689b      	ldr	r3, [r3, #8]
 800d094:	617b      	str	r3, [r7, #20]
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	e00b      	b.n	800d0b2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d09a:	2300      	movs	r3, #0
 800d09c:	613b      	str	r3, [r7, #16]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	68db      	ldr	r3, [r3, #12]
 800d0a4:	613b      	str	r3, [r7, #16]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	689b      	ldr	r3, [r3, #8]
 800d0ac:	613b      	str	r3, [r7, #16]
 800d0ae:	693b      	ldr	r3, [r7, #16]
        return;
 800d0b0:	e083      	b.n	800d1ba <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	095b      	lsrs	r3, r3, #5
 800d0b6:	f003 0301 	and.w	r3, r3, #1
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d014      	beq.n	800d0e8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0c2:	f043 0201 	orr.w	r2, r3, #1
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	60fb      	str	r3, [r7, #12]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	689b      	ldr	r3, [r3, #8]
 800d0d4:	60fb      	str	r3, [r7, #12]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d0e4:	601a      	str	r2, [r3, #0]
 800d0e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800d0e8:	69bb      	ldr	r3, [r7, #24]
 800d0ea:	0a1b      	lsrs	r3, r3, #8
 800d0ec:	f003 0301 	and.w	r3, r3, #1
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d00c      	beq.n	800d10e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0f8:	f043 0208 	orr.w	r2, r3, #8
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d100:	2300      	movs	r3, #0
 800d102:	60bb      	str	r3, [r7, #8]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	689b      	ldr	r3, [r3, #8]
 800d10a:	60bb      	str	r3, [r7, #8]
 800d10c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d112:	2b00      	cmp	r3, #0
 800d114:	d050      	beq.n	800d1b8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	685a      	ldr	r2, [r3, #4]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d124:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2201      	movs	r2, #1
 800d12a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800d12e:	69fb      	ldr	r3, [r7, #28]
 800d130:	f003 0302 	and.w	r3, r3, #2
 800d134:	2b00      	cmp	r3, #0
 800d136:	d104      	bne.n	800d142 <HAL_SPI_IRQHandler+0x17e>
 800d138:	69fb      	ldr	r3, [r7, #28]
 800d13a:	f003 0301 	and.w	r3, r3, #1
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d034      	beq.n	800d1ac <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	685a      	ldr	r2, [r3, #4]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f022 0203 	bic.w	r2, r2, #3
 800d150:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d156:	2b00      	cmp	r3, #0
 800d158:	d011      	beq.n	800d17e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d15e:	4a18      	ldr	r2, [pc, #96]	; (800d1c0 <HAL_SPI_IRQHandler+0x1fc>)
 800d160:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d166:	4618      	mov	r0, r3
 800d168:	f7fb ffca 	bl	8009100 <HAL_DMA_Abort_IT>
 800d16c:	4603      	mov	r3, r0
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d005      	beq.n	800d17e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d176:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d182:	2b00      	cmp	r3, #0
 800d184:	d017      	beq.n	800d1b6 <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d18a:	4a0d      	ldr	r2, [pc, #52]	; (800d1c0 <HAL_SPI_IRQHandler+0x1fc>)
 800d18c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d192:	4618      	mov	r0, r3
 800d194:	f7fb ffb4 	bl	8009100 <HAL_DMA_Abort_IT>
 800d198:	4603      	mov	r3, r0
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d00b      	beq.n	800d1b6 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800d1aa:	e004      	b.n	800d1b6 <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d1b4:	e000      	b.n	800d1b8 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 800d1b6:	bf00      	nop
    return;
 800d1b8:	bf00      	nop
  }
}
 800d1ba:	3720      	adds	r7, #32
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	0800d285 	.word	0x0800d285

0800d1c4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b083      	sub	sp, #12
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d1cc:	bf00      	nop
 800d1ce:	370c      	adds	r7, #12
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr

0800d1d8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800d1e0:	bf00      	nop
 800d1e2:	370c      	adds	r7, #12
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ea:	4770      	bx	lr

0800d1ec <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b083      	sub	sp, #12
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800d1f4:	bf00      	nop
 800d1f6:	370c      	adds	r7, #12
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr

0800d200 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d200:	b480      	push	{r7}
 800d202:	b083      	sub	sp, #12
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800d208:	bf00      	nop
 800d20a:	370c      	adds	r7, #12
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr

0800d214 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d214:	b480      	push	{r7}
 800d216:	b083      	sub	sp, #12
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800d21c:	bf00      	nop
 800d21e:	370c      	adds	r7, #12
 800d220:	46bd      	mov	sp, r7
 800d222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d226:	4770      	bx	lr

0800d228 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d228:	b480      	push	{r7}
 800d22a:	b083      	sub	sp, #12
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800d230:	bf00      	nop
 800d232:	370c      	adds	r7, #12
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr

0800d23c <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b083      	sub	sp, #12
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800d244:	bf00      	nop
 800d246:	370c      	adds	r7, #12
 800d248:	46bd      	mov	sp, r7
 800d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24e:	4770      	bx	lr

0800d250 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800d250:	b480      	push	{r7}
 800d252:	b083      	sub	sp, #12
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d25e:	b2db      	uxtb	r3, r3
}
 800d260:	4618      	mov	r0, r3
 800d262:	370c      	adds	r7, #12
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr

0800d26c <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b083      	sub	sp, #12
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800d278:	4618      	mov	r0, r3
 800d27a:	370c      	adds	r7, #12
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr

0800d284 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d290:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2200      	movs	r2, #0
 800d296:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	2200      	movs	r2, #0
 800d29c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2a2:	68f8      	ldr	r0, [r7, #12]
 800d2a4:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d2a6:	bf00      	nop
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
	...

0800d2b0 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b086      	sub	sp, #24
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	651a      	str	r2, [r3, #80]	; 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800d2c6:	4b2d      	ldr	r3, [pc, #180]	; (800d37c <SPI_DMATxAbortCallback+0xcc>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	4a2d      	ldr	r2, [pc, #180]	; (800d380 <SPI_DMATxAbortCallback+0xd0>)
 800d2cc:	fba2 2303 	umull	r2, r3, r2, r3
 800d2d0:	0a5b      	lsrs	r3, r3, #9
 800d2d2:	2264      	movs	r2, #100	; 0x64
 800d2d4:	fb02 f303 	mul.w	r3, r2, r3
 800d2d8:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	685a      	ldr	r2, [r3, #4]
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	f022 0202 	bic.w	r2, r2, #2
 800d2e8:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d106      	bne.n	800d2fe <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d2fc:	e009      	b.n	800d312 <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	3b01      	subs	r3, #1
 800d302:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	689b      	ldr	r3, [r3, #8]
 800d30a:	f003 0302 	and.w	r3, r3, #2
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d0eb      	beq.n	800d2ea <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d316:	2b00      	cmp	r3, #0
 800d318:	d004      	beq.n	800d324 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d31e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d320:	2b00      	cmp	r3, #0
 800d322:	d127      	bne.n	800d374 <SPI_DMATxAbortCallback+0xc4>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	2200      	movs	r2, #0
 800d328:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	2200      	movs	r2, #0
 800d32e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d334:	2b40      	cmp	r3, #64	; 0x40
 800d336:	d002      	beq.n	800d33e <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	2200      	movs	r2, #0
 800d33c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d33e:	2300      	movs	r3, #0
 800d340:	60fb      	str	r3, [r7, #12]
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	68db      	ldr	r3, [r3, #12]
 800d348:	60fb      	str	r3, [r7, #12]
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	689b      	ldr	r3, [r3, #8]
 800d350:	60fb      	str	r3, [r7, #12]
 800d352:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d354:	2300      	movs	r3, #0
 800d356:	60bb      	str	r3, [r7, #8]
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	689b      	ldr	r3, [r3, #8]
 800d35e:	60bb      	str	r3, [r7, #8]
 800d360:	68bb      	ldr	r3, [r7, #8]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	2201      	movs	r2, #1
 800d366:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d36e:	6978      	ldr	r0, [r7, #20]
 800d370:	4798      	blx	r3
 800d372:	e000      	b.n	800d376 <SPI_DMATxAbortCallback+0xc6>
      return;
 800d374:	bf00      	nop
#else
  HAL_SPI_AbortCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d376:	3718      	adds	r7, #24
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	2000004c 	.word	0x2000004c
 800d380:	057619f1 	.word	0x057619f1

0800d384 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b086      	sub	sp, #24
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d390:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d3a0:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	685a      	ldr	r2, [r3, #4]
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	f022 0201 	bic.w	r2, r2, #1
 800d3b8:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800d3ba:	f7fa fcd5 	bl	8007d68 <HAL_GetTick>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	2164      	movs	r1, #100	; 0x64
 800d3c4:	6978      	ldr	r0, [r7, #20]
 800d3c6:	f000 fa7b 	bl	800d8c0 <SPI_EndRxTxTransaction>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d005      	beq.n	800d3dc <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d004      	beq.n	800d3ee <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d127      	bne.n	800d43e <SPI_DMARxAbortCallback+0xba>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3fe:	2b40      	cmp	r3, #64	; 0x40
 800d400:	d002      	beq.n	800d408 <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	2200      	movs	r2, #0
 800d406:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d408:	2300      	movs	r3, #0
 800d40a:	613b      	str	r3, [r7, #16]
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	68db      	ldr	r3, [r3, #12]
 800d412:	613b      	str	r3, [r7, #16]
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	689b      	ldr	r3, [r3, #8]
 800d41a:	613b      	str	r3, [r7, #16]
 800d41c:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d41e:	2300      	movs	r3, #0
 800d420:	60fb      	str	r3, [r7, #12]
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	689b      	ldr	r3, [r3, #8]
 800d428:	60fb      	str	r3, [r7, #12]
 800d42a:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	2201      	movs	r2, #1
 800d430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d438:	6978      	ldr	r0, [r7, #20]
 800d43a:	4798      	blx	r3
 800d43c:	e000      	b.n	800d440 <SPI_DMARxAbortCallback+0xbc>
      return;
 800d43e:	bf00      	nop
#else
  HAL_SPI_AbortCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d440:	3718      	adds	r7, #24
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}

0800d446 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800d446:	b580      	push	{r7, lr}
 800d448:	b082      	sub	sp, #8
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f103 020c 	add.w	r2, r3, #12
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d45a:	7812      	ldrb	r2, [r2, #0]
 800d45c:	b2d2      	uxtb	r2, r2
 800d45e:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d464:	1c5a      	adds	r2, r3, #1
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d46e:	b29b      	uxth	r3, r3
 800d470:	3b01      	subs	r3, #1
 800d472:	b29a      	uxth	r2, r3
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d47c:	b29b      	uxth	r3, r3
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d10f      	bne.n	800d4a2 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	685a      	ldr	r2, [r3, #4]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800d490:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d496:	b29b      	uxth	r3, r3
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d102      	bne.n	800d4a2 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f000 fa51 	bl	800d944 <SPI_CloseRxTx_ISR>
    }
  }
}
 800d4a2:	bf00      	nop
 800d4a4:	3708      	adds	r7, #8
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}

0800d4aa <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800d4aa:	b580      	push	{r7, lr}
 800d4ac:	b082      	sub	sp, #8
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	330c      	adds	r3, #12
 800d4bc:	7812      	ldrb	r2, [r2, #0]
 800d4be:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4c4:	1c5a      	adds	r2, r3, #1
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	3b01      	subs	r3, #1
 800d4d2:	b29a      	uxth	r2, r3
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d4dc:	b29b      	uxth	r3, r3
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d10f      	bne.n	800d502 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	685a      	ldr	r2, [r3, #4]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d4f0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d102      	bne.n	800d502 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f000 fa21 	bl	800d944 <SPI_CloseRxTx_ISR>
    }
  }
}
 800d502:	bf00      	nop
 800d504:	3708      	adds	r7, #8
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b082      	sub	sp, #8
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	68da      	ldr	r2, [r3, #12]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d51c:	b292      	uxth	r2, r2
 800d51e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d524:	1c9a      	adds	r2, r3, #2
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d52e:	b29b      	uxth	r3, r3
 800d530:	3b01      	subs	r3, #1
 800d532:	b29a      	uxth	r2, r3
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d53c:	b29b      	uxth	r3, r3
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d10f      	bne.n	800d562 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	685a      	ldr	r2, [r3, #4]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d550:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d556:	b29b      	uxth	r3, r3
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d102      	bne.n	800d562 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f000 f9f1 	bl	800d944 <SPI_CloseRxTx_ISR>
    }
  }
}
 800d562:	bf00      	nop
 800d564:	3708      	adds	r7, #8
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}

0800d56a <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800d56a:	b580      	push	{r7, lr}
 800d56c:	b082      	sub	sp, #8
 800d56e:	af00      	add	r7, sp, #0
 800d570:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d576:	881a      	ldrh	r2, [r3, #0]
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d582:	1c9a      	adds	r2, r3, #2
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d58c:	b29b      	uxth	r3, r3
 800d58e:	3b01      	subs	r3, #1
 800d590:	b29a      	uxth	r2, r3
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d10f      	bne.n	800d5c0 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	685a      	ldr	r2, [r3, #4]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d5ae:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d5b4:	b29b      	uxth	r3, r3
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d102      	bne.n	800d5c0 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f000 f9c2 	bl	800d944 <SPI_CloseRxTx_ISR>
    }
  }
}
 800d5c0:	bf00      	nop
 800d5c2:	3708      	adds	r7, #8
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f103 020c 	add.w	r2, r3, #12
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5dc:	7812      	ldrb	r2, [r2, #0]
 800d5de:	b2d2      	uxtb	r2, r2
 800d5e0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5e6:	1c5a      	adds	r2, r3, #1
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	3b01      	subs	r3, #1
 800d5f4:	b29a      	uxth	r2, r3
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	2b00      	cmp	r3, #0
 800d602:	d102      	bne.n	800d60a <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f000 fa13 	bl	800da30 <SPI_CloseRx_ISR>
  }
}
 800d60a:	bf00      	nop
 800d60c:	3708      	adds	r7, #8
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}

0800d612 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800d612:	b580      	push	{r7, lr}
 800d614:	b082      	sub	sp, #8
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	68da      	ldr	r2, [r3, #12]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d624:	b292      	uxth	r2, r2
 800d626:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d62c:	1c9a      	adds	r2, r3, #2
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d636:	b29b      	uxth	r3, r3
 800d638:	3b01      	subs	r3, #1
 800d63a:	b29a      	uxth	r2, r3
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d644:	b29b      	uxth	r3, r3
 800d646:	2b00      	cmp	r3, #0
 800d648:	d102      	bne.n	800d650 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f000 f9f0 	bl	800da30 <SPI_CloseRx_ISR>
  }
}
 800d650:	bf00      	nop
 800d652:	3708      	adds	r7, #8
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b082      	sub	sp, #8
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	330c      	adds	r3, #12
 800d66a:	7812      	ldrb	r2, [r2, #0]
 800d66c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d672:	1c5a      	adds	r2, r3, #1
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d67c:	b29b      	uxth	r3, r3
 800d67e:	3b01      	subs	r3, #1
 800d680:	b29a      	uxth	r2, r3
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d102      	bne.n	800d696 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f000 fa0f 	bl	800dab4 <SPI_CloseTx_ISR>
  }
}
 800d696:	bf00      	nop
 800d698:	3708      	adds	r7, #8
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}

0800d69e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800d69e:	b580      	push	{r7, lr}
 800d6a0:	b082      	sub	sp, #8
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6aa:	881a      	ldrh	r2, [r3, #0]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6b6:	1c9a      	adds	r2, r3, #2
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d6c0:	b29b      	uxth	r3, r3
 800d6c2:	3b01      	subs	r3, #1
 800d6c4:	b29a      	uxth	r2, r3
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d6ce:	b29b      	uxth	r3, r3
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d102      	bne.n	800d6da <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f000 f9ed 	bl	800dab4 <SPI_CloseTx_ISR>
  }
}
 800d6da:	bf00      	nop
 800d6dc:	3708      	adds	r7, #8
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}
	...

0800d6e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b088      	sub	sp, #32
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	60f8      	str	r0, [r7, #12]
 800d6ec:	60b9      	str	r1, [r7, #8]
 800d6ee:	603b      	str	r3, [r7, #0]
 800d6f0:	4613      	mov	r3, r2
 800d6f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d6f4:	f7fa fb38 	bl	8007d68 <HAL_GetTick>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fc:	1a9b      	subs	r3, r3, r2
 800d6fe:	683a      	ldr	r2, [r7, #0]
 800d700:	4413      	add	r3, r2
 800d702:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d704:	f7fa fb30 	bl	8007d68 <HAL_GetTick>
 800d708:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d70a:	4b39      	ldr	r3, [pc, #228]	; (800d7f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	015b      	lsls	r3, r3, #5
 800d710:	0d1b      	lsrs	r3, r3, #20
 800d712:	69fa      	ldr	r2, [r7, #28]
 800d714:	fb02 f303 	mul.w	r3, r2, r3
 800d718:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d71a:	e054      	b.n	800d7c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d722:	d050      	beq.n	800d7c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d724:	f7fa fb20 	bl	8007d68 <HAL_GetTick>
 800d728:	4602      	mov	r2, r0
 800d72a:	69bb      	ldr	r3, [r7, #24]
 800d72c:	1ad3      	subs	r3, r2, r3
 800d72e:	69fa      	ldr	r2, [r7, #28]
 800d730:	429a      	cmp	r2, r3
 800d732:	d902      	bls.n	800d73a <SPI_WaitFlagStateUntilTimeout+0x56>
 800d734:	69fb      	ldr	r3, [r7, #28]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d13d      	bne.n	800d7b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	685a      	ldr	r2, [r3, #4]
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d748:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d752:	d111      	bne.n	800d778 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	689b      	ldr	r3, [r3, #8]
 800d758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d75c:	d004      	beq.n	800d768 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	689b      	ldr	r3, [r3, #8]
 800d762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d766:	d107      	bne.n	800d778 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	681a      	ldr	r2, [r3, #0]
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d776:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d77c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d780:	d10f      	bne.n	800d7a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	681a      	ldr	r2, [r3, #0]
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d790:	601a      	str	r2, [r3, #0]
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	681a      	ldr	r2, [r3, #0]
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d7a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d7b2:	2303      	movs	r3, #3
 800d7b4:	e017      	b.n	800d7e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d101      	bne.n	800d7c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	3b01      	subs	r3, #1
 800d7c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	689a      	ldr	r2, [r3, #8]
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	4013      	ands	r3, r2
 800d7d0:	68ba      	ldr	r2, [r7, #8]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	bf0c      	ite	eq
 800d7d6:	2301      	moveq	r3, #1
 800d7d8:	2300      	movne	r3, #0
 800d7da:	b2db      	uxtb	r3, r3
 800d7dc:	461a      	mov	r2, r3
 800d7de:	79fb      	ldrb	r3, [r7, #7]
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d19b      	bne.n	800d71c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d7e4:	2300      	movs	r3, #0
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3720      	adds	r7, #32
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
 800d7ee:	bf00      	nop
 800d7f0:	2000004c 	.word	0x2000004c

0800d7f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b086      	sub	sp, #24
 800d7f8:	af02      	add	r7, sp, #8
 800d7fa:	60f8      	str	r0, [r7, #12]
 800d7fc:	60b9      	str	r1, [r7, #8]
 800d7fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	685b      	ldr	r3, [r3, #4]
 800d804:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d808:	d111      	bne.n	800d82e <SPI_EndRxTransaction+0x3a>
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	689b      	ldr	r3, [r3, #8]
 800d80e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d812:	d004      	beq.n	800d81e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	689b      	ldr	r3, [r3, #8]
 800d818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d81c:	d107      	bne.n	800d82e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	681a      	ldr	r2, [r3, #0]
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d82c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	685b      	ldr	r3, [r3, #4]
 800d832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d836:	d12a      	bne.n	800d88e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	689b      	ldr	r3, [r3, #8]
 800d83c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d840:	d012      	beq.n	800d868 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	9300      	str	r3, [sp, #0]
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	2200      	movs	r2, #0
 800d84a:	2180      	movs	r1, #128	; 0x80
 800d84c:	68f8      	ldr	r0, [r7, #12]
 800d84e:	f7ff ff49 	bl	800d6e4 <SPI_WaitFlagStateUntilTimeout>
 800d852:	4603      	mov	r3, r0
 800d854:	2b00      	cmp	r3, #0
 800d856:	d02d      	beq.n	800d8b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d85c:	f043 0220 	orr.w	r2, r3, #32
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d864:	2303      	movs	r3, #3
 800d866:	e026      	b.n	800d8b6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	9300      	str	r3, [sp, #0]
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	2200      	movs	r2, #0
 800d870:	2101      	movs	r1, #1
 800d872:	68f8      	ldr	r0, [r7, #12]
 800d874:	f7ff ff36 	bl	800d6e4 <SPI_WaitFlagStateUntilTimeout>
 800d878:	4603      	mov	r3, r0
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d01a      	beq.n	800d8b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d882:	f043 0220 	orr.w	r2, r3, #32
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d88a:	2303      	movs	r3, #3
 800d88c:	e013      	b.n	800d8b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	9300      	str	r3, [sp, #0]
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	2200      	movs	r2, #0
 800d896:	2101      	movs	r1, #1
 800d898:	68f8      	ldr	r0, [r7, #12]
 800d89a:	f7ff ff23 	bl	800d6e4 <SPI_WaitFlagStateUntilTimeout>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d007      	beq.n	800d8b4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8a8:	f043 0220 	orr.w	r2, r3, #32
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d8b0:	2303      	movs	r3, #3
 800d8b2:	e000      	b.n	800d8b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800d8b4:	2300      	movs	r3, #0
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3710      	adds	r7, #16
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
	...

0800d8c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b088      	sub	sp, #32
 800d8c4:	af02      	add	r7, sp, #8
 800d8c6:	60f8      	str	r0, [r7, #12]
 800d8c8:	60b9      	str	r1, [r7, #8]
 800d8ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d8cc:	4b1b      	ldr	r3, [pc, #108]	; (800d93c <SPI_EndRxTxTransaction+0x7c>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	4a1b      	ldr	r2, [pc, #108]	; (800d940 <SPI_EndRxTxTransaction+0x80>)
 800d8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d8d6:	0d5b      	lsrs	r3, r3, #21
 800d8d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d8dc:	fb02 f303 	mul.w	r3, r2, r3
 800d8e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	685b      	ldr	r3, [r3, #4]
 800d8e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d8ea:	d112      	bne.n	800d912 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	9300      	str	r3, [sp, #0]
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	2180      	movs	r1, #128	; 0x80
 800d8f6:	68f8      	ldr	r0, [r7, #12]
 800d8f8:	f7ff fef4 	bl	800d6e4 <SPI_WaitFlagStateUntilTimeout>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d016      	beq.n	800d930 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d906:	f043 0220 	orr.w	r2, r3, #32
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d90e:	2303      	movs	r3, #3
 800d910:	e00f      	b.n	800d932 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d00a      	beq.n	800d92e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	3b01      	subs	r3, #1
 800d91c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	689b      	ldr	r3, [r3, #8]
 800d924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d928:	2b80      	cmp	r3, #128	; 0x80
 800d92a:	d0f2      	beq.n	800d912 <SPI_EndRxTxTransaction+0x52>
 800d92c:	e000      	b.n	800d930 <SPI_EndRxTxTransaction+0x70>
        break;
 800d92e:	bf00      	nop
  }

  return HAL_OK;
 800d930:	2300      	movs	r3, #0
}
 800d932:	4618      	mov	r0, r3
 800d934:	3718      	adds	r7, #24
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	2000004c 	.word	0x2000004c
 800d940:	165e9f81 	.word	0x165e9f81

0800d944 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b086      	sub	sp, #24
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800d94c:	4b36      	ldr	r3, [pc, #216]	; (800da28 <SPI_CloseRxTx_ISR+0xe4>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a36      	ldr	r2, [pc, #216]	; (800da2c <SPI_CloseRxTx_ISR+0xe8>)
 800d952:	fba2 2303 	umull	r2, r3, r2, r3
 800d956:	0a5b      	lsrs	r3, r3, #9
 800d958:	2264      	movs	r2, #100	; 0x64
 800d95a:	fb02 f303 	mul.w	r3, r2, r3
 800d95e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d960:	f7fa fa02 	bl	8007d68 <HAL_GetTick>
 800d964:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	685a      	ldr	r2, [r3, #4]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	f022 0220 	bic.w	r2, r2, #32
 800d974:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d106      	bne.n	800d98a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d980:	f043 0220 	orr.w	r2, r3, #32
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d988:	e009      	b.n	800d99e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	3b01      	subs	r3, #1
 800d98e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	689b      	ldr	r3, [r3, #8]
 800d996:	f003 0302 	and.w	r3, r3, #2
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d0eb      	beq.n	800d976 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d99e:	697a      	ldr	r2, [r7, #20]
 800d9a0:	2164      	movs	r1, #100	; 0x64
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f7ff ff8c 	bl	800d8c0 <SPI_EndRxTxTransaction>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d005      	beq.n	800d9ba <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9b2:	f043 0220 	orr.w	r2, r3, #32
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	689b      	ldr	r3, [r3, #8]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d10a      	bne.n	800d9d8 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	60fb      	str	r3, [r7, #12]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	60fb      	str	r3, [r7, #12]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	689b      	ldr	r3, [r3, #8]
 800d9d4:	60fb      	str	r3, [r7, #12]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d117      	bne.n	800da10 <SPI_CloseRxTx_ISR+0xcc>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d9e6:	b2db      	uxtb	r3, r3
 800d9e8:	2b04      	cmp	r3, #4
 800d9ea:	d108      	bne.n	800d9fe <SPI_CloseRxTx_ISR+0xba>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2201      	movs	r2, #1
 800d9f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	4798      	blx	r3
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800d9fc:	e010      	b.n	800da20 <SPI_CloseRxTx_ISR+0xdc>
        hspi->State = HAL_SPI_STATE_READY;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2201      	movs	r2, #1
 800da02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        hspi->TxRxCpltCallback(hspi);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	4798      	blx	r3
}
 800da0e:	e007      	b.n	800da20 <SPI_CloseRxTx_ISR+0xdc>
      hspi->State = HAL_SPI_STATE_READY;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2201      	movs	r2, #1
 800da14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      hspi->ErrorCallback(hspi);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	4798      	blx	r3
}
 800da20:	bf00      	nop
 800da22:	3718      	adds	r7, #24
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}
 800da28:	2000004c 	.word	0x2000004c
 800da2c:	057619f1 	.word	0x057619f1

0800da30 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b084      	sub	sp, #16
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	685a      	ldr	r2, [r3, #4]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800da46:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800da48:	f7fa f98e 	bl	8007d68 <HAL_GetTick>
 800da4c:	4603      	mov	r3, r0
 800da4e:	461a      	mov	r2, r3
 800da50:	2164      	movs	r1, #100	; 0x64
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f7ff fece 	bl	800d7f4 <SPI_EndRxTransaction>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d005      	beq.n	800da6a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da62:	f043 0220 	orr.w	r2, r3, #32
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	689b      	ldr	r3, [r3, #8]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d10a      	bne.n	800da88 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800da72:	2300      	movs	r3, #0
 800da74:	60fb      	str	r3, [r7, #12]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	68db      	ldr	r3, [r3, #12]
 800da7c:	60fb      	str	r3, [r7, #12]
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	689b      	ldr	r3, [r3, #8]
 800da84:	60fb      	str	r3, [r7, #12]
 800da86:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2201      	movs	r2, #1
 800da8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da94:	2b00      	cmp	r3, #0
 800da96:	d104      	bne.n	800daa2 <SPI_CloseRx_ISR+0x72>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	4798      	blx	r3
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800daa0:	e003      	b.n	800daaa <SPI_CloseRx_ISR+0x7a>
      hspi->ErrorCallback(hspi);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	4798      	blx	r3
}
 800daaa:	bf00      	nop
 800daac:	3710      	adds	r7, #16
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
	...

0800dab4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b086      	sub	sp, #24
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800dabc:	4b2d      	ldr	r3, [pc, #180]	; (800db74 <SPI_CloseTx_ISR+0xc0>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	4a2d      	ldr	r2, [pc, #180]	; (800db78 <SPI_CloseTx_ISR+0xc4>)
 800dac2:	fba2 2303 	umull	r2, r3, r2, r3
 800dac6:	0a5b      	lsrs	r3, r3, #9
 800dac8:	2264      	movs	r2, #100	; 0x64
 800daca:	fb02 f303 	mul.w	r3, r2, r3
 800dace:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dad0:	f7fa f94a 	bl	8007d68 <HAL_GetTick>
 800dad4:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d106      	bne.n	800daea <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dae0:	f043 0220 	orr.w	r2, r3, #32
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dae8:	e009      	b.n	800dafe <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	3b01      	subs	r3, #1
 800daee:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	689b      	ldr	r3, [r3, #8]
 800daf6:	f003 0302 	and.w	r3, r3, #2
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d0eb      	beq.n	800dad6 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	685a      	ldr	r2, [r3, #4]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800db0c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800db0e:	697a      	ldr	r2, [r7, #20]
 800db10:	2164      	movs	r1, #100	; 0x64
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f7ff fed4 	bl	800d8c0 <SPI_EndRxTxTransaction>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d005      	beq.n	800db2a <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db22:	f043 0220 	orr.w	r2, r3, #32
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	689b      	ldr	r3, [r3, #8]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d10a      	bne.n	800db48 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800db32:	2300      	movs	r3, #0
 800db34:	60fb      	str	r3, [r7, #12]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	68db      	ldr	r3, [r3, #12]
 800db3c:	60fb      	str	r3, [r7, #12]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	689b      	ldr	r3, [r3, #8]
 800db44:	60fb      	str	r3, [r7, #12]
 800db46:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2201      	movs	r2, #1
 800db4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db54:	2b00      	cmp	r3, #0
 800db56:	d004      	beq.n	800db62 <SPI_CloseTx_ISR+0xae>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	4798      	blx	r3
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800db60:	e003      	b.n	800db6a <SPI_CloseTx_ISR+0xb6>
    hspi->TxCpltCallback(hspi);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	4798      	blx	r3
}
 800db6a:	bf00      	nop
 800db6c:	3718      	adds	r7, #24
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}
 800db72:	bf00      	nop
 800db74:	2000004c 	.word	0x2000004c
 800db78:	057619f1 	.word	0x057619f1

0800db7c <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 800db7c:	b480      	push	{r7}
 800db7e:	b085      	sub	sp, #20
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 800db84:	2300      	movs	r3, #0
 800db86:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800db88:	4b1e      	ldr	r3, [pc, #120]	; (800dc04 <SPI_AbortRx_ISR+0x88>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4a1e      	ldr	r2, [pc, #120]	; (800dc08 <SPI_AbortRx_ISR+0x8c>)
 800db8e:	fba2 2303 	umull	r2, r3, r2, r3
 800db92:	0a5b      	lsrs	r3, r3, #9
 800db94:	2264      	movs	r2, #100	; 0x64
 800db96:	fb02 f303 	mul.w	r3, r2, r3
 800db9a:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d106      	bne.n	800dbb0 <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dba6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dbae:	e009      	b.n	800dbc4 <SPI_AbortRx_ISR+0x48>
    }
    count--;
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	3b01      	subs	r3, #1
 800dbb4:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	689b      	ldr	r3, [r3, #8]
 800dbbc:	f003 0302 	and.w	r3, r3, #2
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d0eb      	beq.n	800db9c <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	681a      	ldr	r2, [r3, #0]
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dbd2:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	685a      	ldr	r2, [r3, #4]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800dbe2:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	68db      	ldr	r3, [r3, #12]
 800dbea:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 800dbec:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2207      	movs	r2, #7
 800dbf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 800dbf6:	bf00      	nop
 800dbf8:	3714      	adds	r7, #20
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc00:	4770      	bx	lr
 800dc02:	bf00      	nop
 800dc04:	2000004c 	.word	0x2000004c
 800dc08:	057619f1 	.word	0x057619f1

0800dc0c <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b083      	sub	sp, #12
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	685a      	ldr	r2, [r3, #4]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dc22:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	681a      	ldr	r2, [r3, #0]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dc32:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2207      	movs	r2, #7
 800dc38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 800dc3c:	bf00      	nop
 800dc3e:	370c      	adds	r7, #12
 800dc40:	46bd      	mov	sp, r7
 800dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc46:	4770      	bx	lr

0800dc48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d101      	bne.n	800dc5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dc56:	2301      	movs	r3, #1
 800dc58:	e04c      	b.n	800dcf4 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc60:	b2db      	uxtb	r3, r3
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d111      	bne.n	800dc8a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f001 fc0e 	bl	800f490 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d102      	bne.n	800dc82 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	4a1f      	ldr	r2, [pc, #124]	; (800dcfc <HAL_TIM_Base_Init+0xb4>)
 800dc80:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2202      	movs	r2, #2
 800dc8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681a      	ldr	r2, [r3, #0]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	3304      	adds	r3, #4
 800dc9a:	4619      	mov	r1, r3
 800dc9c:	4610      	mov	r0, r2
 800dc9e:	f001 f80d 	bl	800ecbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2201      	movs	r2, #1
 800dca6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2201      	movs	r2, #1
 800dcae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2201      	movs	r2, #1
 800dcbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2201      	movs	r2, #1
 800dcc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2201      	movs	r2, #1
 800dcce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2201      	movs	r2, #1
 800dcd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2201      	movs	r2, #1
 800dcde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2201      	movs	r2, #1
 800dce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2201      	movs	r2, #1
 800dcee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dcf2:	2300      	movs	r3, #0
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3708      	adds	r7, #8
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}
 800dcfc:	080071dd 	.word	0x080071dd

0800dd00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b085      	sub	sp, #20
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd0e:	b2db      	uxtb	r3, r3
 800dd10:	2b01      	cmp	r3, #1
 800dd12:	d001      	beq.n	800dd18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dd14:	2301      	movs	r3, #1
 800dd16:	e044      	b.n	800dda2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2202      	movs	r2, #2
 800dd1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	68da      	ldr	r2, [r3, #12]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f042 0201 	orr.w	r2, r2, #1
 800dd2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	4a1e      	ldr	r2, [pc, #120]	; (800ddb0 <HAL_TIM_Base_Start_IT+0xb0>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d018      	beq.n	800dd6c <HAL_TIM_Base_Start_IT+0x6c>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd42:	d013      	beq.n	800dd6c <HAL_TIM_Base_Start_IT+0x6c>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4a1a      	ldr	r2, [pc, #104]	; (800ddb4 <HAL_TIM_Base_Start_IT+0xb4>)
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d00e      	beq.n	800dd6c <HAL_TIM_Base_Start_IT+0x6c>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	4a19      	ldr	r2, [pc, #100]	; (800ddb8 <HAL_TIM_Base_Start_IT+0xb8>)
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d009      	beq.n	800dd6c <HAL_TIM_Base_Start_IT+0x6c>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	4a17      	ldr	r2, [pc, #92]	; (800ddbc <HAL_TIM_Base_Start_IT+0xbc>)
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	d004      	beq.n	800dd6c <HAL_TIM_Base_Start_IT+0x6c>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	4a16      	ldr	r2, [pc, #88]	; (800ddc0 <HAL_TIM_Base_Start_IT+0xc0>)
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d111      	bne.n	800dd90 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	689b      	ldr	r3, [r3, #8]
 800dd72:	f003 0307 	and.w	r3, r3, #7
 800dd76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	2b06      	cmp	r3, #6
 800dd7c:	d010      	beq.n	800dda0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	681a      	ldr	r2, [r3, #0]
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f042 0201 	orr.w	r2, r2, #1
 800dd8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd8e:	e007      	b.n	800dda0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	681a      	ldr	r2, [r3, #0]
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	f042 0201 	orr.w	r2, r2, #1
 800dd9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dda0:	2300      	movs	r3, #0
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3714      	adds	r7, #20
 800dda6:	46bd      	mov	sp, r7
 800dda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddac:	4770      	bx	lr
 800ddae:	bf00      	nop
 800ddb0:	40010000 	.word	0x40010000
 800ddb4:	40000400 	.word	0x40000400
 800ddb8:	40000800 	.word	0x40000800
 800ddbc:	40000c00 	.word	0x40000c00
 800ddc0:	40014000 	.word	0x40014000

0800ddc4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d101      	bne.n	800ddd6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	e04c      	b.n	800de70 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d111      	bne.n	800de06 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2200      	movs	r2, #0
 800dde6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f001 fb50 	bl	800f490 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d102      	bne.n	800ddfe <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	4a1f      	ldr	r2, [pc, #124]	; (800de78 <HAL_TIM_PWM_Init+0xb4>)
 800ddfc:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2202      	movs	r2, #2
 800de0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681a      	ldr	r2, [r3, #0]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	3304      	adds	r3, #4
 800de16:	4619      	mov	r1, r3
 800de18:	4610      	mov	r0, r2
 800de1a:	f000 ff4f 	bl	800ecbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2201      	movs	r2, #1
 800de22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2201      	movs	r2, #1
 800de2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2201      	movs	r2, #1
 800de32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2201      	movs	r2, #1
 800de3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2201      	movs	r2, #1
 800de42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2201      	movs	r2, #1
 800de4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2201      	movs	r2, #1
 800de52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2201      	movs	r2, #1
 800de5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2201      	movs	r2, #1
 800de62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2201      	movs	r2, #1
 800de6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800de6e:	2300      	movs	r3, #0
}
 800de70:	4618      	mov	r0, r3
 800de72:	3708      	adds	r7, #8
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	0800de7d 	.word	0x0800de7d

0800de7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b083      	sub	sp, #12
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800de84:	bf00      	nop
 800de86:	370c      	adds	r7, #12
 800de88:	46bd      	mov	sp, r7
 800de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8e:	4770      	bx	lr

0800de90 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b084      	sub	sp, #16
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800de9a:	2300      	movs	r3, #0
 800de9c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d109      	bne.n	800deb8 <HAL_TIM_PWM_Start_IT+0x28>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800deaa:	b2db      	uxtb	r3, r3
 800deac:	2b01      	cmp	r3, #1
 800deae:	bf14      	ite	ne
 800deb0:	2301      	movne	r3, #1
 800deb2:	2300      	moveq	r3, #0
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	e022      	b.n	800defe <HAL_TIM_PWM_Start_IT+0x6e>
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	2b04      	cmp	r3, #4
 800debc:	d109      	bne.n	800ded2 <HAL_TIM_PWM_Start_IT+0x42>
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	2b01      	cmp	r3, #1
 800dec8:	bf14      	ite	ne
 800deca:	2301      	movne	r3, #1
 800decc:	2300      	moveq	r3, #0
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	e015      	b.n	800defe <HAL_TIM_PWM_Start_IT+0x6e>
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	2b08      	cmp	r3, #8
 800ded6:	d109      	bne.n	800deec <HAL_TIM_PWM_Start_IT+0x5c>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dede:	b2db      	uxtb	r3, r3
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	bf14      	ite	ne
 800dee4:	2301      	movne	r3, #1
 800dee6:	2300      	moveq	r3, #0
 800dee8:	b2db      	uxtb	r3, r3
 800deea:	e008      	b.n	800defe <HAL_TIM_PWM_Start_IT+0x6e>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800def2:	b2db      	uxtb	r3, r3
 800def4:	2b01      	cmp	r3, #1
 800def6:	bf14      	ite	ne
 800def8:	2301      	movne	r3, #1
 800defa:	2300      	moveq	r3, #0
 800defc:	b2db      	uxtb	r3, r3
 800defe:	2b00      	cmp	r3, #0
 800df00:	d001      	beq.n	800df06 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800df02:	2301      	movs	r3, #1
 800df04:	e0b3      	b.n	800e06e <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d104      	bne.n	800df16 <HAL_TIM_PWM_Start_IT+0x86>
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2202      	movs	r2, #2
 800df10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800df14:	e013      	b.n	800df3e <HAL_TIM_PWM_Start_IT+0xae>
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	2b04      	cmp	r3, #4
 800df1a:	d104      	bne.n	800df26 <HAL_TIM_PWM_Start_IT+0x96>
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2202      	movs	r2, #2
 800df20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800df24:	e00b      	b.n	800df3e <HAL_TIM_PWM_Start_IT+0xae>
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	2b08      	cmp	r3, #8
 800df2a:	d104      	bne.n	800df36 <HAL_TIM_PWM_Start_IT+0xa6>
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2202      	movs	r2, #2
 800df30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800df34:	e003      	b.n	800df3e <HAL_TIM_PWM_Start_IT+0xae>
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2202      	movs	r2, #2
 800df3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	2b0c      	cmp	r3, #12
 800df42:	d841      	bhi.n	800dfc8 <HAL_TIM_PWM_Start_IT+0x138>
 800df44:	a201      	add	r2, pc, #4	; (adr r2, 800df4c <HAL_TIM_PWM_Start_IT+0xbc>)
 800df46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df4a:	bf00      	nop
 800df4c:	0800df81 	.word	0x0800df81
 800df50:	0800dfc9 	.word	0x0800dfc9
 800df54:	0800dfc9 	.word	0x0800dfc9
 800df58:	0800dfc9 	.word	0x0800dfc9
 800df5c:	0800df93 	.word	0x0800df93
 800df60:	0800dfc9 	.word	0x0800dfc9
 800df64:	0800dfc9 	.word	0x0800dfc9
 800df68:	0800dfc9 	.word	0x0800dfc9
 800df6c:	0800dfa5 	.word	0x0800dfa5
 800df70:	0800dfc9 	.word	0x0800dfc9
 800df74:	0800dfc9 	.word	0x0800dfc9
 800df78:	0800dfc9 	.word	0x0800dfc9
 800df7c:	0800dfb7 	.word	0x0800dfb7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	68da      	ldr	r2, [r3, #12]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	f042 0202 	orr.w	r2, r2, #2
 800df8e:	60da      	str	r2, [r3, #12]
      break;
 800df90:	e01d      	b.n	800dfce <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	68da      	ldr	r2, [r3, #12]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f042 0204 	orr.w	r2, r2, #4
 800dfa0:	60da      	str	r2, [r3, #12]
      break;
 800dfa2:	e014      	b.n	800dfce <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	68da      	ldr	r2, [r3, #12]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f042 0208 	orr.w	r2, r2, #8
 800dfb2:	60da      	str	r2, [r3, #12]
      break;
 800dfb4:	e00b      	b.n	800dfce <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	68da      	ldr	r2, [r3, #12]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f042 0210 	orr.w	r2, r2, #16
 800dfc4:	60da      	str	r2, [r3, #12]
      break;
 800dfc6:	e002      	b.n	800dfce <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800dfc8:	2301      	movs	r3, #1
 800dfca:	73fb      	strb	r3, [r7, #15]
      break;
 800dfcc:	bf00      	nop
  }

  if (status == HAL_OK)
 800dfce:	7bfb      	ldrb	r3, [r7, #15]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d14b      	bne.n	800e06c <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	2201      	movs	r2, #1
 800dfda:	6839      	ldr	r1, [r7, #0]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f001 fa31 	bl	800f444 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	4a24      	ldr	r2, [pc, #144]	; (800e078 <HAL_TIM_PWM_Start_IT+0x1e8>)
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d107      	bne.n	800dffc <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dffa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	4a1d      	ldr	r2, [pc, #116]	; (800e078 <HAL_TIM_PWM_Start_IT+0x1e8>)
 800e002:	4293      	cmp	r3, r2
 800e004:	d018      	beq.n	800e038 <HAL_TIM_PWM_Start_IT+0x1a8>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e00e:	d013      	beq.n	800e038 <HAL_TIM_PWM_Start_IT+0x1a8>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	4a19      	ldr	r2, [pc, #100]	; (800e07c <HAL_TIM_PWM_Start_IT+0x1ec>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d00e      	beq.n	800e038 <HAL_TIM_PWM_Start_IT+0x1a8>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	4a18      	ldr	r2, [pc, #96]	; (800e080 <HAL_TIM_PWM_Start_IT+0x1f0>)
 800e020:	4293      	cmp	r3, r2
 800e022:	d009      	beq.n	800e038 <HAL_TIM_PWM_Start_IT+0x1a8>
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	4a16      	ldr	r2, [pc, #88]	; (800e084 <HAL_TIM_PWM_Start_IT+0x1f4>)
 800e02a:	4293      	cmp	r3, r2
 800e02c:	d004      	beq.n	800e038 <HAL_TIM_PWM_Start_IT+0x1a8>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	4a15      	ldr	r2, [pc, #84]	; (800e088 <HAL_TIM_PWM_Start_IT+0x1f8>)
 800e034:	4293      	cmp	r3, r2
 800e036:	d111      	bne.n	800e05c <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	689b      	ldr	r3, [r3, #8]
 800e03e:	f003 0307 	and.w	r3, r3, #7
 800e042:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	2b06      	cmp	r3, #6
 800e048:	d010      	beq.n	800e06c <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	681a      	ldr	r2, [r3, #0]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	f042 0201 	orr.w	r2, r2, #1
 800e058:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e05a:	e007      	b.n	800e06c <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	681a      	ldr	r2, [r3, #0]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f042 0201 	orr.w	r2, r2, #1
 800e06a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800e06c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3710      	adds	r7, #16
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	40010000 	.word	0x40010000
 800e07c:	40000400 	.word	0x40000400
 800e080:	40000800 	.word	0x40000800
 800e084:	40000c00 	.word	0x40000c00
 800e088:	40014000 	.word	0x40014000

0800e08c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b084      	sub	sp, #16
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e096:	2300      	movs	r3, #0
 800e098:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	2b0c      	cmp	r3, #12
 800e09e:	d841      	bhi.n	800e124 <HAL_TIM_PWM_Stop_IT+0x98>
 800e0a0:	a201      	add	r2, pc, #4	; (adr r2, 800e0a8 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800e0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0a6:	bf00      	nop
 800e0a8:	0800e0dd 	.word	0x0800e0dd
 800e0ac:	0800e125 	.word	0x0800e125
 800e0b0:	0800e125 	.word	0x0800e125
 800e0b4:	0800e125 	.word	0x0800e125
 800e0b8:	0800e0ef 	.word	0x0800e0ef
 800e0bc:	0800e125 	.word	0x0800e125
 800e0c0:	0800e125 	.word	0x0800e125
 800e0c4:	0800e125 	.word	0x0800e125
 800e0c8:	0800e101 	.word	0x0800e101
 800e0cc:	0800e125 	.word	0x0800e125
 800e0d0:	0800e125 	.word	0x0800e125
 800e0d4:	0800e125 	.word	0x0800e125
 800e0d8:	0800e113 	.word	0x0800e113
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	68da      	ldr	r2, [r3, #12]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	f022 0202 	bic.w	r2, r2, #2
 800e0ea:	60da      	str	r2, [r3, #12]
      break;
 800e0ec:	e01d      	b.n	800e12a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	68da      	ldr	r2, [r3, #12]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f022 0204 	bic.w	r2, r2, #4
 800e0fc:	60da      	str	r2, [r3, #12]
      break;
 800e0fe:	e014      	b.n	800e12a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	68da      	ldr	r2, [r3, #12]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f022 0208 	bic.w	r2, r2, #8
 800e10e:	60da      	str	r2, [r3, #12]
      break;
 800e110:	e00b      	b.n	800e12a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	68da      	ldr	r2, [r3, #12]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	f022 0210 	bic.w	r2, r2, #16
 800e120:	60da      	str	r2, [r3, #12]
      break;
 800e122:	e002      	b.n	800e12a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800e124:	2301      	movs	r3, #1
 800e126:	73fb      	strb	r3, [r7, #15]
      break;
 800e128:	bf00      	nop
  }

  if (status == HAL_OK)
 800e12a:	7bfb      	ldrb	r3, [r7, #15]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d157      	bne.n	800e1e0 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	2200      	movs	r2, #0
 800e136:	6839      	ldr	r1, [r7, #0]
 800e138:	4618      	mov	r0, r3
 800e13a:	f001 f983 	bl	800f444 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	4a2a      	ldr	r2, [pc, #168]	; (800e1ec <HAL_TIM_PWM_Stop_IT+0x160>)
 800e144:	4293      	cmp	r3, r2
 800e146:	d117      	bne.n	800e178 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	6a1a      	ldr	r2, [r3, #32]
 800e14e:	f241 1311 	movw	r3, #4369	; 0x1111
 800e152:	4013      	ands	r3, r2
 800e154:	2b00      	cmp	r3, #0
 800e156:	d10f      	bne.n	800e178 <HAL_TIM_PWM_Stop_IT+0xec>
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	6a1a      	ldr	r2, [r3, #32]
 800e15e:	f240 4344 	movw	r3, #1092	; 0x444
 800e162:	4013      	ands	r3, r2
 800e164:	2b00      	cmp	r3, #0
 800e166:	d107      	bne.n	800e178 <HAL_TIM_PWM_Stop_IT+0xec>
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e176:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	6a1a      	ldr	r2, [r3, #32]
 800e17e:	f241 1311 	movw	r3, #4369	; 0x1111
 800e182:	4013      	ands	r3, r2
 800e184:	2b00      	cmp	r3, #0
 800e186:	d10f      	bne.n	800e1a8 <HAL_TIM_PWM_Stop_IT+0x11c>
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	6a1a      	ldr	r2, [r3, #32]
 800e18e:	f240 4344 	movw	r3, #1092	; 0x444
 800e192:	4013      	ands	r3, r2
 800e194:	2b00      	cmp	r3, #0
 800e196:	d107      	bne.n	800e1a8 <HAL_TIM_PWM_Stop_IT+0x11c>
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	681a      	ldr	r2, [r3, #0]
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	f022 0201 	bic.w	r2, r2, #1
 800e1a6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d104      	bne.n	800e1b8 <HAL_TIM_PWM_Stop_IT+0x12c>
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e1b6:	e013      	b.n	800e1e0 <HAL_TIM_PWM_Stop_IT+0x154>
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	2b04      	cmp	r3, #4
 800e1bc:	d104      	bne.n	800e1c8 <HAL_TIM_PWM_Stop_IT+0x13c>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e1c6:	e00b      	b.n	800e1e0 <HAL_TIM_PWM_Stop_IT+0x154>
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	2b08      	cmp	r3, #8
 800e1cc:	d104      	bne.n	800e1d8 <HAL_TIM_PWM_Stop_IT+0x14c>
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e1d6:	e003      	b.n	800e1e0 <HAL_TIM_PWM_Stop_IT+0x154>
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2201      	movs	r2, #1
 800e1dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800e1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3710      	adds	r7, #16
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
 800e1ea:	bf00      	nop
 800e1ec:	40010000 	.word	0x40010000

0800e1f0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d101      	bne.n	800e202 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800e1fe:	2301      	movs	r3, #1
 800e200:	e04c      	b.n	800e29c <HAL_TIM_IC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e208:	b2db      	uxtb	r3, r3
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d111      	bne.n	800e232 <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2200      	movs	r2, #0
 800e212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f001 f93a 	bl	800f490 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e220:	2b00      	cmp	r3, #0
 800e222:	d102      	bne.n	800e22a <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	4a1f      	ldr	r2, [pc, #124]	; (800e2a4 <HAL_TIM_IC_Init+0xb4>)
 800e228:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2202      	movs	r2, #2
 800e236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681a      	ldr	r2, [r3, #0]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	3304      	adds	r3, #4
 800e242:	4619      	mov	r1, r3
 800e244:	4610      	mov	r0, r2
 800e246:	f000 fd39 	bl	800ecbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2201      	movs	r2, #1
 800e24e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2201      	movs	r2, #1
 800e256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2201      	movs	r2, #1
 800e25e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2201      	movs	r2, #1
 800e266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2201      	movs	r2, #1
 800e26e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2201      	movs	r2, #1
 800e276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2201      	movs	r2, #1
 800e27e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2201      	movs	r2, #1
 800e286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2201      	movs	r2, #1
 800e28e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2201      	movs	r2, #1
 800e296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e29a:	2300      	movs	r3, #0
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	3708      	adds	r7, #8
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}
 800e2a4:	0800e2a9 	.word	0x0800e2a9

0800e2a8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b083      	sub	sp, #12
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800e2b0:	bf00      	nop
 800e2b2:	370c      	adds	r7, #12
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ba:	4770      	bx	lr

0800e2bc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b084      	sub	sp, #16
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d104      	bne.n	800e2da <HAL_TIM_IC_Start_IT+0x1e>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e2d6:	b2db      	uxtb	r3, r3
 800e2d8:	e013      	b.n	800e302 <HAL_TIM_IC_Start_IT+0x46>
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	2b04      	cmp	r3, #4
 800e2de:	d104      	bne.n	800e2ea <HAL_TIM_IC_Start_IT+0x2e>
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e2e6:	b2db      	uxtb	r3, r3
 800e2e8:	e00b      	b.n	800e302 <HAL_TIM_IC_Start_IT+0x46>
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	2b08      	cmp	r3, #8
 800e2ee:	d104      	bne.n	800e2fa <HAL_TIM_IC_Start_IT+0x3e>
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e2f6:	b2db      	uxtb	r3, r3
 800e2f8:	e003      	b.n	800e302 <HAL_TIM_IC_Start_IT+0x46>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e300:	b2db      	uxtb	r3, r3
 800e302:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d104      	bne.n	800e314 <HAL_TIM_IC_Start_IT+0x58>
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e310:	b2db      	uxtb	r3, r3
 800e312:	e013      	b.n	800e33c <HAL_TIM_IC_Start_IT+0x80>
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	2b04      	cmp	r3, #4
 800e318:	d104      	bne.n	800e324 <HAL_TIM_IC_Start_IT+0x68>
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e320:	b2db      	uxtb	r3, r3
 800e322:	e00b      	b.n	800e33c <HAL_TIM_IC_Start_IT+0x80>
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	2b08      	cmp	r3, #8
 800e328:	d104      	bne.n	800e334 <HAL_TIM_IC_Start_IT+0x78>
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e330:	b2db      	uxtb	r3, r3
 800e332:	e003      	b.n	800e33c <HAL_TIM_IC_Start_IT+0x80>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e33a:	b2db      	uxtb	r3, r3
 800e33c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800e33e:	7bbb      	ldrb	r3, [r7, #14]
 800e340:	2b01      	cmp	r3, #1
 800e342:	d102      	bne.n	800e34a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800e344:	7b7b      	ldrb	r3, [r7, #13]
 800e346:	2b01      	cmp	r3, #1
 800e348:	d001      	beq.n	800e34e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800e34a:	2301      	movs	r3, #1
 800e34c:	e0c2      	b.n	800e4d4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d104      	bne.n	800e35e <HAL_TIM_IC_Start_IT+0xa2>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2202      	movs	r2, #2
 800e358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e35c:	e013      	b.n	800e386 <HAL_TIM_IC_Start_IT+0xca>
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	2b04      	cmp	r3, #4
 800e362:	d104      	bne.n	800e36e <HAL_TIM_IC_Start_IT+0xb2>
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2202      	movs	r2, #2
 800e368:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e36c:	e00b      	b.n	800e386 <HAL_TIM_IC_Start_IT+0xca>
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	2b08      	cmp	r3, #8
 800e372:	d104      	bne.n	800e37e <HAL_TIM_IC_Start_IT+0xc2>
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2202      	movs	r2, #2
 800e378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e37c:	e003      	b.n	800e386 <HAL_TIM_IC_Start_IT+0xca>
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2202      	movs	r2, #2
 800e382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d104      	bne.n	800e396 <HAL_TIM_IC_Start_IT+0xda>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2202      	movs	r2, #2
 800e390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e394:	e013      	b.n	800e3be <HAL_TIM_IC_Start_IT+0x102>
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	2b04      	cmp	r3, #4
 800e39a:	d104      	bne.n	800e3a6 <HAL_TIM_IC_Start_IT+0xea>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2202      	movs	r2, #2
 800e3a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e3a4:	e00b      	b.n	800e3be <HAL_TIM_IC_Start_IT+0x102>
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	2b08      	cmp	r3, #8
 800e3aa:	d104      	bne.n	800e3b6 <HAL_TIM_IC_Start_IT+0xfa>
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2202      	movs	r2, #2
 800e3b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e3b4:	e003      	b.n	800e3be <HAL_TIM_IC_Start_IT+0x102>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2202      	movs	r2, #2
 800e3ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	2b0c      	cmp	r3, #12
 800e3c2:	d841      	bhi.n	800e448 <HAL_TIM_IC_Start_IT+0x18c>
 800e3c4:	a201      	add	r2, pc, #4	; (adr r2, 800e3cc <HAL_TIM_IC_Start_IT+0x110>)
 800e3c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ca:	bf00      	nop
 800e3cc:	0800e401 	.word	0x0800e401
 800e3d0:	0800e449 	.word	0x0800e449
 800e3d4:	0800e449 	.word	0x0800e449
 800e3d8:	0800e449 	.word	0x0800e449
 800e3dc:	0800e413 	.word	0x0800e413
 800e3e0:	0800e449 	.word	0x0800e449
 800e3e4:	0800e449 	.word	0x0800e449
 800e3e8:	0800e449 	.word	0x0800e449
 800e3ec:	0800e425 	.word	0x0800e425
 800e3f0:	0800e449 	.word	0x0800e449
 800e3f4:	0800e449 	.word	0x0800e449
 800e3f8:	0800e449 	.word	0x0800e449
 800e3fc:	0800e437 	.word	0x0800e437
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	68da      	ldr	r2, [r3, #12]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	f042 0202 	orr.w	r2, r2, #2
 800e40e:	60da      	str	r2, [r3, #12]
      break;
 800e410:	e01d      	b.n	800e44e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	68da      	ldr	r2, [r3, #12]
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f042 0204 	orr.w	r2, r2, #4
 800e420:	60da      	str	r2, [r3, #12]
      break;
 800e422:	e014      	b.n	800e44e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	68da      	ldr	r2, [r3, #12]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f042 0208 	orr.w	r2, r2, #8
 800e432:	60da      	str	r2, [r3, #12]
      break;
 800e434:	e00b      	b.n	800e44e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	68da      	ldr	r2, [r3, #12]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f042 0210 	orr.w	r2, r2, #16
 800e444:	60da      	str	r2, [r3, #12]
      break;
 800e446:	e002      	b.n	800e44e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800e448:	2301      	movs	r3, #1
 800e44a:	73fb      	strb	r3, [r7, #15]
      break;
 800e44c:	bf00      	nop
  }

  if (status == HAL_OK)
 800e44e:	7bfb      	ldrb	r3, [r7, #15]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d13e      	bne.n	800e4d2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	2201      	movs	r2, #1
 800e45a:	6839      	ldr	r1, [r7, #0]
 800e45c:	4618      	mov	r0, r3
 800e45e:	f000 fff1 	bl	800f444 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	4a1d      	ldr	r2, [pc, #116]	; (800e4dc <HAL_TIM_IC_Start_IT+0x220>)
 800e468:	4293      	cmp	r3, r2
 800e46a:	d018      	beq.n	800e49e <HAL_TIM_IC_Start_IT+0x1e2>
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e474:	d013      	beq.n	800e49e <HAL_TIM_IC_Start_IT+0x1e2>
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	4a19      	ldr	r2, [pc, #100]	; (800e4e0 <HAL_TIM_IC_Start_IT+0x224>)
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d00e      	beq.n	800e49e <HAL_TIM_IC_Start_IT+0x1e2>
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	4a17      	ldr	r2, [pc, #92]	; (800e4e4 <HAL_TIM_IC_Start_IT+0x228>)
 800e486:	4293      	cmp	r3, r2
 800e488:	d009      	beq.n	800e49e <HAL_TIM_IC_Start_IT+0x1e2>
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	4a16      	ldr	r2, [pc, #88]	; (800e4e8 <HAL_TIM_IC_Start_IT+0x22c>)
 800e490:	4293      	cmp	r3, r2
 800e492:	d004      	beq.n	800e49e <HAL_TIM_IC_Start_IT+0x1e2>
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	4a14      	ldr	r2, [pc, #80]	; (800e4ec <HAL_TIM_IC_Start_IT+0x230>)
 800e49a:	4293      	cmp	r3, r2
 800e49c:	d111      	bne.n	800e4c2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	689b      	ldr	r3, [r3, #8]
 800e4a4:	f003 0307 	and.w	r3, r3, #7
 800e4a8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	2b06      	cmp	r3, #6
 800e4ae:	d010      	beq.n	800e4d2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f042 0201 	orr.w	r2, r2, #1
 800e4be:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4c0:	e007      	b.n	800e4d2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	681a      	ldr	r2, [r3, #0]
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f042 0201 	orr.w	r2, r2, #1
 800e4d0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800e4d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	3710      	adds	r7, #16
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}
 800e4dc:	40010000 	.word	0x40010000
 800e4e0:	40000400 	.word	0x40000400
 800e4e4:	40000800 	.word	0x40000800
 800e4e8:	40000c00 	.word	0x40000c00
 800e4ec:	40014000 	.word	0x40014000

0800e4f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	691b      	ldr	r3, [r3, #16]
 800e4fe:	f003 0302 	and.w	r3, r3, #2
 800e502:	2b02      	cmp	r3, #2
 800e504:	d128      	bne.n	800e558 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	68db      	ldr	r3, [r3, #12]
 800e50c:	f003 0302 	and.w	r3, r3, #2
 800e510:	2b02      	cmp	r3, #2
 800e512:	d121      	bne.n	800e558 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f06f 0202 	mvn.w	r2, #2
 800e51c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2201      	movs	r2, #1
 800e522:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	699b      	ldr	r3, [r3, #24]
 800e52a:	f003 0303 	and.w	r3, r3, #3
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d005      	beq.n	800e53e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	4798      	blx	r3
 800e53c:	e009      	b.n	800e552 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2200      	movs	r2, #0
 800e556:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	691b      	ldr	r3, [r3, #16]
 800e55e:	f003 0304 	and.w	r3, r3, #4
 800e562:	2b04      	cmp	r3, #4
 800e564:	d128      	bne.n	800e5b8 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	68db      	ldr	r3, [r3, #12]
 800e56c:	f003 0304 	and.w	r3, r3, #4
 800e570:	2b04      	cmp	r3, #4
 800e572:	d121      	bne.n	800e5b8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f06f 0204 	mvn.w	r2, #4
 800e57c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2202      	movs	r2, #2
 800e582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	699b      	ldr	r3, [r3, #24]
 800e58a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d005      	beq.n	800e59e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	4798      	blx	r3
 800e59c:	e009      	b.n	800e5b2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	691b      	ldr	r3, [r3, #16]
 800e5be:	f003 0308 	and.w	r3, r3, #8
 800e5c2:	2b08      	cmp	r3, #8
 800e5c4:	d128      	bne.n	800e618 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	68db      	ldr	r3, [r3, #12]
 800e5cc:	f003 0308 	and.w	r3, r3, #8
 800e5d0:	2b08      	cmp	r3, #8
 800e5d2:	d121      	bne.n	800e618 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f06f 0208 	mvn.w	r2, #8
 800e5dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2204      	movs	r2, #4
 800e5e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	69db      	ldr	r3, [r3, #28]
 800e5ea:	f003 0303 	and.w	r3, r3, #3
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d005      	beq.n	800e5fe <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	4798      	blx	r3
 800e5fc:	e009      	b.n	800e612 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2200      	movs	r2, #0
 800e616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	691b      	ldr	r3, [r3, #16]
 800e61e:	f003 0310 	and.w	r3, r3, #16
 800e622:	2b10      	cmp	r3, #16
 800e624:	d128      	bne.n	800e678 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	68db      	ldr	r3, [r3, #12]
 800e62c:	f003 0310 	and.w	r3, r3, #16
 800e630:	2b10      	cmp	r3, #16
 800e632:	d121      	bne.n	800e678 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f06f 0210 	mvn.w	r2, #16
 800e63c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2208      	movs	r2, #8
 800e642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	69db      	ldr	r3, [r3, #28]
 800e64a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d005      	beq.n	800e65e <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	4798      	blx	r3
 800e65c:	e009      	b.n	800e672 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2200      	movs	r2, #0
 800e676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	691b      	ldr	r3, [r3, #16]
 800e67e:	f003 0301 	and.w	r3, r3, #1
 800e682:	2b01      	cmp	r3, #1
 800e684:	d110      	bne.n	800e6a8 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	68db      	ldr	r3, [r3, #12]
 800e68c:	f003 0301 	and.w	r3, r3, #1
 800e690:	2b01      	cmp	r3, #1
 800e692:	d109      	bne.n	800e6a8 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f06f 0201 	mvn.w	r2, #1
 800e69c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	691b      	ldr	r3, [r3, #16]
 800e6ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6b2:	2b80      	cmp	r3, #128	; 0x80
 800e6b4:	d110      	bne.n	800e6d8 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	68db      	ldr	r3, [r3, #12]
 800e6bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6c0:	2b80      	cmp	r3, #128	; 0x80
 800e6c2:	d109      	bne.n	800e6d8 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e6cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	691b      	ldr	r3, [r3, #16]
 800e6de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6e2:	2b40      	cmp	r3, #64	; 0x40
 800e6e4:	d110      	bne.n	800e708 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	68db      	ldr	r3, [r3, #12]
 800e6ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6f0:	2b40      	cmp	r3, #64	; 0x40
 800e6f2:	d109      	bne.n	800e708 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e6fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	691b      	ldr	r3, [r3, #16]
 800e70e:	f003 0320 	and.w	r3, r3, #32
 800e712:	2b20      	cmp	r3, #32
 800e714:	d110      	bne.n	800e738 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	68db      	ldr	r3, [r3, #12]
 800e71c:	f003 0320 	and.w	r3, r3, #32
 800e720:	2b20      	cmp	r3, #32
 800e722:	d109      	bne.n	800e738 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f06f 0220 	mvn.w	r2, #32
 800e72c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e738:	bf00      	nop
 800e73a:	3708      	adds	r7, #8
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}

0800e740 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b086      	sub	sp, #24
 800e744:	af00      	add	r7, sp, #0
 800e746:	60f8      	str	r0, [r7, #12]
 800e748:	60b9      	str	r1, [r7, #8]
 800e74a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e74c:	2300      	movs	r3, #0
 800e74e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e756:	2b01      	cmp	r3, #1
 800e758:	d101      	bne.n	800e75e <HAL_TIM_IC_ConfigChannel+0x1e>
 800e75a:	2302      	movs	r3, #2
 800e75c:	e088      	b.n	800e870 <HAL_TIM_IC_ConfigChannel+0x130>
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2201      	movs	r2, #1
 800e762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d11b      	bne.n	800e7a4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	6818      	ldr	r0, [r3, #0]
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	6819      	ldr	r1, [r3, #0]
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	685a      	ldr	r2, [r3, #4]
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	68db      	ldr	r3, [r3, #12]
 800e77c:	f000 fcaa 	bl	800f0d4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	699a      	ldr	r2, [r3, #24]
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f022 020c 	bic.w	r2, r2, #12
 800e78e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	6999      	ldr	r1, [r3, #24]
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	689a      	ldr	r2, [r3, #8]
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	430a      	orrs	r2, r1
 800e7a0:	619a      	str	r2, [r3, #24]
 800e7a2:	e060      	b.n	800e866 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2b04      	cmp	r3, #4
 800e7a8:	d11c      	bne.n	800e7e4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	6818      	ldr	r0, [r3, #0]
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	6819      	ldr	r1, [r3, #0]
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	685a      	ldr	r2, [r3, #4]
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	68db      	ldr	r3, [r3, #12]
 800e7ba:	f000 fd22 	bl	800f202 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	699a      	ldr	r2, [r3, #24]
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e7cc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	6999      	ldr	r1, [r3, #24]
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	689b      	ldr	r3, [r3, #8]
 800e7d8:	021a      	lsls	r2, r3, #8
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	430a      	orrs	r2, r1
 800e7e0:	619a      	str	r2, [r3, #24]
 800e7e2:	e040      	b.n	800e866 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2b08      	cmp	r3, #8
 800e7e8:	d11b      	bne.n	800e822 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	6818      	ldr	r0, [r3, #0]
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	6819      	ldr	r1, [r3, #0]
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	685a      	ldr	r2, [r3, #4]
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	68db      	ldr	r3, [r3, #12]
 800e7fa:	f000 fd6f 	bl	800f2dc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	69da      	ldr	r2, [r3, #28]
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f022 020c 	bic.w	r2, r2, #12
 800e80c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	69d9      	ldr	r1, [r3, #28]
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	689a      	ldr	r2, [r3, #8]
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	430a      	orrs	r2, r1
 800e81e:	61da      	str	r2, [r3, #28]
 800e820:	e021      	b.n	800e866 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2b0c      	cmp	r3, #12
 800e826:	d11c      	bne.n	800e862 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	6818      	ldr	r0, [r3, #0]
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	6819      	ldr	r1, [r3, #0]
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	685a      	ldr	r2, [r3, #4]
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	68db      	ldr	r3, [r3, #12]
 800e838:	f000 fd8c 	bl	800f354 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	69da      	ldr	r2, [r3, #28]
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e84a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	69d9      	ldr	r1, [r3, #28]
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	689b      	ldr	r3, [r3, #8]
 800e856:	021a      	lsls	r2, r3, #8
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	430a      	orrs	r2, r1
 800e85e:	61da      	str	r2, [r3, #28]
 800e860:	e001      	b.n	800e866 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800e862:	2301      	movs	r3, #1
 800e864:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2200      	movs	r2, #0
 800e86a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e86e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e870:	4618      	mov	r0, r3
 800e872:	3718      	adds	r7, #24
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}

0800e878 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b086      	sub	sp, #24
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	60f8      	str	r0, [r7, #12]
 800e880:	60b9      	str	r1, [r7, #8]
 800e882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e884:	2300      	movs	r3, #0
 800e886:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d101      	bne.n	800e896 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e892:	2302      	movs	r3, #2
 800e894:	e0ae      	b.n	800e9f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2201      	movs	r2, #1
 800e89a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2b0c      	cmp	r3, #12
 800e8a2:	f200 809f 	bhi.w	800e9e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800e8a6:	a201      	add	r2, pc, #4	; (adr r2, 800e8ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8ac:	0800e8e1 	.word	0x0800e8e1
 800e8b0:	0800e9e5 	.word	0x0800e9e5
 800e8b4:	0800e9e5 	.word	0x0800e9e5
 800e8b8:	0800e9e5 	.word	0x0800e9e5
 800e8bc:	0800e921 	.word	0x0800e921
 800e8c0:	0800e9e5 	.word	0x0800e9e5
 800e8c4:	0800e9e5 	.word	0x0800e9e5
 800e8c8:	0800e9e5 	.word	0x0800e9e5
 800e8cc:	0800e963 	.word	0x0800e963
 800e8d0:	0800e9e5 	.word	0x0800e9e5
 800e8d4:	0800e9e5 	.word	0x0800e9e5
 800e8d8:	0800e9e5 	.word	0x0800e9e5
 800e8dc:	0800e9a3 	.word	0x0800e9a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	68b9      	ldr	r1, [r7, #8]
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f000 fa68 	bl	800edbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	699a      	ldr	r2, [r3, #24]
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f042 0208 	orr.w	r2, r2, #8
 800e8fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	699a      	ldr	r2, [r3, #24]
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	f022 0204 	bic.w	r2, r2, #4
 800e90a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	6999      	ldr	r1, [r3, #24]
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	691a      	ldr	r2, [r3, #16]
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	430a      	orrs	r2, r1
 800e91c:	619a      	str	r2, [r3, #24]
      break;
 800e91e:	e064      	b.n	800e9ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	68b9      	ldr	r1, [r7, #8]
 800e926:	4618      	mov	r0, r3
 800e928:	f000 faae 	bl	800ee88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	699a      	ldr	r2, [r3, #24]
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e93a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	699a      	ldr	r2, [r3, #24]
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e94a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	6999      	ldr	r1, [r3, #24]
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	691b      	ldr	r3, [r3, #16]
 800e956:	021a      	lsls	r2, r3, #8
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	430a      	orrs	r2, r1
 800e95e:	619a      	str	r2, [r3, #24]
      break;
 800e960:	e043      	b.n	800e9ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	68b9      	ldr	r1, [r7, #8]
 800e968:	4618      	mov	r0, r3
 800e96a:	f000 faf9 	bl	800ef60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	69da      	ldr	r2, [r3, #28]
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	f042 0208 	orr.w	r2, r2, #8
 800e97c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	69da      	ldr	r2, [r3, #28]
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f022 0204 	bic.w	r2, r2, #4
 800e98c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	69d9      	ldr	r1, [r3, #28]
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	691a      	ldr	r2, [r3, #16]
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	430a      	orrs	r2, r1
 800e99e:	61da      	str	r2, [r3, #28]
      break;
 800e9a0:	e023      	b.n	800e9ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	68b9      	ldr	r1, [r7, #8]
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f000 fb43 	bl	800f034 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	69da      	ldr	r2, [r3, #28]
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e9bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	69da      	ldr	r2, [r3, #28]
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e9cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	69d9      	ldr	r1, [r3, #28]
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	691b      	ldr	r3, [r3, #16]
 800e9d8:	021a      	lsls	r2, r3, #8
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	430a      	orrs	r2, r1
 800e9e0:	61da      	str	r2, [r3, #28]
      break;
 800e9e2:	e002      	b.n	800e9ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	75fb      	strb	r3, [r7, #23]
      break;
 800e9e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e9f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3718      	adds	r7, #24
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b084      	sub	sp, #16
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ea06:	2300      	movs	r3, #0
 800ea08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea10:	2b01      	cmp	r3, #1
 800ea12:	d101      	bne.n	800ea18 <HAL_TIM_ConfigClockSource+0x1c>
 800ea14:	2302      	movs	r3, #2
 800ea16:	e0b4      	b.n	800eb82 <HAL_TIM_ConfigClockSource+0x186>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2202      	movs	r2, #2
 800ea24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	689b      	ldr	r3, [r3, #8]
 800ea2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ea36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ea3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	68ba      	ldr	r2, [r7, #8]
 800ea46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea50:	d03e      	beq.n	800ead0 <HAL_TIM_ConfigClockSource+0xd4>
 800ea52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea56:	f200 8087 	bhi.w	800eb68 <HAL_TIM_ConfigClockSource+0x16c>
 800ea5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea5e:	f000 8086 	beq.w	800eb6e <HAL_TIM_ConfigClockSource+0x172>
 800ea62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea66:	d87f      	bhi.n	800eb68 <HAL_TIM_ConfigClockSource+0x16c>
 800ea68:	2b70      	cmp	r3, #112	; 0x70
 800ea6a:	d01a      	beq.n	800eaa2 <HAL_TIM_ConfigClockSource+0xa6>
 800ea6c:	2b70      	cmp	r3, #112	; 0x70
 800ea6e:	d87b      	bhi.n	800eb68 <HAL_TIM_ConfigClockSource+0x16c>
 800ea70:	2b60      	cmp	r3, #96	; 0x60
 800ea72:	d050      	beq.n	800eb16 <HAL_TIM_ConfigClockSource+0x11a>
 800ea74:	2b60      	cmp	r3, #96	; 0x60
 800ea76:	d877      	bhi.n	800eb68 <HAL_TIM_ConfigClockSource+0x16c>
 800ea78:	2b50      	cmp	r3, #80	; 0x50
 800ea7a:	d03c      	beq.n	800eaf6 <HAL_TIM_ConfigClockSource+0xfa>
 800ea7c:	2b50      	cmp	r3, #80	; 0x50
 800ea7e:	d873      	bhi.n	800eb68 <HAL_TIM_ConfigClockSource+0x16c>
 800ea80:	2b40      	cmp	r3, #64	; 0x40
 800ea82:	d058      	beq.n	800eb36 <HAL_TIM_ConfigClockSource+0x13a>
 800ea84:	2b40      	cmp	r3, #64	; 0x40
 800ea86:	d86f      	bhi.n	800eb68 <HAL_TIM_ConfigClockSource+0x16c>
 800ea88:	2b30      	cmp	r3, #48	; 0x30
 800ea8a:	d064      	beq.n	800eb56 <HAL_TIM_ConfigClockSource+0x15a>
 800ea8c:	2b30      	cmp	r3, #48	; 0x30
 800ea8e:	d86b      	bhi.n	800eb68 <HAL_TIM_ConfigClockSource+0x16c>
 800ea90:	2b20      	cmp	r3, #32
 800ea92:	d060      	beq.n	800eb56 <HAL_TIM_ConfigClockSource+0x15a>
 800ea94:	2b20      	cmp	r3, #32
 800ea96:	d867      	bhi.n	800eb68 <HAL_TIM_ConfigClockSource+0x16c>
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d05c      	beq.n	800eb56 <HAL_TIM_ConfigClockSource+0x15a>
 800ea9c:	2b10      	cmp	r3, #16
 800ea9e:	d05a      	beq.n	800eb56 <HAL_TIM_ConfigClockSource+0x15a>
 800eaa0:	e062      	b.n	800eb68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6818      	ldr	r0, [r3, #0]
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	6899      	ldr	r1, [r3, #8]
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	685a      	ldr	r2, [r3, #4]
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	68db      	ldr	r3, [r3, #12]
 800eab2:	f000 fca7 	bl	800f404 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	689b      	ldr	r3, [r3, #8]
 800eabc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800eac4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	68ba      	ldr	r2, [r7, #8]
 800eacc:	609a      	str	r2, [r3, #8]
      break;
 800eace:	e04f      	b.n	800eb70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6818      	ldr	r0, [r3, #0]
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	6899      	ldr	r1, [r3, #8]
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	685a      	ldr	r2, [r3, #4]
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	68db      	ldr	r3, [r3, #12]
 800eae0:	f000 fc90 	bl	800f404 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	689a      	ldr	r2, [r3, #8]
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800eaf2:	609a      	str	r2, [r3, #8]
      break;
 800eaf4:	e03c      	b.n	800eb70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6818      	ldr	r0, [r3, #0]
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	6859      	ldr	r1, [r3, #4]
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	68db      	ldr	r3, [r3, #12]
 800eb02:	461a      	mov	r2, r3
 800eb04:	f000 fb4e 	bl	800f1a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	2150      	movs	r1, #80	; 0x50
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f000 fc5d 	bl	800f3ce <TIM_ITRx_SetConfig>
      break;
 800eb14:	e02c      	b.n	800eb70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6818      	ldr	r0, [r3, #0]
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	6859      	ldr	r1, [r3, #4]
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	68db      	ldr	r3, [r3, #12]
 800eb22:	461a      	mov	r2, r3
 800eb24:	f000 fbaa 	bl	800f27c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	2160      	movs	r1, #96	; 0x60
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f000 fc4d 	bl	800f3ce <TIM_ITRx_SetConfig>
      break;
 800eb34:	e01c      	b.n	800eb70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6818      	ldr	r0, [r3, #0]
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	6859      	ldr	r1, [r3, #4]
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	68db      	ldr	r3, [r3, #12]
 800eb42:	461a      	mov	r2, r3
 800eb44:	f000 fb2e 	bl	800f1a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	2140      	movs	r1, #64	; 0x40
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f000 fc3d 	bl	800f3ce <TIM_ITRx_SetConfig>
      break;
 800eb54:	e00c      	b.n	800eb70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681a      	ldr	r2, [r3, #0]
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	4619      	mov	r1, r3
 800eb60:	4610      	mov	r0, r2
 800eb62:	f000 fc34 	bl	800f3ce <TIM_ITRx_SetConfig>
      break;
 800eb66:	e003      	b.n	800eb70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800eb68:	2301      	movs	r3, #1
 800eb6a:	73fb      	strb	r3, [r7, #15]
      break;
 800eb6c:	e000      	b.n	800eb70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800eb6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2201      	movs	r2, #1
 800eb74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800eb80:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	3710      	adds	r7, #16
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}
	...

0800eb8c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b085      	sub	sp, #20
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800eb96:	2300      	movs	r3, #0
 800eb98:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	2b0c      	cmp	r3, #12
 800eb9e:	d831      	bhi.n	800ec04 <HAL_TIM_ReadCapturedValue+0x78>
 800eba0:	a201      	add	r2, pc, #4	; (adr r2, 800eba8 <HAL_TIM_ReadCapturedValue+0x1c>)
 800eba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eba6:	bf00      	nop
 800eba8:	0800ebdd 	.word	0x0800ebdd
 800ebac:	0800ec05 	.word	0x0800ec05
 800ebb0:	0800ec05 	.word	0x0800ec05
 800ebb4:	0800ec05 	.word	0x0800ec05
 800ebb8:	0800ebe7 	.word	0x0800ebe7
 800ebbc:	0800ec05 	.word	0x0800ec05
 800ebc0:	0800ec05 	.word	0x0800ec05
 800ebc4:	0800ec05 	.word	0x0800ec05
 800ebc8:	0800ebf1 	.word	0x0800ebf1
 800ebcc:	0800ec05 	.word	0x0800ec05
 800ebd0:	0800ec05 	.word	0x0800ec05
 800ebd4:	0800ec05 	.word	0x0800ec05
 800ebd8:	0800ebfb 	.word	0x0800ebfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebe2:	60fb      	str	r3, [r7, #12]

      break;
 800ebe4:	e00f      	b.n	800ec06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebec:	60fb      	str	r3, [r7, #12]

      break;
 800ebee:	e00a      	b.n	800ec06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebf6:	60fb      	str	r3, [r7, #12]

      break;
 800ebf8:	e005      	b.n	800ec06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec00:	60fb      	str	r3, [r7, #12]

      break;
 800ec02:	e000      	b.n	800ec06 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800ec04:	bf00      	nop
  }

  return tmpreg;
 800ec06:	68fb      	ldr	r3, [r7, #12]
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3714      	adds	r7, #20
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec12:	4770      	bx	lr

0800ec14 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ec14:	b480      	push	{r7}
 800ec16:	b083      	sub	sp, #12
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800ec1c:	bf00      	nop
 800ec1e:	370c      	adds	r7, #12
 800ec20:	46bd      	mov	sp, r7
 800ec22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec26:	4770      	bx	lr

0800ec28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b083      	sub	sp, #12
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ec30:	bf00      	nop
 800ec32:	370c      	adds	r7, #12
 800ec34:	46bd      	mov	sp, r7
 800ec36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3a:	4770      	bx	lr

0800ec3c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b083      	sub	sp, #12
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800ec44:	bf00      	nop
 800ec46:	370c      	adds	r7, #12
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr

0800ec50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ec50:	b480      	push	{r7}
 800ec52:	b083      	sub	sp, #12
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ec58:	bf00      	nop
 800ec5a:	370c      	adds	r7, #12
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec62:	4770      	bx	lr

0800ec64 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b083      	sub	sp, #12
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800ec6c:	bf00      	nop
 800ec6e:	370c      	adds	r7, #12
 800ec70:	46bd      	mov	sp, r7
 800ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec76:	4770      	bx	lr

0800ec78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ec78:	b480      	push	{r7}
 800ec7a:	b083      	sub	sp, #12
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ec80:	bf00      	nop
 800ec82:	370c      	adds	r7, #12
 800ec84:	46bd      	mov	sp, r7
 800ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8a:	4770      	bx	lr

0800ec8c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b083      	sub	sp, #12
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800ec94:	bf00      	nop
 800ec96:	370c      	adds	r7, #12
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr

0800eca0 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 800eca0:	b480      	push	{r7}
 800eca2:	b083      	sub	sp, #12
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
  return htim->State;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ecae:	b2db      	uxtb	r3, r3
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	370c      	adds	r7, #12
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr

0800ecbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b085      	sub	sp, #20
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	4a34      	ldr	r2, [pc, #208]	; (800eda0 <TIM_Base_SetConfig+0xe4>)
 800ecd0:	4293      	cmp	r3, r2
 800ecd2:	d00f      	beq.n	800ecf4 <TIM_Base_SetConfig+0x38>
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecda:	d00b      	beq.n	800ecf4 <TIM_Base_SetConfig+0x38>
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	4a31      	ldr	r2, [pc, #196]	; (800eda4 <TIM_Base_SetConfig+0xe8>)
 800ece0:	4293      	cmp	r3, r2
 800ece2:	d007      	beq.n	800ecf4 <TIM_Base_SetConfig+0x38>
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	4a30      	ldr	r2, [pc, #192]	; (800eda8 <TIM_Base_SetConfig+0xec>)
 800ece8:	4293      	cmp	r3, r2
 800ecea:	d003      	beq.n	800ecf4 <TIM_Base_SetConfig+0x38>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	4a2f      	ldr	r2, [pc, #188]	; (800edac <TIM_Base_SetConfig+0xf0>)
 800ecf0:	4293      	cmp	r3, r2
 800ecf2:	d108      	bne.n	800ed06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ecfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	685b      	ldr	r3, [r3, #4]
 800ed00:	68fa      	ldr	r2, [r7, #12]
 800ed02:	4313      	orrs	r3, r2
 800ed04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	4a25      	ldr	r2, [pc, #148]	; (800eda0 <TIM_Base_SetConfig+0xe4>)
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	d01b      	beq.n	800ed46 <TIM_Base_SetConfig+0x8a>
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed14:	d017      	beq.n	800ed46 <TIM_Base_SetConfig+0x8a>
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	4a22      	ldr	r2, [pc, #136]	; (800eda4 <TIM_Base_SetConfig+0xe8>)
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	d013      	beq.n	800ed46 <TIM_Base_SetConfig+0x8a>
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	4a21      	ldr	r2, [pc, #132]	; (800eda8 <TIM_Base_SetConfig+0xec>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d00f      	beq.n	800ed46 <TIM_Base_SetConfig+0x8a>
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	4a20      	ldr	r2, [pc, #128]	; (800edac <TIM_Base_SetConfig+0xf0>)
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	d00b      	beq.n	800ed46 <TIM_Base_SetConfig+0x8a>
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	4a1f      	ldr	r2, [pc, #124]	; (800edb0 <TIM_Base_SetConfig+0xf4>)
 800ed32:	4293      	cmp	r3, r2
 800ed34:	d007      	beq.n	800ed46 <TIM_Base_SetConfig+0x8a>
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	4a1e      	ldr	r2, [pc, #120]	; (800edb4 <TIM_Base_SetConfig+0xf8>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	d003      	beq.n	800ed46 <TIM_Base_SetConfig+0x8a>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	4a1d      	ldr	r2, [pc, #116]	; (800edb8 <TIM_Base_SetConfig+0xfc>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d108      	bne.n	800ed58 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ed4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	68db      	ldr	r3, [r3, #12]
 800ed52:	68fa      	ldr	r2, [r7, #12]
 800ed54:	4313      	orrs	r3, r2
 800ed56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	695b      	ldr	r3, [r3, #20]
 800ed62:	4313      	orrs	r3, r2
 800ed64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	68fa      	ldr	r2, [r7, #12]
 800ed6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	689a      	ldr	r2, [r3, #8]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	681a      	ldr	r2, [r3, #0]
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	4a08      	ldr	r2, [pc, #32]	; (800eda0 <TIM_Base_SetConfig+0xe4>)
 800ed80:	4293      	cmp	r3, r2
 800ed82:	d103      	bne.n	800ed8c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	691a      	ldr	r2, [r3, #16]
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2201      	movs	r2, #1
 800ed90:	615a      	str	r2, [r3, #20]
}
 800ed92:	bf00      	nop
 800ed94:	3714      	adds	r7, #20
 800ed96:	46bd      	mov	sp, r7
 800ed98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9c:	4770      	bx	lr
 800ed9e:	bf00      	nop
 800eda0:	40010000 	.word	0x40010000
 800eda4:	40000400 	.word	0x40000400
 800eda8:	40000800 	.word	0x40000800
 800edac:	40000c00 	.word	0x40000c00
 800edb0:	40014000 	.word	0x40014000
 800edb4:	40014400 	.word	0x40014400
 800edb8:	40014800 	.word	0x40014800

0800edbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b087      	sub	sp, #28
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6a1b      	ldr	r3, [r3, #32]
 800edca:	f023 0201 	bic.w	r2, r3, #1
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6a1b      	ldr	r3, [r3, #32]
 800edd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	699b      	ldr	r3, [r3, #24]
 800ede2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	f023 0303 	bic.w	r3, r3, #3
 800edf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	68fa      	ldr	r2, [r7, #12]
 800edfa:	4313      	orrs	r3, r2
 800edfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	f023 0302 	bic.w	r3, r3, #2
 800ee04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	689b      	ldr	r3, [r3, #8]
 800ee0a:	697a      	ldr	r2, [r7, #20]
 800ee0c:	4313      	orrs	r3, r2
 800ee0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	4a1c      	ldr	r2, [pc, #112]	; (800ee84 <TIM_OC1_SetConfig+0xc8>)
 800ee14:	4293      	cmp	r3, r2
 800ee16:	d10c      	bne.n	800ee32 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	f023 0308 	bic.w	r3, r3, #8
 800ee1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	68db      	ldr	r3, [r3, #12]
 800ee24:	697a      	ldr	r2, [r7, #20]
 800ee26:	4313      	orrs	r3, r2
 800ee28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	f023 0304 	bic.w	r3, r3, #4
 800ee30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	4a13      	ldr	r2, [pc, #76]	; (800ee84 <TIM_OC1_SetConfig+0xc8>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d111      	bne.n	800ee5e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ee40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ee42:	693b      	ldr	r3, [r7, #16]
 800ee44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ee48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	695b      	ldr	r3, [r3, #20]
 800ee4e:	693a      	ldr	r2, [r7, #16]
 800ee50:	4313      	orrs	r3, r2
 800ee52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	699b      	ldr	r3, [r3, #24]
 800ee58:	693a      	ldr	r2, [r7, #16]
 800ee5a:	4313      	orrs	r3, r2
 800ee5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	693a      	ldr	r2, [r7, #16]
 800ee62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	68fa      	ldr	r2, [r7, #12]
 800ee68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	685a      	ldr	r2, [r3, #4]
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	697a      	ldr	r2, [r7, #20]
 800ee76:	621a      	str	r2, [r3, #32]
}
 800ee78:	bf00      	nop
 800ee7a:	371c      	adds	r7, #28
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee82:	4770      	bx	lr
 800ee84:	40010000 	.word	0x40010000

0800ee88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b087      	sub	sp, #28
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6a1b      	ldr	r3, [r3, #32]
 800ee96:	f023 0210 	bic.w	r2, r3, #16
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6a1b      	ldr	r3, [r3, #32]
 800eea2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	685b      	ldr	r3, [r3, #4]
 800eea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	699b      	ldr	r3, [r3, #24]
 800eeae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eeb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	021b      	lsls	r3, r3, #8
 800eec6:	68fa      	ldr	r2, [r7, #12]
 800eec8:	4313      	orrs	r3, r2
 800eeca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eecc:	697b      	ldr	r3, [r7, #20]
 800eece:	f023 0320 	bic.w	r3, r3, #32
 800eed2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	689b      	ldr	r3, [r3, #8]
 800eed8:	011b      	lsls	r3, r3, #4
 800eeda:	697a      	ldr	r2, [r7, #20]
 800eedc:	4313      	orrs	r3, r2
 800eede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	4a1e      	ldr	r2, [pc, #120]	; (800ef5c <TIM_OC2_SetConfig+0xd4>)
 800eee4:	4293      	cmp	r3, r2
 800eee6:	d10d      	bne.n	800ef04 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eeee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	68db      	ldr	r3, [r3, #12]
 800eef4:	011b      	lsls	r3, r3, #4
 800eef6:	697a      	ldr	r2, [r7, #20]
 800eef8:	4313      	orrs	r3, r2
 800eefa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	4a15      	ldr	r2, [pc, #84]	; (800ef5c <TIM_OC2_SetConfig+0xd4>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d113      	bne.n	800ef34 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ef0c:	693b      	ldr	r3, [r7, #16]
 800ef0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ef12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ef14:	693b      	ldr	r3, [r7, #16]
 800ef16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ef1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	695b      	ldr	r3, [r3, #20]
 800ef20:	009b      	lsls	r3, r3, #2
 800ef22:	693a      	ldr	r2, [r7, #16]
 800ef24:	4313      	orrs	r3, r2
 800ef26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	699b      	ldr	r3, [r3, #24]
 800ef2c:	009b      	lsls	r3, r3, #2
 800ef2e:	693a      	ldr	r2, [r7, #16]
 800ef30:	4313      	orrs	r3, r2
 800ef32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	693a      	ldr	r2, [r7, #16]
 800ef38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	68fa      	ldr	r2, [r7, #12]
 800ef3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	685a      	ldr	r2, [r3, #4]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	697a      	ldr	r2, [r7, #20]
 800ef4c:	621a      	str	r2, [r3, #32]
}
 800ef4e:	bf00      	nop
 800ef50:	371c      	adds	r7, #28
 800ef52:	46bd      	mov	sp, r7
 800ef54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef58:	4770      	bx	lr
 800ef5a:	bf00      	nop
 800ef5c:	40010000 	.word	0x40010000

0800ef60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ef60:	b480      	push	{r7}
 800ef62:	b087      	sub	sp, #28
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6a1b      	ldr	r3, [r3, #32]
 800ef6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6a1b      	ldr	r3, [r3, #32]
 800ef7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	69db      	ldr	r3, [r3, #28]
 800ef86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	f023 0303 	bic.w	r3, r3, #3
 800ef96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	68fa      	ldr	r2, [r7, #12]
 800ef9e:	4313      	orrs	r3, r2
 800efa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800efa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	689b      	ldr	r3, [r3, #8]
 800efae:	021b      	lsls	r3, r3, #8
 800efb0:	697a      	ldr	r2, [r7, #20]
 800efb2:	4313      	orrs	r3, r2
 800efb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	4a1d      	ldr	r2, [pc, #116]	; (800f030 <TIM_OC3_SetConfig+0xd0>)
 800efba:	4293      	cmp	r3, r2
 800efbc:	d10d      	bne.n	800efda <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800efc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	68db      	ldr	r3, [r3, #12]
 800efca:	021b      	lsls	r3, r3, #8
 800efcc:	697a      	ldr	r2, [r7, #20]
 800efce:	4313      	orrs	r3, r2
 800efd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800efd2:	697b      	ldr	r3, [r7, #20]
 800efd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800efd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	4a14      	ldr	r2, [pc, #80]	; (800f030 <TIM_OC3_SetConfig+0xd0>)
 800efde:	4293      	cmp	r3, r2
 800efe0:	d113      	bne.n	800f00a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800efe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	695b      	ldr	r3, [r3, #20]
 800eff6:	011b      	lsls	r3, r3, #4
 800eff8:	693a      	ldr	r2, [r7, #16]
 800effa:	4313      	orrs	r3, r2
 800effc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	699b      	ldr	r3, [r3, #24]
 800f002:	011b      	lsls	r3, r3, #4
 800f004:	693a      	ldr	r2, [r7, #16]
 800f006:	4313      	orrs	r3, r2
 800f008:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	693a      	ldr	r2, [r7, #16]
 800f00e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	68fa      	ldr	r2, [r7, #12]
 800f014:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	685a      	ldr	r2, [r3, #4]
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	697a      	ldr	r2, [r7, #20]
 800f022:	621a      	str	r2, [r3, #32]
}
 800f024:	bf00      	nop
 800f026:	371c      	adds	r7, #28
 800f028:	46bd      	mov	sp, r7
 800f02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02e:	4770      	bx	lr
 800f030:	40010000 	.word	0x40010000

0800f034 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f034:	b480      	push	{r7}
 800f036:	b087      	sub	sp, #28
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6a1b      	ldr	r3, [r3, #32]
 800f042:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6a1b      	ldr	r3, [r3, #32]
 800f04e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	69db      	ldr	r3, [r3, #28]
 800f05a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f06a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	021b      	lsls	r3, r3, #8
 800f072:	68fa      	ldr	r2, [r7, #12]
 800f074:	4313      	orrs	r3, r2
 800f076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f07e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	689b      	ldr	r3, [r3, #8]
 800f084:	031b      	lsls	r3, r3, #12
 800f086:	693a      	ldr	r2, [r7, #16]
 800f088:	4313      	orrs	r3, r2
 800f08a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	4a10      	ldr	r2, [pc, #64]	; (800f0d0 <TIM_OC4_SetConfig+0x9c>)
 800f090:	4293      	cmp	r3, r2
 800f092:	d109      	bne.n	800f0a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f09a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	695b      	ldr	r3, [r3, #20]
 800f0a0:	019b      	lsls	r3, r3, #6
 800f0a2:	697a      	ldr	r2, [r7, #20]
 800f0a4:	4313      	orrs	r3, r2
 800f0a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	697a      	ldr	r2, [r7, #20]
 800f0ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	68fa      	ldr	r2, [r7, #12]
 800f0b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	685a      	ldr	r2, [r3, #4]
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	693a      	ldr	r2, [r7, #16]
 800f0c0:	621a      	str	r2, [r3, #32]
}
 800f0c2:	bf00      	nop
 800f0c4:	371c      	adds	r7, #28
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0cc:	4770      	bx	lr
 800f0ce:	bf00      	nop
 800f0d0:	40010000 	.word	0x40010000

0800f0d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b087      	sub	sp, #28
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	60f8      	str	r0, [r7, #12]
 800f0dc:	60b9      	str	r1, [r7, #8]
 800f0de:	607a      	str	r2, [r7, #4]
 800f0e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	6a1b      	ldr	r3, [r3, #32]
 800f0e6:	f023 0201 	bic.w	r2, r3, #1
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	699b      	ldr	r3, [r3, #24]
 800f0f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	6a1b      	ldr	r3, [r3, #32]
 800f0f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	4a24      	ldr	r2, [pc, #144]	; (800f190 <TIM_TI1_SetConfig+0xbc>)
 800f0fe:	4293      	cmp	r3, r2
 800f100:	d013      	beq.n	800f12a <TIM_TI1_SetConfig+0x56>
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f108:	d00f      	beq.n	800f12a <TIM_TI1_SetConfig+0x56>
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	4a21      	ldr	r2, [pc, #132]	; (800f194 <TIM_TI1_SetConfig+0xc0>)
 800f10e:	4293      	cmp	r3, r2
 800f110:	d00b      	beq.n	800f12a <TIM_TI1_SetConfig+0x56>
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	4a20      	ldr	r2, [pc, #128]	; (800f198 <TIM_TI1_SetConfig+0xc4>)
 800f116:	4293      	cmp	r3, r2
 800f118:	d007      	beq.n	800f12a <TIM_TI1_SetConfig+0x56>
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	4a1f      	ldr	r2, [pc, #124]	; (800f19c <TIM_TI1_SetConfig+0xc8>)
 800f11e:	4293      	cmp	r3, r2
 800f120:	d003      	beq.n	800f12a <TIM_TI1_SetConfig+0x56>
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	4a1e      	ldr	r2, [pc, #120]	; (800f1a0 <TIM_TI1_SetConfig+0xcc>)
 800f126:	4293      	cmp	r3, r2
 800f128:	d101      	bne.n	800f12e <TIM_TI1_SetConfig+0x5a>
 800f12a:	2301      	movs	r3, #1
 800f12c:	e000      	b.n	800f130 <TIM_TI1_SetConfig+0x5c>
 800f12e:	2300      	movs	r3, #0
 800f130:	2b00      	cmp	r3, #0
 800f132:	d008      	beq.n	800f146 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	f023 0303 	bic.w	r3, r3, #3
 800f13a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800f13c:	697a      	ldr	r2, [r7, #20]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	4313      	orrs	r3, r2
 800f142:	617b      	str	r3, [r7, #20]
 800f144:	e003      	b.n	800f14e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	f043 0301 	orr.w	r3, r3, #1
 800f14c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f154:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	011b      	lsls	r3, r3, #4
 800f15a:	b2db      	uxtb	r3, r3
 800f15c:	697a      	ldr	r2, [r7, #20]
 800f15e:	4313      	orrs	r3, r2
 800f160:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	f023 030a 	bic.w	r3, r3, #10
 800f168:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	f003 030a 	and.w	r3, r3, #10
 800f170:	693a      	ldr	r2, [r7, #16]
 800f172:	4313      	orrs	r3, r2
 800f174:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	697a      	ldr	r2, [r7, #20]
 800f17a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	693a      	ldr	r2, [r7, #16]
 800f180:	621a      	str	r2, [r3, #32]
}
 800f182:	bf00      	nop
 800f184:	371c      	adds	r7, #28
 800f186:	46bd      	mov	sp, r7
 800f188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18c:	4770      	bx	lr
 800f18e:	bf00      	nop
 800f190:	40010000 	.word	0x40010000
 800f194:	40000400 	.word	0x40000400
 800f198:	40000800 	.word	0x40000800
 800f19c:	40000c00 	.word	0x40000c00
 800f1a0:	40014000 	.word	0x40014000

0800f1a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b087      	sub	sp, #28
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	60f8      	str	r0, [r7, #12]
 800f1ac:	60b9      	str	r1, [r7, #8]
 800f1ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	6a1b      	ldr	r3, [r3, #32]
 800f1b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	6a1b      	ldr	r3, [r3, #32]
 800f1ba:	f023 0201 	bic.w	r2, r3, #1
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	699b      	ldr	r3, [r3, #24]
 800f1c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f1ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	011b      	lsls	r3, r3, #4
 800f1d4:	693a      	ldr	r2, [r7, #16]
 800f1d6:	4313      	orrs	r3, r2
 800f1d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f1da:	697b      	ldr	r3, [r7, #20]
 800f1dc:	f023 030a 	bic.w	r3, r3, #10
 800f1e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f1e2:	697a      	ldr	r2, [r7, #20]
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	693a      	ldr	r2, [r7, #16]
 800f1ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	697a      	ldr	r2, [r7, #20]
 800f1f4:	621a      	str	r2, [r3, #32]
}
 800f1f6:	bf00      	nop
 800f1f8:	371c      	adds	r7, #28
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f200:	4770      	bx	lr

0800f202 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f202:	b480      	push	{r7}
 800f204:	b087      	sub	sp, #28
 800f206:	af00      	add	r7, sp, #0
 800f208:	60f8      	str	r0, [r7, #12]
 800f20a:	60b9      	str	r1, [r7, #8]
 800f20c:	607a      	str	r2, [r7, #4]
 800f20e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	6a1b      	ldr	r3, [r3, #32]
 800f214:	f023 0210 	bic.w	r2, r3, #16
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	699b      	ldr	r3, [r3, #24]
 800f220:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	6a1b      	ldr	r3, [r3, #32]
 800f226:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f22e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	021b      	lsls	r3, r3, #8
 800f234:	697a      	ldr	r2, [r7, #20]
 800f236:	4313      	orrs	r3, r2
 800f238:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f240:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	031b      	lsls	r3, r3, #12
 800f246:	b29b      	uxth	r3, r3
 800f248:	697a      	ldr	r2, [r7, #20]
 800f24a:	4313      	orrs	r3, r2
 800f24c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f24e:	693b      	ldr	r3, [r7, #16]
 800f250:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f254:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	011b      	lsls	r3, r3, #4
 800f25a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f25e:	693a      	ldr	r2, [r7, #16]
 800f260:	4313      	orrs	r3, r2
 800f262:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	697a      	ldr	r2, [r7, #20]
 800f268:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	693a      	ldr	r2, [r7, #16]
 800f26e:	621a      	str	r2, [r3, #32]
}
 800f270:	bf00      	nop
 800f272:	371c      	adds	r7, #28
 800f274:	46bd      	mov	sp, r7
 800f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27a:	4770      	bx	lr

0800f27c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f27c:	b480      	push	{r7}
 800f27e:	b087      	sub	sp, #28
 800f280:	af00      	add	r7, sp, #0
 800f282:	60f8      	str	r0, [r7, #12]
 800f284:	60b9      	str	r1, [r7, #8]
 800f286:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	6a1b      	ldr	r3, [r3, #32]
 800f28c:	f023 0210 	bic.w	r2, r3, #16
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	699b      	ldr	r3, [r3, #24]
 800f298:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	6a1b      	ldr	r3, [r3, #32]
 800f29e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f2a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	031b      	lsls	r3, r3, #12
 800f2ac:	697a      	ldr	r2, [r7, #20]
 800f2ae:	4313      	orrs	r3, r2
 800f2b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f2b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	011b      	lsls	r3, r3, #4
 800f2be:	693a      	ldr	r2, [r7, #16]
 800f2c0:	4313      	orrs	r3, r2
 800f2c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	697a      	ldr	r2, [r7, #20]
 800f2c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	693a      	ldr	r2, [r7, #16]
 800f2ce:	621a      	str	r2, [r3, #32]
}
 800f2d0:	bf00      	nop
 800f2d2:	371c      	adds	r7, #28
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2da:	4770      	bx	lr

0800f2dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f2dc:	b480      	push	{r7}
 800f2de:	b087      	sub	sp, #28
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	60f8      	str	r0, [r7, #12]
 800f2e4:	60b9      	str	r1, [r7, #8]
 800f2e6:	607a      	str	r2, [r7, #4]
 800f2e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	6a1b      	ldr	r3, [r3, #32]
 800f2ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	69db      	ldr	r3, [r3, #28]
 800f2fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	6a1b      	ldr	r3, [r3, #32]
 800f300:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	f023 0303 	bic.w	r3, r3, #3
 800f308:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800f30a:	697a      	ldr	r2, [r7, #20]
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	4313      	orrs	r3, r2
 800f310:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f318:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	011b      	lsls	r3, r3, #4
 800f31e:	b2db      	uxtb	r3, r3
 800f320:	697a      	ldr	r2, [r7, #20]
 800f322:	4313      	orrs	r3, r2
 800f324:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800f32c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	021b      	lsls	r3, r3, #8
 800f332:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800f336:	693a      	ldr	r2, [r7, #16]
 800f338:	4313      	orrs	r3, r2
 800f33a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	697a      	ldr	r2, [r7, #20]
 800f340:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	693a      	ldr	r2, [r7, #16]
 800f346:	621a      	str	r2, [r3, #32]
}
 800f348:	bf00      	nop
 800f34a:	371c      	adds	r7, #28
 800f34c:	46bd      	mov	sp, r7
 800f34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f352:	4770      	bx	lr

0800f354 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f354:	b480      	push	{r7}
 800f356:	b087      	sub	sp, #28
 800f358:	af00      	add	r7, sp, #0
 800f35a:	60f8      	str	r0, [r7, #12]
 800f35c:	60b9      	str	r1, [r7, #8]
 800f35e:	607a      	str	r2, [r7, #4]
 800f360:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	6a1b      	ldr	r3, [r3, #32]
 800f366:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	69db      	ldr	r3, [r3, #28]
 800f372:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	6a1b      	ldr	r3, [r3, #32]
 800f378:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f380:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	021b      	lsls	r3, r3, #8
 800f386:	697a      	ldr	r2, [r7, #20]
 800f388:	4313      	orrs	r3, r2
 800f38a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f392:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	031b      	lsls	r3, r3, #12
 800f398:	b29b      	uxth	r3, r3
 800f39a:	697a      	ldr	r2, [r7, #20]
 800f39c:	4313      	orrs	r3, r2
 800f39e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800f3a0:	693b      	ldr	r3, [r7, #16]
 800f3a2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800f3a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800f3a8:	68bb      	ldr	r3, [r7, #8]
 800f3aa:	031b      	lsls	r3, r3, #12
 800f3ac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800f3b0:	693a      	ldr	r2, [r7, #16]
 800f3b2:	4313      	orrs	r3, r2
 800f3b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	697a      	ldr	r2, [r7, #20]
 800f3ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	693a      	ldr	r2, [r7, #16]
 800f3c0:	621a      	str	r2, [r3, #32]
}
 800f3c2:	bf00      	nop
 800f3c4:	371c      	adds	r7, #28
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3cc:	4770      	bx	lr

0800f3ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f3ce:	b480      	push	{r7}
 800f3d0:	b085      	sub	sp, #20
 800f3d2:	af00      	add	r7, sp, #0
 800f3d4:	6078      	str	r0, [r7, #4]
 800f3d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	689b      	ldr	r3, [r3, #8]
 800f3dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f3e6:	683a      	ldr	r2, [r7, #0]
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	4313      	orrs	r3, r2
 800f3ec:	f043 0307 	orr.w	r3, r3, #7
 800f3f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	68fa      	ldr	r2, [r7, #12]
 800f3f6:	609a      	str	r2, [r3, #8]
}
 800f3f8:	bf00      	nop
 800f3fa:	3714      	adds	r7, #20
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f402:	4770      	bx	lr

0800f404 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f404:	b480      	push	{r7}
 800f406:	b087      	sub	sp, #28
 800f408:	af00      	add	r7, sp, #0
 800f40a:	60f8      	str	r0, [r7, #12]
 800f40c:	60b9      	str	r1, [r7, #8]
 800f40e:	607a      	str	r2, [r7, #4]
 800f410:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	689b      	ldr	r3, [r3, #8]
 800f416:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f41e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	021a      	lsls	r2, r3, #8
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	431a      	orrs	r2, r3
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	4313      	orrs	r3, r2
 800f42c:	697a      	ldr	r2, [r7, #20]
 800f42e:	4313      	orrs	r3, r2
 800f430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	697a      	ldr	r2, [r7, #20]
 800f436:	609a      	str	r2, [r3, #8]
}
 800f438:	bf00      	nop
 800f43a:	371c      	adds	r7, #28
 800f43c:	46bd      	mov	sp, r7
 800f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f442:	4770      	bx	lr

0800f444 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f444:	b480      	push	{r7}
 800f446:	b087      	sub	sp, #28
 800f448:	af00      	add	r7, sp, #0
 800f44a:	60f8      	str	r0, [r7, #12]
 800f44c:	60b9      	str	r1, [r7, #8]
 800f44e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	f003 031f 	and.w	r3, r3, #31
 800f456:	2201      	movs	r2, #1
 800f458:	fa02 f303 	lsl.w	r3, r2, r3
 800f45c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	6a1a      	ldr	r2, [r3, #32]
 800f462:	697b      	ldr	r3, [r7, #20]
 800f464:	43db      	mvns	r3, r3
 800f466:	401a      	ands	r2, r3
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	6a1a      	ldr	r2, [r3, #32]
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	f003 031f 	and.w	r3, r3, #31
 800f476:	6879      	ldr	r1, [r7, #4]
 800f478:	fa01 f303 	lsl.w	r3, r1, r3
 800f47c:	431a      	orrs	r2, r3
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	621a      	str	r2, [r3, #32]
}
 800f482:	bf00      	nop
 800f484:	371c      	adds	r7, #28
 800f486:	46bd      	mov	sp, r7
 800f488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48c:	4770      	bx	lr
	...

0800f490 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800f490:	b480      	push	{r7}
 800f492:	b083      	sub	sp, #12
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	4a1c      	ldr	r2, [pc, #112]	; (800f50c <TIM_ResetCallback+0x7c>)
 800f49c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	4a1b      	ldr	r2, [pc, #108]	; (800f510 <TIM_ResetCallback+0x80>)
 800f4a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	4a1a      	ldr	r2, [pc, #104]	; (800f514 <TIM_ResetCallback+0x84>)
 800f4ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	4a19      	ldr	r2, [pc, #100]	; (800f518 <TIM_ResetCallback+0x88>)
 800f4b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	4a18      	ldr	r2, [pc, #96]	; (800f51c <TIM_ResetCallback+0x8c>)
 800f4bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	4a17      	ldr	r2, [pc, #92]	; (800f520 <TIM_ResetCallback+0x90>)
 800f4c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	4a16      	ldr	r2, [pc, #88]	; (800f524 <TIM_ResetCallback+0x94>)
 800f4cc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	4a15      	ldr	r2, [pc, #84]	; (800f528 <TIM_ResetCallback+0x98>)
 800f4d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	4a14      	ldr	r2, [pc, #80]	; (800f52c <TIM_ResetCallback+0x9c>)
 800f4dc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	4a13      	ldr	r2, [pc, #76]	; (800f530 <TIM_ResetCallback+0xa0>)
 800f4e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	4a12      	ldr	r2, [pc, #72]	; (800f534 <TIM_ResetCallback+0xa4>)
 800f4ec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	4a11      	ldr	r2, [pc, #68]	; (800f538 <TIM_ResetCallback+0xa8>)
 800f4f4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	4a10      	ldr	r2, [pc, #64]	; (800f53c <TIM_ResetCallback+0xac>)
 800f4fc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800f500:	bf00      	nop
 800f502:	370c      	adds	r7, #12
 800f504:	46bd      	mov	sp, r7
 800f506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50a:	4770      	bx	lr
 800f50c:	0801237d 	.word	0x0801237d
 800f510:	0800ec15 	.word	0x0800ec15
 800f514:	0800ec79 	.word	0x0800ec79
 800f518:	0800ec8d 	.word	0x0800ec8d
 800f51c:	08011951 	.word	0x08011951
 800f520:	0800ec3d 	.word	0x0800ec3d
 800f524:	0800ec29 	.word	0x0800ec29
 800f528:	0800ec51 	.word	0x0800ec51
 800f52c:	0800ec65 	.word	0x0800ec65
 800f530:	08012051 	.word	0x08012051
 800f534:	0800f61d 	.word	0x0800f61d
 800f538:	0800f631 	.word	0x0800f631
 800f53c:	0800f645 	.word	0x0800f645

0800f540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f540:	b480      	push	{r7}
 800f542:	b085      	sub	sp, #20
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
 800f548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f550:	2b01      	cmp	r3, #1
 800f552:	d101      	bne.n	800f558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f554:	2302      	movs	r3, #2
 800f556:	e050      	b.n	800f5fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2201      	movs	r2, #1
 800f55c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2202      	movs	r2, #2
 800f564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	685b      	ldr	r3, [r3, #4]
 800f56e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	689b      	ldr	r3, [r3, #8]
 800f576:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f57e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	68fa      	ldr	r2, [r7, #12]
 800f586:	4313      	orrs	r3, r2
 800f588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	68fa      	ldr	r2, [r7, #12]
 800f590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	4a1c      	ldr	r2, [pc, #112]	; (800f608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800f598:	4293      	cmp	r3, r2
 800f59a:	d018      	beq.n	800f5ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5a4:	d013      	beq.n	800f5ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	4a18      	ldr	r2, [pc, #96]	; (800f60c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d00e      	beq.n	800f5ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	4a16      	ldr	r2, [pc, #88]	; (800f610 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800f5b6:	4293      	cmp	r3, r2
 800f5b8:	d009      	beq.n	800f5ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	4a15      	ldr	r2, [pc, #84]	; (800f614 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800f5c0:	4293      	cmp	r3, r2
 800f5c2:	d004      	beq.n	800f5ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	4a13      	ldr	r2, [pc, #76]	; (800f618 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	d10c      	bne.n	800f5e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f5d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	68ba      	ldr	r2, [r7, #8]
 800f5dc:	4313      	orrs	r3, r2
 800f5de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	68ba      	ldr	r2, [r7, #8]
 800f5e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2201      	movs	r2, #1
 800f5ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f5f8:	2300      	movs	r3, #0
}
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3714      	adds	r7, #20
 800f5fe:	46bd      	mov	sp, r7
 800f600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f604:	4770      	bx	lr
 800f606:	bf00      	nop
 800f608:	40010000 	.word	0x40010000
 800f60c:	40000400 	.word	0x40000400
 800f610:	40000800 	.word	0x40000800
 800f614:	40000c00 	.word	0x40000c00
 800f618:	40014000 	.word	0x40014000

0800f61c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f61c:	b480      	push	{r7}
 800f61e:	b083      	sub	sp, #12
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f624:	bf00      	nop
 800f626:	370c      	adds	r7, #12
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr

0800f630 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f630:	b480      	push	{r7}
 800f632:	b083      	sub	sp, #12
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800f638:	bf00      	nop
 800f63a:	370c      	adds	r7, #12
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr

0800f644 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f644:	b480      	push	{r7}
 800f646:	b083      	sub	sp, #12
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f64c:	bf00      	nop
 800f64e:	370c      	adds	r7, #12
 800f650:	46bd      	mov	sp, r7
 800f652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f656:	4770      	bx	lr

0800f658 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b082      	sub	sp, #8
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d101      	bne.n	800f66a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f666:	2301      	movs	r3, #1
 800f668:	e04a      	b.n	800f700 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f670:	b2db      	uxtb	r3, r3
 800f672:	2b00      	cmp	r3, #0
 800f674:	d111      	bne.n	800f69a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2200      	movs	r2, #0
 800f67a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f000 fbf8 	bl	800fe74 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d102      	bne.n	800f692 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	4a1e      	ldr	r2, [pc, #120]	; (800f708 <HAL_UART_Init+0xb0>)
 800f690:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	2224      	movs	r2, #36	; 0x24
 800f69e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	68da      	ldr	r2, [r3, #12]
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f6b0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	f000 fdf2 	bl	801029c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	691a      	ldr	r2, [r3, #16]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f6c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	695a      	ldr	r2, [r3, #20]
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f6d6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	68da      	ldr	r2, [r3, #12]
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f6e6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2220      	movs	r2, #32
 800f6f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2220      	movs	r2, #32
 800f6fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f6fe:	2300      	movs	r3, #0
}
 800f700:	4618      	mov	r0, r3
 800f702:	3708      	adds	r7, #8
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}
 800f708:	08007581 	.word	0x08007581

0800f70c <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b082      	sub	sp, #8
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d101      	bne.n	800f71e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800f71a:	2301      	movs	r3, #1
 800f71c:	e029      	b.n	800f772 <HAL_UART_DeInit+0x66>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2224      	movs	r2, #36	; 0x24
 800f722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	68da      	ldr	r2, [r3, #12]
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f734:	60da      	str	r2, [r3, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  if (huart->MspDeInitCallback == NULL)
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d102      	bne.n	800f744 <HAL_UART_DeInit+0x38>
  {
    huart->MspDeInitCallback = HAL_UART_MspDeInit;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	4a0e      	ldr	r2, [pc, #56]	; (800f77c <HAL_UART_DeInit+0x70>)
 800f742:	671a      	str	r2, [r3, #112]	; 0x70
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	4798      	blx	r3
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2200      	movs	r2, #0
 800f750:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2200      	movs	r2, #0
 800f756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2200      	movs	r2, #0
 800f75e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2200      	movs	r2, #0
 800f766:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2200      	movs	r2, #0
 800f76c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f770:	2300      	movs	r3, #0
}
 800f772:	4618      	mov	r0, r3
 800f774:	3708      	adds	r7, #8
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	08007611 	.word	0x08007611

0800f780 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f780:	b480      	push	{r7}
 800f782:	b085      	sub	sp, #20
 800f784:	af00      	add	r7, sp, #0
 800f786:	60f8      	str	r0, [r7, #12]
 800f788:	60b9      	str	r1, [r7, #8]
 800f78a:	4613      	mov	r3, r2
 800f78c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f794:	b2db      	uxtb	r3, r3
 800f796:	2b20      	cmp	r3, #32
 800f798:	d130      	bne.n	800f7fc <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d002      	beq.n	800f7a6 <HAL_UART_Transmit_IT+0x26>
 800f7a0:	88fb      	ldrh	r3, [r7, #6]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d101      	bne.n	800f7aa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	e029      	b.n	800f7fe <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f7b0:	2b01      	cmp	r3, #1
 800f7b2:	d101      	bne.n	800f7b8 <HAL_UART_Transmit_IT+0x38>
 800f7b4:	2302      	movs	r3, #2
 800f7b6:	e022      	b.n	800f7fe <HAL_UART_Transmit_IT+0x7e>
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	2201      	movs	r2, #1
 800f7bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	68ba      	ldr	r2, [r7, #8]
 800f7c4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	88fa      	ldrh	r2, [r7, #6]
 800f7ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	88fa      	ldrh	r2, [r7, #6]
 800f7d0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	2221      	movs	r2, #33	; 0x21
 800f7dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	68da      	ldr	r2, [r3, #12]
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f7f6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	e000      	b.n	800f7fe <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800f7fc:	2302      	movs	r3, #2
  }
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3714      	adds	r7, #20
 800f802:	46bd      	mov	sp, r7
 800f804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f808:	4770      	bx	lr

0800f80a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f80a:	b580      	push	{r7, lr}
 800f80c:	b084      	sub	sp, #16
 800f80e:	af00      	add	r7, sp, #0
 800f810:	60f8      	str	r0, [r7, #12]
 800f812:	60b9      	str	r1, [r7, #8]
 800f814:	4613      	mov	r3, r2
 800f816:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f81e:	b2db      	uxtb	r3, r3
 800f820:	2b20      	cmp	r3, #32
 800f822:	d11d      	bne.n	800f860 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d002      	beq.n	800f830 <HAL_UART_Receive_IT+0x26>
 800f82a:	88fb      	ldrh	r3, [r7, #6]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d101      	bne.n	800f834 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800f830:	2301      	movs	r3, #1
 800f832:	e016      	b.n	800f862 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f83a:	2b01      	cmp	r3, #1
 800f83c:	d101      	bne.n	800f842 <HAL_UART_Receive_IT+0x38>
 800f83e:	2302      	movs	r3, #2
 800f840:	e00f      	b.n	800f862 <HAL_UART_Receive_IT+0x58>
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	2201      	movs	r2, #1
 800f846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	2200      	movs	r2, #0
 800f84e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f850:	88fb      	ldrh	r3, [r7, #6]
 800f852:	461a      	mov	r2, r3
 800f854:	68b9      	ldr	r1, [r7, #8]
 800f856:	68f8      	ldr	r0, [r7, #12]
 800f858:	f000 fb44 	bl	800fee4 <UART_Start_Receive_IT>
 800f85c:	4603      	mov	r3, r0
 800f85e:	e000      	b.n	800f862 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800f860:	2302      	movs	r3, #2
  }
}
 800f862:	4618      	mov	r0, r3
 800f864:	3710      	adds	r7, #16
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}
	...

0800f86c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b0ba      	sub	sp, #232	; 0xe8
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	68db      	ldr	r3, [r3, #12]
 800f884:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	695b      	ldr	r3, [r3, #20]
 800f88e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800f892:	2300      	movs	r3, #0
 800f894:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800f898:	2300      	movs	r3, #0
 800f89a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f89e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f8a2:	f003 030f 	and.w	r3, r3, #15
 800f8a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800f8aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d10f      	bne.n	800f8d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f8b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f8b6:	f003 0320 	and.w	r3, r3, #32
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d009      	beq.n	800f8d2 <HAL_UART_IRQHandler+0x66>
 800f8be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f8c2:	f003 0320 	and.w	r3, r3, #32
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d003      	beq.n	800f8d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f000 fc29 	bl	8010122 <UART_Receive_IT>
      return;
 800f8d0:	e25b      	b.n	800fd8a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800f8d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	f000 80e1 	beq.w	800fa9e <HAL_UART_IRQHandler+0x232>
 800f8dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f8e0:	f003 0301 	and.w	r3, r3, #1
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d106      	bne.n	800f8f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f8e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f8ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	f000 80d4 	beq.w	800fa9e <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f8f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f8fa:	f003 0301 	and.w	r3, r3, #1
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d00b      	beq.n	800f91a <HAL_UART_IRQHandler+0xae>
 800f902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d005      	beq.n	800f91a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f912:	f043 0201 	orr.w	r2, r3, #1
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f91a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f91e:	f003 0304 	and.w	r3, r3, #4
 800f922:	2b00      	cmp	r3, #0
 800f924:	d00b      	beq.n	800f93e <HAL_UART_IRQHandler+0xd2>
 800f926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f92a:	f003 0301 	and.w	r3, r3, #1
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d005      	beq.n	800f93e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f936:	f043 0202 	orr.w	r2, r3, #2
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f93e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f942:	f003 0302 	and.w	r3, r3, #2
 800f946:	2b00      	cmp	r3, #0
 800f948:	d00b      	beq.n	800f962 <HAL_UART_IRQHandler+0xf6>
 800f94a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f94e:	f003 0301 	and.w	r3, r3, #1
 800f952:	2b00      	cmp	r3, #0
 800f954:	d005      	beq.n	800f962 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f95a:	f043 0204 	orr.w	r2, r3, #4
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800f962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f966:	f003 0308 	and.w	r3, r3, #8
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d011      	beq.n	800f992 <HAL_UART_IRQHandler+0x126>
 800f96e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f972:	f003 0320 	and.w	r3, r3, #32
 800f976:	2b00      	cmp	r3, #0
 800f978:	d105      	bne.n	800f986 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800f97a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f97e:	f003 0301 	and.w	r3, r3, #1
 800f982:	2b00      	cmp	r3, #0
 800f984:	d005      	beq.n	800f992 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f98a:	f043 0208 	orr.w	r2, r3, #8
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f996:	2b00      	cmp	r3, #0
 800f998:	f000 81f2 	beq.w	800fd80 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f99c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9a0:	f003 0320 	and.w	r3, r3, #32
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d008      	beq.n	800f9ba <HAL_UART_IRQHandler+0x14e>
 800f9a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f9ac:	f003 0320 	and.w	r3, r3, #32
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d002      	beq.n	800f9ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f000 fbb4 	bl	8010122 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	695b      	ldr	r3, [r3, #20]
 800f9c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9c4:	2b40      	cmp	r3, #64	; 0x40
 800f9c6:	bf0c      	ite	eq
 800f9c8:	2301      	moveq	r3, #1
 800f9ca:	2300      	movne	r3, #0
 800f9cc:	b2db      	uxtb	r3, r3
 800f9ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9d6:	f003 0308 	and.w	r3, r3, #8
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d103      	bne.n	800f9e6 <HAL_UART_IRQHandler+0x17a>
 800f9de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d051      	beq.n	800fa8a <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f000 faba 	bl	800ff60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	695b      	ldr	r3, [r3, #20]
 800f9f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9f6:	2b40      	cmp	r3, #64	; 0x40
 800f9f8:	d142      	bne.n	800fa80 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	3314      	adds	r3, #20
 800fa00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fa08:	e853 3f00 	ldrex	r3, [r3]
 800fa0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800fa10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fa14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	3314      	adds	r3, #20
 800fa22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800fa26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800fa2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800fa32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800fa36:	e841 2300 	strex	r3, r2, [r1]
 800fa3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800fa3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d1d9      	bne.n	800f9fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d013      	beq.n	800fa76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa52:	4a7f      	ldr	r2, [pc, #508]	; (800fc50 <HAL_UART_IRQHandler+0x3e4>)
 800fa54:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7f9 fb50 	bl	8009100 <HAL_DMA_Abort_IT>
 800fa60:	4603      	mov	r3, r0
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d019      	beq.n	800fa9a <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa6c:	687a      	ldr	r2, [r7, #4]
 800fa6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fa70:	4610      	mov	r0, r2
 800fa72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa74:	e011      	b.n	800fa9a <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa7e:	e00c      	b.n	800fa9a <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa88:	e007      	b.n	800fa9a <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	2200      	movs	r2, #0
 800fa96:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800fa98:	e172      	b.n	800fd80 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa9a:	bf00      	nop
    return;
 800fa9c:	e170      	b.n	800fd80 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800faa2:	2b01      	cmp	r3, #1
 800faa4:	f040 814c 	bne.w	800fd40 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800faa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800faac:	f003 0310 	and.w	r3, r3, #16
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	f000 8145 	beq.w	800fd40 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800fab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800faba:	f003 0310 	and.w	r3, r3, #16
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	f000 813e 	beq.w	800fd40 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800fac4:	2300      	movs	r3, #0
 800fac6:	60bb      	str	r3, [r7, #8]
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	60bb      	str	r3, [r7, #8]
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	685b      	ldr	r3, [r3, #4]
 800fad6:	60bb      	str	r3, [r7, #8]
 800fad8:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	695b      	ldr	r3, [r3, #20]
 800fae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fae4:	2b40      	cmp	r3, #64	; 0x40
 800fae6:	f040 80b5 	bne.w	800fc54 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	685b      	ldr	r3, [r3, #4]
 800faf2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800faf6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	f000 8142 	beq.w	800fd84 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800fb04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	f080 813b 	bcs.w	800fd84 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fb14:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb1a:	69db      	ldr	r3, [r3, #28]
 800fb1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb20:	f000 8088 	beq.w	800fc34 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	330c      	adds	r3, #12
 800fb2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fb32:	e853 3f00 	ldrex	r3, [r3]
 800fb36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800fb3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fb3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fb42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	330c      	adds	r3, #12
 800fb4c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800fb50:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800fb54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb58:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fb5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fb60:	e841 2300 	strex	r3, r2, [r1]
 800fb64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800fb68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d1d9      	bne.n	800fb24 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	3314      	adds	r3, #20
 800fb76:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb7a:	e853 3f00 	ldrex	r3, [r3]
 800fb7e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fb80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb82:	f023 0301 	bic.w	r3, r3, #1
 800fb86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	3314      	adds	r3, #20
 800fb90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fb94:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fb98:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb9a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fb9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fba0:	e841 2300 	strex	r3, r2, [r1]
 800fba4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fba6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d1e1      	bne.n	800fb70 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	3314      	adds	r3, #20
 800fbb2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fbb6:	e853 3f00 	ldrex	r3, [r3]
 800fbba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fbbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fbc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	3314      	adds	r3, #20
 800fbcc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800fbd0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fbd2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbd4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fbd6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fbd8:	e841 2300 	strex	r3, r2, [r1]
 800fbdc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fbde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d1e3      	bne.n	800fbac <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2220      	movs	r2, #32
 800fbe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2200      	movs	r2, #0
 800fbf0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	330c      	adds	r3, #12
 800fbf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbfc:	e853 3f00 	ldrex	r3, [r3]
 800fc00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fc02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc04:	f023 0310 	bic.w	r3, r3, #16
 800fc08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	330c      	adds	r3, #12
 800fc12:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800fc16:	65ba      	str	r2, [r7, #88]	; 0x58
 800fc18:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fc1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fc1e:	e841 2300 	strex	r3, r2, [r1]
 800fc22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fc24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d1e3      	bne.n	800fbf2 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f7f9 f9f6 	bl	8009020 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fc38:	687a      	ldr	r2, [r7, #4]
 800fc3a:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800fc3c:	687a      	ldr	r2, [r7, #4]
 800fc3e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800fc40:	b292      	uxth	r2, r2
 800fc42:	1a8a      	subs	r2, r1, r2
 800fc44:	b292      	uxth	r2, r2
 800fc46:	4611      	mov	r1, r2
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800fc4c:	e09a      	b.n	800fd84 <HAL_UART_IRQHandler+0x518>
 800fc4e:	bf00      	nop
 800fc50:	08010027 	.word	0x08010027
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fc5c:	b29b      	uxth	r3, r3
 800fc5e:	1ad3      	subs	r3, r2, r3
 800fc60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fc68:	b29b      	uxth	r3, r3
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	f000 808c 	beq.w	800fd88 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800fc70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	f000 8087 	beq.w	800fd88 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	330c      	adds	r3, #12
 800fc80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc84:	e853 3f00 	ldrex	r3, [r3]
 800fc88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fc8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fc90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	330c      	adds	r3, #12
 800fc9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800fc9e:	647a      	str	r2, [r7, #68]	; 0x44
 800fca0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fca2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fca4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fca6:	e841 2300 	strex	r3, r2, [r1]
 800fcaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fcac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d1e3      	bne.n	800fc7a <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	3314      	adds	r3, #20
 800fcb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcbc:	e853 3f00 	ldrex	r3, [r3]
 800fcc0:	623b      	str	r3, [r7, #32]
   return(result);
 800fcc2:	6a3b      	ldr	r3, [r7, #32]
 800fcc4:	f023 0301 	bic.w	r3, r3, #1
 800fcc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	3314      	adds	r3, #20
 800fcd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800fcd6:	633a      	str	r2, [r7, #48]	; 0x30
 800fcd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fcdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcde:	e841 2300 	strex	r3, r2, [r1]
 800fce2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d1e3      	bne.n	800fcb2 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2220      	movs	r2, #32
 800fcee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	330c      	adds	r3, #12
 800fcfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd00:	693b      	ldr	r3, [r7, #16]
 800fd02:	e853 3f00 	ldrex	r3, [r3]
 800fd06:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	f023 0310 	bic.w	r3, r3, #16
 800fd0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	330c      	adds	r3, #12
 800fd18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800fd1c:	61fa      	str	r2, [r7, #28]
 800fd1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd20:	69b9      	ldr	r1, [r7, #24]
 800fd22:	69fa      	ldr	r2, [r7, #28]
 800fd24:	e841 2300 	strex	r3, r2, [r1]
 800fd28:	617b      	str	r3, [r7, #20]
   return(result);
 800fd2a:	697b      	ldr	r3, [r7, #20]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d1e3      	bne.n	800fcf8 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fd34:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800fd38:	4611      	mov	r1, r2
 800fd3a:	6878      	ldr	r0, [r7, #4]
 800fd3c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800fd3e:	e023      	b.n	800fd88 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800fd40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d009      	beq.n	800fd60 <HAL_UART_IRQHandler+0x4f4>
 800fd4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fd50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d003      	beq.n	800fd60 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f000 f979 	bl	8010050 <UART_Transmit_IT>
    return;
 800fd5e:	e014      	b.n	800fd8a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800fd60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d00e      	beq.n	800fd8a <HAL_UART_IRQHandler+0x51e>
 800fd6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fd70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d008      	beq.n	800fd8a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f000 f9b9 	bl	80100f0 <UART_EndTransmit_IT>
    return;
 800fd7e:	e004      	b.n	800fd8a <HAL_UART_IRQHandler+0x51e>
    return;
 800fd80:	bf00      	nop
 800fd82:	e002      	b.n	800fd8a <HAL_UART_IRQHandler+0x51e>
      return;
 800fd84:	bf00      	nop
 800fd86:	e000      	b.n	800fd8a <HAL_UART_IRQHandler+0x51e>
      return;
 800fd88:	bf00      	nop
  }
}
 800fd8a:	37e8      	adds	r7, #232	; 0xe8
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}

0800fd90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fd90:	b480      	push	{r7}
 800fd92:	b083      	sub	sp, #12
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800fd98:	bf00      	nop
 800fd9a:	370c      	adds	r7, #12
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda2:	4770      	bx	lr

0800fda4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fda4:	b480      	push	{r7}
 800fda6:	b083      	sub	sp, #12
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800fdac:	bf00      	nop
 800fdae:	370c      	adds	r7, #12
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb6:	4770      	bx	lr

0800fdb8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fdb8:	b480      	push	{r7}
 800fdba:	b083      	sub	sp, #12
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800fdc0:	bf00      	nop
 800fdc2:	370c      	adds	r7, #12
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdca:	4770      	bx	lr

0800fdcc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800fdcc:	b480      	push	{r7}
 800fdce:	b083      	sub	sp, #12
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800fdd4:	bf00      	nop
 800fdd6:	370c      	adds	r7, #12
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdde:	4770      	bx	lr

0800fde0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800fde0:	b480      	push	{r7}
 800fde2:	b083      	sub	sp, #12
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800fde8:	bf00      	nop
 800fdea:	370c      	adds	r7, #12
 800fdec:	46bd      	mov	sp, r7
 800fdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf2:	4770      	bx	lr

0800fdf4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800fdf4:	b480      	push	{r7}
 800fdf6:	b083      	sub	sp, #12
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800fdfc:	bf00      	nop
 800fdfe:	370c      	adds	r7, #12
 800fe00:	46bd      	mov	sp, r7
 800fe02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe06:	4770      	bx	lr

0800fe08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fe08:	b480      	push	{r7}
 800fe0a:	b083      	sub	sp, #12
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	460b      	mov	r3, r1
 800fe12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fe14:	bf00      	nop
 800fe16:	370c      	adds	r7, #12
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1e:	4770      	bx	lr

0800fe20 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800fe20:	b480      	push	{r7}
 800fe22:	b085      	sub	sp, #20
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	60fb      	str	r3, [r7, #12]
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fe36:	b2db      	uxtb	r3, r3
 800fe38:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fe40:	b2db      	uxtb	r3, r3
 800fe42:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	b2da      	uxtb	r2, r3
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	b2db      	uxtb	r3, r3
 800fe4c:	4313      	orrs	r3, r2
 800fe4e:	b2db      	uxtb	r3, r3
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3714      	adds	r7, #20
 800fe54:	46bd      	mov	sp, r7
 800fe56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5a:	4770      	bx	lr

0800fe5c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b083      	sub	sp, #12
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800fe68:	4618      	mov	r0, r3
 800fe6a:	370c      	adds	r7, #12
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe72:	4770      	bx	lr

0800fe74 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800fe74:	b480      	push	{r7}
 800fe76:	b083      	sub	sp, #12
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	4a10      	ldr	r2, [pc, #64]	; (800fec0 <UART_InitCallbacksToDefault+0x4c>)
 800fe80:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	4a0f      	ldr	r2, [pc, #60]	; (800fec4 <UART_InitCallbacksToDefault+0x50>)
 800fe86:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	4a0f      	ldr	r2, [pc, #60]	; (800fec8 <UART_InitCallbacksToDefault+0x54>)
 800fe8c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	4a0e      	ldr	r2, [pc, #56]	; (800fecc <UART_InitCallbacksToDefault+0x58>)
 800fe92:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	4a0e      	ldr	r2, [pc, #56]	; (800fed0 <UART_InitCallbacksToDefault+0x5c>)
 800fe98:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	4a0d      	ldr	r2, [pc, #52]	; (800fed4 <UART_InitCallbacksToDefault+0x60>)
 800fe9e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	4a0d      	ldr	r2, [pc, #52]	; (800fed8 <UART_InitCallbacksToDefault+0x64>)
 800fea4:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	4a0c      	ldr	r2, [pc, #48]	; (800fedc <UART_InitCallbacksToDefault+0x68>)
 800feaa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	4a0c      	ldr	r2, [pc, #48]	; (800fee0 <UART_InitCallbacksToDefault+0x6c>)
 800feb0:	669a      	str	r2, [r3, #104]	; 0x68

}
 800feb2:	bf00      	nop
 800feb4:	370c      	adds	r7, #12
 800feb6:	46bd      	mov	sp, r7
 800feb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febc:	4770      	bx	lr
 800febe:	bf00      	nop
 800fec0:	0800fda5 	.word	0x0800fda5
 800fec4:	0800fd91 	.word	0x0800fd91
 800fec8:	0800fdb9 	.word	0x0800fdb9
 800fecc:	08005935 	.word	0x08005935
 800fed0:	08005879 	.word	0x08005879
 800fed4:	0800fdcd 	.word	0x0800fdcd
 800fed8:	0800fde1 	.word	0x0800fde1
 800fedc:	0800fdf5 	.word	0x0800fdf5
 800fee0:	0800fe09 	.word	0x0800fe09

0800fee4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fee4:	b480      	push	{r7}
 800fee6:	b085      	sub	sp, #20
 800fee8:	af00      	add	r7, sp, #0
 800feea:	60f8      	str	r0, [r7, #12]
 800feec:	60b9      	str	r1, [r7, #8]
 800feee:	4613      	mov	r3, r2
 800fef0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	68ba      	ldr	r2, [r7, #8]
 800fef6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	88fa      	ldrh	r2, [r7, #6]
 800fefc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	88fa      	ldrh	r2, [r7, #6]
 800ff02:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	2200      	movs	r2, #0
 800ff08:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	2222      	movs	r2, #34	; 0x22
 800ff0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	2200      	movs	r2, #0
 800ff16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	691b      	ldr	r3, [r3, #16]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d007      	beq.n	800ff32 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	68da      	ldr	r2, [r3, #12]
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ff30:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	695a      	ldr	r2, [r3, #20]
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	f042 0201 	orr.w	r2, r2, #1
 800ff40:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	68da      	ldr	r2, [r3, #12]
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	f042 0220 	orr.w	r2, r2, #32
 800ff50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ff52:	2300      	movs	r3, #0
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	3714      	adds	r7, #20
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5e:	4770      	bx	lr

0800ff60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ff60:	b480      	push	{r7}
 800ff62:	b095      	sub	sp, #84	; 0x54
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	330c      	adds	r3, #12
 800ff6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff72:	e853 3f00 	ldrex	r3, [r3]
 800ff76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ff78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ff7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	330c      	adds	r3, #12
 800ff86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ff88:	643a      	str	r2, [r7, #64]	; 0x40
 800ff8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ff8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ff90:	e841 2300 	strex	r3, r2, [r1]
 800ff94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ff96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d1e5      	bne.n	800ff68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	3314      	adds	r3, #20
 800ffa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffa4:	6a3b      	ldr	r3, [r7, #32]
 800ffa6:	e853 3f00 	ldrex	r3, [r3]
 800ffaa:	61fb      	str	r3, [r7, #28]
   return(result);
 800ffac:	69fb      	ldr	r3, [r7, #28]
 800ffae:	f023 0301 	bic.w	r3, r3, #1
 800ffb2:	64bb      	str	r3, [r7, #72]	; 0x48
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	3314      	adds	r3, #20
 800ffba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ffbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ffbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ffc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffc4:	e841 2300 	strex	r3, r2, [r1]
 800ffc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ffca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d1e5      	bne.n	800ff9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffd4:	2b01      	cmp	r3, #1
 800ffd6:	d119      	bne.n	801000c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	330c      	adds	r3, #12
 800ffde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	e853 3f00 	ldrex	r3, [r3]
 800ffe6:	60bb      	str	r3, [r7, #8]
   return(result);
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	f023 0310 	bic.w	r3, r3, #16
 800ffee:	647b      	str	r3, [r7, #68]	; 0x44
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	330c      	adds	r3, #12
 800fff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fff8:	61ba      	str	r2, [r7, #24]
 800fffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fffc:	6979      	ldr	r1, [r7, #20]
 800fffe:	69ba      	ldr	r2, [r7, #24]
 8010000:	e841 2300 	strex	r3, r2, [r1]
 8010004:	613b      	str	r3, [r7, #16]
   return(result);
 8010006:	693b      	ldr	r3, [r7, #16]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d1e5      	bne.n	800ffd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2220      	movs	r2, #32
 8010010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2200      	movs	r2, #0
 8010018:	631a      	str	r2, [r3, #48]	; 0x30
}
 801001a:	bf00      	nop
 801001c:	3754      	adds	r7, #84	; 0x54
 801001e:	46bd      	mov	sp, r7
 8010020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010024:	4770      	bx	lr

08010026 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010026:	b580      	push	{r7, lr}
 8010028:	b084      	sub	sp, #16
 801002a:	af00      	add	r7, sp, #0
 801002c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010032:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	2200      	movs	r2, #0
 8010038:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	2200      	movs	r2, #0
 801003e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010044:	68f8      	ldr	r0, [r7, #12]
 8010046:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010048:	bf00      	nop
 801004a:	3710      	adds	r7, #16
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}

08010050 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010050:	b480      	push	{r7}
 8010052:	b085      	sub	sp, #20
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801005e:	b2db      	uxtb	r3, r3
 8010060:	2b21      	cmp	r3, #33	; 0x21
 8010062:	d13e      	bne.n	80100e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	689b      	ldr	r3, [r3, #8]
 8010068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801006c:	d114      	bne.n	8010098 <UART_Transmit_IT+0x48>
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	691b      	ldr	r3, [r3, #16]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d110      	bne.n	8010098 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6a1b      	ldr	r3, [r3, #32]
 801007a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	881b      	ldrh	r3, [r3, #0]
 8010080:	461a      	mov	r2, r3
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801008a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	6a1b      	ldr	r3, [r3, #32]
 8010090:	1c9a      	adds	r2, r3, #2
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	621a      	str	r2, [r3, #32]
 8010096:	e008      	b.n	80100aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	6a1b      	ldr	r3, [r3, #32]
 801009c:	1c59      	adds	r1, r3, #1
 801009e:	687a      	ldr	r2, [r7, #4]
 80100a0:	6211      	str	r1, [r2, #32]
 80100a2:	781a      	ldrb	r2, [r3, #0]
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80100ae:	b29b      	uxth	r3, r3
 80100b0:	3b01      	subs	r3, #1
 80100b2:	b29b      	uxth	r3, r3
 80100b4:	687a      	ldr	r2, [r7, #4]
 80100b6:	4619      	mov	r1, r3
 80100b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d10f      	bne.n	80100de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	68da      	ldr	r2, [r3, #12]
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80100cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	68da      	ldr	r2, [r3, #12]
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80100dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80100de:	2300      	movs	r3, #0
 80100e0:	e000      	b.n	80100e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80100e2:	2302      	movs	r3, #2
  }
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	3714      	adds	r7, #20
 80100e8:	46bd      	mov	sp, r7
 80100ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ee:	4770      	bx	lr

080100f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b082      	sub	sp, #8
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	68da      	ldr	r2, [r3, #12]
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010106:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2220      	movs	r2, #32
 801010c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010114:	6878      	ldr	r0, [r7, #4]
 8010116:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010118:	2300      	movs	r3, #0
}
 801011a:	4618      	mov	r0, r3
 801011c:	3708      	adds	r7, #8
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}

08010122 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010122:	b580      	push	{r7, lr}
 8010124:	b08c      	sub	sp, #48	; 0x30
 8010126:	af00      	add	r7, sp, #0
 8010128:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010130:	b2db      	uxtb	r3, r3
 8010132:	2b22      	cmp	r3, #34	; 0x22
 8010134:	f040 80ad 	bne.w	8010292 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	689b      	ldr	r3, [r3, #8]
 801013c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010140:	d117      	bne.n	8010172 <UART_Receive_IT+0x50>
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	691b      	ldr	r3, [r3, #16]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d113      	bne.n	8010172 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801014a:	2300      	movs	r3, #0
 801014c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010152:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	685b      	ldr	r3, [r3, #4]
 801015a:	b29b      	uxth	r3, r3
 801015c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010160:	b29a      	uxth	r2, r3
 8010162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010164:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801016a:	1c9a      	adds	r2, r3, #2
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	629a      	str	r2, [r3, #40]	; 0x28
 8010170:	e026      	b.n	80101c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010176:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8010178:	2300      	movs	r3, #0
 801017a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	689b      	ldr	r3, [r3, #8]
 8010180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010184:	d007      	beq.n	8010196 <UART_Receive_IT+0x74>
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	689b      	ldr	r3, [r3, #8]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d10a      	bne.n	80101a4 <UART_Receive_IT+0x82>
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	691b      	ldr	r3, [r3, #16]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d106      	bne.n	80101a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	685b      	ldr	r3, [r3, #4]
 801019c:	b2da      	uxtb	r2, r3
 801019e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101a0:	701a      	strb	r2, [r3, #0]
 80101a2:	e008      	b.n	80101b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	685b      	ldr	r3, [r3, #4]
 80101aa:	b2db      	uxtb	r3, r3
 80101ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101b0:	b2da      	uxtb	r2, r3
 80101b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101ba:	1c5a      	adds	r2, r3, #1
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80101c4:	b29b      	uxth	r3, r3
 80101c6:	3b01      	subs	r3, #1
 80101c8:	b29b      	uxth	r3, r3
 80101ca:	687a      	ldr	r2, [r7, #4]
 80101cc:	4619      	mov	r1, r3
 80101ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d15c      	bne.n	801028e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	68da      	ldr	r2, [r3, #12]
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	f022 0220 	bic.w	r2, r2, #32
 80101e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	68da      	ldr	r2, [r3, #12]
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80101f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	695a      	ldr	r2, [r3, #20]
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	f022 0201 	bic.w	r2, r2, #1
 8010202:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	2220      	movs	r2, #32
 8010208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010210:	2b01      	cmp	r3, #1
 8010212:	d136      	bne.n	8010282 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2200      	movs	r2, #0
 8010218:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	330c      	adds	r3, #12
 8010220:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010222:	697b      	ldr	r3, [r7, #20]
 8010224:	e853 3f00 	ldrex	r3, [r3]
 8010228:	613b      	str	r3, [r7, #16]
   return(result);
 801022a:	693b      	ldr	r3, [r7, #16]
 801022c:	f023 0310 	bic.w	r3, r3, #16
 8010230:	627b      	str	r3, [r7, #36]	; 0x24
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	330c      	adds	r3, #12
 8010238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801023a:	623a      	str	r2, [r7, #32]
 801023c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801023e:	69f9      	ldr	r1, [r7, #28]
 8010240:	6a3a      	ldr	r2, [r7, #32]
 8010242:	e841 2300 	strex	r3, r2, [r1]
 8010246:	61bb      	str	r3, [r7, #24]
   return(result);
 8010248:	69bb      	ldr	r3, [r7, #24]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d1e5      	bne.n	801021a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	f003 0310 	and.w	r3, r3, #16
 8010258:	2b10      	cmp	r3, #16
 801025a:	d10a      	bne.n	8010272 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801025c:	2300      	movs	r3, #0
 801025e:	60fb      	str	r3, [r7, #12]
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	60fb      	str	r3, [r7, #12]
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	685b      	ldr	r3, [r3, #4]
 801026e:	60fb      	str	r3, [r7, #12]
 8010270:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010276:	687a      	ldr	r2, [r7, #4]
 8010278:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 801027a:	4611      	mov	r1, r2
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	4798      	blx	r3
 8010280:	e003      	b.n	801028a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801028a:	2300      	movs	r3, #0
 801028c:	e002      	b.n	8010294 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 801028e:	2300      	movs	r3, #0
 8010290:	e000      	b.n	8010294 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8010292:	2302      	movs	r3, #2
  }
}
 8010294:	4618      	mov	r0, r3
 8010296:	3730      	adds	r7, #48	; 0x30
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}

0801029c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801029c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80102a0:	b0c0      	sub	sp, #256	; 0x100
 80102a2:	af00      	add	r7, sp, #0
 80102a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80102a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	691b      	ldr	r3, [r3, #16]
 80102b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80102b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80102b8:	68d9      	ldr	r1, [r3, #12]
 80102ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80102be:	681a      	ldr	r2, [r3, #0]
 80102c0:	ea40 0301 	orr.w	r3, r0, r1
 80102c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80102c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80102ca:	689a      	ldr	r2, [r3, #8]
 80102cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80102d0:	691b      	ldr	r3, [r3, #16]
 80102d2:	431a      	orrs	r2, r3
 80102d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80102d8:	695b      	ldr	r3, [r3, #20]
 80102da:	431a      	orrs	r2, r3
 80102dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80102e0:	69db      	ldr	r3, [r3, #28]
 80102e2:	4313      	orrs	r3, r2
 80102e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80102e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	68db      	ldr	r3, [r3, #12]
 80102f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80102f4:	f021 010c 	bic.w	r1, r1, #12
 80102f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80102fc:	681a      	ldr	r2, [r3, #0]
 80102fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010302:	430b      	orrs	r3, r1
 8010304:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	695b      	ldr	r3, [r3, #20]
 801030e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8010312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010316:	6999      	ldr	r1, [r3, #24]
 8010318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801031c:	681a      	ldr	r2, [r3, #0]
 801031e:	ea40 0301 	orr.w	r3, r0, r1
 8010322:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010328:	681a      	ldr	r2, [r3, #0]
 801032a:	4b8f      	ldr	r3, [pc, #572]	; (8010568 <UART_SetConfig+0x2cc>)
 801032c:	429a      	cmp	r2, r3
 801032e:	d005      	beq.n	801033c <UART_SetConfig+0xa0>
 8010330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010334:	681a      	ldr	r2, [r3, #0]
 8010336:	4b8d      	ldr	r3, [pc, #564]	; (801056c <UART_SetConfig+0x2d0>)
 8010338:	429a      	cmp	r2, r3
 801033a:	d104      	bne.n	8010346 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801033c:	f7fc fa58 	bl	800c7f0 <HAL_RCC_GetPCLK2Freq>
 8010340:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8010344:	e003      	b.n	801034e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010346:	f7fc fa3f 	bl	800c7c8 <HAL_RCC_GetPCLK1Freq>
 801034a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801034e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010352:	69db      	ldr	r3, [r3, #28]
 8010354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010358:	f040 810c 	bne.w	8010574 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801035c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010360:	2200      	movs	r2, #0
 8010362:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010366:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801036a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801036e:	4622      	mov	r2, r4
 8010370:	462b      	mov	r3, r5
 8010372:	1891      	adds	r1, r2, r2
 8010374:	65b9      	str	r1, [r7, #88]	; 0x58
 8010376:	415b      	adcs	r3, r3
 8010378:	65fb      	str	r3, [r7, #92]	; 0x5c
 801037a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801037e:	4621      	mov	r1, r4
 8010380:	eb12 0801 	adds.w	r8, r2, r1
 8010384:	4629      	mov	r1, r5
 8010386:	eb43 0901 	adc.w	r9, r3, r1
 801038a:	f04f 0200 	mov.w	r2, #0
 801038e:	f04f 0300 	mov.w	r3, #0
 8010392:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010396:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801039a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801039e:	4690      	mov	r8, r2
 80103a0:	4699      	mov	r9, r3
 80103a2:	4623      	mov	r3, r4
 80103a4:	eb18 0303 	adds.w	r3, r8, r3
 80103a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80103ac:	462b      	mov	r3, r5
 80103ae:	eb49 0303 	adc.w	r3, r9, r3
 80103b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80103b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80103ba:	685b      	ldr	r3, [r3, #4]
 80103bc:	2200      	movs	r2, #0
 80103be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80103c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80103c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80103ca:	460b      	mov	r3, r1
 80103cc:	18db      	adds	r3, r3, r3
 80103ce:	653b      	str	r3, [r7, #80]	; 0x50
 80103d0:	4613      	mov	r3, r2
 80103d2:	eb42 0303 	adc.w	r3, r2, r3
 80103d6:	657b      	str	r3, [r7, #84]	; 0x54
 80103d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80103dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80103e0:	f7f0 fb44 	bl	8000a6c <__aeabi_uldivmod>
 80103e4:	4602      	mov	r2, r0
 80103e6:	460b      	mov	r3, r1
 80103e8:	4b61      	ldr	r3, [pc, #388]	; (8010570 <UART_SetConfig+0x2d4>)
 80103ea:	fba3 2302 	umull	r2, r3, r3, r2
 80103ee:	095b      	lsrs	r3, r3, #5
 80103f0:	011c      	lsls	r4, r3, #4
 80103f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80103f6:	2200      	movs	r2, #0
 80103f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80103fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8010400:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8010404:	4642      	mov	r2, r8
 8010406:	464b      	mov	r3, r9
 8010408:	1891      	adds	r1, r2, r2
 801040a:	64b9      	str	r1, [r7, #72]	; 0x48
 801040c:	415b      	adcs	r3, r3
 801040e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010410:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8010414:	4641      	mov	r1, r8
 8010416:	eb12 0a01 	adds.w	sl, r2, r1
 801041a:	4649      	mov	r1, r9
 801041c:	eb43 0b01 	adc.w	fp, r3, r1
 8010420:	f04f 0200 	mov.w	r2, #0
 8010424:	f04f 0300 	mov.w	r3, #0
 8010428:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801042c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010430:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010434:	4692      	mov	sl, r2
 8010436:	469b      	mov	fp, r3
 8010438:	4643      	mov	r3, r8
 801043a:	eb1a 0303 	adds.w	r3, sl, r3
 801043e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010442:	464b      	mov	r3, r9
 8010444:	eb4b 0303 	adc.w	r3, fp, r3
 8010448:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801044c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010450:	685b      	ldr	r3, [r3, #4]
 8010452:	2200      	movs	r2, #0
 8010454:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010458:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801045c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8010460:	460b      	mov	r3, r1
 8010462:	18db      	adds	r3, r3, r3
 8010464:	643b      	str	r3, [r7, #64]	; 0x40
 8010466:	4613      	mov	r3, r2
 8010468:	eb42 0303 	adc.w	r3, r2, r3
 801046c:	647b      	str	r3, [r7, #68]	; 0x44
 801046e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010472:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8010476:	f7f0 faf9 	bl	8000a6c <__aeabi_uldivmod>
 801047a:	4602      	mov	r2, r0
 801047c:	460b      	mov	r3, r1
 801047e:	4611      	mov	r1, r2
 8010480:	4b3b      	ldr	r3, [pc, #236]	; (8010570 <UART_SetConfig+0x2d4>)
 8010482:	fba3 2301 	umull	r2, r3, r3, r1
 8010486:	095b      	lsrs	r3, r3, #5
 8010488:	2264      	movs	r2, #100	; 0x64
 801048a:	fb02 f303 	mul.w	r3, r2, r3
 801048e:	1acb      	subs	r3, r1, r3
 8010490:	00db      	lsls	r3, r3, #3
 8010492:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8010496:	4b36      	ldr	r3, [pc, #216]	; (8010570 <UART_SetConfig+0x2d4>)
 8010498:	fba3 2302 	umull	r2, r3, r3, r2
 801049c:	095b      	lsrs	r3, r3, #5
 801049e:	005b      	lsls	r3, r3, #1
 80104a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80104a4:	441c      	add	r4, r3
 80104a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80104aa:	2200      	movs	r2, #0
 80104ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80104b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80104b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80104b8:	4642      	mov	r2, r8
 80104ba:	464b      	mov	r3, r9
 80104bc:	1891      	adds	r1, r2, r2
 80104be:	63b9      	str	r1, [r7, #56]	; 0x38
 80104c0:	415b      	adcs	r3, r3
 80104c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80104c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80104c8:	4641      	mov	r1, r8
 80104ca:	1851      	adds	r1, r2, r1
 80104cc:	6339      	str	r1, [r7, #48]	; 0x30
 80104ce:	4649      	mov	r1, r9
 80104d0:	414b      	adcs	r3, r1
 80104d2:	637b      	str	r3, [r7, #52]	; 0x34
 80104d4:	f04f 0200 	mov.w	r2, #0
 80104d8:	f04f 0300 	mov.w	r3, #0
 80104dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80104e0:	4659      	mov	r1, fp
 80104e2:	00cb      	lsls	r3, r1, #3
 80104e4:	4651      	mov	r1, sl
 80104e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80104ea:	4651      	mov	r1, sl
 80104ec:	00ca      	lsls	r2, r1, #3
 80104ee:	4610      	mov	r0, r2
 80104f0:	4619      	mov	r1, r3
 80104f2:	4603      	mov	r3, r0
 80104f4:	4642      	mov	r2, r8
 80104f6:	189b      	adds	r3, r3, r2
 80104f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80104fc:	464b      	mov	r3, r9
 80104fe:	460a      	mov	r2, r1
 8010500:	eb42 0303 	adc.w	r3, r2, r3
 8010504:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801050c:	685b      	ldr	r3, [r3, #4]
 801050e:	2200      	movs	r2, #0
 8010510:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8010514:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8010518:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801051c:	460b      	mov	r3, r1
 801051e:	18db      	adds	r3, r3, r3
 8010520:	62bb      	str	r3, [r7, #40]	; 0x28
 8010522:	4613      	mov	r3, r2
 8010524:	eb42 0303 	adc.w	r3, r2, r3
 8010528:	62fb      	str	r3, [r7, #44]	; 0x2c
 801052a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801052e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8010532:	f7f0 fa9b 	bl	8000a6c <__aeabi_uldivmod>
 8010536:	4602      	mov	r2, r0
 8010538:	460b      	mov	r3, r1
 801053a:	4b0d      	ldr	r3, [pc, #52]	; (8010570 <UART_SetConfig+0x2d4>)
 801053c:	fba3 1302 	umull	r1, r3, r3, r2
 8010540:	095b      	lsrs	r3, r3, #5
 8010542:	2164      	movs	r1, #100	; 0x64
 8010544:	fb01 f303 	mul.w	r3, r1, r3
 8010548:	1ad3      	subs	r3, r2, r3
 801054a:	00db      	lsls	r3, r3, #3
 801054c:	3332      	adds	r3, #50	; 0x32
 801054e:	4a08      	ldr	r2, [pc, #32]	; (8010570 <UART_SetConfig+0x2d4>)
 8010550:	fba2 2303 	umull	r2, r3, r2, r3
 8010554:	095b      	lsrs	r3, r3, #5
 8010556:	f003 0207 	and.w	r2, r3, #7
 801055a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	4422      	add	r2, r4
 8010562:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010564:	e105      	b.n	8010772 <UART_SetConfig+0x4d6>
 8010566:	bf00      	nop
 8010568:	40011000 	.word	0x40011000
 801056c:	40011400 	.word	0x40011400
 8010570:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010578:	2200      	movs	r2, #0
 801057a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801057e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010582:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8010586:	4642      	mov	r2, r8
 8010588:	464b      	mov	r3, r9
 801058a:	1891      	adds	r1, r2, r2
 801058c:	6239      	str	r1, [r7, #32]
 801058e:	415b      	adcs	r3, r3
 8010590:	627b      	str	r3, [r7, #36]	; 0x24
 8010592:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010596:	4641      	mov	r1, r8
 8010598:	1854      	adds	r4, r2, r1
 801059a:	4649      	mov	r1, r9
 801059c:	eb43 0501 	adc.w	r5, r3, r1
 80105a0:	f04f 0200 	mov.w	r2, #0
 80105a4:	f04f 0300 	mov.w	r3, #0
 80105a8:	00eb      	lsls	r3, r5, #3
 80105aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80105ae:	00e2      	lsls	r2, r4, #3
 80105b0:	4614      	mov	r4, r2
 80105b2:	461d      	mov	r5, r3
 80105b4:	4643      	mov	r3, r8
 80105b6:	18e3      	adds	r3, r4, r3
 80105b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80105bc:	464b      	mov	r3, r9
 80105be:	eb45 0303 	adc.w	r3, r5, r3
 80105c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80105c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80105ca:	685b      	ldr	r3, [r3, #4]
 80105cc:	2200      	movs	r2, #0
 80105ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80105d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80105d6:	f04f 0200 	mov.w	r2, #0
 80105da:	f04f 0300 	mov.w	r3, #0
 80105de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80105e2:	4629      	mov	r1, r5
 80105e4:	008b      	lsls	r3, r1, #2
 80105e6:	4621      	mov	r1, r4
 80105e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80105ec:	4621      	mov	r1, r4
 80105ee:	008a      	lsls	r2, r1, #2
 80105f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80105f4:	f7f0 fa3a 	bl	8000a6c <__aeabi_uldivmod>
 80105f8:	4602      	mov	r2, r0
 80105fa:	460b      	mov	r3, r1
 80105fc:	4b60      	ldr	r3, [pc, #384]	; (8010780 <UART_SetConfig+0x4e4>)
 80105fe:	fba3 2302 	umull	r2, r3, r3, r2
 8010602:	095b      	lsrs	r3, r3, #5
 8010604:	011c      	lsls	r4, r3, #4
 8010606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801060a:	2200      	movs	r2, #0
 801060c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010610:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010614:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8010618:	4642      	mov	r2, r8
 801061a:	464b      	mov	r3, r9
 801061c:	1891      	adds	r1, r2, r2
 801061e:	61b9      	str	r1, [r7, #24]
 8010620:	415b      	adcs	r3, r3
 8010622:	61fb      	str	r3, [r7, #28]
 8010624:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010628:	4641      	mov	r1, r8
 801062a:	1851      	adds	r1, r2, r1
 801062c:	6139      	str	r1, [r7, #16]
 801062e:	4649      	mov	r1, r9
 8010630:	414b      	adcs	r3, r1
 8010632:	617b      	str	r3, [r7, #20]
 8010634:	f04f 0200 	mov.w	r2, #0
 8010638:	f04f 0300 	mov.w	r3, #0
 801063c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010640:	4659      	mov	r1, fp
 8010642:	00cb      	lsls	r3, r1, #3
 8010644:	4651      	mov	r1, sl
 8010646:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801064a:	4651      	mov	r1, sl
 801064c:	00ca      	lsls	r2, r1, #3
 801064e:	4610      	mov	r0, r2
 8010650:	4619      	mov	r1, r3
 8010652:	4603      	mov	r3, r0
 8010654:	4642      	mov	r2, r8
 8010656:	189b      	adds	r3, r3, r2
 8010658:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801065c:	464b      	mov	r3, r9
 801065e:	460a      	mov	r2, r1
 8010660:	eb42 0303 	adc.w	r3, r2, r3
 8010664:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801066c:	685b      	ldr	r3, [r3, #4]
 801066e:	2200      	movs	r2, #0
 8010670:	67bb      	str	r3, [r7, #120]	; 0x78
 8010672:	67fa      	str	r2, [r7, #124]	; 0x7c
 8010674:	f04f 0200 	mov.w	r2, #0
 8010678:	f04f 0300 	mov.w	r3, #0
 801067c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8010680:	4649      	mov	r1, r9
 8010682:	008b      	lsls	r3, r1, #2
 8010684:	4641      	mov	r1, r8
 8010686:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801068a:	4641      	mov	r1, r8
 801068c:	008a      	lsls	r2, r1, #2
 801068e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8010692:	f7f0 f9eb 	bl	8000a6c <__aeabi_uldivmod>
 8010696:	4602      	mov	r2, r0
 8010698:	460b      	mov	r3, r1
 801069a:	4b39      	ldr	r3, [pc, #228]	; (8010780 <UART_SetConfig+0x4e4>)
 801069c:	fba3 1302 	umull	r1, r3, r3, r2
 80106a0:	095b      	lsrs	r3, r3, #5
 80106a2:	2164      	movs	r1, #100	; 0x64
 80106a4:	fb01 f303 	mul.w	r3, r1, r3
 80106a8:	1ad3      	subs	r3, r2, r3
 80106aa:	011b      	lsls	r3, r3, #4
 80106ac:	3332      	adds	r3, #50	; 0x32
 80106ae:	4a34      	ldr	r2, [pc, #208]	; (8010780 <UART_SetConfig+0x4e4>)
 80106b0:	fba2 2303 	umull	r2, r3, r2, r3
 80106b4:	095b      	lsrs	r3, r3, #5
 80106b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80106ba:	441c      	add	r4, r3
 80106bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80106c0:	2200      	movs	r2, #0
 80106c2:	673b      	str	r3, [r7, #112]	; 0x70
 80106c4:	677a      	str	r2, [r7, #116]	; 0x74
 80106c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80106ca:	4642      	mov	r2, r8
 80106cc:	464b      	mov	r3, r9
 80106ce:	1891      	adds	r1, r2, r2
 80106d0:	60b9      	str	r1, [r7, #8]
 80106d2:	415b      	adcs	r3, r3
 80106d4:	60fb      	str	r3, [r7, #12]
 80106d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80106da:	4641      	mov	r1, r8
 80106dc:	1851      	adds	r1, r2, r1
 80106de:	6039      	str	r1, [r7, #0]
 80106e0:	4649      	mov	r1, r9
 80106e2:	414b      	adcs	r3, r1
 80106e4:	607b      	str	r3, [r7, #4]
 80106e6:	f04f 0200 	mov.w	r2, #0
 80106ea:	f04f 0300 	mov.w	r3, #0
 80106ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80106f2:	4659      	mov	r1, fp
 80106f4:	00cb      	lsls	r3, r1, #3
 80106f6:	4651      	mov	r1, sl
 80106f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80106fc:	4651      	mov	r1, sl
 80106fe:	00ca      	lsls	r2, r1, #3
 8010700:	4610      	mov	r0, r2
 8010702:	4619      	mov	r1, r3
 8010704:	4603      	mov	r3, r0
 8010706:	4642      	mov	r2, r8
 8010708:	189b      	adds	r3, r3, r2
 801070a:	66bb      	str	r3, [r7, #104]	; 0x68
 801070c:	464b      	mov	r3, r9
 801070e:	460a      	mov	r2, r1
 8010710:	eb42 0303 	adc.w	r3, r2, r3
 8010714:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801071a:	685b      	ldr	r3, [r3, #4]
 801071c:	2200      	movs	r2, #0
 801071e:	663b      	str	r3, [r7, #96]	; 0x60
 8010720:	667a      	str	r2, [r7, #100]	; 0x64
 8010722:	f04f 0200 	mov.w	r2, #0
 8010726:	f04f 0300 	mov.w	r3, #0
 801072a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801072e:	4649      	mov	r1, r9
 8010730:	008b      	lsls	r3, r1, #2
 8010732:	4641      	mov	r1, r8
 8010734:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010738:	4641      	mov	r1, r8
 801073a:	008a      	lsls	r2, r1, #2
 801073c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010740:	f7f0 f994 	bl	8000a6c <__aeabi_uldivmod>
 8010744:	4602      	mov	r2, r0
 8010746:	460b      	mov	r3, r1
 8010748:	4b0d      	ldr	r3, [pc, #52]	; (8010780 <UART_SetConfig+0x4e4>)
 801074a:	fba3 1302 	umull	r1, r3, r3, r2
 801074e:	095b      	lsrs	r3, r3, #5
 8010750:	2164      	movs	r1, #100	; 0x64
 8010752:	fb01 f303 	mul.w	r3, r1, r3
 8010756:	1ad3      	subs	r3, r2, r3
 8010758:	011b      	lsls	r3, r3, #4
 801075a:	3332      	adds	r3, #50	; 0x32
 801075c:	4a08      	ldr	r2, [pc, #32]	; (8010780 <UART_SetConfig+0x4e4>)
 801075e:	fba2 2303 	umull	r2, r3, r2, r3
 8010762:	095b      	lsrs	r3, r3, #5
 8010764:	f003 020f 	and.w	r2, r3, #15
 8010768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	4422      	add	r2, r4
 8010770:	609a      	str	r2, [r3, #8]
}
 8010772:	bf00      	nop
 8010774:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8010778:	46bd      	mov	sp, r7
 801077a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801077e:	bf00      	nop
 8010780:	51eb851f 	.word	0x51eb851f

08010784 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d101      	bne.n	8010796 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8010792:	2301      	movs	r3, #1
 8010794:	e025      	b.n	80107e2 <HAL_WWDG_Init+0x5e>
  assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
  assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));

#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
  /* Reset Callback pointers */
  if (hwwdg->EwiCallback == NULL)
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	695b      	ldr	r3, [r3, #20]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d102      	bne.n	80107a4 <HAL_WWDG_Init+0x20>
  {
    hwwdg->EwiCallback = HAL_WWDG_EarlyWakeupCallback;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	4a12      	ldr	r2, [pc, #72]	; (80107ec <HAL_WWDG_Init+0x68>)
 80107a2:	615a      	str	r2, [r3, #20]
  }

  if (hwwdg->MspInitCallback == NULL)
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	699b      	ldr	r3, [r3, #24]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d102      	bne.n	80107b2 <HAL_WWDG_Init+0x2e>
  {
    hwwdg->MspInitCallback = HAL_WWDG_MspInit;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	4a10      	ldr	r2, [pc, #64]	; (80107f0 <HAL_WWDG_Init+0x6c>)
 80107b0:	619a      	str	r2, [r3, #24]
  }

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	699b      	ldr	r3, [r3, #24]
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	4798      	blx	r3
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	68da      	ldr	r2, [r3, #12]
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80107c6:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	691a      	ldr	r2, [r3, #16]
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	685b      	ldr	r3, [r3, #4]
 80107d0:	ea42 0103 	orr.w	r1, r2, r3
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	689a      	ldr	r2, [r3, #8]
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	430a      	orrs	r2, r1
 80107de:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80107e0:	2300      	movs	r3, #0
}
 80107e2:	4618      	mov	r0, r3
 80107e4:	3708      	adds	r7, #8
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd80      	pop	{r7, pc}
 80107ea:	bf00      	nop
 80107ec:	0801793b 	.word	0x0801793b
 80107f0:	08007655 	.word	0x08007655

080107f4 <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 80107f4:	b480      	push	{r7}
 80107f6:	b083      	sub	sp, #12
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	687a      	ldr	r2, [r7, #4]
 8010802:	68d2      	ldr	r2, [r2, #12]
 8010804:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8010806:	2300      	movs	r3, #0
}
 8010808:	4618      	mov	r0, r3
 801080a:	370c      	adds	r7, #12
 801080c:	46bd      	mov	sp, r7
 801080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010812:	4770      	bx	lr

08010814 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b082      	sub	sp, #8
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	685b      	ldr	r3, [r3, #4]
 8010822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801082a:	d10f      	bne.n	801084c <HAL_WWDG_IRQHandler+0x38>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	689b      	ldr	r3, [r3, #8]
 8010832:	f003 0301 	and.w	r3, r3, #1
 8010836:	2b01      	cmp	r3, #1
 8010838:	d108      	bne.n	801084c <HAL_WWDG_IRQHandler+0x38>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	f06f 0201 	mvn.w	r2, #1
 8010842:	609a      	str	r2, [r3, #8]

#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	695b      	ldr	r3, [r3, #20]
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	4798      	blx	r3
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 801084c:	bf00      	nop
 801084e:	3708      	adds	r7, #8
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}

08010854 <HAL_ADC_ConvCpltCallback>:
* Function: HAL_ADC_ConvCpltCallback										   	   *
* Description: Conversion callback to process conversion complete in the 		   *
* 			   peripheral.														   *
************************************************************************************/
VOID HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b082      	sub	sp, #8
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
	Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues(Adc_ChannelOne_Buffer);
 801085c:	4803      	ldr	r0, [pc, #12]	; (801086c <HAL_ADC_ConvCpltCallback+0x18>)
 801085e:	f005 fb2b 	bl	8015eb8 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues>
}
 8010862:	bf00      	nop
 8010864:	3708      	adds	r7, #8
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}
 801086a:	bf00      	nop
 801086c:	20000c8c 	.word	0x20000c8c

08010870 <HAL_ADC_ErrorCallback>:
/***********************************************************************************
* Function: HAL_ADC_ErrorCallback										   		   *
* Description: Error callback to process fault in the peripheral.		 		   *
************************************************************************************/
VOID HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b084      	sub	sp, #16
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
	/* Local variable to store error status. */
	uint32 receivedStatus = HAL_ADC_GetError(&hadc1);
 8010878:	481c      	ldr	r0, [pc, #112]	; (80108ec <HAL_ADC_ErrorCallback+0x7c>)
 801087a:	f7f7 fe9d 	bl	80085b8 <HAL_ADC_GetError>
 801087e:	60f8      	str	r0, [r7, #12]
	/* Process error status.
	 * Perform re-initialization on each error to prevent faults in the peripheral. */
	switch(receivedStatus)
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	2b04      	cmp	r3, #4
 8010884:	d82d      	bhi.n	80108e2 <HAL_ADC_ErrorCallback+0x72>
 8010886:	a201      	add	r2, pc, #4	; (adr r2, 801088c <HAL_ADC_ErrorCallback+0x1c>)
 8010888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801088c:	080108e3 	.word	0x080108e3
 8010890:	080108a1 	.word	0x080108a1
 8010894:	080108b7 	.word	0x080108b7
 8010898:	080108e3 	.word	0x080108e3
 801089c:	080108cd 	.word	0x080108cd
	{
		case HAL_ADC_ERROR_NONE:
			/* do nothing */
			break;
		case HAL_ADC_ERROR_INTERNAL:
			SystemManager_Fault[ADC_ERROR_INTERNAL]++;
 80108a0:	4b13      	ldr	r3, [pc, #76]	; (80108f0 <HAL_ADC_ErrorCallback+0x80>)
 80108a2:	7b9b      	ldrb	r3, [r3, #14]
 80108a4:	3301      	adds	r3, #1
 80108a6:	b2da      	uxtb	r2, r3
 80108a8:	4b11      	ldr	r3, [pc, #68]	; (80108f0 <HAL_ADC_ErrorCallback+0x80>)
 80108aa:	739a      	strb	r2, [r3, #14]
			Adc_DeInit();
 80108ac:	f000 f898 	bl	80109e0 <Adc_DeInit>
			Adc_Init();
 80108b0:	f000 f8a0 	bl	80109f4 <Adc_Init>
			break;
 80108b4:	e016      	b.n	80108e4 <HAL_ADC_ErrorCallback+0x74>
		case HAL_ADC_ERROR_OVR:
			SystemManager_Fault[ADC_ERROR_OVR]++;
 80108b6:	4b0e      	ldr	r3, [pc, #56]	; (80108f0 <HAL_ADC_ErrorCallback+0x80>)
 80108b8:	7bdb      	ldrb	r3, [r3, #15]
 80108ba:	3301      	adds	r3, #1
 80108bc:	b2da      	uxtb	r2, r3
 80108be:	4b0c      	ldr	r3, [pc, #48]	; (80108f0 <HAL_ADC_ErrorCallback+0x80>)
 80108c0:	73da      	strb	r2, [r3, #15]
			Adc_DeInit();
 80108c2:	f000 f88d 	bl	80109e0 <Adc_DeInit>
			Adc_Init();
 80108c6:	f000 f895 	bl	80109f4 <Adc_Init>
			break;
 80108ca:	e00b      	b.n	80108e4 <HAL_ADC_ErrorCallback+0x74>
		case HAL_ADC_ERROR_DMA:
			SystemManager_Fault[ADC_ERROR_DMA]++;
 80108cc:	4b08      	ldr	r3, [pc, #32]	; (80108f0 <HAL_ADC_ErrorCallback+0x80>)
 80108ce:	7c1b      	ldrb	r3, [r3, #16]
 80108d0:	3301      	adds	r3, #1
 80108d2:	b2da      	uxtb	r2, r3
 80108d4:	4b06      	ldr	r3, [pc, #24]	; (80108f0 <HAL_ADC_ErrorCallback+0x80>)
 80108d6:	741a      	strb	r2, [r3, #16]
			Adc_DeInit();
 80108d8:	f000 f882 	bl	80109e0 <Adc_DeInit>
			Adc_Init();
 80108dc:	f000 f88a 	bl	80109f4 <Adc_Init>
			break;
 80108e0:	e000      	b.n	80108e4 <HAL_ADC_ErrorCallback+0x74>
		default:
			break;
 80108e2:	bf00      	nop
	}
}
 80108e4:	bf00      	nop
 80108e6:	3710      	adds	r7, #16
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}
 80108ec:	200002e0 	.word	0x200002e0
 80108f0:	2000e638 	.word	0x2000e638

080108f4 <Adc_MainFunction>:
/***********************************************************************************
* Function: Adc_MainFunction										   			   *
* Description: Peripheral main function.									       *
************************************************************************************/
VOID Adc_MainFunction()
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b082      	sub	sp, #8
 80108f8:	af00      	add	r7, sp, #0
	/* Local variable to store the error status. */
	uint32 statusValue = STD_LOW;
 80108fa:	2300      	movs	r3, #0
 80108fc:	607b      	str	r3, [r7, #4]
	/* Get error status. */
	statusValue = HAL_ADC_GetState(&hadc1);
 80108fe:	4836      	ldr	r0, [pc, #216]	; (80109d8 <Adc_MainFunction+0xe4>)
 8010900:	f7f7 fe4e 	bl	80085a0 <HAL_ADC_GetState>
 8010904:	6078      	str	r0, [r7, #4]

	/* Process module states. */
	switch(statusValue)
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801090c:	d049      	beq.n	80109a2 <Adc_MainFunction+0xae>
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010914:	d85a      	bhi.n	80109cc <Adc_MainFunction+0xd8>
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	2b10      	cmp	r3, #16
 801091a:	d827      	bhi.n	801096c <Adc_MainFunction+0x78>
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2b10      	cmp	r3, #16
 8010920:	d854      	bhi.n	80109cc <Adc_MainFunction+0xd8>
 8010922:	a201      	add	r2, pc, #4	; (adr r2, 8010928 <Adc_MainFunction+0x34>)
 8010924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010928:	08010977 	.word	0x08010977
 801092c:	08010985 	.word	0x08010985
 8010930:	0801098f 	.word	0x0801098f
 8010934:	080109cd 	.word	0x080109cd
 8010938:	080109ad 	.word	0x080109ad
 801093c:	080109cd 	.word	0x080109cd
 8010940:	080109cd 	.word	0x080109cd
 8010944:	080109cd 	.word	0x080109cd
 8010948:	080109cd 	.word	0x080109cd
 801094c:	080109cd 	.word	0x080109cd
 8010950:	080109cd 	.word	0x080109cd
 8010954:	080109cd 	.word	0x080109cd
 8010958:	080109cd 	.word	0x080109cd
 801095c:	080109cd 	.word	0x080109cd
 8010960:	080109cd 	.word	0x080109cd
 8010964:	080109cd 	.word	0x080109cd
 8010968:	080109bd 	.word	0x080109bd
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010972:	d011      	beq.n	8010998 <Adc_MainFunction+0xa4>
		case HAL_ADC_STATE_ERROR:
			Adc_BswState = statusValue;
			HAL_ADC_ErrorCallback(&hadc1);
			break;
		default:
			break;
 8010974:	e02a      	b.n	80109cc <Adc_MainFunction+0xd8>
			Adc_BswState = statusValue;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	b2da      	uxtb	r2, r3
 801097a:	4b18      	ldr	r3, [pc, #96]	; (80109dc <Adc_MainFunction+0xe8>)
 801097c:	701a      	strb	r2, [r3, #0]
			Adc_Init();
 801097e:	f000 f839 	bl	80109f4 <Adc_Init>
			break;
 8010982:	e024      	b.n	80109ce <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	b2da      	uxtb	r2, r3
 8010988:	4b14      	ldr	r3, [pc, #80]	; (80109dc <Adc_MainFunction+0xe8>)
 801098a:	701a      	strb	r2, [r3, #0]
			break;
 801098c:	e01f      	b.n	80109ce <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	b2da      	uxtb	r2, r3
 8010992:	4b12      	ldr	r3, [pc, #72]	; (80109dc <Adc_MainFunction+0xe8>)
 8010994:	701a      	strb	r2, [r3, #0]
			break;
 8010996:	e01a      	b.n	80109ce <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	b2da      	uxtb	r2, r3
 801099c:	4b0f      	ldr	r3, [pc, #60]	; (80109dc <Adc_MainFunction+0xe8>)
 801099e:	701a      	strb	r2, [r3, #0]
			break;
 80109a0:	e015      	b.n	80109ce <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	b2da      	uxtb	r2, r3
 80109a6:	4b0d      	ldr	r3, [pc, #52]	; (80109dc <Adc_MainFunction+0xe8>)
 80109a8:	701a      	strb	r2, [r3, #0]
			break;
 80109aa:	e010      	b.n	80109ce <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	b2da      	uxtb	r2, r3
 80109b0:	4b0a      	ldr	r3, [pc, #40]	; (80109dc <Adc_MainFunction+0xe8>)
 80109b2:	701a      	strb	r2, [r3, #0]
			HAL_ADC_ErrorCallback(&hadc1);
 80109b4:	4808      	ldr	r0, [pc, #32]	; (80109d8 <Adc_MainFunction+0xe4>)
 80109b6:	f7ff ff5b 	bl	8010870 <HAL_ADC_ErrorCallback>
			break;
 80109ba:	e008      	b.n	80109ce <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	b2da      	uxtb	r2, r3
 80109c0:	4b06      	ldr	r3, [pc, #24]	; (80109dc <Adc_MainFunction+0xe8>)
 80109c2:	701a      	strb	r2, [r3, #0]
			HAL_ADC_ErrorCallback(&hadc1);
 80109c4:	4804      	ldr	r0, [pc, #16]	; (80109d8 <Adc_MainFunction+0xe4>)
 80109c6:	f7ff ff53 	bl	8010870 <HAL_ADC_ErrorCallback>
			break;
 80109ca:	e000      	b.n	80109ce <Adc_MainFunction+0xda>
			break;
 80109cc:	bf00      	nop
	}
}
 80109ce:	bf00      	nop
 80109d0:	3708      	adds	r7, #8
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}
 80109d6:	bf00      	nop
 80109d8:	200002e0 	.word	0x200002e0
 80109dc:	20000c88 	.word	0x20000c88

080109e0 <Adc_DeInit>:
/***********************************************************************************
* Function: Adc_DeInit										   					   *
* Description: De-initialize the peripheral.									   *
************************************************************************************/
StdReturnType Adc_DeInit()
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	af00      	add	r7, sp, #0
	/* Call for de-intialization function. */
	HAL_ADC_DeInit(&hadc1);
 80109e4:	4802      	ldr	r0, [pc, #8]	; (80109f0 <Adc_DeInit+0x10>)
 80109e6:	f7f7 fa55 	bl	8007e94 <HAL_ADC_DeInit>
	return E_OK;
 80109ea:	2300      	movs	r3, #0
}
 80109ec:	4618      	mov	r0, r3
 80109ee:	bd80      	pop	{r7, pc}
 80109f0:	200002e0 	.word	0x200002e0

080109f4 <Adc_Init>:
/***********************************************************************************
* Function: Adc_Init										   					   *
* Description: Initialize the protocol.									       	   *
************************************************************************************/
StdReturnType Adc_Init()
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b084      	sub	sp, #16
 80109f8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80109fa:	463b      	mov	r3, r7
 80109fc:	2200      	movs	r2, #0
 80109fe:	601a      	str	r2, [r3, #0]
 8010a00:	605a      	str	r2, [r3, #4]
 8010a02:	609a      	str	r2, [r3, #8]
 8010a04:	60da      	str	r2, [r3, #12]
	hadc1.Instance = ADC1;
 8010a06:	4b96      	ldr	r3, [pc, #600]	; (8010c60 <Adc_Init+0x26c>)
 8010a08:	4a96      	ldr	r2, [pc, #600]	; (8010c64 <Adc_Init+0x270>)
 8010a0a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8010a0c:	4b94      	ldr	r3, [pc, #592]	; (8010c60 <Adc_Init+0x26c>)
 8010a0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010a12:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8010a14:	4b92      	ldr	r3, [pc, #584]	; (8010c60 <Adc_Init+0x26c>)
 8010a16:	2200      	movs	r2, #0
 8010a18:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8010a1a:	4b91      	ldr	r3, [pc, #580]	; (8010c60 <Adc_Init+0x26c>)
 8010a1c:	2201      	movs	r2, #1
 8010a1e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8010a20:	4b8f      	ldr	r3, [pc, #572]	; (8010c60 <Adc_Init+0x26c>)
 8010a22:	2201      	movs	r2, #1
 8010a24:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8010a26:	4b8e      	ldr	r3, [pc, #568]	; (8010c60 <Adc_Init+0x26c>)
 8010a28:	2200      	movs	r2, #0
 8010a2a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8010a2e:	4b8c      	ldr	r3, [pc, #560]	; (8010c60 <Adc_Init+0x26c>)
 8010a30:	2200      	movs	r2, #0
 8010a32:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8010a34:	4b8a      	ldr	r3, [pc, #552]	; (8010c60 <Adc_Init+0x26c>)
 8010a36:	4a8c      	ldr	r2, [pc, #560]	; (8010c68 <Adc_Init+0x274>)
 8010a38:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8010a3a:	4b89      	ldr	r3, [pc, #548]	; (8010c60 <Adc_Init+0x26c>)
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 16;
 8010a40:	4b87      	ldr	r3, [pc, #540]	; (8010c60 <Adc_Init+0x26c>)
 8010a42:	2210      	movs	r2, #16
 8010a44:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8010a46:	4b86      	ldr	r3, [pc, #536]	; (8010c60 <Adc_Init+0x26c>)
 8010a48:	2201      	movs	r2, #1
 8010a4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8010a4e:	4b84      	ldr	r3, [pc, #528]	; (8010c60 <Adc_Init+0x26c>)
 8010a50:	2200      	movs	r2, #0
 8010a52:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8010a54:	4882      	ldr	r0, [pc, #520]	; (8010c60 <Adc_Init+0x26c>)
 8010a56:	f7f7 f9b7 	bl	8007dc8 <HAL_ADC_Init>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d002      	beq.n	8010a66 <Adc_Init+0x72>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 8010a60:	487f      	ldr	r0, [pc, #508]	; (8010c60 <Adc_Init+0x26c>)
 8010a62:	f7ff ff05 	bl	8010870 <HAL_ADC_ErrorCallback>
	}
	else
	{
	/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_13;
 8010a66:	230d      	movs	r3, #13
 8010a68:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8010a6e:	2300      	movs	r3, #0
 8010a70:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010a72:	463b      	mov	r3, r7
 8010a74:	4619      	mov	r1, r3
 8010a76:	487a      	ldr	r0, [pc, #488]	; (8010c60 <Adc_Init+0x26c>)
 8010a78:	f7f7 fc60 	bl	800833c <HAL_ADC_ConfigChannel>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d002      	beq.n	8010a88 <Adc_Init+0x94>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 8010a82:	4877      	ldr	r0, [pc, #476]	; (8010c60 <Adc_Init+0x26c>)
 8010a84:	f7ff fef4 	bl	8010870 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_2;
 8010a88:	2302      	movs	r3, #2
 8010a8a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8010a8c:	2302      	movs	r3, #2
 8010a8e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010a90:	463b      	mov	r3, r7
 8010a92:	4619      	mov	r1, r3
 8010a94:	4872      	ldr	r0, [pc, #456]	; (8010c60 <Adc_Init+0x26c>)
 8010a96:	f7f7 fc51 	bl	800833c <HAL_ADC_ConfigChannel>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d002      	beq.n	8010aa6 <Adc_Init+0xb2>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 8010aa0:	486f      	ldr	r0, [pc, #444]	; (8010c60 <Adc_Init+0x26c>)
 8010aa2:	f7ff fee5 	bl	8010870 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_12;
 8010aa6:	230c      	movs	r3, #12
 8010aa8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 8010aaa:	2303      	movs	r3, #3
 8010aac:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010aae:	463b      	mov	r3, r7
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	486b      	ldr	r0, [pc, #428]	; (8010c60 <Adc_Init+0x26c>)
 8010ab4:	f7f7 fc42 	bl	800833c <HAL_ADC_ConfigChannel>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d002      	beq.n	8010ac4 <Adc_Init+0xd0>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 8010abe:	4868      	ldr	r0, [pc, #416]	; (8010c60 <Adc_Init+0x26c>)
 8010ac0:	f7ff fed6 	bl	8010870 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_10;
 8010ac4:	230a      	movs	r3, #10
 8010ac6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 8010ac8:	2304      	movs	r3, #4
 8010aca:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010acc:	463b      	mov	r3, r7
 8010ace:	4619      	mov	r1, r3
 8010ad0:	4863      	ldr	r0, [pc, #396]	; (8010c60 <Adc_Init+0x26c>)
 8010ad2:	f7f7 fc33 	bl	800833c <HAL_ADC_ConfigChannel>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d002      	beq.n	8010ae2 <Adc_Init+0xee>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 8010adc:	4860      	ldr	r0, [pc, #384]	; (8010c60 <Adc_Init+0x26c>)
 8010ade:	f7ff fec7 	bl	8010870 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_4;
 8010ae2:	2304      	movs	r3, #4
 8010ae4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 5;
 8010ae6:	2305      	movs	r3, #5
 8010ae8:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010aea:	463b      	mov	r3, r7
 8010aec:	4619      	mov	r1, r3
 8010aee:	485c      	ldr	r0, [pc, #368]	; (8010c60 <Adc_Init+0x26c>)
 8010af0:	f7f7 fc24 	bl	800833c <HAL_ADC_ConfigChannel>
 8010af4:	4603      	mov	r3, r0
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d002      	beq.n	8010b00 <Adc_Init+0x10c>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 8010afa:	4859      	ldr	r0, [pc, #356]	; (8010c60 <Adc_Init+0x26c>)
 8010afc:	f7ff feb8 	bl	8010870 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_5;
 8010b00:	2305      	movs	r3, #5
 8010b02:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 6;
 8010b04:	2306      	movs	r3, #6
 8010b06:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010b08:	463b      	mov	r3, r7
 8010b0a:	4619      	mov	r1, r3
 8010b0c:	4854      	ldr	r0, [pc, #336]	; (8010c60 <Adc_Init+0x26c>)
 8010b0e:	f7f7 fc15 	bl	800833c <HAL_ADC_ConfigChannel>
 8010b12:	4603      	mov	r3, r0
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d002      	beq.n	8010b1e <Adc_Init+0x12a>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 8010b18:	4851      	ldr	r0, [pc, #324]	; (8010c60 <Adc_Init+0x26c>)
 8010b1a:	f7ff fea9 	bl	8010870 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_6;
 8010b1e:	2306      	movs	r3, #6
 8010b20:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 7;
 8010b22:	2307      	movs	r3, #7
 8010b24:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010b26:	463b      	mov	r3, r7
 8010b28:	4619      	mov	r1, r3
 8010b2a:	484d      	ldr	r0, [pc, #308]	; (8010c60 <Adc_Init+0x26c>)
 8010b2c:	f7f7 fc06 	bl	800833c <HAL_ADC_ConfigChannel>
 8010b30:	4603      	mov	r3, r0
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d002      	beq.n	8010b3c <Adc_Init+0x148>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 8010b36:	484a      	ldr	r0, [pc, #296]	; (8010c60 <Adc_Init+0x26c>)
 8010b38:	f7ff fe9a 	bl	8010870 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_7;
 8010b3c:	2307      	movs	r3, #7
 8010b3e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 8;
 8010b40:	2308      	movs	r3, #8
 8010b42:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010b44:	463b      	mov	r3, r7
 8010b46:	4619      	mov	r1, r3
 8010b48:	4845      	ldr	r0, [pc, #276]	; (8010c60 <Adc_Init+0x26c>)
 8010b4a:	f7f7 fbf7 	bl	800833c <HAL_ADC_ConfigChannel>
 8010b4e:	4603      	mov	r3, r0
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d002      	beq.n	8010b5a <Adc_Init+0x166>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 8010b54:	4842      	ldr	r0, [pc, #264]	; (8010c60 <Adc_Init+0x26c>)
 8010b56:	f7ff fe8b 	bl	8010870 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_8;
 8010b5a:	2308      	movs	r3, #8
 8010b5c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 9;
 8010b5e:	2309      	movs	r3, #9
 8010b60:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010b62:	463b      	mov	r3, r7
 8010b64:	4619      	mov	r1, r3
 8010b66:	483e      	ldr	r0, [pc, #248]	; (8010c60 <Adc_Init+0x26c>)
 8010b68:	f7f7 fbe8 	bl	800833c <HAL_ADC_ConfigChannel>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d002      	beq.n	8010b78 <Adc_Init+0x184>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 8010b72:	483b      	ldr	r0, [pc, #236]	; (8010c60 <Adc_Init+0x26c>)
 8010b74:	f7ff fe7c 	bl	8010870 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_9;
 8010b78:	2309      	movs	r3, #9
 8010b7a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 10;
 8010b7c:	230a      	movs	r3, #10
 8010b7e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010b80:	463b      	mov	r3, r7
 8010b82:	4619      	mov	r1, r3
 8010b84:	4836      	ldr	r0, [pc, #216]	; (8010c60 <Adc_Init+0x26c>)
 8010b86:	f7f7 fbd9 	bl	800833c <HAL_ADC_ConfigChannel>
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d002      	beq.n	8010b96 <Adc_Init+0x1a2>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 8010b90:	4833      	ldr	r0, [pc, #204]	; (8010c60 <Adc_Init+0x26c>)
 8010b92:	f7ff fe6d 	bl	8010870 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_15;
 8010b96:	230f      	movs	r3, #15
 8010b98:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 11;
 8010b9a:	230b      	movs	r3, #11
 8010b9c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010b9e:	463b      	mov	r3, r7
 8010ba0:	4619      	mov	r1, r3
 8010ba2:	482f      	ldr	r0, [pc, #188]	; (8010c60 <Adc_Init+0x26c>)
 8010ba4:	f7f7 fbca 	bl	800833c <HAL_ADC_ConfigChannel>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d002      	beq.n	8010bb4 <Adc_Init+0x1c0>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 8010bae:	482c      	ldr	r0, [pc, #176]	; (8010c60 <Adc_Init+0x26c>)
 8010bb0:	f7ff fe5e 	bl	8010870 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_14;
 8010bb4:	230e      	movs	r3, #14
 8010bb6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 12;
 8010bb8:	230c      	movs	r3, #12
 8010bba:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010bbc:	463b      	mov	r3, r7
 8010bbe:	4619      	mov	r1, r3
 8010bc0:	4827      	ldr	r0, [pc, #156]	; (8010c60 <Adc_Init+0x26c>)
 8010bc2:	f7f7 fbbb 	bl	800833c <HAL_ADC_ConfigChannel>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d002      	beq.n	8010bd2 <Adc_Init+0x1de>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 8010bcc:	4824      	ldr	r0, [pc, #144]	; (8010c60 <Adc_Init+0x26c>)
 8010bce:	f7ff fe4f 	bl	8010870 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_3;
 8010bd2:	2303      	movs	r3, #3
 8010bd4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 13;
 8010bd6:	230d      	movs	r3, #13
 8010bd8:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010bda:	463b      	mov	r3, r7
 8010bdc:	4619      	mov	r1, r3
 8010bde:	4820      	ldr	r0, [pc, #128]	; (8010c60 <Adc_Init+0x26c>)
 8010be0:	f7f7 fbac 	bl	800833c <HAL_ADC_ConfigChannel>
 8010be4:	4603      	mov	r3, r0
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d002      	beq.n	8010bf0 <Adc_Init+0x1fc>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 8010bea:	481d      	ldr	r0, [pc, #116]	; (8010c60 <Adc_Init+0x26c>)
 8010bec:	f7ff fe40 	bl	8010870 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_11;
 8010bf0:	230b      	movs	r3, #11
 8010bf2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 14;
 8010bf4:	230e      	movs	r3, #14
 8010bf6:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010bf8:	463b      	mov	r3, r7
 8010bfa:	4619      	mov	r1, r3
 8010bfc:	4818      	ldr	r0, [pc, #96]	; (8010c60 <Adc_Init+0x26c>)
 8010bfe:	f7f7 fb9d 	bl	800833c <HAL_ADC_ConfigChannel>
 8010c02:	4603      	mov	r3, r0
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d002      	beq.n	8010c0e <Adc_Init+0x21a>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 8010c08:	4815      	ldr	r0, [pc, #84]	; (8010c60 <Adc_Init+0x26c>)
 8010c0a:	f7ff fe31 	bl	8010870 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8010c0e:	4b17      	ldr	r3, [pc, #92]	; (8010c6c <Adc_Init+0x278>)
 8010c10:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 15;
 8010c12:	230f      	movs	r3, #15
 8010c14:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010c16:	463b      	mov	r3, r7
 8010c18:	4619      	mov	r1, r3
 8010c1a:	4811      	ldr	r0, [pc, #68]	; (8010c60 <Adc_Init+0x26c>)
 8010c1c:	f7f7 fb8e 	bl	800833c <HAL_ADC_ConfigChannel>
 8010c20:	4603      	mov	r3, r0
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d002      	beq.n	8010c2c <Adc_Init+0x238>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 8010c26:	480e      	ldr	r0, [pc, #56]	; (8010c60 <Adc_Init+0x26c>)
 8010c28:	f7ff fe22 	bl	8010870 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8010c2c:	2311      	movs	r3, #17
 8010c2e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 16;
 8010c30:	2310      	movs	r3, #16
 8010c32:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010c34:	463b      	mov	r3, r7
 8010c36:	4619      	mov	r1, r3
 8010c38:	4809      	ldr	r0, [pc, #36]	; (8010c60 <Adc_Init+0x26c>)
 8010c3a:	f7f7 fb7f 	bl	800833c <HAL_ADC_ConfigChannel>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d002      	beq.n	8010c4a <Adc_Init+0x256>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 8010c44:	4806      	ldr	r0, [pc, #24]	; (8010c60 <Adc_Init+0x26c>)
 8010c46:	f7ff fe13 	bl	8010870 <HAL_ADC_ErrorCallback>
	else
	{
		/* Do nothing */
	}

	HAL_ADC_Start_DMA(&hadc1, Adc_ChannelOne_Buffer, ADC_BUFFER_LENGTH);
 8010c4a:	220e      	movs	r2, #14
 8010c4c:	4908      	ldr	r1, [pc, #32]	; (8010c70 <Adc_Init+0x27c>)
 8010c4e:	4804      	ldr	r0, [pc, #16]	; (8010c60 <Adc_Init+0x26c>)
 8010c50:	f7f7 fa70 	bl	8008134 <HAL_ADC_Start_DMA>

	return E_OK;
 8010c54:	2300      	movs	r3, #0
}
 8010c56:	4618      	mov	r0, r3
 8010c58:	3710      	adds	r7, #16
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bd80      	pop	{r7, pc}
 8010c5e:	bf00      	nop
 8010c60:	200002e0 	.word	0x200002e0
 8010c64:	40012000 	.word	0x40012000
 8010c68:	0f000001 	.word	0x0f000001
 8010c6c:	10000012 	.word	0x10000012
 8010c70:	20000c8c 	.word	0x20000c8c

08010c74 <Port_Init>:
/***********************************************************************************
* Function: Port_Init										       				   *
* Description: Initialize the peripheral.									 	   *
************************************************************************************/
StdReturnType Port_Init()
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8010c78:	f7f5 fd10 	bl	800669c <MX_GPIO_Init>
	return E_OK;
 8010c7c:	2300      	movs	r3, #0
}
 8010c7e:	4618      	mov	r0, r3
 8010c80:	bd80      	pop	{r7, pc}

08010c82 <CanOverSpi_Init>:
/***********************************************************************************
* Function: CanOverSpi_Init									   					   *
* Description: Driver initialization.		 		   							   *
************************************************************************************/
StdReturnType CanOverSpi_Init()
{
 8010c82:	b580      	push	{r7, lr}
 8010c84:	b088      	sub	sp, #32
 8010c86:	af00      	add	r7, sp, #0
	RXF3 RXF3reg;
	RXF4 RXF4reg;
	RXF5 RXF5reg;
	RXM0 RXM0reg;
	RXM1 RXM1reg;
	RXM0reg.RXM0SIDH = 0x00;
 8010c88:	2300      	movs	r3, #0
 8010c8a:	713b      	strb	r3, [r7, #4]
	RXM0reg.RXM0SIDL = 0x00;
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	717b      	strb	r3, [r7, #5]
	RXM0reg.RXM0EID8 = 0x00;
 8010c90:	2300      	movs	r3, #0
 8010c92:	71bb      	strb	r3, [r7, #6]
	RXM0reg.RXM0EID0 = 0x00;
 8010c94:	2300      	movs	r3, #0
 8010c96:	71fb      	strb	r3, [r7, #7]
	RXM1reg.RXM1SIDH = 0x00;
 8010c98:	2300      	movs	r3, #0
 8010c9a:	703b      	strb	r3, [r7, #0]
	RXM1reg.RXM1SIDL = 0x00;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	707b      	strb	r3, [r7, #1]
	RXM1reg.RXM1EID8 = 0x00;
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	70bb      	strb	r3, [r7, #2]
	RXM1reg.RXM1EID0 = 0x00;
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	70fb      	strb	r3, [r7, #3]
	RXF0reg.RXF0SIDH = 0x00;
 8010ca8:	2300      	movs	r3, #0
 8010caa:	773b      	strb	r3, [r7, #28]
	RXF0reg.RXF0SIDL = 0x00;
 8010cac:	2300      	movs	r3, #0
 8010cae:	777b      	strb	r3, [r7, #29]
	RXF0reg.RXF0EID8 = 0x00;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	77bb      	strb	r3, [r7, #30]
	RXF0reg.RXF0EID0 = 0x00;
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	77fb      	strb	r3, [r7, #31]
	RXF1reg.RXF1SIDH = 0x00;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	763b      	strb	r3, [r7, #24]
	RXF1reg.RXF1SIDL = 0x08;
 8010cbc:	2308      	movs	r3, #8
 8010cbe:	767b      	strb	r3, [r7, #25]
	RXF1reg.RXF1EID8 = 0x00;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	76bb      	strb	r3, [r7, #26]
	RXF1reg.RXF1EID0 = 0x00;
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	76fb      	strb	r3, [r7, #27]
	RXF2reg.RXF2SIDH = 0x00;
 8010cc8:	2300      	movs	r3, #0
 8010cca:	753b      	strb	r3, [r7, #20]
	RXF2reg.RXF2SIDL = 0x00;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	757b      	strb	r3, [r7, #21]
	RXF2reg.RXF2EID8 = 0x00;
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	75bb      	strb	r3, [r7, #22]
	RXF2reg.RXF2EID0 = 0x00;
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	75fb      	strb	r3, [r7, #23]
	RXF3reg.RXF3SIDH = 0x00;
 8010cd8:	2300      	movs	r3, #0
 8010cda:	743b      	strb	r3, [r7, #16]
	RXF3reg.RXF3SIDL = 0x00;
 8010cdc:	2300      	movs	r3, #0
 8010cde:	747b      	strb	r3, [r7, #17]
	RXF3reg.RXF3EID8 = 0x00;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	74bb      	strb	r3, [r7, #18]
	RXF3reg.RXF3EID0 = 0x00;
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	74fb      	strb	r3, [r7, #19]
	RXF4reg.RXF4SIDH = 0x00;
 8010ce8:	2300      	movs	r3, #0
 8010cea:	733b      	strb	r3, [r7, #12]
	RXF4reg.RXF4SIDL = 0x00;
 8010cec:	2300      	movs	r3, #0
 8010cee:	737b      	strb	r3, [r7, #13]
	RXF4reg.RXF4EID8 = 0x00;
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	73bb      	strb	r3, [r7, #14]
	RXF4reg.RXF4EID0 = 0x00;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	73fb      	strb	r3, [r7, #15]
	RXF5reg.RXF5SIDH = 0x00;
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	723b      	strb	r3, [r7, #8]
	RXF5reg.RXF5SIDL = 0x08;
 8010cfc:	2308      	movs	r3, #8
 8010cfe:	727b      	strb	r3, [r7, #9]
	RXF5reg.RXF5EID8 = 0x00;
 8010d00:	2300      	movs	r3, #0
 8010d02:	72bb      	strb	r3, [r7, #10]
	RXF5reg.RXF5EID0 = 0x00;
 8010d04:	2300      	movs	r3, #0
 8010d06:	72fb      	strb	r3, [r7, #11]
	if(MCP2515_CanOverSpi_Initialize() == E_NOT_OK)
 8010d08:	f000 fb2e 	bl	8011368 <MCP2515_CanOverSpi_Initialize>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	2b01      	cmp	r3, #1
 8010d10:	d101      	bne.n	8010d16 <CanOverSpi_Init+0x94>
	{
		return E_NOT_OK;
 8010d12:	2301      	movs	r3, #1
 8010d14:	e058      	b.n	8010dc8 <CanOverSpi_Init+0x146>
	else
	{
		/* do nothing */
	}

	if(MCP2515_CanOverSpi_SetConfigMode() == E_NOT_OK)
 8010d16:	f000 fb3f 	bl	8011398 <MCP2515_CanOverSpi_SetConfigMode>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	2b01      	cmp	r3, #1
 8010d1e:	d101      	bne.n	8010d24 <CanOverSpi_Init+0xa2>
	{
		return E_NOT_OK;
 8010d20:	2301      	movs	r3, #1
 8010d22:	e051      	b.n	8010dc8 <CanOverSpi_Init+0x146>
	}
	else
	{
		/* do nothing */
	}
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXM0SIDH, MCP2515_CanOverSpi_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8010d24:	1d3b      	adds	r3, r7, #4
 8010d26:	461a      	mov	r2, r3
 8010d28:	2123      	movs	r1, #35	; 0x23
 8010d2a:	2020      	movs	r0, #32
 8010d2c:	f000 fbde 	bl	80114ec <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXM1SIDH, MCP2515_CanOverSpi_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8010d30:	463b      	mov	r3, r7
 8010d32:	461a      	mov	r2, r3
 8010d34:	2127      	movs	r1, #39	; 0x27
 8010d36:	2024      	movs	r0, #36	; 0x24
 8010d38:	f000 fbd8 	bl	80114ec <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF0SIDH, MCP2515_CanOverSpi_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8010d3c:	f107 031c 	add.w	r3, r7, #28
 8010d40:	461a      	mov	r2, r3
 8010d42:	2103      	movs	r1, #3
 8010d44:	2000      	movs	r0, #0
 8010d46:	f000 fbd1 	bl	80114ec <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF1SIDH, MCP2515_CanOverSpi_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8010d4a:	f107 0318 	add.w	r3, r7, #24
 8010d4e:	461a      	mov	r2, r3
 8010d50:	2107      	movs	r1, #7
 8010d52:	2004      	movs	r0, #4
 8010d54:	f000 fbca 	bl	80114ec <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF2SIDH, MCP2515_CanOverSpi_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8010d58:	f107 0314 	add.w	r3, r7, #20
 8010d5c:	461a      	mov	r2, r3
 8010d5e:	210b      	movs	r1, #11
 8010d60:	2008      	movs	r0, #8
 8010d62:	f000 fbc3 	bl	80114ec <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF3SIDH, MCP2515_CanOverSpi_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8010d66:	f107 0310 	add.w	r3, r7, #16
 8010d6a:	461a      	mov	r2, r3
 8010d6c:	2113      	movs	r1, #19
 8010d6e:	2010      	movs	r0, #16
 8010d70:	f000 fbbc 	bl	80114ec <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF4SIDH, MCP2515_CanOverSpi_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8010d74:	f107 030c 	add.w	r3, r7, #12
 8010d78:	461a      	mov	r2, r3
 8010d7a:	2117      	movs	r1, #23
 8010d7c:	2014      	movs	r0, #20
 8010d7e:	f000 fbb5 	bl	80114ec <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF5SIDH, MCP2515_CanOverSpi_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8010d82:	f107 0308 	add.w	r3, r7, #8
 8010d86:	461a      	mov	r2, r3
 8010d88:	211b      	movs	r1, #27
 8010d8a:	2018      	movs	r0, #24
 8010d8c:	f000 fbae 	bl	80114ec <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_RXB0CTRL, 0x04);
 8010d90:	2104      	movs	r1, #4
 8010d92:	2060      	movs	r0, #96	; 0x60
 8010d94:	f000 fb84 	bl	80114a0 <MCP2515_CanOverSpi_WriteByte>
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_RXB1CTRL, 0x00);
 8010d98:	2100      	movs	r1, #0
 8010d9a:	2070      	movs	r0, #112	; 0x70
 8010d9c:	f000 fb80 	bl	80114a0 <MCP2515_CanOverSpi_WriteByte>
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_CNF1, 0x00);
 8010da0:	2100      	movs	r1, #0
 8010da2:	202a      	movs	r0, #42	; 0x2a
 8010da4:	f000 fb7c 	bl	80114a0 <MCP2515_CanOverSpi_WriteByte>
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_CNF2, 0x90);
 8010da8:	2190      	movs	r1, #144	; 0x90
 8010daa:	2029      	movs	r0, #41	; 0x29
 8010dac:	f000 fb78 	bl	80114a0 <MCP2515_CanOverSpi_WriteByte>
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_CNF3, 0x02);
 8010db0:	2102      	movs	r1, #2
 8010db2:	2028      	movs	r0, #40	; 0x28
 8010db4:	f000 fb74 	bl	80114a0 <MCP2515_CanOverSpi_WriteByte>
	if(MCP2515_CanOverSpi_SetNormalMode() == E_NOT_OK)
 8010db8:	f000 fb01 	bl	80113be <MCP2515_CanOverSpi_SetNormalMode>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	2b01      	cmp	r3, #1
 8010dc0:	d101      	bne.n	8010dc6 <CanOverSpi_Init+0x144>
	{
		return E_NOT_OK;
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	e000      	b.n	8010dc8 <CanOverSpi_Init+0x146>
	}
	else
	{
		/* do nothing */
	}
	return true;
 8010dc6:	2301      	movs	r3, #1
}
 8010dc8:	4618      	mov	r0, r3
 8010dca:	3720      	adds	r7, #32
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}

08010dd0 <CanOverSpi_Init_Mask>:
/***********************************************************************************
* Function: CanOverSpi_Init_Mask									   			   *
* Description: Driver mask initialization.		 		   						   *
************************************************************************************/
StdReturnType CanOverSpi_Init_Mask(uint8 num, uint8 ext, uint32 ulData)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b082      	sub	sp, #8
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	603a      	str	r2, [r7, #0]
 8010dda:	71fb      	strb	r3, [r7, #7]
 8010ddc:	460b      	mov	r3, r1
 8010dde:	71bb      	strb	r3, [r7, #6]

	idReg.tempSIDH = 0;
 8010de0:	4b1c      	ldr	r3, [pc, #112]	; (8010e54 <CanOverSpi_Init_Mask+0x84>)
 8010de2:	2200      	movs	r2, #0
 8010de4:	701a      	strb	r2, [r3, #0]
	idReg.tempSIDL = 0;
 8010de6:	4b1b      	ldr	r3, [pc, #108]	; (8010e54 <CanOverSpi_Init_Mask+0x84>)
 8010de8:	2200      	movs	r2, #0
 8010dea:	705a      	strb	r2, [r3, #1]
	idReg.tempEID8 = 0;
 8010dec:	4b19      	ldr	r3, [pc, #100]	; (8010e54 <CanOverSpi_Init_Mask+0x84>)
 8010dee:	2200      	movs	r2, #0
 8010df0:	709a      	strb	r2, [r3, #2]
	idReg.tempEID0 = 0;
 8010df2:	4b18      	ldr	r3, [pc, #96]	; (8010e54 <CanOverSpi_Init_Mask+0x84>)
 8010df4:	2200      	movs	r2, #0
 8010df6:	70da      	strb	r2, [r3, #3]
	if(MCP2515_CanOverSpi_SetConfigMode() == E_NOT_OK)
 8010df8:	f000 face 	bl	8011398 <MCP2515_CanOverSpi_SetConfigMode>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	2b01      	cmp	r3, #1
 8010e00:	d101      	bne.n	8010e06 <CanOverSpi_Init_Mask+0x36>
	{
		return E_NOT_OK;
 8010e02:	2301      	movs	r3, #1
 8010e04:	e021      	b.n	8010e4a <CanOverSpi_Init_Mask+0x7a>
	}
	else
	{
		/* do nothing */
	}
	CanOverSpi_ConvertCanIdToReg(ulData, ext, &idReg);
 8010e06:	79bb      	ldrb	r3, [r7, #6]
 8010e08:	4a12      	ldr	r2, [pc, #72]	; (8010e54 <CanOverSpi_Init_Mask+0x84>)
 8010e0a:	4619      	mov	r1, r3
 8010e0c:	6838      	ldr	r0, [r7, #0]
 8010e0e:	f000 fa56 	bl	80112be <CanOverSpi_ConvertCanIdToReg>
	if(num == 0)
 8010e12:	79fb      	ldrb	r3, [r7, #7]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d105      	bne.n	8010e24 <CanOverSpi_Init_Mask+0x54>
	{
		MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXM0SIDH, MCP2515_CanOverSpi_RXM0EID0, &(idReg.tempSIDH));
 8010e18:	4a0e      	ldr	r2, [pc, #56]	; (8010e54 <CanOverSpi_Init_Mask+0x84>)
 8010e1a:	2123      	movs	r1, #35	; 0x23
 8010e1c:	2020      	movs	r0, #32
 8010e1e:	f000 fb65 	bl	80114ec <MCP2515_CanOverSpi_WriteByteSequence>
 8010e22:	e00a      	b.n	8010e3a <CanOverSpi_Init_Mask+0x6a>
	}
	else if(num == 1)
 8010e24:	79fb      	ldrb	r3, [r7, #7]
 8010e26:	2b01      	cmp	r3, #1
 8010e28:	d105      	bne.n	8010e36 <CanOverSpi_Init_Mask+0x66>
	{
		MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXM1SIDH, MCP2515_CanOverSpi_RXM1EID0, &(idReg.tempSIDH));
 8010e2a:	4a0a      	ldr	r2, [pc, #40]	; (8010e54 <CanOverSpi_Init_Mask+0x84>)
 8010e2c:	2127      	movs	r1, #39	; 0x27
 8010e2e:	2024      	movs	r0, #36	; 0x24
 8010e30:	f000 fb5c 	bl	80114ec <MCP2515_CanOverSpi_WriteByteSequence>
 8010e34:	e001      	b.n	8010e3a <CanOverSpi_Init_Mask+0x6a>
	}
	else
	{
		return E_NOT_OK;
 8010e36:	2301      	movs	r3, #1
 8010e38:	e007      	b.n	8010e4a <CanOverSpi_Init_Mask+0x7a>
	}
	if(MCP2515_CanOverSpi_SetNormalMode() == E_NOT_OK)
 8010e3a:	f000 fac0 	bl	80113be <MCP2515_CanOverSpi_SetNormalMode>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	2b01      	cmp	r3, #1
 8010e42:	d101      	bne.n	8010e48 <CanOverSpi_Init_Mask+0x78>
	{
		return E_NOT_OK;
 8010e44:	2301      	movs	r3, #1
 8010e46:	e000      	b.n	8010e4a <CanOverSpi_Init_Mask+0x7a>
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 8010e48:	2300      	movs	r3, #0
}
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	3708      	adds	r7, #8
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	bd80      	pop	{r7, pc}
 8010e52:	bf00      	nop
 8010e54:	20000ccc 	.word	0x20000ccc

08010e58 <CanOverSpi_Init_Filter>:
/***********************************************************************************
* Function: CanOverSpi_Init_Filter									   			   *
* Description: Driver filter initialization.		 		   					   *
************************************************************************************/
StdReturnType CanOverSpi_Init_Filter(uint8 num, uint8 ext, uint32 ulData)
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b082      	sub	sp, #8
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	4603      	mov	r3, r0
 8010e60:	603a      	str	r2, [r7, #0]
 8010e62:	71fb      	strb	r3, [r7, #7]
 8010e64:	460b      	mov	r3, r1
 8010e66:	71bb      	strb	r3, [r7, #6]
	idReg.tempSIDH = 0;
 8010e68:	4b2e      	ldr	r3, [pc, #184]	; (8010f24 <CanOverSpi_Init_Filter+0xcc>)
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	701a      	strb	r2, [r3, #0]
	idReg.tempSIDL = 0;
 8010e6e:	4b2d      	ldr	r3, [pc, #180]	; (8010f24 <CanOverSpi_Init_Filter+0xcc>)
 8010e70:	2200      	movs	r2, #0
 8010e72:	705a      	strb	r2, [r3, #1]
	idReg.tempEID8 = 0;
 8010e74:	4b2b      	ldr	r3, [pc, #172]	; (8010f24 <CanOverSpi_Init_Filter+0xcc>)
 8010e76:	2200      	movs	r2, #0
 8010e78:	709a      	strb	r2, [r3, #2]
	idReg.tempEID0 = 0;
 8010e7a:	4b2a      	ldr	r3, [pc, #168]	; (8010f24 <CanOverSpi_Init_Filter+0xcc>)
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	70da      	strb	r2, [r3, #3]
	if(MCP2515_CanOverSpi_SetConfigMode() == E_NOT_OK)
 8010e80:	f000 fa8a 	bl	8011398 <MCP2515_CanOverSpi_SetConfigMode>
 8010e84:	4603      	mov	r3, r0
 8010e86:	2b01      	cmp	r3, #1
 8010e88:	d101      	bne.n	8010e8e <CanOverSpi_Init_Filter+0x36>
	{
		return E_NOT_OK;
 8010e8a:	2301      	movs	r3, #1
 8010e8c:	e046      	b.n	8010f1c <CanOverSpi_Init_Filter+0xc4>
	}
	else
	{
		/* do nothing */
	}
	CanOverSpi_ConvertCanIdToReg(ulData, ext, &idReg);
 8010e8e:	79bb      	ldrb	r3, [r7, #6]
 8010e90:	4a24      	ldr	r2, [pc, #144]	; (8010f24 <CanOverSpi_Init_Filter+0xcc>)
 8010e92:	4619      	mov	r1, r3
 8010e94:	6838      	ldr	r0, [r7, #0]
 8010e96:	f000 fa12 	bl	80112be <CanOverSpi_ConvertCanIdToReg>
	switch(num)
 8010e9a:	79fb      	ldrb	r3, [r7, #7]
 8010e9c:	2b05      	cmp	r3, #5
 8010e9e:	d833      	bhi.n	8010f08 <CanOverSpi_Init_Filter+0xb0>
 8010ea0:	a201      	add	r2, pc, #4	; (adr r2, 8010ea8 <CanOverSpi_Init_Filter+0x50>)
 8010ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ea6:	bf00      	nop
 8010ea8:	08010ec1 	.word	0x08010ec1
 8010eac:	08010ecd 	.word	0x08010ecd
 8010eb0:	08010ed9 	.word	0x08010ed9
 8010eb4:	08010ee5 	.word	0x08010ee5
 8010eb8:	08010ef1 	.word	0x08010ef1
 8010ebc:	08010efd 	.word	0x08010efd
	{
		case 0:
			MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF0SIDH, MCP2515_CanOverSpi_RXF0EID0, &(idReg.tempSIDH));
 8010ec0:	4a18      	ldr	r2, [pc, #96]	; (8010f24 <CanOverSpi_Init_Filter+0xcc>)
 8010ec2:	2103      	movs	r1, #3
 8010ec4:	2000      	movs	r0, #0
 8010ec6:	f000 fb11 	bl	80114ec <MCP2515_CanOverSpi_WriteByteSequence>
			break;
 8010eca:	e01f      	b.n	8010f0c <CanOverSpi_Init_Filter+0xb4>
		case 1:
			MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF1SIDH, MCP2515_CanOverSpi_RXF1EID0, &(idReg.tempSIDH));
 8010ecc:	4a15      	ldr	r2, [pc, #84]	; (8010f24 <CanOverSpi_Init_Filter+0xcc>)
 8010ece:	2107      	movs	r1, #7
 8010ed0:	2004      	movs	r0, #4
 8010ed2:	f000 fb0b 	bl	80114ec <MCP2515_CanOverSpi_WriteByteSequence>
			break;
 8010ed6:	e019      	b.n	8010f0c <CanOverSpi_Init_Filter+0xb4>
		case 2:
			MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF2SIDH, MCP2515_CanOverSpi_RXF2EID0, &(idReg.tempSIDH));
 8010ed8:	4a12      	ldr	r2, [pc, #72]	; (8010f24 <CanOverSpi_Init_Filter+0xcc>)
 8010eda:	210b      	movs	r1, #11
 8010edc:	2008      	movs	r0, #8
 8010ede:	f000 fb05 	bl	80114ec <MCP2515_CanOverSpi_WriteByteSequence>
			break;
 8010ee2:	e013      	b.n	8010f0c <CanOverSpi_Init_Filter+0xb4>
		case 3:
			MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF3SIDH, MCP2515_CanOverSpi_RXF3EID0, &(idReg.tempSIDH));
 8010ee4:	4a0f      	ldr	r2, [pc, #60]	; (8010f24 <CanOverSpi_Init_Filter+0xcc>)
 8010ee6:	2113      	movs	r1, #19
 8010ee8:	2010      	movs	r0, #16
 8010eea:	f000 faff 	bl	80114ec <MCP2515_CanOverSpi_WriteByteSequence>
			break;
 8010eee:	e00d      	b.n	8010f0c <CanOverSpi_Init_Filter+0xb4>
		case 4:
			MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF4SIDH, MCP2515_CanOverSpi_RXF4EID0, &(idReg.tempSIDH));
 8010ef0:	4a0c      	ldr	r2, [pc, #48]	; (8010f24 <CanOverSpi_Init_Filter+0xcc>)
 8010ef2:	2117      	movs	r1, #23
 8010ef4:	2014      	movs	r0, #20
 8010ef6:	f000 faf9 	bl	80114ec <MCP2515_CanOverSpi_WriteByteSequence>
			break;
 8010efa:	e007      	b.n	8010f0c <CanOverSpi_Init_Filter+0xb4>
		case 5:
			MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF5SIDH, MCP2515_CanOverSpi_RXF5EID0, &(idReg.tempSIDH));
 8010efc:	4a09      	ldr	r2, [pc, #36]	; (8010f24 <CanOverSpi_Init_Filter+0xcc>)
 8010efe:	211b      	movs	r1, #27
 8010f00:	2018      	movs	r0, #24
 8010f02:	f000 faf3 	bl	80114ec <MCP2515_CanOverSpi_WriteByteSequence>
			break;
 8010f06:	e001      	b.n	8010f0c <CanOverSpi_Init_Filter+0xb4>
		default:
			return E_NOT_OK;
 8010f08:	2301      	movs	r3, #1
 8010f0a:	e007      	b.n	8010f1c <CanOverSpi_Init_Filter+0xc4>
			break;
	}
	if(MCP2515_CanOverSpi_SetNormalMode() == E_NOT_OK)
 8010f0c:	f000 fa57 	bl	80113be <MCP2515_CanOverSpi_SetNormalMode>
 8010f10:	4603      	mov	r3, r0
 8010f12:	2b01      	cmp	r3, #1
 8010f14:	d101      	bne.n	8010f1a <CanOverSpi_Init_Filter+0xc2>
	{
		return E_NOT_OK;
 8010f16:	2301      	movs	r3, #1
 8010f18:	e000      	b.n	8010f1c <CanOverSpi_Init_Filter+0xc4>
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 8010f1a:	2300      	movs	r3, #0
}
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	3708      	adds	r7, #8
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}
 8010f24:	20000ccc 	.word	0x20000ccc

08010f28 <CanOverSpi_Transmit>:
/***********************************************************************************
* Function: CanOverSpi_Transmit									   				   *
* Description: Driver transmit message.		 		   							   *
************************************************************************************/
StdReturnType CanOverSpi_Transmit(uCAN_MSG *tempCanMsg)
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b084      	sub	sp, #16
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
	uint8 returnValue = E_NOT_OK;
 8010f30:	2301      	movs	r3, #1
 8010f32:	73fb      	strb	r3, [r7, #15]
	idReg.tempSIDH = STD_LOW;
 8010f34:	4b36      	ldr	r3, [pc, #216]	; (8011010 <CanOverSpi_Transmit+0xe8>)
 8010f36:	2200      	movs	r2, #0
 8010f38:	701a      	strb	r2, [r3, #0]
	idReg.tempSIDL = STD_LOW;
 8010f3a:	4b35      	ldr	r3, [pc, #212]	; (8011010 <CanOverSpi_Transmit+0xe8>)
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	705a      	strb	r2, [r3, #1]
	idReg.tempEID8 = STD_LOW;
 8010f40:	4b33      	ldr	r3, [pc, #204]	; (8011010 <CanOverSpi_Transmit+0xe8>)
 8010f42:	2200      	movs	r2, #0
 8010f44:	709a      	strb	r2, [r3, #2]
	idReg.tempEID0 = STD_LOW;
 8010f46:	4b32      	ldr	r3, [pc, #200]	; (8011010 <CanOverSpi_Transmit+0xe8>)
 8010f48:	2200      	movs	r2, #0
 8010f4a:	70da      	strb	r2, [r3, #3]
	ctrlStatus.ctrl_status = MCP2515_CanOverSpi_ReadStatus();
 8010f4c:	f000 fb42 	bl	80115d4 <MCP2515_CanOverSpi_ReadStatus>
 8010f50:	4603      	mov	r3, r0
 8010f52:	461a      	mov	r2, r3
 8010f54:	4b2f      	ldr	r3, [pc, #188]	; (8011014 <CanOverSpi_Transmit+0xec>)
 8010f56:	701a      	strb	r2, [r3, #0]
	if (ctrlStatus.TXB0REQ != STD_HIGH)
 8010f58:	4b2e      	ldr	r3, [pc, #184]	; (8011014 <CanOverSpi_Transmit+0xec>)
 8010f5a:	781b      	ldrb	r3, [r3, #0]
 8010f5c:	f003 0304 	and.w	r3, r3, #4
 8010f60:	b2db      	uxtb	r3, r3
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d115      	bne.n	8010f92 <CanOverSpi_Transmit+0x6a>
	{
		CanOverSpi_ConvertCanIdToReg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	6858      	ldr	r0, [r3, #4]
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	781b      	ldrb	r3, [r3, #0]
 8010f6e:	4a28      	ldr	r2, [pc, #160]	; (8011010 <CanOverSpi_Transmit+0xe8>)
 8010f70:	4619      	mov	r1, r3
 8010f72:	f000 f9a4 	bl	80112be <CanOverSpi_ConvertCanIdToReg>
		MCP2515_CanOverSpi_LoadTxSequence(MCP2515_CanOverSpi_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	7a1a      	ldrb	r2, [r3, #8]
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	3309      	adds	r3, #9
 8010f7e:	4924      	ldr	r1, [pc, #144]	; (8011010 <CanOverSpi_Transmit+0xe8>)
 8010f80:	2040      	movs	r0, #64	; 0x40
 8010f82:	f000 fadf 	bl	8011544 <MCP2515_CanOverSpi_LoadTxSequence>
		MCP2515_CanOverSpi_RequestToSend(MCP2515_CanOverSpi_RTS_TX0);
 8010f86:	2081      	movs	r0, #129	; 0x81
 8010f88:	f000 fb08 	bl	801159c <MCP2515_CanOverSpi_RequestToSend>
		returnValue = E_OK;
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	73fb      	strb	r3, [r7, #15]
 8010f90:	e038      	b.n	8011004 <CanOverSpi_Transmit+0xdc>
	}
	else if (ctrlStatus.TXB1REQ != STD_HIGH)
 8010f92:	4b20      	ldr	r3, [pc, #128]	; (8011014 <CanOverSpi_Transmit+0xec>)
 8010f94:	781b      	ldrb	r3, [r3, #0]
 8010f96:	f003 0310 	and.w	r3, r3, #16
 8010f9a:	b2db      	uxtb	r3, r3
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d115      	bne.n	8010fcc <CanOverSpi_Transmit+0xa4>
	{
		CanOverSpi_ConvertCanIdToReg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	6858      	ldr	r0, [r3, #4]
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	781b      	ldrb	r3, [r3, #0]
 8010fa8:	4a19      	ldr	r2, [pc, #100]	; (8011010 <CanOverSpi_Transmit+0xe8>)
 8010faa:	4619      	mov	r1, r3
 8010fac:	f000 f987 	bl	80112be <CanOverSpi_ConvertCanIdToReg>
		MCP2515_CanOverSpi_LoadTxSequence(MCP2515_CanOverSpi_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	7a1a      	ldrb	r2, [r3, #8]
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	3309      	adds	r3, #9
 8010fb8:	4915      	ldr	r1, [pc, #84]	; (8011010 <CanOverSpi_Transmit+0xe8>)
 8010fba:	2042      	movs	r0, #66	; 0x42
 8010fbc:	f000 fac2 	bl	8011544 <MCP2515_CanOverSpi_LoadTxSequence>
		MCP2515_CanOverSpi_RequestToSend(MCP2515_CanOverSpi_RTS_TX1);
 8010fc0:	2082      	movs	r0, #130	; 0x82
 8010fc2:	f000 faeb 	bl	801159c <MCP2515_CanOverSpi_RequestToSend>
		returnValue = E_OK;
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	73fb      	strb	r3, [r7, #15]
 8010fca:	e01b      	b.n	8011004 <CanOverSpi_Transmit+0xdc>
	}
	else if (ctrlStatus.TXB2REQ != STD_HIGH)
 8010fcc:	4b11      	ldr	r3, [pc, #68]	; (8011014 <CanOverSpi_Transmit+0xec>)
 8010fce:	781b      	ldrb	r3, [r3, #0]
 8010fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fd4:	b2db      	uxtb	r3, r3
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d114      	bne.n	8011004 <CanOverSpi_Transmit+0xdc>
	{
		CanOverSpi_ConvertCanIdToReg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	6858      	ldr	r0, [r3, #4]
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	781b      	ldrb	r3, [r3, #0]
 8010fe2:	4a0b      	ldr	r2, [pc, #44]	; (8011010 <CanOverSpi_Transmit+0xe8>)
 8010fe4:	4619      	mov	r1, r3
 8010fe6:	f000 f96a 	bl	80112be <CanOverSpi_ConvertCanIdToReg>
		MCP2515_CanOverSpi_LoadTxSequence(MCP2515_CanOverSpi_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	7a1a      	ldrb	r2, [r3, #8]
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	3309      	adds	r3, #9
 8010ff2:	4907      	ldr	r1, [pc, #28]	; (8011010 <CanOverSpi_Transmit+0xe8>)
 8010ff4:	2044      	movs	r0, #68	; 0x44
 8010ff6:	f000 faa5 	bl	8011544 <MCP2515_CanOverSpi_LoadTxSequence>
		MCP2515_CanOverSpi_RequestToSend(MCP2515_CanOverSpi_RTS_TX2);
 8010ffa:	2084      	movs	r0, #132	; 0x84
 8010ffc:	f000 face 	bl	801159c <MCP2515_CanOverSpi_RequestToSend>
		returnValue = E_OK;
 8011000:	2300      	movs	r3, #0
 8011002:	73fb      	strb	r3, [r7, #15]
	}
	return returnValue;
 8011004:	7bfb      	ldrb	r3, [r7, #15]
}
 8011006:	4618      	mov	r0, r3
 8011008:	3710      	adds	r7, #16
 801100a:	46bd      	mov	sp, r7
 801100c:	bd80      	pop	{r7, pc}
 801100e:	bf00      	nop
 8011010:	20000ccc 	.word	0x20000ccc
 8011014:	20000cc4 	.word	0x20000cc4

08011018 <CanOverSpi_Receive>:
/***********************************************************************************
* Function: CanOverSpi_Receive									                   *
* Description: Driver receive message.		 		   							   *
************************************************************************************/
StdReturnType CanOverSpi_Receive(uCAN_MSG *tempCanMsg)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b088      	sub	sp, #32
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
	uint8 returnValue = E_NOT_OK;
 8011020:	2301      	movs	r3, #1
 8011022:	77fb      	strb	r3, [r7, #31]
	rx_reg_t rxReg;
	ctrl_rx_status_t rxStatus;
	rxStatus.ctrl_rx_status = MCP2515_CanOverSpi_GetRxStatus();
 8011024:	f000 faf4 	bl	8011610 <MCP2515_CanOverSpi_GetRxStatus>
 8011028:	4603      	mov	r3, r0
 801102a:	733b      	strb	r3, [r7, #12]
	if (rxStatus.rxBuffer != STD_LOW)
 801102c:	7b3b      	ldrb	r3, [r7, #12]
 801102e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8011032:	b2db      	uxtb	r3, r3
 8011034:	2b00      	cmp	r3, #0
 8011036:	d066      	beq.n	8011106 <CanOverSpi_Receive+0xee>
	{
		if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8011038:	7b3b      	ldrb	r3, [r7, #12]
 801103a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801103e:	b2db      	uxtb	r3, r3
 8011040:	2b40      	cmp	r3, #64	; 0x40
 8011042:	bf0c      	ite	eq
 8011044:	2301      	moveq	r3, #1
 8011046:	2300      	movne	r3, #0
 8011048:	b2da      	uxtb	r2, r3
 801104a:	7b3b      	ldrb	r3, [r7, #12]
 801104c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8011050:	b2db      	uxtb	r3, r3
 8011052:	2bc0      	cmp	r3, #192	; 0xc0
 8011054:	bf0c      	ite	eq
 8011056:	2301      	moveq	r3, #1
 8011058:	2300      	movne	r3, #0
 801105a:	b2db      	uxtb	r3, r3
 801105c:	4313      	orrs	r3, r2
 801105e:	b2db      	uxtb	r3, r3
 8011060:	2b00      	cmp	r3, #0
 8011062:	d007      	beq.n	8011074 <CanOverSpi_Receive+0x5c>
		{
			MCP2515_CanOverSpi_ReadRxSequence(MCP2515_CanOverSpi_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8011064:	f107 0310 	add.w	r3, r7, #16
 8011068:	220d      	movs	r2, #13
 801106a:	4619      	mov	r1, r3
 801106c:	2090      	movs	r0, #144	; 0x90
 801106e:	f000 f9f3 	bl	8011458 <MCP2515_CanOverSpi_ReadRxSequence>
 8011072:	e00c      	b.n	801108e <CanOverSpi_Receive+0x76>
		}
		else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8011074:	7b3b      	ldrb	r3, [r7, #12]
 8011076:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801107a:	b2db      	uxtb	r3, r3
 801107c:	2b80      	cmp	r3, #128	; 0x80
 801107e:	d106      	bne.n	801108e <CanOverSpi_Receive+0x76>
		{
			MCP2515_CanOverSpi_ReadRxSequence(MCP2515_CanOverSpi_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8011080:	f107 0310 	add.w	r3, r7, #16
 8011084:	220d      	movs	r2, #13
 8011086:	4619      	mov	r1, r3
 8011088:	2094      	movs	r0, #148	; 0x94
 801108a:	f000 f9e5 	bl	8011458 <MCP2515_CanOverSpi_ReadRxSequence>
		else
		{
			/* do nothing */
		}

		if (rxStatus.msgType == EXTENDED_CAN_MSG_ID_2_0B)
 801108e:	7b3b      	ldrb	r3, [r7, #12]
 8011090:	f003 0318 	and.w	r3, r3, #24
 8011094:	b2db      	uxtb	r3, r3
 8011096:	2b10      	cmp	r3, #16
 8011098:	d10c      	bne.n	80110b4 <CanOverSpi_Receive+0x9c>
		{
			tempCanMsg->frame.idType = (uint8_t) CMD_EXTENDED_CAN_MSG_ID;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	2201      	movs	r2, #1
 801109e:	701a      	strb	r2, [r3, #0]
			tempCanMsg->frame.id = CanOverSpi_ConvertRegToExtendedCanId(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80110a0:	7cb8      	ldrb	r0, [r7, #18]
 80110a2:	7cf9      	ldrb	r1, [r7, #19]
 80110a4:	7c3a      	ldrb	r2, [r7, #16]
 80110a6:	7c7b      	ldrb	r3, [r7, #17]
 80110a8:	f000 f8ac 	bl	8011204 <CanOverSpi_ConvertRegToExtendedCanId>
 80110ac:	4602      	mov	r2, r0
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	605a      	str	r2, [r3, #4]
 80110b2:	e00b      	b.n	80110cc <CanOverSpi_Receive+0xb4>
		}
		else
		{
			tempCanMsg->frame.idType = (uint8_t) CMD_STANDARD_CAN_MSG_ID;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	2200      	movs	r2, #0
 80110b8:	701a      	strb	r2, [r3, #0]
			tempCanMsg->frame.id = CanOverSpi_ConvertRegToStandardCanId(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80110ba:	7c3b      	ldrb	r3, [r7, #16]
 80110bc:	7c7a      	ldrb	r2, [r7, #17]
 80110be:	4611      	mov	r1, r2
 80110c0:	4618      	mov	r0, r3
 80110c2:	f000 f8dd 	bl	8011280 <CanOverSpi_ConvertRegToStandardCanId>
 80110c6:	4602      	mov	r2, r0
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	605a      	str	r2, [r3, #4]
		}
		tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 80110cc:	7d3a      	ldrb	r2, [r7, #20]
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	721a      	strb	r2, [r3, #8]
		tempCanMsg->frame.data0 = rxReg.RXBnD0;
 80110d2:	7d7a      	ldrb	r2, [r7, #21]
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	725a      	strb	r2, [r3, #9]
		tempCanMsg->frame.data1 = rxReg.RXBnD1;
 80110d8:	7dba      	ldrb	r2, [r7, #22]
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	729a      	strb	r2, [r3, #10]
		tempCanMsg->frame.data2 = rxReg.RXBnD2;
 80110de:	7dfa      	ldrb	r2, [r7, #23]
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	72da      	strb	r2, [r3, #11]
		tempCanMsg->frame.data3 = rxReg.RXBnD3;
 80110e4:	7e3a      	ldrb	r2, [r7, #24]
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	731a      	strb	r2, [r3, #12]
		tempCanMsg->frame.data4 = rxReg.RXBnD4;
 80110ea:	7e7a      	ldrb	r2, [r7, #25]
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	735a      	strb	r2, [r3, #13]
		tempCanMsg->frame.data5 = rxReg.RXBnD5;
 80110f0:	7eba      	ldrb	r2, [r7, #26]
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	739a      	strb	r2, [r3, #14]
		tempCanMsg->frame.data6 = rxReg.RXBnD6;
 80110f6:	7efa      	ldrb	r2, [r7, #27]
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	73da      	strb	r2, [r3, #15]
		tempCanMsg->frame.data7 = rxReg.RXBnD7;
 80110fc:	7f3a      	ldrb	r2, [r7, #28]
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	741a      	strb	r2, [r3, #16]
		returnValue = E_OK;
 8011102:	2300      	movs	r3, #0
 8011104:	77fb      	strb	r3, [r7, #31]
	}
	else
	{
		/* do nothing */
	}
	return returnValue;
 8011106:	7ffb      	ldrb	r3, [r7, #31]
}
 8011108:	4618      	mov	r0, r3
 801110a:	3720      	adds	r7, #32
 801110c:	46bd      	mov	sp, r7
 801110e:	bd80      	pop	{r7, pc}

08011110 <CanOverSpi_messagesInBuffer>:
/***********************************************************************************
* Function: CanOverSpi_messagesInBuffer									   		   *
* Description: Driver check if message is in the buffer.		 		   		   *
************************************************************************************/
StdReturnType CanOverSpi_messagesInBuffer()
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b082      	sub	sp, #8
 8011114:	af00      	add	r7, sp, #0
	uint8 messageCount = STD_LOW;
 8011116:	2300      	movs	r3, #0
 8011118:	71fb      	strb	r3, [r7, #7]
	ctrlStatus.ctrl_status = MCP2515_CanOverSpi_ReadStatus();
 801111a:	f000 fa5b 	bl	80115d4 <MCP2515_CanOverSpi_ReadStatus>
 801111e:	4603      	mov	r3, r0
 8011120:	461a      	mov	r2, r3
 8011122:	4b0d      	ldr	r3, [pc, #52]	; (8011158 <CanOverSpi_messagesInBuffer+0x48>)
 8011124:	701a      	strb	r2, [r3, #0]
	if(ctrlStatus.RX0IF != STD_LOW)
 8011126:	4b0c      	ldr	r3, [pc, #48]	; (8011158 <CanOverSpi_messagesInBuffer+0x48>)
 8011128:	781b      	ldrb	r3, [r3, #0]
 801112a:	f003 0301 	and.w	r3, r3, #1
 801112e:	b2db      	uxtb	r3, r3
 8011130:	2b00      	cmp	r3, #0
 8011132:	d002      	beq.n	801113a <CanOverSpi_messagesInBuffer+0x2a>
	{
		messageCount++;
 8011134:	79fb      	ldrb	r3, [r7, #7]
 8011136:	3301      	adds	r3, #1
 8011138:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* do nothing */
	}

	if(ctrlStatus.RX1IF != STD_LOW)
 801113a:	4b07      	ldr	r3, [pc, #28]	; (8011158 <CanOverSpi_messagesInBuffer+0x48>)
 801113c:	781b      	ldrb	r3, [r3, #0]
 801113e:	f003 0302 	and.w	r3, r3, #2
 8011142:	b2db      	uxtb	r3, r3
 8011144:	2b00      	cmp	r3, #0
 8011146:	d002      	beq.n	801114e <CanOverSpi_messagesInBuffer+0x3e>
	{
		messageCount++;
 8011148:	79fb      	ldrb	r3, [r7, #7]
 801114a:	3301      	adds	r3, #1
 801114c:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		/* do nothing */
	}
	return messageCount;
 801114e:	79fb      	ldrb	r3, [r7, #7]
}
 8011150:	4618      	mov	r0, r3
 8011152:	3708      	adds	r7, #8
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}
 8011158:	20000cc4 	.word	0x20000cc4

0801115c <CanOverSpi_isBussOff>:
/***********************************************************************************
* Function: CanOverSpi_isBussOff									   			   *
* Description: Driver bus state check.		 		   							   *
************************************************************************************/
StdReturnType CanOverSpi_isBussOff()
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b082      	sub	sp, #8
 8011160:	af00      	add	r7, sp, #0
	uint8 returnValue = E_NOT_OK;
 8011162:	2301      	movs	r3, #1
 8011164:	71fb      	strb	r3, [r7, #7]
	errorStatus.error_flag_reg = MCP2515_CanOverSpi_ReadByte(MCP2515_CanOverSpi_EFLG);
 8011166:	202d      	movs	r0, #45	; 0x2d
 8011168:	f000 f952 	bl	8011410 <MCP2515_CanOverSpi_ReadByte>
 801116c:	4603      	mov	r3, r0
 801116e:	461a      	mov	r2, r3
 8011170:	4b07      	ldr	r3, [pc, #28]	; (8011190 <CanOverSpi_isBussOff+0x34>)
 8011172:	701a      	strb	r2, [r3, #0]
	if(errorStatus.TXBO == STD_HIGH)
 8011174:	4b06      	ldr	r3, [pc, #24]	; (8011190 <CanOverSpi_isBussOff+0x34>)
 8011176:	781b      	ldrb	r3, [r3, #0]
 8011178:	f003 0320 	and.w	r3, r3, #32
 801117c:	b2db      	uxtb	r3, r3
 801117e:	2b00      	cmp	r3, #0
 8011180:	d001      	beq.n	8011186 <CanOverSpi_isBussOff+0x2a>
	{
		returnValue = E_OK;
 8011182:	2300      	movs	r3, #0
 8011184:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		/* do nothing */
	}
	return returnValue;
 8011186:	79fb      	ldrb	r3, [r7, #7]
}
 8011188:	4618      	mov	r0, r3
 801118a:	3708      	adds	r7, #8
 801118c:	46bd      	mov	sp, r7
 801118e:	bd80      	pop	{r7, pc}
 8011190:	20000cc8 	.word	0x20000cc8

08011194 <CanOverSpi_isRxErrorPassive>:
/***********************************************************************************
* Function: CanOverSpi_isRxErrorPassive									           *
* Description: Check for receive error.		 		   							   *
************************************************************************************/
StdReturnType CanOverSpi_isRxErrorPassive()
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b082      	sub	sp, #8
 8011198:	af00      	add	r7, sp, #0
	uint8 returnValue = E_NOT_OK;
 801119a:	2301      	movs	r3, #1
 801119c:	71fb      	strb	r3, [r7, #7]
	errorStatus.error_flag_reg = MCP2515_CanOverSpi_ReadByte(MCP2515_CanOverSpi_EFLG);
 801119e:	202d      	movs	r0, #45	; 0x2d
 80111a0:	f000 f936 	bl	8011410 <MCP2515_CanOverSpi_ReadByte>
 80111a4:	4603      	mov	r3, r0
 80111a6:	461a      	mov	r2, r3
 80111a8:	4b07      	ldr	r3, [pc, #28]	; (80111c8 <CanOverSpi_isRxErrorPassive+0x34>)
 80111aa:	701a      	strb	r2, [r3, #0]
	if(errorStatus.RXEP == STD_HIGH)
 80111ac:	4b06      	ldr	r3, [pc, #24]	; (80111c8 <CanOverSpi_isRxErrorPassive+0x34>)
 80111ae:	781b      	ldrb	r3, [r3, #0]
 80111b0:	f003 0308 	and.w	r3, r3, #8
 80111b4:	b2db      	uxtb	r3, r3
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d001      	beq.n	80111be <CanOverSpi_isRxErrorPassive+0x2a>
	{
		returnValue = E_OK;
 80111ba:	2300      	movs	r3, #0
 80111bc:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		/* do nothing */
	}
	return returnValue;
 80111be:	79fb      	ldrb	r3, [r7, #7]
}
 80111c0:	4618      	mov	r0, r3
 80111c2:	3708      	adds	r7, #8
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd80      	pop	{r7, pc}
 80111c8:	20000cc8 	.word	0x20000cc8

080111cc <CanOverSpi_isTxErrorPassive>:
/***********************************************************************************
* Function: CanOverSpi_isTxErrorPassive									   		   *
* Description: Check for transmit error.		 		   						   *
************************************************************************************/
StdReturnType CanOverSpi_isTxErrorPassive()
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b082      	sub	sp, #8
 80111d0:	af00      	add	r7, sp, #0
	uint8 returnValue = E_NOT_OK;
 80111d2:	2301      	movs	r3, #1
 80111d4:	71fb      	strb	r3, [r7, #7]
	errorStatus.error_flag_reg = MCP2515_CanOverSpi_ReadByte(MCP2515_CanOverSpi_EFLG);
 80111d6:	202d      	movs	r0, #45	; 0x2d
 80111d8:	f000 f91a 	bl	8011410 <MCP2515_CanOverSpi_ReadByte>
 80111dc:	4603      	mov	r3, r0
 80111de:	461a      	mov	r2, r3
 80111e0:	4b07      	ldr	r3, [pc, #28]	; (8011200 <CanOverSpi_isTxErrorPassive+0x34>)
 80111e2:	701a      	strb	r2, [r3, #0]
	if(errorStatus.TXEP == STD_HIGH)
 80111e4:	4b06      	ldr	r3, [pc, #24]	; (8011200 <CanOverSpi_isTxErrorPassive+0x34>)
 80111e6:	781b      	ldrb	r3, [r3, #0]
 80111e8:	f003 0310 	and.w	r3, r3, #16
 80111ec:	b2db      	uxtb	r3, r3
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d001      	beq.n	80111f6 <CanOverSpi_isTxErrorPassive+0x2a>
	{
		returnValue = E_OK;
 80111f2:	2300      	movs	r3, #0
 80111f4:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		/* do nothing */
	}
	return returnValue;
 80111f6:	79fb      	ldrb	r3, [r7, #7]
}
 80111f8:	4618      	mov	r0, r3
 80111fa:	3708      	adds	r7, #8
 80111fc:	46bd      	mov	sp, r7
 80111fe:	bd80      	pop	{r7, pc}
 8011200:	20000cc8 	.word	0x20000cc8

08011204 <CanOverSpi_ConvertRegToExtendedCanId>:
/***********************************************************************************
* Function: CanOverSpi_ConvertRegToExtendedCanId								   *
* Description: Convert CAN Message ID.		 		   							   *
************************************************************************************/
STATIC uint32 CanOverSpi_ConvertRegToExtendedCanId(uint8 tempRXBn_EIDH, uint8 tempRXBn_EIDL, uint8 tempRXBn_SIDH, uint8 tempRXBn_SIDL)
{
 8011204:	b490      	push	{r4, r7}
 8011206:	b086      	sub	sp, #24
 8011208:	af00      	add	r7, sp, #0
 801120a:	4604      	mov	r4, r0
 801120c:	4608      	mov	r0, r1
 801120e:	4611      	mov	r1, r2
 8011210:	461a      	mov	r2, r3
 8011212:	4623      	mov	r3, r4
 8011214:	71fb      	strb	r3, [r7, #7]
 8011216:	4603      	mov	r3, r0
 8011218:	71bb      	strb	r3, [r7, #6]
 801121a:	460b      	mov	r3, r1
 801121c:	717b      	strb	r3, [r7, #5]
 801121e:	4613      	mov	r3, r2
 8011220:	713b      	strb	r3, [r7, #4]
	uint32 returnValue = STD_LOW;
 8011222:	2300      	movs	r3, #0
 8011224:	617b      	str	r3, [r7, #20]
	uint32 ConvertedID = STD_LOW;
 8011226:	2300      	movs	r3, #0
 8011228:	613b      	str	r3, [r7, #16]
	uint8 CAN_standardLo_ID_lo2bits;
	uint8 CAN_standardLo_ID_hi3bits;
	CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 801122a:	793b      	ldrb	r3, [r7, #4]
 801122c:	f003 0303 	and.w	r3, r3, #3
 8011230:	73fb      	strb	r3, [r7, #15]
	CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 8011232:	793b      	ldrb	r3, [r7, #4]
 8011234:	095b      	lsrs	r3, r3, #5
 8011236:	73bb      	strb	r3, [r7, #14]
	ConvertedID = (tempRXBn_SIDH << 3);
 8011238:	797b      	ldrb	r3, [r7, #5]
 801123a:	00db      	lsls	r3, r3, #3
 801123c:	613b      	str	r3, [r7, #16]
	ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 801123e:	7bbb      	ldrb	r3, [r7, #14]
 8011240:	693a      	ldr	r2, [r7, #16]
 8011242:	4413      	add	r3, r2
 8011244:	613b      	str	r3, [r7, #16]
	ConvertedID = (ConvertedID << 2);
 8011246:	693b      	ldr	r3, [r7, #16]
 8011248:	009b      	lsls	r3, r3, #2
 801124a:	613b      	str	r3, [r7, #16]
	ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 801124c:	7bfb      	ldrb	r3, [r7, #15]
 801124e:	693a      	ldr	r2, [r7, #16]
 8011250:	4413      	add	r3, r2
 8011252:	613b      	str	r3, [r7, #16]
	ConvertedID = (ConvertedID << 8);
 8011254:	693b      	ldr	r3, [r7, #16]
 8011256:	021b      	lsls	r3, r3, #8
 8011258:	613b      	str	r3, [r7, #16]
	ConvertedID = ConvertedID + tempRXBn_EIDH;
 801125a:	79fb      	ldrb	r3, [r7, #7]
 801125c:	693a      	ldr	r2, [r7, #16]
 801125e:	4413      	add	r3, r2
 8011260:	613b      	str	r3, [r7, #16]
	ConvertedID = (ConvertedID << 8);
 8011262:	693b      	ldr	r3, [r7, #16]
 8011264:	021b      	lsls	r3, r3, #8
 8011266:	613b      	str	r3, [r7, #16]
	ConvertedID = ConvertedID + tempRXBn_EIDL;
 8011268:	79bb      	ldrb	r3, [r7, #6]
 801126a:	693a      	ldr	r2, [r7, #16]
 801126c:	4413      	add	r3, r2
 801126e:	613b      	str	r3, [r7, #16]
	returnValue = ConvertedID;
 8011270:	693b      	ldr	r3, [r7, #16]
 8011272:	617b      	str	r3, [r7, #20]
	return returnValue;
 8011274:	697b      	ldr	r3, [r7, #20]
}
 8011276:	4618      	mov	r0, r3
 8011278:	3718      	adds	r7, #24
 801127a:	46bd      	mov	sp, r7
 801127c:	bc90      	pop	{r4, r7}
 801127e:	4770      	bx	lr

08011280 <CanOverSpi_ConvertRegToStandardCanId>:
/***********************************************************************************
* Function: CanOverSpi_ConvertRegToStandardCanId								   *
* Description: Convert CAN Message ID.		 		   							   *
************************************************************************************/
STATIC uint32 CanOverSpi_ConvertRegToStandardCanId(uint8 tempRXBn_SIDH, uint8 tempRXBn_SIDL)
{
 8011280:	b480      	push	{r7}
 8011282:	b085      	sub	sp, #20
 8011284:	af00      	add	r7, sp, #0
 8011286:	4603      	mov	r3, r0
 8011288:	460a      	mov	r2, r1
 801128a:	71fb      	strb	r3, [r7, #7]
 801128c:	4613      	mov	r3, r2
 801128e:	71bb      	strb	r3, [r7, #6]
	uint32 returnValue = STD_LOW;
 8011290:	2300      	movs	r3, #0
 8011292:	60fb      	str	r3, [r7, #12]
	uint32 ConvertedID = STD_LOW;
 8011294:	2300      	movs	r3, #0
 8011296:	60bb      	str	r3, [r7, #8]
	ConvertedID = (tempRXBn_SIDH << 3);
 8011298:	79fb      	ldrb	r3, [r7, #7]
 801129a:	00db      	lsls	r3, r3, #3
 801129c:	60bb      	str	r3, [r7, #8]
	ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 801129e:	79bb      	ldrb	r3, [r7, #6]
 80112a0:	095b      	lsrs	r3, r3, #5
 80112a2:	b2db      	uxtb	r3, r3
 80112a4:	461a      	mov	r2, r3
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	4413      	add	r3, r2
 80112aa:	60bb      	str	r3, [r7, #8]
	returnValue = ConvertedID;
 80112ac:	68bb      	ldr	r3, [r7, #8]
 80112ae:	60fb      	str	r3, [r7, #12]
	return returnValue;
 80112b0:	68fb      	ldr	r3, [r7, #12]
}
 80112b2:	4618      	mov	r0, r3
 80112b4:	3714      	adds	r7, #20
 80112b6:	46bd      	mov	sp, r7
 80112b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112bc:	4770      	bx	lr

080112be <CanOverSpi_ConvertCanIdToReg>:
/***********************************************************************************
* Function: CanOverSpi_ConvertCanIdToReg								   		   *
* Description: Convert CAN Message ID.		 		   							   *
************************************************************************************/
STATIC VOID CanOverSpi_ConvertCanIdToReg(uint32 tempPassedInID, uint8 canIdType, id_reg_t *passedIdReg)
{
 80112be:	b480      	push	{r7}
 80112c0:	b087      	sub	sp, #28
 80112c2:	af00      	add	r7, sp, #0
 80112c4:	60f8      	str	r0, [r7, #12]
 80112c6:	460b      	mov	r3, r1
 80112c8:	607a      	str	r2, [r7, #4]
 80112ca:	72fb      	strb	r3, [r7, #11]
	uint8 wipSIDL = STD_LOW;
 80112cc:	2300      	movs	r3, #0
 80112ce:	75fb      	strb	r3, [r7, #23]
	if (canIdType == CMD_EXTENDED_CAN_MSG_ID)
 80112d0:	7afb      	ldrb	r3, [r7, #11]
 80112d2:	2b01      	cmp	r3, #1
 80112d4:	d12e      	bne.n	8011334 <CanOverSpi_ConvertCanIdToReg+0x76>
	{
		passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	b2da      	uxtb	r2, r3
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	70da      	strb	r2, [r3, #3]
		tempPassedInID = tempPassedInID >> 8;
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	0a1b      	lsrs	r3, r3, #8
 80112e2:	60fb      	str	r3, [r7, #12]
		passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	b2da      	uxtb	r2, r3
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	709a      	strb	r2, [r3, #2]
		tempPassedInID = tempPassedInID >> 8;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	0a1b      	lsrs	r3, r3, #8
 80112f0:	60fb      	str	r3, [r7, #12]
		wipSIDL = 0x03 & tempPassedInID;
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	b2db      	uxtb	r3, r3
 80112f6:	f003 0303 	and.w	r3, r3, #3
 80112fa:	75fb      	strb	r3, [r7, #23]
		tempPassedInID = tempPassedInID << 3;
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	00db      	lsls	r3, r3, #3
 8011300:	60fb      	str	r3, [r7, #12]
		wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	b2db      	uxtb	r3, r3
 8011306:	f023 031f 	bic.w	r3, r3, #31
 801130a:	b2da      	uxtb	r2, r3
 801130c:	7dfb      	ldrb	r3, [r7, #23]
 801130e:	4413      	add	r3, r2
 8011310:	75fb      	strb	r3, [r7, #23]
		wipSIDL = wipSIDL + 0x08;
 8011312:	7dfb      	ldrb	r3, [r7, #23]
 8011314:	3308      	adds	r3, #8
 8011316:	75fb      	strb	r3, [r7, #23]
		passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8011318:	7dfb      	ldrb	r3, [r7, #23]
 801131a:	f023 0314 	bic.w	r3, r3, #20
 801131e:	b2da      	uxtb	r2, r3
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	705a      	strb	r2, [r3, #1]
		tempPassedInID = tempPassedInID >> 8;
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	0a1b      	lsrs	r3, r3, #8
 8011328:	60fb      	str	r3, [r7, #12]
		passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	b2da      	uxtb	r2, r3
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	701a      	strb	r2, [r3, #0]
		tempPassedInID = tempPassedInID << 5;
		passedIdReg->tempSIDL = 0xFF & tempPassedInID;
		tempPassedInID = tempPassedInID >> 8;
		passedIdReg->tempSIDH = 0xFF & tempPassedInID;
	}
}
 8011332:	e013      	b.n	801135c <CanOverSpi_ConvertCanIdToReg+0x9e>
		passedIdReg->tempEID8 = 0;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	2200      	movs	r2, #0
 8011338:	709a      	strb	r2, [r3, #2]
		passedIdReg->tempEID0 = 0;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	2200      	movs	r2, #0
 801133e:	70da      	strb	r2, [r3, #3]
		tempPassedInID = tempPassedInID << 5;
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	015b      	lsls	r3, r3, #5
 8011344:	60fb      	str	r3, [r7, #12]
		passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	b2da      	uxtb	r2, r3
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	705a      	strb	r2, [r3, #1]
		tempPassedInID = tempPassedInID >> 8;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	0a1b      	lsrs	r3, r3, #8
 8011352:	60fb      	str	r3, [r7, #12]
		passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	b2da      	uxtb	r2, r3
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	701a      	strb	r2, [r3, #0]
}
 801135c:	bf00      	nop
 801135e:	371c      	adds	r7, #28
 8011360:	46bd      	mov	sp, r7
 8011362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011366:	4770      	bx	lr

08011368 <MCP2515_CanOverSpi_Initialize>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_Initialize									       *
* Description: Set the CAN CS pin high.		 	   								   *
************************************************************************************/
StdReturnType MCP2515_CanOverSpi_Initialize()
{
 8011368:	b580      	push	{r7, lr}
 801136a:	af00      	add	r7, sp, #0
	MCP2515_CanOverSpi_CS_HIGH();
 801136c:	2201      	movs	r2, #1
 801136e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011372:	4807      	ldr	r0, [pc, #28]	; (8011390 <MCP2515_CanOverSpi_Initialize+0x28>)
 8011374:	f7f8 fd6e 	bl	8009e54 <HAL_GPIO_WritePin>
	if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8011378:	4806      	ldr	r0, [pc, #24]	; (8011394 <MCP2515_CanOverSpi_Initialize+0x2c>)
 801137a:	f7fb ff69 	bl	800d250 <HAL_SPI_GetState>
 801137e:	4603      	mov	r3, r0
 8011380:	2b01      	cmp	r3, #1
 8011382:	d101      	bne.n	8011388 <MCP2515_CanOverSpi_Initialize+0x20>
	{
		return E_OK;
 8011384:	2300      	movs	r3, #0
 8011386:	e000      	b.n	801138a <MCP2515_CanOverSpi_Initialize+0x22>
	}
	else
	{
		/* do nothing */
	}
	return E_NOT_OK;
 8011388:	2301      	movs	r3, #1
}
 801138a:	4618      	mov	r0, r3
 801138c:	bd80      	pop	{r7, pc}
 801138e:	bf00      	nop
 8011390:	40020000 	.word	0x40020000
 8011394:	20000620 	.word	0x20000620

08011398 <MCP2515_CanOverSpi_SetConfigMode>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_SetConfigMode									   *
* Description: Set the mode to config.		 		   							   *
************************************************************************************/
StdReturnType MCP2515_CanOverSpi_SetConfigMode()
{
 8011398:	b580      	push	{r7, lr}
 801139a:	af00      	add	r7, sp, #0
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_CANCTRL, MODE_CONFIG);
 801139c:	2180      	movs	r1, #128	; 0x80
 801139e:	200f      	movs	r0, #15
 80113a0:	f000 f87e 	bl	80114a0 <MCP2515_CanOverSpi_WriteByte>
	if((MCP2515_CanOverSpi_ReadByte(MCP2515_CanOverSpi_CANSTAT) & MODE_MASK) == MODE_CONFIG)
 80113a4:	200e      	movs	r0, #14
 80113a6:	f000 f833 	bl	8011410 <MCP2515_CanOverSpi_ReadByte>
 80113aa:	4603      	mov	r3, r0
 80113ac:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80113b0:	2b80      	cmp	r3, #128	; 0x80
 80113b2:	d101      	bne.n	80113b8 <MCP2515_CanOverSpi_SetConfigMode+0x20>
	{
		return E_OK;
 80113b4:	2300      	movs	r3, #0
 80113b6:	e000      	b.n	80113ba <MCP2515_CanOverSpi_SetConfigMode+0x22>
	}
	else
	{
		/* do nothing */
	}
	return E_NOT_OK;
 80113b8:	2301      	movs	r3, #1
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	bd80      	pop	{r7, pc}

080113be <MCP2515_CanOverSpi_SetNormalMode>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_SetNormalMode									   *
* Description: Set the mode to normal.		 		   							   *
************************************************************************************/
StdReturnType MCP2515_CanOverSpi_SetNormalMode()
{
 80113be:	b580      	push	{r7, lr}
 80113c0:	af00      	add	r7, sp, #0
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_CANCTRL, MODE_NORMAL);
 80113c2:	2100      	movs	r1, #0
 80113c4:	200f      	movs	r0, #15
 80113c6:	f000 f86b 	bl	80114a0 <MCP2515_CanOverSpi_WriteByte>
	if((MCP2515_CanOverSpi_ReadByte(MCP2515_CanOverSpi_CANSTAT) & MODE_MASK) == MODE_NORMAL)
 80113ca:	200e      	movs	r0, #14
 80113cc:	f000 f820 	bl	8011410 <MCP2515_CanOverSpi_ReadByte>
 80113d0:	4603      	mov	r3, r0
 80113d2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d101      	bne.n	80113de <MCP2515_CanOverSpi_SetNormalMode+0x20>
	{
		return E_OK;
 80113da:	2300      	movs	r3, #0
 80113dc:	e000      	b.n	80113e0 <MCP2515_CanOverSpi_SetNormalMode+0x22>
	}
	else
	{
		/* do nothing */
	}
	return E_NOT_OK;
 80113de:	2301      	movs	r3, #1
}
 80113e0:	4618      	mov	r0, r3
 80113e2:	bd80      	pop	{r7, pc}

080113e4 <MCP2515_CanOverSpi_Reset>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_Reset											   *
* Description: Reset the bus.		 		   									   *
************************************************************************************/
VOID MCP2515_CanOverSpi_Reset()
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	af00      	add	r7, sp, #0
	MCP2515_CanOverSpi_CS_LOW();
 80113e8:	2201      	movs	r2, #1
 80113ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80113ee:	4807      	ldr	r0, [pc, #28]	; (801140c <MCP2515_CanOverSpi_Reset+0x28>)
 80113f0:	f7f8 fd30 	bl	8009e54 <HAL_GPIO_WritePin>
	SPI_Tx(MCP2515_CanOverSpi_RESET);
 80113f4:	20c0      	movs	r0, #192	; 0xc0
 80113f6:	f000 f929 	bl	801164c <SPI_Tx>
	MCP2515_CanOverSpi_CS_HIGH();
 80113fa:	2201      	movs	r2, #1
 80113fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011400:	4802      	ldr	r0, [pc, #8]	; (801140c <MCP2515_CanOverSpi_Reset+0x28>)
 8011402:	f7f8 fd27 	bl	8009e54 <HAL_GPIO_WritePin>
}
 8011406:	bf00      	nop
 8011408:	bd80      	pop	{r7, pc}
 801140a:	bf00      	nop
 801140c:	40020000 	.word	0x40020000

08011410 <MCP2515_CanOverSpi_ReadByte>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_ReadByte											   *
* Description: Read the byte from the bus.		 		   						   *
************************************************************************************/
StdReturnType MCP2515_CanOverSpi_ReadByte (uint8 address)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b084      	sub	sp, #16
 8011414:	af00      	add	r7, sp, #0
 8011416:	4603      	mov	r3, r0
 8011418:	71fb      	strb	r3, [r7, #7]
	uint8 retVal;
	MCP2515_CanOverSpi_CS_LOW();
 801141a:	2201      	movs	r2, #1
 801141c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011420:	480c      	ldr	r0, [pc, #48]	; (8011454 <MCP2515_CanOverSpi_ReadByte+0x44>)
 8011422:	f7f8 fd17 	bl	8009e54 <HAL_GPIO_WritePin>
	SPI_Tx(MCP2515_CanOverSpi_READ);
 8011426:	2003      	movs	r0, #3
 8011428:	f000 f910 	bl	801164c <SPI_Tx>
	SPI_Tx(address);
 801142c:	79fb      	ldrb	r3, [r7, #7]
 801142e:	4618      	mov	r0, r3
 8011430:	f000 f90c 	bl	801164c <SPI_Tx>
	retVal = SPI_Rx();
 8011434:	f000 f930 	bl	8011698 <SPI_Rx>
 8011438:	4603      	mov	r3, r0
 801143a:	73fb      	strb	r3, [r7, #15]
	MCP2515_CanOverSpi_CS_HIGH();
 801143c:	2201      	movs	r2, #1
 801143e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011442:	4804      	ldr	r0, [pc, #16]	; (8011454 <MCP2515_CanOverSpi_ReadByte+0x44>)
 8011444:	f7f8 fd06 	bl	8009e54 <HAL_GPIO_WritePin>
	return retVal;
 8011448:	7bfb      	ldrb	r3, [r7, #15]
}
 801144a:	4618      	mov	r0, r3
 801144c:	3710      	adds	r7, #16
 801144e:	46bd      	mov	sp, r7
 8011450:	bd80      	pop	{r7, pc}
 8011452:	bf00      	nop
 8011454:	40020000 	.word	0x40020000

08011458 <MCP2515_CanOverSpi_ReadRxSequence>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_ReadRxSequence									   *
* Description: Read received sequence of bytes.		 		   					   *
************************************************************************************/
VOID MCP2515_CanOverSpi_ReadRxSequence(uint8 instruction, uint8 *data, uint8 length)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b082      	sub	sp, #8
 801145c:	af00      	add	r7, sp, #0
 801145e:	4603      	mov	r3, r0
 8011460:	6039      	str	r1, [r7, #0]
 8011462:	71fb      	strb	r3, [r7, #7]
 8011464:	4613      	mov	r3, r2
 8011466:	71bb      	strb	r3, [r7, #6]
	MCP2515_CanOverSpi_CS_LOW();
 8011468:	2201      	movs	r2, #1
 801146a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801146e:	480b      	ldr	r0, [pc, #44]	; (801149c <MCP2515_CanOverSpi_ReadRxSequence+0x44>)
 8011470:	f7f8 fcf0 	bl	8009e54 <HAL_GPIO_WritePin>
	SPI_Tx(instruction);
 8011474:	79fb      	ldrb	r3, [r7, #7]
 8011476:	4618      	mov	r0, r3
 8011478:	f000 f8e8 	bl	801164c <SPI_Tx>
	SPI_RxBuffer(data, length);
 801147c:	79bb      	ldrb	r3, [r7, #6]
 801147e:	4619      	mov	r1, r3
 8011480:	6838      	ldr	r0, [r7, #0]
 8011482:	f000 f919 	bl	80116b8 <SPI_RxBuffer>
	MCP2515_CanOverSpi_CS_HIGH();
 8011486:	2201      	movs	r2, #1
 8011488:	f44f 7100 	mov.w	r1, #512	; 0x200
 801148c:	4803      	ldr	r0, [pc, #12]	; (801149c <MCP2515_CanOverSpi_ReadRxSequence+0x44>)
 801148e:	f7f8 fce1 	bl	8009e54 <HAL_GPIO_WritePin>
}
 8011492:	bf00      	nop
 8011494:	3708      	adds	r7, #8
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}
 801149a:	bf00      	nop
 801149c:	40020000 	.word	0x40020000

080114a0 <MCP2515_CanOverSpi_WriteByte>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_WriteByte										   *
* Description: Write the byte on the bus.		 		   						   *
************************************************************************************/
VOID MCP2515_CanOverSpi_WriteByte(uint8 address, uint8 data)
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b082      	sub	sp, #8
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	4603      	mov	r3, r0
 80114a8:	460a      	mov	r2, r1
 80114aa:	71fb      	strb	r3, [r7, #7]
 80114ac:	4613      	mov	r3, r2
 80114ae:	71bb      	strb	r3, [r7, #6]
	MCP2515_CanOverSpi_CS_LOW();
 80114b0:	2201      	movs	r2, #1
 80114b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80114b6:	480c      	ldr	r0, [pc, #48]	; (80114e8 <MCP2515_CanOverSpi_WriteByte+0x48>)
 80114b8:	f7f8 fccc 	bl	8009e54 <HAL_GPIO_WritePin>
	SPI_Tx(MCP2515_CanOverSpi_WRITE);
 80114bc:	2002      	movs	r0, #2
 80114be:	f000 f8c5 	bl	801164c <SPI_Tx>
	SPI_Tx(address);
 80114c2:	79fb      	ldrb	r3, [r7, #7]
 80114c4:	4618      	mov	r0, r3
 80114c6:	f000 f8c1 	bl	801164c <SPI_Tx>
	SPI_Tx(data);
 80114ca:	79bb      	ldrb	r3, [r7, #6]
 80114cc:	4618      	mov	r0, r3
 80114ce:	f000 f8bd 	bl	801164c <SPI_Tx>
	MCP2515_CanOverSpi_CS_HIGH();
 80114d2:	2201      	movs	r2, #1
 80114d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80114d8:	4803      	ldr	r0, [pc, #12]	; (80114e8 <MCP2515_CanOverSpi_WriteByte+0x48>)
 80114da:	f7f8 fcbb 	bl	8009e54 <HAL_GPIO_WritePin>
}
 80114de:	bf00      	nop
 80114e0:	3708      	adds	r7, #8
 80114e2:	46bd      	mov	sp, r7
 80114e4:	bd80      	pop	{r7, pc}
 80114e6:	bf00      	nop
 80114e8:	40020000 	.word	0x40020000

080114ec <MCP2515_CanOverSpi_WriteByteSequence>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_WriteByteSequence								   *
* Description: Initialize the bluetooth communication application.		 		   *
************************************************************************************/
VOID MCP2515_CanOverSpi_WriteByteSequence(uint8 startAddress, uint8 endAddress, uint8 *data)
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b082      	sub	sp, #8
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	4603      	mov	r3, r0
 80114f4:	603a      	str	r2, [r7, #0]
 80114f6:	71fb      	strb	r3, [r7, #7]
 80114f8:	460b      	mov	r3, r1
 80114fa:	71bb      	strb	r3, [r7, #6]
	MCP2515_CanOverSpi_CS_LOW();
 80114fc:	2201      	movs	r2, #1
 80114fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011502:	480f      	ldr	r0, [pc, #60]	; (8011540 <MCP2515_CanOverSpi_WriteByteSequence+0x54>)
 8011504:	f7f8 fca6 	bl	8009e54 <HAL_GPIO_WritePin>
	SPI_Tx(MCP2515_CanOverSpi_WRITE);
 8011508:	2002      	movs	r0, #2
 801150a:	f000 f89f 	bl	801164c <SPI_Tx>
	SPI_Tx(startAddress);
 801150e:	79fb      	ldrb	r3, [r7, #7]
 8011510:	4618      	mov	r0, r3
 8011512:	f000 f89b 	bl	801164c <SPI_Tx>
	SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8011516:	79ba      	ldrb	r2, [r7, #6]
 8011518:	79fb      	ldrb	r3, [r7, #7]
 801151a:	1ad3      	subs	r3, r2, r3
 801151c:	b2db      	uxtb	r3, r3
 801151e:	3301      	adds	r3, #1
 8011520:	b2db      	uxtb	r3, r3
 8011522:	4619      	mov	r1, r3
 8011524:	6838      	ldr	r0, [r7, #0]
 8011526:	f000 f8a3 	bl	8011670 <SPI_TxBuffer>
	MCP2515_CanOverSpi_CS_HIGH();
 801152a:	2201      	movs	r2, #1
 801152c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011530:	4803      	ldr	r0, [pc, #12]	; (8011540 <MCP2515_CanOverSpi_WriteByteSequence+0x54>)
 8011532:	f7f8 fc8f 	bl	8009e54 <HAL_GPIO_WritePin>
}
 8011536:	bf00      	nop
 8011538:	3708      	adds	r7, #8
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}
 801153e:	bf00      	nop
 8011540:	40020000 	.word	0x40020000

08011544 <MCP2515_CanOverSpi_LoadTxSequence>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_LoadTxSequence									   *
* Description: Load to be transmitted sequence of bytes.		 		   		   *
************************************************************************************/
VOID MCP2515_CanOverSpi_LoadTxSequence(uint8 instruction, uint8 *idReg, uint8 dlc, uint8 *data)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b084      	sub	sp, #16
 8011548:	af00      	add	r7, sp, #0
 801154a:	60b9      	str	r1, [r7, #8]
 801154c:	607b      	str	r3, [r7, #4]
 801154e:	4603      	mov	r3, r0
 8011550:	73fb      	strb	r3, [r7, #15]
 8011552:	4613      	mov	r3, r2
 8011554:	73bb      	strb	r3, [r7, #14]
	MCP2515_CanOverSpi_CS_LOW();
 8011556:	2201      	movs	r2, #1
 8011558:	f44f 7100 	mov.w	r1, #512	; 0x200
 801155c:	480e      	ldr	r0, [pc, #56]	; (8011598 <MCP2515_CanOverSpi_LoadTxSequence+0x54>)
 801155e:	f7f8 fc79 	bl	8009e54 <HAL_GPIO_WritePin>
	SPI_Tx(instruction);
 8011562:	7bfb      	ldrb	r3, [r7, #15]
 8011564:	4618      	mov	r0, r3
 8011566:	f000 f871 	bl	801164c <SPI_Tx>
	SPI_TxBuffer(idReg, 4);
 801156a:	2104      	movs	r1, #4
 801156c:	68b8      	ldr	r0, [r7, #8]
 801156e:	f000 f87f 	bl	8011670 <SPI_TxBuffer>
	SPI_Tx(dlc);
 8011572:	7bbb      	ldrb	r3, [r7, #14]
 8011574:	4618      	mov	r0, r3
 8011576:	f000 f869 	bl	801164c <SPI_Tx>
	SPI_TxBuffer(data, dlc);
 801157a:	7bbb      	ldrb	r3, [r7, #14]
 801157c:	4619      	mov	r1, r3
 801157e:	6878      	ldr	r0, [r7, #4]
 8011580:	f000 f876 	bl	8011670 <SPI_TxBuffer>
	MCP2515_CanOverSpi_CS_HIGH();
 8011584:	2201      	movs	r2, #1
 8011586:	f44f 7100 	mov.w	r1, #512	; 0x200
 801158a:	4803      	ldr	r0, [pc, #12]	; (8011598 <MCP2515_CanOverSpi_LoadTxSequence+0x54>)
 801158c:	f7f8 fc62 	bl	8009e54 <HAL_GPIO_WritePin>
}
 8011590:	bf00      	nop
 8011592:	3710      	adds	r7, #16
 8011594:	46bd      	mov	sp, r7
 8011596:	bd80      	pop	{r7, pc}
 8011598:	40020000 	.word	0x40020000

0801159c <MCP2515_CanOverSpi_RequestToSend>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_RequestToSend								       *
* Description: Request to send driver next instruction.		 		   			   *
************************************************************************************/
VOID MCP2515_CanOverSpi_RequestToSend(uint8 instruction)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b082      	sub	sp, #8
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	4603      	mov	r3, r0
 80115a4:	71fb      	strb	r3, [r7, #7]
	MCP2515_CanOverSpi_CS_LOW();
 80115a6:	2201      	movs	r2, #1
 80115a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80115ac:	4808      	ldr	r0, [pc, #32]	; (80115d0 <MCP2515_CanOverSpi_RequestToSend+0x34>)
 80115ae:	f7f8 fc51 	bl	8009e54 <HAL_GPIO_WritePin>
	SPI_Tx(instruction);
 80115b2:	79fb      	ldrb	r3, [r7, #7]
 80115b4:	4618      	mov	r0, r3
 80115b6:	f000 f849 	bl	801164c <SPI_Tx>
	MCP2515_CanOverSpi_CS_HIGH();
 80115ba:	2201      	movs	r2, #1
 80115bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80115c0:	4803      	ldr	r0, [pc, #12]	; (80115d0 <MCP2515_CanOverSpi_RequestToSend+0x34>)
 80115c2:	f7f8 fc47 	bl	8009e54 <HAL_GPIO_WritePin>
}
 80115c6:	bf00      	nop
 80115c8:	3708      	adds	r7, #8
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}
 80115ce:	bf00      	nop
 80115d0:	40020000 	.word	0x40020000

080115d4 <MCP2515_CanOverSpi_ReadStatus>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_ReadStatus										   *
* Description: Read bus status.		 		   									   *
************************************************************************************/
StdReturnType MCP2515_CanOverSpi_ReadStatus()
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b082      	sub	sp, #8
 80115d8:	af00      	add	r7, sp, #0
	uint8 retVal;
	MCP2515_CanOverSpi_CS_LOW();
 80115da:	2201      	movs	r2, #1
 80115dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80115e0:	480a      	ldr	r0, [pc, #40]	; (801160c <MCP2515_CanOverSpi_ReadStatus+0x38>)
 80115e2:	f7f8 fc37 	bl	8009e54 <HAL_GPIO_WritePin>
	SPI_Tx(MCP2515_CanOverSpi_READ_STATUS);
 80115e6:	20a0      	movs	r0, #160	; 0xa0
 80115e8:	f000 f830 	bl	801164c <SPI_Tx>
	retVal = SPI_Rx();
 80115ec:	f000 f854 	bl	8011698 <SPI_Rx>
 80115f0:	4603      	mov	r3, r0
 80115f2:	71fb      	strb	r3, [r7, #7]
	MCP2515_CanOverSpi_CS_HIGH();
 80115f4:	2201      	movs	r2, #1
 80115f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80115fa:	4804      	ldr	r0, [pc, #16]	; (801160c <MCP2515_CanOverSpi_ReadStatus+0x38>)
 80115fc:	f7f8 fc2a 	bl	8009e54 <HAL_GPIO_WritePin>
	return retVal;
 8011600:	79fb      	ldrb	r3, [r7, #7]
}
 8011602:	4618      	mov	r0, r3
 8011604:	3708      	adds	r7, #8
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}
 801160a:	bf00      	nop
 801160c:	40020000 	.word	0x40020000

08011610 <MCP2515_CanOverSpi_GetRxStatus>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_GetRxStatus										   *
* Description: Get receive line status.		 		   							   *
************************************************************************************/
StdReturnType MCP2515_CanOverSpi_GetRxStatus()
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b082      	sub	sp, #8
 8011614:	af00      	add	r7, sp, #0
	uint8 retVal;
	MCP2515_CanOverSpi_CS_LOW();
 8011616:	2201      	movs	r2, #1
 8011618:	f44f 7100 	mov.w	r1, #512	; 0x200
 801161c:	480a      	ldr	r0, [pc, #40]	; (8011648 <MCP2515_CanOverSpi_GetRxStatus+0x38>)
 801161e:	f7f8 fc19 	bl	8009e54 <HAL_GPIO_WritePin>
	SPI_Tx(MCP2515_CanOverSpi_RX_STATUS);
 8011622:	20b0      	movs	r0, #176	; 0xb0
 8011624:	f000 f812 	bl	801164c <SPI_Tx>
	retVal = SPI_Rx();
 8011628:	f000 f836 	bl	8011698 <SPI_Rx>
 801162c:	4603      	mov	r3, r0
 801162e:	71fb      	strb	r3, [r7, #7]
	MCP2515_CanOverSpi_CS_HIGH();
 8011630:	2201      	movs	r2, #1
 8011632:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011636:	4804      	ldr	r0, [pc, #16]	; (8011648 <MCP2515_CanOverSpi_GetRxStatus+0x38>)
 8011638:	f7f8 fc0c 	bl	8009e54 <HAL_GPIO_WritePin>
	return retVal;
 801163c:	79fb      	ldrb	r3, [r7, #7]
}
 801163e:	4618      	mov	r0, r3
 8011640:	3708      	adds	r7, #8
 8011642:	46bd      	mov	sp, r7
 8011644:	bd80      	pop	{r7, pc}
 8011646:	bf00      	nop
 8011648:	40020000 	.word	0x40020000

0801164c <SPI_Tx>:
/***********************************************************************************
* Function: SPI_Tx													   		   	   *
* Description: Peripheral interface.		 		   							   *
************************************************************************************/
STATIC VOID SPI_Tx(uint8 data)
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b082      	sub	sp, #8
 8011650:	af00      	add	r7, sp, #0
 8011652:	4603      	mov	r3, r0
 8011654:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit_IT(SPI_CAN, &data, 1);
 8011656:	1dfb      	adds	r3, r7, #7
 8011658:	2201      	movs	r2, #1
 801165a:	4619      	mov	r1, r3
 801165c:	4803      	ldr	r0, [pc, #12]	; (801166c <SPI_Tx+0x20>)
 801165e:	f7fb f9fb 	bl	800ca58 <HAL_SPI_Transmit_IT>
}
 8011662:	bf00      	nop
 8011664:	3708      	adds	r7, #8
 8011666:	46bd      	mov	sp, r7
 8011668:	bd80      	pop	{r7, pc}
 801166a:	bf00      	nop
 801166c:	20000620 	.word	0x20000620

08011670 <SPI_TxBuffer>:
/***********************************************************************************
* Function: SPI_TxBuffer													   	   *
* Description: Peripheral interface.		 		   							   *
************************************************************************************/
STATIC VOID SPI_TxBuffer(uint8 *buffer, uint8 length)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b082      	sub	sp, #8
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
 8011678:	460b      	mov	r3, r1
 801167a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit_IT(SPI_CAN, buffer, length);
 801167c:	78fb      	ldrb	r3, [r7, #3]
 801167e:	b29b      	uxth	r3, r3
 8011680:	461a      	mov	r2, r3
 8011682:	6879      	ldr	r1, [r7, #4]
 8011684:	4803      	ldr	r0, [pc, #12]	; (8011694 <SPI_TxBuffer+0x24>)
 8011686:	f7fb f9e7 	bl	800ca58 <HAL_SPI_Transmit_IT>
}
 801168a:	bf00      	nop
 801168c:	3708      	adds	r7, #8
 801168e:	46bd      	mov	sp, r7
 8011690:	bd80      	pop	{r7, pc}
 8011692:	bf00      	nop
 8011694:	20000620 	.word	0x20000620

08011698 <SPI_Rx>:
/***********************************************************************************
* Function: SPI_Rx													   	           *
* Description: Peripheral interface.		 		   							   *
************************************************************************************/
STATIC StdReturnType SPI_Rx(VOID)
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b082      	sub	sp, #8
 801169c:	af00      	add	r7, sp, #0
	uint8 retVal;
	HAL_SPI_Receive_IT(SPI_CAN, &retVal, 1);
 801169e:	1dfb      	adds	r3, r7, #7
 80116a0:	2201      	movs	r2, #1
 80116a2:	4619      	mov	r1, r3
 80116a4:	4803      	ldr	r0, [pc, #12]	; (80116b4 <SPI_Rx+0x1c>)
 80116a6:	f7fb fa61 	bl	800cb6c <HAL_SPI_Receive_IT>
	return retVal;
 80116aa:	79fb      	ldrb	r3, [r7, #7]
}
 80116ac:	4618      	mov	r0, r3
 80116ae:	3708      	adds	r7, #8
 80116b0:	46bd      	mov	sp, r7
 80116b2:	bd80      	pop	{r7, pc}
 80116b4:	20000620 	.word	0x20000620

080116b8 <SPI_RxBuffer>:
/***********************************************************************************
* Function: SPI_RxBuffer													   	   *
* Description: Peripheral interface.		 		   							   *
************************************************************************************/
STATIC VOID SPI_RxBuffer(uint8 *buffer, uint8 length)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b082      	sub	sp, #8
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
 80116c0:	460b      	mov	r3, r1
 80116c2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive_IT(SPI_CAN, buffer, length);
 80116c4:	78fb      	ldrb	r3, [r7, #3]
 80116c6:	b29b      	uxth	r3, r3
 80116c8:	461a      	mov	r2, r3
 80116ca:	6879      	ldr	r1, [r7, #4]
 80116cc:	4803      	ldr	r0, [pc, #12]	; (80116dc <SPI_RxBuffer+0x24>)
 80116ce:	f7fb fa4d 	bl	800cb6c <HAL_SPI_Receive_IT>
}
 80116d2:	bf00      	nop
 80116d4:	3708      	adds	r7, #8
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}
 80116da:	bf00      	nop
 80116dc:	20000620 	.word	0x20000620

080116e0 <Spi_MainFunction>:
/***********************************************************************************
* Function: Spi_MainFunction											 		   *
* Description: Module main function.					           				   *
************************************************************************************/
VOID Spi_MainFunction()
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b082      	sub	sp, #8
 80116e4:	af00      	add	r7, sp, #0
	/* Store state in local variable. */
	uint32 localState = HAL_SPI_GetState(&hspi3);
 80116e6:	481f      	ldr	r0, [pc, #124]	; (8011764 <Spi_MainFunction+0x84>)
 80116e8:	f7fb fdb2 	bl	800d250 <HAL_SPI_GetState>
 80116ec:	4603      	mov	r3, r0
 80116ee:	607b      	str	r3, [r7, #4]
	/* Process state. */
	switch(localState)
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	2b06      	cmp	r3, #6
 80116f4:	d831      	bhi.n	801175a <Spi_MainFunction+0x7a>
 80116f6:	a201      	add	r2, pc, #4	; (adr r2, 80116fc <Spi_MainFunction+0x1c>)
 80116f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116fc:	08011719 	.word	0x08011719
 8011700:	08011725 	.word	0x08011725
 8011704:	0801172d 	.word	0x0801172d
 8011708:	08011735 	.word	0x08011735
 801170c:	0801173d 	.word	0x0801173d
 8011710:	08011745 	.word	0x08011745
 8011714:	0801174d 	.word	0x0801174d
	{
		case HAL_SPI_STATE_RESET:
			Spi_BswState = localState;
 8011718:	4a13      	ldr	r2, [pc, #76]	; (8011768 <Spi_MainFunction+0x88>)
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	6013      	str	r3, [r2, #0]
			Spi_Init();
 801171e:	f000 f825 	bl	801176c <Spi_Init>
			break;
 8011722:	e01b      	b.n	801175c <Spi_MainFunction+0x7c>
		case HAL_SPI_STATE_READY:
			Spi_BswState = localState;
 8011724:	4a10      	ldr	r2, [pc, #64]	; (8011768 <Spi_MainFunction+0x88>)
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6013      	str	r3, [r2, #0]
			break;
 801172a:	e017      	b.n	801175c <Spi_MainFunction+0x7c>
		case HAL_SPI_STATE_BUSY:
			Spi_BswState = localState;
 801172c:	4a0e      	ldr	r2, [pc, #56]	; (8011768 <Spi_MainFunction+0x88>)
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	6013      	str	r3, [r2, #0]
			break;
 8011732:	e013      	b.n	801175c <Spi_MainFunction+0x7c>
		case HAL_SPI_STATE_BUSY_TX:
			Spi_BswState = localState;
 8011734:	4a0c      	ldr	r2, [pc, #48]	; (8011768 <Spi_MainFunction+0x88>)
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	6013      	str	r3, [r2, #0]
			break;
 801173a:	e00f      	b.n	801175c <Spi_MainFunction+0x7c>
		case HAL_SPI_STATE_BUSY_RX:
			Spi_BswState = localState;
 801173c:	4a0a      	ldr	r2, [pc, #40]	; (8011768 <Spi_MainFunction+0x88>)
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	6013      	str	r3, [r2, #0]
			break;
 8011742:	e00b      	b.n	801175c <Spi_MainFunction+0x7c>
		case HAL_SPI_STATE_BUSY_TX_RX:
			Spi_BswState = localState;
 8011744:	4a08      	ldr	r2, [pc, #32]	; (8011768 <Spi_MainFunction+0x88>)
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	6013      	str	r3, [r2, #0]
			break;
 801174a:	e007      	b.n	801175c <Spi_MainFunction+0x7c>
		case HAL_SPI_STATE_ERROR:
			Spi_BswState = localState;
 801174c:	4a06      	ldr	r2, [pc, #24]	; (8011768 <Spi_MainFunction+0x88>)
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	6013      	str	r3, [r2, #0]
			HAL_SPI_ErrorCallback(&hspi3);
 8011752:	4804      	ldr	r0, [pc, #16]	; (8011764 <Spi_MainFunction+0x84>)
 8011754:	f000 f84e 	bl	80117f4 <HAL_SPI_ErrorCallback>
			break;
 8011758:	e000      	b.n	801175c <Spi_MainFunction+0x7c>
		default:
			break;
 801175a:	bf00      	nop
	}
}
 801175c:	bf00      	nop
 801175e:	3708      	adds	r7, #8
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}
 8011764:	20000620 	.word	0x20000620
 8011768:	20000cd0 	.word	0x20000cd0

0801176c <Spi_Init>:
/***********************************************************************************
* Function: Spi_Init											 		 		   *
* Description: Module initialization.					           				   *
************************************************************************************/
StdReturnType Spi_Init()
{
 801176c:	b580      	push	{r7, lr}
 801176e:	af00      	add	r7, sp, #0
	/* Initialize the peripheral parameters. */
	hspi3.Instance = SPI1;
 8011770:	4b19      	ldr	r3, [pc, #100]	; (80117d8 <Spi_Init+0x6c>)
 8011772:	4a1a      	ldr	r2, [pc, #104]	; (80117dc <Spi_Init+0x70>)
 8011774:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8011776:	4b18      	ldr	r3, [pc, #96]	; (80117d8 <Spi_Init+0x6c>)
 8011778:	f44f 7282 	mov.w	r2, #260	; 0x104
 801177c:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 801177e:	4b16      	ldr	r3, [pc, #88]	; (80117d8 <Spi_Init+0x6c>)
 8011780:	2200      	movs	r2, #0
 8011782:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8011784:	4b14      	ldr	r3, [pc, #80]	; (80117d8 <Spi_Init+0x6c>)
 8011786:	2200      	movs	r2, #0
 8011788:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 801178a:	4b13      	ldr	r3, [pc, #76]	; (80117d8 <Spi_Init+0x6c>)
 801178c:	2200      	movs	r2, #0
 801178e:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8011790:	4b11      	ldr	r3, [pc, #68]	; (80117d8 <Spi_Init+0x6c>)
 8011792:	2200      	movs	r2, #0
 8011794:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8011796:	4b10      	ldr	r3, [pc, #64]	; (80117d8 <Spi_Init+0x6c>)
 8011798:	f44f 7200 	mov.w	r2, #512	; 0x200
 801179c:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801179e:	4b0e      	ldr	r3, [pc, #56]	; (80117d8 <Spi_Init+0x6c>)
 80117a0:	2200      	movs	r2, #0
 80117a2:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80117a4:	4b0c      	ldr	r3, [pc, #48]	; (80117d8 <Spi_Init+0x6c>)
 80117a6:	2200      	movs	r2, #0
 80117a8:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80117aa:	4b0b      	ldr	r3, [pc, #44]	; (80117d8 <Spi_Init+0x6c>)
 80117ac:	2200      	movs	r2, #0
 80117ae:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 80117b0:	4b09      	ldr	r3, [pc, #36]	; (80117d8 <Spi_Init+0x6c>)
 80117b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80117b6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 80117b8:	4b07      	ldr	r3, [pc, #28]	; (80117d8 <Spi_Init+0x6c>)
 80117ba:	220a      	movs	r2, #10
 80117bc:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80117be:	4806      	ldr	r0, [pc, #24]	; (80117d8 <Spi_Init+0x6c>)
 80117c0:	f7fb f85c 	bl	800c87c <HAL_SPI_Init>
 80117c4:	4603      	mov	r3, r0
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d002      	beq.n	80117d0 <Spi_Init+0x64>
	{
		HAL_SPI_ErrorCallback(&hspi3);
 80117ca:	4803      	ldr	r0, [pc, #12]	; (80117d8 <Spi_Init+0x6c>)
 80117cc:	f000 f812 	bl	80117f4 <HAL_SPI_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 80117d0:	2300      	movs	r3, #0
}
 80117d2:	4618      	mov	r0, r3
 80117d4:	bd80      	pop	{r7, pc}
 80117d6:	bf00      	nop
 80117d8:	20000620 	.word	0x20000620
 80117dc:	40013000 	.word	0x40013000

080117e0 <Spi_DeInit>:
/***********************************************************************************
* Function: Spi_DeInit											 		  		   *
* Description: Module de-initialization.					           			   *
************************************************************************************/
StdReturnType Spi_DeInit()
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	af00      	add	r7, sp, #0
	HAL_SPI_DeInit(&hspi3);
 80117e4:	4802      	ldr	r0, [pc, #8]	; (80117f0 <Spi_DeInit+0x10>)
 80117e6:	f7fb f905 	bl	800c9f4 <HAL_SPI_DeInit>
	return E_OK;
 80117ea:	2300      	movs	r3, #0
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	bd80      	pop	{r7, pc}
 80117f0:	20000620 	.word	0x20000620

080117f4 <HAL_SPI_ErrorCallback>:
/***********************************************************************************
* Function: HAL_SPI_ErrorCallback												   *
* Description: Module error callback.					           				   *
************************************************************************************/
VOID HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b084      	sub	sp, #16
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
	/* Store the error locally. */
	uint32 receivedStatus = HAL_SPI_GetError(hspi);
 80117fc:	6878      	ldr	r0, [r7, #4]
 80117fe:	f7fb fd35 	bl	800d26c <HAL_SPI_GetError>
 8011802:	60f8      	str	r0, [r7, #12]
	/* Process the error. */
	switch(receivedStatus)
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	2b20      	cmp	r3, #32
 8011808:	d848      	bhi.n	801189c <HAL_SPI_ErrorCallback+0xa8>
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	2b20      	cmp	r3, #32
 801180e:	f200 8093 	bhi.w	8011938 <HAL_SPI_ErrorCallback+0x144>
 8011812:	a201      	add	r2, pc, #4	; (adr r2, 8011818 <HAL_SPI_ErrorCallback+0x24>)
 8011814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011818:	08011939 	.word	0x08011939
 801181c:	080118a5 	.word	0x080118a5
 8011820:	080118cf 	.word	0x080118cf
 8011824:	08011939 	.word	0x08011939
 8011828:	080118e3 	.word	0x080118e3
 801182c:	08011939 	.word	0x08011939
 8011830:	08011939 	.word	0x08011939
 8011834:	08011939 	.word	0x08011939
 8011838:	080118bb 	.word	0x080118bb
 801183c:	08011939 	.word	0x08011939
 8011840:	08011939 	.word	0x08011939
 8011844:	08011939 	.word	0x08011939
 8011848:	08011939 	.word	0x08011939
 801184c:	08011939 	.word	0x08011939
 8011850:	08011939 	.word	0x08011939
 8011854:	08011939 	.word	0x08011939
 8011858:	080118f7 	.word	0x080118f7
 801185c:	08011939 	.word	0x08011939
 8011860:	08011939 	.word	0x08011939
 8011864:	08011939 	.word	0x08011939
 8011868:	08011939 	.word	0x08011939
 801186c:	08011939 	.word	0x08011939
 8011870:	08011939 	.word	0x08011939
 8011874:	08011939 	.word	0x08011939
 8011878:	08011939 	.word	0x08011939
 801187c:	08011939 	.word	0x08011939
 8011880:	08011939 	.word	0x08011939
 8011884:	08011939 	.word	0x08011939
 8011888:	08011939 	.word	0x08011939
 801188c:	08011939 	.word	0x08011939
 8011890:	08011939 	.word	0x08011939
 8011894:	08011939 	.word	0x08011939
 8011898:	0801190b 	.word	0x0801190b
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	2b40      	cmp	r3, #64	; 0x40
 80118a0:	d03d      	beq.n	801191e <HAL_SPI_ErrorCallback+0x12a>
			SystemManager_Fault[SPI_ERROR_ABORT]++;
			Spi_DeInit();
			Spi_Init();
			break;
		default:
			break;
 80118a2:	e049      	b.n	8011938 <HAL_SPI_ErrorCallback+0x144>
			SystemManager_Fault[SPI_ERROR_MODF]++;
 80118a4:	4b27      	ldr	r3, [pc, #156]	; (8011944 <HAL_SPI_ErrorCallback+0x150>)
 80118a6:	7e9b      	ldrb	r3, [r3, #26]
 80118a8:	3301      	adds	r3, #1
 80118aa:	b2da      	uxtb	r2, r3
 80118ac:	4b25      	ldr	r3, [pc, #148]	; (8011944 <HAL_SPI_ErrorCallback+0x150>)
 80118ae:	769a      	strb	r2, [r3, #26]
			Spi_DeInit();
 80118b0:	f7ff ff96 	bl	80117e0 <Spi_DeInit>
			Spi_Init();
 80118b4:	f7ff ff5a 	bl	801176c <Spi_Init>
			break;
 80118b8:	e03f      	b.n	801193a <HAL_SPI_ErrorCallback+0x146>
			SystemManager_Fault[SPI_ERROR_FRE]++;
 80118ba:	4b22      	ldr	r3, [pc, #136]	; (8011944 <HAL_SPI_ErrorCallback+0x150>)
 80118bc:	7edb      	ldrb	r3, [r3, #27]
 80118be:	3301      	adds	r3, #1
 80118c0:	b2da      	uxtb	r2, r3
 80118c2:	4b20      	ldr	r3, [pc, #128]	; (8011944 <HAL_SPI_ErrorCallback+0x150>)
 80118c4:	76da      	strb	r2, [r3, #27]
			HAL_SPI_Abort_IT(&hspi3);
 80118c6:	4820      	ldr	r0, [pc, #128]	; (8011948 <HAL_SPI_ErrorCallback+0x154>)
 80118c8:	f7fb fa82 	bl	800cdd0 <HAL_SPI_Abort_IT>
			break;
 80118cc:	e035      	b.n	801193a <HAL_SPI_ErrorCallback+0x146>
			SystemManager_Fault[SPI_ERROR_CRC]++;
 80118ce:	4b1d      	ldr	r3, [pc, #116]	; (8011944 <HAL_SPI_ErrorCallback+0x150>)
 80118d0:	7f1b      	ldrb	r3, [r3, #28]
 80118d2:	3301      	adds	r3, #1
 80118d4:	b2da      	uxtb	r2, r3
 80118d6:	4b1b      	ldr	r3, [pc, #108]	; (8011944 <HAL_SPI_ErrorCallback+0x150>)
 80118d8:	771a      	strb	r2, [r3, #28]
			HAL_SPI_Abort_IT(&hspi3);
 80118da:	481b      	ldr	r0, [pc, #108]	; (8011948 <HAL_SPI_ErrorCallback+0x154>)
 80118dc:	f7fb fa78 	bl	800cdd0 <HAL_SPI_Abort_IT>
			break;
 80118e0:	e02b      	b.n	801193a <HAL_SPI_ErrorCallback+0x146>
			SystemManager_Fault[SPI_ERROR_OVR]++;
 80118e2:	4b18      	ldr	r3, [pc, #96]	; (8011944 <HAL_SPI_ErrorCallback+0x150>)
 80118e4:	7f5b      	ldrb	r3, [r3, #29]
 80118e6:	3301      	adds	r3, #1
 80118e8:	b2da      	uxtb	r2, r3
 80118ea:	4b16      	ldr	r3, [pc, #88]	; (8011944 <HAL_SPI_ErrorCallback+0x150>)
 80118ec:	775a      	strb	r2, [r3, #29]
			HAL_SPI_Abort_IT(&hspi3);
 80118ee:	4816      	ldr	r0, [pc, #88]	; (8011948 <HAL_SPI_ErrorCallback+0x154>)
 80118f0:	f7fb fa6e 	bl	800cdd0 <HAL_SPI_Abort_IT>
			break;
 80118f4:	e021      	b.n	801193a <HAL_SPI_ErrorCallback+0x146>
			SystemManager_Fault[SPI_ERROR_DMA]++;
 80118f6:	4b13      	ldr	r3, [pc, #76]	; (8011944 <HAL_SPI_ErrorCallback+0x150>)
 80118f8:	7f9b      	ldrb	r3, [r3, #30]
 80118fa:	3301      	adds	r3, #1
 80118fc:	b2da      	uxtb	r2, r3
 80118fe:	4b11      	ldr	r3, [pc, #68]	; (8011944 <HAL_SPI_ErrorCallback+0x150>)
 8011900:	779a      	strb	r2, [r3, #30]
			HAL_SPI_Abort_IT(&hspi3);
 8011902:	4811      	ldr	r0, [pc, #68]	; (8011948 <HAL_SPI_ErrorCallback+0x154>)
 8011904:	f7fb fa64 	bl	800cdd0 <HAL_SPI_Abort_IT>
			break;
 8011908:	e017      	b.n	801193a <HAL_SPI_ErrorCallback+0x146>
			SystemManager_Fault[SPI_ERROR_FLAG]++;
 801190a:	4b0e      	ldr	r3, [pc, #56]	; (8011944 <HAL_SPI_ErrorCallback+0x150>)
 801190c:	7fdb      	ldrb	r3, [r3, #31]
 801190e:	3301      	adds	r3, #1
 8011910:	b2da      	uxtb	r2, r3
 8011912:	4b0c      	ldr	r3, [pc, #48]	; (8011944 <HAL_SPI_ErrorCallback+0x150>)
 8011914:	77da      	strb	r2, [r3, #31]
			HAL_SPI_Abort_IT(&hspi3);
 8011916:	480c      	ldr	r0, [pc, #48]	; (8011948 <HAL_SPI_ErrorCallback+0x154>)
 8011918:	f7fb fa5a 	bl	800cdd0 <HAL_SPI_Abort_IT>
			break;
 801191c:	e00d      	b.n	801193a <HAL_SPI_ErrorCallback+0x146>
			SystemManager_Fault[SPI_ERROR_ABORT]++;
 801191e:	4b09      	ldr	r3, [pc, #36]	; (8011944 <HAL_SPI_ErrorCallback+0x150>)
 8011920:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011924:	3301      	adds	r3, #1
 8011926:	b2da      	uxtb	r2, r3
 8011928:	4b06      	ldr	r3, [pc, #24]	; (8011944 <HAL_SPI_ErrorCallback+0x150>)
 801192a:	f883 2020 	strb.w	r2, [r3, #32]
			Spi_DeInit();
 801192e:	f7ff ff57 	bl	80117e0 <Spi_DeInit>
			Spi_Init();
 8011932:	f7ff ff1b 	bl	801176c <Spi_Init>
			break;
 8011936:	e000      	b.n	801193a <HAL_SPI_ErrorCallback+0x146>
			break;
 8011938:	bf00      	nop
	}
}
 801193a:	bf00      	nop
 801193c:	3710      	adds	r7, #16
 801193e:	46bd      	mov	sp, r7
 8011940:	bd80      	pop	{r7, pc}
 8011942:	bf00      	nop
 8011944:	2000e638 	.word	0x2000e638
 8011948:	20000620 	.word	0x20000620
 801194c:	00000000 	.word	0x00000000

08011950 <HAL_TIM_IC_CaptureCallback>:
/***********************************************************************************
* Function: HAL_TIM_IC_CaptureCallback										   	   *
* Description: Input capture callback to process information received.		 	   *
************************************************************************************/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b082      	sub	sp, #8
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
	/* If channel 3 requests. */
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	7f1b      	ldrb	r3, [r3, #28]
 801195c:	2b01      	cmp	r3, #1
 801195e:	f040 8081 	bne.w	8011a64 <HAL_TIM_IC_CaptureCallback+0x114>
	{
		/* Check if the first input capture has been received. */
		if (Tim5_InputCaptureFlag_ChannelThree == STD_LOW)
 8011962:	4b87      	ldr	r3, [pc, #540]	; (8011b80 <HAL_TIM_IC_CaptureCallback+0x230>)
 8011964:	781b      	ldrb	r3, [r3, #0]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d11a      	bne.n	80119a0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			/* Store the input capture value. */
			Tim5_InputCompare_ValueOne_ChannelThree = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 801196a:	2100      	movs	r1, #0
 801196c:	6878      	ldr	r0, [r7, #4]
 801196e:	f7fd f90d 	bl	800eb8c <HAL_TIM_ReadCapturedValue>
 8011972:	4603      	mov	r3, r0
 8011974:	4a83      	ldr	r2, [pc, #524]	; (8011b84 <HAL_TIM_IC_CaptureCallback+0x234>)
 8011976:	6013      	str	r3, [r2, #0]
			/* Set the flag to high. */
			Tim5_InputCaptureFlag_ChannelThree = STD_HIGH;
 8011978:	4b81      	ldr	r3, [pc, #516]	; (8011b80 <HAL_TIM_IC_CaptureCallback+0x230>)
 801197a:	2201      	movs	r2, #1
 801197c:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	6a1a      	ldr	r2, [r3, #32]
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	f022 020a 	bic.w	r2, r2, #10
 801198c:	621a      	str	r2, [r3, #32]
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	6a1a      	ldr	r2, [r3, #32]
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	f042 0202 	orr.w	r2, r2, #2
 801199c:	621a      	str	r2, [r3, #32]
 801199e:	e061      	b.n	8011a64 <HAL_TIM_IC_CaptureCallback+0x114>
		}/* If the first input capture has been stored. */
		else if(Tim5_InputCaptureFlag_ChannelThree == STD_HIGH)
 80119a0:	4b77      	ldr	r3, [pc, #476]	; (8011b80 <HAL_TIM_IC_CaptureCallback+0x230>)
 80119a2:	781b      	ldrb	r3, [r3, #0]
 80119a4:	2b01      	cmp	r3, #1
 80119a6:	d15d      	bne.n	8011a64 <HAL_TIM_IC_CaptureCallback+0x114>
		{
			/* Store the second input capture. */
			Tim5_InputCompare_ValueTwo_ChannelThree = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80119a8:	2100      	movs	r1, #0
 80119aa:	6878      	ldr	r0, [r7, #4]
 80119ac:	f7fd f8ee 	bl	800eb8c <HAL_TIM_ReadCapturedValue>
 80119b0:	4603      	mov	r3, r0
 80119b2:	4a75      	ldr	r2, [pc, #468]	; (8011b88 <HAL_TIM_IC_CaptureCallback+0x238>)
 80119b4:	6013      	str	r3, [r2, #0]
			/* Set the timer counter to 0. */
			__HAL_TIM_SET_COUNTER(htim, 0);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	2200      	movs	r2, #0
 80119bc:	625a      	str	r2, [r3, #36]	; 0x24
			/* If the second input capture is greater than the first, then subtract the first one from the second one. */
			if (Tim5_InputCompare_ValueTwo_ChannelThree > Tim5_InputCompare_ValueOne_ChannelThree)
 80119be:	4b72      	ldr	r3, [pc, #456]	; (8011b88 <HAL_TIM_IC_CaptureCallback+0x238>)
 80119c0:	681a      	ldr	r2, [r3, #0]
 80119c2:	4b70      	ldr	r3, [pc, #448]	; (8011b84 <HAL_TIM_IC_CaptureCallback+0x234>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d907      	bls.n	80119da <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				Tim5_Difference_ChannelThree = Tim5_InputCompare_ValueTwo_ChannelThree - Tim5_InputCompare_ValueOne_ChannelThree;
 80119ca:	4b6f      	ldr	r3, [pc, #444]	; (8011b88 <HAL_TIM_IC_CaptureCallback+0x238>)
 80119cc:	681a      	ldr	r2, [r3, #0]
 80119ce:	4b6d      	ldr	r3, [pc, #436]	; (8011b84 <HAL_TIM_IC_CaptureCallback+0x234>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	1ad3      	subs	r3, r2, r3
 80119d4:	4a6d      	ldr	r2, [pc, #436]	; (8011b8c <HAL_TIM_IC_CaptureCallback+0x23c>)
 80119d6:	6013      	str	r3, [r2, #0]
 80119d8:	e00d      	b.n	80119f6 <HAL_TIM_IC_CaptureCallback+0xa6>
			}/* Else subtract the first value from maximum uint32 value and add the second value. */
			else if(Tim5_InputCompare_ValueOne_ChannelThree > Tim5_InputCompare_ValueTwo_ChannelThree)
 80119da:	4b6a      	ldr	r3, [pc, #424]	; (8011b84 <HAL_TIM_IC_CaptureCallback+0x234>)
 80119dc:	681a      	ldr	r2, [r3, #0]
 80119de:	4b6a      	ldr	r3, [pc, #424]	; (8011b88 <HAL_TIM_IC_CaptureCallback+0x238>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	429a      	cmp	r2, r3
 80119e4:	d907      	bls.n	80119f6 <HAL_TIM_IC_CaptureCallback+0xa6>
			{
				Tim5_Difference_ChannelThree = (0xFFFFFFFF - Tim5_InputCompare_ValueOne_ChannelThree) + Tim5_InputCompare_ValueTwo_ChannelThree;
 80119e6:	4b68      	ldr	r3, [pc, #416]	; (8011b88 <HAL_TIM_IC_CaptureCallback+0x238>)
 80119e8:	681a      	ldr	r2, [r3, #0]
 80119ea:	4b66      	ldr	r3, [pc, #408]	; (8011b84 <HAL_TIM_IC_CaptureCallback+0x234>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	1ad3      	subs	r3, r2, r3
 80119f0:	3b01      	subs	r3, #1
 80119f2:	4a66      	ldr	r2, [pc, #408]	; (8011b8c <HAL_TIM_IC_CaptureCallback+0x23c>)
 80119f4:	6013      	str	r3, [r2, #0]
			else
			{
				/* do nothing */
			}
			/* Calculate the distance the sound traveled between the first measurement and the second. */
			Tim5_CalculatedDistance_ChannelThree = Tim5_Difference_ChannelThree * 0.034 / 2;
 80119f6:	4b65      	ldr	r3, [pc, #404]	; (8011b8c <HAL_TIM_IC_CaptureCallback+0x23c>)
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	4618      	mov	r0, r3
 80119fc:	f7ee fd8a 	bl	8000514 <__aeabi_ui2d>
 8011a00:	a35d      	add	r3, pc, #372	; (adr r3, 8011b78 <HAL_TIM_IC_CaptureCallback+0x228>)
 8011a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a06:	f7ee fdff 	bl	8000608 <__aeabi_dmul>
 8011a0a:	4602      	mov	r2, r0
 8011a0c:	460b      	mov	r3, r1
 8011a0e:	4610      	mov	r0, r2
 8011a10:	4619      	mov	r1, r3
 8011a12:	f04f 0200 	mov.w	r2, #0
 8011a16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011a1a:	f7ee ff1f 	bl	800085c <__aeabi_ddiv>
 8011a1e:	4602      	mov	r2, r0
 8011a20:	460b      	mov	r3, r1
 8011a22:	4610      	mov	r0, r2
 8011a24:	4619      	mov	r1, r3
 8011a26:	f7ef f801 	bl	8000a2c <__aeabi_d2uiz>
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	b2da      	uxtb	r2, r3
 8011a2e:	4b58      	ldr	r3, [pc, #352]	; (8011b90 <HAL_TIM_IC_CaptureCallback+0x240>)
 8011a30:	701a      	strb	r2, [r3, #0]
			/* Set the flag to low. */
			Tim5_InputCaptureFlag_ChannelThree = STD_LOW;
 8011a32:	4b53      	ldr	r3, [pc, #332]	; (8011b80 <HAL_TIM_IC_CaptureCallback+0x230>)
 8011a34:	2200      	movs	r2, #0
 8011a36:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	6a1a      	ldr	r2, [r3, #32]
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	f022 020a 	bic.w	r2, r2, #10
 8011a46:	621a      	str	r2, [r3, #32]
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681a      	ldr	r2, [r3, #0]
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	6a12      	ldr	r2, [r2, #32]
 8011a52:	621a      	str	r2, [r3, #32]
			/* Disable the interrupt for the timer 5 channel 3. */
			__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC1);
 8011a54:	4b4f      	ldr	r3, [pc, #316]	; (8011b94 <HAL_TIM_IC_CaptureCallback+0x244>)
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	68da      	ldr	r2, [r3, #12]
 8011a5a:	4b4e      	ldr	r3, [pc, #312]	; (8011b94 <HAL_TIM_IC_CaptureCallback+0x244>)
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	f022 0202 	bic.w	r2, r2, #2
 8011a62:	60da      	str	r2, [r3, #12]
		{
			/* do nothing */
		}
	}/* If channel 4 requests. */

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	7f1b      	ldrb	r3, [r3, #28]
 8011a68:	2b02      	cmp	r3, #2
 8011a6a:	f040 8081 	bne.w	8011b70 <HAL_TIM_IC_CaptureCallback+0x220>
	{
		/* Check if the first input capture has been received. */
		if (Tim5_InputCaptureFlag_ChannelFour == STD_LOW)
 8011a6e:	4b4a      	ldr	r3, [pc, #296]	; (8011b98 <HAL_TIM_IC_CaptureCallback+0x248>)
 8011a70:	781b      	ldrb	r3, [r3, #0]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d11a      	bne.n	8011aac <HAL_TIM_IC_CaptureCallback+0x15c>
		{
			/* Store the input capture value. */
			Tim5_InputCompare_ValueOne_ChannelFour = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8011a76:	2104      	movs	r1, #4
 8011a78:	6878      	ldr	r0, [r7, #4]
 8011a7a:	f7fd f887 	bl	800eb8c <HAL_TIM_ReadCapturedValue>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	4a46      	ldr	r2, [pc, #280]	; (8011b9c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8011a82:	6013      	str	r3, [r2, #0]
			/* Set the flag to high. */
			Tim5_InputCaptureFlag_ChannelFour = STD_HIGH;
 8011a84:	4b44      	ldr	r3, [pc, #272]	; (8011b98 <HAL_TIM_IC_CaptureCallback+0x248>)
 8011a86:	2201      	movs	r2, #1
 8011a88:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	6a1a      	ldr	r2, [r3, #32]
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8011a98:	621a      	str	r2, [r3, #32]
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	6a1a      	ldr	r2, [r3, #32]
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	f042 0220 	orr.w	r2, r2, #32
 8011aa8:	621a      	str	r2, [r3, #32]
	}
	else
	{
		/* do nothing */
	}
}
 8011aaa:	e061      	b.n	8011b70 <HAL_TIM_IC_CaptureCallback+0x220>
		else if(Tim5_InputCaptureFlag_ChannelFour == STD_HIGH)
 8011aac:	4b3a      	ldr	r3, [pc, #232]	; (8011b98 <HAL_TIM_IC_CaptureCallback+0x248>)
 8011aae:	781b      	ldrb	r3, [r3, #0]
 8011ab0:	2b01      	cmp	r3, #1
 8011ab2:	d15d      	bne.n	8011b70 <HAL_TIM_IC_CaptureCallback+0x220>
			Tim5_InputCompare_ValueTwo_ChannelFour = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8011ab4:	2104      	movs	r1, #4
 8011ab6:	6878      	ldr	r0, [r7, #4]
 8011ab8:	f7fd f868 	bl	800eb8c <HAL_TIM_ReadCapturedValue>
 8011abc:	4603      	mov	r3, r0
 8011abe:	4a38      	ldr	r2, [pc, #224]	; (8011ba0 <HAL_TIM_IC_CaptureCallback+0x250>)
 8011ac0:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	625a      	str	r2, [r3, #36]	; 0x24
			if (Tim5_InputCompare_ValueTwo_ChannelFour > Tim5_InputCompare_ValueOne_ChannelFour)
 8011aca:	4b35      	ldr	r3, [pc, #212]	; (8011ba0 <HAL_TIM_IC_CaptureCallback+0x250>)
 8011acc:	681a      	ldr	r2, [r3, #0]
 8011ace:	4b33      	ldr	r3, [pc, #204]	; (8011b9c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	429a      	cmp	r2, r3
 8011ad4:	d907      	bls.n	8011ae6 <HAL_TIM_IC_CaptureCallback+0x196>
				Tim5_Difference_ChannelFour = Tim5_InputCompare_ValueTwo_ChannelFour - Tim5_InputCompare_ValueOne_ChannelFour;
 8011ad6:	4b32      	ldr	r3, [pc, #200]	; (8011ba0 <HAL_TIM_IC_CaptureCallback+0x250>)
 8011ad8:	681a      	ldr	r2, [r3, #0]
 8011ada:	4b30      	ldr	r3, [pc, #192]	; (8011b9c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	1ad3      	subs	r3, r2, r3
 8011ae0:	4a30      	ldr	r2, [pc, #192]	; (8011ba4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8011ae2:	6013      	str	r3, [r2, #0]
 8011ae4:	e00d      	b.n	8011b02 <HAL_TIM_IC_CaptureCallback+0x1b2>
			else if(Tim5_InputCompare_ValueOne_ChannelFour > Tim5_InputCompare_ValueTwo_ChannelFour)
 8011ae6:	4b2d      	ldr	r3, [pc, #180]	; (8011b9c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8011ae8:	681a      	ldr	r2, [r3, #0]
 8011aea:	4b2d      	ldr	r3, [pc, #180]	; (8011ba0 <HAL_TIM_IC_CaptureCallback+0x250>)
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	429a      	cmp	r2, r3
 8011af0:	d907      	bls.n	8011b02 <HAL_TIM_IC_CaptureCallback+0x1b2>
				Tim5_Difference_ChannelFour = (0xFFFFFFFF - Tim5_InputCompare_ValueOne_ChannelFour) + Tim5_InputCompare_ValueTwo_ChannelFour;
 8011af2:	4b2b      	ldr	r3, [pc, #172]	; (8011ba0 <HAL_TIM_IC_CaptureCallback+0x250>)
 8011af4:	681a      	ldr	r2, [r3, #0]
 8011af6:	4b29      	ldr	r3, [pc, #164]	; (8011b9c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	1ad3      	subs	r3, r2, r3
 8011afc:	3b01      	subs	r3, #1
 8011afe:	4a29      	ldr	r2, [pc, #164]	; (8011ba4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8011b00:	6013      	str	r3, [r2, #0]
			Tim5_CalculatedDistance_ChannelFour = Tim5_Difference_ChannelFour * 0.034 / 2;
 8011b02:	4b28      	ldr	r3, [pc, #160]	; (8011ba4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	4618      	mov	r0, r3
 8011b08:	f7ee fd04 	bl	8000514 <__aeabi_ui2d>
 8011b0c:	a31a      	add	r3, pc, #104	; (adr r3, 8011b78 <HAL_TIM_IC_CaptureCallback+0x228>)
 8011b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b12:	f7ee fd79 	bl	8000608 <__aeabi_dmul>
 8011b16:	4602      	mov	r2, r0
 8011b18:	460b      	mov	r3, r1
 8011b1a:	4610      	mov	r0, r2
 8011b1c:	4619      	mov	r1, r3
 8011b1e:	f04f 0200 	mov.w	r2, #0
 8011b22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011b26:	f7ee fe99 	bl	800085c <__aeabi_ddiv>
 8011b2a:	4602      	mov	r2, r0
 8011b2c:	460b      	mov	r3, r1
 8011b2e:	4610      	mov	r0, r2
 8011b30:	4619      	mov	r1, r3
 8011b32:	f7ee ff7b 	bl	8000a2c <__aeabi_d2uiz>
 8011b36:	4603      	mov	r3, r0
 8011b38:	b2da      	uxtb	r2, r3
 8011b3a:	4b1b      	ldr	r3, [pc, #108]	; (8011ba8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8011b3c:	701a      	strb	r2, [r3, #0]
			Tim5_InputCaptureFlag_ChannelFour = 0;
 8011b3e:	4b16      	ldr	r3, [pc, #88]	; (8011b98 <HAL_TIM_IC_CaptureCallback+0x248>)
 8011b40:	2200      	movs	r2, #0
 8011b42:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	6a1a      	ldr	r2, [r3, #32]
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8011b52:	621a      	str	r2, [r3, #32]
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	681a      	ldr	r2, [r3, #0]
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	6a12      	ldr	r2, [r2, #32]
 8011b5e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC2);
 8011b60:	4b0c      	ldr	r3, [pc, #48]	; (8011b94 <HAL_TIM_IC_CaptureCallback+0x244>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	68da      	ldr	r2, [r3, #12]
 8011b66:	4b0b      	ldr	r3, [pc, #44]	; (8011b94 <HAL_TIM_IC_CaptureCallback+0x244>)
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	f022 0204 	bic.w	r2, r2, #4
 8011b6e:	60da      	str	r2, [r3, #12]
}
 8011b70:	bf00      	nop
 8011b72:	3708      	adds	r7, #8
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}
 8011b78:	b020c49c 	.word	0xb020c49c
 8011b7c:	3fa16872 	.word	0x3fa16872
 8011b80:	20000ce4 	.word	0x20000ce4
 8011b84:	20000cd8 	.word	0x20000cd8
 8011b88:	20000cdc 	.word	0x20000cdc
 8011b8c:	20000ce0 	.word	0x20000ce0
 8011b90:	20000ce5 	.word	0x20000ce5
 8011b94:	20000974 	.word	0x20000974
 8011b98:	20000cf4 	.word	0x20000cf4
 8011b9c:	20000ce8 	.word	0x20000ce8
 8011ba0:	20000cec 	.word	0x20000cec
 8011ba4:	20000cf0 	.word	0x20000cf0
 8011ba8:	20000cf5 	.word	0x20000cf5

08011bac <Tim_Init>:
/***********************************************************************************
* Function: Tim_Init										   			           *
* Description: Peripheral initialization.									       *
************************************************************************************/
StdReturnType Tim_Init(uint8 TimerChannel)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b084      	sub	sp, #16
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	71fb      	strb	r3, [r7, #7]
	/* Set the timer channel value into a local variable. */
	uint8 localValue = TimerChannel;
 8011bb6:	79fb      	ldrb	r3, [r7, #7]
 8011bb8:	73fb      	strb	r3, [r7, #15]
	switch(localValue)
 8011bba:	7bfb      	ldrb	r3, [r7, #15]
 8011bbc:	3b02      	subs	r3, #2
 8011bbe:	2b03      	cmp	r3, #3
 8011bc0:	f200 81f4 	bhi.w	8011fac <Tim_Init+0x400>
 8011bc4:	a201      	add	r2, pc, #4	; (adr r2, 8011bcc <Tim_Init+0x20>)
 8011bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bca:	bf00      	nop
 8011bcc:	08011bdd 	.word	0x08011bdd
 8011bd0:	08011cc9 	.word	0x08011cc9
 8011bd4:	08011ded 	.word	0x08011ded
 8011bd8:	08011ec3 	.word	0x08011ec3
	{
		/* Initialize the timer two. */
		case TIMER_TWO:
			/* Configure the timer parameters. */
			htim2.Instance = TIM2;
 8011bdc:	4b7a      	ldr	r3, [pc, #488]	; (8011dc8 <Tim_Init+0x21c>)
 8011bde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011be2:	601a      	str	r2, [r3, #0]
			htim2.Init.Prescaler = 1000-1;
 8011be4:	4b78      	ldr	r3, [pc, #480]	; (8011dc8 <Tim_Init+0x21c>)
 8011be6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011bea:	605a      	str	r2, [r3, #4]
			htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011bec:	4b76      	ldr	r3, [pc, #472]	; (8011dc8 <Tim_Init+0x21c>)
 8011bee:	2200      	movs	r2, #0
 8011bf0:	609a      	str	r2, [r3, #8]
			htim2.Init.Period = 2000-1;
 8011bf2:	4b75      	ldr	r3, [pc, #468]	; (8011dc8 <Tim_Init+0x21c>)
 8011bf4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8011bf8:	60da      	str	r2, [r3, #12]
			htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011bfa:	4b73      	ldr	r3, [pc, #460]	; (8011dc8 <Tim_Init+0x21c>)
 8011bfc:	2200      	movs	r2, #0
 8011bfe:	611a      	str	r2, [r3, #16]
			htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011c00:	4b71      	ldr	r3, [pc, #452]	; (8011dc8 <Tim_Init+0x21c>)
 8011c02:	2200      	movs	r2, #0
 8011c04:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8011c06:	4870      	ldr	r0, [pc, #448]	; (8011dc8 <Tim_Init+0x21c>)
 8011c08:	f7fc f81e 	bl	800dc48 <HAL_TIM_Base_Init>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d002      	beq.n	8011c18 <Tim_Init+0x6c>
			{
				HAL_TIM_ErrorCallback(&htim2);
 8011c12:	486d      	ldr	r0, [pc, #436]	; (8011dc8 <Tim_Init+0x21c>)
 8011c14:	f000 fa1c 	bl	8012050 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the timer clock source. */
			sClockSourceConfig2.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011c18:	4b6c      	ldr	r3, [pc, #432]	; (8011dcc <Tim_Init+0x220>)
 8011c1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011c1e:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig2) != HAL_OK)
 8011c20:	496a      	ldr	r1, [pc, #424]	; (8011dcc <Tim_Init+0x220>)
 8011c22:	4869      	ldr	r0, [pc, #420]	; (8011dc8 <Tim_Init+0x21c>)
 8011c24:	f7fc feea 	bl	800e9fc <HAL_TIM_ConfigClockSource>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d002      	beq.n	8011c34 <Tim_Init+0x88>
			{
				HAL_TIM_ErrorCallback(&htim2);
 8011c2e:	4866      	ldr	r0, [pc, #408]	; (8011dc8 <Tim_Init+0x21c>)
 8011c30:	f000 fa0e 	bl	8012050 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8011c34:	4864      	ldr	r0, [pc, #400]	; (8011dc8 <Tim_Init+0x21c>)
 8011c36:	f7fc f8c5 	bl	800ddc4 <HAL_TIM_PWM_Init>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d002      	beq.n	8011c46 <Tim_Init+0x9a>
			{
				HAL_TIM_ErrorCallback(&htim2);
 8011c40:	4861      	ldr	r0, [pc, #388]	; (8011dc8 <Tim_Init+0x21c>)
 8011c42:	f000 fa05 	bl	8012050 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the master slave mode and output trigger. */
			sMasterConfig2.MasterOutputTrigger = TIM_TRGO_RESET;
 8011c46:	4b62      	ldr	r3, [pc, #392]	; (8011dd0 <Tim_Init+0x224>)
 8011c48:	2200      	movs	r2, #0
 8011c4a:	601a      	str	r2, [r3, #0]
			sMasterConfig2.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011c4c:	4b60      	ldr	r3, [pc, #384]	; (8011dd0 <Tim_Init+0x224>)
 8011c4e:	2200      	movs	r2, #0
 8011c50:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig2) != HAL_OK)
 8011c52:	495f      	ldr	r1, [pc, #380]	; (8011dd0 <Tim_Init+0x224>)
 8011c54:	485c      	ldr	r0, [pc, #368]	; (8011dc8 <Tim_Init+0x21c>)
 8011c56:	f7fd fc73 	bl	800f540 <HAL_TIMEx_MasterConfigSynchronization>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d002      	beq.n	8011c66 <Tim_Init+0xba>
			{
				HAL_TIM_ErrorCallback(&htim2);
 8011c60:	4859      	ldr	r0, [pc, #356]	; (8011dc8 <Tim_Init+0x21c>)
 8011c62:	f000 f9f5 	bl	8012050 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the PWM parameters. */
			sConfigOC2.OCMode = TIM_OCMODE_PWM1;
 8011c66:	4b5b      	ldr	r3, [pc, #364]	; (8011dd4 <Tim_Init+0x228>)
 8011c68:	2260      	movs	r2, #96	; 0x60
 8011c6a:	601a      	str	r2, [r3, #0]
			sConfigOC2.Pulse = 0;
 8011c6c:	4b59      	ldr	r3, [pc, #356]	; (8011dd4 <Tim_Init+0x228>)
 8011c6e:	2200      	movs	r2, #0
 8011c70:	605a      	str	r2, [r3, #4]
			sConfigOC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 8011c72:	4b58      	ldr	r3, [pc, #352]	; (8011dd4 <Tim_Init+0x228>)
 8011c74:	2200      	movs	r2, #0
 8011c76:	609a      	str	r2, [r3, #8]
			sConfigOC2.OCFastMode = TIM_OCFAST_ENABLE;
 8011c78:	4b56      	ldr	r3, [pc, #344]	; (8011dd4 <Tim_Init+0x228>)
 8011c7a:	2204      	movs	r2, #4
 8011c7c:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_1) != HAL_OK)
 8011c7e:	2200      	movs	r2, #0
 8011c80:	4954      	ldr	r1, [pc, #336]	; (8011dd4 <Tim_Init+0x228>)
 8011c82:	4851      	ldr	r0, [pc, #324]	; (8011dc8 <Tim_Init+0x21c>)
 8011c84:	f7fc fdf8 	bl	800e878 <HAL_TIM_PWM_ConfigChannel>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d002      	beq.n	8011c94 <Tim_Init+0xe8>
			{
				HAL_TIM_ErrorCallback(&htim2);
 8011c8e:	484e      	ldr	r0, [pc, #312]	; (8011dc8 <Tim_Init+0x21c>)
 8011c90:	f000 f9de 	bl	8012050 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_2) != HAL_OK)
 8011c94:	2204      	movs	r2, #4
 8011c96:	494f      	ldr	r1, [pc, #316]	; (8011dd4 <Tim_Init+0x228>)
 8011c98:	484b      	ldr	r0, [pc, #300]	; (8011dc8 <Tim_Init+0x21c>)
 8011c9a:	f7fc fded 	bl	800e878 <HAL_TIM_PWM_ConfigChannel>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d002      	beq.n	8011caa <Tim_Init+0xfe>
			{
				HAL_TIM_ErrorCallback(&htim2);
 8011ca4:	4848      	ldr	r0, [pc, #288]	; (8011dc8 <Tim_Init+0x21c>)
 8011ca6:	f000 f9d3 	bl	8012050 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_3) != HAL_OK)
 8011caa:	2208      	movs	r2, #8
 8011cac:	4949      	ldr	r1, [pc, #292]	; (8011dd4 <Tim_Init+0x228>)
 8011cae:	4846      	ldr	r0, [pc, #280]	; (8011dc8 <Tim_Init+0x21c>)
 8011cb0:	f7fc fde2 	bl	800e878 <HAL_TIM_PWM_ConfigChannel>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d002      	beq.n	8011cc0 <Tim_Init+0x114>
			{
				HAL_TIM_ErrorCallback(&htim2);
 8011cba:	4843      	ldr	r0, [pc, #268]	; (8011dc8 <Tim_Init+0x21c>)
 8011cbc:	f000 f9c8 	bl	8012050 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the GPIO. */
			HAL_TIM_MspPostInit(&htim2);
 8011cc0:	4841      	ldr	r0, [pc, #260]	; (8011dc8 <Tim_Init+0x21c>)
 8011cc2:	f7f5 fb3f 	bl	8007344 <HAL_TIM_MspPostInit>

			break;
 8011cc6:	e174      	b.n	8011fb2 <Tim_Init+0x406>
		/* Initialize the timer three. */
		case TIMER_THREE:
			/* Configure the timer parameters. */
			htim3.Instance = TIM3;
 8011cc8:	4b43      	ldr	r3, [pc, #268]	; (8011dd8 <Tim_Init+0x22c>)
 8011cca:	4a44      	ldr	r2, [pc, #272]	; (8011ddc <Tim_Init+0x230>)
 8011ccc:	601a      	str	r2, [r3, #0]
			htim3.Init.Prescaler = 10000-1;
 8011cce:	4b42      	ldr	r3, [pc, #264]	; (8011dd8 <Tim_Init+0x22c>)
 8011cd0:	f242 720f 	movw	r2, #9999	; 0x270f
 8011cd4:	605a      	str	r2, [r3, #4]
			htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011cd6:	4b40      	ldr	r3, [pc, #256]	; (8011dd8 <Tim_Init+0x22c>)
 8011cd8:	2200      	movs	r2, #0
 8011cda:	609a      	str	r2, [r3, #8]
			htim3.Init.Period = 200-1;
 8011cdc:	4b3e      	ldr	r3, [pc, #248]	; (8011dd8 <Tim_Init+0x22c>)
 8011cde:	22c7      	movs	r2, #199	; 0xc7
 8011ce0:	60da      	str	r2, [r3, #12]
			htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011ce2:	4b3d      	ldr	r3, [pc, #244]	; (8011dd8 <Tim_Init+0x22c>)
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	611a      	str	r2, [r3, #16]
			htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011ce8:	4b3b      	ldr	r3, [pc, #236]	; (8011dd8 <Tim_Init+0x22c>)
 8011cea:	2200      	movs	r2, #0
 8011cec:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8011cee:	483a      	ldr	r0, [pc, #232]	; (8011dd8 <Tim_Init+0x22c>)
 8011cf0:	f7fb ffaa 	bl	800dc48 <HAL_TIM_Base_Init>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d002      	beq.n	8011d00 <Tim_Init+0x154>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8011cfa:	4837      	ldr	r0, [pc, #220]	; (8011dd8 <Tim_Init+0x22c>)
 8011cfc:	f000 f9a8 	bl	8012050 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Set the clock source. */
			sClockSourceConfig3.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011d00:	4b37      	ldr	r3, [pc, #220]	; (8011de0 <Tim_Init+0x234>)
 8011d02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011d06:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig3) != HAL_OK)
 8011d08:	4935      	ldr	r1, [pc, #212]	; (8011de0 <Tim_Init+0x234>)
 8011d0a:	4833      	ldr	r0, [pc, #204]	; (8011dd8 <Tim_Init+0x22c>)
 8011d0c:	f7fc fe76 	bl	800e9fc <HAL_TIM_ConfigClockSource>
 8011d10:	4603      	mov	r3, r0
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d002      	beq.n	8011d1c <Tim_Init+0x170>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8011d16:	4830      	ldr	r0, [pc, #192]	; (8011dd8 <Tim_Init+0x22c>)
 8011d18:	f000 f99a 	bl	8012050 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8011d1c:	482e      	ldr	r0, [pc, #184]	; (8011dd8 <Tim_Init+0x22c>)
 8011d1e:	f7fc f851 	bl	800ddc4 <HAL_TIM_PWM_Init>
 8011d22:	4603      	mov	r3, r0
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d002      	beq.n	8011d2e <Tim_Init+0x182>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8011d28:	482b      	ldr	r0, [pc, #172]	; (8011dd8 <Tim_Init+0x22c>)
 8011d2a:	f000 f991 	bl	8012050 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure master slave mode. */
			sMasterConfig3.MasterOutputTrigger = TIM_TRGO_RESET;
 8011d2e:	4b2d      	ldr	r3, [pc, #180]	; (8011de4 <Tim_Init+0x238>)
 8011d30:	2200      	movs	r2, #0
 8011d32:	601a      	str	r2, [r3, #0]
			sMasterConfig3.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011d34:	4b2b      	ldr	r3, [pc, #172]	; (8011de4 <Tim_Init+0x238>)
 8011d36:	2200      	movs	r2, #0
 8011d38:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig3) != HAL_OK)
 8011d3a:	492a      	ldr	r1, [pc, #168]	; (8011de4 <Tim_Init+0x238>)
 8011d3c:	4826      	ldr	r0, [pc, #152]	; (8011dd8 <Tim_Init+0x22c>)
 8011d3e:	f7fd fbff 	bl	800f540 <HAL_TIMEx_MasterConfigSynchronization>
 8011d42:	4603      	mov	r3, r0
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d002      	beq.n	8011d4e <Tim_Init+0x1a2>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8011d48:	4823      	ldr	r0, [pc, #140]	; (8011dd8 <Tim_Init+0x22c>)
 8011d4a:	f000 f981 	bl	8012050 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure PWM parameters. */
			sConfigOC3.OCMode = TIM_OCMODE_PWM1;
 8011d4e:	4b26      	ldr	r3, [pc, #152]	; (8011de8 <Tim_Init+0x23c>)
 8011d50:	2260      	movs	r2, #96	; 0x60
 8011d52:	601a      	str	r2, [r3, #0]
			sConfigOC3.Pulse = 0;
 8011d54:	4b24      	ldr	r3, [pc, #144]	; (8011de8 <Tim_Init+0x23c>)
 8011d56:	2200      	movs	r2, #0
 8011d58:	605a      	str	r2, [r3, #4]
			sConfigOC3.OCPolarity = TIM_OCPOLARITY_HIGH;
 8011d5a:	4b23      	ldr	r3, [pc, #140]	; (8011de8 <Tim_Init+0x23c>)
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	609a      	str	r2, [r3, #8]
			sConfigOC3.OCFastMode = TIM_OCFAST_ENABLE;
 8011d60:	4b21      	ldr	r3, [pc, #132]	; (8011de8 <Tim_Init+0x23c>)
 8011d62:	2204      	movs	r2, #4
 8011d64:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_1) != HAL_OK)
 8011d66:	2200      	movs	r2, #0
 8011d68:	491f      	ldr	r1, [pc, #124]	; (8011de8 <Tim_Init+0x23c>)
 8011d6a:	481b      	ldr	r0, [pc, #108]	; (8011dd8 <Tim_Init+0x22c>)
 8011d6c:	f7fc fd84 	bl	800e878 <HAL_TIM_PWM_ConfigChannel>
 8011d70:	4603      	mov	r3, r0
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d002      	beq.n	8011d7c <Tim_Init+0x1d0>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8011d76:	4818      	ldr	r0, [pc, #96]	; (8011dd8 <Tim_Init+0x22c>)
 8011d78:	f000 f96a 	bl	8012050 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_2) != HAL_OK)
 8011d7c:	2204      	movs	r2, #4
 8011d7e:	491a      	ldr	r1, [pc, #104]	; (8011de8 <Tim_Init+0x23c>)
 8011d80:	4815      	ldr	r0, [pc, #84]	; (8011dd8 <Tim_Init+0x22c>)
 8011d82:	f7fc fd79 	bl	800e878 <HAL_TIM_PWM_ConfigChannel>
 8011d86:	4603      	mov	r3, r0
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d002      	beq.n	8011d92 <Tim_Init+0x1e6>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8011d8c:	4812      	ldr	r0, [pc, #72]	; (8011dd8 <Tim_Init+0x22c>)
 8011d8e:	f000 f95f 	bl	8012050 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_3) != HAL_OK)
 8011d92:	2208      	movs	r2, #8
 8011d94:	4914      	ldr	r1, [pc, #80]	; (8011de8 <Tim_Init+0x23c>)
 8011d96:	4810      	ldr	r0, [pc, #64]	; (8011dd8 <Tim_Init+0x22c>)
 8011d98:	f7fc fd6e 	bl	800e878 <HAL_TIM_PWM_ConfigChannel>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d002      	beq.n	8011da8 <Tim_Init+0x1fc>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8011da2:	480d      	ldr	r0, [pc, #52]	; (8011dd8 <Tim_Init+0x22c>)
 8011da4:	f000 f954 	bl	8012050 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_4) != HAL_OK)
 8011da8:	220c      	movs	r2, #12
 8011daa:	490f      	ldr	r1, [pc, #60]	; (8011de8 <Tim_Init+0x23c>)
 8011dac:	480a      	ldr	r0, [pc, #40]	; (8011dd8 <Tim_Init+0x22c>)
 8011dae:	f7fc fd63 	bl	800e878 <HAL_TIM_PWM_ConfigChannel>
 8011db2:	4603      	mov	r3, r0
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d002      	beq.n	8011dbe <Tim_Init+0x212>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8011db8:	4807      	ldr	r0, [pc, #28]	; (8011dd8 <Tim_Init+0x22c>)
 8011dba:	f000 f949 	bl	8012050 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure timer GPIO. */
			HAL_TIM_MspPostInit(&htim3);
 8011dbe:	4806      	ldr	r0, [pc, #24]	; (8011dd8 <Tim_Init+0x22c>)
 8011dc0:	f7f5 fac0 	bl	8007344 <HAL_TIM_MspPostInit>
			break;
 8011dc4:	e0f5      	b.n	8011fb2 <Tim_Init+0x406>
 8011dc6:	bf00      	nop
 8011dc8:	20000758 	.word	0x20000758
 8011dcc:	20000cf8 	.word	0x20000cf8
 8011dd0:	20000d08 	.word	0x20000d08
 8011dd4:	20000d10 	.word	0x20000d10
 8011dd8:	2000080c 	.word	0x2000080c
 8011ddc:	40000400 	.word	0x40000400
 8011de0:	20000d64 	.word	0x20000d64
 8011de4:	20000d74 	.word	0x20000d74
 8011de8:	20000d2c 	.word	0x20000d2c
		/* Initialize the timer four. */
		case TIMER_FOUR:
			/* Configure timer parameters. */
			htim4.Instance = TIM4;
 8011dec:	4b73      	ldr	r3, [pc, #460]	; (8011fbc <Tim_Init+0x410>)
 8011dee:	4a74      	ldr	r2, [pc, #464]	; (8011fc0 <Tim_Init+0x414>)
 8011df0:	601a      	str	r2, [r3, #0]
			htim4.Init.Prescaler = 10000-1;
 8011df2:	4b72      	ldr	r3, [pc, #456]	; (8011fbc <Tim_Init+0x410>)
 8011df4:	f242 720f 	movw	r2, #9999	; 0x270f
 8011df8:	605a      	str	r2, [r3, #4]
			htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011dfa:	4b70      	ldr	r3, [pc, #448]	; (8011fbc <Tim_Init+0x410>)
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	609a      	str	r2, [r3, #8]
			htim4.Init.Period = 1000-1;
 8011e00:	4b6e      	ldr	r3, [pc, #440]	; (8011fbc <Tim_Init+0x410>)
 8011e02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011e06:	60da      	str	r2, [r3, #12]
			htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011e08:	4b6c      	ldr	r3, [pc, #432]	; (8011fbc <Tim_Init+0x410>)
 8011e0a:	2200      	movs	r2, #0
 8011e0c:	611a      	str	r2, [r3, #16]
			htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011e0e:	4b6b      	ldr	r3, [pc, #428]	; (8011fbc <Tim_Init+0x410>)
 8011e10:	2200      	movs	r2, #0
 8011e12:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8011e14:	4869      	ldr	r0, [pc, #420]	; (8011fbc <Tim_Init+0x410>)
 8011e16:	f7fb ff17 	bl	800dc48 <HAL_TIM_Base_Init>
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d002      	beq.n	8011e26 <Tim_Init+0x27a>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8011e20:	4866      	ldr	r0, [pc, #408]	; (8011fbc <Tim_Init+0x410>)
 8011e22:	f000 f915 	bl	8012050 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the clock source. */
			sClockSourceConfig4.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011e26:	4b67      	ldr	r3, [pc, #412]	; (8011fc4 <Tim_Init+0x418>)
 8011e28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011e2c:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig4) != HAL_OK)
 8011e2e:	4965      	ldr	r1, [pc, #404]	; (8011fc4 <Tim_Init+0x418>)
 8011e30:	4862      	ldr	r0, [pc, #392]	; (8011fbc <Tim_Init+0x410>)
 8011e32:	f7fc fde3 	bl	800e9fc <HAL_TIM_ConfigClockSource>
 8011e36:	4603      	mov	r3, r0
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d002      	beq.n	8011e42 <Tim_Init+0x296>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8011e3c:	485f      	ldr	r0, [pc, #380]	; (8011fbc <Tim_Init+0x410>)
 8011e3e:	f000 f907 	bl	8012050 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8011e42:	485e      	ldr	r0, [pc, #376]	; (8011fbc <Tim_Init+0x410>)
 8011e44:	f7fb ffbe 	bl	800ddc4 <HAL_TIM_PWM_Init>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d002      	beq.n	8011e54 <Tim_Init+0x2a8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8011e4e:	485b      	ldr	r0, [pc, #364]	; (8011fbc <Tim_Init+0x410>)
 8011e50:	f000 f8fe 	bl	8012050 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the master slave mode. */
			sMasterConfig4.MasterOutputTrigger = TIM_TRGO_RESET;
 8011e54:	4b5c      	ldr	r3, [pc, #368]	; (8011fc8 <Tim_Init+0x41c>)
 8011e56:	2200      	movs	r2, #0
 8011e58:	601a      	str	r2, [r3, #0]
			sMasterConfig4.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011e5a:	4b5b      	ldr	r3, [pc, #364]	; (8011fc8 <Tim_Init+0x41c>)
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig4) != HAL_OK)
 8011e60:	4959      	ldr	r1, [pc, #356]	; (8011fc8 <Tim_Init+0x41c>)
 8011e62:	4856      	ldr	r0, [pc, #344]	; (8011fbc <Tim_Init+0x410>)
 8011e64:	f7fd fb6c 	bl	800f540 <HAL_TIMEx_MasterConfigSynchronization>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d002      	beq.n	8011e74 <Tim_Init+0x2c8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8011e6e:	4853      	ldr	r0, [pc, #332]	; (8011fbc <Tim_Init+0x410>)
 8011e70:	f000 f8ee 	bl	8012050 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the PWM parameters. */
			sConfigOC4.OCMode = TIM_OCMODE_PWM1;
 8011e74:	4b55      	ldr	r3, [pc, #340]	; (8011fcc <Tim_Init+0x420>)
 8011e76:	2260      	movs	r2, #96	; 0x60
 8011e78:	601a      	str	r2, [r3, #0]
			sConfigOC4.Pulse = 999;
 8011e7a:	4b54      	ldr	r3, [pc, #336]	; (8011fcc <Tim_Init+0x420>)
 8011e7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011e80:	605a      	str	r2, [r3, #4]
			sConfigOC4.OCPolarity = TIM_OCPOLARITY_HIGH;
 8011e82:	4b52      	ldr	r3, [pc, #328]	; (8011fcc <Tim_Init+0x420>)
 8011e84:	2200      	movs	r2, #0
 8011e86:	609a      	str	r2, [r3, #8]
			sConfigOC4.OCFastMode = TIM_OCFAST_DISABLE;
 8011e88:	4b50      	ldr	r3, [pc, #320]	; (8011fcc <Tim_Init+0x420>)
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC4, TIM_CHANNEL_3) != HAL_OK)
 8011e8e:	2208      	movs	r2, #8
 8011e90:	494e      	ldr	r1, [pc, #312]	; (8011fcc <Tim_Init+0x420>)
 8011e92:	484a      	ldr	r0, [pc, #296]	; (8011fbc <Tim_Init+0x410>)
 8011e94:	f7fc fcf0 	bl	800e878 <HAL_TIM_PWM_ConfigChannel>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d002      	beq.n	8011ea4 <Tim_Init+0x2f8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8011e9e:	4847      	ldr	r0, [pc, #284]	; (8011fbc <Tim_Init+0x410>)
 8011ea0:	f000 f8d6 	bl	8012050 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC4, TIM_CHANNEL_4) != HAL_OK)
 8011ea4:	220c      	movs	r2, #12
 8011ea6:	4949      	ldr	r1, [pc, #292]	; (8011fcc <Tim_Init+0x420>)
 8011ea8:	4844      	ldr	r0, [pc, #272]	; (8011fbc <Tim_Init+0x410>)
 8011eaa:	f7fc fce5 	bl	800e878 <HAL_TIM_PWM_ConfigChannel>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d002      	beq.n	8011eba <Tim_Init+0x30e>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8011eb4:	4841      	ldr	r0, [pc, #260]	; (8011fbc <Tim_Init+0x410>)
 8011eb6:	f000 f8cb 	bl	8012050 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the timer GPIO. */
			HAL_TIM_MspPostInit(&htim4);
 8011eba:	4840      	ldr	r0, [pc, #256]	; (8011fbc <Tim_Init+0x410>)
 8011ebc:	f7f5 fa42 	bl	8007344 <HAL_TIM_MspPostInit>
			break;
 8011ec0:	e077      	b.n	8011fb2 <Tim_Init+0x406>
		/* Initialize the timer five. */
		case TIMER_FIVE:
			htim5.Instance = TIM5;
 8011ec2:	4b43      	ldr	r3, [pc, #268]	; (8011fd0 <Tim_Init+0x424>)
 8011ec4:	4a43      	ldr	r2, [pc, #268]	; (8011fd4 <Tim_Init+0x428>)
 8011ec6:	601a      	str	r2, [r3, #0]
			htim5.Init.Prescaler = 100-1;
 8011ec8:	4b41      	ldr	r3, [pc, #260]	; (8011fd0 <Tim_Init+0x424>)
 8011eca:	2263      	movs	r2, #99	; 0x63
 8011ecc:	605a      	str	r2, [r3, #4]
			htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011ece:	4b40      	ldr	r3, [pc, #256]	; (8011fd0 <Tim_Init+0x424>)
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	609a      	str	r2, [r3, #8]
			htim5.Init.Period = 0xffffffff;
 8011ed4:	4b3e      	ldr	r3, [pc, #248]	; (8011fd0 <Tim_Init+0x424>)
 8011ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8011eda:	60da      	str	r2, [r3, #12]
			htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011edc:	4b3c      	ldr	r3, [pc, #240]	; (8011fd0 <Tim_Init+0x424>)
 8011ede:	2200      	movs	r2, #0
 8011ee0:	611a      	str	r2, [r3, #16]
			htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011ee2:	4b3b      	ldr	r3, [pc, #236]	; (8011fd0 <Tim_Init+0x424>)
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	619a      	str	r2, [r3, #24]
			if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8011ee8:	4839      	ldr	r0, [pc, #228]	; (8011fd0 <Tim_Init+0x424>)
 8011eea:	f7fb fead 	bl	800dc48 <HAL_TIM_Base_Init>
 8011eee:	4603      	mov	r3, r0
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d002      	beq.n	8011efa <Tim_Init+0x34e>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8011ef4:	4836      	ldr	r0, [pc, #216]	; (8011fd0 <Tim_Init+0x424>)
 8011ef6:	f000 f8ab 	bl	8012050 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sClockSourceConfig5.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011efa:	4b37      	ldr	r3, [pc, #220]	; (8011fd8 <Tim_Init+0x42c>)
 8011efc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011f00:	601a      	str	r2, [r3, #0]
			if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig5) != HAL_OK)
 8011f02:	4935      	ldr	r1, [pc, #212]	; (8011fd8 <Tim_Init+0x42c>)
 8011f04:	4832      	ldr	r0, [pc, #200]	; (8011fd0 <Tim_Init+0x424>)
 8011f06:	f7fc fd79 	bl	800e9fc <HAL_TIM_ConfigClockSource>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d002      	beq.n	8011f16 <Tim_Init+0x36a>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8011f10:	482f      	ldr	r0, [pc, #188]	; (8011fd0 <Tim_Init+0x424>)
 8011f12:	f000 f89d 	bl	8012050 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8011f16:	482e      	ldr	r0, [pc, #184]	; (8011fd0 <Tim_Init+0x424>)
 8011f18:	f7fc f96a 	bl	800e1f0 <HAL_TIM_IC_Init>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d002      	beq.n	8011f28 <Tim_Init+0x37c>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8011f22:	482b      	ldr	r0, [pc, #172]	; (8011fd0 <Tim_Init+0x424>)
 8011f24:	f000 f894 	bl	8012050 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sMasterConfig5.MasterOutputTrigger = TIM_TRGO_RESET;
 8011f28:	4b2c      	ldr	r3, [pc, #176]	; (8011fdc <Tim_Init+0x430>)
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	601a      	str	r2, [r3, #0]
			sMasterConfig5.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011f2e:	4b2b      	ldr	r3, [pc, #172]	; (8011fdc <Tim_Init+0x430>)
 8011f30:	2200      	movs	r2, #0
 8011f32:	605a      	str	r2, [r3, #4]
			if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig5) != HAL_OK)
 8011f34:	4929      	ldr	r1, [pc, #164]	; (8011fdc <Tim_Init+0x430>)
 8011f36:	4826      	ldr	r0, [pc, #152]	; (8011fd0 <Tim_Init+0x424>)
 8011f38:	f7fd fb02 	bl	800f540 <HAL_TIMEx_MasterConfigSynchronization>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d002      	beq.n	8011f48 <Tim_Init+0x39c>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8011f42:	4823      	ldr	r0, [pc, #140]	; (8011fd0 <Tim_Init+0x424>)
 8011f44:	f000 f884 	bl	8012050 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sConfigIC5.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8011f48:	4b25      	ldr	r3, [pc, #148]	; (8011fe0 <Tim_Init+0x434>)
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	601a      	str	r2, [r3, #0]
			sConfigIC5.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8011f4e:	4b24      	ldr	r3, [pc, #144]	; (8011fe0 <Tim_Init+0x434>)
 8011f50:	2201      	movs	r2, #1
 8011f52:	605a      	str	r2, [r3, #4]
			sConfigIC5.ICPrescaler = TIM_ICPSC_DIV1;
 8011f54:	4b22      	ldr	r3, [pc, #136]	; (8011fe0 <Tim_Init+0x434>)
 8011f56:	2200      	movs	r2, #0
 8011f58:	609a      	str	r2, [r3, #8]
			sConfigIC5.ICFilter = 0;
 8011f5a:	4b21      	ldr	r3, [pc, #132]	; (8011fe0 <Tim_Init+0x434>)
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	60da      	str	r2, [r3, #12]
			if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC5, TIM_CHANNEL_1) != HAL_OK)
 8011f60:	2200      	movs	r2, #0
 8011f62:	491f      	ldr	r1, [pc, #124]	; (8011fe0 <Tim_Init+0x434>)
 8011f64:	481a      	ldr	r0, [pc, #104]	; (8011fd0 <Tim_Init+0x424>)
 8011f66:	f7fc fbeb 	bl	800e740 <HAL_TIM_IC_ConfigChannel>
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d002      	beq.n	8011f76 <Tim_Init+0x3ca>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8011f70:	4817      	ldr	r0, [pc, #92]	; (8011fd0 <Tim_Init+0x424>)
 8011f72:	f000 f86d 	bl	8012050 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC5, TIM_CHANNEL_2) != HAL_OK)
 8011f76:	2204      	movs	r2, #4
 8011f78:	4919      	ldr	r1, [pc, #100]	; (8011fe0 <Tim_Init+0x434>)
 8011f7a:	4815      	ldr	r0, [pc, #84]	; (8011fd0 <Tim_Init+0x424>)
 8011f7c:	f7fc fbe0 	bl	800e740 <HAL_TIM_IC_ConfigChannel>
 8011f80:	4603      	mov	r3, r0
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d002      	beq.n	8011f8c <Tim_Init+0x3e0>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8011f86:	4812      	ldr	r0, [pc, #72]	; (8011fd0 <Tim_Init+0x424>)
 8011f88:	f000 f862 	bl	8012050 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if(TimH_MainFunctionFirstCall == STD_LOW)
 8011f8c:	4b15      	ldr	r3, [pc, #84]	; (8011fe4 <Tim_Init+0x438>)
 8011f8e:	781b      	ldrb	r3, [r3, #0]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d10d      	bne.n	8011fb0 <Tim_Init+0x404>
			{
				HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8011f94:	2100      	movs	r1, #0
 8011f96:	480e      	ldr	r0, [pc, #56]	; (8011fd0 <Tim_Init+0x424>)
 8011f98:	f7fc f990 	bl	800e2bc <HAL_TIM_IC_Start_IT>
				HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 8011f9c:	2104      	movs	r1, #4
 8011f9e:	480c      	ldr	r0, [pc, #48]	; (8011fd0 <Tim_Init+0x424>)
 8011fa0:	f7fc f98c 	bl	800e2bc <HAL_TIM_IC_Start_IT>
				TimH_MainFunctionFirstCall = STD_HIGH;
 8011fa4:	4b0f      	ldr	r3, [pc, #60]	; (8011fe4 <Tim_Init+0x438>)
 8011fa6:	2201      	movs	r2, #1
 8011fa8:	701a      	strb	r2, [r3, #0]
			else
			{
				/* do nothing */
			}

			break;
 8011faa:	e001      	b.n	8011fb0 <Tim_Init+0x404>
		default:
			break;
 8011fac:	bf00      	nop
 8011fae:	e000      	b.n	8011fb2 <Tim_Init+0x406>
			break;
 8011fb0:	bf00      	nop
	}
	return E_OK;
 8011fb2:	2300      	movs	r3, #0
}
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	3710      	adds	r7, #16
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bd80      	pop	{r7, pc}
 8011fbc:	200008c0 	.word	0x200008c0
 8011fc0:	40000800 	.word	0x40000800
 8011fc4:	20000d7c 	.word	0x20000d7c
 8011fc8:	20000d8c 	.word	0x20000d8c
 8011fcc:	20000d48 	.word	0x20000d48
 8011fd0:	20000974 	.word	0x20000974
 8011fd4:	40000c00 	.word	0x40000c00
 8011fd8:	20000d94 	.word	0x20000d94
 8011fdc:	20000da4 	.word	0x20000da4
 8011fe0:	20000dac 	.word	0x20000dac
 8011fe4:	20000cf6 	.word	0x20000cf6

08011fe8 <Tim_DeInit>:
/***********************************************************************************
* Function: Tim_DeInit										   			           *
* Description: Peripheral de-initialization.									   *
************************************************************************************/
StdReturnType Tim_DeInit(uint8 TimerChannel)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b084      	sub	sp, #16
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	4603      	mov	r3, r0
 8011ff0:	71fb      	strb	r3, [r7, #7]
	/* Store the timer channel value into a local variable. */
	uint8 localVariable = TimerChannel;
 8011ff2:	79fb      	ldrb	r3, [r7, #7]
 8011ff4:	73fb      	strb	r3, [r7, #15]
	/* Process the request for timer de-init. */
	switch(localVariable)
 8011ff6:	7bfb      	ldrb	r3, [r7, #15]
 8011ff8:	3b02      	subs	r3, #2
 8011ffa:	2b03      	cmp	r3, #3
 8011ffc:	d81a      	bhi.n	8012034 <Tim_DeInit+0x4c>
 8011ffe:	a201      	add	r2, pc, #4	; (adr r2, 8012004 <Tim_DeInit+0x1c>)
 8012000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012004:	08012015 	.word	0x08012015
 8012008:	0801201d 	.word	0x0801201d
 801200c:	08012025 	.word	0x08012025
 8012010:	0801202d 	.word	0x0801202d
	{
		case TIMER_TWO:
			HAL_TIM_Base_MspDeInit(&htim2);
 8012014:	480a      	ldr	r0, [pc, #40]	; (8012040 <Tim_DeInit+0x58>)
 8012016:	f7f5 fa3f 	bl	8007498 <HAL_TIM_Base_MspDeInit>
			break;
 801201a:	e00c      	b.n	8012036 <Tim_DeInit+0x4e>
		case TIMER_THREE:
			HAL_TIM_Base_MspDeInit(&htim3);
 801201c:	4809      	ldr	r0, [pc, #36]	; (8012044 <Tim_DeInit+0x5c>)
 801201e:	f7f5 fa3b 	bl	8007498 <HAL_TIM_Base_MspDeInit>
			break;
 8012022:	e008      	b.n	8012036 <Tim_DeInit+0x4e>
		case TIMER_FOUR:
			HAL_TIM_Base_MspDeInit(&htim4);
 8012024:	4808      	ldr	r0, [pc, #32]	; (8012048 <Tim_DeInit+0x60>)
 8012026:	f7f5 fa37 	bl	8007498 <HAL_TIM_Base_MspDeInit>
			break;
 801202a:	e004      	b.n	8012036 <Tim_DeInit+0x4e>
		case TIMER_FIVE:
			HAL_TIM_Base_MspDeInit(&htim5);
 801202c:	4807      	ldr	r0, [pc, #28]	; (801204c <Tim_DeInit+0x64>)
 801202e:	f7f5 fa33 	bl	8007498 <HAL_TIM_Base_MspDeInit>
			break;
 8012032:	e000      	b.n	8012036 <Tim_DeInit+0x4e>
		default:
			break;
 8012034:	bf00      	nop
	}
	return E_OK;
 8012036:	2300      	movs	r3, #0
}
 8012038:	4618      	mov	r0, r3
 801203a:	3710      	adds	r7, #16
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}
 8012040:	20000758 	.word	0x20000758
 8012044:	2000080c 	.word	0x2000080c
 8012048:	200008c0 	.word	0x200008c0
 801204c:	20000974 	.word	0x20000974

08012050 <HAL_TIM_ErrorCallback>:
/***********************************************************************************
* Function: HAL_TIM_ErrorCallback										   		   *
* Description: Error callback called when timer fault occurs.					   *
************************************************************************************/
VOID HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b082      	sub	sp, #8
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
	/* Perform re-initialization of the peripheral in case of error. */
	if(htim->Instance == TIM2)
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012060:	d10c      	bne.n	801207c <HAL_TIM_ErrorCallback+0x2c>
	{
		SystemManager_Fault[TIMER2_ERROR]++;
 8012062:	4b23      	ldr	r3, [pc, #140]	; (80120f0 <HAL_TIM_ErrorCallback+0xa0>)
 8012064:	7d9b      	ldrb	r3, [r3, #22]
 8012066:	3301      	adds	r3, #1
 8012068:	b2da      	uxtb	r2, r3
 801206a:	4b21      	ldr	r3, [pc, #132]	; (80120f0 <HAL_TIM_ErrorCallback+0xa0>)
 801206c:	759a      	strb	r2, [r3, #22]
		Tim_DeInit(TIMER_TWO);
 801206e:	2002      	movs	r0, #2
 8012070:	f7ff ffba 	bl	8011fe8 <Tim_DeInit>
		Tim_Init(TIMER_TWO);
 8012074:	2002      	movs	r0, #2
 8012076:	f7ff fd99 	bl	8011bac <Tim_Init>
	}
	else
	{
		/* do nothing */
	}
}
 801207a:	e034      	b.n	80120e6 <HAL_TIM_ErrorCallback+0x96>
	else if(htim->Instance == TIM3)
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	4a1c      	ldr	r2, [pc, #112]	; (80120f4 <HAL_TIM_ErrorCallback+0xa4>)
 8012082:	4293      	cmp	r3, r2
 8012084:	d10c      	bne.n	80120a0 <HAL_TIM_ErrorCallback+0x50>
		SystemManager_Fault[TIMER3_ERROR]++;
 8012086:	4b1a      	ldr	r3, [pc, #104]	; (80120f0 <HAL_TIM_ErrorCallback+0xa0>)
 8012088:	7ddb      	ldrb	r3, [r3, #23]
 801208a:	3301      	adds	r3, #1
 801208c:	b2da      	uxtb	r2, r3
 801208e:	4b18      	ldr	r3, [pc, #96]	; (80120f0 <HAL_TIM_ErrorCallback+0xa0>)
 8012090:	75da      	strb	r2, [r3, #23]
		Tim_DeInit(TIMER_THREE);
 8012092:	2003      	movs	r0, #3
 8012094:	f7ff ffa8 	bl	8011fe8 <Tim_DeInit>
		Tim_Init(TIMER_THREE);
 8012098:	2003      	movs	r0, #3
 801209a:	f7ff fd87 	bl	8011bac <Tim_Init>
}
 801209e:	e022      	b.n	80120e6 <HAL_TIM_ErrorCallback+0x96>
	else if(htim->Instance == TIM4)
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	4a14      	ldr	r2, [pc, #80]	; (80120f8 <HAL_TIM_ErrorCallback+0xa8>)
 80120a6:	4293      	cmp	r3, r2
 80120a8:	d10c      	bne.n	80120c4 <HAL_TIM_ErrorCallback+0x74>
		SystemManager_Fault[TIMER4_ERROR]++;
 80120aa:	4b11      	ldr	r3, [pc, #68]	; (80120f0 <HAL_TIM_ErrorCallback+0xa0>)
 80120ac:	7e1b      	ldrb	r3, [r3, #24]
 80120ae:	3301      	adds	r3, #1
 80120b0:	b2da      	uxtb	r2, r3
 80120b2:	4b0f      	ldr	r3, [pc, #60]	; (80120f0 <HAL_TIM_ErrorCallback+0xa0>)
 80120b4:	761a      	strb	r2, [r3, #24]
		Tim_DeInit(TIMER_FOUR);
 80120b6:	2004      	movs	r0, #4
 80120b8:	f7ff ff96 	bl	8011fe8 <Tim_DeInit>
		Tim_Init(TIMER_FOUR);
 80120bc:	2004      	movs	r0, #4
 80120be:	f7ff fd75 	bl	8011bac <Tim_Init>
}
 80120c2:	e010      	b.n	80120e6 <HAL_TIM_ErrorCallback+0x96>
	else if(htim->Instance == TIM5)
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	4a0c      	ldr	r2, [pc, #48]	; (80120fc <HAL_TIM_ErrorCallback+0xac>)
 80120ca:	4293      	cmp	r3, r2
 80120cc:	d10b      	bne.n	80120e6 <HAL_TIM_ErrorCallback+0x96>
		SystemManager_Fault[TIMER5_ERROR]++;
 80120ce:	4b08      	ldr	r3, [pc, #32]	; (80120f0 <HAL_TIM_ErrorCallback+0xa0>)
 80120d0:	7e5b      	ldrb	r3, [r3, #25]
 80120d2:	3301      	adds	r3, #1
 80120d4:	b2da      	uxtb	r2, r3
 80120d6:	4b06      	ldr	r3, [pc, #24]	; (80120f0 <HAL_TIM_ErrorCallback+0xa0>)
 80120d8:	765a      	strb	r2, [r3, #25]
		Tim_DeInit(TIMER_FIVE);
 80120da:	2005      	movs	r0, #5
 80120dc:	f7ff ff84 	bl	8011fe8 <Tim_DeInit>
		Tim_Init(TIMER_FIVE);
 80120e0:	2005      	movs	r0, #5
 80120e2:	f7ff fd63 	bl	8011bac <Tim_Init>
}
 80120e6:	bf00      	nop
 80120e8:	3708      	adds	r7, #8
 80120ea:	46bd      	mov	sp, r7
 80120ec:	bd80      	pop	{r7, pc}
 80120ee:	bf00      	nop
 80120f0:	2000e638 	.word	0x2000e638
 80120f4:	40000400 	.word	0x40000400
 80120f8:	40000800 	.word	0x40000800
 80120fc:	40000c00 	.word	0x40000c00

08012100 <Tim_MainFunction>:
/***********************************************************************************
* Function: Tim_MainFunction										   			   *
* Description: Peripheral main function.									       *
************************************************************************************/
VOID Tim_MainFunction()
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b084      	sub	sp, #16
 8012104:	af00      	add	r7, sp, #0
	/* Check each timer for error status into local variables. */
	uint32 localStateTimerTwo = HAL_TIM_Base_GetState(&htim2);
 8012106:	4891      	ldr	r0, [pc, #580]	; (801234c <Tim_MainFunction+0x24c>)
 8012108:	f7fc fdca 	bl	800eca0 <HAL_TIM_Base_GetState>
 801210c:	4603      	mov	r3, r0
 801210e:	60fb      	str	r3, [r7, #12]
	uint32 localStateTimerThree = HAL_TIM_Base_GetState(&htim3);
 8012110:	488f      	ldr	r0, [pc, #572]	; (8012350 <Tim_MainFunction+0x250>)
 8012112:	f7fc fdc5 	bl	800eca0 <HAL_TIM_Base_GetState>
 8012116:	4603      	mov	r3, r0
 8012118:	60bb      	str	r3, [r7, #8]
	uint32 localStateTimerFour = HAL_TIM_Base_GetState(&htim4);
 801211a:	488e      	ldr	r0, [pc, #568]	; (8012354 <Tim_MainFunction+0x254>)
 801211c:	f7fc fdc0 	bl	800eca0 <HAL_TIM_Base_GetState>
 8012120:	4603      	mov	r3, r0
 8012122:	607b      	str	r3, [r7, #4]
	uint32 localStateTimerFive = HAL_TIM_Base_GetState(&htim5);
 8012124:	488c      	ldr	r0, [pc, #560]	; (8012358 <Tim_MainFunction+0x258>)
 8012126:	f7fc fdbb 	bl	800eca0 <HAL_TIM_Base_GetState>
 801212a:	4603      	mov	r3, r0
 801212c:	603b      	str	r3, [r7, #0]
	/* Process timers state. */
	switch(localStateTimerFive)
 801212e:	683b      	ldr	r3, [r7, #0]
 8012130:	2b04      	cmp	r3, #4
 8012132:	d86a      	bhi.n	801220a <Tim_MainFunction+0x10a>
 8012134:	a201      	add	r2, pc, #4	; (adr r2, 801213c <Tim_MainFunction+0x3c>)
 8012136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801213a:	bf00      	nop
 801213c:	08012151 	.word	0x08012151
 8012140:	08012161 	.word	0x08012161
 8012144:	080121e1 	.word	0x080121e1
 8012148:	080121eb 	.word	0x080121eb
 801214c:	080121fb 	.word	0x080121fb
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerFive = localStateTimerFive;
 8012150:	683b      	ldr	r3, [r7, #0]
 8012152:	b2da      	uxtb	r2, r3
 8012154:	4b81      	ldr	r3, [pc, #516]	; (801235c <Tim_MainFunction+0x25c>)
 8012156:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_FIVE);
 8012158:	2005      	movs	r0, #5
 801215a:	f7ff fd27 	bl	8011bac <Tim_Init>
			break;
 801215e:	e055      	b.n	801220c <Tim_MainFunction+0x10c>
		case HAL_TIM_STATE_READY:
			if(Os_Counter % 500)
 8012160:	4b7f      	ldr	r3, [pc, #508]	; (8012360 <Tim_MainFunction+0x260>)
 8012162:	681a      	ldr	r2, [r3, #0]
 8012164:	4b7f      	ldr	r3, [pc, #508]	; (8012364 <Tim_MainFunction+0x264>)
 8012166:	fba3 1302 	umull	r1, r3, r3, r2
 801216a:	095b      	lsrs	r3, r3, #5
 801216c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8012170:	fb01 f303 	mul.w	r3, r1, r3
 8012174:	1ad3      	subs	r3, r2, r3
 8012176:	2b00      	cmp	r3, #0
 8012178:	d02d      	beq.n	80121d6 <Tim_MainFunction+0xd6>
			{
				HAL_GPIO_WritePin(PDCR_TRIG_PORT, PDCR_TRIG_PIN, GPIO_PIN_SET);
 801217a:	2201      	movs	r2, #1
 801217c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012180:	4879      	ldr	r0, [pc, #484]	; (8012368 <Tim_MainFunction+0x268>)
 8012182:	f7f7 fe67 	bl	8009e54 <HAL_GPIO_WritePin>
				HAL_Delay(1);
 8012186:	2001      	movs	r0, #1
 8012188:	f7f5 fdfa 	bl	8007d80 <HAL_Delay>
				HAL_GPIO_WritePin(PDCR_TRIG_PORT, PDCR_TRIG_PIN, GPIO_PIN_RESET);
 801218c:	2200      	movs	r2, #0
 801218e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012192:	4875      	ldr	r0, [pc, #468]	; (8012368 <Tim_MainFunction+0x268>)
 8012194:	f7f7 fe5e 	bl	8009e54 <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC2);
 8012198:	4b6f      	ldr	r3, [pc, #444]	; (8012358 <Tim_MainFunction+0x258>)
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	68da      	ldr	r2, [r3, #12]
 801219e:	4b6e      	ldr	r3, [pc, #440]	; (8012358 <Tim_MainFunction+0x258>)
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	f042 0204 	orr.w	r2, r2, #4
 80121a6:	60da      	str	r2, [r3, #12]
				HAL_GPIO_WritePin(PDCF_TRIG_PORT, PDCF_TRIG_PIN, GPIO_PIN_SET);
 80121a8:	2201      	movs	r2, #1
 80121aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80121ae:	486f      	ldr	r0, [pc, #444]	; (801236c <Tim_MainFunction+0x26c>)
 80121b0:	f7f7 fe50 	bl	8009e54 <HAL_GPIO_WritePin>
				HAL_Delay(1);
 80121b4:	2001      	movs	r0, #1
 80121b6:	f7f5 fde3 	bl	8007d80 <HAL_Delay>
				HAL_GPIO_WritePin(PDCF_TRIG_PORT, PDCF_TRIG_PIN, GPIO_PIN_RESET);
 80121ba:	2200      	movs	r2, #0
 80121bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80121c0:	486a      	ldr	r0, [pc, #424]	; (801236c <Tim_MainFunction+0x26c>)
 80121c2:	f7f7 fe47 	bl	8009e54 <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC1);
 80121c6:	4b64      	ldr	r3, [pc, #400]	; (8012358 <Tim_MainFunction+0x258>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	68da      	ldr	r2, [r3, #12]
 80121cc:	4b62      	ldr	r3, [pc, #392]	; (8012358 <Tim_MainFunction+0x258>)
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	f042 0202 	orr.w	r2, r2, #2
 80121d4:	60da      	str	r2, [r3, #12]
			}
			else
			{
				/* do nothing */
			}
			TimH_BswState_TimerFive = localStateTimerFive;
 80121d6:	683b      	ldr	r3, [r7, #0]
 80121d8:	b2da      	uxtb	r2, r3
 80121da:	4b60      	ldr	r3, [pc, #384]	; (801235c <Tim_MainFunction+0x25c>)
 80121dc:	701a      	strb	r2, [r3, #0]
			break;
 80121de:	e015      	b.n	801220c <Tim_MainFunction+0x10c>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerFive = localStateTimerFive;
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	b2da      	uxtb	r2, r3
 80121e4:	4b5d      	ldr	r3, [pc, #372]	; (801235c <Tim_MainFunction+0x25c>)
 80121e6:	701a      	strb	r2, [r3, #0]
			break;
 80121e8:	e010      	b.n	801220c <Tim_MainFunction+0x10c>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerFive = localStateTimerFive;
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	b2da      	uxtb	r2, r3
 80121ee:	4b5b      	ldr	r3, [pc, #364]	; (801235c <Tim_MainFunction+0x25c>)
 80121f0:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim5);
 80121f2:	4859      	ldr	r0, [pc, #356]	; (8012358 <Tim_MainFunction+0x258>)
 80121f4:	f7ff ff2c 	bl	8012050 <HAL_TIM_ErrorCallback>
			break;
 80121f8:	e008      	b.n	801220c <Tim_MainFunction+0x10c>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerFive = localStateTimerFive;
 80121fa:	683b      	ldr	r3, [r7, #0]
 80121fc:	b2da      	uxtb	r2, r3
 80121fe:	4b57      	ldr	r3, [pc, #348]	; (801235c <Tim_MainFunction+0x25c>)
 8012200:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim5);
 8012202:	4855      	ldr	r0, [pc, #340]	; (8012358 <Tim_MainFunction+0x258>)
 8012204:	f7ff ff24 	bl	8012050 <HAL_TIM_ErrorCallback>
			break;
 8012208:	e000      	b.n	801220c <Tim_MainFunction+0x10c>
		default:
			break;
 801220a:	bf00      	nop
	}
	switch(localStateTimerTwo)
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	2b04      	cmp	r3, #4
 8012210:	d82e      	bhi.n	8012270 <Tim_MainFunction+0x170>
 8012212:	a201      	add	r2, pc, #4	; (adr r2, 8012218 <Tim_MainFunction+0x118>)
 8012214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012218:	0801222d 	.word	0x0801222d
 801221c:	0801223d 	.word	0x0801223d
 8012220:	08012247 	.word	0x08012247
 8012224:	08012251 	.word	0x08012251
 8012228:	08012261 	.word	0x08012261
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	b2da      	uxtb	r2, r3
 8012230:	4b4f      	ldr	r3, [pc, #316]	; (8012370 <Tim_MainFunction+0x270>)
 8012232:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_TWO);
 8012234:	2002      	movs	r0, #2
 8012236:	f7ff fcb9 	bl	8011bac <Tim_Init>
			break;
 801223a:	e01a      	b.n	8012272 <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	b2da      	uxtb	r2, r3
 8012240:	4b4b      	ldr	r3, [pc, #300]	; (8012370 <Tim_MainFunction+0x270>)
 8012242:	701a      	strb	r2, [r3, #0]
			break;
 8012244:	e015      	b.n	8012272 <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	b2da      	uxtb	r2, r3
 801224a:	4b49      	ldr	r3, [pc, #292]	; (8012370 <Tim_MainFunction+0x270>)
 801224c:	701a      	strb	r2, [r3, #0]
			break;
 801224e:	e010      	b.n	8012272 <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	b2da      	uxtb	r2, r3
 8012254:	4b46      	ldr	r3, [pc, #280]	; (8012370 <Tim_MainFunction+0x270>)
 8012256:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim2);
 8012258:	483c      	ldr	r0, [pc, #240]	; (801234c <Tim_MainFunction+0x24c>)
 801225a:	f7ff fef9 	bl	8012050 <HAL_TIM_ErrorCallback>
			break;
 801225e:	e008      	b.n	8012272 <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	b2da      	uxtb	r2, r3
 8012264:	4b42      	ldr	r3, [pc, #264]	; (8012370 <Tim_MainFunction+0x270>)
 8012266:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim2);
 8012268:	4838      	ldr	r0, [pc, #224]	; (801234c <Tim_MainFunction+0x24c>)
 801226a:	f7ff fef1 	bl	8012050 <HAL_TIM_ErrorCallback>
			break;
 801226e:	e000      	b.n	8012272 <Tim_MainFunction+0x172>
		default:
			break;
 8012270:	bf00      	nop
	}
	switch(localStateTimerThree)
 8012272:	68bb      	ldr	r3, [r7, #8]
 8012274:	2b04      	cmp	r3, #4
 8012276:	d82f      	bhi.n	80122d8 <Tim_MainFunction+0x1d8>
 8012278:	a201      	add	r2, pc, #4	; (adr r2, 8012280 <Tim_MainFunction+0x180>)
 801227a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801227e:	bf00      	nop
 8012280:	08012295 	.word	0x08012295
 8012284:	080122a5 	.word	0x080122a5
 8012288:	080122af 	.word	0x080122af
 801228c:	080122b9 	.word	0x080122b9
 8012290:	080122c9 	.word	0x080122c9
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerThree = localStateTimerThree;
 8012294:	68bb      	ldr	r3, [r7, #8]
 8012296:	b2da      	uxtb	r2, r3
 8012298:	4b36      	ldr	r3, [pc, #216]	; (8012374 <Tim_MainFunction+0x274>)
 801229a:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_THREE);
 801229c:	2003      	movs	r0, #3
 801229e:	f7ff fc85 	bl	8011bac <Tim_Init>
			break;
 80122a2:	e01a      	b.n	80122da <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerThree = localStateTimerThree;
 80122a4:	68bb      	ldr	r3, [r7, #8]
 80122a6:	b2da      	uxtb	r2, r3
 80122a8:	4b32      	ldr	r3, [pc, #200]	; (8012374 <Tim_MainFunction+0x274>)
 80122aa:	701a      	strb	r2, [r3, #0]
			break;
 80122ac:	e015      	b.n	80122da <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerThree = localStateTimerThree;
 80122ae:	68bb      	ldr	r3, [r7, #8]
 80122b0:	b2da      	uxtb	r2, r3
 80122b2:	4b30      	ldr	r3, [pc, #192]	; (8012374 <Tim_MainFunction+0x274>)
 80122b4:	701a      	strb	r2, [r3, #0]
			break;
 80122b6:	e010      	b.n	80122da <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerThree = localStateTimerThree;
 80122b8:	68bb      	ldr	r3, [r7, #8]
 80122ba:	b2da      	uxtb	r2, r3
 80122bc:	4b2d      	ldr	r3, [pc, #180]	; (8012374 <Tim_MainFunction+0x274>)
 80122be:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim3);
 80122c0:	4823      	ldr	r0, [pc, #140]	; (8012350 <Tim_MainFunction+0x250>)
 80122c2:	f7ff fec5 	bl	8012050 <HAL_TIM_ErrorCallback>
			break;
 80122c6:	e008      	b.n	80122da <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerThree = localStateTimerThree;
 80122c8:	68bb      	ldr	r3, [r7, #8]
 80122ca:	b2da      	uxtb	r2, r3
 80122cc:	4b29      	ldr	r3, [pc, #164]	; (8012374 <Tim_MainFunction+0x274>)
 80122ce:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim3);
 80122d0:	481f      	ldr	r0, [pc, #124]	; (8012350 <Tim_MainFunction+0x250>)
 80122d2:	f7ff febd 	bl	8012050 <HAL_TIM_ErrorCallback>
			break;
 80122d6:	e000      	b.n	80122da <Tim_MainFunction+0x1da>
		default:
			break;
 80122d8:	bf00      	nop
	}
	switch(localStateTimerFour)
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	2b04      	cmp	r3, #4
 80122de:	d82f      	bhi.n	8012340 <Tim_MainFunction+0x240>
 80122e0:	a201      	add	r2, pc, #4	; (adr r2, 80122e8 <Tim_MainFunction+0x1e8>)
 80122e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122e6:	bf00      	nop
 80122e8:	080122fd 	.word	0x080122fd
 80122ec:	0801230d 	.word	0x0801230d
 80122f0:	08012317 	.word	0x08012317
 80122f4:	08012321 	.word	0x08012321
 80122f8:	08012331 	.word	0x08012331
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerFour = localStateTimerFour;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	b2da      	uxtb	r2, r3
 8012300:	4b1d      	ldr	r3, [pc, #116]	; (8012378 <Tim_MainFunction+0x278>)
 8012302:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_FOUR);
 8012304:	2004      	movs	r0, #4
 8012306:	f7ff fc51 	bl	8011bac <Tim_Init>
			break;
 801230a:	e01a      	b.n	8012342 <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerFour = localStateTimerFour;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	b2da      	uxtb	r2, r3
 8012310:	4b19      	ldr	r3, [pc, #100]	; (8012378 <Tim_MainFunction+0x278>)
 8012312:	701a      	strb	r2, [r3, #0]
			break;
 8012314:	e015      	b.n	8012342 <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerFour = localStateTimerFour;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	b2da      	uxtb	r2, r3
 801231a:	4b17      	ldr	r3, [pc, #92]	; (8012378 <Tim_MainFunction+0x278>)
 801231c:	701a      	strb	r2, [r3, #0]
			break;
 801231e:	e010      	b.n	8012342 <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerFour = localStateTimerFour;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	b2da      	uxtb	r2, r3
 8012324:	4b14      	ldr	r3, [pc, #80]	; (8012378 <Tim_MainFunction+0x278>)
 8012326:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim4);
 8012328:	480a      	ldr	r0, [pc, #40]	; (8012354 <Tim_MainFunction+0x254>)
 801232a:	f7ff fe91 	bl	8012050 <HAL_TIM_ErrorCallback>
			break;
 801232e:	e008      	b.n	8012342 <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerFour = localStateTimerFour;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	b2da      	uxtb	r2, r3
 8012334:	4b10      	ldr	r3, [pc, #64]	; (8012378 <Tim_MainFunction+0x278>)
 8012336:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim4);
 8012338:	4806      	ldr	r0, [pc, #24]	; (8012354 <Tim_MainFunction+0x254>)
 801233a:	f7ff fe89 	bl	8012050 <HAL_TIM_ErrorCallback>
			break;
 801233e:	e000      	b.n	8012342 <Tim_MainFunction+0x242>
		default:
			break;
 8012340:	bf00      	nop
	}
}
 8012342:	bf00      	nop
 8012344:	3710      	adds	r7, #16
 8012346:	46bd      	mov	sp, r7
 8012348:	bd80      	pop	{r7, pc}
 801234a:	bf00      	nop
 801234c:	20000758 	.word	0x20000758
 8012350:	2000080c 	.word	0x2000080c
 8012354:	200008c0 	.word	0x200008c0
 8012358:	20000974 	.word	0x20000974
 801235c:	20000cd7 	.word	0x20000cd7
 8012360:	200003ac 	.word	0x200003ac
 8012364:	10624dd3 	.word	0x10624dd3
 8012368:	40020400 	.word	0x40020400
 801236c:	40020000 	.word	0x40020000
 8012370:	20000cd4 	.word	0x20000cd4
 8012374:	20000cd5 	.word	0x20000cd5
 8012378:	20000cd6 	.word	0x20000cd6

0801237c <HAL_TIM_PeriodElapsedCallback>:
* Function: HAL_TIM_PeriodElapsedCallback										   *
* Description: Peripheral period elapsed callback to process system state          *
* 			   when timer expires.									               *
************************************************************************************/
VOID HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b082      	sub	sp, #8
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
	/* Timer 1 is used for the time base source of FreeRTOS. Upon expiration increase the clock counter of the system. */
	if (htim->Instance == TIM1)
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	4a04      	ldr	r2, [pc, #16]	; (801239c <HAL_TIM_PeriodElapsedCallback+0x20>)
 801238a:	4293      	cmp	r3, r2
 801238c:	d101      	bne.n	8012392 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 801238e:	f7f5 fcd7 	bl	8007d40 <HAL_IncTick>
	}
	else
	{
		/* do nothing */
	}
}
 8012392:	bf00      	nop
 8012394:	3708      	adds	r7, #8
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}
 801239a:	bf00      	nop
 801239c:	40010000 	.word	0x40010000

080123a0 <__NVIC_SetPriority>:
{
 80123a0:	b480      	push	{r7}
 80123a2:	b083      	sub	sp, #12
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	4603      	mov	r3, r0
 80123a8:	6039      	str	r1, [r7, #0]
 80123aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80123ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	db0a      	blt.n	80123ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	b2da      	uxtb	r2, r3
 80123b8:	490c      	ldr	r1, [pc, #48]	; (80123ec <__NVIC_SetPriority+0x4c>)
 80123ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80123be:	0112      	lsls	r2, r2, #4
 80123c0:	b2d2      	uxtb	r2, r2
 80123c2:	440b      	add	r3, r1
 80123c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80123c8:	e00a      	b.n	80123e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80123ca:	683b      	ldr	r3, [r7, #0]
 80123cc:	b2da      	uxtb	r2, r3
 80123ce:	4908      	ldr	r1, [pc, #32]	; (80123f0 <__NVIC_SetPriority+0x50>)
 80123d0:	79fb      	ldrb	r3, [r7, #7]
 80123d2:	f003 030f 	and.w	r3, r3, #15
 80123d6:	3b04      	subs	r3, #4
 80123d8:	0112      	lsls	r2, r2, #4
 80123da:	b2d2      	uxtb	r2, r2
 80123dc:	440b      	add	r3, r1
 80123de:	761a      	strb	r2, [r3, #24]
}
 80123e0:	bf00      	nop
 80123e2:	370c      	adds	r7, #12
 80123e4:	46bd      	mov	sp, r7
 80123e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ea:	4770      	bx	lr
 80123ec:	e000e100 	.word	0xe000e100
 80123f0:	e000ed00 	.word	0xe000ed00

080123f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80123f4:	b580      	push	{r7, lr}
 80123f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80123f8:	4b05      	ldr	r3, [pc, #20]	; (8012410 <SysTick_Handler+0x1c>)
 80123fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80123fc:	f002 fe8c 	bl	8015118 <xTaskGetSchedulerState>
 8012400:	4603      	mov	r3, r0
 8012402:	2b01      	cmp	r3, #1
 8012404:	d001      	beq.n	801240a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012406:	f000 fed7 	bl	80131b8 <xPortSysTickHandler>
  }
}
 801240a:	bf00      	nop
 801240c:	bd80      	pop	{r7, pc}
 801240e:	bf00      	nop
 8012410:	e000e010 	.word	0xe000e010

08012414 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012414:	b580      	push	{r7, lr}
 8012416:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012418:	2100      	movs	r1, #0
 801241a:	f06f 0004 	mvn.w	r0, #4
 801241e:	f7ff ffbf 	bl	80123a0 <__NVIC_SetPriority>
#endif
}
 8012422:	bf00      	nop
 8012424:	bd80      	pop	{r7, pc}
	...

08012428 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012428:	b580      	push	{r7, lr}
 801242a:	b082      	sub	sp, #8
 801242c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801242e:	f3ef 8305 	mrs	r3, IPSR
 8012432:	603b      	str	r3, [r7, #0]
  return(result);
 8012434:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012436:	2b00      	cmp	r3, #0
 8012438:	d003      	beq.n	8012442 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801243a:	f06f 0305 	mvn.w	r3, #5
 801243e:	607b      	str	r3, [r7, #4]
 8012440:	e00f      	b.n	8012462 <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012442:	4b0a      	ldr	r3, [pc, #40]	; (801246c <osKernelInitialize+0x44>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d108      	bne.n	801245c <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 801244a:	4809      	ldr	r0, [pc, #36]	; (8012470 <osKernelInitialize+0x48>)
 801244c:	f000 fb76 	bl	8012b3c <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 8012450:	4b06      	ldr	r3, [pc, #24]	; (801246c <osKernelInitialize+0x44>)
 8012452:	2201      	movs	r2, #1
 8012454:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012456:	2300      	movs	r3, #0
 8012458:	607b      	str	r3, [r7, #4]
 801245a:	e002      	b.n	8012462 <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 801245c:	f04f 33ff 	mov.w	r3, #4294967295
 8012460:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012462:	687b      	ldr	r3, [r7, #4]
}
 8012464:	4618      	mov	r0, r3
 8012466:	3708      	adds	r7, #8
 8012468:	46bd      	mov	sp, r7
 801246a:	bd80      	pop	{r7, pc}
 801246c:	20000dbc 	.word	0x20000dbc
 8012470:	20000058 	.word	0x20000058

08012474 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012474:	b580      	push	{r7, lr}
 8012476:	b082      	sub	sp, #8
 8012478:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801247a:	f3ef 8305 	mrs	r3, IPSR
 801247e:	603b      	str	r3, [r7, #0]
  return(result);
 8012480:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012482:	2b00      	cmp	r3, #0
 8012484:	d003      	beq.n	801248e <osKernelStart+0x1a>
    stat = osErrorISR;
 8012486:	f06f 0305 	mvn.w	r3, #5
 801248a:	607b      	str	r3, [r7, #4]
 801248c:	e010      	b.n	80124b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801248e:	4b0b      	ldr	r3, [pc, #44]	; (80124bc <osKernelStart+0x48>)
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	2b01      	cmp	r3, #1
 8012494:	d109      	bne.n	80124aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012496:	f7ff ffbd 	bl	8012414 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801249a:	4b08      	ldr	r3, [pc, #32]	; (80124bc <osKernelStart+0x48>)
 801249c:	2202      	movs	r2, #2
 801249e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80124a0:	f002 f8b2 	bl	8014608 <vTaskStartScheduler>
      stat = osOK;
 80124a4:	2300      	movs	r3, #0
 80124a6:	607b      	str	r3, [r7, #4]
 80124a8:	e002      	b.n	80124b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80124aa:	f04f 33ff 	mov.w	r3, #4294967295
 80124ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80124b0:	687b      	ldr	r3, [r7, #4]
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	3708      	adds	r7, #8
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}
 80124ba:	bf00      	nop
 80124bc:	20000dbc 	.word	0x20000dbc

080124c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b08e      	sub	sp, #56	; 0x38
 80124c4:	af04      	add	r7, sp, #16
 80124c6:	60f8      	str	r0, [r7, #12]
 80124c8:	60b9      	str	r1, [r7, #8]
 80124ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80124cc:	2300      	movs	r3, #0
 80124ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80124d0:	f3ef 8305 	mrs	r3, IPSR
 80124d4:	617b      	str	r3, [r7, #20]
  return(result);
 80124d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d17f      	bne.n	80125dc <osThreadNew+0x11c>
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d07c      	beq.n	80125dc <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 80124e2:	2380      	movs	r3, #128	; 0x80
 80124e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80124e6:	2318      	movs	r3, #24
 80124e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80124ea:	2300      	movs	r3, #0
 80124ec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80124ee:	f04f 33ff 	mov.w	r3, #4294967295
 80124f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d046      	beq.n	8012588 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d002      	beq.n	8012508 <osThreadNew+0x48>
        name = attr->name;
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	699b      	ldr	r3, [r3, #24]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d002      	beq.n	8012516 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	699b      	ldr	r3, [r3, #24]
 8012514:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012516:	69fb      	ldr	r3, [r7, #28]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d008      	beq.n	801252e <osThreadNew+0x6e>
 801251c:	69fb      	ldr	r3, [r7, #28]
 801251e:	2b38      	cmp	r3, #56	; 0x38
 8012520:	d805      	bhi.n	801252e <osThreadNew+0x6e>
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	685b      	ldr	r3, [r3, #4]
 8012526:	f003 0301 	and.w	r3, r3, #1
 801252a:	2b00      	cmp	r3, #0
 801252c:	d001      	beq.n	8012532 <osThreadNew+0x72>
        return (NULL);
 801252e:	2300      	movs	r3, #0
 8012530:	e055      	b.n	80125de <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	695b      	ldr	r3, [r3, #20]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d003      	beq.n	8012542 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	695b      	ldr	r3, [r3, #20]
 801253e:	089b      	lsrs	r3, r3, #2
 8012540:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	689b      	ldr	r3, [r3, #8]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d00f      	beq.n	801256a <osThreadNew+0xaa>
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	68db      	ldr	r3, [r3, #12]
 801254e:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 8012552:	d30a      	bcc.n	801256a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012558:	2b00      	cmp	r3, #0
 801255a:	d006      	beq.n	801256a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	695b      	ldr	r3, [r3, #20]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d002      	beq.n	801256a <osThreadNew+0xaa>
        mem = 1;
 8012564:	2301      	movs	r3, #1
 8012566:	61bb      	str	r3, [r7, #24]
 8012568:	e010      	b.n	801258c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	689b      	ldr	r3, [r3, #8]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d10c      	bne.n	801258c <osThreadNew+0xcc>
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	68db      	ldr	r3, [r3, #12]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d108      	bne.n	801258c <osThreadNew+0xcc>
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	691b      	ldr	r3, [r3, #16]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d104      	bne.n	801258c <osThreadNew+0xcc>
          mem = 0;
 8012582:	2300      	movs	r3, #0
 8012584:	61bb      	str	r3, [r7, #24]
 8012586:	e001      	b.n	801258c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8012588:	2300      	movs	r3, #0
 801258a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801258c:	69bb      	ldr	r3, [r7, #24]
 801258e:	2b01      	cmp	r3, #1
 8012590:	d110      	bne.n	80125b4 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012596:	687a      	ldr	r2, [r7, #4]
 8012598:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801259a:	9202      	str	r2, [sp, #8]
 801259c:	9301      	str	r3, [sp, #4]
 801259e:	69fb      	ldr	r3, [r7, #28]
 80125a0:	9300      	str	r3, [sp, #0]
 80125a2:	68bb      	ldr	r3, [r7, #8]
 80125a4:	6a3a      	ldr	r2, [r7, #32]
 80125a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80125a8:	68f8      	ldr	r0, [r7, #12]
 80125aa:	f001 fc65 	bl	8013e78 <xTaskCreateStatic>
 80125ae:	4603      	mov	r3, r0
 80125b0:	613b      	str	r3, [r7, #16]
 80125b2:	e013      	b.n	80125dc <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80125b4:	69bb      	ldr	r3, [r7, #24]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d110      	bne.n	80125dc <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80125ba:	6a3b      	ldr	r3, [r7, #32]
 80125bc:	b29a      	uxth	r2, r3
 80125be:	f107 0310 	add.w	r3, r7, #16
 80125c2:	9301      	str	r3, [sp, #4]
 80125c4:	69fb      	ldr	r3, [r7, #28]
 80125c6:	9300      	str	r3, [sp, #0]
 80125c8:	68bb      	ldr	r3, [r7, #8]
 80125ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80125cc:	68f8      	ldr	r0, [r7, #12]
 80125ce:	f001 fcb2 	bl	8013f36 <xTaskCreate>
 80125d2:	4603      	mov	r3, r0
 80125d4:	2b01      	cmp	r3, #1
 80125d6:	d001      	beq.n	80125dc <osThreadNew+0x11c>
            hTask = NULL;
 80125d8:	2300      	movs	r3, #0
 80125da:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80125dc:	693b      	ldr	r3, [r7, #16]
}
 80125de:	4618      	mov	r0, r3
 80125e0:	3728      	adds	r7, #40	; 0x28
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bd80      	pop	{r7, pc}

080125e6 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80125e6:	b580      	push	{r7, lr}
 80125e8:	b084      	sub	sp, #16
 80125ea:	af00      	add	r7, sp, #0
 80125ec:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80125ee:	6878      	ldr	r0, [r7, #4]
 80125f0:	f003 fa91 	bl	8015b16 <pvTimerGetTimerID>
 80125f4:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d005      	beq.n	8012608 <TimerCallback+0x22>
    callb->func (callb->arg);
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	68fa      	ldr	r2, [r7, #12]
 8012602:	6852      	ldr	r2, [r2, #4]
 8012604:	4610      	mov	r0, r2
 8012606:	4798      	blx	r3
  }
}
 8012608:	bf00      	nop
 801260a:	3710      	adds	r7, #16
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}

08012610 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8012610:	b580      	push	{r7, lr}
 8012612:	b08c      	sub	sp, #48	; 0x30
 8012614:	af02      	add	r7, sp, #8
 8012616:	60f8      	str	r0, [r7, #12]
 8012618:	607a      	str	r2, [r7, #4]
 801261a:	603b      	str	r3, [r7, #0]
 801261c:	460b      	mov	r3, r1
 801261e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8012620:	2300      	movs	r3, #0
 8012622:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012624:	f3ef 8305 	mrs	r3, IPSR
 8012628:	613b      	str	r3, [r7, #16]
  return(result);
 801262a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 801262c:	2b00      	cmp	r3, #0
 801262e:	d163      	bne.n	80126f8 <osTimerNew+0xe8>
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d060      	beq.n	80126f8 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8012636:	2008      	movs	r0, #8
 8012638:	f000 f91c 	bl	8012874 <pvPortMalloc>
 801263c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 801263e:	697b      	ldr	r3, [r7, #20]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d059      	beq.n	80126f8 <osTimerNew+0xe8>
      callb->func = func;
 8012644:	697b      	ldr	r3, [r7, #20]
 8012646:	68fa      	ldr	r2, [r7, #12]
 8012648:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 801264a:	697b      	ldr	r3, [r7, #20]
 801264c:	687a      	ldr	r2, [r7, #4]
 801264e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8012650:	7afb      	ldrb	r3, [r7, #11]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d102      	bne.n	801265c <osTimerNew+0x4c>
        reload = pdFALSE;
 8012656:	2300      	movs	r3, #0
 8012658:	61fb      	str	r3, [r7, #28]
 801265a:	e001      	b.n	8012660 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 801265c:	2301      	movs	r3, #1
 801265e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8012660:	f04f 33ff 	mov.w	r3, #4294967295
 8012664:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8012666:	2300      	movs	r3, #0
 8012668:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d01c      	beq.n	80126aa <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8012670:	683b      	ldr	r3, [r7, #0]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d002      	beq.n	801267e <osTimerNew+0x6e>
          name = attr->name;
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 801267e:	683b      	ldr	r3, [r7, #0]
 8012680:	689b      	ldr	r3, [r3, #8]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d006      	beq.n	8012694 <osTimerNew+0x84>
 8012686:	683b      	ldr	r3, [r7, #0]
 8012688:	68db      	ldr	r3, [r3, #12]
 801268a:	2b2b      	cmp	r3, #43	; 0x2b
 801268c:	d902      	bls.n	8012694 <osTimerNew+0x84>
          mem = 1;
 801268e:	2301      	movs	r3, #1
 8012690:	61bb      	str	r3, [r7, #24]
 8012692:	e00c      	b.n	80126ae <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012694:	683b      	ldr	r3, [r7, #0]
 8012696:	689b      	ldr	r3, [r3, #8]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d108      	bne.n	80126ae <osTimerNew+0x9e>
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	68db      	ldr	r3, [r3, #12]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d104      	bne.n	80126ae <osTimerNew+0x9e>
            mem = 0;
 80126a4:	2300      	movs	r3, #0
 80126a6:	61bb      	str	r3, [r7, #24]
 80126a8:	e001      	b.n	80126ae <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80126aa:	2300      	movs	r3, #0
 80126ac:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80126ae:	69bb      	ldr	r3, [r7, #24]
 80126b0:	2b01      	cmp	r3, #1
 80126b2:	d10c      	bne.n	80126ce <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80126b4:	683b      	ldr	r3, [r7, #0]
 80126b6:	689b      	ldr	r3, [r3, #8]
 80126b8:	9301      	str	r3, [sp, #4]
 80126ba:	4b12      	ldr	r3, [pc, #72]	; (8012704 <osTimerNew+0xf4>)
 80126bc:	9300      	str	r3, [sp, #0]
 80126be:	697b      	ldr	r3, [r7, #20]
 80126c0:	69fa      	ldr	r2, [r7, #28]
 80126c2:	2101      	movs	r1, #1
 80126c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80126c6:	f002 fe7c 	bl	80153c2 <xTimerCreateStatic>
 80126ca:	6238      	str	r0, [r7, #32]
 80126cc:	e00b      	b.n	80126e6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80126ce:	69bb      	ldr	r3, [r7, #24]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d108      	bne.n	80126e6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80126d4:	4b0b      	ldr	r3, [pc, #44]	; (8012704 <osTimerNew+0xf4>)
 80126d6:	9300      	str	r3, [sp, #0]
 80126d8:	697b      	ldr	r3, [r7, #20]
 80126da:	69fa      	ldr	r2, [r7, #28]
 80126dc:	2101      	movs	r1, #1
 80126de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80126e0:	f002 fe4e 	bl	8015380 <xTimerCreate>
 80126e4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80126e6:	6a3b      	ldr	r3, [r7, #32]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d105      	bne.n	80126f8 <osTimerNew+0xe8>
 80126ec:	697b      	ldr	r3, [r7, #20]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d002      	beq.n	80126f8 <osTimerNew+0xe8>
        vPortFree (callb);
 80126f2:	6978      	ldr	r0, [r7, #20]
 80126f4:	f000 f966 	bl	80129c4 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80126f8:	6a3b      	ldr	r3, [r7, #32]
}
 80126fa:	4618      	mov	r0, r3
 80126fc:	3728      	adds	r7, #40	; 0x28
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}
 8012702:	bf00      	nop
 8012704:	080125e7 	.word	0x080125e7

08012708 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8012708:	b580      	push	{r7, lr}
 801270a:	b088      	sub	sp, #32
 801270c:	af02      	add	r7, sp, #8
 801270e:	6078      	str	r0, [r7, #4]
 8012710:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012716:	f3ef 8305 	mrs	r3, IPSR
 801271a:	60fb      	str	r3, [r7, #12]
  return(result);
 801271c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 801271e:	2b00      	cmp	r3, #0
 8012720:	d003      	beq.n	801272a <osTimerStart+0x22>
    stat = osErrorISR;
 8012722:	f06f 0305 	mvn.w	r3, #5
 8012726:	617b      	str	r3, [r7, #20]
 8012728:	e017      	b.n	801275a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 801272a:	693b      	ldr	r3, [r7, #16]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d103      	bne.n	8012738 <osTimerStart+0x30>
    stat = osErrorParameter;
 8012730:	f06f 0303 	mvn.w	r3, #3
 8012734:	617b      	str	r3, [r7, #20]
 8012736:	e010      	b.n	801275a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8012738:	2300      	movs	r3, #0
 801273a:	9300      	str	r3, [sp, #0]
 801273c:	2300      	movs	r3, #0
 801273e:	683a      	ldr	r2, [r7, #0]
 8012740:	2104      	movs	r1, #4
 8012742:	6938      	ldr	r0, [r7, #16]
 8012744:	f002 feb6 	bl	80154b4 <xTimerGenericCommand>
 8012748:	4603      	mov	r3, r0
 801274a:	2b01      	cmp	r3, #1
 801274c:	d102      	bne.n	8012754 <osTimerStart+0x4c>
      stat = osOK;
 801274e:	2300      	movs	r3, #0
 8012750:	617b      	str	r3, [r7, #20]
 8012752:	e002      	b.n	801275a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8012754:	f06f 0302 	mvn.w	r3, #2
 8012758:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 801275a:	697b      	ldr	r3, [r7, #20]
}
 801275c:	4618      	mov	r0, r3
 801275e:	3718      	adds	r7, #24
 8012760:	46bd      	mov	sp, r7
 8012762:	bd80      	pop	{r7, pc}

08012764 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8012764:	b580      	push	{r7, lr}
 8012766:	b088      	sub	sp, #32
 8012768:	af02      	add	r7, sp, #8
 801276a:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012770:	f3ef 8305 	mrs	r3, IPSR
 8012774:	60fb      	str	r3, [r7, #12]
  return(result);
 8012776:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012778:	2b00      	cmp	r3, #0
 801277a:	d003      	beq.n	8012784 <osTimerStop+0x20>
    stat = osErrorISR;
 801277c:	f06f 0305 	mvn.w	r3, #5
 8012780:	617b      	str	r3, [r7, #20]
 8012782:	e021      	b.n	80127c8 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 8012784:	693b      	ldr	r3, [r7, #16]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d103      	bne.n	8012792 <osTimerStop+0x2e>
    stat = osErrorParameter;
 801278a:	f06f 0303 	mvn.w	r3, #3
 801278e:	617b      	str	r3, [r7, #20]
 8012790:	e01a      	b.n	80127c8 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8012792:	6938      	ldr	r0, [r7, #16]
 8012794:	f003 f996 	bl	8015ac4 <xTimerIsTimerActive>
 8012798:	4603      	mov	r3, r0
 801279a:	2b00      	cmp	r3, #0
 801279c:	d103      	bne.n	80127a6 <osTimerStop+0x42>
      stat = osErrorResource;
 801279e:	f06f 0302 	mvn.w	r3, #2
 80127a2:	617b      	str	r3, [r7, #20]
 80127a4:	e010      	b.n	80127c8 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 80127a6:	2300      	movs	r3, #0
 80127a8:	9300      	str	r3, [sp, #0]
 80127aa:	2300      	movs	r3, #0
 80127ac:	2200      	movs	r2, #0
 80127ae:	2103      	movs	r1, #3
 80127b0:	6938      	ldr	r0, [r7, #16]
 80127b2:	f002 fe7f 	bl	80154b4 <xTimerGenericCommand>
 80127b6:	4603      	mov	r3, r0
 80127b8:	2b01      	cmp	r3, #1
 80127ba:	d102      	bne.n	80127c2 <osTimerStop+0x5e>
        stat = osOK;
 80127bc:	2300      	movs	r3, #0
 80127be:	617b      	str	r3, [r7, #20]
 80127c0:	e002      	b.n	80127c8 <osTimerStop+0x64>
      } else {
        stat = osError;
 80127c2:	f04f 33ff 	mov.w	r3, #4294967295
 80127c6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80127c8:	697b      	ldr	r3, [r7, #20]
}
 80127ca:	4618      	mov	r0, r3
 80127cc:	3718      	adds	r7, #24
 80127ce:	46bd      	mov	sp, r7
 80127d0:	bd80      	pop	{r7, pc}

080127d2 <osTimerIsRunning>:

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 80127d2:	b580      	push	{r7, lr}
 80127d4:	b086      	sub	sp, #24
 80127d6:	af00      	add	r7, sp, #0
 80127d8:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80127de:	f3ef 8305 	mrs	r3, IPSR
 80127e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80127e4:	68fb      	ldr	r3, [r7, #12]
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d102      	bne.n	80127f0 <osTimerIsRunning+0x1e>
 80127ea:	693b      	ldr	r3, [r7, #16]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d102      	bne.n	80127f6 <osTimerIsRunning+0x24>
    running = 0U;
 80127f0:	2300      	movs	r3, #0
 80127f2:	617b      	str	r3, [r7, #20]
 80127f4:	e004      	b.n	8012800 <osTimerIsRunning+0x2e>
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 80127f6:	6938      	ldr	r0, [r7, #16]
 80127f8:	f003 f964 	bl	8015ac4 <xTimerIsTimerActive>
 80127fc:	4603      	mov	r3, r0
 80127fe:	617b      	str	r3, [r7, #20]
  }

  return (running);
 8012800:	697b      	ldr	r3, [r7, #20]
}
 8012802:	4618      	mov	r0, r3
 8012804:	3718      	adds	r7, #24
 8012806:	46bd      	mov	sp, r7
 8012808:	bd80      	pop	{r7, pc}
	...

0801280c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801280c:	b480      	push	{r7}
 801280e:	b085      	sub	sp, #20
 8012810:	af00      	add	r7, sp, #0
 8012812:	60f8      	str	r0, [r7, #12]
 8012814:	60b9      	str	r1, [r7, #8]
 8012816:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	4a07      	ldr	r2, [pc, #28]	; (8012838 <vApplicationGetIdleTaskMemory+0x2c>)
 801281c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801281e:	68bb      	ldr	r3, [r7, #8]
 8012820:	4a06      	ldr	r2, [pc, #24]	; (801283c <vApplicationGetIdleTaskMemory+0x30>)
 8012822:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	2280      	movs	r2, #128	; 0x80
 8012828:	601a      	str	r2, [r3, #0]
}
 801282a:	bf00      	nop
 801282c:	3714      	adds	r7, #20
 801282e:	46bd      	mov	sp, r7
 8012830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012834:	4770      	bx	lr
 8012836:	bf00      	nop
 8012838:	2000aa00 	.word	0x2000aa00
 801283c:	2000abbc 	.word	0x2000abbc

08012840 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012840:	b480      	push	{r7}
 8012842:	b085      	sub	sp, #20
 8012844:	af00      	add	r7, sp, #0
 8012846:	60f8      	str	r0, [r7, #12]
 8012848:	60b9      	str	r1, [r7, #8]
 801284a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	4a07      	ldr	r2, [pc, #28]	; (801286c <vApplicationGetTimerTaskMemory+0x2c>)
 8012850:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012852:	68bb      	ldr	r3, [r7, #8]
 8012854:	4a06      	ldr	r2, [pc, #24]	; (8012870 <vApplicationGetTimerTaskMemory+0x30>)
 8012856:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801285e:	601a      	str	r2, [r3, #0]
}
 8012860:	bf00      	nop
 8012862:	3714      	adds	r7, #20
 8012864:	46bd      	mov	sp, r7
 8012866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286a:	4770      	bx	lr
 801286c:	2000adbc 	.word	0x2000adbc
 8012870:	2000af78 	.word	0x2000af78

08012874 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b088      	sub	sp, #32
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801287c:	2300      	movs	r3, #0
 801287e:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 8012880:	4b4a      	ldr	r3, [pc, #296]	; (80129ac <pvPortMalloc+0x138>)
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d10a      	bne.n	801289e <pvPortMalloc+0x2a>
	__asm volatile
 8012888:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801288c:	f383 8811 	msr	BASEPRI, r3
 8012890:	f3bf 8f6f 	isb	sy
 8012894:	f3bf 8f4f 	dsb	sy
 8012898:	60fb      	str	r3, [r7, #12]
}
 801289a:	bf00      	nop
 801289c:	e7fe      	b.n	801289c <pvPortMalloc+0x28>

	vTaskSuspendAll();
 801289e:	f001 ff25 	bl	80146ec <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80128a2:	4b43      	ldr	r3, [pc, #268]	; (80129b0 <pvPortMalloc+0x13c>)
 80128a4:	681a      	ldr	r2, [r3, #0]
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	4013      	ands	r3, r2
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d172      	bne.n	8012994 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d00d      	beq.n	80128d0 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 80128b4:	2208      	movs	r2, #8
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	4413      	add	r3, r2
 80128ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	f003 0307 	and.w	r3, r3, #7
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d004      	beq.n	80128d0 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	f023 0307 	bic.w	r3, r3, #7
 80128cc:	3308      	adds	r3, #8
 80128ce:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d05e      	beq.n	8012994 <pvPortMalloc+0x120>
 80128d6:	4b37      	ldr	r3, [pc, #220]	; (80129b4 <pvPortMalloc+0x140>)
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	687a      	ldr	r2, [r7, #4]
 80128dc:	429a      	cmp	r2, r3
 80128de:	d859      	bhi.n	8012994 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80128e0:	4b35      	ldr	r3, [pc, #212]	; (80129b8 <pvPortMalloc+0x144>)
 80128e2:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 80128e4:	4b34      	ldr	r3, [pc, #208]	; (80129b8 <pvPortMalloc+0x144>)
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80128ea:	e004      	b.n	80128f6 <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 80128ec:	69fb      	ldr	r3, [r7, #28]
 80128ee:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 80128f0:	69fb      	ldr	r3, [r7, #28]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80128f6:	69fb      	ldr	r3, [r7, #28]
 80128f8:	685b      	ldr	r3, [r3, #4]
 80128fa:	687a      	ldr	r2, [r7, #4]
 80128fc:	429a      	cmp	r2, r3
 80128fe:	d903      	bls.n	8012908 <pvPortMalloc+0x94>
 8012900:	69fb      	ldr	r3, [r7, #28]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d1f1      	bne.n	80128ec <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012908:	4b28      	ldr	r3, [pc, #160]	; (80129ac <pvPortMalloc+0x138>)
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	69fa      	ldr	r2, [r7, #28]
 801290e:	429a      	cmp	r2, r3
 8012910:	d040      	beq.n	8012994 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012912:	69bb      	ldr	r3, [r7, #24]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	2208      	movs	r2, #8
 8012918:	4413      	add	r3, r2
 801291a:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801291c:	69fb      	ldr	r3, [r7, #28]
 801291e:	681a      	ldr	r2, [r3, #0]
 8012920:	69bb      	ldr	r3, [r7, #24]
 8012922:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012924:	69fb      	ldr	r3, [r7, #28]
 8012926:	685a      	ldr	r2, [r3, #4]
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	1ad2      	subs	r2, r2, r3
 801292c:	2308      	movs	r3, #8
 801292e:	005b      	lsls	r3, r3, #1
 8012930:	429a      	cmp	r2, r3
 8012932:	d90f      	bls.n	8012954 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012934:	69fa      	ldr	r2, [r7, #28]
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	4413      	add	r3, r2
 801293a:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801293c:	69fb      	ldr	r3, [r7, #28]
 801293e:	685a      	ldr	r2, [r3, #4]
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	1ad2      	subs	r2, r2, r3
 8012944:	693b      	ldr	r3, [r7, #16]
 8012946:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012948:	69fb      	ldr	r3, [r7, #28]
 801294a:	687a      	ldr	r2, [r7, #4]
 801294c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 801294e:	6938      	ldr	r0, [r7, #16]
 8012950:	f000 f89a 	bl	8012a88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012954:	4b17      	ldr	r3, [pc, #92]	; (80129b4 <pvPortMalloc+0x140>)
 8012956:	681a      	ldr	r2, [r3, #0]
 8012958:	69fb      	ldr	r3, [r7, #28]
 801295a:	685b      	ldr	r3, [r3, #4]
 801295c:	1ad3      	subs	r3, r2, r3
 801295e:	4a15      	ldr	r2, [pc, #84]	; (80129b4 <pvPortMalloc+0x140>)
 8012960:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012962:	4b14      	ldr	r3, [pc, #80]	; (80129b4 <pvPortMalloc+0x140>)
 8012964:	681a      	ldr	r2, [r3, #0]
 8012966:	4b15      	ldr	r3, [pc, #84]	; (80129bc <pvPortMalloc+0x148>)
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	429a      	cmp	r2, r3
 801296c:	d203      	bcs.n	8012976 <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801296e:	4b11      	ldr	r3, [pc, #68]	; (80129b4 <pvPortMalloc+0x140>)
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	4a12      	ldr	r2, [pc, #72]	; (80129bc <pvPortMalloc+0x148>)
 8012974:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012976:	69fb      	ldr	r3, [r7, #28]
 8012978:	685a      	ldr	r2, [r3, #4]
 801297a:	4b0d      	ldr	r3, [pc, #52]	; (80129b0 <pvPortMalloc+0x13c>)
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	431a      	orrs	r2, r3
 8012980:	69fb      	ldr	r3, [r7, #28]
 8012982:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012984:	69fb      	ldr	r3, [r7, #28]
 8012986:	2200      	movs	r2, #0
 8012988:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801298a:	4b0d      	ldr	r3, [pc, #52]	; (80129c0 <pvPortMalloc+0x14c>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	3301      	adds	r3, #1
 8012990:	4a0b      	ldr	r2, [pc, #44]	; (80129c0 <pvPortMalloc+0x14c>)
 8012992:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012994:	f001 fef0 	bl	8014778 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8012998:	697b      	ldr	r3, [r7, #20]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d101      	bne.n	80129a2 <pvPortMalloc+0x12e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801299e:	f7f3 fb0f 	bl	8005fc0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 80129a2:	697b      	ldr	r3, [r7, #20]
}
 80129a4:	4618      	mov	r0, r3
 80129a6:	3720      	adds	r7, #32
 80129a8:	46bd      	mov	sp, r7
 80129aa:	bd80      	pop	{r7, pc}
 80129ac:	2000cf80 	.word	0x2000cf80
 80129b0:	2000cf94 	.word	0x2000cf94
 80129b4:	2000cf84 	.word	0x2000cf84
 80129b8:	2000cf78 	.word	0x2000cf78
 80129bc:	2000cf88 	.word	0x2000cf88
 80129c0:	2000cf8c 	.word	0x2000cf8c

080129c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b086      	sub	sp, #24
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d04d      	beq.n	8012a72 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80129d6:	2308      	movs	r3, #8
 80129d8:	425b      	negs	r3, r3
 80129da:	697a      	ldr	r2, [r7, #20]
 80129dc:	4413      	add	r3, r2
 80129de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80129e0:	697b      	ldr	r3, [r7, #20]
 80129e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80129e4:	693b      	ldr	r3, [r7, #16]
 80129e6:	685a      	ldr	r2, [r3, #4]
 80129e8:	4b24      	ldr	r3, [pc, #144]	; (8012a7c <vPortFree+0xb8>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	4013      	ands	r3, r2
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d10a      	bne.n	8012a08 <vPortFree+0x44>
	__asm volatile
 80129f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80129f6:	f383 8811 	msr	BASEPRI, r3
 80129fa:	f3bf 8f6f 	isb	sy
 80129fe:	f3bf 8f4f 	dsb	sy
 8012a02:	60fb      	str	r3, [r7, #12]
}
 8012a04:	bf00      	nop
 8012a06:	e7fe      	b.n	8012a06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012a08:	693b      	ldr	r3, [r7, #16]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d00a      	beq.n	8012a26 <vPortFree+0x62>
	__asm volatile
 8012a10:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8012a14:	f383 8811 	msr	BASEPRI, r3
 8012a18:	f3bf 8f6f 	isb	sy
 8012a1c:	f3bf 8f4f 	dsb	sy
 8012a20:	60bb      	str	r3, [r7, #8]
}
 8012a22:	bf00      	nop
 8012a24:	e7fe      	b.n	8012a24 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012a26:	693b      	ldr	r3, [r7, #16]
 8012a28:	685a      	ldr	r2, [r3, #4]
 8012a2a:	4b14      	ldr	r3, [pc, #80]	; (8012a7c <vPortFree+0xb8>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	4013      	ands	r3, r2
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d01e      	beq.n	8012a72 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012a34:	693b      	ldr	r3, [r7, #16]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d11a      	bne.n	8012a72 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012a3c:	693b      	ldr	r3, [r7, #16]
 8012a3e:	685a      	ldr	r2, [r3, #4]
 8012a40:	4b0e      	ldr	r3, [pc, #56]	; (8012a7c <vPortFree+0xb8>)
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	43db      	mvns	r3, r3
 8012a46:	401a      	ands	r2, r3
 8012a48:	693b      	ldr	r3, [r7, #16]
 8012a4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012a4c:	f001 fe4e 	bl	80146ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012a50:	693b      	ldr	r3, [r7, #16]
 8012a52:	685a      	ldr	r2, [r3, #4]
 8012a54:	4b0a      	ldr	r3, [pc, #40]	; (8012a80 <vPortFree+0xbc>)
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	4413      	add	r3, r2
 8012a5a:	4a09      	ldr	r2, [pc, #36]	; (8012a80 <vPortFree+0xbc>)
 8012a5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012a5e:	6938      	ldr	r0, [r7, #16]
 8012a60:	f000 f812 	bl	8012a88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012a64:	4b07      	ldr	r3, [pc, #28]	; (8012a84 <vPortFree+0xc0>)
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	3301      	adds	r3, #1
 8012a6a:	4a06      	ldr	r2, [pc, #24]	; (8012a84 <vPortFree+0xc0>)
 8012a6c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012a6e:	f001 fe83 	bl	8014778 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012a72:	bf00      	nop
 8012a74:	3718      	adds	r7, #24
 8012a76:	46bd      	mov	sp, r7
 8012a78:	bd80      	pop	{r7, pc}
 8012a7a:	bf00      	nop
 8012a7c:	2000cf94 	.word	0x2000cf94
 8012a80:	2000cf84 	.word	0x2000cf84
 8012a84:	2000cf90 	.word	0x2000cf90

08012a88 <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012a88:	b480      	push	{r7}
 8012a8a:	b085      	sub	sp, #20
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012a90:	4b28      	ldr	r3, [pc, #160]	; (8012b34 <prvInsertBlockIntoFreeList+0xac>)
 8012a92:	60fb      	str	r3, [r7, #12]
 8012a94:	e002      	b.n	8012a9c <prvInsertBlockIntoFreeList+0x14>
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	60fb      	str	r3, [r7, #12]
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	687a      	ldr	r2, [r7, #4]
 8012aa2:	429a      	cmp	r2, r3
 8012aa4:	d8f7      	bhi.n	8012a96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	685b      	ldr	r3, [r3, #4]
 8012aae:	68ba      	ldr	r2, [r7, #8]
 8012ab0:	4413      	add	r3, r2
 8012ab2:	687a      	ldr	r2, [r7, #4]
 8012ab4:	429a      	cmp	r2, r3
 8012ab6:	d108      	bne.n	8012aca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	685a      	ldr	r2, [r3, #4]
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	685b      	ldr	r3, [r3, #4]
 8012ac0:	441a      	add	r2, r3
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	685b      	ldr	r3, [r3, #4]
 8012ad2:	68ba      	ldr	r2, [r7, #8]
 8012ad4:	441a      	add	r2, r3
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	429a      	cmp	r2, r3
 8012adc:	d118      	bne.n	8012b10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	681a      	ldr	r2, [r3, #0]
 8012ae2:	4b15      	ldr	r3, [pc, #84]	; (8012b38 <prvInsertBlockIntoFreeList+0xb0>)
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	d00d      	beq.n	8012b06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	685a      	ldr	r2, [r3, #4]
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	685b      	ldr	r3, [r3, #4]
 8012af4:	441a      	add	r2, r3
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	681a      	ldr	r2, [r3, #0]
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	601a      	str	r2, [r3, #0]
 8012b04:	e008      	b.n	8012b18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012b06:	4b0c      	ldr	r3, [pc, #48]	; (8012b38 <prvInsertBlockIntoFreeList+0xb0>)
 8012b08:	681a      	ldr	r2, [r3, #0]
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	601a      	str	r2, [r3, #0]
 8012b0e:	e003      	b.n	8012b18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	681a      	ldr	r2, [r3, #0]
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012b18:	68fa      	ldr	r2, [r7, #12]
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	429a      	cmp	r2, r3
 8012b1e:	d002      	beq.n	8012b26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	687a      	ldr	r2, [r7, #4]
 8012b24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012b26:	bf00      	nop
 8012b28:	3714      	adds	r7, #20
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b30:	4770      	bx	lr
 8012b32:	bf00      	nop
 8012b34:	2000cf78 	.word	0x2000cf78
 8012b38:	2000cf80 	.word	0x2000cf80

08012b3c <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 8012b3c:	b480      	push	{r7}
 8012b3e:	b08f      	sub	sp, #60	; 0x3c
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 8012b44:	2300      	movs	r3, #0
 8012b46:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 8012b48:	2300      	movs	r3, #0
 8012b4a:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 8012b50:	4b5a      	ldr	r3, [pc, #360]	; (8012cbc <vPortDefineHeapRegions+0x180>)
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d00a      	beq.n	8012b6e <vPortDefineHeapRegions+0x32>
	__asm volatile
 8012b58:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8012b5c:	f383 8811 	msr	BASEPRI, r3
 8012b60:	f3bf 8f6f 	isb	sy
 8012b64:	f3bf 8f4f 	dsb	sy
 8012b68:	617b      	str	r3, [r7, #20]
}
 8012b6a:	bf00      	nop
 8012b6c:	e7fe      	b.n	8012b6c <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8012b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b70:	00db      	lsls	r3, r3, #3
 8012b72:	687a      	ldr	r2, [r7, #4]
 8012b74:	4413      	add	r3, r2
 8012b76:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 8012b78:	e07d      	b.n	8012c76 <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 8012b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b7c:	685b      	ldr	r3, [r3, #4]
 8012b7e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 8012b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b88:	f003 0307 	and.w	r3, r3, #7
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d00e      	beq.n	8012bae <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 8012b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b92:	3307      	adds	r3, #7
 8012b94:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8012b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b98:	f023 0307 	bic.w	r3, r3, #7
 8012b9c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 8012b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	461a      	mov	r2, r3
 8012ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ba6:	1ad3      	subs	r3, r2, r3
 8012ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012baa:	4413      	add	r3, r2
 8012bac:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 8012bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bb0:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 8012bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d106      	bne.n	8012bc6 <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 8012bb8:	69fb      	ldr	r3, [r7, #28]
 8012bba:	4a41      	ldr	r2, [pc, #260]	; (8012cc0 <vPortDefineHeapRegions+0x184>)
 8012bbc:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 8012bbe:	4b40      	ldr	r3, [pc, #256]	; (8012cc0 <vPortDefineHeapRegions+0x184>)
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	605a      	str	r2, [r3, #4]
 8012bc4:	e01f      	b.n	8012c06 <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 8012bc6:	4b3d      	ldr	r3, [pc, #244]	; (8012cbc <vPortDefineHeapRegions+0x180>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d10a      	bne.n	8012be4 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 8012bce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8012bd2:	f383 8811 	msr	BASEPRI, r3
 8012bd6:	f3bf 8f6f 	isb	sy
 8012bda:	f3bf 8f4f 	dsb	sy
 8012bde:	613b      	str	r3, [r7, #16]
}
 8012be0:	bf00      	nop
 8012be2:	e7fe      	b.n	8012be2 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 8012be4:	4b35      	ldr	r3, [pc, #212]	; (8012cbc <vPortDefineHeapRegions+0x180>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	461a      	mov	r2, r3
 8012bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bec:	4293      	cmp	r3, r2
 8012bee:	d80a      	bhi.n	8012c06 <vPortDefineHeapRegions+0xca>
	__asm volatile
 8012bf0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8012bf4:	f383 8811 	msr	BASEPRI, r3
 8012bf8:	f3bf 8f6f 	isb	sy
 8012bfc:	f3bf 8f4f 	dsb	sy
 8012c00:	60fb      	str	r3, [r7, #12]
}
 8012c02:	bf00      	nop
 8012c04:	e7fe      	b.n	8012c04 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 8012c06:	4b2d      	ldr	r3, [pc, #180]	; (8012cbc <vPortDefineHeapRegions+0x180>)
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 8012c0c:	69fa      	ldr	r2, [r7, #28]
 8012c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c10:	4413      	add	r3, r2
 8012c12:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 8012c14:	2208      	movs	r2, #8
 8012c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c18:	1a9b      	subs	r3, r3, r2
 8012c1a:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8012c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c1e:	f023 0307 	bic.w	r3, r3, #7
 8012c22:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 8012c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c26:	4a25      	ldr	r2, [pc, #148]	; (8012cbc <vPortDefineHeapRegions+0x180>)
 8012c28:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 8012c2a:	4b24      	ldr	r3, [pc, #144]	; (8012cbc <vPortDefineHeapRegions+0x180>)
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	2200      	movs	r2, #0
 8012c30:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 8012c32:	4b22      	ldr	r3, [pc, #136]	; (8012cbc <vPortDefineHeapRegions+0x180>)
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	2200      	movs	r2, #0
 8012c38:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 8012c3a:	69fb      	ldr	r3, [r7, #28]
 8012c3c:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 8012c3e:	6a3b      	ldr	r3, [r7, #32]
 8012c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c42:	1ad2      	subs	r2, r2, r3
 8012c44:	6a3b      	ldr	r3, [r7, #32]
 8012c46:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 8012c48:	4b1c      	ldr	r3, [pc, #112]	; (8012cbc <vPortDefineHeapRegions+0x180>)
 8012c4a:	681a      	ldr	r2, [r3, #0]
 8012c4c:	6a3b      	ldr	r3, [r7, #32]
 8012c4e:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 8012c50:	69bb      	ldr	r3, [r7, #24]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d002      	beq.n	8012c5c <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 8012c56:	69bb      	ldr	r3, [r7, #24]
 8012c58:	6a3a      	ldr	r2, [r7, #32]
 8012c5a:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8012c5c:	6a3b      	ldr	r3, [r7, #32]
 8012c5e:	685b      	ldr	r3, [r3, #4]
 8012c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c62:	4413      	add	r3, r2
 8012c64:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 8012c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c68:	3301      	adds	r3, #1
 8012c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8012c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c6e:	00db      	lsls	r3, r3, #3
 8012c70:	687a      	ldr	r2, [r7, #4]
 8012c72:	4413      	add	r3, r2
 8012c74:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 8012c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c78:	685b      	ldr	r3, [r3, #4]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	f47f af7d 	bne.w	8012b7a <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 8012c80:	4a10      	ldr	r2, [pc, #64]	; (8012cc4 <vPortDefineHeapRegions+0x188>)
 8012c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c84:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 8012c86:	4a10      	ldr	r2, [pc, #64]	; (8012cc8 <vPortDefineHeapRegions+0x18c>)
 8012c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c8a:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 8012c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d10a      	bne.n	8012ca8 <vPortDefineHeapRegions+0x16c>
	__asm volatile
 8012c92:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8012c96:	f383 8811 	msr	BASEPRI, r3
 8012c9a:	f3bf 8f6f 	isb	sy
 8012c9e:	f3bf 8f4f 	dsb	sy
 8012ca2:	60bb      	str	r3, [r7, #8]
}
 8012ca4:	bf00      	nop
 8012ca6:	e7fe      	b.n	8012ca6 <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012ca8:	4b08      	ldr	r3, [pc, #32]	; (8012ccc <vPortDefineHeapRegions+0x190>)
 8012caa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012cae:	601a      	str	r2, [r3, #0]
}
 8012cb0:	bf00      	nop
 8012cb2:	373c      	adds	r7, #60	; 0x3c
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cba:	4770      	bx	lr
 8012cbc:	2000cf80 	.word	0x2000cf80
 8012cc0:	2000cf78 	.word	0x2000cf78
 8012cc4:	2000cf88 	.word	0x2000cf88
 8012cc8:	2000cf84 	.word	0x2000cf84
 8012ccc:	2000cf94 	.word	0x2000cf94

08012cd0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012cd0:	b480      	push	{r7}
 8012cd2:	b083      	sub	sp, #12
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	f103 0208 	add.w	r2, r3, #8
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8012ce8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	f103 0208 	add.w	r2, r3, #8
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	f103 0208 	add.w	r2, r3, #8
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	2200      	movs	r2, #0
 8012d02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012d04:	bf00      	nop
 8012d06:	370c      	adds	r7, #12
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0e:	4770      	bx	lr

08012d10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012d10:	b480      	push	{r7}
 8012d12:	b083      	sub	sp, #12
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012d1e:	bf00      	nop
 8012d20:	370c      	adds	r7, #12
 8012d22:	46bd      	mov	sp, r7
 8012d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d28:	4770      	bx	lr

08012d2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012d2a:	b480      	push	{r7}
 8012d2c:	b085      	sub	sp, #20
 8012d2e:	af00      	add	r7, sp, #0
 8012d30:	6078      	str	r0, [r7, #4]
 8012d32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	685b      	ldr	r3, [r3, #4]
 8012d38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012d3a:	683b      	ldr	r3, [r7, #0]
 8012d3c:	68fa      	ldr	r2, [r7, #12]
 8012d3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	689a      	ldr	r2, [r3, #8]
 8012d44:	683b      	ldr	r3, [r7, #0]
 8012d46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	689b      	ldr	r3, [r3, #8]
 8012d4c:	683a      	ldr	r2, [r7, #0]
 8012d4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	683a      	ldr	r2, [r7, #0]
 8012d54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012d56:	683b      	ldr	r3, [r7, #0]
 8012d58:	687a      	ldr	r2, [r7, #4]
 8012d5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	1c5a      	adds	r2, r3, #1
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	601a      	str	r2, [r3, #0]
}
 8012d66:	bf00      	nop
 8012d68:	3714      	adds	r7, #20
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d70:	4770      	bx	lr

08012d72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012d72:	b480      	push	{r7}
 8012d74:	b085      	sub	sp, #20
 8012d76:	af00      	add	r7, sp, #0
 8012d78:	6078      	str	r0, [r7, #4]
 8012d7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012d7c:	683b      	ldr	r3, [r7, #0]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012d82:	68bb      	ldr	r3, [r7, #8]
 8012d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d88:	d103      	bne.n	8012d92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	691b      	ldr	r3, [r3, #16]
 8012d8e:	60fb      	str	r3, [r7, #12]
 8012d90:	e00c      	b.n	8012dac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	3308      	adds	r3, #8
 8012d96:	60fb      	str	r3, [r7, #12]
 8012d98:	e002      	b.n	8012da0 <vListInsert+0x2e>
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	685b      	ldr	r3, [r3, #4]
 8012d9e:	60fb      	str	r3, [r7, #12]
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	685b      	ldr	r3, [r3, #4]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	68ba      	ldr	r2, [r7, #8]
 8012da8:	429a      	cmp	r2, r3
 8012daa:	d2f6      	bcs.n	8012d9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	685a      	ldr	r2, [r3, #4]
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012db4:	683b      	ldr	r3, [r7, #0]
 8012db6:	685b      	ldr	r3, [r3, #4]
 8012db8:	683a      	ldr	r2, [r7, #0]
 8012dba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012dbc:	683b      	ldr	r3, [r7, #0]
 8012dbe:	68fa      	ldr	r2, [r7, #12]
 8012dc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	683a      	ldr	r2, [r7, #0]
 8012dc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	687a      	ldr	r2, [r7, #4]
 8012dcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	1c5a      	adds	r2, r3, #1
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	601a      	str	r2, [r3, #0]
}
 8012dd8:	bf00      	nop
 8012dda:	3714      	adds	r7, #20
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de2:	4770      	bx	lr

08012de4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012de4:	b480      	push	{r7}
 8012de6:	b085      	sub	sp, #20
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	691b      	ldr	r3, [r3, #16]
 8012df0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	685b      	ldr	r3, [r3, #4]
 8012df6:	687a      	ldr	r2, [r7, #4]
 8012df8:	6892      	ldr	r2, [r2, #8]
 8012dfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	689b      	ldr	r3, [r3, #8]
 8012e00:	687a      	ldr	r2, [r7, #4]
 8012e02:	6852      	ldr	r2, [r2, #4]
 8012e04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	685b      	ldr	r3, [r3, #4]
 8012e0a:	687a      	ldr	r2, [r7, #4]
 8012e0c:	429a      	cmp	r2, r3
 8012e0e:	d103      	bne.n	8012e18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	689a      	ldr	r2, [r3, #8]
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	1e5a      	subs	r2, r3, #1
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	681b      	ldr	r3, [r3, #0]
}
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	3714      	adds	r7, #20
 8012e30:	46bd      	mov	sp, r7
 8012e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e36:	4770      	bx	lr

08012e38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012e38:	b480      	push	{r7}
 8012e3a:	b085      	sub	sp, #20
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	60f8      	str	r0, [r7, #12]
 8012e40:	60b9      	str	r1, [r7, #8]
 8012e42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	3b04      	subs	r3, #4
 8012e48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012e50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	3b04      	subs	r3, #4
 8012e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012e58:	68bb      	ldr	r3, [r7, #8]
 8012e5a:	f023 0201 	bic.w	r2, r3, #1
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	3b04      	subs	r3, #4
 8012e66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012e68:	4a0c      	ldr	r2, [pc, #48]	; (8012e9c <pxPortInitialiseStack+0x64>)
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	3b14      	subs	r3, #20
 8012e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012e74:	687a      	ldr	r2, [r7, #4]
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	3b04      	subs	r3, #4
 8012e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	f06f 0202 	mvn.w	r2, #2
 8012e86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	3b20      	subs	r3, #32
 8012e8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012e8e:	68fb      	ldr	r3, [r7, #12]
}
 8012e90:	4618      	mov	r0, r3
 8012e92:	3714      	adds	r7, #20
 8012e94:	46bd      	mov	sp, r7
 8012e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9a:	4770      	bx	lr
 8012e9c:	08012ea1 	.word	0x08012ea1

08012ea0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012ea0:	b480      	push	{r7}
 8012ea2:	b085      	sub	sp, #20
 8012ea4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012eaa:	4b12      	ldr	r3, [pc, #72]	; (8012ef4 <prvTaskExitError+0x54>)
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012eb2:	d00a      	beq.n	8012eca <prvTaskExitError+0x2a>
	__asm volatile
 8012eb4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8012eb8:	f383 8811 	msr	BASEPRI, r3
 8012ebc:	f3bf 8f6f 	isb	sy
 8012ec0:	f3bf 8f4f 	dsb	sy
 8012ec4:	60fb      	str	r3, [r7, #12]
}
 8012ec6:	bf00      	nop
 8012ec8:	e7fe      	b.n	8012ec8 <prvTaskExitError+0x28>
	__asm volatile
 8012eca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8012ece:	f383 8811 	msr	BASEPRI, r3
 8012ed2:	f3bf 8f6f 	isb	sy
 8012ed6:	f3bf 8f4f 	dsb	sy
 8012eda:	60bb      	str	r3, [r7, #8]
}
 8012edc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012ede:	bf00      	nop
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d0fc      	beq.n	8012ee0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012ee6:	bf00      	nop
 8012ee8:	bf00      	nop
 8012eea:	3714      	adds	r7, #20
 8012eec:	46bd      	mov	sp, r7
 8012eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef2:	4770      	bx	lr
 8012ef4:	20000068 	.word	0x20000068
	...

08012f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012f00:	4b07      	ldr	r3, [pc, #28]	; (8012f20 <pxCurrentTCBConst2>)
 8012f02:	6819      	ldr	r1, [r3, #0]
 8012f04:	6808      	ldr	r0, [r1, #0]
 8012f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f0a:	f380 8809 	msr	PSP, r0
 8012f0e:	f3bf 8f6f 	isb	sy
 8012f12:	f04f 0000 	mov.w	r0, #0
 8012f16:	f380 8811 	msr	BASEPRI, r0
 8012f1a:	4770      	bx	lr
 8012f1c:	f3af 8000 	nop.w

08012f20 <pxCurrentTCBConst2>:
 8012f20:	2000cfec 	.word	0x2000cfec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012f24:	bf00      	nop
 8012f26:	bf00      	nop

08012f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012f28:	4808      	ldr	r0, [pc, #32]	; (8012f4c <prvPortStartFirstTask+0x24>)
 8012f2a:	6800      	ldr	r0, [r0, #0]
 8012f2c:	6800      	ldr	r0, [r0, #0]
 8012f2e:	f380 8808 	msr	MSP, r0
 8012f32:	f04f 0000 	mov.w	r0, #0
 8012f36:	f380 8814 	msr	CONTROL, r0
 8012f3a:	b662      	cpsie	i
 8012f3c:	b661      	cpsie	f
 8012f3e:	f3bf 8f4f 	dsb	sy
 8012f42:	f3bf 8f6f 	isb	sy
 8012f46:	df00      	svc	0
 8012f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012f4a:	bf00      	nop
 8012f4c:	e000ed08 	.word	0xe000ed08

08012f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b086      	sub	sp, #24
 8012f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012f56:	4b46      	ldr	r3, [pc, #280]	; (8013070 <xPortStartScheduler+0x120>)
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	4a46      	ldr	r2, [pc, #280]	; (8013074 <xPortStartScheduler+0x124>)
 8012f5c:	4293      	cmp	r3, r2
 8012f5e:	d10a      	bne.n	8012f76 <xPortStartScheduler+0x26>
	__asm volatile
 8012f60:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8012f64:	f383 8811 	msr	BASEPRI, r3
 8012f68:	f3bf 8f6f 	isb	sy
 8012f6c:	f3bf 8f4f 	dsb	sy
 8012f70:	613b      	str	r3, [r7, #16]
}
 8012f72:	bf00      	nop
 8012f74:	e7fe      	b.n	8012f74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012f76:	4b3e      	ldr	r3, [pc, #248]	; (8013070 <xPortStartScheduler+0x120>)
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	4a3f      	ldr	r2, [pc, #252]	; (8013078 <xPortStartScheduler+0x128>)
 8012f7c:	4293      	cmp	r3, r2
 8012f7e:	d10a      	bne.n	8012f96 <xPortStartScheduler+0x46>
	__asm volatile
 8012f80:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8012f84:	f383 8811 	msr	BASEPRI, r3
 8012f88:	f3bf 8f6f 	isb	sy
 8012f8c:	f3bf 8f4f 	dsb	sy
 8012f90:	60fb      	str	r3, [r7, #12]
}
 8012f92:	bf00      	nop
 8012f94:	e7fe      	b.n	8012f94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012f96:	4b39      	ldr	r3, [pc, #228]	; (801307c <xPortStartScheduler+0x12c>)
 8012f98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012f9a:	697b      	ldr	r3, [r7, #20]
 8012f9c:	781b      	ldrb	r3, [r3, #0]
 8012f9e:	b2db      	uxtb	r3, r3
 8012fa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012fa2:	697b      	ldr	r3, [r7, #20]
 8012fa4:	22ff      	movs	r2, #255	; 0xff
 8012fa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012fa8:	697b      	ldr	r3, [r7, #20]
 8012faa:	781b      	ldrb	r3, [r3, #0]
 8012fac:	b2db      	uxtb	r3, r3
 8012fae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012fb0:	78fb      	ldrb	r3, [r7, #3]
 8012fb2:	b2db      	uxtb	r3, r3
 8012fb4:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 8012fb8:	b2da      	uxtb	r2, r3
 8012fba:	4b31      	ldr	r3, [pc, #196]	; (8013080 <xPortStartScheduler+0x130>)
 8012fbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012fbe:	4b31      	ldr	r3, [pc, #196]	; (8013084 <xPortStartScheduler+0x134>)
 8012fc0:	2207      	movs	r2, #7
 8012fc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012fc4:	e009      	b.n	8012fda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012fc6:	4b2f      	ldr	r3, [pc, #188]	; (8013084 <xPortStartScheduler+0x134>)
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	3b01      	subs	r3, #1
 8012fcc:	4a2d      	ldr	r2, [pc, #180]	; (8013084 <xPortStartScheduler+0x134>)
 8012fce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012fd0:	78fb      	ldrb	r3, [r7, #3]
 8012fd2:	b2db      	uxtb	r3, r3
 8012fd4:	005b      	lsls	r3, r3, #1
 8012fd6:	b2db      	uxtb	r3, r3
 8012fd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012fda:	78fb      	ldrb	r3, [r7, #3]
 8012fdc:	b2db      	uxtb	r3, r3
 8012fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012fe2:	2b80      	cmp	r3, #128	; 0x80
 8012fe4:	d0ef      	beq.n	8012fc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012fe6:	4b27      	ldr	r3, [pc, #156]	; (8013084 <xPortStartScheduler+0x134>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	f1c3 0307 	rsb	r3, r3, #7
 8012fee:	2b04      	cmp	r3, #4
 8012ff0:	d00a      	beq.n	8013008 <xPortStartScheduler+0xb8>
	__asm volatile
 8012ff2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8012ff6:	f383 8811 	msr	BASEPRI, r3
 8012ffa:	f3bf 8f6f 	isb	sy
 8012ffe:	f3bf 8f4f 	dsb	sy
 8013002:	60bb      	str	r3, [r7, #8]
}
 8013004:	bf00      	nop
 8013006:	e7fe      	b.n	8013006 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013008:	4b1e      	ldr	r3, [pc, #120]	; (8013084 <xPortStartScheduler+0x134>)
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	021b      	lsls	r3, r3, #8
 801300e:	4a1d      	ldr	r2, [pc, #116]	; (8013084 <xPortStartScheduler+0x134>)
 8013010:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013012:	4b1c      	ldr	r3, [pc, #112]	; (8013084 <xPortStartScheduler+0x134>)
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801301a:	4a1a      	ldr	r2, [pc, #104]	; (8013084 <xPortStartScheduler+0x134>)
 801301c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	b2da      	uxtb	r2, r3
 8013022:	697b      	ldr	r3, [r7, #20]
 8013024:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013026:	4b18      	ldr	r3, [pc, #96]	; (8013088 <xPortStartScheduler+0x138>)
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	4a17      	ldr	r2, [pc, #92]	; (8013088 <xPortStartScheduler+0x138>)
 801302c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013030:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013032:	4b15      	ldr	r3, [pc, #84]	; (8013088 <xPortStartScheduler+0x138>)
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	4a14      	ldr	r2, [pc, #80]	; (8013088 <xPortStartScheduler+0x138>)
 8013038:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801303c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801303e:	f000 f9a9 	bl	8013394 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013042:	4b12      	ldr	r3, [pc, #72]	; (801308c <xPortStartScheduler+0x13c>)
 8013044:	2200      	movs	r2, #0
 8013046:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013048:	f000 f9e0 	bl	801340c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801304c:	4b10      	ldr	r3, [pc, #64]	; (8013090 <xPortStartScheduler+0x140>)
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	4a0f      	ldr	r2, [pc, #60]	; (8013090 <xPortStartScheduler+0x140>)
 8013052:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013056:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013058:	f7ff ff66 	bl	8012f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801305c:	f001 fd36 	bl	8014acc <vTaskSwitchContext>
	prvTaskExitError();
 8013060:	f7ff ff1e 	bl	8012ea0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013064:	2300      	movs	r3, #0
}
 8013066:	4618      	mov	r0, r3
 8013068:	3718      	adds	r7, #24
 801306a:	46bd      	mov	sp, r7
 801306c:	bd80      	pop	{r7, pc}
 801306e:	bf00      	nop
 8013070:	e000ed00 	.word	0xe000ed00
 8013074:	410fc271 	.word	0x410fc271
 8013078:	410fc270 	.word	0x410fc270
 801307c:	e000e400 	.word	0xe000e400
 8013080:	2000cfa4 	.word	0x2000cfa4
 8013084:	2000cfa8 	.word	0x2000cfa8
 8013088:	e000ed20 	.word	0xe000ed20
 801308c:	20000068 	.word	0x20000068
 8013090:	e000ef34 	.word	0xe000ef34

08013094 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013094:	b480      	push	{r7}
 8013096:	b083      	sub	sp, #12
 8013098:	af00      	add	r7, sp, #0
	__asm volatile
 801309a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801309e:	f383 8811 	msr	BASEPRI, r3
 80130a2:	f3bf 8f6f 	isb	sy
 80130a6:	f3bf 8f4f 	dsb	sy
 80130aa:	607b      	str	r3, [r7, #4]
}
 80130ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80130ae:	4b0f      	ldr	r3, [pc, #60]	; (80130ec <vPortEnterCritical+0x58>)
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	3301      	adds	r3, #1
 80130b4:	4a0d      	ldr	r2, [pc, #52]	; (80130ec <vPortEnterCritical+0x58>)
 80130b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80130b8:	4b0c      	ldr	r3, [pc, #48]	; (80130ec <vPortEnterCritical+0x58>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	2b01      	cmp	r3, #1
 80130be:	d10f      	bne.n	80130e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80130c0:	4b0b      	ldr	r3, [pc, #44]	; (80130f0 <vPortEnterCritical+0x5c>)
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	b2db      	uxtb	r3, r3
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d00a      	beq.n	80130e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80130ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80130ce:	f383 8811 	msr	BASEPRI, r3
 80130d2:	f3bf 8f6f 	isb	sy
 80130d6:	f3bf 8f4f 	dsb	sy
 80130da:	603b      	str	r3, [r7, #0]
}
 80130dc:	bf00      	nop
 80130de:	e7fe      	b.n	80130de <vPortEnterCritical+0x4a>
	}
}
 80130e0:	bf00      	nop
 80130e2:	370c      	adds	r7, #12
 80130e4:	46bd      	mov	sp, r7
 80130e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ea:	4770      	bx	lr
 80130ec:	20000068 	.word	0x20000068
 80130f0:	e000ed04 	.word	0xe000ed04

080130f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80130f4:	b480      	push	{r7}
 80130f6:	b083      	sub	sp, #12
 80130f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80130fa:	4b12      	ldr	r3, [pc, #72]	; (8013144 <vPortExitCritical+0x50>)
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d10a      	bne.n	8013118 <vPortExitCritical+0x24>
	__asm volatile
 8013102:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8013106:	f383 8811 	msr	BASEPRI, r3
 801310a:	f3bf 8f6f 	isb	sy
 801310e:	f3bf 8f4f 	dsb	sy
 8013112:	607b      	str	r3, [r7, #4]
}
 8013114:	bf00      	nop
 8013116:	e7fe      	b.n	8013116 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013118:	4b0a      	ldr	r3, [pc, #40]	; (8013144 <vPortExitCritical+0x50>)
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	3b01      	subs	r3, #1
 801311e:	4a09      	ldr	r2, [pc, #36]	; (8013144 <vPortExitCritical+0x50>)
 8013120:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013122:	4b08      	ldr	r3, [pc, #32]	; (8013144 <vPortExitCritical+0x50>)
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d105      	bne.n	8013136 <vPortExitCritical+0x42>
 801312a:	2300      	movs	r3, #0
 801312c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801312e:	683b      	ldr	r3, [r7, #0]
 8013130:	f383 8811 	msr	BASEPRI, r3
}
 8013134:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013136:	bf00      	nop
 8013138:	370c      	adds	r7, #12
 801313a:	46bd      	mov	sp, r7
 801313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013140:	4770      	bx	lr
 8013142:	bf00      	nop
 8013144:	20000068 	.word	0x20000068
	...

08013150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013150:	f3ef 8009 	mrs	r0, PSP
 8013154:	f3bf 8f6f 	isb	sy
 8013158:	4b15      	ldr	r3, [pc, #84]	; (80131b0 <pxCurrentTCBConst>)
 801315a:	681a      	ldr	r2, [r3, #0]
 801315c:	f01e 0f10 	tst.w	lr, #16
 8013160:	bf08      	it	eq
 8013162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801316a:	6010      	str	r0, [r2, #0]
 801316c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013170:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 8013174:	f380 8811 	msr	BASEPRI, r0
 8013178:	f3bf 8f4f 	dsb	sy
 801317c:	f3bf 8f6f 	isb	sy
 8013180:	f001 fca4 	bl	8014acc <vTaskSwitchContext>
 8013184:	f04f 0000 	mov.w	r0, #0
 8013188:	f380 8811 	msr	BASEPRI, r0
 801318c:	bc09      	pop	{r0, r3}
 801318e:	6819      	ldr	r1, [r3, #0]
 8013190:	6808      	ldr	r0, [r1, #0]
 8013192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013196:	f01e 0f10 	tst.w	lr, #16
 801319a:	bf08      	it	eq
 801319c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80131a0:	f380 8809 	msr	PSP, r0
 80131a4:	f3bf 8f6f 	isb	sy
 80131a8:	4770      	bx	lr
 80131aa:	bf00      	nop
 80131ac:	f3af 8000 	nop.w

080131b0 <pxCurrentTCBConst>:
 80131b0:	2000cfec 	.word	0x2000cfec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80131b4:	bf00      	nop
 80131b6:	bf00      	nop

080131b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b082      	sub	sp, #8
 80131bc:	af00      	add	r7, sp, #0
	__asm volatile
 80131be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80131c2:	f383 8811 	msr	BASEPRI, r3
 80131c6:	f3bf 8f6f 	isb	sy
 80131ca:	f3bf 8f4f 	dsb	sy
 80131ce:	607b      	str	r3, [r7, #4]
}
 80131d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80131d2:	f001 fbb9 	bl	8014948 <xTaskIncrementTick>
 80131d6:	4603      	mov	r3, r0
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d003      	beq.n	80131e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80131dc:	4b06      	ldr	r3, [pc, #24]	; (80131f8 <xPortSysTickHandler+0x40>)
 80131de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131e2:	601a      	str	r2, [r3, #0]
 80131e4:	2300      	movs	r3, #0
 80131e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80131e8:	683b      	ldr	r3, [r7, #0]
 80131ea:	f383 8811 	msr	BASEPRI, r3
}
 80131ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80131f0:	bf00      	nop
 80131f2:	3708      	adds	r7, #8
 80131f4:	46bd      	mov	sp, r7
 80131f6:	bd80      	pop	{r7, pc}
 80131f8:	e000ed04 	.word	0xe000ed04

080131fc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b088      	sub	sp, #32
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8013204:	4b5d      	ldr	r3, [pc, #372]	; (801337c <vPortSuppressTicksAndSleep+0x180>)
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	687a      	ldr	r2, [r7, #4]
 801320a:	429a      	cmp	r2, r3
 801320c:	d902      	bls.n	8013214 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 801320e:	4b5b      	ldr	r3, [pc, #364]	; (801337c <vPortSuppressTicksAndSleep+0x180>)
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8013214:	4b5a      	ldr	r3, [pc, #360]	; (8013380 <vPortSuppressTicksAndSleep+0x184>)
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	4a59      	ldr	r2, [pc, #356]	; (8013380 <vPortSuppressTicksAndSleep+0x184>)
 801321a:	f023 0301 	bic.w	r3, r3, #1
 801321e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8013220:	4b58      	ldr	r3, [pc, #352]	; (8013384 <vPortSuppressTicksAndSleep+0x188>)
 8013222:	681a      	ldr	r2, [r3, #0]
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	3b01      	subs	r3, #1
 8013228:	4957      	ldr	r1, [pc, #348]	; (8013388 <vPortSuppressTicksAndSleep+0x18c>)
 801322a:	6809      	ldr	r1, [r1, #0]
 801322c:	fb01 f303 	mul.w	r3, r1, r3
 8013230:	4413      	add	r3, r2
 8013232:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 8013234:	4b55      	ldr	r3, [pc, #340]	; (801338c <vPortSuppressTicksAndSleep+0x190>)
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	69fa      	ldr	r2, [r7, #28]
 801323a:	429a      	cmp	r2, r3
 801323c:	d904      	bls.n	8013248 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 801323e:	4b53      	ldr	r3, [pc, #332]	; (801338c <vPortSuppressTicksAndSleep+0x190>)
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	69fa      	ldr	r2, [r7, #28]
 8013244:	1ad3      	subs	r3, r2, r3
 8013246:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8013248:	b672      	cpsid	i
		__asm volatile( "dsb" );
 801324a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 801324e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8013252:	f001 fe6f 	bl	8014f34 <eTaskConfirmSleepModeStatus>
 8013256:	4603      	mov	r3, r0
 8013258:	2b00      	cmp	r3, #0
 801325a:	d110      	bne.n	801327e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 801325c:	4b49      	ldr	r3, [pc, #292]	; (8013384 <vPortSuppressTicksAndSleep+0x188>)
 801325e:	4a4c      	ldr	r2, [pc, #304]	; (8013390 <vPortSuppressTicksAndSleep+0x194>)
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8013264:	4b46      	ldr	r3, [pc, #280]	; (8013380 <vPortSuppressTicksAndSleep+0x184>)
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	4a45      	ldr	r2, [pc, #276]	; (8013380 <vPortSuppressTicksAndSleep+0x184>)
 801326a:	f043 0301 	orr.w	r3, r3, #1
 801326e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8013270:	4b45      	ldr	r3, [pc, #276]	; (8013388 <vPortSuppressTicksAndSleep+0x18c>)
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	4a46      	ldr	r2, [pc, #280]	; (8013390 <vPortSuppressTicksAndSleep+0x194>)
 8013276:	3b01      	subs	r3, #1
 8013278:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 801327a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 801327c:	e079      	b.n	8013372 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 801327e:	4a44      	ldr	r2, [pc, #272]	; (8013390 <vPortSuppressTicksAndSleep+0x194>)
 8013280:	69fb      	ldr	r3, [r7, #28]
 8013282:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013284:	4b3f      	ldr	r3, [pc, #252]	; (8013384 <vPortSuppressTicksAndSleep+0x188>)
 8013286:	2200      	movs	r2, #0
 8013288:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 801328a:	4b3d      	ldr	r3, [pc, #244]	; (8013380 <vPortSuppressTicksAndSleep+0x184>)
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	4a3c      	ldr	r2, [pc, #240]	; (8013380 <vPortSuppressTicksAndSleep+0x184>)
 8013290:	f043 0301 	orr.w	r3, r3, #1
 8013294:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 801329a:	2300      	movs	r3, #0
 801329c:	613b      	str	r3, [r7, #16]
 801329e:	6938      	ldr	r0, [r7, #16]
 80132a0:	f7f2 fed5 	bl	800604e <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 80132a4:	693b      	ldr	r3, [r7, #16]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d004      	beq.n	80132b4 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 80132aa:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 80132ae:	bf30      	wfi
				__asm volatile( "isb" );
 80132b0:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 80132b4:	6878      	ldr	r0, [r7, #4]
 80132b6:	f7f2 fed4 	bl	8006062 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 80132ba:	b662      	cpsie	i
			__asm volatile( "dsb" );
 80132bc:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 80132c0:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 80132c4:	b672      	cpsid	i
			__asm volatile( "dsb" );
 80132c6:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 80132ca:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 80132ce:	4b2c      	ldr	r3, [pc, #176]	; (8013380 <vPortSuppressTicksAndSleep+0x184>)
 80132d0:	2206      	movs	r2, #6
 80132d2:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 80132d4:	4b2a      	ldr	r3, [pc, #168]	; (8013380 <vPortSuppressTicksAndSleep+0x184>)
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d01d      	beq.n	801331c <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 80132e0:	4b29      	ldr	r3, [pc, #164]	; (8013388 <vPortSuppressTicksAndSleep+0x18c>)
 80132e2:	681a      	ldr	r2, [r3, #0]
 80132e4:	4b27      	ldr	r3, [pc, #156]	; (8013384 <vPortSuppressTicksAndSleep+0x188>)
 80132e6:	6819      	ldr	r1, [r3, #0]
 80132e8:	69fb      	ldr	r3, [r7, #28]
 80132ea:	1acb      	subs	r3, r1, r3
 80132ec:	4413      	add	r3, r2
 80132ee:	3b01      	subs	r3, #1
 80132f0:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 80132f2:	4b26      	ldr	r3, [pc, #152]	; (801338c <vPortSuppressTicksAndSleep+0x190>)
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	697a      	ldr	r2, [r7, #20]
 80132f8:	429a      	cmp	r2, r3
 80132fa:	d304      	bcc.n	8013306 <vPortSuppressTicksAndSleep+0x10a>
 80132fc:	4b22      	ldr	r3, [pc, #136]	; (8013388 <vPortSuppressTicksAndSleep+0x18c>)
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	697a      	ldr	r2, [r7, #20]
 8013302:	429a      	cmp	r2, r3
 8013304:	d903      	bls.n	801330e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8013306:	4b20      	ldr	r3, [pc, #128]	; (8013388 <vPortSuppressTicksAndSleep+0x18c>)
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	3b01      	subs	r3, #1
 801330c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 801330e:	4a20      	ldr	r2, [pc, #128]	; (8013390 <vPortSuppressTicksAndSleep+0x194>)
 8013310:	697b      	ldr	r3, [r7, #20]
 8013312:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	3b01      	subs	r3, #1
 8013318:	61bb      	str	r3, [r7, #24]
 801331a:	e018      	b.n	801334e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 801331c:	4b1a      	ldr	r3, [pc, #104]	; (8013388 <vPortSuppressTicksAndSleep+0x18c>)
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	687a      	ldr	r2, [r7, #4]
 8013322:	fb03 f202 	mul.w	r2, r3, r2
 8013326:	4b17      	ldr	r3, [pc, #92]	; (8013384 <vPortSuppressTicksAndSleep+0x188>)
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	1ad3      	subs	r3, r2, r3
 801332c:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 801332e:	4b16      	ldr	r3, [pc, #88]	; (8013388 <vPortSuppressTicksAndSleep+0x18c>)
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	68fa      	ldr	r2, [r7, #12]
 8013334:	fbb2 f3f3 	udiv	r3, r2, r3
 8013338:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 801333a:	69bb      	ldr	r3, [r7, #24]
 801333c:	3301      	adds	r3, #1
 801333e:	4a12      	ldr	r2, [pc, #72]	; (8013388 <vPortSuppressTicksAndSleep+0x18c>)
 8013340:	6812      	ldr	r2, [r2, #0]
 8013342:	fb03 f202 	mul.w	r2, r3, r2
 8013346:	4912      	ldr	r1, [pc, #72]	; (8013390 <vPortSuppressTicksAndSleep+0x194>)
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	1ad3      	subs	r3, r2, r3
 801334c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801334e:	4b0d      	ldr	r3, [pc, #52]	; (8013384 <vPortSuppressTicksAndSleep+0x188>)
 8013350:	2200      	movs	r2, #0
 8013352:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8013354:	4b0a      	ldr	r3, [pc, #40]	; (8013380 <vPortSuppressTicksAndSleep+0x184>)
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	4a09      	ldr	r2, [pc, #36]	; (8013380 <vPortSuppressTicksAndSleep+0x184>)
 801335a:	f043 0301 	orr.w	r3, r3, #1
 801335e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 8013360:	69b8      	ldr	r0, [r7, #24]
 8013362:	f001 fac9 	bl	80148f8 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8013366:	4b08      	ldr	r3, [pc, #32]	; (8013388 <vPortSuppressTicksAndSleep+0x18c>)
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	4a09      	ldr	r2, [pc, #36]	; (8013390 <vPortSuppressTicksAndSleep+0x194>)
 801336c:	3b01      	subs	r3, #1
 801336e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 8013370:	b662      	cpsie	i
	}
 8013372:	bf00      	nop
 8013374:	3720      	adds	r7, #32
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}
 801337a:	bf00      	nop
 801337c:	2000cf9c 	.word	0x2000cf9c
 8013380:	e000e010 	.word	0xe000e010
 8013384:	e000e018 	.word	0xe000e018
 8013388:	2000cf98 	.word	0x2000cf98
 801338c:	2000cfa0 	.word	0x2000cfa0
 8013390:	e000e014 	.word	0xe000e014

08013394 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013394:	b480      	push	{r7}
 8013396:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8013398:	4b14      	ldr	r3, [pc, #80]	; (80133ec <vPortSetupTimerInterrupt+0x58>)
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	4a14      	ldr	r2, [pc, #80]	; (80133f0 <vPortSetupTimerInterrupt+0x5c>)
 801339e:	fba2 2303 	umull	r2, r3, r2, r3
 80133a2:	099b      	lsrs	r3, r3, #6
 80133a4:	4a13      	ldr	r2, [pc, #76]	; (80133f4 <vPortSetupTimerInterrupt+0x60>)
 80133a6:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 80133a8:	4b12      	ldr	r3, [pc, #72]	; (80133f4 <vPortSetupTimerInterrupt+0x60>)
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80133b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80133b4:	4a10      	ldr	r2, [pc, #64]	; (80133f8 <vPortSetupTimerInterrupt+0x64>)
 80133b6:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 80133b8:	4b10      	ldr	r3, [pc, #64]	; (80133fc <vPortSetupTimerInterrupt+0x68>)
 80133ba:	222d      	movs	r2, #45	; 0x2d
 80133bc:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80133be:	4b10      	ldr	r3, [pc, #64]	; (8013400 <vPortSetupTimerInterrupt+0x6c>)
 80133c0:	2200      	movs	r2, #0
 80133c2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80133c4:	4b0f      	ldr	r3, [pc, #60]	; (8013404 <vPortSetupTimerInterrupt+0x70>)
 80133c6:	2200      	movs	r2, #0
 80133c8:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80133ca:	4b08      	ldr	r3, [pc, #32]	; (80133ec <vPortSetupTimerInterrupt+0x58>)
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	4a08      	ldr	r2, [pc, #32]	; (80133f0 <vPortSetupTimerInterrupt+0x5c>)
 80133d0:	fba2 2303 	umull	r2, r3, r2, r3
 80133d4:	099b      	lsrs	r3, r3, #6
 80133d6:	4a0c      	ldr	r2, [pc, #48]	; (8013408 <vPortSetupTimerInterrupt+0x74>)
 80133d8:	3b01      	subs	r3, #1
 80133da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80133dc:	4b08      	ldr	r3, [pc, #32]	; (8013400 <vPortSetupTimerInterrupt+0x6c>)
 80133de:	2207      	movs	r2, #7
 80133e0:	601a      	str	r2, [r3, #0]
}
 80133e2:	bf00      	nop
 80133e4:	46bd      	mov	sp, r7
 80133e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ea:	4770      	bx	lr
 80133ec:	2000004c 	.word	0x2000004c
 80133f0:	10624dd3 	.word	0x10624dd3
 80133f4:	2000cf98 	.word	0x2000cf98
 80133f8:	2000cf9c 	.word	0x2000cf9c
 80133fc:	2000cfa0 	.word	0x2000cfa0
 8013400:	e000e010 	.word	0xe000e010
 8013404:	e000e018 	.word	0xe000e018
 8013408:	e000e014 	.word	0xe000e014

0801340c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801340c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801341c <vPortEnableVFP+0x10>
 8013410:	6801      	ldr	r1, [r0, #0]
 8013412:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013416:	6001      	str	r1, [r0, #0]
 8013418:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801341a:	bf00      	nop
 801341c:	e000ed88 	.word	0xe000ed88

08013420 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013420:	b480      	push	{r7}
 8013422:	b085      	sub	sp, #20
 8013424:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013426:	f3ef 8305 	mrs	r3, IPSR
 801342a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	2b0f      	cmp	r3, #15
 8013430:	d914      	bls.n	801345c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013432:	4a17      	ldr	r2, [pc, #92]	; (8013490 <vPortValidateInterruptPriority+0x70>)
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	4413      	add	r3, r2
 8013438:	781b      	ldrb	r3, [r3, #0]
 801343a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801343c:	4b15      	ldr	r3, [pc, #84]	; (8013494 <vPortValidateInterruptPriority+0x74>)
 801343e:	781b      	ldrb	r3, [r3, #0]
 8013440:	7afa      	ldrb	r2, [r7, #11]
 8013442:	429a      	cmp	r2, r3
 8013444:	d20a      	bcs.n	801345c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8013446:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801344a:	f383 8811 	msr	BASEPRI, r3
 801344e:	f3bf 8f6f 	isb	sy
 8013452:	f3bf 8f4f 	dsb	sy
 8013456:	607b      	str	r3, [r7, #4]
}
 8013458:	bf00      	nop
 801345a:	e7fe      	b.n	801345a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801345c:	4b0e      	ldr	r3, [pc, #56]	; (8013498 <vPortValidateInterruptPriority+0x78>)
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013464:	4b0d      	ldr	r3, [pc, #52]	; (801349c <vPortValidateInterruptPriority+0x7c>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	429a      	cmp	r2, r3
 801346a:	d90a      	bls.n	8013482 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801346c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8013470:	f383 8811 	msr	BASEPRI, r3
 8013474:	f3bf 8f6f 	isb	sy
 8013478:	f3bf 8f4f 	dsb	sy
 801347c:	603b      	str	r3, [r7, #0]
}
 801347e:	bf00      	nop
 8013480:	e7fe      	b.n	8013480 <vPortValidateInterruptPriority+0x60>
	}
 8013482:	bf00      	nop
 8013484:	3714      	adds	r7, #20
 8013486:	46bd      	mov	sp, r7
 8013488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801348c:	4770      	bx	lr
 801348e:	bf00      	nop
 8013490:	e000e3f0 	.word	0xe000e3f0
 8013494:	2000cfa4 	.word	0x2000cfa4
 8013498:	e000ed0c 	.word	0xe000ed0c
 801349c:	2000cfa8 	.word	0x2000cfa8

080134a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b084      	sub	sp, #16
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d10a      	bne.n	80134ca <xQueueGenericReset+0x2a>
	__asm volatile
 80134b4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80134b8:	f383 8811 	msr	BASEPRI, r3
 80134bc:	f3bf 8f6f 	isb	sy
 80134c0:	f3bf 8f4f 	dsb	sy
 80134c4:	60bb      	str	r3, [r7, #8]
}
 80134c6:	bf00      	nop
 80134c8:	e7fe      	b.n	80134c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80134ca:	f7ff fde3 	bl	8013094 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	681a      	ldr	r2, [r3, #0]
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134d6:	68f9      	ldr	r1, [r7, #12]
 80134d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80134da:	fb01 f303 	mul.w	r3, r1, r3
 80134de:	441a      	add	r2, r3
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	2200      	movs	r2, #0
 80134e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	681a      	ldr	r2, [r3, #0]
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	681a      	ldr	r2, [r3, #0]
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134fa:	3b01      	subs	r3, #1
 80134fc:	68f9      	ldr	r1, [r7, #12]
 80134fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013500:	fb01 f303 	mul.w	r3, r1, r3
 8013504:	441a      	add	r2, r3
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	22ff      	movs	r2, #255	; 0xff
 801350e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	22ff      	movs	r2, #255	; 0xff
 8013516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d114      	bne.n	801354a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	691b      	ldr	r3, [r3, #16]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d01a      	beq.n	801355e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	3310      	adds	r3, #16
 801352c:	4618      	mov	r0, r3
 801352e:	f001 fbd5 	bl	8014cdc <xTaskRemoveFromEventList>
 8013532:	4603      	mov	r3, r0
 8013534:	2b00      	cmp	r3, #0
 8013536:	d012      	beq.n	801355e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013538:	4b0c      	ldr	r3, [pc, #48]	; (801356c <xQueueGenericReset+0xcc>)
 801353a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801353e:	601a      	str	r2, [r3, #0]
 8013540:	f3bf 8f4f 	dsb	sy
 8013544:	f3bf 8f6f 	isb	sy
 8013548:	e009      	b.n	801355e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	3310      	adds	r3, #16
 801354e:	4618      	mov	r0, r3
 8013550:	f7ff fbbe 	bl	8012cd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	3324      	adds	r3, #36	; 0x24
 8013558:	4618      	mov	r0, r3
 801355a:	f7ff fbb9 	bl	8012cd0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801355e:	f7ff fdc9 	bl	80130f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013562:	2301      	movs	r3, #1
}
 8013564:	4618      	mov	r0, r3
 8013566:	3710      	adds	r7, #16
 8013568:	46bd      	mov	sp, r7
 801356a:	bd80      	pop	{r7, pc}
 801356c:	e000ed04 	.word	0xe000ed04

08013570 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013570:	b580      	push	{r7, lr}
 8013572:	b08e      	sub	sp, #56	; 0x38
 8013574:	af02      	add	r7, sp, #8
 8013576:	60f8      	str	r0, [r7, #12]
 8013578:	60b9      	str	r1, [r7, #8]
 801357a:	607a      	str	r2, [r7, #4]
 801357c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d10a      	bne.n	801359a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013584:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8013588:	f383 8811 	msr	BASEPRI, r3
 801358c:	f3bf 8f6f 	isb	sy
 8013590:	f3bf 8f4f 	dsb	sy
 8013594:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013596:	bf00      	nop
 8013598:	e7fe      	b.n	8013598 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801359a:	683b      	ldr	r3, [r7, #0]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d10a      	bne.n	80135b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80135a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80135a4:	f383 8811 	msr	BASEPRI, r3
 80135a8:	f3bf 8f6f 	isb	sy
 80135ac:	f3bf 8f4f 	dsb	sy
 80135b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80135b2:	bf00      	nop
 80135b4:	e7fe      	b.n	80135b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d002      	beq.n	80135c2 <xQueueGenericCreateStatic+0x52>
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d001      	beq.n	80135c6 <xQueueGenericCreateStatic+0x56>
 80135c2:	2301      	movs	r3, #1
 80135c4:	e000      	b.n	80135c8 <xQueueGenericCreateStatic+0x58>
 80135c6:	2300      	movs	r3, #0
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d10a      	bne.n	80135e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80135cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80135d0:	f383 8811 	msr	BASEPRI, r3
 80135d4:	f3bf 8f6f 	isb	sy
 80135d8:	f3bf 8f4f 	dsb	sy
 80135dc:	623b      	str	r3, [r7, #32]
}
 80135de:	bf00      	nop
 80135e0:	e7fe      	b.n	80135e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d102      	bne.n	80135ee <xQueueGenericCreateStatic+0x7e>
 80135e8:	68bb      	ldr	r3, [r7, #8]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d101      	bne.n	80135f2 <xQueueGenericCreateStatic+0x82>
 80135ee:	2301      	movs	r3, #1
 80135f0:	e000      	b.n	80135f4 <xQueueGenericCreateStatic+0x84>
 80135f2:	2300      	movs	r3, #0
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d10a      	bne.n	801360e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80135f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80135fc:	f383 8811 	msr	BASEPRI, r3
 8013600:	f3bf 8f6f 	isb	sy
 8013604:	f3bf 8f4f 	dsb	sy
 8013608:	61fb      	str	r3, [r7, #28]
}
 801360a:	bf00      	nop
 801360c:	e7fe      	b.n	801360c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801360e:	2350      	movs	r3, #80	; 0x50
 8013610:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013612:	697b      	ldr	r3, [r7, #20]
 8013614:	2b50      	cmp	r3, #80	; 0x50
 8013616:	d00a      	beq.n	801362e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013618:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801361c:	f383 8811 	msr	BASEPRI, r3
 8013620:	f3bf 8f6f 	isb	sy
 8013624:	f3bf 8f4f 	dsb	sy
 8013628:	61bb      	str	r3, [r7, #24]
}
 801362a:	bf00      	nop
 801362c:	e7fe      	b.n	801362c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801362e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013630:	683b      	ldr	r3, [r7, #0]
 8013632:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013636:	2b00      	cmp	r3, #0
 8013638:	d00d      	beq.n	8013656 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801363a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801363c:	2201      	movs	r2, #1
 801363e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013642:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013648:	9300      	str	r3, [sp, #0]
 801364a:	4613      	mov	r3, r2
 801364c:	687a      	ldr	r2, [r7, #4]
 801364e:	68b9      	ldr	r1, [r7, #8]
 8013650:	68f8      	ldr	r0, [r7, #12]
 8013652:	f000 f805 	bl	8013660 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013658:	4618      	mov	r0, r3
 801365a:	3730      	adds	r7, #48	; 0x30
 801365c:	46bd      	mov	sp, r7
 801365e:	bd80      	pop	{r7, pc}

08013660 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b084      	sub	sp, #16
 8013664:	af00      	add	r7, sp, #0
 8013666:	60f8      	str	r0, [r7, #12]
 8013668:	60b9      	str	r1, [r7, #8]
 801366a:	607a      	str	r2, [r7, #4]
 801366c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801366e:	68bb      	ldr	r3, [r7, #8]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d103      	bne.n	801367c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013674:	69bb      	ldr	r3, [r7, #24]
 8013676:	69ba      	ldr	r2, [r7, #24]
 8013678:	601a      	str	r2, [r3, #0]
 801367a:	e002      	b.n	8013682 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801367c:	69bb      	ldr	r3, [r7, #24]
 801367e:	687a      	ldr	r2, [r7, #4]
 8013680:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013682:	69bb      	ldr	r3, [r7, #24]
 8013684:	68fa      	ldr	r2, [r7, #12]
 8013686:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013688:	69bb      	ldr	r3, [r7, #24]
 801368a:	68ba      	ldr	r2, [r7, #8]
 801368c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801368e:	2101      	movs	r1, #1
 8013690:	69b8      	ldr	r0, [r7, #24]
 8013692:	f7ff ff05 	bl	80134a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013696:	69bb      	ldr	r3, [r7, #24]
 8013698:	78fa      	ldrb	r2, [r7, #3]
 801369a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801369e:	bf00      	nop
 80136a0:	3710      	adds	r7, #16
 80136a2:	46bd      	mov	sp, r7
 80136a4:	bd80      	pop	{r7, pc}
	...

080136a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b08e      	sub	sp, #56	; 0x38
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	60f8      	str	r0, [r7, #12]
 80136b0:	60b9      	str	r1, [r7, #8]
 80136b2:	607a      	str	r2, [r7, #4]
 80136b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80136b6:	2300      	movs	r3, #0
 80136b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80136be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d10a      	bne.n	80136da <xQueueGenericSend+0x32>
	__asm volatile
 80136c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80136c8:	f383 8811 	msr	BASEPRI, r3
 80136cc:	f3bf 8f6f 	isb	sy
 80136d0:	f3bf 8f4f 	dsb	sy
 80136d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80136d6:	bf00      	nop
 80136d8:	e7fe      	b.n	80136d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80136da:	68bb      	ldr	r3, [r7, #8]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d103      	bne.n	80136e8 <xQueueGenericSend+0x40>
 80136e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d101      	bne.n	80136ec <xQueueGenericSend+0x44>
 80136e8:	2301      	movs	r3, #1
 80136ea:	e000      	b.n	80136ee <xQueueGenericSend+0x46>
 80136ec:	2300      	movs	r3, #0
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d10a      	bne.n	8013708 <xQueueGenericSend+0x60>
	__asm volatile
 80136f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80136f6:	f383 8811 	msr	BASEPRI, r3
 80136fa:	f3bf 8f6f 	isb	sy
 80136fe:	f3bf 8f4f 	dsb	sy
 8013702:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013704:	bf00      	nop
 8013706:	e7fe      	b.n	8013706 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	2b02      	cmp	r3, #2
 801370c:	d103      	bne.n	8013716 <xQueueGenericSend+0x6e>
 801370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013712:	2b01      	cmp	r3, #1
 8013714:	d101      	bne.n	801371a <xQueueGenericSend+0x72>
 8013716:	2301      	movs	r3, #1
 8013718:	e000      	b.n	801371c <xQueueGenericSend+0x74>
 801371a:	2300      	movs	r3, #0
 801371c:	2b00      	cmp	r3, #0
 801371e:	d10a      	bne.n	8013736 <xQueueGenericSend+0x8e>
	__asm volatile
 8013720:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8013724:	f383 8811 	msr	BASEPRI, r3
 8013728:	f3bf 8f6f 	isb	sy
 801372c:	f3bf 8f4f 	dsb	sy
 8013730:	623b      	str	r3, [r7, #32]
}
 8013732:	bf00      	nop
 8013734:	e7fe      	b.n	8013734 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013736:	f001 fcef 	bl	8015118 <xTaskGetSchedulerState>
 801373a:	4603      	mov	r3, r0
 801373c:	2b00      	cmp	r3, #0
 801373e:	d102      	bne.n	8013746 <xQueueGenericSend+0x9e>
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d101      	bne.n	801374a <xQueueGenericSend+0xa2>
 8013746:	2301      	movs	r3, #1
 8013748:	e000      	b.n	801374c <xQueueGenericSend+0xa4>
 801374a:	2300      	movs	r3, #0
 801374c:	2b00      	cmp	r3, #0
 801374e:	d10a      	bne.n	8013766 <xQueueGenericSend+0xbe>
	__asm volatile
 8013750:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8013754:	f383 8811 	msr	BASEPRI, r3
 8013758:	f3bf 8f6f 	isb	sy
 801375c:	f3bf 8f4f 	dsb	sy
 8013760:	61fb      	str	r3, [r7, #28]
}
 8013762:	bf00      	nop
 8013764:	e7fe      	b.n	8013764 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013766:	f7ff fc95 	bl	8013094 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801376c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013772:	429a      	cmp	r2, r3
 8013774:	d302      	bcc.n	801377c <xQueueGenericSend+0xd4>
 8013776:	683b      	ldr	r3, [r7, #0]
 8013778:	2b02      	cmp	r3, #2
 801377a:	d129      	bne.n	80137d0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801377c:	683a      	ldr	r2, [r7, #0]
 801377e:	68b9      	ldr	r1, [r7, #8]
 8013780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013782:	f000 fa0b 	bl	8013b9c <prvCopyDataToQueue>
 8013786:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801378c:	2b00      	cmp	r3, #0
 801378e:	d010      	beq.n	80137b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013792:	3324      	adds	r3, #36	; 0x24
 8013794:	4618      	mov	r0, r3
 8013796:	f001 faa1 	bl	8014cdc <xTaskRemoveFromEventList>
 801379a:	4603      	mov	r3, r0
 801379c:	2b00      	cmp	r3, #0
 801379e:	d013      	beq.n	80137c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80137a0:	4b3f      	ldr	r3, [pc, #252]	; (80138a0 <xQueueGenericSend+0x1f8>)
 80137a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137a6:	601a      	str	r2, [r3, #0]
 80137a8:	f3bf 8f4f 	dsb	sy
 80137ac:	f3bf 8f6f 	isb	sy
 80137b0:	e00a      	b.n	80137c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80137b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d007      	beq.n	80137c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80137b8:	4b39      	ldr	r3, [pc, #228]	; (80138a0 <xQueueGenericSend+0x1f8>)
 80137ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137be:	601a      	str	r2, [r3, #0]
 80137c0:	f3bf 8f4f 	dsb	sy
 80137c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80137c8:	f7ff fc94 	bl	80130f4 <vPortExitCritical>
				return pdPASS;
 80137cc:	2301      	movs	r3, #1
 80137ce:	e063      	b.n	8013898 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d103      	bne.n	80137de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80137d6:	f7ff fc8d 	bl	80130f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80137da:	2300      	movs	r3, #0
 80137dc:	e05c      	b.n	8013898 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80137de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d106      	bne.n	80137f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80137e4:	f107 0314 	add.w	r3, r7, #20
 80137e8:	4618      	mov	r0, r3
 80137ea:	f001 fadd 	bl	8014da8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80137ee:	2301      	movs	r3, #1
 80137f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80137f2:	f7ff fc7f 	bl	80130f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80137f6:	f000 ff79 	bl	80146ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80137fa:	f7ff fc4b 	bl	8013094 <vPortEnterCritical>
 80137fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013800:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013804:	b25b      	sxtb	r3, r3
 8013806:	f1b3 3fff 	cmp.w	r3, #4294967295
 801380a:	d103      	bne.n	8013814 <xQueueGenericSend+0x16c>
 801380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801380e:	2200      	movs	r2, #0
 8013810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013816:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801381a:	b25b      	sxtb	r3, r3
 801381c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013820:	d103      	bne.n	801382a <xQueueGenericSend+0x182>
 8013822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013824:	2200      	movs	r2, #0
 8013826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801382a:	f7ff fc63 	bl	80130f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801382e:	1d3a      	adds	r2, r7, #4
 8013830:	f107 0314 	add.w	r3, r7, #20
 8013834:	4611      	mov	r1, r2
 8013836:	4618      	mov	r0, r3
 8013838:	f001 facc 	bl	8014dd4 <xTaskCheckForTimeOut>
 801383c:	4603      	mov	r3, r0
 801383e:	2b00      	cmp	r3, #0
 8013840:	d124      	bne.n	801388c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013842:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013844:	f000 faa2 	bl	8013d8c <prvIsQueueFull>
 8013848:	4603      	mov	r3, r0
 801384a:	2b00      	cmp	r3, #0
 801384c:	d018      	beq.n	8013880 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013850:	3310      	adds	r3, #16
 8013852:	687a      	ldr	r2, [r7, #4]
 8013854:	4611      	mov	r1, r2
 8013856:	4618      	mov	r0, r3
 8013858:	f001 f9f0 	bl	8014c3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801385c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801385e:	f000 fa2d 	bl	8013cbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013862:	f000 ff89 	bl	8014778 <xTaskResumeAll>
 8013866:	4603      	mov	r3, r0
 8013868:	2b00      	cmp	r3, #0
 801386a:	f47f af7c 	bne.w	8013766 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801386e:	4b0c      	ldr	r3, [pc, #48]	; (80138a0 <xQueueGenericSend+0x1f8>)
 8013870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013874:	601a      	str	r2, [r3, #0]
 8013876:	f3bf 8f4f 	dsb	sy
 801387a:	f3bf 8f6f 	isb	sy
 801387e:	e772      	b.n	8013766 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013882:	f000 fa1b 	bl	8013cbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013886:	f000 ff77 	bl	8014778 <xTaskResumeAll>
 801388a:	e76c      	b.n	8013766 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801388c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801388e:	f000 fa15 	bl	8013cbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013892:	f000 ff71 	bl	8014778 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013896:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013898:	4618      	mov	r0, r3
 801389a:	3738      	adds	r7, #56	; 0x38
 801389c:	46bd      	mov	sp, r7
 801389e:	bd80      	pop	{r7, pc}
 80138a0:	e000ed04 	.word	0xe000ed04

080138a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b090      	sub	sp, #64	; 0x40
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	60f8      	str	r0, [r7, #12]
 80138ac:	60b9      	str	r1, [r7, #8]
 80138ae:	607a      	str	r2, [r7, #4]
 80138b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80138b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d10a      	bne.n	80138d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80138bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80138c0:	f383 8811 	msr	BASEPRI, r3
 80138c4:	f3bf 8f6f 	isb	sy
 80138c8:	f3bf 8f4f 	dsb	sy
 80138cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80138ce:	bf00      	nop
 80138d0:	e7fe      	b.n	80138d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80138d2:	68bb      	ldr	r3, [r7, #8]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d103      	bne.n	80138e0 <xQueueGenericSendFromISR+0x3c>
 80138d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d101      	bne.n	80138e4 <xQueueGenericSendFromISR+0x40>
 80138e0:	2301      	movs	r3, #1
 80138e2:	e000      	b.n	80138e6 <xQueueGenericSendFromISR+0x42>
 80138e4:	2300      	movs	r3, #0
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d10a      	bne.n	8013900 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80138ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80138ee:	f383 8811 	msr	BASEPRI, r3
 80138f2:	f3bf 8f6f 	isb	sy
 80138f6:	f3bf 8f4f 	dsb	sy
 80138fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80138fc:	bf00      	nop
 80138fe:	e7fe      	b.n	80138fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013900:	683b      	ldr	r3, [r7, #0]
 8013902:	2b02      	cmp	r3, #2
 8013904:	d103      	bne.n	801390e <xQueueGenericSendFromISR+0x6a>
 8013906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801390a:	2b01      	cmp	r3, #1
 801390c:	d101      	bne.n	8013912 <xQueueGenericSendFromISR+0x6e>
 801390e:	2301      	movs	r3, #1
 8013910:	e000      	b.n	8013914 <xQueueGenericSendFromISR+0x70>
 8013912:	2300      	movs	r3, #0
 8013914:	2b00      	cmp	r3, #0
 8013916:	d10a      	bne.n	801392e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013918:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801391c:	f383 8811 	msr	BASEPRI, r3
 8013920:	f3bf 8f6f 	isb	sy
 8013924:	f3bf 8f4f 	dsb	sy
 8013928:	623b      	str	r3, [r7, #32]
}
 801392a:	bf00      	nop
 801392c:	e7fe      	b.n	801392c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801392e:	f7ff fd77 	bl	8013420 <vPortValidateInterruptPriority>
	__asm volatile
 8013932:	f3ef 8211 	mrs	r2, BASEPRI
 8013936:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801393a:	f383 8811 	msr	BASEPRI, r3
 801393e:	f3bf 8f6f 	isb	sy
 8013942:	f3bf 8f4f 	dsb	sy
 8013946:	61fa      	str	r2, [r7, #28]
 8013948:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 801394a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801394c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013956:	429a      	cmp	r2, r3
 8013958:	d302      	bcc.n	8013960 <xQueueGenericSendFromISR+0xbc>
 801395a:	683b      	ldr	r3, [r7, #0]
 801395c:	2b02      	cmp	r3, #2
 801395e:	d12f      	bne.n	80139c0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013962:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801396a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801396e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013970:	683a      	ldr	r2, [r7, #0]
 8013972:	68b9      	ldr	r1, [r7, #8]
 8013974:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013976:	f000 f911 	bl	8013b9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801397a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013982:	d112      	bne.n	80139aa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013988:	2b00      	cmp	r3, #0
 801398a:	d016      	beq.n	80139ba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801398c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801398e:	3324      	adds	r3, #36	; 0x24
 8013990:	4618      	mov	r0, r3
 8013992:	f001 f9a3 	bl	8014cdc <xTaskRemoveFromEventList>
 8013996:	4603      	mov	r3, r0
 8013998:	2b00      	cmp	r3, #0
 801399a:	d00e      	beq.n	80139ba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d00b      	beq.n	80139ba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	2201      	movs	r2, #1
 80139a6:	601a      	str	r2, [r3, #0]
 80139a8:	e007      	b.n	80139ba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80139aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80139ae:	3301      	adds	r3, #1
 80139b0:	b2db      	uxtb	r3, r3
 80139b2:	b25a      	sxtb	r2, r3
 80139b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80139ba:	2301      	movs	r3, #1
 80139bc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80139be:	e001      	b.n	80139c4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80139c0:	2300      	movs	r3, #0
 80139c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80139c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139c6:	617b      	str	r3, [r7, #20]
	__asm volatile
 80139c8:	697b      	ldr	r3, [r7, #20]
 80139ca:	f383 8811 	msr	BASEPRI, r3
}
 80139ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80139d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80139d2:	4618      	mov	r0, r3
 80139d4:	3740      	adds	r7, #64	; 0x40
 80139d6:	46bd      	mov	sp, r7
 80139d8:	bd80      	pop	{r7, pc}
	...

080139dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b08c      	sub	sp, #48	; 0x30
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	60f8      	str	r0, [r7, #12]
 80139e4:	60b9      	str	r1, [r7, #8]
 80139e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80139e8:	2300      	movs	r3, #0
 80139ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80139f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d10a      	bne.n	8013a0c <xQueueReceive+0x30>
	__asm volatile
 80139f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80139fa:	f383 8811 	msr	BASEPRI, r3
 80139fe:	f3bf 8f6f 	isb	sy
 8013a02:	f3bf 8f4f 	dsb	sy
 8013a06:	623b      	str	r3, [r7, #32]
}
 8013a08:	bf00      	nop
 8013a0a:	e7fe      	b.n	8013a0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013a0c:	68bb      	ldr	r3, [r7, #8]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d103      	bne.n	8013a1a <xQueueReceive+0x3e>
 8013a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d101      	bne.n	8013a1e <xQueueReceive+0x42>
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	e000      	b.n	8013a20 <xQueueReceive+0x44>
 8013a1e:	2300      	movs	r3, #0
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d10a      	bne.n	8013a3a <xQueueReceive+0x5e>
	__asm volatile
 8013a24:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8013a28:	f383 8811 	msr	BASEPRI, r3
 8013a2c:	f3bf 8f6f 	isb	sy
 8013a30:	f3bf 8f4f 	dsb	sy
 8013a34:	61fb      	str	r3, [r7, #28]
}
 8013a36:	bf00      	nop
 8013a38:	e7fe      	b.n	8013a38 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013a3a:	f001 fb6d 	bl	8015118 <xTaskGetSchedulerState>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d102      	bne.n	8013a4a <xQueueReceive+0x6e>
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d101      	bne.n	8013a4e <xQueueReceive+0x72>
 8013a4a:	2301      	movs	r3, #1
 8013a4c:	e000      	b.n	8013a50 <xQueueReceive+0x74>
 8013a4e:	2300      	movs	r3, #0
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d10a      	bne.n	8013a6a <xQueueReceive+0x8e>
	__asm volatile
 8013a54:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8013a58:	f383 8811 	msr	BASEPRI, r3
 8013a5c:	f3bf 8f6f 	isb	sy
 8013a60:	f3bf 8f4f 	dsb	sy
 8013a64:	61bb      	str	r3, [r7, #24]
}
 8013a66:	bf00      	nop
 8013a68:	e7fe      	b.n	8013a68 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013a6a:	f7ff fb13 	bl	8013094 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a72:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d01f      	beq.n	8013aba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013a7a:	68b9      	ldr	r1, [r7, #8]
 8013a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a7e:	f000 f8f7 	bl	8013c70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a84:	1e5a      	subs	r2, r3, #1
 8013a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a88:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a8c:	691b      	ldr	r3, [r3, #16]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d00f      	beq.n	8013ab2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a94:	3310      	adds	r3, #16
 8013a96:	4618      	mov	r0, r3
 8013a98:	f001 f920 	bl	8014cdc <xTaskRemoveFromEventList>
 8013a9c:	4603      	mov	r3, r0
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d007      	beq.n	8013ab2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013aa2:	4b3d      	ldr	r3, [pc, #244]	; (8013b98 <xQueueReceive+0x1bc>)
 8013aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013aa8:	601a      	str	r2, [r3, #0]
 8013aaa:	f3bf 8f4f 	dsb	sy
 8013aae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013ab2:	f7ff fb1f 	bl	80130f4 <vPortExitCritical>
				return pdPASS;
 8013ab6:	2301      	movs	r3, #1
 8013ab8:	e069      	b.n	8013b8e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d103      	bne.n	8013ac8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013ac0:	f7ff fb18 	bl	80130f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	e062      	b.n	8013b8e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d106      	bne.n	8013adc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013ace:	f107 0310 	add.w	r3, r7, #16
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	f001 f968 	bl	8014da8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013ad8:	2301      	movs	r3, #1
 8013ada:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013adc:	f7ff fb0a 	bl	80130f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013ae0:	f000 fe04 	bl	80146ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013ae4:	f7ff fad6 	bl	8013094 <vPortEnterCritical>
 8013ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013aee:	b25b      	sxtb	r3, r3
 8013af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013af4:	d103      	bne.n	8013afe <xQueueReceive+0x122>
 8013af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013af8:	2200      	movs	r2, #0
 8013afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013b04:	b25b      	sxtb	r3, r3
 8013b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b0a:	d103      	bne.n	8013b14 <xQueueReceive+0x138>
 8013b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b0e:	2200      	movs	r2, #0
 8013b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013b14:	f7ff faee 	bl	80130f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013b18:	1d3a      	adds	r2, r7, #4
 8013b1a:	f107 0310 	add.w	r3, r7, #16
 8013b1e:	4611      	mov	r1, r2
 8013b20:	4618      	mov	r0, r3
 8013b22:	f001 f957 	bl	8014dd4 <xTaskCheckForTimeOut>
 8013b26:	4603      	mov	r3, r0
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d123      	bne.n	8013b74 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b2e:	f000 f917 	bl	8013d60 <prvIsQueueEmpty>
 8013b32:	4603      	mov	r3, r0
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d017      	beq.n	8013b68 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b3a:	3324      	adds	r3, #36	; 0x24
 8013b3c:	687a      	ldr	r2, [r7, #4]
 8013b3e:	4611      	mov	r1, r2
 8013b40:	4618      	mov	r0, r3
 8013b42:	f001 f87b 	bl	8014c3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b48:	f000 f8b8 	bl	8013cbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013b4c:	f000 fe14 	bl	8014778 <xTaskResumeAll>
 8013b50:	4603      	mov	r3, r0
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d189      	bne.n	8013a6a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013b56:	4b10      	ldr	r3, [pc, #64]	; (8013b98 <xQueueReceive+0x1bc>)
 8013b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b5c:	601a      	str	r2, [r3, #0]
 8013b5e:	f3bf 8f4f 	dsb	sy
 8013b62:	f3bf 8f6f 	isb	sy
 8013b66:	e780      	b.n	8013a6a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013b68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b6a:	f000 f8a7 	bl	8013cbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013b6e:	f000 fe03 	bl	8014778 <xTaskResumeAll>
 8013b72:	e77a      	b.n	8013a6a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b76:	f000 f8a1 	bl	8013cbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013b7a:	f000 fdfd 	bl	8014778 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b80:	f000 f8ee 	bl	8013d60 <prvIsQueueEmpty>
 8013b84:	4603      	mov	r3, r0
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	f43f af6f 	beq.w	8013a6a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013b8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013b8e:	4618      	mov	r0, r3
 8013b90:	3730      	adds	r7, #48	; 0x30
 8013b92:	46bd      	mov	sp, r7
 8013b94:	bd80      	pop	{r7, pc}
 8013b96:	bf00      	nop
 8013b98:	e000ed04 	.word	0xe000ed04

08013b9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b086      	sub	sp, #24
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	60f8      	str	r0, [r7, #12]
 8013ba4:	60b9      	str	r1, [r7, #8]
 8013ba6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013ba8:	2300      	movs	r3, #0
 8013baa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d10d      	bne.n	8013bd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d14d      	bne.n	8013c5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	689b      	ldr	r3, [r3, #8]
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	f001 fac4 	bl	8015154 <xTaskPriorityDisinherit>
 8013bcc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	609a      	str	r2, [r3, #8]
 8013bd4:	e043      	b.n	8013c5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d119      	bne.n	8013c10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	6858      	ldr	r0, [r3, #4]
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013be4:	461a      	mov	r2, r3
 8013be6:	68b9      	ldr	r1, [r7, #8]
 8013be8:	f003 ff10 	bl	8017a0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	685a      	ldr	r2, [r3, #4]
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bf4:	441a      	add	r2, r3
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	685a      	ldr	r2, [r3, #4]
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	689b      	ldr	r3, [r3, #8]
 8013c02:	429a      	cmp	r2, r3
 8013c04:	d32b      	bcc.n	8013c5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	681a      	ldr	r2, [r3, #0]
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	605a      	str	r2, [r3, #4]
 8013c0e:	e026      	b.n	8013c5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	68d8      	ldr	r0, [r3, #12]
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c18:	461a      	mov	r2, r3
 8013c1a:	68b9      	ldr	r1, [r7, #8]
 8013c1c:	f003 fef6 	bl	8017a0c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	68da      	ldr	r2, [r3, #12]
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c28:	425b      	negs	r3, r3
 8013c2a:	441a      	add	r2, r3
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	68da      	ldr	r2, [r3, #12]
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	429a      	cmp	r2, r3
 8013c3a:	d207      	bcs.n	8013c4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	689a      	ldr	r2, [r3, #8]
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c44:	425b      	negs	r3, r3
 8013c46:	441a      	add	r2, r3
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	2b02      	cmp	r3, #2
 8013c50:	d105      	bne.n	8013c5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013c52:	693b      	ldr	r3, [r7, #16]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d002      	beq.n	8013c5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013c58:	693b      	ldr	r3, [r7, #16]
 8013c5a:	3b01      	subs	r3, #1
 8013c5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013c5e:	693b      	ldr	r3, [r7, #16]
 8013c60:	1c5a      	adds	r2, r3, #1
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013c66:	697b      	ldr	r3, [r7, #20]
}
 8013c68:	4618      	mov	r0, r3
 8013c6a:	3718      	adds	r7, #24
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	bd80      	pop	{r7, pc}

08013c70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b082      	sub	sp, #8
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
 8013c78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d018      	beq.n	8013cb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	68da      	ldr	r2, [r3, #12]
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c8a:	441a      	add	r2, r3
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	68da      	ldr	r2, [r3, #12]
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	689b      	ldr	r3, [r3, #8]
 8013c98:	429a      	cmp	r2, r3
 8013c9a:	d303      	bcc.n	8013ca4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	681a      	ldr	r2, [r3, #0]
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	68d9      	ldr	r1, [r3, #12]
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cac:	461a      	mov	r2, r3
 8013cae:	6838      	ldr	r0, [r7, #0]
 8013cb0:	f003 feac 	bl	8017a0c <memcpy>
	}
}
 8013cb4:	bf00      	nop
 8013cb6:	3708      	adds	r7, #8
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	bd80      	pop	{r7, pc}

08013cbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013cbc:	b580      	push	{r7, lr}
 8013cbe:	b084      	sub	sp, #16
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013cc4:	f7ff f9e6 	bl	8013094 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013cce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013cd0:	e011      	b.n	8013cf6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d012      	beq.n	8013d00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	3324      	adds	r3, #36	; 0x24
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f000 fffc 	bl	8014cdc <xTaskRemoveFromEventList>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d001      	beq.n	8013cee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013cea:	f001 f8e5 	bl	8014eb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013cee:	7bfb      	ldrb	r3, [r7, #15]
 8013cf0:	3b01      	subs	r3, #1
 8013cf2:	b2db      	uxtb	r3, r3
 8013cf4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	dce9      	bgt.n	8013cd2 <prvUnlockQueue+0x16>
 8013cfe:	e000      	b.n	8013d02 <prvUnlockQueue+0x46>
					break;
 8013d00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	22ff      	movs	r2, #255	; 0xff
 8013d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013d0a:	f7ff f9f3 	bl	80130f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013d0e:	f7ff f9c1 	bl	8013094 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013d18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013d1a:	e011      	b.n	8013d40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	691b      	ldr	r3, [r3, #16]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d012      	beq.n	8013d4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	3310      	adds	r3, #16
 8013d28:	4618      	mov	r0, r3
 8013d2a:	f000 ffd7 	bl	8014cdc <xTaskRemoveFromEventList>
 8013d2e:	4603      	mov	r3, r0
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d001      	beq.n	8013d38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013d34:	f001 f8c0 	bl	8014eb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013d38:	7bbb      	ldrb	r3, [r7, #14]
 8013d3a:	3b01      	subs	r3, #1
 8013d3c:	b2db      	uxtb	r3, r3
 8013d3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013d40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	dce9      	bgt.n	8013d1c <prvUnlockQueue+0x60>
 8013d48:	e000      	b.n	8013d4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013d4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	22ff      	movs	r2, #255	; 0xff
 8013d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013d54:	f7ff f9ce 	bl	80130f4 <vPortExitCritical>
}
 8013d58:	bf00      	nop
 8013d5a:	3710      	adds	r7, #16
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	bd80      	pop	{r7, pc}

08013d60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b084      	sub	sp, #16
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013d68:	f7ff f994 	bl	8013094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d102      	bne.n	8013d7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013d74:	2301      	movs	r3, #1
 8013d76:	60fb      	str	r3, [r7, #12]
 8013d78:	e001      	b.n	8013d7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013d7e:	f7ff f9b9 	bl	80130f4 <vPortExitCritical>

	return xReturn;
 8013d82:	68fb      	ldr	r3, [r7, #12]
}
 8013d84:	4618      	mov	r0, r3
 8013d86:	3710      	adds	r7, #16
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	bd80      	pop	{r7, pc}

08013d8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b084      	sub	sp, #16
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013d94:	f7ff f97e 	bl	8013094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013da0:	429a      	cmp	r2, r3
 8013da2:	d102      	bne.n	8013daa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013da4:	2301      	movs	r3, #1
 8013da6:	60fb      	str	r3, [r7, #12]
 8013da8:	e001      	b.n	8013dae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013daa:	2300      	movs	r3, #0
 8013dac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013dae:	f7ff f9a1 	bl	80130f4 <vPortExitCritical>

	return xReturn;
 8013db2:	68fb      	ldr	r3, [r7, #12]
}
 8013db4:	4618      	mov	r0, r3
 8013db6:	3710      	adds	r7, #16
 8013db8:	46bd      	mov	sp, r7
 8013dba:	bd80      	pop	{r7, pc}

08013dbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013dbc:	b480      	push	{r7}
 8013dbe:	b085      	sub	sp, #20
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
 8013dc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	60fb      	str	r3, [r7, #12]
 8013dca:	e014      	b.n	8013df6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013dcc:	4a0f      	ldr	r2, [pc, #60]	; (8013e0c <vQueueAddToRegistry+0x50>)
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d10b      	bne.n	8013df0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013dd8:	490c      	ldr	r1, [pc, #48]	; (8013e0c <vQueueAddToRegistry+0x50>)
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	683a      	ldr	r2, [r7, #0]
 8013dde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013de2:	4a0a      	ldr	r2, [pc, #40]	; (8013e0c <vQueueAddToRegistry+0x50>)
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	00db      	lsls	r3, r3, #3
 8013de8:	4413      	add	r3, r2
 8013dea:	687a      	ldr	r2, [r7, #4]
 8013dec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013dee:	e006      	b.n	8013dfe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	3301      	adds	r3, #1
 8013df4:	60fb      	str	r3, [r7, #12]
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	2b07      	cmp	r3, #7
 8013dfa:	d9e7      	bls.n	8013dcc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013dfc:	bf00      	nop
 8013dfe:	bf00      	nop
 8013e00:	3714      	adds	r7, #20
 8013e02:	46bd      	mov	sp, r7
 8013e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e08:	4770      	bx	lr
 8013e0a:	bf00      	nop
 8013e0c:	2000cfac 	.word	0x2000cfac

08013e10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b086      	sub	sp, #24
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	60f8      	str	r0, [r7, #12]
 8013e18:	60b9      	str	r1, [r7, #8]
 8013e1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013e20:	f7ff f938 	bl	8013094 <vPortEnterCritical>
 8013e24:	697b      	ldr	r3, [r7, #20]
 8013e26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013e2a:	b25b      	sxtb	r3, r3
 8013e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e30:	d103      	bne.n	8013e3a <vQueueWaitForMessageRestricted+0x2a>
 8013e32:	697b      	ldr	r3, [r7, #20]
 8013e34:	2200      	movs	r2, #0
 8013e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013e3a:	697b      	ldr	r3, [r7, #20]
 8013e3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013e40:	b25b      	sxtb	r3, r3
 8013e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e46:	d103      	bne.n	8013e50 <vQueueWaitForMessageRestricted+0x40>
 8013e48:	697b      	ldr	r3, [r7, #20]
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013e50:	f7ff f950 	bl	80130f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013e54:	697b      	ldr	r3, [r7, #20]
 8013e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d106      	bne.n	8013e6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013e5c:	697b      	ldr	r3, [r7, #20]
 8013e5e:	3324      	adds	r3, #36	; 0x24
 8013e60:	687a      	ldr	r2, [r7, #4]
 8013e62:	68b9      	ldr	r1, [r7, #8]
 8013e64:	4618      	mov	r0, r3
 8013e66:	f000 ff0d 	bl	8014c84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013e6a:	6978      	ldr	r0, [r7, #20]
 8013e6c:	f7ff ff26 	bl	8013cbc <prvUnlockQueue>
	}
 8013e70:	bf00      	nop
 8013e72:	3718      	adds	r7, #24
 8013e74:	46bd      	mov	sp, r7
 8013e76:	bd80      	pop	{r7, pc}

08013e78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b08e      	sub	sp, #56	; 0x38
 8013e7c:	af04      	add	r7, sp, #16
 8013e7e:	60f8      	str	r0, [r7, #12]
 8013e80:	60b9      	str	r1, [r7, #8]
 8013e82:	607a      	str	r2, [r7, #4]
 8013e84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d10a      	bne.n	8013ea2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8013e8c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8013e90:	f383 8811 	msr	BASEPRI, r3
 8013e94:	f3bf 8f6f 	isb	sy
 8013e98:	f3bf 8f4f 	dsb	sy
 8013e9c:	623b      	str	r3, [r7, #32]
}
 8013e9e:	bf00      	nop
 8013ea0:	e7fe      	b.n	8013ea0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d10a      	bne.n	8013ebe <xTaskCreateStatic+0x46>
	__asm volatile
 8013ea8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8013eac:	f383 8811 	msr	BASEPRI, r3
 8013eb0:	f3bf 8f6f 	isb	sy
 8013eb4:	f3bf 8f4f 	dsb	sy
 8013eb8:	61fb      	str	r3, [r7, #28]
}
 8013eba:	bf00      	nop
 8013ebc:	e7fe      	b.n	8013ebc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013ebe:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8013ec2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013ec4:	693b      	ldr	r3, [r7, #16]
 8013ec6:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 8013eca:	d00a      	beq.n	8013ee2 <xTaskCreateStatic+0x6a>
	__asm volatile
 8013ecc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8013ed0:	f383 8811 	msr	BASEPRI, r3
 8013ed4:	f3bf 8f6f 	isb	sy
 8013ed8:	f3bf 8f4f 	dsb	sy
 8013edc:	61bb      	str	r3, [r7, #24]
}
 8013ede:	bf00      	nop
 8013ee0:	e7fe      	b.n	8013ee0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013ee2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d01e      	beq.n	8013f28 <xTaskCreateStatic+0xb0>
 8013eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d01b      	beq.n	8013f28 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ef2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ef6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ef8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013efc:	2202      	movs	r2, #2
 8013efe:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013f02:	2300      	movs	r3, #0
 8013f04:	9303      	str	r3, [sp, #12]
 8013f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f08:	9302      	str	r3, [sp, #8]
 8013f0a:	f107 0314 	add.w	r3, r7, #20
 8013f0e:	9301      	str	r3, [sp, #4]
 8013f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f12:	9300      	str	r3, [sp, #0]
 8013f14:	683b      	ldr	r3, [r7, #0]
 8013f16:	687a      	ldr	r2, [r7, #4]
 8013f18:	68b9      	ldr	r1, [r7, #8]
 8013f1a:	68f8      	ldr	r0, [r7, #12]
 8013f1c:	f000 f852 	bl	8013fc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013f20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013f22:	f000 f90b 	bl	801413c <prvAddNewTaskToReadyList>
 8013f26:	e001      	b.n	8013f2c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8013f28:	2300      	movs	r3, #0
 8013f2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013f2c:	697b      	ldr	r3, [r7, #20]
	}
 8013f2e:	4618      	mov	r0, r3
 8013f30:	3728      	adds	r7, #40	; 0x28
 8013f32:	46bd      	mov	sp, r7
 8013f34:	bd80      	pop	{r7, pc}

08013f36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013f36:	b580      	push	{r7, lr}
 8013f38:	b08c      	sub	sp, #48	; 0x30
 8013f3a:	af04      	add	r7, sp, #16
 8013f3c:	60f8      	str	r0, [r7, #12]
 8013f3e:	60b9      	str	r1, [r7, #8]
 8013f40:	603b      	str	r3, [r7, #0]
 8013f42:	4613      	mov	r3, r2
 8013f44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013f46:	88fb      	ldrh	r3, [r7, #6]
 8013f48:	009b      	lsls	r3, r3, #2
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	f7fe fc92 	bl	8012874 <pvPortMalloc>
 8013f50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013f52:	697b      	ldr	r3, [r7, #20]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d00f      	beq.n	8013f78 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013f58:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 8013f5c:	f7fe fc8a 	bl	8012874 <pvPortMalloc>
 8013f60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013f62:	69fb      	ldr	r3, [r7, #28]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d003      	beq.n	8013f70 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013f68:	69fb      	ldr	r3, [r7, #28]
 8013f6a:	697a      	ldr	r2, [r7, #20]
 8013f6c:	631a      	str	r2, [r3, #48]	; 0x30
 8013f6e:	e005      	b.n	8013f7c <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013f70:	6978      	ldr	r0, [r7, #20]
 8013f72:	f7fe fd27 	bl	80129c4 <vPortFree>
 8013f76:	e001      	b.n	8013f7c <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013f78:	2300      	movs	r3, #0
 8013f7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013f7c:	69fb      	ldr	r3, [r7, #28]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d017      	beq.n	8013fb2 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013f82:	69fb      	ldr	r3, [r7, #28]
 8013f84:	2200      	movs	r2, #0
 8013f86:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013f8a:	88fa      	ldrh	r2, [r7, #6]
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	9303      	str	r3, [sp, #12]
 8013f90:	69fb      	ldr	r3, [r7, #28]
 8013f92:	9302      	str	r3, [sp, #8]
 8013f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f96:	9301      	str	r3, [sp, #4]
 8013f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f9a:	9300      	str	r3, [sp, #0]
 8013f9c:	683b      	ldr	r3, [r7, #0]
 8013f9e:	68b9      	ldr	r1, [r7, #8]
 8013fa0:	68f8      	ldr	r0, [r7, #12]
 8013fa2:	f000 f80f 	bl	8013fc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013fa6:	69f8      	ldr	r0, [r7, #28]
 8013fa8:	f000 f8c8 	bl	801413c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013fac:	2301      	movs	r3, #1
 8013fae:	61bb      	str	r3, [r7, #24]
 8013fb0:	e002      	b.n	8013fb8 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8013fb6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013fb8:	69bb      	ldr	r3, [r7, #24]
	}
 8013fba:	4618      	mov	r0, r3
 8013fbc:	3720      	adds	r7, #32
 8013fbe:	46bd      	mov	sp, r7
 8013fc0:	bd80      	pop	{r7, pc}
	...

08013fc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b088      	sub	sp, #32
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	60f8      	str	r0, [r7, #12]
 8013fcc:	60b9      	str	r1, [r7, #8]
 8013fce:	607a      	str	r2, [r7, #4]
 8013fd0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fd4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	009b      	lsls	r3, r3, #2
 8013fda:	461a      	mov	r2, r3
 8013fdc:	21a5      	movs	r1, #165	; 0xa5
 8013fde:	f003 fd23 	bl	8017a28 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013fec:	3b01      	subs	r3, #1
 8013fee:	009b      	lsls	r3, r3, #2
 8013ff0:	4413      	add	r3, r2
 8013ff2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013ff4:	69bb      	ldr	r3, [r7, #24]
 8013ff6:	f023 0307 	bic.w	r3, r3, #7
 8013ffa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013ffc:	69bb      	ldr	r3, [r7, #24]
 8013ffe:	f003 0307 	and.w	r3, r3, #7
 8014002:	2b00      	cmp	r3, #0
 8014004:	d00a      	beq.n	801401c <prvInitialiseNewTask+0x58>
	__asm volatile
 8014006:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801400a:	f383 8811 	msr	BASEPRI, r3
 801400e:	f3bf 8f6f 	isb	sy
 8014012:	f3bf 8f4f 	dsb	sy
 8014016:	617b      	str	r3, [r7, #20]
}
 8014018:	bf00      	nop
 801401a:	e7fe      	b.n	801401a <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 801401c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801401e:	69ba      	ldr	r2, [r7, #24]
 8014020:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014024:	68bb      	ldr	r3, [r7, #8]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d01f      	beq.n	801406a <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801402a:	2300      	movs	r3, #0
 801402c:	61fb      	str	r3, [r7, #28]
 801402e:	e012      	b.n	8014056 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014030:	68ba      	ldr	r2, [r7, #8]
 8014032:	69fb      	ldr	r3, [r7, #28]
 8014034:	4413      	add	r3, r2
 8014036:	7819      	ldrb	r1, [r3, #0]
 8014038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801403a:	69fb      	ldr	r3, [r7, #28]
 801403c:	4413      	add	r3, r2
 801403e:	3334      	adds	r3, #52	; 0x34
 8014040:	460a      	mov	r2, r1
 8014042:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014044:	68ba      	ldr	r2, [r7, #8]
 8014046:	69fb      	ldr	r3, [r7, #28]
 8014048:	4413      	add	r3, r2
 801404a:	781b      	ldrb	r3, [r3, #0]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d006      	beq.n	801405e <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014050:	69fb      	ldr	r3, [r7, #28]
 8014052:	3301      	adds	r3, #1
 8014054:	61fb      	str	r3, [r7, #28]
 8014056:	69fb      	ldr	r3, [r7, #28]
 8014058:	2bfe      	cmp	r3, #254	; 0xfe
 801405a:	d9e9      	bls.n	8014030 <prvInitialiseNewTask+0x6c>
 801405c:	e000      	b.n	8014060 <prvInitialiseNewTask+0x9c>
			{
				break;
 801405e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014062:	2200      	movs	r2, #0
 8014064:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 8014068:	e003      	b.n	8014072 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801406a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801406c:	2200      	movs	r2, #0
 801406e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014074:	2b37      	cmp	r3, #55	; 0x37
 8014076:	d901      	bls.n	801407c <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014078:	2337      	movs	r3, #55	; 0x37
 801407a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801407c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801407e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014080:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014084:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014086:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		pxNewTCB->uxMutexesHeld = 0;
 801408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801408c:	2200      	movs	r2, #0
 801408e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014094:	3304      	adds	r3, #4
 8014096:	4618      	mov	r0, r3
 8014098:	f7fe fe3a 	bl	8012d10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801409c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801409e:	3318      	adds	r3, #24
 80140a0:	4618      	mov	r0, r3
 80140a2:	f7fe fe35 	bl	8012d10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80140a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80140aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80140ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80140b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80140b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80140ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80140bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140be:	2200      	movs	r2, #0
 80140c0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80140c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140c6:	2200      	movs	r2, #0
 80140c8:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80140cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140ce:	2200      	movs	r2, #0
 80140d0:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80140d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140d6:	2200      	movs	r2, #0
 80140d8:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80140dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80140e2:	2260      	movs	r2, #96	; 0x60
 80140e4:	2100      	movs	r1, #0
 80140e6:	4618      	mov	r0, r3
 80140e8:	f003 fc9e 	bl	8017a28 <memset>
 80140ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140ee:	4a10      	ldr	r2, [pc, #64]	; (8014130 <prvInitialiseNewTask+0x16c>)
 80140f0:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 80140f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140f6:	4a0f      	ldr	r2, [pc, #60]	; (8014134 <prvInitialiseNewTask+0x170>)
 80140f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80140fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140fe:	4a0e      	ldr	r2, [pc, #56]	; (8014138 <prvInitialiseNewTask+0x174>)
 8014100:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8014104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014106:	2200      	movs	r2, #0
 8014108:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801410c:	683a      	ldr	r2, [r7, #0]
 801410e:	68f9      	ldr	r1, [r7, #12]
 8014110:	69b8      	ldr	r0, [r7, #24]
 8014112:	f7fe fe91 	bl	8012e38 <pxPortInitialiseStack>
 8014116:	4602      	mov	r2, r0
 8014118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801411a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801411c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801411e:	2b00      	cmp	r3, #0
 8014120:	d002      	beq.n	8014128 <prvInitialiseNewTask+0x164>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014126:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014128:	bf00      	nop
 801412a:	3720      	adds	r7, #32
 801412c:	46bd      	mov	sp, r7
 801412e:	bd80      	pop	{r7, pc}
 8014130:	08018b64 	.word	0x08018b64
 8014134:	08018b84 	.word	0x08018b84
 8014138:	08018b44 	.word	0x08018b44

0801413c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b082      	sub	sp, #8
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014144:	f7fe ffa6 	bl	8013094 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014148:	4b2d      	ldr	r3, [pc, #180]	; (8014200 <prvAddNewTaskToReadyList+0xc4>)
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	3301      	adds	r3, #1
 801414e:	4a2c      	ldr	r2, [pc, #176]	; (8014200 <prvAddNewTaskToReadyList+0xc4>)
 8014150:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014152:	4b2c      	ldr	r3, [pc, #176]	; (8014204 <prvAddNewTaskToReadyList+0xc8>)
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d109      	bne.n	801416e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801415a:	4a2a      	ldr	r2, [pc, #168]	; (8014204 <prvAddNewTaskToReadyList+0xc8>)
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014160:	4b27      	ldr	r3, [pc, #156]	; (8014200 <prvAddNewTaskToReadyList+0xc4>)
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	2b01      	cmp	r3, #1
 8014166:	d110      	bne.n	801418a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014168:	f000 ff12 	bl	8014f90 <prvInitialiseTaskLists>
 801416c:	e00d      	b.n	801418a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801416e:	4b26      	ldr	r3, [pc, #152]	; (8014208 <prvAddNewTaskToReadyList+0xcc>)
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d109      	bne.n	801418a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014176:	4b23      	ldr	r3, [pc, #140]	; (8014204 <prvAddNewTaskToReadyList+0xc8>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014180:	429a      	cmp	r2, r3
 8014182:	d802      	bhi.n	801418a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014184:	4a1f      	ldr	r2, [pc, #124]	; (8014204 <prvAddNewTaskToReadyList+0xc8>)
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801418a:	4b20      	ldr	r3, [pc, #128]	; (801420c <prvAddNewTaskToReadyList+0xd0>)
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	3301      	adds	r3, #1
 8014190:	4a1e      	ldr	r2, [pc, #120]	; (801420c <prvAddNewTaskToReadyList+0xd0>)
 8014192:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014194:	4b1d      	ldr	r3, [pc, #116]	; (801420c <prvAddNewTaskToReadyList+0xd0>)
 8014196:	681a      	ldr	r2, [r3, #0]
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141a2:	4b1b      	ldr	r3, [pc, #108]	; (8014210 <prvAddNewTaskToReadyList+0xd4>)
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	429a      	cmp	r2, r3
 80141a8:	d903      	bls.n	80141b2 <prvAddNewTaskToReadyList+0x76>
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141ae:	4a18      	ldr	r2, [pc, #96]	; (8014210 <prvAddNewTaskToReadyList+0xd4>)
 80141b0:	6013      	str	r3, [r2, #0]
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141b6:	4613      	mov	r3, r2
 80141b8:	009b      	lsls	r3, r3, #2
 80141ba:	4413      	add	r3, r2
 80141bc:	009b      	lsls	r3, r3, #2
 80141be:	4a15      	ldr	r2, [pc, #84]	; (8014214 <prvAddNewTaskToReadyList+0xd8>)
 80141c0:	441a      	add	r2, r3
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	3304      	adds	r3, #4
 80141c6:	4619      	mov	r1, r3
 80141c8:	4610      	mov	r0, r2
 80141ca:	f7fe fdae 	bl	8012d2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80141ce:	f7fe ff91 	bl	80130f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80141d2:	4b0d      	ldr	r3, [pc, #52]	; (8014208 <prvAddNewTaskToReadyList+0xcc>)
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d00e      	beq.n	80141f8 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80141da:	4b0a      	ldr	r3, [pc, #40]	; (8014204 <prvAddNewTaskToReadyList+0xc8>)
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141e4:	429a      	cmp	r2, r3
 80141e6:	d207      	bcs.n	80141f8 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80141e8:	4b0b      	ldr	r3, [pc, #44]	; (8014218 <prvAddNewTaskToReadyList+0xdc>)
 80141ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80141ee:	601a      	str	r2, [r3, #0]
 80141f0:	f3bf 8f4f 	dsb	sy
 80141f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80141f8:	bf00      	nop
 80141fa:	3708      	adds	r7, #8
 80141fc:	46bd      	mov	sp, r7
 80141fe:	bd80      	pop	{r7, pc}
 8014200:	2000d4c4 	.word	0x2000d4c4
 8014204:	2000cfec 	.word	0x2000cfec
 8014208:	2000d4d0 	.word	0x2000d4d0
 801420c:	2000d4e0 	.word	0x2000d4e0
 8014210:	2000d4cc 	.word	0x2000d4cc
 8014214:	2000cff0 	.word	0x2000cff0
 8014218:	e000ed04 	.word	0xe000ed04

0801421c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801421c:	b580      	push	{r7, lr}
 801421e:	b08a      	sub	sp, #40	; 0x28
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
 8014224:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8014226:	2300      	movs	r3, #0
 8014228:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d10a      	bne.n	8014246 <vTaskDelayUntil+0x2a>
	__asm volatile
 8014230:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8014234:	f383 8811 	msr	BASEPRI, r3
 8014238:	f3bf 8f6f 	isb	sy
 801423c:	f3bf 8f4f 	dsb	sy
 8014240:	617b      	str	r3, [r7, #20]
}
 8014242:	bf00      	nop
 8014244:	e7fe      	b.n	8014244 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8014246:	683b      	ldr	r3, [r7, #0]
 8014248:	2b00      	cmp	r3, #0
 801424a:	d10a      	bne.n	8014262 <vTaskDelayUntil+0x46>
	__asm volatile
 801424c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8014250:	f383 8811 	msr	BASEPRI, r3
 8014254:	f3bf 8f6f 	isb	sy
 8014258:	f3bf 8f4f 	dsb	sy
 801425c:	613b      	str	r3, [r7, #16]
}
 801425e:	bf00      	nop
 8014260:	e7fe      	b.n	8014260 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8014262:	4b2a      	ldr	r3, [pc, #168]	; (801430c <vTaskDelayUntil+0xf0>)
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d00a      	beq.n	8014280 <vTaskDelayUntil+0x64>
	__asm volatile
 801426a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801426e:	f383 8811 	msr	BASEPRI, r3
 8014272:	f3bf 8f6f 	isb	sy
 8014276:	f3bf 8f4f 	dsb	sy
 801427a:	60fb      	str	r3, [r7, #12]
}
 801427c:	bf00      	nop
 801427e:	e7fe      	b.n	801427e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8014280:	f000 fa34 	bl	80146ec <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8014284:	4b22      	ldr	r3, [pc, #136]	; (8014310 <vTaskDelayUntil+0xf4>)
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	683a      	ldr	r2, [r7, #0]
 8014290:	4413      	add	r3, r2
 8014292:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	6a3a      	ldr	r2, [r7, #32]
 801429a:	429a      	cmp	r2, r3
 801429c:	d20b      	bcs.n	80142b6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	69fa      	ldr	r2, [r7, #28]
 80142a4:	429a      	cmp	r2, r3
 80142a6:	d211      	bcs.n	80142cc <vTaskDelayUntil+0xb0>
 80142a8:	69fa      	ldr	r2, [r7, #28]
 80142aa:	6a3b      	ldr	r3, [r7, #32]
 80142ac:	429a      	cmp	r2, r3
 80142ae:	d90d      	bls.n	80142cc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80142b0:	2301      	movs	r3, #1
 80142b2:	627b      	str	r3, [r7, #36]	; 0x24
 80142b4:	e00a      	b.n	80142cc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	69fa      	ldr	r2, [r7, #28]
 80142bc:	429a      	cmp	r2, r3
 80142be:	d303      	bcc.n	80142c8 <vTaskDelayUntil+0xac>
 80142c0:	69fa      	ldr	r2, [r7, #28]
 80142c2:	6a3b      	ldr	r3, [r7, #32]
 80142c4:	429a      	cmp	r2, r3
 80142c6:	d901      	bls.n	80142cc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80142c8:	2301      	movs	r3, #1
 80142ca:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	69fa      	ldr	r2, [r7, #28]
 80142d0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80142d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d006      	beq.n	80142e6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80142d8:	69fa      	ldr	r2, [r7, #28]
 80142da:	6a3b      	ldr	r3, [r7, #32]
 80142dc:	1ad3      	subs	r3, r2, r3
 80142de:	2100      	movs	r1, #0
 80142e0:	4618      	mov	r0, r3
 80142e2:	f000 ffab 	bl	801523c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80142e6:	f000 fa47 	bl	8014778 <xTaskResumeAll>
 80142ea:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80142ec:	69bb      	ldr	r3, [r7, #24]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d107      	bne.n	8014302 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80142f2:	4b08      	ldr	r3, [pc, #32]	; (8014314 <vTaskDelayUntil+0xf8>)
 80142f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142f8:	601a      	str	r2, [r3, #0]
 80142fa:	f3bf 8f4f 	dsb	sy
 80142fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014302:	bf00      	nop
 8014304:	3728      	adds	r7, #40	; 0x28
 8014306:	46bd      	mov	sp, r7
 8014308:	bd80      	pop	{r7, pc}
 801430a:	bf00      	nop
 801430c:	2000d4ec 	.word	0x2000d4ec
 8014310:	2000d4c8 	.word	0x2000d4c8
 8014314:	e000ed04 	.word	0xe000ed04

08014318 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8014318:	b580      	push	{r7, lr}
 801431a:	b084      	sub	sp, #16
 801431c:	af00      	add	r7, sp, #0
 801431e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014320:	f7fe feb8 	bl	8013094 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d102      	bne.n	8014330 <vTaskSuspend+0x18>
 801432a:	4b30      	ldr	r3, [pc, #192]	; (80143ec <vTaskSuspend+0xd4>)
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	e000      	b.n	8014332 <vTaskSuspend+0x1a>
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	3304      	adds	r3, #4
 8014338:	4618      	mov	r0, r3
 801433a:	f7fe fd53 	bl	8012de4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014342:	2b00      	cmp	r3, #0
 8014344:	d004      	beq.n	8014350 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	3318      	adds	r3, #24
 801434a:	4618      	mov	r0, r3
 801434c:	f7fe fd4a 	bl	8012de4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	3304      	adds	r3, #4
 8014354:	4619      	mov	r1, r3
 8014356:	4826      	ldr	r0, [pc, #152]	; (80143f0 <vTaskSuspend+0xd8>)
 8014358:	f7fe fce7 	bl	8012d2a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8014362:	b2db      	uxtb	r3, r3
 8014364:	2b01      	cmp	r3, #1
 8014366:	d103      	bne.n	8014370 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	2200      	movs	r2, #0
 801436c:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014370:	f7fe fec0 	bl	80130f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014374:	4b1f      	ldr	r3, [pc, #124]	; (80143f4 <vTaskSuspend+0xdc>)
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d005      	beq.n	8014388 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801437c:	f7fe fe8a 	bl	8013094 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8014380:	f000 feaa 	bl	80150d8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8014384:	f7fe feb6 	bl	80130f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8014388:	4b18      	ldr	r3, [pc, #96]	; (80143ec <vTaskSuspend+0xd4>)
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	68fa      	ldr	r2, [r7, #12]
 801438e:	429a      	cmp	r2, r3
 8014390:	d127      	bne.n	80143e2 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8014392:	4b18      	ldr	r3, [pc, #96]	; (80143f4 <vTaskSuspend+0xdc>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d017      	beq.n	80143ca <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801439a:	4b17      	ldr	r3, [pc, #92]	; (80143f8 <vTaskSuspend+0xe0>)
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d00a      	beq.n	80143b8 <vTaskSuspend+0xa0>
	__asm volatile
 80143a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80143a6:	f383 8811 	msr	BASEPRI, r3
 80143aa:	f3bf 8f6f 	isb	sy
 80143ae:	f3bf 8f4f 	dsb	sy
 80143b2:	60bb      	str	r3, [r7, #8]
}
 80143b4:	bf00      	nop
 80143b6:	e7fe      	b.n	80143b6 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80143b8:	4b10      	ldr	r3, [pc, #64]	; (80143fc <vTaskSuspend+0xe4>)
 80143ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143be:	601a      	str	r2, [r3, #0]
 80143c0:	f3bf 8f4f 	dsb	sy
 80143c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80143c8:	e00b      	b.n	80143e2 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80143ca:	4b09      	ldr	r3, [pc, #36]	; (80143f0 <vTaskSuspend+0xd8>)
 80143cc:	681a      	ldr	r2, [r3, #0]
 80143ce:	4b0c      	ldr	r3, [pc, #48]	; (8014400 <vTaskSuspend+0xe8>)
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	429a      	cmp	r2, r3
 80143d4:	d103      	bne.n	80143de <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80143d6:	4b05      	ldr	r3, [pc, #20]	; (80143ec <vTaskSuspend+0xd4>)
 80143d8:	2200      	movs	r2, #0
 80143da:	601a      	str	r2, [r3, #0]
	}
 80143dc:	e001      	b.n	80143e2 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80143de:	f000 fb75 	bl	8014acc <vTaskSwitchContext>
	}
 80143e2:	bf00      	nop
 80143e4:	3710      	adds	r7, #16
 80143e6:	46bd      	mov	sp, r7
 80143e8:	bd80      	pop	{r7, pc}
 80143ea:	bf00      	nop
 80143ec:	2000cfec 	.word	0x2000cfec
 80143f0:	2000d4ac 	.word	0x2000d4ac
 80143f4:	2000d4d0 	.word	0x2000d4d0
 80143f8:	2000d4ec 	.word	0x2000d4ec
 80143fc:	e000ed04 	.word	0xe000ed04
 8014400:	2000d4c4 	.word	0x2000d4c4

08014404 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8014404:	b480      	push	{r7}
 8014406:	b087      	sub	sp, #28
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 801440c:	2300      	movs	r3, #0
 801440e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d10a      	bne.n	8014430 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801441a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801441e:	f383 8811 	msr	BASEPRI, r3
 8014422:	f3bf 8f6f 	isb	sy
 8014426:	f3bf 8f4f 	dsb	sy
 801442a:	60fb      	str	r3, [r7, #12]
}
 801442c:	bf00      	nop
 801442e:	e7fe      	b.n	801442e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014430:	693b      	ldr	r3, [r7, #16]
 8014432:	695b      	ldr	r3, [r3, #20]
 8014434:	4a0a      	ldr	r2, [pc, #40]	; (8014460 <prvTaskIsTaskSuspended+0x5c>)
 8014436:	4293      	cmp	r3, r2
 8014438:	d10a      	bne.n	8014450 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801443a:	693b      	ldr	r3, [r7, #16]
 801443c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801443e:	4a09      	ldr	r2, [pc, #36]	; (8014464 <prvTaskIsTaskSuspended+0x60>)
 8014440:	4293      	cmp	r3, r2
 8014442:	d005      	beq.n	8014450 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8014444:	693b      	ldr	r3, [r7, #16]
 8014446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014448:	2b00      	cmp	r3, #0
 801444a:	d101      	bne.n	8014450 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 801444c:	2301      	movs	r3, #1
 801444e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014450:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014452:	4618      	mov	r0, r3
 8014454:	371c      	adds	r7, #28
 8014456:	46bd      	mov	sp, r7
 8014458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801445c:	4770      	bx	lr
 801445e:	bf00      	nop
 8014460:	2000d4ac 	.word	0x2000d4ac
 8014464:	2000d480 	.word	0x2000d480

08014468 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8014468:	b580      	push	{r7, lr}
 801446a:	b084      	sub	sp, #16
 801446c:	af00      	add	r7, sp, #0
 801446e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d10a      	bne.n	8014490 <vTaskResume+0x28>
	__asm volatile
 801447a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801447e:	f383 8811 	msr	BASEPRI, r3
 8014482:	f3bf 8f6f 	isb	sy
 8014486:	f3bf 8f4f 	dsb	sy
 801448a:	60bb      	str	r3, [r7, #8]
}
 801448c:	bf00      	nop
 801448e:	e7fe      	b.n	801448e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8014490:	4b20      	ldr	r3, [pc, #128]	; (8014514 <vTaskResume+0xac>)
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	68fa      	ldr	r2, [r7, #12]
 8014496:	429a      	cmp	r2, r3
 8014498:	d038      	beq.n	801450c <vTaskResume+0xa4>
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d035      	beq.n	801450c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80144a0:	f7fe fdf8 	bl	8013094 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80144a4:	68f8      	ldr	r0, [r7, #12]
 80144a6:	f7ff ffad 	bl	8014404 <prvTaskIsTaskSuspended>
 80144aa:	4603      	mov	r3, r0
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d02b      	beq.n	8014508 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	3304      	adds	r3, #4
 80144b4:	4618      	mov	r0, r3
 80144b6:	f7fe fc95 	bl	8012de4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144be:	4b16      	ldr	r3, [pc, #88]	; (8014518 <vTaskResume+0xb0>)
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	429a      	cmp	r2, r3
 80144c4:	d903      	bls.n	80144ce <vTaskResume+0x66>
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144ca:	4a13      	ldr	r2, [pc, #76]	; (8014518 <vTaskResume+0xb0>)
 80144cc:	6013      	str	r3, [r2, #0]
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144d2:	4613      	mov	r3, r2
 80144d4:	009b      	lsls	r3, r3, #2
 80144d6:	4413      	add	r3, r2
 80144d8:	009b      	lsls	r3, r3, #2
 80144da:	4a10      	ldr	r2, [pc, #64]	; (801451c <vTaskResume+0xb4>)
 80144dc:	441a      	add	r2, r3
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	3304      	adds	r3, #4
 80144e2:	4619      	mov	r1, r3
 80144e4:	4610      	mov	r0, r2
 80144e6:	f7fe fc20 	bl	8012d2a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144ee:	4b09      	ldr	r3, [pc, #36]	; (8014514 <vTaskResume+0xac>)
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144f4:	429a      	cmp	r2, r3
 80144f6:	d307      	bcc.n	8014508 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80144f8:	4b09      	ldr	r3, [pc, #36]	; (8014520 <vTaskResume+0xb8>)
 80144fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144fe:	601a      	str	r2, [r3, #0]
 8014500:	f3bf 8f4f 	dsb	sy
 8014504:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8014508:	f7fe fdf4 	bl	80130f4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801450c:	bf00      	nop
 801450e:	3710      	adds	r7, #16
 8014510:	46bd      	mov	sp, r7
 8014512:	bd80      	pop	{r7, pc}
 8014514:	2000cfec 	.word	0x2000cfec
 8014518:	2000d4cc 	.word	0x2000d4cc
 801451c:	2000cff0 	.word	0x2000cff0
 8014520:	e000ed04 	.word	0xe000ed04

08014524 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8014524:	b580      	push	{r7, lr}
 8014526:	b08a      	sub	sp, #40	; 0x28
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 801452c:	2300      	movs	r3, #0
 801452e:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d10a      	bne.n	8014550 <xTaskResumeFromISR+0x2c>
	__asm volatile
 801453a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801453e:	f383 8811 	msr	BASEPRI, r3
 8014542:	f3bf 8f6f 	isb	sy
 8014546:	f3bf 8f4f 	dsb	sy
 801454a:	61bb      	str	r3, [r7, #24]
}
 801454c:	bf00      	nop
 801454e:	e7fe      	b.n	801454e <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014550:	f7fe ff66 	bl	8013420 <vPortValidateInterruptPriority>
	__asm volatile
 8014554:	f3ef 8211 	mrs	r2, BASEPRI
 8014558:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801455c:	f383 8811 	msr	BASEPRI, r3
 8014560:	f3bf 8f6f 	isb	sy
 8014564:	f3bf 8f4f 	dsb	sy
 8014568:	617a      	str	r2, [r7, #20]
 801456a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801456c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801456e:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8014570:	6a38      	ldr	r0, [r7, #32]
 8014572:	f7ff ff47 	bl	8014404 <prvTaskIsTaskSuspended>
 8014576:	4603      	mov	r3, r0
 8014578:	2b00      	cmp	r3, #0
 801457a:	d030      	beq.n	80145de <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801457c:	4b1d      	ldr	r3, [pc, #116]	; (80145f4 <xTaskResumeFromISR+0xd0>)
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d126      	bne.n	80145d2 <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014584:	6a3b      	ldr	r3, [r7, #32]
 8014586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014588:	4b1b      	ldr	r3, [pc, #108]	; (80145f8 <xTaskResumeFromISR+0xd4>)
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801458e:	429a      	cmp	r2, r3
 8014590:	d301      	bcc.n	8014596 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8014592:	2301      	movs	r3, #1
 8014594:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014596:	6a3b      	ldr	r3, [r7, #32]
 8014598:	3304      	adds	r3, #4
 801459a:	4618      	mov	r0, r3
 801459c:	f7fe fc22 	bl	8012de4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80145a0:	6a3b      	ldr	r3, [r7, #32]
 80145a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145a4:	4b15      	ldr	r3, [pc, #84]	; (80145fc <xTaskResumeFromISR+0xd8>)
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	429a      	cmp	r2, r3
 80145aa:	d903      	bls.n	80145b4 <xTaskResumeFromISR+0x90>
 80145ac:	6a3b      	ldr	r3, [r7, #32]
 80145ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145b0:	4a12      	ldr	r2, [pc, #72]	; (80145fc <xTaskResumeFromISR+0xd8>)
 80145b2:	6013      	str	r3, [r2, #0]
 80145b4:	6a3b      	ldr	r3, [r7, #32]
 80145b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145b8:	4613      	mov	r3, r2
 80145ba:	009b      	lsls	r3, r3, #2
 80145bc:	4413      	add	r3, r2
 80145be:	009b      	lsls	r3, r3, #2
 80145c0:	4a0f      	ldr	r2, [pc, #60]	; (8014600 <xTaskResumeFromISR+0xdc>)
 80145c2:	441a      	add	r2, r3
 80145c4:	6a3b      	ldr	r3, [r7, #32]
 80145c6:	3304      	adds	r3, #4
 80145c8:	4619      	mov	r1, r3
 80145ca:	4610      	mov	r0, r2
 80145cc:	f7fe fbad 	bl	8012d2a <vListInsertEnd>
 80145d0:	e005      	b.n	80145de <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80145d2:	6a3b      	ldr	r3, [r7, #32]
 80145d4:	3318      	adds	r3, #24
 80145d6:	4619      	mov	r1, r3
 80145d8:	480a      	ldr	r0, [pc, #40]	; (8014604 <xTaskResumeFromISR+0xe0>)
 80145da:	f7fe fba6 	bl	8012d2a <vListInsertEnd>
 80145de:	69fb      	ldr	r3, [r7, #28]
 80145e0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	f383 8811 	msr	BASEPRI, r3
}
 80145e8:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80145ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80145ec:	4618      	mov	r0, r3
 80145ee:	3728      	adds	r7, #40	; 0x28
 80145f0:	46bd      	mov	sp, r7
 80145f2:	bd80      	pop	{r7, pc}
 80145f4:	2000d4ec 	.word	0x2000d4ec
 80145f8:	2000cfec 	.word	0x2000cfec
 80145fc:	2000d4cc 	.word	0x2000d4cc
 8014600:	2000cff0 	.word	0x2000cff0
 8014604:	2000d480 	.word	0x2000d480

08014608 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b08a      	sub	sp, #40	; 0x28
 801460c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801460e:	2300      	movs	r3, #0
 8014610:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014612:	2300      	movs	r3, #0
 8014614:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014616:	463a      	mov	r2, r7
 8014618:	1d39      	adds	r1, r7, #4
 801461a:	f107 0308 	add.w	r3, r7, #8
 801461e:	4618      	mov	r0, r3
 8014620:	f7fe f8f4 	bl	801280c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014624:	6839      	ldr	r1, [r7, #0]
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	68ba      	ldr	r2, [r7, #8]
 801462a:	9202      	str	r2, [sp, #8]
 801462c:	9301      	str	r3, [sp, #4]
 801462e:	2300      	movs	r3, #0
 8014630:	9300      	str	r3, [sp, #0]
 8014632:	2300      	movs	r3, #0
 8014634:	460a      	mov	r2, r1
 8014636:	4925      	ldr	r1, [pc, #148]	; (80146cc <vTaskStartScheduler+0xc4>)
 8014638:	4825      	ldr	r0, [pc, #148]	; (80146d0 <vTaskStartScheduler+0xc8>)
 801463a:	f7ff fc1d 	bl	8013e78 <xTaskCreateStatic>
 801463e:	4603      	mov	r3, r0
 8014640:	4a24      	ldr	r2, [pc, #144]	; (80146d4 <vTaskStartScheduler+0xcc>)
 8014642:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014644:	4b23      	ldr	r3, [pc, #140]	; (80146d4 <vTaskStartScheduler+0xcc>)
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d002      	beq.n	8014652 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801464c:	2301      	movs	r3, #1
 801464e:	617b      	str	r3, [r7, #20]
 8014650:	e001      	b.n	8014656 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014652:	2300      	movs	r3, #0
 8014654:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014656:	697b      	ldr	r3, [r7, #20]
 8014658:	2b01      	cmp	r3, #1
 801465a:	d102      	bne.n	8014662 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801465c:	f000 fe48 	bl	80152f0 <xTimerCreateTimerTask>
 8014660:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014662:	697b      	ldr	r3, [r7, #20]
 8014664:	2b01      	cmp	r3, #1
 8014666:	d11e      	bne.n	80146a6 <vTaskStartScheduler+0x9e>
	__asm volatile
 8014668:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801466c:	f383 8811 	msr	BASEPRI, r3
 8014670:	f3bf 8f6f 	isb	sy
 8014674:	f3bf 8f4f 	dsb	sy
 8014678:	613b      	str	r3, [r7, #16]
}
 801467a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801467c:	4b16      	ldr	r3, [pc, #88]	; (80146d8 <vTaskStartScheduler+0xd0>)
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014684:	4a15      	ldr	r2, [pc, #84]	; (80146dc <vTaskStartScheduler+0xd4>)
 8014686:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014688:	4b15      	ldr	r3, [pc, #84]	; (80146e0 <vTaskStartScheduler+0xd8>)
 801468a:	f04f 32ff 	mov.w	r2, #4294967295
 801468e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014690:	4b14      	ldr	r3, [pc, #80]	; (80146e4 <vTaskStartScheduler+0xdc>)
 8014692:	2201      	movs	r2, #1
 8014694:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014696:	4b14      	ldr	r3, [pc, #80]	; (80146e8 <vTaskStartScheduler+0xe0>)
 8014698:	2200      	movs	r2, #0
 801469a:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 801469c:	f7f1 fc16 	bl	8005ecc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80146a0:	f7fe fc56 	bl	8012f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80146a4:	e00e      	b.n	80146c4 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80146a6:	697b      	ldr	r3, [r7, #20]
 80146a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146ac:	d10a      	bne.n	80146c4 <vTaskStartScheduler+0xbc>
	__asm volatile
 80146ae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80146b2:	f383 8811 	msr	BASEPRI, r3
 80146b6:	f3bf 8f6f 	isb	sy
 80146ba:	f3bf 8f4f 	dsb	sy
 80146be:	60fb      	str	r3, [r7, #12]
}
 80146c0:	bf00      	nop
 80146c2:	e7fe      	b.n	80146c2 <vTaskStartScheduler+0xba>
}
 80146c4:	bf00      	nop
 80146c6:	3718      	adds	r7, #24
 80146c8:	46bd      	mov	sp, r7
 80146ca:	bd80      	pop	{r7, pc}
 80146cc:	0801885c 	.word	0x0801885c
 80146d0:	08014ed1 	.word	0x08014ed1
 80146d4:	2000d4e8 	.word	0x2000d4e8
 80146d8:	2000cfec 	.word	0x2000cfec
 80146dc:	2000006c 	.word	0x2000006c
 80146e0:	2000d4e4 	.word	0x2000d4e4
 80146e4:	2000d4d0 	.word	0x2000d4d0
 80146e8:	2000d4c8 	.word	0x2000d4c8

080146ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80146ec:	b480      	push	{r7}
 80146ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80146f0:	4b04      	ldr	r3, [pc, #16]	; (8014704 <vTaskSuspendAll+0x18>)
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	3301      	adds	r3, #1
 80146f6:	4a03      	ldr	r2, [pc, #12]	; (8014704 <vTaskSuspendAll+0x18>)
 80146f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80146fa:	bf00      	nop
 80146fc:	46bd      	mov	sp, r7
 80146fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014702:	4770      	bx	lr
 8014704:	2000d4ec 	.word	0x2000d4ec

08014708 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8014708:	b480      	push	{r7}
 801470a:	b083      	sub	sp, #12
 801470c:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 801470e:	2300      	movs	r3, #0
 8014710:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8014712:	4b14      	ldr	r3, [pc, #80]	; (8014764 <prvGetExpectedIdleTime+0x5c>)
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d001      	beq.n	801471e <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 801471a:	2301      	movs	r3, #1
 801471c:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 801471e:	4b12      	ldr	r3, [pc, #72]	; (8014768 <prvGetExpectedIdleTime+0x60>)
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014724:	2b00      	cmp	r3, #0
 8014726:	d002      	beq.n	801472e <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8014728:	2300      	movs	r3, #0
 801472a:	607b      	str	r3, [r7, #4]
 801472c:	e012      	b.n	8014754 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 801472e:	4b0f      	ldr	r3, [pc, #60]	; (801476c <prvGetExpectedIdleTime+0x64>)
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	2b01      	cmp	r3, #1
 8014734:	d902      	bls.n	801473c <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8014736:	2300      	movs	r3, #0
 8014738:	607b      	str	r3, [r7, #4]
 801473a:	e00b      	b.n	8014754 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 801473c:	683b      	ldr	r3, [r7, #0]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d002      	beq.n	8014748 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8014742:	2300      	movs	r3, #0
 8014744:	607b      	str	r3, [r7, #4]
 8014746:	e005      	b.n	8014754 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8014748:	4b09      	ldr	r3, [pc, #36]	; (8014770 <prvGetExpectedIdleTime+0x68>)
 801474a:	681a      	ldr	r2, [r3, #0]
 801474c:	4b09      	ldr	r3, [pc, #36]	; (8014774 <prvGetExpectedIdleTime+0x6c>)
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	1ad3      	subs	r3, r2, r3
 8014752:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8014754:	687b      	ldr	r3, [r7, #4]
	}
 8014756:	4618      	mov	r0, r3
 8014758:	370c      	adds	r7, #12
 801475a:	46bd      	mov	sp, r7
 801475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014760:	4770      	bx	lr
 8014762:	bf00      	nop
 8014764:	2000d4cc 	.word	0x2000d4cc
 8014768:	2000cfec 	.word	0x2000cfec
 801476c:	2000cff0 	.word	0x2000cff0
 8014770:	2000d4e4 	.word	0x2000d4e4
 8014774:	2000d4c8 	.word	0x2000d4c8

08014778 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b084      	sub	sp, #16
 801477c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801477e:	2300      	movs	r3, #0
 8014780:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014782:	2300      	movs	r3, #0
 8014784:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014786:	4b42      	ldr	r3, [pc, #264]	; (8014890 <xTaskResumeAll+0x118>)
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d10a      	bne.n	80147a4 <xTaskResumeAll+0x2c>
	__asm volatile
 801478e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8014792:	f383 8811 	msr	BASEPRI, r3
 8014796:	f3bf 8f6f 	isb	sy
 801479a:	f3bf 8f4f 	dsb	sy
 801479e:	603b      	str	r3, [r7, #0]
}
 80147a0:	bf00      	nop
 80147a2:	e7fe      	b.n	80147a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80147a4:	f7fe fc76 	bl	8013094 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80147a8:	4b39      	ldr	r3, [pc, #228]	; (8014890 <xTaskResumeAll+0x118>)
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	3b01      	subs	r3, #1
 80147ae:	4a38      	ldr	r2, [pc, #224]	; (8014890 <xTaskResumeAll+0x118>)
 80147b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80147b2:	4b37      	ldr	r3, [pc, #220]	; (8014890 <xTaskResumeAll+0x118>)
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d162      	bne.n	8014880 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80147ba:	4b36      	ldr	r3, [pc, #216]	; (8014894 <xTaskResumeAll+0x11c>)
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d05e      	beq.n	8014880 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80147c2:	e02f      	b.n	8014824 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80147c4:	4b34      	ldr	r3, [pc, #208]	; (8014898 <xTaskResumeAll+0x120>)
 80147c6:	68db      	ldr	r3, [r3, #12]
 80147c8:	68db      	ldr	r3, [r3, #12]
 80147ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	3318      	adds	r3, #24
 80147d0:	4618      	mov	r0, r3
 80147d2:	f7fe fb07 	bl	8012de4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	3304      	adds	r3, #4
 80147da:	4618      	mov	r0, r3
 80147dc:	f7fe fb02 	bl	8012de4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147e4:	4b2d      	ldr	r3, [pc, #180]	; (801489c <xTaskResumeAll+0x124>)
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	429a      	cmp	r2, r3
 80147ea:	d903      	bls.n	80147f4 <xTaskResumeAll+0x7c>
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147f0:	4a2a      	ldr	r2, [pc, #168]	; (801489c <xTaskResumeAll+0x124>)
 80147f2:	6013      	str	r3, [r2, #0]
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147f8:	4613      	mov	r3, r2
 80147fa:	009b      	lsls	r3, r3, #2
 80147fc:	4413      	add	r3, r2
 80147fe:	009b      	lsls	r3, r3, #2
 8014800:	4a27      	ldr	r2, [pc, #156]	; (80148a0 <xTaskResumeAll+0x128>)
 8014802:	441a      	add	r2, r3
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	3304      	adds	r3, #4
 8014808:	4619      	mov	r1, r3
 801480a:	4610      	mov	r0, r2
 801480c:	f7fe fa8d 	bl	8012d2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014814:	4b23      	ldr	r3, [pc, #140]	; (80148a4 <xTaskResumeAll+0x12c>)
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801481a:	429a      	cmp	r2, r3
 801481c:	d302      	bcc.n	8014824 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801481e:	4b22      	ldr	r3, [pc, #136]	; (80148a8 <xTaskResumeAll+0x130>)
 8014820:	2201      	movs	r2, #1
 8014822:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014824:	4b1c      	ldr	r3, [pc, #112]	; (8014898 <xTaskResumeAll+0x120>)
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d1cb      	bne.n	80147c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d001      	beq.n	8014836 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014832:	f000 fc51 	bl	80150d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014836:	4b1d      	ldr	r3, [pc, #116]	; (80148ac <xTaskResumeAll+0x134>)
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d010      	beq.n	8014864 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014842:	f000 f881 	bl	8014948 <xTaskIncrementTick>
 8014846:	4603      	mov	r3, r0
 8014848:	2b00      	cmp	r3, #0
 801484a:	d002      	beq.n	8014852 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801484c:	4b16      	ldr	r3, [pc, #88]	; (80148a8 <xTaskResumeAll+0x130>)
 801484e:	2201      	movs	r2, #1
 8014850:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	3b01      	subs	r3, #1
 8014856:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d1f1      	bne.n	8014842 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801485e:	4b13      	ldr	r3, [pc, #76]	; (80148ac <xTaskResumeAll+0x134>)
 8014860:	2200      	movs	r2, #0
 8014862:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014864:	4b10      	ldr	r3, [pc, #64]	; (80148a8 <xTaskResumeAll+0x130>)
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d009      	beq.n	8014880 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801486c:	2301      	movs	r3, #1
 801486e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014870:	4b0f      	ldr	r3, [pc, #60]	; (80148b0 <xTaskResumeAll+0x138>)
 8014872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014876:	601a      	str	r2, [r3, #0]
 8014878:	f3bf 8f4f 	dsb	sy
 801487c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014880:	f7fe fc38 	bl	80130f4 <vPortExitCritical>

	return xAlreadyYielded;
 8014884:	68bb      	ldr	r3, [r7, #8]
}
 8014886:	4618      	mov	r0, r3
 8014888:	3710      	adds	r7, #16
 801488a:	46bd      	mov	sp, r7
 801488c:	bd80      	pop	{r7, pc}
 801488e:	bf00      	nop
 8014890:	2000d4ec 	.word	0x2000d4ec
 8014894:	2000d4c4 	.word	0x2000d4c4
 8014898:	2000d480 	.word	0x2000d480
 801489c:	2000d4cc 	.word	0x2000d4cc
 80148a0:	2000cff0 	.word	0x2000cff0
 80148a4:	2000cfec 	.word	0x2000cfec
 80148a8:	2000d4d8 	.word	0x2000d4d8
 80148ac:	2000d4d4 	.word	0x2000d4d4
 80148b0:	e000ed04 	.word	0xe000ed04

080148b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80148b4:	b480      	push	{r7}
 80148b6:	b083      	sub	sp, #12
 80148b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80148ba:	4b05      	ldr	r3, [pc, #20]	; (80148d0 <xTaskGetTickCount+0x1c>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80148c0:	687b      	ldr	r3, [r7, #4]
}
 80148c2:	4618      	mov	r0, r3
 80148c4:	370c      	adds	r7, #12
 80148c6:	46bd      	mov	sp, r7
 80148c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148cc:	4770      	bx	lr
 80148ce:	bf00      	nop
 80148d0:	2000d4c8 	.word	0x2000d4c8

080148d4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b082      	sub	sp, #8
 80148d8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80148da:	f7fe fda1 	bl	8013420 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80148de:	2300      	movs	r3, #0
 80148e0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80148e2:	4b04      	ldr	r3, [pc, #16]	; (80148f4 <xTaskGetTickCountFromISR+0x20>)
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80148e8:	683b      	ldr	r3, [r7, #0]
}
 80148ea:	4618      	mov	r0, r3
 80148ec:	3708      	adds	r7, #8
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bd80      	pop	{r7, pc}
 80148f2:	bf00      	nop
 80148f4:	2000d4c8 	.word	0x2000d4c8

080148f8 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 80148f8:	b480      	push	{r7}
 80148fa:	b085      	sub	sp, #20
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8014900:	4b0f      	ldr	r3, [pc, #60]	; (8014940 <vTaskStepTick+0x48>)
 8014902:	681a      	ldr	r2, [r3, #0]
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	441a      	add	r2, r3
 8014908:	4b0e      	ldr	r3, [pc, #56]	; (8014944 <vTaskStepTick+0x4c>)
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	429a      	cmp	r2, r3
 801490e:	d90a      	bls.n	8014926 <vTaskStepTick+0x2e>
	__asm volatile
 8014910:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8014914:	f383 8811 	msr	BASEPRI, r3
 8014918:	f3bf 8f6f 	isb	sy
 801491c:	f3bf 8f4f 	dsb	sy
 8014920:	60fb      	str	r3, [r7, #12]
}
 8014922:	bf00      	nop
 8014924:	e7fe      	b.n	8014924 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 8014926:	4b06      	ldr	r3, [pc, #24]	; (8014940 <vTaskStepTick+0x48>)
 8014928:	681a      	ldr	r2, [r3, #0]
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	4413      	add	r3, r2
 801492e:	4a04      	ldr	r2, [pc, #16]	; (8014940 <vTaskStepTick+0x48>)
 8014930:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8014932:	bf00      	nop
 8014934:	3714      	adds	r7, #20
 8014936:	46bd      	mov	sp, r7
 8014938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801493c:	4770      	bx	lr
 801493e:	bf00      	nop
 8014940:	2000d4c8 	.word	0x2000d4c8
 8014944:	2000d4e4 	.word	0x2000d4e4

08014948 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b086      	sub	sp, #24
 801494c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801494e:	2300      	movs	r3, #0
 8014950:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014952:	4b53      	ldr	r3, [pc, #332]	; (8014aa0 <xTaskIncrementTick+0x158>)
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	2b00      	cmp	r3, #0
 8014958:	f040 8095 	bne.w	8014a86 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801495c:	4b51      	ldr	r3, [pc, #324]	; (8014aa4 <xTaskIncrementTick+0x15c>)
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	3301      	adds	r3, #1
 8014962:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014964:	4a4f      	ldr	r2, [pc, #316]	; (8014aa4 <xTaskIncrementTick+0x15c>)
 8014966:	693b      	ldr	r3, [r7, #16]
 8014968:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801496a:	693b      	ldr	r3, [r7, #16]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d120      	bne.n	80149b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014970:	4b4d      	ldr	r3, [pc, #308]	; (8014aa8 <xTaskIncrementTick+0x160>)
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d00a      	beq.n	8014990 <xTaskIncrementTick+0x48>
	__asm volatile
 801497a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801497e:	f383 8811 	msr	BASEPRI, r3
 8014982:	f3bf 8f6f 	isb	sy
 8014986:	f3bf 8f4f 	dsb	sy
 801498a:	603b      	str	r3, [r7, #0]
}
 801498c:	bf00      	nop
 801498e:	e7fe      	b.n	801498e <xTaskIncrementTick+0x46>
 8014990:	4b45      	ldr	r3, [pc, #276]	; (8014aa8 <xTaskIncrementTick+0x160>)
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	60fb      	str	r3, [r7, #12]
 8014996:	4b45      	ldr	r3, [pc, #276]	; (8014aac <xTaskIncrementTick+0x164>)
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	4a43      	ldr	r2, [pc, #268]	; (8014aa8 <xTaskIncrementTick+0x160>)
 801499c:	6013      	str	r3, [r2, #0]
 801499e:	4a43      	ldr	r2, [pc, #268]	; (8014aac <xTaskIncrementTick+0x164>)
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	6013      	str	r3, [r2, #0]
 80149a4:	4b42      	ldr	r3, [pc, #264]	; (8014ab0 <xTaskIncrementTick+0x168>)
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	3301      	adds	r3, #1
 80149aa:	4a41      	ldr	r2, [pc, #260]	; (8014ab0 <xTaskIncrementTick+0x168>)
 80149ac:	6013      	str	r3, [r2, #0]
 80149ae:	f000 fb93 	bl	80150d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80149b2:	4b40      	ldr	r3, [pc, #256]	; (8014ab4 <xTaskIncrementTick+0x16c>)
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	693a      	ldr	r2, [r7, #16]
 80149b8:	429a      	cmp	r2, r3
 80149ba:	d349      	bcc.n	8014a50 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80149bc:	4b3a      	ldr	r3, [pc, #232]	; (8014aa8 <xTaskIncrementTick+0x160>)
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d104      	bne.n	80149d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80149c6:	4b3b      	ldr	r3, [pc, #236]	; (8014ab4 <xTaskIncrementTick+0x16c>)
 80149c8:	f04f 32ff 	mov.w	r2, #4294967295
 80149cc:	601a      	str	r2, [r3, #0]
					break;
 80149ce:	e03f      	b.n	8014a50 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80149d0:	4b35      	ldr	r3, [pc, #212]	; (8014aa8 <xTaskIncrementTick+0x160>)
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	68db      	ldr	r3, [r3, #12]
 80149d6:	68db      	ldr	r3, [r3, #12]
 80149d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80149da:	68bb      	ldr	r3, [r7, #8]
 80149dc:	685b      	ldr	r3, [r3, #4]
 80149de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80149e0:	693a      	ldr	r2, [r7, #16]
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	429a      	cmp	r2, r3
 80149e6:	d203      	bcs.n	80149f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80149e8:	4a32      	ldr	r2, [pc, #200]	; (8014ab4 <xTaskIncrementTick+0x16c>)
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80149ee:	e02f      	b.n	8014a50 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80149f0:	68bb      	ldr	r3, [r7, #8]
 80149f2:	3304      	adds	r3, #4
 80149f4:	4618      	mov	r0, r3
 80149f6:	f7fe f9f5 	bl	8012de4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80149fa:	68bb      	ldr	r3, [r7, #8]
 80149fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d004      	beq.n	8014a0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014a02:	68bb      	ldr	r3, [r7, #8]
 8014a04:	3318      	adds	r3, #24
 8014a06:	4618      	mov	r0, r3
 8014a08:	f7fe f9ec 	bl	8012de4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014a0c:	68bb      	ldr	r3, [r7, #8]
 8014a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a10:	4b29      	ldr	r3, [pc, #164]	; (8014ab8 <xTaskIncrementTick+0x170>)
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	429a      	cmp	r2, r3
 8014a16:	d903      	bls.n	8014a20 <xTaskIncrementTick+0xd8>
 8014a18:	68bb      	ldr	r3, [r7, #8]
 8014a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a1c:	4a26      	ldr	r2, [pc, #152]	; (8014ab8 <xTaskIncrementTick+0x170>)
 8014a1e:	6013      	str	r3, [r2, #0]
 8014a20:	68bb      	ldr	r3, [r7, #8]
 8014a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a24:	4613      	mov	r3, r2
 8014a26:	009b      	lsls	r3, r3, #2
 8014a28:	4413      	add	r3, r2
 8014a2a:	009b      	lsls	r3, r3, #2
 8014a2c:	4a23      	ldr	r2, [pc, #140]	; (8014abc <xTaskIncrementTick+0x174>)
 8014a2e:	441a      	add	r2, r3
 8014a30:	68bb      	ldr	r3, [r7, #8]
 8014a32:	3304      	adds	r3, #4
 8014a34:	4619      	mov	r1, r3
 8014a36:	4610      	mov	r0, r2
 8014a38:	f7fe f977 	bl	8012d2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014a3c:	68bb      	ldr	r3, [r7, #8]
 8014a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a40:	4b1f      	ldr	r3, [pc, #124]	; (8014ac0 <xTaskIncrementTick+0x178>)
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a46:	429a      	cmp	r2, r3
 8014a48:	d3b8      	bcc.n	80149bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014a4a:	2301      	movs	r3, #1
 8014a4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014a4e:	e7b5      	b.n	80149bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014a50:	4b1b      	ldr	r3, [pc, #108]	; (8014ac0 <xTaskIncrementTick+0x178>)
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a56:	4919      	ldr	r1, [pc, #100]	; (8014abc <xTaskIncrementTick+0x174>)
 8014a58:	4613      	mov	r3, r2
 8014a5a:	009b      	lsls	r3, r3, #2
 8014a5c:	4413      	add	r3, r2
 8014a5e:	009b      	lsls	r3, r3, #2
 8014a60:	440b      	add	r3, r1
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	2b01      	cmp	r3, #1
 8014a66:	d901      	bls.n	8014a6c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014a68:	2301      	movs	r3, #1
 8014a6a:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8014a6c:	4b15      	ldr	r3, [pc, #84]	; (8014ac4 <xTaskIncrementTick+0x17c>)
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d101      	bne.n	8014a78 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8014a74:	f7f1 fa88 	bl	8005f88 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014a78:	4b13      	ldr	r3, [pc, #76]	; (8014ac8 <xTaskIncrementTick+0x180>)
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d009      	beq.n	8014a94 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8014a80:	2301      	movs	r3, #1
 8014a82:	617b      	str	r3, [r7, #20]
 8014a84:	e006      	b.n	8014a94 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014a86:	4b0f      	ldr	r3, [pc, #60]	; (8014ac4 <xTaskIncrementTick+0x17c>)
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	3301      	adds	r3, #1
 8014a8c:	4a0d      	ldr	r2, [pc, #52]	; (8014ac4 <xTaskIncrementTick+0x17c>)
 8014a8e:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8014a90:	f7f1 fa7a 	bl	8005f88 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8014a94:	697b      	ldr	r3, [r7, #20]
}
 8014a96:	4618      	mov	r0, r3
 8014a98:	3718      	adds	r7, #24
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	bd80      	pop	{r7, pc}
 8014a9e:	bf00      	nop
 8014aa0:	2000d4ec 	.word	0x2000d4ec
 8014aa4:	2000d4c8 	.word	0x2000d4c8
 8014aa8:	2000d478 	.word	0x2000d478
 8014aac:	2000d47c 	.word	0x2000d47c
 8014ab0:	2000d4dc 	.word	0x2000d4dc
 8014ab4:	2000d4e4 	.word	0x2000d4e4
 8014ab8:	2000d4cc 	.word	0x2000d4cc
 8014abc:	2000cff0 	.word	0x2000cff0
 8014ac0:	2000cfec 	.word	0x2000cfec
 8014ac4:	2000d4d4 	.word	0x2000d4d4
 8014ac8:	2000d4d8 	.word	0x2000d4d8

08014acc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b086      	sub	sp, #24
 8014ad0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014ad2:	4b51      	ldr	r3, [pc, #324]	; (8014c18 <vTaskSwitchContext+0x14c>)
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d003      	beq.n	8014ae2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014ada:	4b50      	ldr	r3, [pc, #320]	; (8014c1c <vTaskSwitchContext+0x150>)
 8014adc:	2201      	movs	r2, #1
 8014ade:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014ae0:	e095      	b.n	8014c0e <vTaskSwitchContext+0x142>
		xYieldPending = pdFALSE;
 8014ae2:	4b4e      	ldr	r3, [pc, #312]	; (8014c1c <vTaskSwitchContext+0x150>)
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8014ae8:	f7f1 fa40 	bl	8005f6c <getRunTimeCounterValue>
 8014aec:	4603      	mov	r3, r0
 8014aee:	4a4c      	ldr	r2, [pc, #304]	; (8014c20 <vTaskSwitchContext+0x154>)
 8014af0:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8014af2:	4b4b      	ldr	r3, [pc, #300]	; (8014c20 <vTaskSwitchContext+0x154>)
 8014af4:	681a      	ldr	r2, [r3, #0]
 8014af6:	4b4b      	ldr	r3, [pc, #300]	; (8014c24 <vTaskSwitchContext+0x158>)
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	429a      	cmp	r2, r3
 8014afc:	d90b      	bls.n	8014b16 <vTaskSwitchContext+0x4a>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8014afe:	4b4a      	ldr	r3, [pc, #296]	; (8014c28 <vTaskSwitchContext+0x15c>)
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
 8014b06:	4a46      	ldr	r2, [pc, #280]	; (8014c20 <vTaskSwitchContext+0x154>)
 8014b08:	6810      	ldr	r0, [r2, #0]
 8014b0a:	4a46      	ldr	r2, [pc, #280]	; (8014c24 <vTaskSwitchContext+0x158>)
 8014b0c:	6812      	ldr	r2, [r2, #0]
 8014b0e:	1a82      	subs	r2, r0, r2
 8014b10:	440a      	add	r2, r1
 8014b12:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			ulTaskSwitchedInTime = ulTotalRunTime;
 8014b16:	4b42      	ldr	r3, [pc, #264]	; (8014c20 <vTaskSwitchContext+0x154>)
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	4a42      	ldr	r2, [pc, #264]	; (8014c24 <vTaskSwitchContext+0x158>)
 8014b1c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8014b1e:	4b42      	ldr	r3, [pc, #264]	; (8014c28 <vTaskSwitchContext+0x15c>)
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b24:	613b      	str	r3, [r7, #16]
 8014b26:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8014b2a:	60fb      	str	r3, [r7, #12]
 8014b2c:	693b      	ldr	r3, [r7, #16]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	68fa      	ldr	r2, [r7, #12]
 8014b32:	429a      	cmp	r2, r3
 8014b34:	d111      	bne.n	8014b5a <vTaskSwitchContext+0x8e>
 8014b36:	693b      	ldr	r3, [r7, #16]
 8014b38:	3304      	adds	r3, #4
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	68fa      	ldr	r2, [r7, #12]
 8014b3e:	429a      	cmp	r2, r3
 8014b40:	d10b      	bne.n	8014b5a <vTaskSwitchContext+0x8e>
 8014b42:	693b      	ldr	r3, [r7, #16]
 8014b44:	3308      	adds	r3, #8
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	68fa      	ldr	r2, [r7, #12]
 8014b4a:	429a      	cmp	r2, r3
 8014b4c:	d105      	bne.n	8014b5a <vTaskSwitchContext+0x8e>
 8014b4e:	693b      	ldr	r3, [r7, #16]
 8014b50:	330c      	adds	r3, #12
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	68fa      	ldr	r2, [r7, #12]
 8014b56:	429a      	cmp	r2, r3
 8014b58:	d008      	beq.n	8014b6c <vTaskSwitchContext+0xa0>
 8014b5a:	4b33      	ldr	r3, [pc, #204]	; (8014c28 <vTaskSwitchContext+0x15c>)
 8014b5c:	681a      	ldr	r2, [r3, #0]
 8014b5e:	4b32      	ldr	r3, [pc, #200]	; (8014c28 <vTaskSwitchContext+0x15c>)
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	3334      	adds	r3, #52	; 0x34
 8014b64:	4619      	mov	r1, r3
 8014b66:	4610      	mov	r0, r2
 8014b68:	f7f1 fa1c 	bl	8005fa4 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 8014b6c:	4b2e      	ldr	r3, [pc, #184]	; (8014c28 <vTaskSwitchContext+0x15c>)
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	4a2e      	ldr	r2, [pc, #184]	; (8014c2c <vTaskSwitchContext+0x160>)
 8014b72:	6812      	ldr	r2, [r2, #0]
 8014b74:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b78:	4b2d      	ldr	r3, [pc, #180]	; (8014c30 <vTaskSwitchContext+0x164>)
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	617b      	str	r3, [r7, #20]
 8014b7e:	e010      	b.n	8014ba2 <vTaskSwitchContext+0xd6>
 8014b80:	697b      	ldr	r3, [r7, #20]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d10a      	bne.n	8014b9c <vTaskSwitchContext+0xd0>
	__asm volatile
 8014b86:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8014b8a:	f383 8811 	msr	BASEPRI, r3
 8014b8e:	f3bf 8f6f 	isb	sy
 8014b92:	f3bf 8f4f 	dsb	sy
 8014b96:	607b      	str	r3, [r7, #4]
}
 8014b98:	bf00      	nop
 8014b9a:	e7fe      	b.n	8014b9a <vTaskSwitchContext+0xce>
 8014b9c:	697b      	ldr	r3, [r7, #20]
 8014b9e:	3b01      	subs	r3, #1
 8014ba0:	617b      	str	r3, [r7, #20]
 8014ba2:	4924      	ldr	r1, [pc, #144]	; (8014c34 <vTaskSwitchContext+0x168>)
 8014ba4:	697a      	ldr	r2, [r7, #20]
 8014ba6:	4613      	mov	r3, r2
 8014ba8:	009b      	lsls	r3, r3, #2
 8014baa:	4413      	add	r3, r2
 8014bac:	009b      	lsls	r3, r3, #2
 8014bae:	440b      	add	r3, r1
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d0e4      	beq.n	8014b80 <vTaskSwitchContext+0xb4>
 8014bb6:	697a      	ldr	r2, [r7, #20]
 8014bb8:	4613      	mov	r3, r2
 8014bba:	009b      	lsls	r3, r3, #2
 8014bbc:	4413      	add	r3, r2
 8014bbe:	009b      	lsls	r3, r3, #2
 8014bc0:	4a1c      	ldr	r2, [pc, #112]	; (8014c34 <vTaskSwitchContext+0x168>)
 8014bc2:	4413      	add	r3, r2
 8014bc4:	60bb      	str	r3, [r7, #8]
 8014bc6:	68bb      	ldr	r3, [r7, #8]
 8014bc8:	685b      	ldr	r3, [r3, #4]
 8014bca:	685a      	ldr	r2, [r3, #4]
 8014bcc:	68bb      	ldr	r3, [r7, #8]
 8014bce:	605a      	str	r2, [r3, #4]
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	685a      	ldr	r2, [r3, #4]
 8014bd4:	68bb      	ldr	r3, [r7, #8]
 8014bd6:	3308      	adds	r3, #8
 8014bd8:	429a      	cmp	r2, r3
 8014bda:	d104      	bne.n	8014be6 <vTaskSwitchContext+0x11a>
 8014bdc:	68bb      	ldr	r3, [r7, #8]
 8014bde:	685b      	ldr	r3, [r3, #4]
 8014be0:	685a      	ldr	r2, [r3, #4]
 8014be2:	68bb      	ldr	r3, [r7, #8]
 8014be4:	605a      	str	r2, [r3, #4]
 8014be6:	68bb      	ldr	r3, [r7, #8]
 8014be8:	685b      	ldr	r3, [r3, #4]
 8014bea:	68db      	ldr	r3, [r3, #12]
 8014bec:	4a0e      	ldr	r2, [pc, #56]	; (8014c28 <vTaskSwitchContext+0x15c>)
 8014bee:	6013      	str	r3, [r2, #0]
 8014bf0:	4a0f      	ldr	r2, [pc, #60]	; (8014c30 <vTaskSwitchContext+0x164>)
 8014bf2:	697b      	ldr	r3, [r7, #20]
 8014bf4:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 8014bf6:	4b0c      	ldr	r3, [pc, #48]	; (8014c28 <vTaskSwitchContext+0x15c>)
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8014bfe:	4a0b      	ldr	r2, [pc, #44]	; (8014c2c <vTaskSwitchContext+0x160>)
 8014c00:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014c02:	4b09      	ldr	r3, [pc, #36]	; (8014c28 <vTaskSwitchContext+0x15c>)
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014c0a:	4a0b      	ldr	r2, [pc, #44]	; (8014c38 <vTaskSwitchContext+0x16c>)
 8014c0c:	6013      	str	r3, [r2, #0]
}
 8014c0e:	bf00      	nop
 8014c10:	3718      	adds	r7, #24
 8014c12:	46bd      	mov	sp, r7
 8014c14:	bd80      	pop	{r7, pc}
 8014c16:	bf00      	nop
 8014c18:	2000d4ec 	.word	0x2000d4ec
 8014c1c:	2000d4d8 	.word	0x2000d4d8
 8014c20:	2000d4f4 	.word	0x2000d4f4
 8014c24:	2000d4f0 	.word	0x2000d4f0
 8014c28:	2000cfec 	.word	0x2000cfec
 8014c2c:	2000d4c0 	.word	0x2000d4c0
 8014c30:	2000d4cc 	.word	0x2000d4cc
 8014c34:	2000cff0 	.word	0x2000cff0
 8014c38:	2000006c 	.word	0x2000006c

08014c3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b084      	sub	sp, #16
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
 8014c44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d10a      	bne.n	8014c62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014c4c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8014c50:	f383 8811 	msr	BASEPRI, r3
 8014c54:	f3bf 8f6f 	isb	sy
 8014c58:	f3bf 8f4f 	dsb	sy
 8014c5c:	60fb      	str	r3, [r7, #12]
}
 8014c5e:	bf00      	nop
 8014c60:	e7fe      	b.n	8014c60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c62:	4b07      	ldr	r3, [pc, #28]	; (8014c80 <vTaskPlaceOnEventList+0x44>)
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	3318      	adds	r3, #24
 8014c68:	4619      	mov	r1, r3
 8014c6a:	6878      	ldr	r0, [r7, #4]
 8014c6c:	f7fe f881 	bl	8012d72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014c70:	2101      	movs	r1, #1
 8014c72:	6838      	ldr	r0, [r7, #0]
 8014c74:	f000 fae2 	bl	801523c <prvAddCurrentTaskToDelayedList>
}
 8014c78:	bf00      	nop
 8014c7a:	3710      	adds	r7, #16
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	bd80      	pop	{r7, pc}
 8014c80:	2000cfec 	.word	0x2000cfec

08014c84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b086      	sub	sp, #24
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	60f8      	str	r0, [r7, #12]
 8014c8c:	60b9      	str	r1, [r7, #8]
 8014c8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d10a      	bne.n	8014cac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014c96:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8014c9a:	f383 8811 	msr	BASEPRI, r3
 8014c9e:	f3bf 8f6f 	isb	sy
 8014ca2:	f3bf 8f4f 	dsb	sy
 8014ca6:	617b      	str	r3, [r7, #20]
}
 8014ca8:	bf00      	nop
 8014caa:	e7fe      	b.n	8014caa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014cac:	4b0a      	ldr	r3, [pc, #40]	; (8014cd8 <vTaskPlaceOnEventListRestricted+0x54>)
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	3318      	adds	r3, #24
 8014cb2:	4619      	mov	r1, r3
 8014cb4:	68f8      	ldr	r0, [r7, #12]
 8014cb6:	f7fe f838 	bl	8012d2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d002      	beq.n	8014cc6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8014cc4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014cc6:	6879      	ldr	r1, [r7, #4]
 8014cc8:	68b8      	ldr	r0, [r7, #8]
 8014cca:	f000 fab7 	bl	801523c <prvAddCurrentTaskToDelayedList>
	}
 8014cce:	bf00      	nop
 8014cd0:	3718      	adds	r7, #24
 8014cd2:	46bd      	mov	sp, r7
 8014cd4:	bd80      	pop	{r7, pc}
 8014cd6:	bf00      	nop
 8014cd8:	2000cfec 	.word	0x2000cfec

08014cdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014cdc:	b580      	push	{r7, lr}
 8014cde:	b086      	sub	sp, #24
 8014ce0:	af00      	add	r7, sp, #0
 8014ce2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	68db      	ldr	r3, [r3, #12]
 8014ce8:	68db      	ldr	r3, [r3, #12]
 8014cea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014cec:	693b      	ldr	r3, [r7, #16]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d10a      	bne.n	8014d08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014cf2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8014cf6:	f383 8811 	msr	BASEPRI, r3
 8014cfa:	f3bf 8f6f 	isb	sy
 8014cfe:	f3bf 8f4f 	dsb	sy
 8014d02:	60fb      	str	r3, [r7, #12]
}
 8014d04:	bf00      	nop
 8014d06:	e7fe      	b.n	8014d06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014d08:	693b      	ldr	r3, [r7, #16]
 8014d0a:	3318      	adds	r3, #24
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	f7fe f869 	bl	8012de4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014d12:	4b1f      	ldr	r3, [pc, #124]	; (8014d90 <xTaskRemoveFromEventList+0xb4>)
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d11f      	bne.n	8014d5a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014d1a:	693b      	ldr	r3, [r7, #16]
 8014d1c:	3304      	adds	r3, #4
 8014d1e:	4618      	mov	r0, r3
 8014d20:	f7fe f860 	bl	8012de4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014d24:	693b      	ldr	r3, [r7, #16]
 8014d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d28:	4b1a      	ldr	r3, [pc, #104]	; (8014d94 <xTaskRemoveFromEventList+0xb8>)
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	429a      	cmp	r2, r3
 8014d2e:	d903      	bls.n	8014d38 <xTaskRemoveFromEventList+0x5c>
 8014d30:	693b      	ldr	r3, [r7, #16]
 8014d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d34:	4a17      	ldr	r2, [pc, #92]	; (8014d94 <xTaskRemoveFromEventList+0xb8>)
 8014d36:	6013      	str	r3, [r2, #0]
 8014d38:	693b      	ldr	r3, [r7, #16]
 8014d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d3c:	4613      	mov	r3, r2
 8014d3e:	009b      	lsls	r3, r3, #2
 8014d40:	4413      	add	r3, r2
 8014d42:	009b      	lsls	r3, r3, #2
 8014d44:	4a14      	ldr	r2, [pc, #80]	; (8014d98 <xTaskRemoveFromEventList+0xbc>)
 8014d46:	441a      	add	r2, r3
 8014d48:	693b      	ldr	r3, [r7, #16]
 8014d4a:	3304      	adds	r3, #4
 8014d4c:	4619      	mov	r1, r3
 8014d4e:	4610      	mov	r0, r2
 8014d50:	f7fd ffeb 	bl	8012d2a <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8014d54:	f000 f9c0 	bl	80150d8 <prvResetNextTaskUnblockTime>
 8014d58:	e005      	b.n	8014d66 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014d5a:	693b      	ldr	r3, [r7, #16]
 8014d5c:	3318      	adds	r3, #24
 8014d5e:	4619      	mov	r1, r3
 8014d60:	480e      	ldr	r0, [pc, #56]	; (8014d9c <xTaskRemoveFromEventList+0xc0>)
 8014d62:	f7fd ffe2 	bl	8012d2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014d66:	693b      	ldr	r3, [r7, #16]
 8014d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d6a:	4b0d      	ldr	r3, [pc, #52]	; (8014da0 <xTaskRemoveFromEventList+0xc4>)
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d70:	429a      	cmp	r2, r3
 8014d72:	d905      	bls.n	8014d80 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014d74:	2301      	movs	r3, #1
 8014d76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014d78:	4b0a      	ldr	r3, [pc, #40]	; (8014da4 <xTaskRemoveFromEventList+0xc8>)
 8014d7a:	2201      	movs	r2, #1
 8014d7c:	601a      	str	r2, [r3, #0]
 8014d7e:	e001      	b.n	8014d84 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8014d80:	2300      	movs	r3, #0
 8014d82:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014d84:	697b      	ldr	r3, [r7, #20]
}
 8014d86:	4618      	mov	r0, r3
 8014d88:	3718      	adds	r7, #24
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	bd80      	pop	{r7, pc}
 8014d8e:	bf00      	nop
 8014d90:	2000d4ec 	.word	0x2000d4ec
 8014d94:	2000d4cc 	.word	0x2000d4cc
 8014d98:	2000cff0 	.word	0x2000cff0
 8014d9c:	2000d480 	.word	0x2000d480
 8014da0:	2000cfec 	.word	0x2000cfec
 8014da4:	2000d4d8 	.word	0x2000d4d8

08014da8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014da8:	b480      	push	{r7}
 8014daa:	b083      	sub	sp, #12
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014db0:	4b06      	ldr	r3, [pc, #24]	; (8014dcc <vTaskInternalSetTimeOutState+0x24>)
 8014db2:	681a      	ldr	r2, [r3, #0]
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014db8:	4b05      	ldr	r3, [pc, #20]	; (8014dd0 <vTaskInternalSetTimeOutState+0x28>)
 8014dba:	681a      	ldr	r2, [r3, #0]
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	605a      	str	r2, [r3, #4]
}
 8014dc0:	bf00      	nop
 8014dc2:	370c      	adds	r7, #12
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dca:	4770      	bx	lr
 8014dcc:	2000d4dc 	.word	0x2000d4dc
 8014dd0:	2000d4c8 	.word	0x2000d4c8

08014dd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b088      	sub	sp, #32
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]
 8014ddc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d10a      	bne.n	8014dfa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014de4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8014de8:	f383 8811 	msr	BASEPRI, r3
 8014dec:	f3bf 8f6f 	isb	sy
 8014df0:	f3bf 8f4f 	dsb	sy
 8014df4:	613b      	str	r3, [r7, #16]
}
 8014df6:	bf00      	nop
 8014df8:	e7fe      	b.n	8014df8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014dfa:	683b      	ldr	r3, [r7, #0]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d10a      	bne.n	8014e16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014e00:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8014e04:	f383 8811 	msr	BASEPRI, r3
 8014e08:	f3bf 8f6f 	isb	sy
 8014e0c:	f3bf 8f4f 	dsb	sy
 8014e10:	60fb      	str	r3, [r7, #12]
}
 8014e12:	bf00      	nop
 8014e14:	e7fe      	b.n	8014e14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014e16:	f7fe f93d 	bl	8013094 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014e1a:	4b24      	ldr	r3, [pc, #144]	; (8014eac <xTaskCheckForTimeOut+0xd8>)
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	685b      	ldr	r3, [r3, #4]
 8014e24:	69ba      	ldr	r2, [r7, #24]
 8014e26:	1ad3      	subs	r3, r2, r3
 8014e28:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8014e2a:	4b21      	ldr	r3, [pc, #132]	; (8014eb0 <xTaskCheckForTimeOut+0xdc>)
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	f893 31b6 	ldrb.w	r3, [r3, #438]	; 0x1b6
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d007      	beq.n	8014e46 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8014e36:	4b1e      	ldr	r3, [pc, #120]	; (8014eb0 <xTaskCheckForTimeOut+0xdc>)
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	2200      	movs	r2, #0
 8014e3c:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
				xReturn = pdTRUE;
 8014e40:	2301      	movs	r3, #1
 8014e42:	61fb      	str	r3, [r7, #28]
 8014e44:	e02b      	b.n	8014e9e <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014e46:	683b      	ldr	r3, [r7, #0]
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e4e:	d102      	bne.n	8014e56 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014e50:	2300      	movs	r3, #0
 8014e52:	61fb      	str	r3, [r7, #28]
 8014e54:	e023      	b.n	8014e9e <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	681a      	ldr	r2, [r3, #0]
 8014e5a:	4b16      	ldr	r3, [pc, #88]	; (8014eb4 <xTaskCheckForTimeOut+0xe0>)
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	429a      	cmp	r2, r3
 8014e60:	d007      	beq.n	8014e72 <xTaskCheckForTimeOut+0x9e>
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	685b      	ldr	r3, [r3, #4]
 8014e66:	69ba      	ldr	r2, [r7, #24]
 8014e68:	429a      	cmp	r2, r3
 8014e6a:	d302      	bcc.n	8014e72 <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014e6c:	2301      	movs	r3, #1
 8014e6e:	61fb      	str	r3, [r7, #28]
 8014e70:	e015      	b.n	8014e9e <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014e72:	683b      	ldr	r3, [r7, #0]
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	697a      	ldr	r2, [r7, #20]
 8014e78:	429a      	cmp	r2, r3
 8014e7a:	d20b      	bcs.n	8014e94 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014e7c:	683b      	ldr	r3, [r7, #0]
 8014e7e:	681a      	ldr	r2, [r3, #0]
 8014e80:	697b      	ldr	r3, [r7, #20]
 8014e82:	1ad2      	subs	r2, r2, r3
 8014e84:	683b      	ldr	r3, [r7, #0]
 8014e86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014e88:	6878      	ldr	r0, [r7, #4]
 8014e8a:	f7ff ff8d 	bl	8014da8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014e8e:	2300      	movs	r3, #0
 8014e90:	61fb      	str	r3, [r7, #28]
 8014e92:	e004      	b.n	8014e9e <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 8014e94:	683b      	ldr	r3, [r7, #0]
 8014e96:	2200      	movs	r2, #0
 8014e98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014e9a:	2301      	movs	r3, #1
 8014e9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014e9e:	f7fe f929 	bl	80130f4 <vPortExitCritical>

	return xReturn;
 8014ea2:	69fb      	ldr	r3, [r7, #28]
}
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	3720      	adds	r7, #32
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	bd80      	pop	{r7, pc}
 8014eac:	2000d4c8 	.word	0x2000d4c8
 8014eb0:	2000cfec 	.word	0x2000cfec
 8014eb4:	2000d4dc 	.word	0x2000d4dc

08014eb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014eb8:	b480      	push	{r7}
 8014eba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014ebc:	4b03      	ldr	r3, [pc, #12]	; (8014ecc <vTaskMissedYield+0x14>)
 8014ebe:	2201      	movs	r2, #1
 8014ec0:	601a      	str	r2, [r3, #0]
}
 8014ec2:	bf00      	nop
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eca:	4770      	bx	lr
 8014ecc:	2000d4d8 	.word	0x2000d4d8

08014ed0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b084      	sub	sp, #16
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014ed8:	f000 f89a 	bl	8015010 <prvCheckTasksWaitingTermination>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8014edc:	f7f1 f84d 	bl	8005f7a <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8014ee0:	f7ff fc12 	bl	8014708 <prvGetExpectedIdleTime>
 8014ee4:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	2b01      	cmp	r3, #1
 8014eea:	d9f5      	bls.n	8014ed8 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8014eec:	f7ff fbfe 	bl	80146ec <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8014ef0:	4b0e      	ldr	r3, [pc, #56]	; (8014f2c <prvIdleTask+0x5c>)
 8014ef2:	681a      	ldr	r2, [r3, #0]
 8014ef4:	4b0e      	ldr	r3, [pc, #56]	; (8014f30 <prvIdleTask+0x60>)
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	429a      	cmp	r2, r3
 8014efa:	d20a      	bcs.n	8014f12 <prvIdleTask+0x42>
	__asm volatile
 8014efc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8014f00:	f383 8811 	msr	BASEPRI, r3
 8014f04:	f3bf 8f6f 	isb	sy
 8014f08:	f3bf 8f4f 	dsb	sy
 8014f0c:	60bb      	str	r3, [r7, #8]
}
 8014f0e:	bf00      	nop
 8014f10:	e7fe      	b.n	8014f10 <prvIdleTask+0x40>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8014f12:	f7ff fbf9 	bl	8014708 <prvGetExpectedIdleTime>
 8014f16:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	2b01      	cmp	r3, #1
 8014f1c:	d902      	bls.n	8014f24 <prvIdleTask+0x54>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8014f1e:	68f8      	ldr	r0, [r7, #12]
 8014f20:	f7fe f96c 	bl	80131fc <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8014f24:	f7ff fc28 	bl	8014778 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8014f28:	e7d6      	b.n	8014ed8 <prvIdleTask+0x8>
 8014f2a:	bf00      	nop
 8014f2c:	2000d4e4 	.word	0x2000d4e4
 8014f30:	2000d4c8 	.word	0x2000d4c8

08014f34 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8014f34:	b480      	push	{r7}
 8014f36:	b083      	sub	sp, #12
 8014f38:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8014f3a:	2301      	movs	r3, #1
 8014f3c:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8014f3e:	2301      	movs	r3, #1
 8014f40:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8014f42:	4b0f      	ldr	r3, [pc, #60]	; (8014f80 <eTaskConfirmSleepModeStatus+0x4c>)
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d002      	beq.n	8014f50 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	71fb      	strb	r3, [r7, #7]
 8014f4e:	e010      	b.n	8014f72 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8014f50:	4b0c      	ldr	r3, [pc, #48]	; (8014f84 <eTaskConfirmSleepModeStatus+0x50>)
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d002      	beq.n	8014f5e <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8014f58:	2300      	movs	r3, #0
 8014f5a:	71fb      	strb	r3, [r7, #7]
 8014f5c:	e009      	b.n	8014f72 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8014f5e:	4b0a      	ldr	r3, [pc, #40]	; (8014f88 <eTaskConfirmSleepModeStatus+0x54>)
 8014f60:	681a      	ldr	r2, [r3, #0]
 8014f62:	4b0a      	ldr	r3, [pc, #40]	; (8014f8c <eTaskConfirmSleepModeStatus+0x58>)
 8014f64:	6819      	ldr	r1, [r3, #0]
 8014f66:	683b      	ldr	r3, [r7, #0]
 8014f68:	1acb      	subs	r3, r1, r3
 8014f6a:	429a      	cmp	r2, r3
 8014f6c:	d101      	bne.n	8014f72 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 8014f6e:	2302      	movs	r3, #2
 8014f70:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 8014f72:	79fb      	ldrb	r3, [r7, #7]
	}
 8014f74:	4618      	mov	r0, r3
 8014f76:	370c      	adds	r7, #12
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f7e:	4770      	bx	lr
 8014f80:	2000d480 	.word	0x2000d480
 8014f84:	2000d4d8 	.word	0x2000d4d8
 8014f88:	2000d4ac 	.word	0x2000d4ac
 8014f8c:	2000d4c4 	.word	0x2000d4c4

08014f90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b082      	sub	sp, #8
 8014f94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014f96:	2300      	movs	r3, #0
 8014f98:	607b      	str	r3, [r7, #4]
 8014f9a:	e00c      	b.n	8014fb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014f9c:	687a      	ldr	r2, [r7, #4]
 8014f9e:	4613      	mov	r3, r2
 8014fa0:	009b      	lsls	r3, r3, #2
 8014fa2:	4413      	add	r3, r2
 8014fa4:	009b      	lsls	r3, r3, #2
 8014fa6:	4a12      	ldr	r2, [pc, #72]	; (8014ff0 <prvInitialiseTaskLists+0x60>)
 8014fa8:	4413      	add	r3, r2
 8014faa:	4618      	mov	r0, r3
 8014fac:	f7fd fe90 	bl	8012cd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	3301      	adds	r3, #1
 8014fb4:	607b      	str	r3, [r7, #4]
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	2b37      	cmp	r3, #55	; 0x37
 8014fba:	d9ef      	bls.n	8014f9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014fbc:	480d      	ldr	r0, [pc, #52]	; (8014ff4 <prvInitialiseTaskLists+0x64>)
 8014fbe:	f7fd fe87 	bl	8012cd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014fc2:	480d      	ldr	r0, [pc, #52]	; (8014ff8 <prvInitialiseTaskLists+0x68>)
 8014fc4:	f7fd fe84 	bl	8012cd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014fc8:	480c      	ldr	r0, [pc, #48]	; (8014ffc <prvInitialiseTaskLists+0x6c>)
 8014fca:	f7fd fe81 	bl	8012cd0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014fce:	480c      	ldr	r0, [pc, #48]	; (8015000 <prvInitialiseTaskLists+0x70>)
 8014fd0:	f7fd fe7e 	bl	8012cd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014fd4:	480b      	ldr	r0, [pc, #44]	; (8015004 <prvInitialiseTaskLists+0x74>)
 8014fd6:	f7fd fe7b 	bl	8012cd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014fda:	4b0b      	ldr	r3, [pc, #44]	; (8015008 <prvInitialiseTaskLists+0x78>)
 8014fdc:	4a05      	ldr	r2, [pc, #20]	; (8014ff4 <prvInitialiseTaskLists+0x64>)
 8014fde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014fe0:	4b0a      	ldr	r3, [pc, #40]	; (801500c <prvInitialiseTaskLists+0x7c>)
 8014fe2:	4a05      	ldr	r2, [pc, #20]	; (8014ff8 <prvInitialiseTaskLists+0x68>)
 8014fe4:	601a      	str	r2, [r3, #0]
}
 8014fe6:	bf00      	nop
 8014fe8:	3708      	adds	r7, #8
 8014fea:	46bd      	mov	sp, r7
 8014fec:	bd80      	pop	{r7, pc}
 8014fee:	bf00      	nop
 8014ff0:	2000cff0 	.word	0x2000cff0
 8014ff4:	2000d450 	.word	0x2000d450
 8014ff8:	2000d464 	.word	0x2000d464
 8014ffc:	2000d480 	.word	0x2000d480
 8015000:	2000d494 	.word	0x2000d494
 8015004:	2000d4ac 	.word	0x2000d4ac
 8015008:	2000d478 	.word	0x2000d478
 801500c:	2000d47c 	.word	0x2000d47c

08015010 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015010:	b580      	push	{r7, lr}
 8015012:	b082      	sub	sp, #8
 8015014:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015016:	e019      	b.n	801504c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015018:	f7fe f83c 	bl	8013094 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801501c:	4b10      	ldr	r3, [pc, #64]	; (8015060 <prvCheckTasksWaitingTermination+0x50>)
 801501e:	68db      	ldr	r3, [r3, #12]
 8015020:	68db      	ldr	r3, [r3, #12]
 8015022:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	3304      	adds	r3, #4
 8015028:	4618      	mov	r0, r3
 801502a:	f7fd fedb 	bl	8012de4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801502e:	4b0d      	ldr	r3, [pc, #52]	; (8015064 <prvCheckTasksWaitingTermination+0x54>)
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	3b01      	subs	r3, #1
 8015034:	4a0b      	ldr	r2, [pc, #44]	; (8015064 <prvCheckTasksWaitingTermination+0x54>)
 8015036:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015038:	4b0b      	ldr	r3, [pc, #44]	; (8015068 <prvCheckTasksWaitingTermination+0x58>)
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	3b01      	subs	r3, #1
 801503e:	4a0a      	ldr	r2, [pc, #40]	; (8015068 <prvCheckTasksWaitingTermination+0x58>)
 8015040:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015042:	f7fe f857 	bl	80130f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015046:	6878      	ldr	r0, [r7, #4]
 8015048:	f000 f810 	bl	801506c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801504c:	4b06      	ldr	r3, [pc, #24]	; (8015068 <prvCheckTasksWaitingTermination+0x58>)
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d1e1      	bne.n	8015018 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015054:	bf00      	nop
 8015056:	bf00      	nop
 8015058:	3708      	adds	r7, #8
 801505a:	46bd      	mov	sp, r7
 801505c:	bd80      	pop	{r7, pc}
 801505e:	bf00      	nop
 8015060:	2000d494 	.word	0x2000d494
 8015064:	2000d4c4 	.word	0x2000d4c4
 8015068:	2000d4a8 	.word	0x2000d4a8

0801506c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801506c:	b580      	push	{r7, lr}
 801506e:	b084      	sub	sp, #16
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801507a:	4618      	mov	r0, r3
 801507c:	f002 fdca 	bl	8017c14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 8015086:	2b00      	cmp	r3, #0
 8015088:	d108      	bne.n	801509c <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801508e:	4618      	mov	r0, r3
 8015090:	f7fd fc98 	bl	80129c4 <vPortFree>
				vPortFree( pxTCB );
 8015094:	6878      	ldr	r0, [r7, #4]
 8015096:	f7fd fc95 	bl	80129c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801509a:	e018      	b.n	80150ce <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 80150a2:	2b01      	cmp	r3, #1
 80150a4:	d103      	bne.n	80150ae <prvDeleteTCB+0x42>
				vPortFree( pxTCB );
 80150a6:	6878      	ldr	r0, [r7, #4]
 80150a8:	f7fd fc8c 	bl	80129c4 <vPortFree>
	}
 80150ac:	e00f      	b.n	80150ce <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 80150b4:	2b02      	cmp	r3, #2
 80150b6:	d00a      	beq.n	80150ce <prvDeleteTCB+0x62>
	__asm volatile
 80150b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80150bc:	f383 8811 	msr	BASEPRI, r3
 80150c0:	f3bf 8f6f 	isb	sy
 80150c4:	f3bf 8f4f 	dsb	sy
 80150c8:	60fb      	str	r3, [r7, #12]
}
 80150ca:	bf00      	nop
 80150cc:	e7fe      	b.n	80150cc <prvDeleteTCB+0x60>
	}
 80150ce:	bf00      	nop
 80150d0:	3710      	adds	r7, #16
 80150d2:	46bd      	mov	sp, r7
 80150d4:	bd80      	pop	{r7, pc}
	...

080150d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80150d8:	b480      	push	{r7}
 80150da:	b083      	sub	sp, #12
 80150dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80150de:	4b0c      	ldr	r3, [pc, #48]	; (8015110 <prvResetNextTaskUnblockTime+0x38>)
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d104      	bne.n	80150f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80150e8:	4b0a      	ldr	r3, [pc, #40]	; (8015114 <prvResetNextTaskUnblockTime+0x3c>)
 80150ea:	f04f 32ff 	mov.w	r2, #4294967295
 80150ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80150f0:	e008      	b.n	8015104 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80150f2:	4b07      	ldr	r3, [pc, #28]	; (8015110 <prvResetNextTaskUnblockTime+0x38>)
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	68db      	ldr	r3, [r3, #12]
 80150f8:	68db      	ldr	r3, [r3, #12]
 80150fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	685b      	ldr	r3, [r3, #4]
 8015100:	4a04      	ldr	r2, [pc, #16]	; (8015114 <prvResetNextTaskUnblockTime+0x3c>)
 8015102:	6013      	str	r3, [r2, #0]
}
 8015104:	bf00      	nop
 8015106:	370c      	adds	r7, #12
 8015108:	46bd      	mov	sp, r7
 801510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801510e:	4770      	bx	lr
 8015110:	2000d478 	.word	0x2000d478
 8015114:	2000d4e4 	.word	0x2000d4e4

08015118 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015118:	b480      	push	{r7}
 801511a:	b083      	sub	sp, #12
 801511c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801511e:	4b0b      	ldr	r3, [pc, #44]	; (801514c <xTaskGetSchedulerState+0x34>)
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d102      	bne.n	801512c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015126:	2301      	movs	r3, #1
 8015128:	607b      	str	r3, [r7, #4]
 801512a:	e008      	b.n	801513e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801512c:	4b08      	ldr	r3, [pc, #32]	; (8015150 <xTaskGetSchedulerState+0x38>)
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d102      	bne.n	801513a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015134:	2302      	movs	r3, #2
 8015136:	607b      	str	r3, [r7, #4]
 8015138:	e001      	b.n	801513e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801513a:	2300      	movs	r3, #0
 801513c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801513e:	687b      	ldr	r3, [r7, #4]
	}
 8015140:	4618      	mov	r0, r3
 8015142:	370c      	adds	r7, #12
 8015144:	46bd      	mov	sp, r7
 8015146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801514a:	4770      	bx	lr
 801514c:	2000d4d0 	.word	0x2000d4d0
 8015150:	2000d4ec 	.word	0x2000d4ec

08015154 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015154:	b580      	push	{r7, lr}
 8015156:	b086      	sub	sp, #24
 8015158:	af00      	add	r7, sp, #0
 801515a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015160:	2300      	movs	r3, #0
 8015162:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d05c      	beq.n	8015224 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801516a:	4b31      	ldr	r3, [pc, #196]	; (8015230 <xTaskPriorityDisinherit+0xdc>)
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	693a      	ldr	r2, [r7, #16]
 8015170:	429a      	cmp	r2, r3
 8015172:	d00a      	beq.n	801518a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015174:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8015178:	f383 8811 	msr	BASEPRI, r3
 801517c:	f3bf 8f6f 	isb	sy
 8015180:	f3bf 8f4f 	dsb	sy
 8015184:	60fb      	str	r3, [r7, #12]
}
 8015186:	bf00      	nop
 8015188:	e7fe      	b.n	8015188 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801518a:	693b      	ldr	r3, [r7, #16]
 801518c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8015190:	2b00      	cmp	r3, #0
 8015192:	d10a      	bne.n	80151aa <xTaskPriorityDisinherit+0x56>
	__asm volatile
 8015194:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8015198:	f383 8811 	msr	BASEPRI, r3
 801519c:	f3bf 8f6f 	isb	sy
 80151a0:	f3bf 8f4f 	dsb	sy
 80151a4:	60bb      	str	r3, [r7, #8]
}
 80151a6:	bf00      	nop
 80151a8:	e7fe      	b.n	80151a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80151aa:	693b      	ldr	r3, [r7, #16]
 80151ac:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80151b0:	1e5a      	subs	r2, r3, #1
 80151b2:	693b      	ldr	r3, [r7, #16]
 80151b4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80151b8:	693b      	ldr	r3, [r7, #16]
 80151ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151bc:	693b      	ldr	r3, [r7, #16]
 80151be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80151c2:	429a      	cmp	r2, r3
 80151c4:	d02e      	beq.n	8015224 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80151c6:	693b      	ldr	r3, [r7, #16]
 80151c8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d129      	bne.n	8015224 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80151d0:	693b      	ldr	r3, [r7, #16]
 80151d2:	3304      	adds	r3, #4
 80151d4:	4618      	mov	r0, r3
 80151d6:	f7fd fe05 	bl	8012de4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80151da:	693b      	ldr	r3, [r7, #16]
 80151dc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80151e0:	693b      	ldr	r3, [r7, #16]
 80151e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80151e4:	693b      	ldr	r3, [r7, #16]
 80151e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80151ec:	693b      	ldr	r3, [r7, #16]
 80151ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80151f0:	693b      	ldr	r3, [r7, #16]
 80151f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151f4:	4b0f      	ldr	r3, [pc, #60]	; (8015234 <xTaskPriorityDisinherit+0xe0>)
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	429a      	cmp	r2, r3
 80151fa:	d903      	bls.n	8015204 <xTaskPriorityDisinherit+0xb0>
 80151fc:	693b      	ldr	r3, [r7, #16]
 80151fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015200:	4a0c      	ldr	r2, [pc, #48]	; (8015234 <xTaskPriorityDisinherit+0xe0>)
 8015202:	6013      	str	r3, [r2, #0]
 8015204:	693b      	ldr	r3, [r7, #16]
 8015206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015208:	4613      	mov	r3, r2
 801520a:	009b      	lsls	r3, r3, #2
 801520c:	4413      	add	r3, r2
 801520e:	009b      	lsls	r3, r3, #2
 8015210:	4a09      	ldr	r2, [pc, #36]	; (8015238 <xTaskPriorityDisinherit+0xe4>)
 8015212:	441a      	add	r2, r3
 8015214:	693b      	ldr	r3, [r7, #16]
 8015216:	3304      	adds	r3, #4
 8015218:	4619      	mov	r1, r3
 801521a:	4610      	mov	r0, r2
 801521c:	f7fd fd85 	bl	8012d2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015220:	2301      	movs	r3, #1
 8015222:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015224:	697b      	ldr	r3, [r7, #20]
	}
 8015226:	4618      	mov	r0, r3
 8015228:	3718      	adds	r7, #24
 801522a:	46bd      	mov	sp, r7
 801522c:	bd80      	pop	{r7, pc}
 801522e:	bf00      	nop
 8015230:	2000cfec 	.word	0x2000cfec
 8015234:	2000d4cc 	.word	0x2000d4cc
 8015238:	2000cff0 	.word	0x2000cff0

0801523c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801523c:	b580      	push	{r7, lr}
 801523e:	b084      	sub	sp, #16
 8015240:	af00      	add	r7, sp, #0
 8015242:	6078      	str	r0, [r7, #4]
 8015244:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015246:	4b24      	ldr	r3, [pc, #144]	; (80152d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 801524c:	4b23      	ldr	r3, [pc, #140]	; (80152dc <prvAddCurrentTaskToDelayedList+0xa0>)
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	2200      	movs	r2, #0
 8015252:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015256:	4b21      	ldr	r3, [pc, #132]	; (80152dc <prvAddCurrentTaskToDelayedList+0xa0>)
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	3304      	adds	r3, #4
 801525c:	4618      	mov	r0, r3
 801525e:	f7fd fdc1 	bl	8012de4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015268:	d10a      	bne.n	8015280 <prvAddCurrentTaskToDelayedList+0x44>
 801526a:	683b      	ldr	r3, [r7, #0]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d007      	beq.n	8015280 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015270:	4b1a      	ldr	r3, [pc, #104]	; (80152dc <prvAddCurrentTaskToDelayedList+0xa0>)
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	3304      	adds	r3, #4
 8015276:	4619      	mov	r1, r3
 8015278:	4819      	ldr	r0, [pc, #100]	; (80152e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 801527a:	f7fd fd56 	bl	8012d2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801527e:	e026      	b.n	80152ce <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015280:	68fa      	ldr	r2, [r7, #12]
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	4413      	add	r3, r2
 8015286:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015288:	4b14      	ldr	r3, [pc, #80]	; (80152dc <prvAddCurrentTaskToDelayedList+0xa0>)
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	68ba      	ldr	r2, [r7, #8]
 801528e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015290:	68ba      	ldr	r2, [r7, #8]
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	429a      	cmp	r2, r3
 8015296:	d209      	bcs.n	80152ac <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015298:	4b12      	ldr	r3, [pc, #72]	; (80152e4 <prvAddCurrentTaskToDelayedList+0xa8>)
 801529a:	681a      	ldr	r2, [r3, #0]
 801529c:	4b0f      	ldr	r3, [pc, #60]	; (80152dc <prvAddCurrentTaskToDelayedList+0xa0>)
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	3304      	adds	r3, #4
 80152a2:	4619      	mov	r1, r3
 80152a4:	4610      	mov	r0, r2
 80152a6:	f7fd fd64 	bl	8012d72 <vListInsert>
}
 80152aa:	e010      	b.n	80152ce <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80152ac:	4b0e      	ldr	r3, [pc, #56]	; (80152e8 <prvAddCurrentTaskToDelayedList+0xac>)
 80152ae:	681a      	ldr	r2, [r3, #0]
 80152b0:	4b0a      	ldr	r3, [pc, #40]	; (80152dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	3304      	adds	r3, #4
 80152b6:	4619      	mov	r1, r3
 80152b8:	4610      	mov	r0, r2
 80152ba:	f7fd fd5a 	bl	8012d72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80152be:	4b0b      	ldr	r3, [pc, #44]	; (80152ec <prvAddCurrentTaskToDelayedList+0xb0>)
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	68ba      	ldr	r2, [r7, #8]
 80152c4:	429a      	cmp	r2, r3
 80152c6:	d202      	bcs.n	80152ce <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 80152c8:	4a08      	ldr	r2, [pc, #32]	; (80152ec <prvAddCurrentTaskToDelayedList+0xb0>)
 80152ca:	68bb      	ldr	r3, [r7, #8]
 80152cc:	6013      	str	r3, [r2, #0]
}
 80152ce:	bf00      	nop
 80152d0:	3710      	adds	r7, #16
 80152d2:	46bd      	mov	sp, r7
 80152d4:	bd80      	pop	{r7, pc}
 80152d6:	bf00      	nop
 80152d8:	2000d4c8 	.word	0x2000d4c8
 80152dc:	2000cfec 	.word	0x2000cfec
 80152e0:	2000d4ac 	.word	0x2000d4ac
 80152e4:	2000d47c 	.word	0x2000d47c
 80152e8:	2000d478 	.word	0x2000d478
 80152ec:	2000d4e4 	.word	0x2000d4e4

080152f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80152f0:	b580      	push	{r7, lr}
 80152f2:	b08a      	sub	sp, #40	; 0x28
 80152f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80152f6:	2300      	movs	r3, #0
 80152f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80152fa:	f000 fba3 	bl	8015a44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80152fe:	4b1c      	ldr	r3, [pc, #112]	; (8015370 <xTimerCreateTimerTask+0x80>)
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d021      	beq.n	801534a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015306:	2300      	movs	r3, #0
 8015308:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801530a:	2300      	movs	r3, #0
 801530c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801530e:	1d3a      	adds	r2, r7, #4
 8015310:	f107 0108 	add.w	r1, r7, #8
 8015314:	f107 030c 	add.w	r3, r7, #12
 8015318:	4618      	mov	r0, r3
 801531a:	f7fd fa91 	bl	8012840 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801531e:	6879      	ldr	r1, [r7, #4]
 8015320:	68bb      	ldr	r3, [r7, #8]
 8015322:	68fa      	ldr	r2, [r7, #12]
 8015324:	9202      	str	r2, [sp, #8]
 8015326:	9301      	str	r3, [sp, #4]
 8015328:	2337      	movs	r3, #55	; 0x37
 801532a:	9300      	str	r3, [sp, #0]
 801532c:	2300      	movs	r3, #0
 801532e:	460a      	mov	r2, r1
 8015330:	4910      	ldr	r1, [pc, #64]	; (8015374 <xTimerCreateTimerTask+0x84>)
 8015332:	4811      	ldr	r0, [pc, #68]	; (8015378 <xTimerCreateTimerTask+0x88>)
 8015334:	f7fe fda0 	bl	8013e78 <xTaskCreateStatic>
 8015338:	4603      	mov	r3, r0
 801533a:	4a10      	ldr	r2, [pc, #64]	; (801537c <xTimerCreateTimerTask+0x8c>)
 801533c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801533e:	4b0f      	ldr	r3, [pc, #60]	; (801537c <xTimerCreateTimerTask+0x8c>)
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	2b00      	cmp	r3, #0
 8015344:	d001      	beq.n	801534a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015346:	2301      	movs	r3, #1
 8015348:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801534a:	697b      	ldr	r3, [r7, #20]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d10a      	bne.n	8015366 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015350:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8015354:	f383 8811 	msr	BASEPRI, r3
 8015358:	f3bf 8f6f 	isb	sy
 801535c:	f3bf 8f4f 	dsb	sy
 8015360:	613b      	str	r3, [r7, #16]
}
 8015362:	bf00      	nop
 8015364:	e7fe      	b.n	8015364 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015366:	697b      	ldr	r3, [r7, #20]
}
 8015368:	4618      	mov	r0, r3
 801536a:	3718      	adds	r7, #24
 801536c:	46bd      	mov	sp, r7
 801536e:	bd80      	pop	{r7, pc}
 8015370:	2000d528 	.word	0x2000d528
 8015374:	0801888c 	.word	0x0801888c
 8015378:	080155e9 	.word	0x080155e9
 801537c:	2000d52c 	.word	0x2000d52c

08015380 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8015380:	b580      	push	{r7, lr}
 8015382:	b088      	sub	sp, #32
 8015384:	af02      	add	r7, sp, #8
 8015386:	60f8      	str	r0, [r7, #12]
 8015388:	60b9      	str	r1, [r7, #8]
 801538a:	607a      	str	r2, [r7, #4]
 801538c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801538e:	202c      	movs	r0, #44	; 0x2c
 8015390:	f7fd fa70 	bl	8012874 <pvPortMalloc>
 8015394:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8015396:	697b      	ldr	r3, [r7, #20]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d00d      	beq.n	80153b8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 801539c:	697b      	ldr	r3, [r7, #20]
 801539e:	2200      	movs	r2, #0
 80153a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80153a4:	697b      	ldr	r3, [r7, #20]
 80153a6:	9301      	str	r3, [sp, #4]
 80153a8:	6a3b      	ldr	r3, [r7, #32]
 80153aa:	9300      	str	r3, [sp, #0]
 80153ac:	683b      	ldr	r3, [r7, #0]
 80153ae:	687a      	ldr	r2, [r7, #4]
 80153b0:	68b9      	ldr	r1, [r7, #8]
 80153b2:	68f8      	ldr	r0, [r7, #12]
 80153b4:	f000 f843 	bl	801543e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80153b8:	697b      	ldr	r3, [r7, #20]
	}
 80153ba:	4618      	mov	r0, r3
 80153bc:	3718      	adds	r7, #24
 80153be:	46bd      	mov	sp, r7
 80153c0:	bd80      	pop	{r7, pc}

080153c2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80153c2:	b580      	push	{r7, lr}
 80153c4:	b08a      	sub	sp, #40	; 0x28
 80153c6:	af02      	add	r7, sp, #8
 80153c8:	60f8      	str	r0, [r7, #12]
 80153ca:	60b9      	str	r1, [r7, #8]
 80153cc:	607a      	str	r2, [r7, #4]
 80153ce:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80153d0:	232c      	movs	r3, #44	; 0x2c
 80153d2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80153d4:	693b      	ldr	r3, [r7, #16]
 80153d6:	2b2c      	cmp	r3, #44	; 0x2c
 80153d8:	d00a      	beq.n	80153f0 <xTimerCreateStatic+0x2e>
	__asm volatile
 80153da:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80153de:	f383 8811 	msr	BASEPRI, r3
 80153e2:	f3bf 8f6f 	isb	sy
 80153e6:	f3bf 8f4f 	dsb	sy
 80153ea:	61bb      	str	r3, [r7, #24]
}
 80153ec:	bf00      	nop
 80153ee:	e7fe      	b.n	80153ee <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80153f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80153f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d10a      	bne.n	801540e <xTimerCreateStatic+0x4c>
	__asm volatile
 80153f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80153fc:	f383 8811 	msr	BASEPRI, r3
 8015400:	f3bf 8f6f 	isb	sy
 8015404:	f3bf 8f4f 	dsb	sy
 8015408:	617b      	str	r3, [r7, #20]
}
 801540a:	bf00      	nop
 801540c:	e7fe      	b.n	801540c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 801540e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015410:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8015412:	69fb      	ldr	r3, [r7, #28]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d00d      	beq.n	8015434 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8015418:	69fb      	ldr	r3, [r7, #28]
 801541a:	2202      	movs	r2, #2
 801541c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8015420:	69fb      	ldr	r3, [r7, #28]
 8015422:	9301      	str	r3, [sp, #4]
 8015424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015426:	9300      	str	r3, [sp, #0]
 8015428:	683b      	ldr	r3, [r7, #0]
 801542a:	687a      	ldr	r2, [r7, #4]
 801542c:	68b9      	ldr	r1, [r7, #8]
 801542e:	68f8      	ldr	r0, [r7, #12]
 8015430:	f000 f805 	bl	801543e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8015434:	69fb      	ldr	r3, [r7, #28]
	}
 8015436:	4618      	mov	r0, r3
 8015438:	3720      	adds	r7, #32
 801543a:	46bd      	mov	sp, r7
 801543c:	bd80      	pop	{r7, pc}

0801543e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801543e:	b580      	push	{r7, lr}
 8015440:	b086      	sub	sp, #24
 8015442:	af00      	add	r7, sp, #0
 8015444:	60f8      	str	r0, [r7, #12]
 8015446:	60b9      	str	r1, [r7, #8]
 8015448:	607a      	str	r2, [r7, #4]
 801544a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801544c:	68bb      	ldr	r3, [r7, #8]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d10a      	bne.n	8015468 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8015452:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8015456:	f383 8811 	msr	BASEPRI, r3
 801545a:	f3bf 8f6f 	isb	sy
 801545e:	f3bf 8f4f 	dsb	sy
 8015462:	617b      	str	r3, [r7, #20]
}
 8015464:	bf00      	nop
 8015466:	e7fe      	b.n	8015466 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8015468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801546a:	2b00      	cmp	r3, #0
 801546c:	d01e      	beq.n	80154ac <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 801546e:	f000 fae9 	bl	8015a44 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8015472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015474:	68fa      	ldr	r2, [r7, #12]
 8015476:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8015478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801547a:	68ba      	ldr	r2, [r7, #8]
 801547c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 801547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015480:	683a      	ldr	r2, [r7, #0]
 8015482:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8015484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015486:	6a3a      	ldr	r2, [r7, #32]
 8015488:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801548c:	3304      	adds	r3, #4
 801548e:	4618      	mov	r0, r3
 8015490:	f7fd fc3e 	bl	8012d10 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d008      	beq.n	80154ac <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 801549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801549c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80154a0:	f043 0304 	orr.w	r3, r3, #4
 80154a4:	b2da      	uxtb	r2, r3
 80154a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80154ac:	bf00      	nop
 80154ae:	3718      	adds	r7, #24
 80154b0:	46bd      	mov	sp, r7
 80154b2:	bd80      	pop	{r7, pc}

080154b4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80154b4:	b580      	push	{r7, lr}
 80154b6:	b08a      	sub	sp, #40	; 0x28
 80154b8:	af00      	add	r7, sp, #0
 80154ba:	60f8      	str	r0, [r7, #12]
 80154bc:	60b9      	str	r1, [r7, #8]
 80154be:	607a      	str	r2, [r7, #4]
 80154c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80154c2:	2300      	movs	r3, #0
 80154c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d10a      	bne.n	80154e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80154cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80154d0:	f383 8811 	msr	BASEPRI, r3
 80154d4:	f3bf 8f6f 	isb	sy
 80154d8:	f3bf 8f4f 	dsb	sy
 80154dc:	623b      	str	r3, [r7, #32]
}
 80154de:	bf00      	nop
 80154e0:	e7fe      	b.n	80154e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80154e2:	4b1a      	ldr	r3, [pc, #104]	; (801554c <xTimerGenericCommand+0x98>)
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d02a      	beq.n	8015540 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80154ea:	68bb      	ldr	r3, [r7, #8]
 80154ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80154f6:	68bb      	ldr	r3, [r7, #8]
 80154f8:	2b05      	cmp	r3, #5
 80154fa:	dc18      	bgt.n	801552e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80154fc:	f7ff fe0c 	bl	8015118 <xTaskGetSchedulerState>
 8015500:	4603      	mov	r3, r0
 8015502:	2b02      	cmp	r3, #2
 8015504:	d109      	bne.n	801551a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015506:	4b11      	ldr	r3, [pc, #68]	; (801554c <xTimerGenericCommand+0x98>)
 8015508:	6818      	ldr	r0, [r3, #0]
 801550a:	f107 0110 	add.w	r1, r7, #16
 801550e:	2300      	movs	r3, #0
 8015510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015512:	f7fe f8c9 	bl	80136a8 <xQueueGenericSend>
 8015516:	6278      	str	r0, [r7, #36]	; 0x24
 8015518:	e012      	b.n	8015540 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801551a:	4b0c      	ldr	r3, [pc, #48]	; (801554c <xTimerGenericCommand+0x98>)
 801551c:	6818      	ldr	r0, [r3, #0]
 801551e:	f107 0110 	add.w	r1, r7, #16
 8015522:	2300      	movs	r3, #0
 8015524:	2200      	movs	r2, #0
 8015526:	f7fe f8bf 	bl	80136a8 <xQueueGenericSend>
 801552a:	6278      	str	r0, [r7, #36]	; 0x24
 801552c:	e008      	b.n	8015540 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801552e:	4b07      	ldr	r3, [pc, #28]	; (801554c <xTimerGenericCommand+0x98>)
 8015530:	6818      	ldr	r0, [r3, #0]
 8015532:	f107 0110 	add.w	r1, r7, #16
 8015536:	2300      	movs	r3, #0
 8015538:	683a      	ldr	r2, [r7, #0]
 801553a:	f7fe f9b3 	bl	80138a4 <xQueueGenericSendFromISR>
 801553e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015542:	4618      	mov	r0, r3
 8015544:	3728      	adds	r7, #40	; 0x28
 8015546:	46bd      	mov	sp, r7
 8015548:	bd80      	pop	{r7, pc}
 801554a:	bf00      	nop
 801554c:	2000d528 	.word	0x2000d528

08015550 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015550:	b580      	push	{r7, lr}
 8015552:	b088      	sub	sp, #32
 8015554:	af02      	add	r7, sp, #8
 8015556:	6078      	str	r0, [r7, #4]
 8015558:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801555a:	4b22      	ldr	r3, [pc, #136]	; (80155e4 <prvProcessExpiredTimer+0x94>)
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	68db      	ldr	r3, [r3, #12]
 8015560:	68db      	ldr	r3, [r3, #12]
 8015562:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015564:	697b      	ldr	r3, [r7, #20]
 8015566:	3304      	adds	r3, #4
 8015568:	4618      	mov	r0, r3
 801556a:	f7fd fc3b 	bl	8012de4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801556e:	697b      	ldr	r3, [r7, #20]
 8015570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015574:	f003 0304 	and.w	r3, r3, #4
 8015578:	2b00      	cmp	r3, #0
 801557a:	d022      	beq.n	80155c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801557c:	697b      	ldr	r3, [r7, #20]
 801557e:	699a      	ldr	r2, [r3, #24]
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	18d1      	adds	r1, r2, r3
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	683a      	ldr	r2, [r7, #0]
 8015588:	6978      	ldr	r0, [r7, #20]
 801558a:	f000 f8d3 	bl	8015734 <prvInsertTimerInActiveList>
 801558e:	4603      	mov	r3, r0
 8015590:	2b00      	cmp	r3, #0
 8015592:	d01f      	beq.n	80155d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015594:	2300      	movs	r3, #0
 8015596:	9300      	str	r3, [sp, #0]
 8015598:	2300      	movs	r3, #0
 801559a:	687a      	ldr	r2, [r7, #4]
 801559c:	2100      	movs	r1, #0
 801559e:	6978      	ldr	r0, [r7, #20]
 80155a0:	f7ff ff88 	bl	80154b4 <xTimerGenericCommand>
 80155a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80155a6:	693b      	ldr	r3, [r7, #16]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d113      	bne.n	80155d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80155ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80155b0:	f383 8811 	msr	BASEPRI, r3
 80155b4:	f3bf 8f6f 	isb	sy
 80155b8:	f3bf 8f4f 	dsb	sy
 80155bc:	60fb      	str	r3, [r7, #12]
}
 80155be:	bf00      	nop
 80155c0:	e7fe      	b.n	80155c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80155c2:	697b      	ldr	r3, [r7, #20]
 80155c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80155c8:	f023 0301 	bic.w	r3, r3, #1
 80155cc:	b2da      	uxtb	r2, r3
 80155ce:	697b      	ldr	r3, [r7, #20]
 80155d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80155d4:	697b      	ldr	r3, [r7, #20]
 80155d6:	6a1b      	ldr	r3, [r3, #32]
 80155d8:	6978      	ldr	r0, [r7, #20]
 80155da:	4798      	blx	r3
}
 80155dc:	bf00      	nop
 80155de:	3718      	adds	r7, #24
 80155e0:	46bd      	mov	sp, r7
 80155e2:	bd80      	pop	{r7, pc}
 80155e4:	2000d520 	.word	0x2000d520

080155e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b084      	sub	sp, #16
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 80155f0:	f7f0 fcef 	bl	8005fd2 <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80155f4:	f107 0308 	add.w	r3, r7, #8
 80155f8:	4618      	mov	r0, r3
 80155fa:	f000 f857 	bl	80156ac <prvGetNextExpireTime>
 80155fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015600:	68bb      	ldr	r3, [r7, #8]
 8015602:	4619      	mov	r1, r3
 8015604:	68f8      	ldr	r0, [r7, #12]
 8015606:	f000 f803 	bl	8015610 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801560a:	f000 f8d5 	bl	80157b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801560e:	e7f1      	b.n	80155f4 <prvTimerTask+0xc>

08015610 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015610:	b580      	push	{r7, lr}
 8015612:	b084      	sub	sp, #16
 8015614:	af00      	add	r7, sp, #0
 8015616:	6078      	str	r0, [r7, #4]
 8015618:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801561a:	f7ff f867 	bl	80146ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801561e:	f107 0308 	add.w	r3, r7, #8
 8015622:	4618      	mov	r0, r3
 8015624:	f000 f866 	bl	80156f4 <prvSampleTimeNow>
 8015628:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801562a:	68bb      	ldr	r3, [r7, #8]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d130      	bne.n	8015692 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015630:	683b      	ldr	r3, [r7, #0]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d10a      	bne.n	801564c <prvProcessTimerOrBlockTask+0x3c>
 8015636:	687a      	ldr	r2, [r7, #4]
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	429a      	cmp	r2, r3
 801563c:	d806      	bhi.n	801564c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801563e:	f7ff f89b 	bl	8014778 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015642:	68f9      	ldr	r1, [r7, #12]
 8015644:	6878      	ldr	r0, [r7, #4]
 8015646:	f7ff ff83 	bl	8015550 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801564a:	e024      	b.n	8015696 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801564c:	683b      	ldr	r3, [r7, #0]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d008      	beq.n	8015664 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015652:	4b13      	ldr	r3, [pc, #76]	; (80156a0 <prvProcessTimerOrBlockTask+0x90>)
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d101      	bne.n	8015660 <prvProcessTimerOrBlockTask+0x50>
 801565c:	2301      	movs	r3, #1
 801565e:	e000      	b.n	8015662 <prvProcessTimerOrBlockTask+0x52>
 8015660:	2300      	movs	r3, #0
 8015662:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015664:	4b0f      	ldr	r3, [pc, #60]	; (80156a4 <prvProcessTimerOrBlockTask+0x94>)
 8015666:	6818      	ldr	r0, [r3, #0]
 8015668:	687a      	ldr	r2, [r7, #4]
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	1ad3      	subs	r3, r2, r3
 801566e:	683a      	ldr	r2, [r7, #0]
 8015670:	4619      	mov	r1, r3
 8015672:	f7fe fbcd 	bl	8013e10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015676:	f7ff f87f 	bl	8014778 <xTaskResumeAll>
 801567a:	4603      	mov	r3, r0
 801567c:	2b00      	cmp	r3, #0
 801567e:	d10a      	bne.n	8015696 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015680:	4b09      	ldr	r3, [pc, #36]	; (80156a8 <prvProcessTimerOrBlockTask+0x98>)
 8015682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015686:	601a      	str	r2, [r3, #0]
 8015688:	f3bf 8f4f 	dsb	sy
 801568c:	f3bf 8f6f 	isb	sy
}
 8015690:	e001      	b.n	8015696 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015692:	f7ff f871 	bl	8014778 <xTaskResumeAll>
}
 8015696:	bf00      	nop
 8015698:	3710      	adds	r7, #16
 801569a:	46bd      	mov	sp, r7
 801569c:	bd80      	pop	{r7, pc}
 801569e:	bf00      	nop
 80156a0:	2000d524 	.word	0x2000d524
 80156a4:	2000d528 	.word	0x2000d528
 80156a8:	e000ed04 	.word	0xe000ed04

080156ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80156ac:	b480      	push	{r7}
 80156ae:	b085      	sub	sp, #20
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80156b4:	4b0e      	ldr	r3, [pc, #56]	; (80156f0 <prvGetNextExpireTime+0x44>)
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d101      	bne.n	80156c2 <prvGetNextExpireTime+0x16>
 80156be:	2201      	movs	r2, #1
 80156c0:	e000      	b.n	80156c4 <prvGetNextExpireTime+0x18>
 80156c2:	2200      	movs	r2, #0
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d105      	bne.n	80156dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80156d0:	4b07      	ldr	r3, [pc, #28]	; (80156f0 <prvGetNextExpireTime+0x44>)
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	68db      	ldr	r3, [r3, #12]
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	60fb      	str	r3, [r7, #12]
 80156da:	e001      	b.n	80156e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80156dc:	2300      	movs	r3, #0
 80156de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80156e0:	68fb      	ldr	r3, [r7, #12]
}
 80156e2:	4618      	mov	r0, r3
 80156e4:	3714      	adds	r7, #20
 80156e6:	46bd      	mov	sp, r7
 80156e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ec:	4770      	bx	lr
 80156ee:	bf00      	nop
 80156f0:	2000d520 	.word	0x2000d520

080156f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b084      	sub	sp, #16
 80156f8:	af00      	add	r7, sp, #0
 80156fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80156fc:	f7ff f8da 	bl	80148b4 <xTaskGetTickCount>
 8015700:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015702:	4b0b      	ldr	r3, [pc, #44]	; (8015730 <prvSampleTimeNow+0x3c>)
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	68fa      	ldr	r2, [r7, #12]
 8015708:	429a      	cmp	r2, r3
 801570a:	d205      	bcs.n	8015718 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801570c:	f000 f936 	bl	801597c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	2201      	movs	r2, #1
 8015714:	601a      	str	r2, [r3, #0]
 8015716:	e002      	b.n	801571e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	2200      	movs	r2, #0
 801571c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801571e:	4a04      	ldr	r2, [pc, #16]	; (8015730 <prvSampleTimeNow+0x3c>)
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015724:	68fb      	ldr	r3, [r7, #12]
}
 8015726:	4618      	mov	r0, r3
 8015728:	3710      	adds	r7, #16
 801572a:	46bd      	mov	sp, r7
 801572c:	bd80      	pop	{r7, pc}
 801572e:	bf00      	nop
 8015730:	2000d530 	.word	0x2000d530

08015734 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015734:	b580      	push	{r7, lr}
 8015736:	b086      	sub	sp, #24
 8015738:	af00      	add	r7, sp, #0
 801573a:	60f8      	str	r0, [r7, #12]
 801573c:	60b9      	str	r1, [r7, #8]
 801573e:	607a      	str	r2, [r7, #4]
 8015740:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015742:	2300      	movs	r3, #0
 8015744:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	68ba      	ldr	r2, [r7, #8]
 801574a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	68fa      	ldr	r2, [r7, #12]
 8015750:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015752:	68ba      	ldr	r2, [r7, #8]
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	429a      	cmp	r2, r3
 8015758:	d812      	bhi.n	8015780 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801575a:	687a      	ldr	r2, [r7, #4]
 801575c:	683b      	ldr	r3, [r7, #0]
 801575e:	1ad2      	subs	r2, r2, r3
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	699b      	ldr	r3, [r3, #24]
 8015764:	429a      	cmp	r2, r3
 8015766:	d302      	bcc.n	801576e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015768:	2301      	movs	r3, #1
 801576a:	617b      	str	r3, [r7, #20]
 801576c:	e01b      	b.n	80157a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801576e:	4b10      	ldr	r3, [pc, #64]	; (80157b0 <prvInsertTimerInActiveList+0x7c>)
 8015770:	681a      	ldr	r2, [r3, #0]
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	3304      	adds	r3, #4
 8015776:	4619      	mov	r1, r3
 8015778:	4610      	mov	r0, r2
 801577a:	f7fd fafa 	bl	8012d72 <vListInsert>
 801577e:	e012      	b.n	80157a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015780:	687a      	ldr	r2, [r7, #4]
 8015782:	683b      	ldr	r3, [r7, #0]
 8015784:	429a      	cmp	r2, r3
 8015786:	d206      	bcs.n	8015796 <prvInsertTimerInActiveList+0x62>
 8015788:	68ba      	ldr	r2, [r7, #8]
 801578a:	683b      	ldr	r3, [r7, #0]
 801578c:	429a      	cmp	r2, r3
 801578e:	d302      	bcc.n	8015796 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015790:	2301      	movs	r3, #1
 8015792:	617b      	str	r3, [r7, #20]
 8015794:	e007      	b.n	80157a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015796:	4b07      	ldr	r3, [pc, #28]	; (80157b4 <prvInsertTimerInActiveList+0x80>)
 8015798:	681a      	ldr	r2, [r3, #0]
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	3304      	adds	r3, #4
 801579e:	4619      	mov	r1, r3
 80157a0:	4610      	mov	r0, r2
 80157a2:	f7fd fae6 	bl	8012d72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80157a6:	697b      	ldr	r3, [r7, #20]
}
 80157a8:	4618      	mov	r0, r3
 80157aa:	3718      	adds	r7, #24
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd80      	pop	{r7, pc}
 80157b0:	2000d524 	.word	0x2000d524
 80157b4:	2000d520 	.word	0x2000d520

080157b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b08e      	sub	sp, #56	; 0x38
 80157bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80157be:	e0ca      	b.n	8015956 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	da18      	bge.n	80157f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80157c6:	1d3b      	adds	r3, r7, #4
 80157c8:	3304      	adds	r3, #4
 80157ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80157cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d10a      	bne.n	80157e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80157d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80157d6:	f383 8811 	msr	BASEPRI, r3
 80157da:	f3bf 8f6f 	isb	sy
 80157de:	f3bf 8f4f 	dsb	sy
 80157e2:	61fb      	str	r3, [r7, #28]
}
 80157e4:	bf00      	nop
 80157e6:	e7fe      	b.n	80157e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80157e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80157ee:	6850      	ldr	r0, [r2, #4]
 80157f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80157f2:	6892      	ldr	r2, [r2, #8]
 80157f4:	4611      	mov	r1, r2
 80157f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	f2c0 80aa 	blt.w	8015954 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015806:	695b      	ldr	r3, [r3, #20]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d004      	beq.n	8015816 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801580c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801580e:	3304      	adds	r3, #4
 8015810:	4618      	mov	r0, r3
 8015812:	f7fd fae7 	bl	8012de4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015816:	463b      	mov	r3, r7
 8015818:	4618      	mov	r0, r3
 801581a:	f7ff ff6b 	bl	80156f4 <prvSampleTimeNow>
 801581e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	2b09      	cmp	r3, #9
 8015824:	f200 8097 	bhi.w	8015956 <prvProcessReceivedCommands+0x19e>
 8015828:	a201      	add	r2, pc, #4	; (adr r2, 8015830 <prvProcessReceivedCommands+0x78>)
 801582a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801582e:	bf00      	nop
 8015830:	08015859 	.word	0x08015859
 8015834:	08015859 	.word	0x08015859
 8015838:	08015859 	.word	0x08015859
 801583c:	080158cd 	.word	0x080158cd
 8015840:	080158e1 	.word	0x080158e1
 8015844:	0801592b 	.word	0x0801592b
 8015848:	08015859 	.word	0x08015859
 801584c:	08015859 	.word	0x08015859
 8015850:	080158cd 	.word	0x080158cd
 8015854:	080158e1 	.word	0x080158e1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801585a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801585e:	f043 0301 	orr.w	r3, r3, #1
 8015862:	b2da      	uxtb	r2, r3
 8015864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015866:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801586a:	68ba      	ldr	r2, [r7, #8]
 801586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801586e:	699b      	ldr	r3, [r3, #24]
 8015870:	18d1      	adds	r1, r2, r3
 8015872:	68bb      	ldr	r3, [r7, #8]
 8015874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015876:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015878:	f7ff ff5c 	bl	8015734 <prvInsertTimerInActiveList>
 801587c:	4603      	mov	r3, r0
 801587e:	2b00      	cmp	r3, #0
 8015880:	d069      	beq.n	8015956 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015884:	6a1b      	ldr	r3, [r3, #32]
 8015886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015888:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801588a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801588c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015890:	f003 0304 	and.w	r3, r3, #4
 8015894:	2b00      	cmp	r3, #0
 8015896:	d05e      	beq.n	8015956 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015898:	68ba      	ldr	r2, [r7, #8]
 801589a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801589c:	699b      	ldr	r3, [r3, #24]
 801589e:	441a      	add	r2, r3
 80158a0:	2300      	movs	r3, #0
 80158a2:	9300      	str	r3, [sp, #0]
 80158a4:	2300      	movs	r3, #0
 80158a6:	2100      	movs	r1, #0
 80158a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80158aa:	f7ff fe03 	bl	80154b4 <xTimerGenericCommand>
 80158ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80158b0:	6a3b      	ldr	r3, [r7, #32]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d14f      	bne.n	8015956 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80158b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80158ba:	f383 8811 	msr	BASEPRI, r3
 80158be:	f3bf 8f6f 	isb	sy
 80158c2:	f3bf 8f4f 	dsb	sy
 80158c6:	61bb      	str	r3, [r7, #24]
}
 80158c8:	bf00      	nop
 80158ca:	e7fe      	b.n	80158ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80158cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80158d2:	f023 0301 	bic.w	r3, r3, #1
 80158d6:	b2da      	uxtb	r2, r3
 80158d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80158de:	e03a      	b.n	8015956 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80158e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80158e6:	f043 0301 	orr.w	r3, r3, #1
 80158ea:	b2da      	uxtb	r2, r3
 80158ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80158f2:	68ba      	ldr	r2, [r7, #8]
 80158f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158f6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80158f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158fa:	699b      	ldr	r3, [r3, #24]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d10a      	bne.n	8015916 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8015900:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8015904:	f383 8811 	msr	BASEPRI, r3
 8015908:	f3bf 8f6f 	isb	sy
 801590c:	f3bf 8f4f 	dsb	sy
 8015910:	617b      	str	r3, [r7, #20]
}
 8015912:	bf00      	nop
 8015914:	e7fe      	b.n	8015914 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015918:	699a      	ldr	r2, [r3, #24]
 801591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801591c:	18d1      	adds	r1, r2, r3
 801591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015924:	f7ff ff06 	bl	8015734 <prvInsertTimerInActiveList>
					break;
 8015928:	e015      	b.n	8015956 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801592a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801592c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015930:	f003 0302 	and.w	r3, r3, #2
 8015934:	2b00      	cmp	r3, #0
 8015936:	d103      	bne.n	8015940 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8015938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801593a:	f7fd f843 	bl	80129c4 <vPortFree>
 801593e:	e00a      	b.n	8015956 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015946:	f023 0301 	bic.w	r3, r3, #1
 801594a:	b2da      	uxtb	r2, r3
 801594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801594e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015952:	e000      	b.n	8015956 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015954:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015956:	4b08      	ldr	r3, [pc, #32]	; (8015978 <prvProcessReceivedCommands+0x1c0>)
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	1d39      	adds	r1, r7, #4
 801595c:	2200      	movs	r2, #0
 801595e:	4618      	mov	r0, r3
 8015960:	f7fe f83c 	bl	80139dc <xQueueReceive>
 8015964:	4603      	mov	r3, r0
 8015966:	2b00      	cmp	r3, #0
 8015968:	f47f af2a 	bne.w	80157c0 <prvProcessReceivedCommands+0x8>
	}
}
 801596c:	bf00      	nop
 801596e:	bf00      	nop
 8015970:	3730      	adds	r7, #48	; 0x30
 8015972:	46bd      	mov	sp, r7
 8015974:	bd80      	pop	{r7, pc}
 8015976:	bf00      	nop
 8015978:	2000d528 	.word	0x2000d528

0801597c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801597c:	b580      	push	{r7, lr}
 801597e:	b088      	sub	sp, #32
 8015980:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015982:	e048      	b.n	8015a16 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015984:	4b2d      	ldr	r3, [pc, #180]	; (8015a3c <prvSwitchTimerLists+0xc0>)
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	68db      	ldr	r3, [r3, #12]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801598e:	4b2b      	ldr	r3, [pc, #172]	; (8015a3c <prvSwitchTimerLists+0xc0>)
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	68db      	ldr	r3, [r3, #12]
 8015994:	68db      	ldr	r3, [r3, #12]
 8015996:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	3304      	adds	r3, #4
 801599c:	4618      	mov	r0, r3
 801599e:	f7fd fa21 	bl	8012de4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	6a1b      	ldr	r3, [r3, #32]
 80159a6:	68f8      	ldr	r0, [r7, #12]
 80159a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80159b0:	f003 0304 	and.w	r3, r3, #4
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d02e      	beq.n	8015a16 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	699b      	ldr	r3, [r3, #24]
 80159bc:	693a      	ldr	r2, [r7, #16]
 80159be:	4413      	add	r3, r2
 80159c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80159c2:	68ba      	ldr	r2, [r7, #8]
 80159c4:	693b      	ldr	r3, [r7, #16]
 80159c6:	429a      	cmp	r2, r3
 80159c8:	d90e      	bls.n	80159e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	68ba      	ldr	r2, [r7, #8]
 80159ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	68fa      	ldr	r2, [r7, #12]
 80159d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80159d6:	4b19      	ldr	r3, [pc, #100]	; (8015a3c <prvSwitchTimerLists+0xc0>)
 80159d8:	681a      	ldr	r2, [r3, #0]
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	3304      	adds	r3, #4
 80159de:	4619      	mov	r1, r3
 80159e0:	4610      	mov	r0, r2
 80159e2:	f7fd f9c6 	bl	8012d72 <vListInsert>
 80159e6:	e016      	b.n	8015a16 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80159e8:	2300      	movs	r3, #0
 80159ea:	9300      	str	r3, [sp, #0]
 80159ec:	2300      	movs	r3, #0
 80159ee:	693a      	ldr	r2, [r7, #16]
 80159f0:	2100      	movs	r1, #0
 80159f2:	68f8      	ldr	r0, [r7, #12]
 80159f4:	f7ff fd5e 	bl	80154b4 <xTimerGenericCommand>
 80159f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d10a      	bne.n	8015a16 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015a00:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8015a04:	f383 8811 	msr	BASEPRI, r3
 8015a08:	f3bf 8f6f 	isb	sy
 8015a0c:	f3bf 8f4f 	dsb	sy
 8015a10:	603b      	str	r3, [r7, #0]
}
 8015a12:	bf00      	nop
 8015a14:	e7fe      	b.n	8015a14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015a16:	4b09      	ldr	r3, [pc, #36]	; (8015a3c <prvSwitchTimerLists+0xc0>)
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d1b1      	bne.n	8015984 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015a20:	4b06      	ldr	r3, [pc, #24]	; (8015a3c <prvSwitchTimerLists+0xc0>)
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015a26:	4b06      	ldr	r3, [pc, #24]	; (8015a40 <prvSwitchTimerLists+0xc4>)
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	4a04      	ldr	r2, [pc, #16]	; (8015a3c <prvSwitchTimerLists+0xc0>)
 8015a2c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015a2e:	4a04      	ldr	r2, [pc, #16]	; (8015a40 <prvSwitchTimerLists+0xc4>)
 8015a30:	697b      	ldr	r3, [r7, #20]
 8015a32:	6013      	str	r3, [r2, #0]
}
 8015a34:	bf00      	nop
 8015a36:	3718      	adds	r7, #24
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	bd80      	pop	{r7, pc}
 8015a3c:	2000d520 	.word	0x2000d520
 8015a40:	2000d524 	.word	0x2000d524

08015a44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015a44:	b580      	push	{r7, lr}
 8015a46:	b082      	sub	sp, #8
 8015a48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015a4a:	f7fd fb23 	bl	8013094 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015a4e:	4b15      	ldr	r3, [pc, #84]	; (8015aa4 <prvCheckForValidListAndQueue+0x60>)
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d120      	bne.n	8015a98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015a56:	4814      	ldr	r0, [pc, #80]	; (8015aa8 <prvCheckForValidListAndQueue+0x64>)
 8015a58:	f7fd f93a 	bl	8012cd0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015a5c:	4813      	ldr	r0, [pc, #76]	; (8015aac <prvCheckForValidListAndQueue+0x68>)
 8015a5e:	f7fd f937 	bl	8012cd0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015a62:	4b13      	ldr	r3, [pc, #76]	; (8015ab0 <prvCheckForValidListAndQueue+0x6c>)
 8015a64:	4a10      	ldr	r2, [pc, #64]	; (8015aa8 <prvCheckForValidListAndQueue+0x64>)
 8015a66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015a68:	4b12      	ldr	r3, [pc, #72]	; (8015ab4 <prvCheckForValidListAndQueue+0x70>)
 8015a6a:	4a10      	ldr	r2, [pc, #64]	; (8015aac <prvCheckForValidListAndQueue+0x68>)
 8015a6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015a6e:	2300      	movs	r3, #0
 8015a70:	9300      	str	r3, [sp, #0]
 8015a72:	4b11      	ldr	r3, [pc, #68]	; (8015ab8 <prvCheckForValidListAndQueue+0x74>)
 8015a74:	4a11      	ldr	r2, [pc, #68]	; (8015abc <prvCheckForValidListAndQueue+0x78>)
 8015a76:	2110      	movs	r1, #16
 8015a78:	20ff      	movs	r0, #255	; 0xff
 8015a7a:	f7fd fd79 	bl	8013570 <xQueueGenericCreateStatic>
 8015a7e:	4603      	mov	r3, r0
 8015a80:	4a08      	ldr	r2, [pc, #32]	; (8015aa4 <prvCheckForValidListAndQueue+0x60>)
 8015a82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015a84:	4b07      	ldr	r3, [pc, #28]	; (8015aa4 <prvCheckForValidListAndQueue+0x60>)
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d005      	beq.n	8015a98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015a8c:	4b05      	ldr	r3, [pc, #20]	; (8015aa4 <prvCheckForValidListAndQueue+0x60>)
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	490b      	ldr	r1, [pc, #44]	; (8015ac0 <prvCheckForValidListAndQueue+0x7c>)
 8015a92:	4618      	mov	r0, r3
 8015a94:	f7fe f992 	bl	8013dbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015a98:	f7fd fb2c 	bl	80130f4 <vPortExitCritical>
}
 8015a9c:	bf00      	nop
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	bd80      	pop	{r7, pc}
 8015aa2:	bf00      	nop
 8015aa4:	2000d528 	.word	0x2000d528
 8015aa8:	2000d4f8 	.word	0x2000d4f8
 8015aac:	2000d50c 	.word	0x2000d50c
 8015ab0:	2000d520 	.word	0x2000d520
 8015ab4:	2000d524 	.word	0x2000d524
 8015ab8:	2000e524 	.word	0x2000e524
 8015abc:	2000d534 	.word	0x2000d534
 8015ac0:	08018894 	.word	0x08018894

08015ac4 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	b086      	sub	sp, #24
 8015ac8:	af00      	add	r7, sp, #0
 8015aca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d10a      	bne.n	8015aec <xTimerIsTimerActive+0x28>
	__asm volatile
 8015ad6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8015ada:	f383 8811 	msr	BASEPRI, r3
 8015ade:	f3bf 8f6f 	isb	sy
 8015ae2:	f3bf 8f4f 	dsb	sy
 8015ae6:	60fb      	str	r3, [r7, #12]
}
 8015ae8:	bf00      	nop
 8015aea:	e7fe      	b.n	8015aea <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8015aec:	f7fd fad2 	bl	8013094 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8015af0:	693b      	ldr	r3, [r7, #16]
 8015af2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015af6:	f003 0301 	and.w	r3, r3, #1
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d102      	bne.n	8015b04 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 8015afe:	2300      	movs	r3, #0
 8015b00:	617b      	str	r3, [r7, #20]
 8015b02:	e001      	b.n	8015b08 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 8015b04:	2301      	movs	r3, #1
 8015b06:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8015b08:	f7fd faf4 	bl	80130f4 <vPortExitCritical>

	return xReturn;
 8015b0c:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8015b0e:	4618      	mov	r0, r3
 8015b10:	3718      	adds	r7, #24
 8015b12:	46bd      	mov	sp, r7
 8015b14:	bd80      	pop	{r7, pc}

08015b16 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8015b16:	b580      	push	{r7, lr}
 8015b18:	b086      	sub	sp, #24
 8015b1a:	af00      	add	r7, sp, #0
 8015b1c:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d10a      	bne.n	8015b3e <pvTimerGetTimerID+0x28>
	__asm volatile
 8015b28:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8015b2c:	f383 8811 	msr	BASEPRI, r3
 8015b30:	f3bf 8f6f 	isb	sy
 8015b34:	f3bf 8f4f 	dsb	sy
 8015b38:	60fb      	str	r3, [r7, #12]
}
 8015b3a:	bf00      	nop
 8015b3c:	e7fe      	b.n	8015b3c <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8015b3e:	f7fd faa9 	bl	8013094 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8015b42:	697b      	ldr	r3, [r7, #20]
 8015b44:	69db      	ldr	r3, [r3, #28]
 8015b46:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8015b48:	f7fd fad4 	bl	80130f4 <vPortExitCritical>

	return pvReturn;
 8015b4c:	693b      	ldr	r3, [r7, #16]
}
 8015b4e:	4618      	mov	r0, r3
 8015b50:	3718      	adds	r7, #24
 8015b52:	46bd      	mov	sp, r7
 8015b54:	bd80      	pop	{r7, pc}
	...

08015b58 <Rte_Read_Dem_DemPort_Dem_DtcArray>:
/*****************************************
*		END OF FUNCTIONS				 *
******************************************/
/* Run time environment interface. */
VOID Rte_Read_Dem_DemPort_Dem_DtcArray(uint8* data, uint8 position)
{
 8015b58:	b480      	push	{r7}
 8015b5a:	b083      	sub	sp, #12
 8015b5c:	af00      	add	r7, sp, #0
 8015b5e:	6078      	str	r0, [r7, #4]
 8015b60:	460b      	mov	r3, r1
 8015b62:	70fb      	strb	r3, [r7, #3]
	ExtLights_DtcArray[0] = Dem_DtcArray[0];
 8015b64:	4b16      	ldr	r3, [pc, #88]	; (8015bc0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x68>)
 8015b66:	781a      	ldrb	r2, [r3, #0]
 8015b68:	4b16      	ldr	r3, [pc, #88]	; (8015bc4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x6c>)
 8015b6a:	701a      	strb	r2, [r3, #0]
	ExtLights_DtcArray[1] = Dem_DtcArray[1];
 8015b6c:	4b14      	ldr	r3, [pc, #80]	; (8015bc0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x68>)
 8015b6e:	785a      	ldrb	r2, [r3, #1]
 8015b70:	4b14      	ldr	r3, [pc, #80]	; (8015bc4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x6c>)
 8015b72:	705a      	strb	r2, [r3, #1]
	ExtLights_DtcArray[2] = Dem_DtcArray[2];
 8015b74:	4b12      	ldr	r3, [pc, #72]	; (8015bc0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x68>)
 8015b76:	789a      	ldrb	r2, [r3, #2]
 8015b78:	4b12      	ldr	r3, [pc, #72]	; (8015bc4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x6c>)
 8015b7a:	709a      	strb	r2, [r3, #2]
	ExtLights_DtcArray[3] = Dem_DtcArray[3];
 8015b7c:	4b10      	ldr	r3, [pc, #64]	; (8015bc0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x68>)
 8015b7e:	78da      	ldrb	r2, [r3, #3]
 8015b80:	4b10      	ldr	r3, [pc, #64]	; (8015bc4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x6c>)
 8015b82:	70da      	strb	r2, [r3, #3]
	ExtLights_DtcArray[4] = Dem_DtcArray[4];
 8015b84:	4b0e      	ldr	r3, [pc, #56]	; (8015bc0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x68>)
 8015b86:	791a      	ldrb	r2, [r3, #4]
 8015b88:	4b0e      	ldr	r3, [pc, #56]	; (8015bc4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x6c>)
 8015b8a:	711a      	strb	r2, [r3, #4]
	ExtLights_DtcArray[5] = Dem_DtcArray[5];
 8015b8c:	4b0c      	ldr	r3, [pc, #48]	; (8015bc0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x68>)
 8015b8e:	795a      	ldrb	r2, [r3, #5]
 8015b90:	4b0c      	ldr	r3, [pc, #48]	; (8015bc4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x6c>)
 8015b92:	715a      	strb	r2, [r3, #5]
	ExtLights_DtcArray[6] = Dem_DtcArray[6];
 8015b94:	4b0a      	ldr	r3, [pc, #40]	; (8015bc0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x68>)
 8015b96:	799a      	ldrb	r2, [r3, #6]
 8015b98:	4b0a      	ldr	r3, [pc, #40]	; (8015bc4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x6c>)
 8015b9a:	719a      	strb	r2, [r3, #6]
	ExtLights_DtcArray[7] = Dem_DtcArray[7];
 8015b9c:	4b08      	ldr	r3, [pc, #32]	; (8015bc0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x68>)
 8015b9e:	79da      	ldrb	r2, [r3, #7]
 8015ba0:	4b08      	ldr	r3, [pc, #32]	; (8015bc4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x6c>)
 8015ba2:	71da      	strb	r2, [r3, #7]
	ExtLights_DtcArray[8] = Dem_DtcArray[8];
 8015ba4:	4b06      	ldr	r3, [pc, #24]	; (8015bc0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x68>)
 8015ba6:	7a1a      	ldrb	r2, [r3, #8]
 8015ba8:	4b06      	ldr	r3, [pc, #24]	; (8015bc4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x6c>)
 8015baa:	721a      	strb	r2, [r3, #8]
	ExtLights_DtcArray[9] = Dem_DtcArray[9];
 8015bac:	4b04      	ldr	r3, [pc, #16]	; (8015bc0 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x68>)
 8015bae:	7a5a      	ldrb	r2, [r3, #9]
 8015bb0:	4b04      	ldr	r3, [pc, #16]	; (8015bc4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x6c>)
 8015bb2:	725a      	strb	r2, [r3, #9]
}
 8015bb4:	bf00      	nop
 8015bb6:	370c      	adds	r7, #12
 8015bb8:	46bd      	mov	sp, r7
 8015bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bbe:	4770      	bx	lr
 8015bc0:	20000c30 	.word	0x20000c30
 8015bc4:	2000019c 	.word	0x2000019c

08015bc8 <Rte_Write_TimH_TimHPort_Tim3Ccr2>:
{
	TIM3->CCR1 = data;
}
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr2(uint8 data)
{
 8015bc8:	b480      	push	{r7}
 8015bca:	b083      	sub	sp, #12
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	4603      	mov	r3, r0
 8015bd0:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR2 = data;
 8015bd2:	4a04      	ldr	r2, [pc, #16]	; (8015be4 <Rte_Write_TimH_TimHPort_Tim3Ccr2+0x1c>)
 8015bd4:	79fb      	ldrb	r3, [r7, #7]
 8015bd6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8015bd8:	bf00      	nop
 8015bda:	370c      	adds	r7, #12
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be2:	4770      	bx	lr
 8015be4:	40000400 	.word	0x40000400

08015be8 <Rte_Write_TimH_TimHPort_Tim3Ccr3>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr3(uint8 data)
{
 8015be8:	b480      	push	{r7}
 8015bea:	b083      	sub	sp, #12
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	4603      	mov	r3, r0
 8015bf0:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR3 = data;
 8015bf2:	4a04      	ldr	r2, [pc, #16]	; (8015c04 <Rte_Write_TimH_TimHPort_Tim3Ccr3+0x1c>)
 8015bf4:	79fb      	ldrb	r3, [r7, #7]
 8015bf6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8015bf8:	bf00      	nop
 8015bfa:	370c      	adds	r7, #12
 8015bfc:	46bd      	mov	sp, r7
 8015bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c02:	4770      	bx	lr
 8015c04:	40000400 	.word	0x40000400

08015c08 <Rte_Write_TimH_TimHPort_Tim3Ccr4>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr4(uint8 data)
{
 8015c08:	b480      	push	{r7}
 8015c0a:	b083      	sub	sp, #12
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	4603      	mov	r3, r0
 8015c10:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR4 = data;
 8015c12:	4a04      	ldr	r2, [pc, #16]	; (8015c24 <Rte_Write_TimH_TimHPort_Tim3Ccr4+0x1c>)
 8015c14:	79fb      	ldrb	r3, [r7, #7]
 8015c16:	6413      	str	r3, [r2, #64]	; 0x40
}
 8015c18:	bf00      	nop
 8015c1a:	370c      	adds	r7, #12
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c22:	4770      	bx	lr
 8015c24:	40000400 	.word	0x40000400

08015c28 <Rte_Write_TimH_TimHPort_Tim2Ccr1>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim2Ccr1(uint16 data)
{
 8015c28:	b480      	push	{r7}
 8015c2a:	b083      	sub	sp, #12
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	4603      	mov	r3, r0
 8015c30:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR1 = data;
 8015c32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015c36:	88fb      	ldrh	r3, [r7, #6]
 8015c38:	6353      	str	r3, [r2, #52]	; 0x34
}
 8015c3a:	bf00      	nop
 8015c3c:	370c      	adds	r7, #12
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c44:	4770      	bx	lr

08015c46 <Rte_Write_TimH_TimHPort_Tim2Ccr2>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim2Ccr2(uint16 data)
{
 8015c46:	b480      	push	{r7}
 8015c48:	b083      	sub	sp, #12
 8015c4a:	af00      	add	r7, sp, #0
 8015c4c:	4603      	mov	r3, r0
 8015c4e:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR2 = data;
 8015c50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015c54:	88fb      	ldrh	r3, [r7, #6]
 8015c56:	6393      	str	r3, [r2, #56]	; 0x38
}
 8015c58:	bf00      	nop
 8015c5a:	370c      	adds	r7, #12
 8015c5c:	46bd      	mov	sp, r7
 8015c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c62:	4770      	bx	lr

08015c64 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>:
{
	TIM2->CCR3 = data;
}
/* Run time environment interface. */
VOID Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(uint8* data, uint8 position)
{
 8015c64:	b480      	push	{r7}
 8015c66:	b083      	sub	sp, #12
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	6078      	str	r0, [r7, #4]
 8015c6c:	460b      	mov	r3, r1
 8015c6e:	70fb      	strb	r3, [r7, #3]
	*data = SystemManager_Fault[position];
 8015c70:	78fb      	ldrb	r3, [r7, #3]
 8015c72:	4a05      	ldr	r2, [pc, #20]	; (8015c88 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault+0x24>)
 8015c74:	5cd2      	ldrb	r2, [r2, r3]
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	701a      	strb	r2, [r3, #0]
}
 8015c7a:	bf00      	nop
 8015c7c:	370c      	adds	r7, #12
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c84:	4770      	bx	lr
 8015c86:	bf00      	nop
 8015c88:	2000e638 	.word	0x2000e638

08015c8c <Rte_Write_Hvac_HvacPort_Hvac_FanValue>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_FanValue(uint8* data)
{
 8015c8c:	b480      	push	{r7}
 8015c8e:	b083      	sub	sp, #12
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	6078      	str	r0, [r7, #4]
	Hvac_FanValue = *data - 30;
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	781b      	ldrb	r3, [r3, #0]
 8015c98:	3b1e      	subs	r3, #30
 8015c9a:	b2da      	uxtb	r2, r3
 8015c9c:	4b03      	ldr	r3, [pc, #12]	; (8015cac <Rte_Write_Hvac_HvacPort_Hvac_FanValue+0x20>)
 8015c9e:	701a      	strb	r2, [r3, #0]
}
 8015ca0:	bf00      	nop
 8015ca2:	370c      	adds	r7, #12
 8015ca4:	46bd      	mov	sp, r7
 8015ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015caa:	4770      	bx	lr
 8015cac:	200001af 	.word	0x200001af

08015cb0 <Rte_Write_Hvac_HvacPort_Hvac_TemperatureValue>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_TemperatureValue(uint8* data)
{
 8015cb0:	b480      	push	{r7}
 8015cb2:	b083      	sub	sp, #12
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	6078      	str	r0, [r7, #4]
	Hvac_TemperatureValue = *data - 22;
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	781b      	ldrb	r3, [r3, #0]
 8015cbc:	3b16      	subs	r3, #22
 8015cbe:	b2da      	uxtb	r2, r3
 8015cc0:	4b03      	ldr	r3, [pc, #12]	; (8015cd0 <Rte_Write_Hvac_HvacPort_Hvac_TemperatureValue+0x20>)
 8015cc2:	701a      	strb	r2, [r3, #0]
}
 8015cc4:	bf00      	nop
 8015cc6:	370c      	adds	r7, #12
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cce:	4770      	bx	lr
 8015cd0:	200001b0 	.word	0x200001b0

08015cd4 <Rte_Write_Hvac_HvacPort_Hvac_LegVent>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_LegVent(uint8* data)
{
 8015cd4:	b480      	push	{r7}
 8015cd6:	b083      	sub	sp, #12
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	6078      	str	r0, [r7, #4]
	Hvac_LegVent = *data;
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	781a      	ldrb	r2, [r3, #0]
 8015ce0:	4b03      	ldr	r3, [pc, #12]	; (8015cf0 <Rte_Write_Hvac_HvacPort_Hvac_LegVent+0x1c>)
 8015ce2:	701a      	strb	r2, [r3, #0]
}
 8015ce4:	bf00      	nop
 8015ce6:	370c      	adds	r7, #12
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cee:	4770      	bx	lr
 8015cf0:	200001b1 	.word	0x200001b1

08015cf4 <Rte_Write_Hvac_HvacPort_Hvac_MidVent>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_MidVent(uint8* data)
{
 8015cf4:	b480      	push	{r7}
 8015cf6:	b083      	sub	sp, #12
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
	Hvac_MidVent = *data;
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	781a      	ldrb	r2, [r3, #0]
 8015d00:	4b03      	ldr	r3, [pc, #12]	; (8015d10 <Rte_Write_Hvac_HvacPort_Hvac_MidVent+0x1c>)
 8015d02:	701a      	strb	r2, [r3, #0]
}
 8015d04:	bf00      	nop
 8015d06:	370c      	adds	r7, #12
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d0e:	4770      	bx	lr
 8015d10:	200001b2 	.word	0x200001b2

08015d14 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent(uint8* data)
{
 8015d14:	b480      	push	{r7}
 8015d16:	b083      	sub	sp, #12
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	6078      	str	r0, [r7, #4]
	Hvac_WindshieldVent = *data;
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	781a      	ldrb	r2, [r3, #0]
 8015d20:	4b03      	ldr	r3, [pc, #12]	; (8015d30 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent+0x1c>)
 8015d22:	701a      	strb	r2, [r3, #0]
}
 8015d24:	bf00      	nop
 8015d26:	370c      	adds	r7, #12
 8015d28:	46bd      	mov	sp, r7
 8015d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d2e:	4770      	bx	lr
 8015d30:	200001b3 	.word	0x200001b3

08015d34 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost(uint8* data)
{
 8015d34:	b480      	push	{r7}
 8015d36:	b083      	sub	sp, #12
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	6078      	str	r0, [r7, #4]
	Hvac_WindshieldDefrost = *data;
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	781a      	ldrb	r2, [r3, #0]
 8015d40:	4b03      	ldr	r3, [pc, #12]	; (8015d50 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost+0x1c>)
 8015d42:	701a      	strb	r2, [r3, #0]
}
 8015d44:	bf00      	nop
 8015d46:	370c      	adds	r7, #12
 8015d48:	46bd      	mov	sp, r7
 8015d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d4e:	4770      	bx	lr
 8015d50:	200001b4 	.word	0x200001b4

08015d54 <Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost(uint8* data)
{
 8015d54:	b480      	push	{r7}
 8015d56:	b083      	sub	sp, #12
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	6078      	str	r0, [r7, #4]
	Hvac_RearWindshieldDefrost = *data;
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	781a      	ldrb	r2, [r3, #0]
 8015d60:	4b03      	ldr	r3, [pc, #12]	; (8015d70 <Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost+0x1c>)
 8015d62:	701a      	strb	r2, [r3, #0]
}
 8015d64:	bf00      	nop
 8015d66:	370c      	adds	r7, #12
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6e:	4770      	bx	lr
 8015d70:	200001b5 	.word	0x200001b5

08015d74 <Rte_Write_Hvac_HvacPort_Hvac_Ac>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_Ac(uint8* data)
{
 8015d74:	b480      	push	{r7}
 8015d76:	b083      	sub	sp, #12
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	6078      	str	r0, [r7, #4]
	Hvac_Ac = *data;
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	781a      	ldrb	r2, [r3, #0]
 8015d80:	4b03      	ldr	r3, [pc, #12]	; (8015d90 <Rte_Write_Hvac_HvacPort_Hvac_Ac+0x1c>)
 8015d82:	701a      	strb	r2, [r3, #0]
}
 8015d84:	bf00      	nop
 8015d86:	370c      	adds	r7, #12
 8015d88:	46bd      	mov	sp, r7
 8015d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d8e:	4770      	bx	lr
 8015d90:	200001b6 	.word	0x200001b6

08015d94 <Rte_Write_Hvac_HvacPort_Hvac_Recirculation>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_Recirculation(uint8* data)
{
 8015d94:	b480      	push	{r7}
 8015d96:	b083      	sub	sp, #12
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	6078      	str	r0, [r7, #4]
	Hvac_Recirculation = *data;
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	781a      	ldrb	r2, [r3, #0]
 8015da0:	4b03      	ldr	r3, [pc, #12]	; (8015db0 <Rte_Write_Hvac_HvacPort_Hvac_Recirculation+0x1c>)
 8015da2:	701a      	strb	r2, [r3, #0]
}
 8015da4:	bf00      	nop
 8015da6:	370c      	adds	r7, #12
 8015da8:	46bd      	mov	sp, r7
 8015daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dae:	4770      	bx	lr
 8015db0:	200001b7 	.word	0x200001b7

08015db4 <Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation(uint8* data)
{
 8015db4:	b480      	push	{r7}
 8015db6:	b083      	sub	sp, #12
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
	Hvac_NoRecirculation = *data;
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	781a      	ldrb	r2, [r3, #0]
 8015dc0:	4b03      	ldr	r3, [pc, #12]	; (8015dd0 <Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation+0x1c>)
 8015dc2:	701a      	strb	r2, [r3, #0]
}
 8015dc4:	bf00      	nop
 8015dc6:	370c      	adds	r7, #12
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dce:	4770      	bx	lr
 8015dd0:	200001b8 	.word	0x200001b8

08015dd4 <Rte_Write_Hvac_HvacPort_Hvac_AutomaticRecirculation>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_AutomaticRecirculation(uint8* data)
{
 8015dd4:	b480      	push	{r7}
 8015dd6:	b083      	sub	sp, #12
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	6078      	str	r0, [r7, #4]
	Hvac_AutomaticRecirculation = *data;
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	781a      	ldrb	r2, [r3, #0]
 8015de0:	4b03      	ldr	r3, [pc, #12]	; (8015df0 <Rte_Write_Hvac_HvacPort_Hvac_AutomaticRecirculation+0x1c>)
 8015de2:	701a      	strb	r2, [r3, #0]
}
 8015de4:	bf00      	nop
 8015de6:	370c      	adds	r7, #12
 8015de8:	46bd      	mov	sp, r7
 8015dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dee:	4770      	bx	lr
 8015df0:	200001b9 	.word	0x200001b9

08015df4 <Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode(uint8* data)
{
 8015df4:	b480      	push	{r7}
 8015df6:	b083      	sub	sp, #12
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	6078      	str	r0, [r7, #4]
	Hvac_AutomaticMode = *data;
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	781a      	ldrb	r2, [r3, #0]
 8015e00:	4b03      	ldr	r3, [pc, #12]	; (8015e10 <Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode+0x1c>)
 8015e02:	701a      	strb	r2, [r3, #0]
}
 8015e04:	bf00      	nop
 8015e06:	370c      	adds	r7, #12
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e0e:	4770      	bx	lr
 8015e10:	200001ba 	.word	0x200001ba

08015e14 <Rte_Write_Hvac_HvacPort_Hvac_TsState>:
{
	 Hvac_AqsState = *data;
}
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_TsState(uint8* data)
{
 8015e14:	b480      	push	{r7}
 8015e16:	b083      	sub	sp, #12
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	6078      	str	r0, [r7, #4]
	Hvac_TsState = *data;
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	781a      	ldrb	r2, [r3, #0]
 8015e20:	4b03      	ldr	r3, [pc, #12]	; (8015e30 <Rte_Write_Hvac_HvacPort_Hvac_TsState+0x1c>)
 8015e22:	701a      	strb	r2, [r3, #0]
}
 8015e24:	bf00      	nop
 8015e26:	370c      	adds	r7, #12
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2e:	4770      	bx	lr
 8015e30:	200001ac 	.word	0x200001ac

08015e34 <Rte_Write_Btc_BtcPort_Btc_ApplState>:
{
	*data = Btc_ApplState;
}
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_ApplState(uint8* data)
{
 8015e34:	b480      	push	{r7}
 8015e36:	b083      	sub	sp, #12
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	6078      	str	r0, [r7, #4]
	Btc_ApplState = *data;
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	781a      	ldrb	r2, [r3, #0]
 8015e40:	4b03      	ldr	r3, [pc, #12]	; (8015e50 <Rte_Write_Btc_BtcPort_Btc_ApplState+0x1c>)
 8015e42:	701a      	strb	r2, [r3, #0]
}
 8015e44:	bf00      	nop
 8015e46:	370c      	adds	r7, #12
 8015e48:	46bd      	mov	sp, r7
 8015e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e4e:	4770      	bx	lr
 8015e50:	200000ec 	.word	0x200000ec

08015e54 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>:
{
	*data = DiagCtrl_FaultValue;
}
/* Run time environment interface. */
VOID Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(uint8 data)
{
 8015e54:	b480      	push	{r7}
 8015e56:	b083      	sub	sp, #12
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	4603      	mov	r3, r0
 8015e5c:	71fb      	strb	r3, [r7, #7]
	DiagCtrl_FaultValue = data;
 8015e5e:	4a04      	ldr	r2, [pc, #16]	; (8015e70 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue+0x1c>)
 8015e60:	79fb      	ldrb	r3, [r7, #7]
 8015e62:	7013      	strb	r3, [r2, #0]
}
 8015e64:	bf00      	nop
 8015e66:	370c      	adds	r7, #12
 8015e68:	46bd      	mov	sp, r7
 8015e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e6e:	4770      	bx	lr
 8015e70:	20000144 	.word	0x20000144

08015e74 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>:
{
	*data = SecAlm_SensorState;
}
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(uint32* data)
{
 8015e74:	b480      	push	{r7}
 8015e76:	b083      	sub	sp, #12
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	6078      	str	r0, [r7, #4]
	SecAlm_SensorState = *data;
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	b2da      	uxtb	r2, r3
 8015e82:	4b04      	ldr	r3, [pc, #16]	; (8015e94 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState+0x20>)
 8015e84:	701a      	strb	r2, [r3, #0]
}
 8015e86:	bf00      	nop
 8015e88:	370c      	adds	r7, #12
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e90:	4770      	bx	lr
 8015e92:	bf00      	nop
 8015e94:	200001e4 	.word	0x200001e4

08015e98 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>:
{
	*data = ExtLights_LightSensorState;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(uint32* data)
{
 8015e98:	b480      	push	{r7}
 8015e9a:	b083      	sub	sp, #12
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	6078      	str	r0, [r7, #4]
	ExtLights_LightSensorState = *data;
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	4a03      	ldr	r2, [pc, #12]	; (8015eb4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState+0x1c>)
 8015ea6:	6013      	str	r3, [r2, #0]
}
 8015ea8:	bf00      	nop
 8015eaa:	370c      	adds	r7, #12
 8015eac:	46bd      	mov	sp, r7
 8015eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eb2:	4770      	bx	lr
 8015eb4:	20000194 	.word	0x20000194

08015eb8 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues>:
	Adc_ChannelOne_Buffer[14] = SenCtrl_MeasuredValues[14];
	Adc_ChannelOne_Buffer[15] = SenCtrl_MeasuredValues[15];
}
/* Run time environment interface. */
VOID Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues(uint32* data)
{
 8015eb8:	b480      	push	{r7}
 8015eba:	b083      	sub	sp, #12
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	6078      	str	r0, [r7, #4]
	SenCtrl_MeasuredValues[0] = Adc_ChannelOne_Buffer[0];
 8015ec0:	4b1a      	ldr	r3, [pc, #104]	; (8015f2c <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	4a1a      	ldr	r2, [pc, #104]	; (8015f30 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8015ec6:	6013      	str	r3, [r2, #0]
	SenCtrl_MeasuredValues[2] = Adc_ChannelOne_Buffer[2];
 8015ec8:	4b18      	ldr	r3, [pc, #96]	; (8015f2c <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8015eca:	689b      	ldr	r3, [r3, #8]
 8015ecc:	4a18      	ldr	r2, [pc, #96]	; (8015f30 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8015ece:	6093      	str	r3, [r2, #8]
	SenCtrl_MeasuredValues[3] = Adc_ChannelOne_Buffer[3];
 8015ed0:	4b16      	ldr	r3, [pc, #88]	; (8015f2c <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8015ed2:	68db      	ldr	r3, [r3, #12]
 8015ed4:	4a16      	ldr	r2, [pc, #88]	; (8015f30 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8015ed6:	60d3      	str	r3, [r2, #12]
	SenCtrl_MeasuredValues[4] = Adc_ChannelOne_Buffer[4];
 8015ed8:	4b14      	ldr	r3, [pc, #80]	; (8015f2c <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8015eda:	691b      	ldr	r3, [r3, #16]
 8015edc:	4a14      	ldr	r2, [pc, #80]	; (8015f30 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8015ede:	6113      	str	r3, [r2, #16]
	SenCtrl_MeasuredValues[5] = Adc_ChannelOne_Buffer[5];
 8015ee0:	4b12      	ldr	r3, [pc, #72]	; (8015f2c <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8015ee2:	695b      	ldr	r3, [r3, #20]
 8015ee4:	4a12      	ldr	r2, [pc, #72]	; (8015f30 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8015ee6:	6153      	str	r3, [r2, #20]
	SenCtrl_MeasuredValues[6] = Adc_ChannelOne_Buffer[6];
 8015ee8:	4b10      	ldr	r3, [pc, #64]	; (8015f2c <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8015eea:	699b      	ldr	r3, [r3, #24]
 8015eec:	4a10      	ldr	r2, [pc, #64]	; (8015f30 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8015eee:	6193      	str	r3, [r2, #24]
	SenCtrl_MeasuredValues[7] = Adc_ChannelOne_Buffer[7];
 8015ef0:	4b0e      	ldr	r3, [pc, #56]	; (8015f2c <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8015ef2:	69db      	ldr	r3, [r3, #28]
 8015ef4:	4a0e      	ldr	r2, [pc, #56]	; (8015f30 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8015ef6:	61d3      	str	r3, [r2, #28]
	SenCtrl_MeasuredValues[8] = Adc_ChannelOne_Buffer[8];
 8015ef8:	4b0c      	ldr	r3, [pc, #48]	; (8015f2c <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8015efa:	6a1b      	ldr	r3, [r3, #32]
 8015efc:	4a0c      	ldr	r2, [pc, #48]	; (8015f30 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8015efe:	6213      	str	r3, [r2, #32]
	SenCtrl_MeasuredValues[9] = Adc_ChannelOne_Buffer[9];
 8015f00:	4b0a      	ldr	r3, [pc, #40]	; (8015f2c <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8015f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f04:	4a0a      	ldr	r2, [pc, #40]	; (8015f30 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8015f06:	6253      	str	r3, [r2, #36]	; 0x24
	SenCtrl_MeasuredValues[10] = Adc_ChannelOne_Buffer[10];
 8015f08:	4b08      	ldr	r3, [pc, #32]	; (8015f2c <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8015f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f0c:	4a08      	ldr	r2, [pc, #32]	; (8015f30 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8015f0e:	6293      	str	r3, [r2, #40]	; 0x28
	SenCtrl_MeasuredValues[11] = Adc_ChannelOne_Buffer[11];
 8015f10:	4b06      	ldr	r3, [pc, #24]	; (8015f2c <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8015f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f14:	4a06      	ldr	r2, [pc, #24]	; (8015f30 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8015f16:	62d3      	str	r3, [r2, #44]	; 0x2c
	SenCtrl_MeasuredValues[13] = Adc_ChannelOne_Buffer[13];
 8015f18:	4b04      	ldr	r3, [pc, #16]	; (8015f2c <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8015f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f1c:	4a04      	ldr	r2, [pc, #16]	; (8015f30 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8015f1e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8015f20:	bf00      	nop
 8015f22:	370c      	adds	r7, #12
 8015f24:	46bd      	mov	sp, r7
 8015f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f2a:	4770      	bx	lr
 8015f2c:	20000c8c 	.word	0x20000c8c
 8015f30:	200001e8 	.word	0x200001e8

08015f34 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>:
{
	*data = CenLoc_FollowMeHomeCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter(uint8* data)
{
 8015f34:	b480      	push	{r7}
 8015f36:	b083      	sub	sp, #12
 8015f38:	af00      	add	r7, sp, #0
 8015f3a:	6078      	str	r0, [r7, #4]
	CenLoc_FollowMeHomeCounter = *data;
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	781a      	ldrb	r2, [r3, #0]
 8015f40:	4b03      	ldr	r3, [pc, #12]	; (8015f50 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter+0x1c>)
 8015f42:	701a      	strb	r2, [r3, #0]
}
 8015f44:	bf00      	nop
 8015f46:	370c      	adds	r7, #12
 8015f48:	46bd      	mov	sp, r7
 8015f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f4e:	4770      	bx	lr
 8015f50:	2000013f 	.word	0x2000013f

08015f54 <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter>:
{
	*data = CenLoc_TurnOnLedCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter(uint8* data)
{
 8015f54:	b480      	push	{r7}
 8015f56:	b083      	sub	sp, #12
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
	CenLoc_TurnOnLedCounter = *data;
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	781a      	ldrb	r2, [r3, #0]
 8015f60:	4b03      	ldr	r3, [pc, #12]	; (8015f70 <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter+0x1c>)
 8015f62:	701a      	strb	r2, [r3, #0]
}
 8015f64:	bf00      	nop
 8015f66:	370c      	adds	r7, #12
 8015f68:	46bd      	mov	sp, r7
 8015f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f6e:	4770      	bx	lr
 8015f70:	20000140 	.word	0x20000140

08015f74 <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter>:
{
	*data = CenLoc_CyclicAlarmCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter(uint8* data)
{
 8015f74:	b480      	push	{r7}
 8015f76:	b083      	sub	sp, #12
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	6078      	str	r0, [r7, #4]
	CenLoc_CyclicAlarmCounter = *data;
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	781a      	ldrb	r2, [r3, #0]
 8015f80:	4b03      	ldr	r3, [pc, #12]	; (8015f90 <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter+0x1c>)
 8015f82:	701a      	strb	r2, [r3, #0]
}
 8015f84:	bf00      	nop
 8015f86:	370c      	adds	r7, #12
 8015f88:	46bd      	mov	sp, r7
 8015f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f8e:	4770      	bx	lr
 8015f90:	2000013e 	.word	0x2000013e

08015f94 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>:
{
	*data = CenLoc_BlinkCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(uint8* data)
{
 8015f94:	b480      	push	{r7}
 8015f96:	b083      	sub	sp, #12
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	6078      	str	r0, [r7, #4]
	CenLoc_BlinkCounter = *data;
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	781a      	ldrb	r2, [r3, #0]
 8015fa0:	4b03      	ldr	r3, [pc, #12]	; (8015fb0 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter+0x1c>)
 8015fa2:	701a      	strb	r2, [r3, #0]
}
 8015fa4:	bf00      	nop
 8015fa6:	370c      	adds	r7, #12
 8015fa8:	46bd      	mov	sp, r7
 8015faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fae:	4770      	bx	lr
 8015fb0:	2000013d 	.word	0x2000013d

08015fb4 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>:
{
	*data = Os_Alarm_Counter;
}
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(uint8* data)
{
 8015fb4:	b480      	push	{r7}
 8015fb6:	b083      	sub	sp, #12
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	6078      	str	r0, [r7, #4]
	Os_LockUnlockSequence_Counter = *data;
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	781a      	ldrb	r2, [r3, #0]
 8015fc0:	4b03      	ldr	r3, [pc, #12]	; (8015fd0 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter+0x1c>)
 8015fc2:	701a      	strb	r2, [r3, #0]
}
 8015fc4:	bf00      	nop
 8015fc6:	370c      	adds	r7, #12
 8015fc8:	46bd      	mov	sp, r7
 8015fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fce:	4770      	bx	lr
 8015fd0:	200003b0 	.word	0x200003b0

08015fd4 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(uint8* data)
{
 8015fd4:	b480      	push	{r7}
 8015fd6:	b083      	sub	sp, #12
 8015fd8:	af00      	add	r7, sp, #0
 8015fda:	6078      	str	r0, [r7, #4]
	Os_TurnOnCyclic_Counter = *data;
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	781a      	ldrb	r2, [r3, #0]
 8015fe0:	4b03      	ldr	r3, [pc, #12]	; (8015ff0 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter+0x1c>)
 8015fe2:	701a      	strb	r2, [r3, #0]
}
 8015fe4:	bf00      	nop
 8015fe6:	370c      	adds	r7, #12
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fee:	4770      	bx	lr
 8015ff0:	200003b1 	.word	0x200003b1

08015ff4 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(uint8* data)
{
 8015ff4:	b480      	push	{r7}
 8015ff6:	b083      	sub	sp, #12
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	6078      	str	r0, [r7, #4]
	Os_TurnOnLed_Counter = *data;
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	781a      	ldrb	r2, [r3, #0]
 8016000:	4b03      	ldr	r3, [pc, #12]	; (8016010 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter+0x1c>)
 8016002:	701a      	strb	r2, [r3, #0]
}
 8016004:	bf00      	nop
 8016006:	370c      	adds	r7, #12
 8016008:	46bd      	mov	sp, r7
 801600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801600e:	4770      	bx	lr
 8016010:	200003b2 	.word	0x200003b2

08016014 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(uint8* data)
{
 8016014:	b480      	push	{r7}
 8016016:	b083      	sub	sp, #12
 8016018:	af00      	add	r7, sp, #0
 801601a:	6078      	str	r0, [r7, #4]
	Os_FollowMeHome_Counter = *data;
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	781a      	ldrb	r2, [r3, #0]
 8016020:	4b03      	ldr	r3, [pc, #12]	; (8016030 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter+0x1c>)
 8016022:	701a      	strb	r2, [r3, #0]
}
 8016024:	bf00      	nop
 8016026:	370c      	adds	r7, #12
 8016028:	46bd      	mov	sp, r7
 801602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801602e:	4770      	bx	lr
 8016030:	200003b3 	.word	0x200003b3

08016034 <Rte_Write_Os_R_OsPort_Os_Lts_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_Lts_Counter(uint32* data)
{
 8016034:	b480      	push	{r7}
 8016036:	b083      	sub	sp, #12
 8016038:	af00      	add	r7, sp, #0
 801603a:	6078      	str	r0, [r7, #4]
	Os_Lts_Counter = *data;
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	4a03      	ldr	r2, [pc, #12]	; (8016050 <Rte_Write_Os_R_OsPort_Os_Lts_Counter+0x1c>)
 8016042:	6013      	str	r3, [r2, #0]
}
 8016044:	bf00      	nop
 8016046:	370c      	adds	r7, #12
 8016048:	46bd      	mov	sp, r7
 801604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801604e:	4770      	bx	lr
 8016050:	200003b4 	.word	0x200003b4

08016054 <Rte_Write_Os_R_OsPort_Os_Rts_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_Rts_Counter(uint32* data)
{
 8016054:	b480      	push	{r7}
 8016056:	b083      	sub	sp, #12
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]
	Os_Rts_Counter = *data;
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	4a03      	ldr	r2, [pc, #12]	; (8016070 <Rte_Write_Os_R_OsPort_Os_Rts_Counter+0x1c>)
 8016062:	6013      	str	r3, [r2, #0]
}
 8016064:	bf00      	nop
 8016066:	370c      	adds	r7, #12
 8016068:	46bd      	mov	sp, r7
 801606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801606e:	4770      	bx	lr
 8016070:	200003b8 	.word	0x200003b8

08016074 <Rte_Write_Os_R_OsPort_Os_HL_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_HL_Counter(uint32* data)
{
 8016074:	b480      	push	{r7}
 8016076:	b083      	sub	sp, #12
 8016078:	af00      	add	r7, sp, #0
 801607a:	6078      	str	r0, [r7, #4]
	Os_HL_Counter = *data;
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	4a03      	ldr	r2, [pc, #12]	; (8016090 <Rte_Write_Os_R_OsPort_Os_HL_Counter+0x1c>)
 8016082:	6013      	str	r3, [r2, #0]
}
 8016084:	bf00      	nop
 8016086:	370c      	adds	r7, #12
 8016088:	46bd      	mov	sp, r7
 801608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801608e:	4770      	bx	lr
 8016090:	200003bc 	.word	0x200003bc

08016094 <Rte_Runnable_EcuM_MainFunction>:
{
	Os_Alarm_Counter = *data;
}
/* Run time environment interface. */
VOID Rte_Runnable_EcuM_MainFunction()
{
 8016094:	b580      	push	{r7, lr}
 8016096:	af00      	add	r7, sp, #0
	EcuM_MainFunction();
 8016098:	f001 f9dc 	bl	8017454 <EcuM_MainFunction>
}
 801609c:	bf00      	nop
 801609e:	bd80      	pop	{r7, pc}

080160a0 <Rte_Runnable_SystemManager_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_SystemManager_MainFunction()
{
 80160a0:	b580      	push	{r7, lr}
 80160a2:	af00      	add	r7, sp, #0
	SystemManager_MainFunction();
 80160a4:	f001 fb06 	bl	80176b4 <SystemManager_MainFunction>
}
 80160a8:	bf00      	nop
 80160aa:	bd80      	pop	{r7, pc}

080160ac <Rte_Runnable_Crc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Crc_MainFunction()
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	af00      	add	r7, sp, #0
	Crc_MainFunction();
 80160b0:	f001 f80c 	bl	80170cc <Crc_MainFunction>
}
 80160b4:	bf00      	nop
 80160b6:	bd80      	pop	{r7, pc}

080160b8 <Rte_Runnable_Wdg_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Wdg_MainFunction()
{
 80160b8:	b580      	push	{r7, lr}
 80160ba:	af00      	add	r7, sp, #0
	Watchdog_MainFunction();
 80160bc:	f001 fc6e 	bl	801799c <Watchdog_MainFunction>
}
 80160c0:	bf00      	nop
 80160c2:	bd80      	pop	{r7, pc}

080160c4 <Rte_Runnable_Adc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Adc_MainFunction()
{
 80160c4:	b580      	push	{r7, lr}
 80160c6:	af00      	add	r7, sp, #0
	Adc_MainFunction();
 80160c8:	f7fa fc14 	bl	80108f4 <Adc_MainFunction>
}
 80160cc:	bf00      	nop
 80160ce:	bd80      	pop	{r7, pc}

080160d0 <Rte_Runnable_Tim_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Tim_MainFunction()
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	af00      	add	r7, sp, #0
	Tim_MainFunction();
 80160d4:	f7fc f814 	bl	8012100 <Tim_MainFunction>
}
 80160d8:	bf00      	nop
 80160da:	bd80      	pop	{r7, pc}

080160dc <Rte_Runnable_Uart_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Uart_MainFunction()
{
 80160dc:	b580      	push	{r7, lr}
 80160de:	af00      	add	r7, sp, #0
	Uart_MainFunction();
 80160e0:	f7ef fb2a 	bl	8005738 <Uart_MainFunction>
}
 80160e4:	bf00      	nop
 80160e6:	bd80      	pop	{r7, pc}

080160e8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>:
/* Run time environment interface. */
VOID Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32 Channel)
{
 80160e8:	b580      	push	{r7, lr}
 80160ea:	b082      	sub	sp, #8
 80160ec:	af00      	add	r7, sp, #0
 80160ee:	6078      	str	r0, [r7, #4]
 80160f0:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start_IT(htim, Channel);
 80160f2:	6839      	ldr	r1, [r7, #0]
 80160f4:	6878      	ldr	r0, [r7, #4]
 80160f6:	f7f7 fecb 	bl	800de90 <HAL_TIM_PWM_Start_IT>
}
 80160fa:	bf00      	nop
 80160fc:	3708      	adds	r7, #8
 80160fe:	46bd      	mov	sp, r7
 8016100:	bd80      	pop	{r7, pc}

08016102 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>:
/* Run time environment interface. */
VOID Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32 Channel)
{
 8016102:	b580      	push	{r7, lr}
 8016104:	b082      	sub	sp, #8
 8016106:	af00      	add	r7, sp, #0
 8016108:	6078      	str	r0, [r7, #4]
 801610a:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Stop_IT(htim, Channel);
 801610c:	6839      	ldr	r1, [r7, #0]
 801610e:	6878      	ldr	r0, [r7, #4]
 8016110:	f7f7 ffbc 	bl	800e08c <HAL_TIM_PWM_Stop_IT>
}
 8016114:	bf00      	nop
 8016116:	3708      	adds	r7, #8
 8016118:	46bd      	mov	sp, r7
 801611a:	bd80      	pop	{r7, pc}

0801611c <Rte_Write_Btc_BtcPort_Btc_RxData>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_RxData(uint8* data)
{
 801611c:	b480      	push	{r7}
 801611e:	b083      	sub	sp, #12
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
	Btc_RxData = *data;
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	781a      	ldrb	r2, [r3, #0]
 8016128:	4b03      	ldr	r3, [pc, #12]	; (8016138 <Rte_Write_Btc_BtcPort_Btc_RxData+0x1c>)
 801612a:	701a      	strb	r2, [r3, #0]
}
 801612c:	bf00      	nop
 801612e:	370c      	adds	r7, #12
 8016130:	46bd      	mov	sp, r7
 8016132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016136:	4770      	bx	lr
 8016138:	200000f4 	.word	0x200000f4

0801613c <Rte_Write_Btc_BtcPort_Btc_RxCount>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_RxCount(uint8* data)
{
 801613c:	b480      	push	{r7}
 801613e:	b083      	sub	sp, #12
 8016140:	af00      	add	r7, sp, #0
 8016142:	6078      	str	r0, [r7, #4]
	Btc_RxCount = *data;
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	781a      	ldrb	r2, [r3, #0]
 8016148:	4b03      	ldr	r3, [pc, #12]	; (8016158 <Rte_Write_Btc_BtcPort_Btc_RxCount+0x1c>)
 801614a:	701a      	strb	r2, [r3, #0]
}
 801614c:	bf00      	nop
 801614e:	370c      	adds	r7, #12
 8016150:	46bd      	mov	sp, r7
 8016152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016156:	4770      	bx	lr
 8016158:	200000f5 	.word	0x200000f5

0801615c <Rte_Write_Btc_BtcPort_Btc_DataBuffer>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_DataBuffer(uint8* data, uint8 position)
{
 801615c:	b480      	push	{r7}
 801615e:	b083      	sub	sp, #12
 8016160:	af00      	add	r7, sp, #0
 8016162:	6078      	str	r0, [r7, #4]
 8016164:	460b      	mov	r3, r1
 8016166:	70fb      	strb	r3, [r7, #3]
	Btc_DataBuffer[position] = *data;
 8016168:	78fb      	ldrb	r3, [r7, #3]
 801616a:	687a      	ldr	r2, [r7, #4]
 801616c:	7811      	ldrb	r1, [r2, #0]
 801616e:	4a04      	ldr	r2, [pc, #16]	; (8016180 <Rte_Write_Btc_BtcPort_Btc_DataBuffer+0x24>)
 8016170:	54d1      	strb	r1, [r2, r3]
}
 8016172:	bf00      	nop
 8016174:	370c      	adds	r7, #12
 8016176:	46bd      	mov	sp, r7
 8016178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801617c:	4770      	bx	lr
 801617e:	bf00      	nop
 8016180:	200000f0 	.word	0x200000f0

08016184 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>:
/* Run time environment interface. */
VOID Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(uint32* data, uint8 position)
{
 8016184:	b480      	push	{r7}
 8016186:	b083      	sub	sp, #12
 8016188:	af00      	add	r7, sp, #0
 801618a:	6078      	str	r0, [r7, #4]
 801618c:	460b      	mov	r3, r1
 801618e:	70fb      	strb	r3, [r7, #3]
	*data = Adc_ChannelOne_Buffer[position];
 8016190:	78fb      	ldrb	r3, [r7, #3]
 8016192:	4a05      	ldr	r2, [pc, #20]	; (80161a8 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer+0x24>)
 8016194:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	601a      	str	r2, [r3, #0]
}
 801619c:	bf00      	nop
 801619e:	370c      	adds	r7, #12
 80161a0:	46bd      	mov	sp, r7
 80161a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161a6:	4770      	bx	lr
 80161a8:	20000c8c 	.word	0x20000c8c

080161ac <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{
 80161ac:	b480      	push	{r7}
 80161ae:	b083      	sub	sp, #12
 80161b0:	af00      	add	r7, sp, #0
 80161b2:	6078      	str	r0, [r7, #4]
	Btc_ReceivedDataOnBluetooth = *data;
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	781a      	ldrb	r2, [r3, #0]
 80161b8:	4b03      	ldr	r3, [pc, #12]	; (80161c8 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>)
 80161ba:	701a      	strb	r2, [r3, #0]
}
 80161bc:	bf00      	nop
 80161be:	370c      	adds	r7, #12
 80161c0:	46bd      	mov	sp, r7
 80161c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161c6:	4770      	bx	lr
 80161c8:	200000f6 	.word	0x200000f6

080161cc <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(uint8* data)
{
 80161cc:	b480      	push	{r7}
 80161ce:	b083      	sub	sp, #12
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	6078      	str	r0, [r7, #4]
	CenLoc_CurrentState = *data;
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	781a      	ldrb	r2, [r3, #0]
 80161d8:	4b03      	ldr	r3, [pc, #12]	; (80161e8 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState+0x1c>)
 80161da:	701a      	strb	r2, [r3, #0]
}
 80161dc:	bf00      	nop
 80161de:	370c      	adds	r7, #12
 80161e0:	46bd      	mov	sp, r7
 80161e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e6:	4770      	bx	lr
 80161e8:	20000139 	.word	0x20000139

080161ec <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>:
{
	Btc_FollowMeHome = *data;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(uint8* data)
{
 80161ec:	b480      	push	{r7}
 80161ee:	b083      	sub	sp, #12
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	6078      	str	r0, [r7, #4]
	CenLoc_FollowMeHomeState = *data;
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	781a      	ldrb	r2, [r3, #0]
 80161f8:	4b03      	ldr	r3, [pc, #12]	; (8016208 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState+0x1c>)
 80161fa:	701a      	strb	r2, [r3, #0]
}
 80161fc:	bf00      	nop
 80161fe:	370c      	adds	r7, #12
 8016200:	46bd      	mov	sp, r7
 8016202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016206:	4770      	bx	lr
 8016208:	2000013b 	.word	0x2000013b

0801620c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>:
{
	CenLoc_PreviousStateFlag = *data;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(uint8* data)
{
 801620c:	b480      	push	{r7}
 801620e:	b083      	sub	sp, #12
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
	ExtLights_ReverseLight_CurrentState = *data;
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	781a      	ldrb	r2, [r3, #0]
 8016218:	4b03      	ldr	r3, [pc, #12]	; (8016228 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState+0x1c>)
 801621a:	701a      	strb	r2, [r3, #0]
}
 801621c:	bf00      	nop
 801621e:	370c      	adds	r7, #12
 8016220:	46bd      	mov	sp, r7
 8016222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016226:	4770      	bx	lr
 8016228:	20000177 	.word	0x20000177

0801622c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState(uint8* data)
{
 801622c:	b480      	push	{r7}
 801622e:	b083      	sub	sp, #12
 8016230:	af00      	add	r7, sp, #0
 8016232:	6078      	str	r0, [r7, #4]
	ExtLights_FlashHighBeam_CurrentState = *data;
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	781a      	ldrb	r2, [r3, #0]
 8016238:	4b03      	ldr	r3, [pc, #12]	; (8016248 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState+0x1c>)
 801623a:	701a      	strb	r2, [r3, #0]
}
 801623c:	bf00      	nop
 801623e:	370c      	adds	r7, #12
 8016240:	46bd      	mov	sp, r7
 8016242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016246:	4770      	bx	lr
 8016248:	20000178 	.word	0x20000178

0801624c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(uint8* data)
{
 801624c:	b480      	push	{r7}
 801624e:	b083      	sub	sp, #12
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
	ExtLights_BrakeLight_CurrentState = *data;
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	781a      	ldrb	r2, [r3, #0]
 8016258:	4b03      	ldr	r3, [pc, #12]	; (8016268 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState+0x1c>)
 801625a:	701a      	strb	r2, [r3, #0]
}
 801625c:	bf00      	nop
 801625e:	370c      	adds	r7, #12
 8016260:	46bd      	mov	sp, r7
 8016262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016266:	4770      	bx	lr
 8016268:	20000179 	.word	0x20000179

0801626c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(uint8* data)
{
 801626c:	b480      	push	{r7}
 801626e:	b083      	sub	sp, #12
 8016270:	af00      	add	r7, sp, #0
 8016272:	6078      	str	r0, [r7, #4]
	ExtLights_LightsSwitch_CurrentState = *data;
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	781a      	ldrb	r2, [r3, #0]
 8016278:	4b03      	ldr	r3, [pc, #12]	; (8016288 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState+0x1c>)
 801627a:	701a      	strb	r2, [r3, #0]
}
 801627c:	bf00      	nop
 801627e:	370c      	adds	r7, #12
 8016280:	46bd      	mov	sp, r7
 8016282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016286:	4770      	bx	lr
 8016288:	2000017a 	.word	0x2000017a

0801628c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(uint8* data)
{
 801628c:	b480      	push	{r7}
 801628e:	b083      	sub	sp, #12
 8016290:	af00      	add	r7, sp, #0
 8016292:	6078      	str	r0, [r7, #4]
	ExtLights_HighBeam_CurrentState = *data;
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	781a      	ldrb	r2, [r3, #0]
 8016298:	4b03      	ldr	r3, [pc, #12]	; (80162a8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState+0x1c>)
 801629a:	701a      	strb	r2, [r3, #0]
}
 801629c:	bf00      	nop
 801629e:	370c      	adds	r7, #12
 80162a0:	46bd      	mov	sp, r7
 80162a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162a6:	4770      	bx	lr
 80162a8:	2000017b 	.word	0x2000017b

080162ac <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(uint8* data)
{
 80162ac:	b480      	push	{r7}
 80162ae:	b083      	sub	sp, #12
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
	ExtLights_FrontFogLight_CurrentState = *data;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	781a      	ldrb	r2, [r3, #0]
 80162b8:	4b03      	ldr	r3, [pc, #12]	; (80162c8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState+0x1c>)
 80162ba:	701a      	strb	r2, [r3, #0]
}
 80162bc:	bf00      	nop
 80162be:	370c      	adds	r7, #12
 80162c0:	46bd      	mov	sp, r7
 80162c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c6:	4770      	bx	lr
 80162c8:	2000017c 	.word	0x2000017c

080162cc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(uint8* data)
{
 80162cc:	b480      	push	{r7}
 80162ce:	b083      	sub	sp, #12
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
	ExtLights_TurnSignalLeft_CurrentState = *data;
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	781a      	ldrb	r2, [r3, #0]
 80162d8:	4b03      	ldr	r3, [pc, #12]	; (80162e8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState+0x1c>)
 80162da:	701a      	strb	r2, [r3, #0]
}
 80162dc:	bf00      	nop
 80162de:	370c      	adds	r7, #12
 80162e0:	46bd      	mov	sp, r7
 80162e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e6:	4770      	bx	lr
 80162e8:	2000017d 	.word	0x2000017d

080162ec <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(uint8* data)
{
 80162ec:	b480      	push	{r7}
 80162ee:	b083      	sub	sp, #12
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	6078      	str	r0, [r7, #4]
	ExtLights_TurnSignalRight_CurrentState = *data;
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	781a      	ldrb	r2, [r3, #0]
 80162f8:	4b03      	ldr	r3, [pc, #12]	; (8016308 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState+0x1c>)
 80162fa:	701a      	strb	r2, [r3, #0]
}
 80162fc:	bf00      	nop
 80162fe:	370c      	adds	r7, #12
 8016300:	46bd      	mov	sp, r7
 8016302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016306:	4770      	bx	lr
 8016308:	2000017e 	.word	0x2000017e

0801630c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(uint8* data)
{
 801630c:	b480      	push	{r7}
 801630e:	b083      	sub	sp, #12
 8016310:	af00      	add	r7, sp, #0
 8016312:	6078      	str	r0, [r7, #4]
	ExtLights_HazardLight_CurrentState = *data;
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	781a      	ldrb	r2, [r3, #0]
 8016318:	4b03      	ldr	r3, [pc, #12]	; (8016328 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState+0x1c>)
 801631a:	701a      	strb	r2, [r3, #0]
}
 801631c:	bf00      	nop
 801631e:	370c      	adds	r7, #12
 8016320:	46bd      	mov	sp, r7
 8016322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016326:	4770      	bx	lr
 8016328:	20000181 	.word	0x20000181

0801632c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(uint8* data)
{
 801632c:	b480      	push	{r7}
 801632e:	b083      	sub	sp, #12
 8016330:	af00      	add	r7, sp, #0
 8016332:	6078      	str	r0, [r7, #4]
	ExtLights_RearFogLight_CurrentState = *data;
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	781a      	ldrb	r2, [r3, #0]
 8016338:	4b03      	ldr	r3, [pc, #12]	; (8016348 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState+0x1c>)
 801633a:	701a      	strb	r2, [r3, #0]
}
 801633c:	bf00      	nop
 801633e:	370c      	adds	r7, #12
 8016340:	46bd      	mov	sp, r7
 8016342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016346:	4770      	bx	lr
 8016348:	20000182 	.word	0x20000182

0801634c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>:
{
	ExtLights_HL_PrevState = *data;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(uint32* data)
{
 801634c:	b480      	push	{r7}
 801634e:	b083      	sub	sp, #12
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
	ExtLights_RTSFlag = *data;
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	4a03      	ldr	r2, [pc, #12]	; (8016368 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag+0x1c>)
 801635a:	6013      	str	r3, [r2, #0]
}
 801635c:	bf00      	nop
 801635e:	370c      	adds	r7, #12
 8016360:	46bd      	mov	sp, r7
 8016362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016366:	4770      	bx	lr
 8016368:	20000188 	.word	0x20000188

0801636c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(uint32* data)
{
 801636c:	b480      	push	{r7}
 801636e:	b083      	sub	sp, #12
 8016370:	af00      	add	r7, sp, #0
 8016372:	6078      	str	r0, [r7, #4]
	ExtLights_LTSFlag = *data;
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	4a03      	ldr	r2, [pc, #12]	; (8016388 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag+0x1c>)
 801637a:	6013      	str	r3, [r2, #0]
}
 801637c:	bf00      	nop
 801637e:	370c      	adds	r7, #12
 8016380:	46bd      	mov	sp, r7
 8016382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016386:	4770      	bx	lr
 8016388:	2000018c 	.word	0x2000018c

0801638c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(uint32* data)
{
 801638c:	b480      	push	{r7}
 801638e:	b083      	sub	sp, #12
 8016390:	af00      	add	r7, sp, #0
 8016392:	6078      	str	r0, [r7, #4]
	ExtLights_HLFlag = *data;
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	4a03      	ldr	r2, [pc, #12]	; (80163a8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag+0x1c>)
 801639a:	6013      	str	r3, [r2, #0]
}
 801639c:	bf00      	nop
 801639e:	370c      	adds	r7, #12
 80163a0:	46bd      	mov	sp, r7
 80163a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163a6:	4770      	bx	lr
 80163a8:	20000190 	.word	0x20000190

080163ac <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(uint8* data)
{
 80163ac:	b480      	push	{r7}
 80163ae:	b083      	sub	sp, #12
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	6078      	str	r0, [r7, #4]
	IntLights_CurrentState = *data;
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	781a      	ldrb	r2, [r3, #0]
 80163b8:	4b03      	ldr	r3, [pc, #12]	; (80163c8 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState+0x1c>)
 80163ba:	701a      	strb	r2, [r3, #0]
}
 80163bc:	bf00      	nop
 80163be:	370c      	adds	r7, #12
 80163c0:	46bd      	mov	sp, r7
 80163c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c6:	4770      	bx	lr
 80163c8:	200001c8 	.word	0x200001c8

080163cc <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>:
{
	SecAlm_PinStateChange = *data;
}
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(uint8* data)
{
 80163cc:	b480      	push	{r7}
 80163ce:	b083      	sub	sp, #12
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	6078      	str	r0, [r7, #4]
	SecAlm_TriggerIRQCounterForTimer4 = *data;
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	781a      	ldrb	r2, [r3, #0]
 80163d8:	4b03      	ldr	r3, [pc, #12]	; (80163e8 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4+0x1c>)
 80163da:	701a      	strb	r2, [r3, #0]
}
 80163dc:	bf00      	nop
 80163de:	370c      	adds	r7, #12
 80163e0:	46bd      	mov	sp, r7
 80163e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e6:	4770      	bx	lr
 80163e8:	200001df 	.word	0x200001df

080163ec <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter>:
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter(uint16* data)
{
 80163ec:	b480      	push	{r7}
 80163ee:	b083      	sub	sp, #12
 80163f0:	af00      	add	r7, sp, #0
 80163f2:	6078      	str	r0, [r7, #4]
	SecAlm_SensorStatusCounter = *data;
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	881a      	ldrh	r2, [r3, #0]
 80163f8:	4b03      	ldr	r3, [pc, #12]	; (8016408 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter+0x1c>)
 80163fa:	801a      	strh	r2, [r3, #0]
}
 80163fc:	bf00      	nop
 80163fe:	370c      	adds	r7, #12
 8016400:	46bd      	mov	sp, r7
 8016402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016406:	4770      	bx	lr
 8016408:	200001e0 	.word	0x200001e0

0801640c <Rte_Runnable_Btc_MainFunction>:
{
	SecAlm_SensorStatus = *data;
}
/* Run time environment interface. */
VOID Rte_Runnable_Btc_MainFunction()
{
 801640c:	b580      	push	{r7, lr}
 801640e:	af00      	add	r7, sp, #0
	Btc_MainFunction();
 8016410:	f7eb fb7e 	bl	8001b10 <Btc_MainFunction>
}
 8016414:	bf00      	nop
 8016416:	bd80      	pop	{r7, pc}

08016418 <Rte_Runnable_CenLoc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_CenLoc_MainFunction()
{
 8016418:	b580      	push	{r7, lr}
 801641a:	af00      	add	r7, sp, #0
	CenLoc_MainFunction();
 801641c:	f7eb fe28 	bl	8002070 <CenLoc_MainFunction>
}
 8016420:	bf00      	nop
 8016422:	bd80      	pop	{r7, pc}

08016424 <Rte_Runnable_ExtLights_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_ExtLights_MainFunction()
{
 8016424:	b580      	push	{r7, lr}
 8016426:	af00      	add	r7, sp, #0
	ExtLights_MainFunction();
 8016428:	f7ec fb2e 	bl	8002a88 <ExtLights_MainFunction>
}
 801642c:	bf00      	nop
 801642e:	bd80      	pop	{r7, pc}

08016430 <Rte_Runnable_IntLights_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_IntLights_MainFunction()
{
 8016430:	b580      	push	{r7, lr}
 8016432:	af00      	add	r7, sp, #0
	IntLights_MainFunction();
 8016434:	f7ed f8ee 	bl	8003614 <IntLights_MainFunction>
}
 8016438:	bf00      	nop
 801643a:	bd80      	pop	{r7, pc}

0801643c <Rte_Runnable_SecAlm_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_SecAlm_MainFunction()
{
 801643c:	b580      	push	{r7, lr}
 801643e:	af00      	add	r7, sp, #0
	SecAlm_MainFunction();
 8016440:	f7ed fbca 	bl	8003bd8 <SecAlm_MainFunction>
}
 8016444:	bf00      	nop
 8016446:	bd80      	pop	{r7, pc}

08016448 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:
/* Run time environment interface. */
VOID Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{
 8016448:	b480      	push	{r7}
 801644a:	b083      	sub	sp, #12
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
	*data = Btc_ReceivedDataOnBluetooth;
 8016450:	4b04      	ldr	r3, [pc, #16]	; (8016464 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>)
 8016452:	781a      	ldrb	r2, [r3, #0]
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	701a      	strb	r2, [r3, #0]
}
 8016458:	bf00      	nop
 801645a:	370c      	adds	r7, #12
 801645c:	46bd      	mov	sp, r7
 801645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016462:	4770      	bx	lr
 8016464:	200000f6 	.word	0x200000f6

08016468 <Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT>:
{
	*data = SecAlm_SensorStatus;
}
/* Run time environment interface. */
VOID Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016468:	b580      	push	{r7, lr}
 801646a:	b084      	sub	sp, #16
 801646c:	af00      	add	r7, sp, #0
 801646e:	60f8      	str	r0, [r7, #12]
 8016470:	60b9      	str	r1, [r7, #8]
 8016472:	4613      	mov	r3, r2
 8016474:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Receive_IT(huart, pData, Size);
 8016476:	88fb      	ldrh	r3, [r7, #6]
 8016478:	461a      	mov	r2, r3
 801647a:	68b9      	ldr	r1, [r7, #8]
 801647c:	68f8      	ldr	r0, [r7, #12]
 801647e:	f7f9 f9c4 	bl	800f80a <HAL_UART_Receive_IT>
}
 8016482:	bf00      	nop
 8016484:	3710      	adds	r7, #16
 8016486:	46bd      	mov	sp, r7
 8016488:	bd80      	pop	{r7, pc}

0801648a <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>:
{
	HAL_TIM_Base_Stop_IT(htim);
}
/* Run time environment interface. */
VOID Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801648a:	b580      	push	{r7, lr}
 801648c:	b082      	sub	sp, #8
 801648e:	af00      	add	r7, sp, #0
 8016490:	6078      	str	r0, [r7, #4]
 8016492:	460b      	mov	r3, r1
 8016494:	807b      	strh	r3, [r7, #2]
 8016496:	4613      	mov	r3, r2
 8016498:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 801649a:	787a      	ldrb	r2, [r7, #1]
 801649c:	887b      	ldrh	r3, [r7, #2]
 801649e:	4619      	mov	r1, r3
 80164a0:	6878      	ldr	r0, [r7, #4]
 80164a2:	f7f3 fcd7 	bl	8009e54 <HAL_GPIO_WritePin>
}
 80164a6:	bf00      	nop
 80164a8:	3708      	adds	r7, #8
 80164aa:	46bd      	mov	sp, r7
 80164ac:	bd80      	pop	{r7, pc}

080164ae <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>:
{
	HAL_GetTick();
}
/* Run time environment interface. */
VOID Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(osTimerId_t timer_id, uint32_t ticks)
{
 80164ae:	b580      	push	{r7, lr}
 80164b0:	b082      	sub	sp, #8
 80164b2:	af00      	add	r7, sp, #0
 80164b4:	6078      	str	r0, [r7, #4]
 80164b6:	6039      	str	r1, [r7, #0]
	osTimerStart(timer_id, ticks);
 80164b8:	6839      	ldr	r1, [r7, #0]
 80164ba:	6878      	ldr	r0, [r7, #4]
 80164bc:	f7fc f924 	bl	8012708 <osTimerStart>
}
 80164c0:	bf00      	nop
 80164c2:	3708      	adds	r7, #8
 80164c4:	46bd      	mov	sp, r7
 80164c6:	bd80      	pop	{r7, pc}

080164c8 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>:
/* Run time environment interface. */
VOID Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(osTimerId_t timer_id)
{
 80164c8:	b580      	push	{r7, lr}
 80164ca:	b082      	sub	sp, #8
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	6078      	str	r0, [r7, #4]
	osTimerStop(timer_id);
 80164d0:	6878      	ldr	r0, [r7, #4]
 80164d2:	f7fc f947 	bl	8012764 <osTimerStop>
}
 80164d6:	bf00      	nop
 80164d8:	3708      	adds	r7, #8
 80164da:	46bd      	mov	sp, r7
 80164dc:	bd80      	pop	{r7, pc}

080164de <Rte_Runnable_DiagCtrl_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_DiagCtrl_MainFunction()
{
 80164de:	b580      	push	{r7, lr}
 80164e0:	af00      	add	r7, sp, #0
	DiagCtrl_MainFunction();
 80164e2:	f7eb fe05 	bl	80020f0 <DiagCtrl_MainFunction>
}
 80164e6:	bf00      	nop
 80164e8:	bd80      	pop	{r7, pc}

080164ea <Rte_Runnable_SenCtrl_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_SenCtrl_MainFunction()
{
 80164ea:	b580      	push	{r7, lr}
 80164ec:	af00      	add	r7, sp, #0
	SenCtrl_MainFunction();
 80164ee:	f7ed fbd9 	bl	8003ca4 <SenCtrl_MainFunction>
}
 80164f2:	bf00      	nop
 80164f4:	bd80      	pop	{r7, pc}

080164f6 <Rte_Runnable_Hvac_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Hvac_MainFunction()
{
 80164f6:	b580      	push	{r7, lr}
 80164f8:	af00      	add	r7, sp, #0
	Hvac_MainFunction();
 80164fa:	f7ec fc8f 	bl	8002e1c <Hvac_MainFunction>
}
 80164fe:	bf00      	nop
 8016500:	bd80      	pop	{r7, pc}

08016502 <Rte_Runnable_Pdc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Pdc_MainFunction()
{
 8016502:	b580      	push	{r7, lr}
 8016504:	af00      	add	r7, sp, #0
	Pdc_MainFunction();
 8016506:	f7ed f8dd 	bl	80036c4 <Pdc_MainFunction>
}
 801650a:	bf00      	nop
 801650c:	bd80      	pop	{r7, pc}

0801650e <Rte_Runnable_Can_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Can_MainFunction()
{
 801650e:	b580      	push	{r7, lr}
 8016510:	af00      	add	r7, sp, #0
	Can_MainFunction();
 8016512:	f7ed fe05 	bl	8004120 <Can_MainFunction>
}
 8016516:	bf00      	nop
 8016518:	bd80      	pop	{r7, pc}

0801651a <Rte_Runnable_I2c_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_I2c_MainFunction()
{
 801651a:	b580      	push	{r7, lr}
 801651c:	af00      	add	r7, sp, #0
	I2c_MainFunction();
 801651e:	f7ee fe5d 	bl	80051dc <I2c_MainFunction>
}
 8016522:	bf00      	nop
 8016524:	bd80      	pop	{r7, pc}

08016526 <Rte_Runnable_Dem_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Dem_MainFunction()
{
 8016526:	b580      	push	{r7, lr}
 8016528:	af00      	add	r7, sp, #0
	Dem_MainFunction();
 801652a:	f7f1 f971 	bl	8007810 <Dem_MainFunction>
}
 801652e:	bf00      	nop
 8016530:	bd80      	pop	{r7, pc}

08016532 <Rte_Runnable_Spi_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Spi_MainFunction()
{
 8016532:	b580      	push	{r7, lr}
 8016534:	af00      	add	r7, sp, #0
	Spi_MainFunction();
 8016536:	f7fb f8d3 	bl	80116e0 <Spi_MainFunction>
}
 801653a:	bf00      	nop
 801653c:	bd80      	pop	{r7, pc}
	...

08016540 <Crc_VerifyUartData>:
/***********************************************************************************
* Function: Crc_VerifyUartData													   *
* Description: Verifies the UART data received.							 		   *
************************************************************************************/
StdReturnType Crc_VerifyUartData()
{
 8016540:	b580      	push	{r7, lr}
 8016542:	b084      	sub	sp, #16
 8016544:	af00      	add	r7, sp, #0
	/* Local variable to store return value. */
	uint8 returnValue = E_NOT_OK;
 8016546:	2301      	movs	r3, #1
 8016548:	73fb      	strb	r3, [r7, #15]
	/* Local variable to store received value. */
	uint8 receivedValue = STD_LOW;
 801654a:	2300      	movs	r3, #0
 801654c:	71fb      	strb	r3, [r7, #7]
	/* Local value to calculate CRC. */
	uint32 calculatedCrc = STD_LOW;
 801654e:	2300      	movs	r3, #0
 8016550:	60bb      	str	r3, [r7, #8]
	/* Read the received data from UART. */
	Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&receivedValue);
 8016552:	1dfb      	adds	r3, r7, #7
 8016554:	4618      	mov	r0, r3
 8016556:	f7ff ff77 	bl	8016448 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>
	Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 801655a:	4bb8      	ldr	r3, [pc, #736]	; (801683c <Crc_VerifyUartData+0x2fc>)
 801655c:	2201      	movs	r2, #1
 801655e:	701a      	strb	r2, [r3, #0]
	/* Calculate the CRC. */
	calculatedCrc = HAL_CRC_Calculate(&hcrc, (uint32*)&receivedValue, 1);
 8016560:	1dfb      	adds	r3, r7, #7
 8016562:	2201      	movs	r2, #1
 8016564:	4619      	mov	r1, r3
 8016566:	48b6      	ldr	r0, [pc, #728]	; (8016840 <Crc_VerifyUartData+0x300>)
 8016568:	f7f2 fbb6 	bl	8008cd8 <HAL_CRC_Calculate>
 801656c:	60b8      	str	r0, [r7, #8]
	/* Check the value if it has correct CRC. */
	if(receivedValue >= 30 && receivedValue <= 54)
 801656e:	79fb      	ldrb	r3, [r7, #7]
 8016570:	2b1d      	cmp	r3, #29
 8016572:	d904      	bls.n	801657e <Crc_VerifyUartData+0x3e>
 8016574:	79fb      	ldrb	r3, [r7, #7]
 8016576:	2b36      	cmp	r3, #54	; 0x36
 8016578:	d801      	bhi.n	801657e <Crc_VerifyUartData+0x3e>
	{
		return E_OK;
 801657a:	2300      	movs	r3, #0
 801657c:	e2ff      	b.n	8016b7e <Crc_VerifyUartData+0x63e>
	else
	{
		/* do nothing */
	}
	/* Check the value if it has correct CRC. */
	switch(receivedValue)
 801657e:	79fb      	ldrb	r3, [r7, #7]
 8016580:	3b01      	subs	r3, #1
 8016582:	2b47      	cmp	r3, #71	; 0x47
 8016584:	f200 82f9 	bhi.w	8016b7a <Crc_VerifyUartData+0x63a>
 8016588:	a201      	add	r2, pc, #4	; (adr r2, 8016590 <Crc_VerifyUartData+0x50>)
 801658a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801658e:	bf00      	nop
 8016590:	08016777 	.word	0x08016777
 8016594:	0801678d 	.word	0x0801678d
 8016598:	080167a3 	.word	0x080167a3
 801659c:	080167b9 	.word	0x080167b9
 80165a0:	080167cf 	.word	0x080167cf
 80165a4:	080167e5 	.word	0x080167e5
 80165a8:	080167fb 	.word	0x080167fb
 80165ac:	08016811 	.word	0x08016811
 80165b0:	08016827 	.word	0x08016827
 80165b4:	0801688d 	.word	0x0801688d
 80165b8:	080168a3 	.word	0x080168a3
 80165bc:	080168b9 	.word	0x080168b9
 80165c0:	080168cf 	.word	0x080168cf
 80165c4:	080168e5 	.word	0x080168e5
 80165c8:	080168fb 	.word	0x080168fb
 80165cc:	08016911 	.word	0x08016911
 80165d0:	08016927 	.word	0x08016927
 80165d4:	0801693d 	.word	0x0801693d
 80165d8:	08016953 	.word	0x08016953
 80165dc:	08016969 	.word	0x08016969
 80165e0:	080166f3 	.word	0x080166f3
 80165e4:	08016709 	.word	0x08016709
 80165e8:	0801671f 	.word	0x0801671f
 80165ec:	08016735 	.word	0x08016735
 80165f0:	0801674b 	.word	0x0801674b
 80165f4:	08016761 	.word	0x08016761
 80165f8:	080166b1 	.word	0x080166b1
 80165fc:	080166c7 	.word	0x080166c7
 8016600:	080166dd 	.word	0x080166dd
 8016604:	08016b7b 	.word	0x08016b7b
 8016608:	08016b7b 	.word	0x08016b7b
 801660c:	08016b7b 	.word	0x08016b7b
 8016610:	08016b7b 	.word	0x08016b7b
 8016614:	08016b7b 	.word	0x08016b7b
 8016618:	08016b7b 	.word	0x08016b7b
 801661c:	08016b7b 	.word	0x08016b7b
 8016620:	08016b7b 	.word	0x08016b7b
 8016624:	08016b7b 	.word	0x08016b7b
 8016628:	08016b7b 	.word	0x08016b7b
 801662c:	08016b7b 	.word	0x08016b7b
 8016630:	08016b7b 	.word	0x08016b7b
 8016634:	08016b7b 	.word	0x08016b7b
 8016638:	08016b7b 	.word	0x08016b7b
 801663c:	08016b7b 	.word	0x08016b7b
 8016640:	08016b7b 	.word	0x08016b7b
 8016644:	08016b7b 	.word	0x08016b7b
 8016648:	08016b7b 	.word	0x08016b7b
 801664c:	08016b7b 	.word	0x08016b7b
 8016650:	08016b7b 	.word	0x08016b7b
 8016654:	08016b7b 	.word	0x08016b7b
 8016658:	08016b7b 	.word	0x08016b7b
 801665c:	08016b7b 	.word	0x08016b7b
 8016660:	08016b7b 	.word	0x08016b7b
 8016664:	08016b7b 	.word	0x08016b7b
 8016668:	0801697f 	.word	0x0801697f
 801666c:	08016995 	.word	0x08016995
 8016670:	080169ab 	.word	0x080169ab
 8016674:	080169c1 	.word	0x080169c1
 8016678:	080169d7 	.word	0x080169d7
 801667c:	080169ed 	.word	0x080169ed
 8016680:	08016a03 	.word	0x08016a03
 8016684:	08016a19 	.word	0x08016a19
 8016688:	08016a2f 	.word	0x08016a2f
 801668c:	08016a45 	.word	0x08016a45
 8016690:	08016a5b 	.word	0x08016a5b
 8016694:	08016a71 	.word	0x08016a71
 8016698:	08016a87 	.word	0x08016a87
 801669c:	08016a9d 	.word	0x08016a9d
 80166a0:	08016ab3 	.word	0x08016ab3
 80166a4:	08016ac9 	.word	0x08016ac9
 80166a8:	08016adf 	.word	0x08016adf
 80166ac:	08016b65 	.word	0x08016b65
	{
		case RTE_P_BTC_RX_IGNITION_STEP_ONE:
			if(calculatedCrc == Crc_Ignition_Step_One)
 80166b0:	4b64      	ldr	r3, [pc, #400]	; (8016844 <Crc_VerifyUartData+0x304>)
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	68ba      	ldr	r2, [r7, #8]
 80166b6:	429a      	cmp	r2, r3
 80166b8:	d102      	bne.n	80166c0 <Crc_VerifyUartData+0x180>
			{
				returnValue = E_OK;
 80166ba:	2300      	movs	r3, #0
 80166bc:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80166be:	e25d      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 80166c0:	2301      	movs	r3, #1
 80166c2:	73fb      	strb	r3, [r7, #15]
			break;
 80166c4:	e25a      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_IGNITION_STEP_TWO:
			if(calculatedCrc == Crc_Ignition_Step_Two)
 80166c6:	4b60      	ldr	r3, [pc, #384]	; (8016848 <Crc_VerifyUartData+0x308>)
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	68ba      	ldr	r2, [r7, #8]
 80166cc:	429a      	cmp	r2, r3
 80166ce:	d102      	bne.n	80166d6 <Crc_VerifyUartData+0x196>
			{
				returnValue = E_OK;
 80166d0:	2300      	movs	r3, #0
 80166d2:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80166d4:	e252      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 80166d6:	2301      	movs	r3, #1
 80166d8:	73fb      	strb	r3, [r7, #15]
			break;
 80166da:	e24f      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_IGNITION_TURN_OFF:
			if(calculatedCrc == Crc_Ignition_Turn_Off)
 80166dc:	4b5b      	ldr	r3, [pc, #364]	; (801684c <Crc_VerifyUartData+0x30c>)
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	68ba      	ldr	r2, [r7, #8]
 80166e2:	429a      	cmp	r2, r3
 80166e4:	d102      	bne.n	80166ec <Crc_VerifyUartData+0x1ac>
			{
				returnValue = E_OK;
 80166e6:	2300      	movs	r3, #0
 80166e8:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80166ea:	e247      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 80166ec:	2301      	movs	r3, #1
 80166ee:	73fb      	strb	r3, [r7, #15]
			break;
 80166f0:	e244      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_ReverseLight_On)
 80166f2:	4b57      	ldr	r3, [pc, #348]	; (8016850 <Crc_VerifyUartData+0x310>)
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	68ba      	ldr	r2, [r7, #8]
 80166f8:	429a      	cmp	r2, r3
 80166fa:	d102      	bne.n	8016702 <Crc_VerifyUartData+0x1c2>
			{
				returnValue = E_OK;
 80166fc:	2300      	movs	r3, #0
 80166fe:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8016700:	e23c      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 8016702:	2301      	movs	r3, #1
 8016704:	73fb      	strb	r3, [r7, #15]
			break;
 8016706:	e239      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_ReverseLight_Off)
 8016708:	4b52      	ldr	r3, [pc, #328]	; (8016854 <Crc_VerifyUartData+0x314>)
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	68ba      	ldr	r2, [r7, #8]
 801670e:	429a      	cmp	r2, r3
 8016710:	d102      	bne.n	8016718 <Crc_VerifyUartData+0x1d8>
			{
				returnValue = E_OK;
 8016712:	2300      	movs	r3, #0
 8016714:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8016716:	e231      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 8016718:	2301      	movs	r3, #1
 801671a:	73fb      	strb	r3, [r7, #15]
			break;
 801671c:	e22e      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_EXTLIGHTS_POSITIONZERO:
			if(calculatedCrc == Crc_ExtLights_PositionZero)
 801671e:	4b4e      	ldr	r3, [pc, #312]	; (8016858 <Crc_VerifyUartData+0x318>)
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	68ba      	ldr	r2, [r7, #8]
 8016724:	429a      	cmp	r2, r3
 8016726:	d102      	bne.n	801672e <Crc_VerifyUartData+0x1ee>
			{
				returnValue = E_OK;
 8016728:	2300      	movs	r3, #0
 801672a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801672c:	e226      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 801672e:	2301      	movs	r3, #1
 8016730:	73fb      	strb	r3, [r7, #15]
			break;
 8016732:	e223      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:
			if(calculatedCrc == Crc_ExtLights_AutomaticLights)
 8016734:	4b49      	ldr	r3, [pc, #292]	; (801685c <Crc_VerifyUartData+0x31c>)
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	68ba      	ldr	r2, [r7, #8]
 801673a:	429a      	cmp	r2, r3
 801673c:	d102      	bne.n	8016744 <Crc_VerifyUartData+0x204>
			{
				returnValue = E_OK;
 801673e:	2300      	movs	r3, #0
 8016740:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8016742:	e21b      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 8016744:	2301      	movs	r3, #1
 8016746:	73fb      	strb	r3, [r7, #15]
			break;
 8016748:	e218      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_EXTLIGHTS_POSITIONLIGHTS:
			if(calculatedCrc == Crc_ExtLights_PositionLights)
 801674a:	4b45      	ldr	r3, [pc, #276]	; (8016860 <Crc_VerifyUartData+0x320>)
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	68ba      	ldr	r2, [r7, #8]
 8016750:	429a      	cmp	r2, r3
 8016752:	d102      	bne.n	801675a <Crc_VerifyUartData+0x21a>
			{
				returnValue = E_OK;
 8016754:	2300      	movs	r3, #0
 8016756:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8016758:	e210      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 801675a:	2301      	movs	r3, #1
 801675c:	73fb      	strb	r3, [r7, #15]
			break;
 801675e:	e20d      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:
			if(calculatedCrc == Crc_ExtLights_NightTimeLights)
 8016760:	4b40      	ldr	r3, [pc, #256]	; (8016864 <Crc_VerifyUartData+0x324>)
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	68ba      	ldr	r2, [r7, #8]
 8016766:	429a      	cmp	r2, r3
 8016768:	d102      	bne.n	8016770 <Crc_VerifyUartData+0x230>
			{
				returnValue = E_OK;
 801676a:	2300      	movs	r3, #0
 801676c:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801676e:	e205      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 8016770:	2301      	movs	r3, #1
 8016772:	73fb      	strb	r3, [r7, #15]
			break;
 8016774:	e202      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_CENLOC_ON:
			if(calculatedCrc == Crc_CenLoc_On)
 8016776:	4b3c      	ldr	r3, [pc, #240]	; (8016868 <Crc_VerifyUartData+0x328>)
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	68ba      	ldr	r2, [r7, #8]
 801677c:	429a      	cmp	r2, r3
 801677e:	d102      	bne.n	8016786 <Crc_VerifyUartData+0x246>
			{
				returnValue = E_OK;
 8016780:	2300      	movs	r3, #0
 8016782:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8016784:	e1fa      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 8016786:	2301      	movs	r3, #1
 8016788:	73fb      	strb	r3, [r7, #15]
			break;
 801678a:	e1f7      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_CENLOC_OFF:
			if(calculatedCrc == Crc_CenLoc_Off)
 801678c:	4b37      	ldr	r3, [pc, #220]	; (801686c <Crc_VerifyUartData+0x32c>)
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	68ba      	ldr	r2, [r7, #8]
 8016792:	429a      	cmp	r2, r3
 8016794:	d102      	bne.n	801679c <Crc_VerifyUartData+0x25c>
			{
				returnValue = E_OK;
 8016796:	2300      	movs	r3, #0
 8016798:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801679a:	e1ef      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 801679c:	2301      	movs	r3, #1
 801679e:	73fb      	strb	r3, [r7, #15]
			break;
 80167a0:	e1ec      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_ON:
			if(calculatedCrc == Crc_ExtLights_HighBeam_On)
 80167a2:	4b33      	ldr	r3, [pc, #204]	; (8016870 <Crc_VerifyUartData+0x330>)
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	68ba      	ldr	r2, [r7, #8]
 80167a8:	429a      	cmp	r2, r3
 80167aa:	d102      	bne.n	80167b2 <Crc_VerifyUartData+0x272>
			{
				returnValue = E_OK;
 80167ac:	2300      	movs	r3, #0
 80167ae:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80167b0:	e1e4      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 80167b2:	2301      	movs	r3, #1
 80167b4:	73fb      	strb	r3, [r7, #15]
			break;
 80167b6:	e1e1      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_OFF:
			if(calculatedCrc == Crc_ExtLights_HighBeam_Off)
 80167b8:	4b2e      	ldr	r3, [pc, #184]	; (8016874 <Crc_VerifyUartData+0x334>)
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	68ba      	ldr	r2, [r7, #8]
 80167be:	429a      	cmp	r2, r3
 80167c0:	d102      	bne.n	80167c8 <Crc_VerifyUartData+0x288>
			{
				returnValue = E_OK;
 80167c2:	2300      	movs	r3, #0
 80167c4:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80167c6:	e1d9      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 80167c8:	2301      	movs	r3, #1
 80167ca:	73fb      	strb	r3, [r7, #15]
			break;
 80167cc:	e1d6      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_ON:
			if(calculatedCrc == Crc_ExtLights_FlashHighBeam_On)
 80167ce:	4b2a      	ldr	r3, [pc, #168]	; (8016878 <Crc_VerifyUartData+0x338>)
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	68ba      	ldr	r2, [r7, #8]
 80167d4:	429a      	cmp	r2, r3
 80167d6:	d102      	bne.n	80167de <Crc_VerifyUartData+0x29e>
			{
				returnValue = E_OK;
 80167d8:	2300      	movs	r3, #0
 80167da:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80167dc:	e1ce      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 80167de:	2301      	movs	r3, #1
 80167e0:	73fb      	strb	r3, [r7, #15]
			break;
 80167e2:	e1cb      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_OFF:
			if(calculatedCrc == Crc_ExtLights_FlashHighBeam_Off)
 80167e4:	4b25      	ldr	r3, [pc, #148]	; (801687c <Crc_VerifyUartData+0x33c>)
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	68ba      	ldr	r2, [r7, #8]
 80167ea:	429a      	cmp	r2, r3
 80167ec:	d102      	bne.n	80167f4 <Crc_VerifyUartData+0x2b4>
			{
				returnValue = E_OK;
 80167ee:	2300      	movs	r3, #0
 80167f0:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80167f2:	e1c3      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 80167f4:	2301      	movs	r3, #1
 80167f6:	73fb      	strb	r3, [r7, #15]
			break;
 80167f8:	e1c0      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:
			if(calculatedCrc == Crc_ExtLights_TurnSignalLeft_On)
 80167fa:	4b21      	ldr	r3, [pc, #132]	; (8016880 <Crc_VerifyUartData+0x340>)
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	68ba      	ldr	r2, [r7, #8]
 8016800:	429a      	cmp	r2, r3
 8016802:	d102      	bne.n	801680a <Crc_VerifyUartData+0x2ca>
			{
				returnValue = E_OK;
 8016804:	2300      	movs	r3, #0
 8016806:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8016808:	e1b8      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 801680a:	2301      	movs	r3, #1
 801680c:	73fb      	strb	r3, [r7, #15]
			break;
 801680e:	e1b5      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:
			if(calculatedCrc == Crc_ExtLights_TurnSignalLeft_Off)
 8016810:	4b1c      	ldr	r3, [pc, #112]	; (8016884 <Crc_VerifyUartData+0x344>)
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	68ba      	ldr	r2, [r7, #8]
 8016816:	429a      	cmp	r2, r3
 8016818:	d102      	bne.n	8016820 <Crc_VerifyUartData+0x2e0>
			{
				returnValue = E_OK;
 801681a:	2300      	movs	r3, #0
 801681c:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801681e:	e1ad      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 8016820:	2301      	movs	r3, #1
 8016822:	73fb      	strb	r3, [r7, #15]
			break;
 8016824:	e1aa      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_TurnSignalRight_On)
 8016826:	4b18      	ldr	r3, [pc, #96]	; (8016888 <Crc_VerifyUartData+0x348>)
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	68ba      	ldr	r2, [r7, #8]
 801682c:	429a      	cmp	r2, r3
 801682e:	d102      	bne.n	8016836 <Crc_VerifyUartData+0x2f6>
			{
				returnValue = E_OK;
 8016830:	2300      	movs	r3, #0
 8016832:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8016834:	e1a2      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 8016836:	2301      	movs	r3, #1
 8016838:	73fb      	strb	r3, [r7, #15]
			break;
 801683a:	e19f      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
 801683c:	2000e574 	.word	0x2000e574
 8016840:	200003a4 	.word	0x200003a4
 8016844:	2000e5d0 	.word	0x2000e5d0
 8016848:	2000e5d4 	.word	0x2000e5d4
 801684c:	2000e5d8 	.word	0x2000e5d8
 8016850:	2000e5b8 	.word	0x2000e5b8
 8016854:	2000e5bc 	.word	0x2000e5bc
 8016858:	2000e5c0 	.word	0x2000e5c0
 801685c:	2000e5c4 	.word	0x2000e5c4
 8016860:	2000e5c8 	.word	0x2000e5c8
 8016864:	2000e5cc 	.word	0x2000e5cc
 8016868:	2000e578 	.word	0x2000e578
 801686c:	2000e57c 	.word	0x2000e57c
 8016870:	2000e580 	.word	0x2000e580
 8016874:	2000e584 	.word	0x2000e584
 8016878:	2000e588 	.word	0x2000e588
 801687c:	2000e58c 	.word	0x2000e58c
 8016880:	2000e590 	.word	0x2000e590
 8016884:	2000e594 	.word	0x2000e594
 8016888:	2000e598 	.word	0x2000e598
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_TurnSignalRight_Off)
 801688c:	4b99      	ldr	r3, [pc, #612]	; (8016af4 <Crc_VerifyUartData+0x5b4>)
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	68ba      	ldr	r2, [r7, #8]
 8016892:	429a      	cmp	r2, r3
 8016894:	d102      	bne.n	801689c <Crc_VerifyUartData+0x35c>
			{
				returnValue = E_OK;
 8016896:	2300      	movs	r3, #0
 8016898:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801689a:	e16f      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 801689c:	2301      	movs	r3, #1
 801689e:	73fb      	strb	r3, [r7, #15]
			break;
 80168a0:	e16c      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_HazardLight_On)
 80168a2:	4b95      	ldr	r3, [pc, #596]	; (8016af8 <Crc_VerifyUartData+0x5b8>)
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	68ba      	ldr	r2, [r7, #8]
 80168a8:	429a      	cmp	r2, r3
 80168aa:	d102      	bne.n	80168b2 <Crc_VerifyUartData+0x372>
			{
				returnValue = E_OK;
 80168ac:	2300      	movs	r3, #0
 80168ae:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80168b0:	e164      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 80168b2:	2301      	movs	r3, #1
 80168b4:	73fb      	strb	r3, [r7, #15]
			break;
 80168b6:	e161      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_HazardLight_Off)
 80168b8:	4b90      	ldr	r3, [pc, #576]	; (8016afc <Crc_VerifyUartData+0x5bc>)
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	68ba      	ldr	r2, [r7, #8]
 80168be:	429a      	cmp	r2, r3
 80168c0:	d102      	bne.n	80168c8 <Crc_VerifyUartData+0x388>
			{
				returnValue = E_OK;
 80168c2:	2300      	movs	r3, #0
 80168c4:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80168c6:	e159      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 80168c8:	2301      	movs	r3, #1
 80168ca:	73fb      	strb	r3, [r7, #15]
			break;
 80168cc:	e156      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:
			if(calculatedCrc == Crc_ExtLights_FogLightFront_On)
 80168ce:	4b8c      	ldr	r3, [pc, #560]	; (8016b00 <Crc_VerifyUartData+0x5c0>)
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	68ba      	ldr	r2, [r7, #8]
 80168d4:	429a      	cmp	r2, r3
 80168d6:	d102      	bne.n	80168de <Crc_VerifyUartData+0x39e>
			{
				returnValue = E_OK;
 80168d8:	2300      	movs	r3, #0
 80168da:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80168dc:	e14e      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 80168de:	2301      	movs	r3, #1
 80168e0:	73fb      	strb	r3, [r7, #15]
			break;
 80168e2:	e14b      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:
			if(calculatedCrc == Crc_ExtLights_FogLightFront_Off)
 80168e4:	4b87      	ldr	r3, [pc, #540]	; (8016b04 <Crc_VerifyUartData+0x5c4>)
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	68ba      	ldr	r2, [r7, #8]
 80168ea:	429a      	cmp	r2, r3
 80168ec:	d102      	bne.n	80168f4 <Crc_VerifyUartData+0x3b4>
			{
				returnValue = E_OK;
 80168ee:	2300      	movs	r3, #0
 80168f0:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80168f2:	e143      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 80168f4:	2301      	movs	r3, #1
 80168f6:	73fb      	strb	r3, [r7, #15]
			break;
 80168f8:	e140      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:
			if(calculatedCrc == Crc_ExtLights_FogLightRear_On)
 80168fa:	4b83      	ldr	r3, [pc, #524]	; (8016b08 <Crc_VerifyUartData+0x5c8>)
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	68ba      	ldr	r2, [r7, #8]
 8016900:	429a      	cmp	r2, r3
 8016902:	d102      	bne.n	801690a <Crc_VerifyUartData+0x3ca>
			{
				returnValue = E_OK;
 8016904:	2300      	movs	r3, #0
 8016906:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8016908:	e138      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 801690a:	2301      	movs	r3, #1
 801690c:	73fb      	strb	r3, [r7, #15]
			break;
 801690e:	e135      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:
			if(calculatedCrc == Crc_ExtLights_FogLightRear_Off)
 8016910:	4b7e      	ldr	r3, [pc, #504]	; (8016b0c <Crc_VerifyUartData+0x5cc>)
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	68ba      	ldr	r2, [r7, #8]
 8016916:	429a      	cmp	r2, r3
 8016918:	d102      	bne.n	8016920 <Crc_VerifyUartData+0x3e0>
			{
				returnValue = E_OK;
 801691a:	2300      	movs	r3, #0
 801691c:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801691e:	e12d      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 8016920:	2301      	movs	r3, #1
 8016922:	73fb      	strb	r3, [r7, #15]
			break;
 8016924:	e12a      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTON:
			if(calculatedCrc == Crc_ExtLights_BrakeLight_On)
 8016926:	4b7a      	ldr	r3, [pc, #488]	; (8016b10 <Crc_VerifyUartData+0x5d0>)
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	68ba      	ldr	r2, [r7, #8]
 801692c:	429a      	cmp	r2, r3
 801692e:	d102      	bne.n	8016936 <Crc_VerifyUartData+0x3f6>
			{
				returnValue = E_OK;
 8016930:	2300      	movs	r3, #0
 8016932:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8016934:	e122      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 8016936:	2301      	movs	r3, #1
 8016938:	73fb      	strb	r3, [r7, #15]
			break;
 801693a:	e11f      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:
			if(calculatedCrc == Crc_ExtLights_BrakeLight_Off)
 801693c:	4b75      	ldr	r3, [pc, #468]	; (8016b14 <Crc_VerifyUartData+0x5d4>)
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	68ba      	ldr	r2, [r7, #8]
 8016942:	429a      	cmp	r2, r3
 8016944:	d102      	bne.n	801694c <Crc_VerifyUartData+0x40c>
			{
				returnValue = E_OK;
 8016946:	2300      	movs	r3, #0
 8016948:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801694a:	e117      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 801694c:	2301      	movs	r3, #1
 801694e:	73fb      	strb	r3, [r7, #15]
			break;
 8016950:	e114      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:
			if(calculatedCrc == Crc_IntLights_InteriorLight_On)
 8016952:	4b71      	ldr	r3, [pc, #452]	; (8016b18 <Crc_VerifyUartData+0x5d8>)
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	68ba      	ldr	r2, [r7, #8]
 8016958:	429a      	cmp	r2, r3
 801695a:	d102      	bne.n	8016962 <Crc_VerifyUartData+0x422>
			{
				returnValue = E_OK;
 801695c:	2300      	movs	r3, #0
 801695e:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8016960:	e10c      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 8016962:	2301      	movs	r3, #1
 8016964:	73fb      	strb	r3, [r7, #15]
			break;
 8016966:	e109      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:
			if(calculatedCrc == Crc_IntLights_InteriorLights_Off)
 8016968:	4b6c      	ldr	r3, [pc, #432]	; (8016b1c <Crc_VerifyUartData+0x5dc>)
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	68ba      	ldr	r2, [r7, #8]
 801696e:	429a      	cmp	r2, r3
 8016970:	d102      	bne.n	8016978 <Crc_VerifyUartData+0x438>
			{
				returnValue = E_OK;
 8016972:	2300      	movs	r3, #0
 8016974:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8016976:	e101      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 8016978:	2301      	movs	r3, #1
 801697a:	73fb      	strb	r3, [r7, #15]
			break;
 801697c:	e0fe      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_HVAC_LEGVENT_ON:
			if(calculatedCrc == Crc_Hvac_LegVent_On)
 801697e:	4b68      	ldr	r3, [pc, #416]	; (8016b20 <Crc_VerifyUartData+0x5e0>)
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	68ba      	ldr	r2, [r7, #8]
 8016984:	429a      	cmp	r2, r3
 8016986:	d102      	bne.n	801698e <Crc_VerifyUartData+0x44e>
			{
				returnValue = E_OK;
 8016988:	2300      	movs	r3, #0
 801698a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 801698c:	e0f6      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 801698e:	2301      	movs	r3, #1
 8016990:	73fb      	strb	r3, [r7, #15]
			break;
 8016992:	e0f3      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
			break;
		case RTE_P_BTC_RX_HVAC_LEGVENT_OFF:
			if(calculatedCrc == Crc_Hvac_LegVent_Off)
 8016994:	4b63      	ldr	r3, [pc, #396]	; (8016b24 <Crc_VerifyUartData+0x5e4>)
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	68ba      	ldr	r2, [r7, #8]
 801699a:	429a      	cmp	r2, r3
 801699c:	d102      	bne.n	80169a4 <Crc_VerifyUartData+0x464>
			{
				returnValue = E_OK;
 801699e:	2300      	movs	r3, #0
 80169a0:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80169a2:	e0eb      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 80169a4:	2301      	movs	r3, #1
 80169a6:	73fb      	strb	r3, [r7, #15]
			break;
 80169a8:	e0e8      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_HVAC_MIDVENT_ON:
			if(calculatedCrc == Crc_Hvac_MidVent_On)
 80169aa:	4b5f      	ldr	r3, [pc, #380]	; (8016b28 <Crc_VerifyUartData+0x5e8>)
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	68ba      	ldr	r2, [r7, #8]
 80169b0:	429a      	cmp	r2, r3
 80169b2:	d102      	bne.n	80169ba <Crc_VerifyUartData+0x47a>
			{
				returnValue = E_OK;
 80169b4:	2300      	movs	r3, #0
 80169b6:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80169b8:	e0e0      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 80169ba:	2301      	movs	r3, #1
 80169bc:	73fb      	strb	r3, [r7, #15]
			break;
 80169be:	e0dd      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_HVAC_MIDVENT_OFF:
			if(calculatedCrc == Crc_Hvac_MidVent_Off)
 80169c0:	4b5a      	ldr	r3, [pc, #360]	; (8016b2c <Crc_VerifyUartData+0x5ec>)
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	68ba      	ldr	r2, [r7, #8]
 80169c6:	429a      	cmp	r2, r3
 80169c8:	d102      	bne.n	80169d0 <Crc_VerifyUartData+0x490>
			{
				returnValue = E_OK;
 80169ca:	2300      	movs	r3, #0
 80169cc:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80169ce:	e0d5      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 80169d0:	2301      	movs	r3, #1
 80169d2:	73fb      	strb	r3, [r7, #15]
			break;
 80169d4:	e0d2      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_HVAC_WINDSHIELDVENT_ON:
			if(calculatedCrc == Crc_Hvac_WindshieldVent_On)
 80169d6:	4b56      	ldr	r3, [pc, #344]	; (8016b30 <Crc_VerifyUartData+0x5f0>)
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	68ba      	ldr	r2, [r7, #8]
 80169dc:	429a      	cmp	r2, r3
 80169de:	d102      	bne.n	80169e6 <Crc_VerifyUartData+0x4a6>
			{
				returnValue = E_OK;
 80169e0:	2300      	movs	r3, #0
 80169e2:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80169e4:	e0ca      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 80169e6:	2301      	movs	r3, #1
 80169e8:	73fb      	strb	r3, [r7, #15]
			break;
 80169ea:	e0c7      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_HVAC_WINDSHIELDVENT_OFF:
			if(calculatedCrc == Crc_Hvac_WindshieldVent_Off)
 80169ec:	4b51      	ldr	r3, [pc, #324]	; (8016b34 <Crc_VerifyUartData+0x5f4>)
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	68ba      	ldr	r2, [r7, #8]
 80169f2:	429a      	cmp	r2, r3
 80169f4:	d102      	bne.n	80169fc <Crc_VerifyUartData+0x4bc>
			{
				returnValue = E_OK;
 80169f6:	2300      	movs	r3, #0
 80169f8:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 80169fa:	e0bf      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 80169fc:	2301      	movs	r3, #1
 80169fe:	73fb      	strb	r3, [r7, #15]
			break;
 8016a00:	e0bc      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_HVAC_WINDSHIELDDEFROST_ON:
			if(calculatedCrc == Crc_Hvac_WindshieldDefrost_On)
 8016a02:	4b4d      	ldr	r3, [pc, #308]	; (8016b38 <Crc_VerifyUartData+0x5f8>)
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	68ba      	ldr	r2, [r7, #8]
 8016a08:	429a      	cmp	r2, r3
 8016a0a:	d102      	bne.n	8016a12 <Crc_VerifyUartData+0x4d2>
			{
				returnValue = E_OK;
 8016a0c:	2300      	movs	r3, #0
 8016a0e:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8016a10:	e0b4      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 8016a12:	2301      	movs	r3, #1
 8016a14:	73fb      	strb	r3, [r7, #15]
			break;
 8016a16:	e0b1      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_HVAC_WINDSHIELDDEFROST_OFF:
			if(calculatedCrc == Crc_Hvac_WindshieldDefrost_Off)
 8016a18:	4b48      	ldr	r3, [pc, #288]	; (8016b3c <Crc_VerifyUartData+0x5fc>)
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	68ba      	ldr	r2, [r7, #8]
 8016a1e:	429a      	cmp	r2, r3
 8016a20:	d102      	bne.n	8016a28 <Crc_VerifyUartData+0x4e8>
			{
				returnValue = E_OK;
 8016a22:	2300      	movs	r3, #0
 8016a24:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8016a26:	e0a9      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 8016a28:	2301      	movs	r3, #1
 8016a2a:	73fb      	strb	r3, [r7, #15]
			break;
 8016a2c:	e0a6      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_HVAC_AC_ON:
			if(calculatedCrc == Crc_Hvac_Ac_On)
 8016a2e:	4b44      	ldr	r3, [pc, #272]	; (8016b40 <Crc_VerifyUartData+0x600>)
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	68ba      	ldr	r2, [r7, #8]
 8016a34:	429a      	cmp	r2, r3
 8016a36:	d102      	bne.n	8016a3e <Crc_VerifyUartData+0x4fe>
			{
				returnValue = E_OK;
 8016a38:	2300      	movs	r3, #0
 8016a3a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8016a3c:	e09e      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 8016a3e:	2301      	movs	r3, #1
 8016a40:	73fb      	strb	r3, [r7, #15]
			break;
 8016a42:	e09b      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_HVAC_AC_OFF:
			if(calculatedCrc == Crc_Hvac_Ac_Off)
 8016a44:	4b3f      	ldr	r3, [pc, #252]	; (8016b44 <Crc_VerifyUartData+0x604>)
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	68ba      	ldr	r2, [r7, #8]
 8016a4a:	429a      	cmp	r2, r3
 8016a4c:	d102      	bne.n	8016a54 <Crc_VerifyUartData+0x514>
			{
				returnValue = E_OK;
 8016a4e:	2300      	movs	r3, #0
 8016a50:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8016a52:	e093      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 8016a54:	2301      	movs	r3, #1
 8016a56:	73fb      	strb	r3, [r7, #15]
			break;
 8016a58:	e090      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_HVAC_RECIRCULATION:
			if(calculatedCrc == Crc_Hvac_Recirculation)
 8016a5a:	4b3b      	ldr	r3, [pc, #236]	; (8016b48 <Crc_VerifyUartData+0x608>)
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	68ba      	ldr	r2, [r7, #8]
 8016a60:	429a      	cmp	r2, r3
 8016a62:	d102      	bne.n	8016a6a <Crc_VerifyUartData+0x52a>
			{
				returnValue = E_OK;
 8016a64:	2300      	movs	r3, #0
 8016a66:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8016a68:	e088      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 8016a6a:	2301      	movs	r3, #1
 8016a6c:	73fb      	strb	r3, [r7, #15]
			break;
 8016a6e:	e085      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_HVAC_NORECIRCULATION:
			if(calculatedCrc == Crc_Hvac_NoRecirculation)
 8016a70:	4b36      	ldr	r3, [pc, #216]	; (8016b4c <Crc_VerifyUartData+0x60c>)
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	68ba      	ldr	r2, [r7, #8]
 8016a76:	429a      	cmp	r2, r3
 8016a78:	d102      	bne.n	8016a80 <Crc_VerifyUartData+0x540>
			{
				returnValue = E_OK;
 8016a7a:	2300      	movs	r3, #0
 8016a7c:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8016a7e:	e07d      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 8016a80:	2301      	movs	r3, #1
 8016a82:	73fb      	strb	r3, [r7, #15]
			break;
 8016a84:	e07a      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_HVAC_AUTOMATICRECIRCULATION:
			if(calculatedCrc == Crc_Hvac_AutomaticRecirculation)
 8016a86:	4b32      	ldr	r3, [pc, #200]	; (8016b50 <Crc_VerifyUartData+0x610>)
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	68ba      	ldr	r2, [r7, #8]
 8016a8c:	429a      	cmp	r2, r3
 8016a8e:	d102      	bne.n	8016a96 <Crc_VerifyUartData+0x556>
			{
				returnValue = E_OK;
 8016a90:	2300      	movs	r3, #0
 8016a92:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8016a94:	e072      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 8016a96:	2301      	movs	r3, #1
 8016a98:	73fb      	strb	r3, [r7, #15]
			break;
 8016a9a:	e06f      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_HVAC_AUTOMATICMODE_ON:
			if(calculatedCrc == Crc_Hvac_AutomaticMode_On)
 8016a9c:	4b2d      	ldr	r3, [pc, #180]	; (8016b54 <Crc_VerifyUartData+0x614>)
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	68ba      	ldr	r2, [r7, #8]
 8016aa2:	429a      	cmp	r2, r3
 8016aa4:	d102      	bne.n	8016aac <Crc_VerifyUartData+0x56c>
			{
				returnValue = E_OK;
 8016aa6:	2300      	movs	r3, #0
 8016aa8:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8016aaa:	e067      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 8016aac:	2301      	movs	r3, #1
 8016aae:	73fb      	strb	r3, [r7, #15]
			break;
 8016ab0:	e064      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_HVAC_AUTOMATICMODE_OFF:
			if(calculatedCrc == Crc_Hvac_AutomaticMode_Off)
 8016ab2:	4b29      	ldr	r3, [pc, #164]	; (8016b58 <Crc_VerifyUartData+0x618>)
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	68ba      	ldr	r2, [r7, #8]
 8016ab8:	429a      	cmp	r2, r3
 8016aba:	d102      	bne.n	8016ac2 <Crc_VerifyUartData+0x582>
			{
				returnValue = E_OK;
 8016abc:	2300      	movs	r3, #0
 8016abe:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8016ac0:	e05c      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 8016ac2:	2301      	movs	r3, #1
 8016ac4:	73fb      	strb	r3, [r7, #15]
			break;
 8016ac6:	e059      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_HVAC_REARWINDSHIELDDEFROST_ON:
			if(calculatedCrc == Crc_Hvac_RearWindshieldDefrost_On)
 8016ac8:	4b24      	ldr	r3, [pc, #144]	; (8016b5c <Crc_VerifyUartData+0x61c>)
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	68ba      	ldr	r2, [r7, #8]
 8016ace:	429a      	cmp	r2, r3
 8016ad0:	d102      	bne.n	8016ad8 <Crc_VerifyUartData+0x598>
			{
				returnValue = E_OK;
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8016ad6:	e051      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 8016ad8:	2301      	movs	r3, #1
 8016ada:	73fb      	strb	r3, [r7, #15]
			break;
 8016adc:	e04e      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		case RTE_P_BTC_RX_HVAC_REARWINDSHIELDDEFROST_OFF:
			if(calculatedCrc == Crc_Hvac_RearWindshieldDefrost_Off)
 8016ade:	4b20      	ldr	r3, [pc, #128]	; (8016b60 <Crc_VerifyUartData+0x620>)
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	68ba      	ldr	r2, [r7, #8]
 8016ae4:	429a      	cmp	r2, r3
 8016ae6:	d102      	bne.n	8016aee <Crc_VerifyUartData+0x5ae>
			{
				returnValue = E_OK;
 8016ae8:	2300      	movs	r3, #0
 8016aea:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8016aec:	e046      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 8016aee:	2301      	movs	r3, #1
 8016af0:	73fb      	strb	r3, [r7, #15]
			break;
 8016af2:	e043      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
 8016af4:	2000e59c 	.word	0x2000e59c
 8016af8:	2000e5a0 	.word	0x2000e5a0
 8016afc:	2000e5a4 	.word	0x2000e5a4
 8016b00:	2000e5a8 	.word	0x2000e5a8
 8016b04:	2000e5ac 	.word	0x2000e5ac
 8016b08:	2000e5e4 	.word	0x2000e5e4
 8016b0c:	2000e5e8 	.word	0x2000e5e8
 8016b10:	2000e5b0 	.word	0x2000e5b0
 8016b14:	2000e5b4 	.word	0x2000e5b4
 8016b18:	2000e5dc 	.word	0x2000e5dc
 8016b1c:	2000e5e0 	.word	0x2000e5e0
 8016b20:	2000e5ec 	.word	0x2000e5ec
 8016b24:	2000e5f0 	.word	0x2000e5f0
 8016b28:	2000e5f4 	.word	0x2000e5f4
 8016b2c:	2000e5f8 	.word	0x2000e5f8
 8016b30:	2000e5fc 	.word	0x2000e5fc
 8016b34:	2000e600 	.word	0x2000e600
 8016b38:	2000e604 	.word	0x2000e604
 8016b3c:	2000e608 	.word	0x2000e608
 8016b40:	2000e614 	.word	0x2000e614
 8016b44:	2000e618 	.word	0x2000e618
 8016b48:	2000e61c 	.word	0x2000e61c
 8016b4c:	2000e620 	.word	0x2000e620
 8016b50:	2000e624 	.word	0x2000e624
 8016b54:	2000e628 	.word	0x2000e628
 8016b58:	2000e62c 	.word	0x2000e62c
 8016b5c:	2000e60c 	.word	0x2000e60c
 8016b60:	2000e610 	.word	0x2000e610
		case RTE_P_BTC_RX_CENLOC_FOLLOWMEHOME:
			if(calculatedCrc == Crc_Btc_FollowMeHome)
 8016b64:	4b08      	ldr	r3, [pc, #32]	; (8016b88 <Crc_VerifyUartData+0x648>)
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	68ba      	ldr	r2, [r7, #8]
 8016b6a:	429a      	cmp	r2, r3
 8016b6c:	d102      	bne.n	8016b74 <Crc_VerifyUartData+0x634>
			{
				returnValue = E_OK;
 8016b6e:	2300      	movs	r3, #0
 8016b70:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8016b72:	e003      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
				returnValue = E_NOT_OK;
 8016b74:	2301      	movs	r3, #1
 8016b76:	73fb      	strb	r3, [r7, #15]
			break;
 8016b78:	e000      	b.n	8016b7c <Crc_VerifyUartData+0x63c>
		default:
			break;
 8016b7a:	bf00      	nop
	}
	return returnValue;
 8016b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b7e:	4618      	mov	r0, r3
 8016b80:	3710      	adds	r7, #16
 8016b82:	46bd      	mov	sp, r7
 8016b84:	bd80      	pop	{r7, pc}
 8016b86:	bf00      	nop
 8016b88:	2000e630 	.word	0x2000e630

08016b8c <Crc_InitCrcValuesForUart>:
/***********************************************************************************
* Function: Crc_InitCrcValuesForUart									   		   *
* Description: Initialize the CRC default values for UART data.			 		   *
************************************************************************************/
VOID Crc_InitCrcValuesForUart()
{
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b082      	sub	sp, #8
 8016b90:	af00      	add	r7, sp, #0
	/* Local variable to store default value of possible
	 * received data from UART. */
	uint32 value = 0;
 8016b92:	2300      	movs	r3, #0
 8016b94:	607b      	str	r3, [r7, #4]
	/* Calculate CRC for each defined bluetooth command. */
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON;
 8016b96:	230f      	movs	r3, #15
 8016b98:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightRear_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016b9a:	1d3b      	adds	r3, r7, #4
 8016b9c:	2201      	movs	r2, #1
 8016b9e:	4619      	mov	r1, r3
 8016ba0:	48ba      	ldr	r0, [pc, #744]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016ba2:	f7f2 f899 	bl	8008cd8 <HAL_CRC_Calculate>
 8016ba6:	4603      	mov	r3, r0
 8016ba8:	4ab9      	ldr	r2, [pc, #740]	; (8016e90 <Crc_InitCrcValuesForUart+0x304>)
 8016baa:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF;
 8016bac:	2310      	movs	r3, #16
 8016bae:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightRear_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016bb0:	1d3b      	adds	r3, r7, #4
 8016bb2:	2201      	movs	r2, #1
 8016bb4:	4619      	mov	r1, r3
 8016bb6:	48b5      	ldr	r0, [pc, #724]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016bb8:	f7f2 f88e 	bl	8008cd8 <HAL_CRC_Calculate>
 8016bbc:	4603      	mov	r3, r0
 8016bbe:	4ab5      	ldr	r2, [pc, #724]	; (8016e94 <Crc_InitCrcValuesForUart+0x308>)
 8016bc0:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_CENLOC_ON;
 8016bc2:	2301      	movs	r3, #1
 8016bc4:	607b      	str	r3, [r7, #4]
	Crc_CenLoc_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016bc6:	1d3b      	adds	r3, r7, #4
 8016bc8:	2201      	movs	r2, #1
 8016bca:	4619      	mov	r1, r3
 8016bcc:	48af      	ldr	r0, [pc, #700]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016bce:	f7f2 f883 	bl	8008cd8 <HAL_CRC_Calculate>
 8016bd2:	4603      	mov	r3, r0
 8016bd4:	4ab0      	ldr	r2, [pc, #704]	; (8016e98 <Crc_InitCrcValuesForUart+0x30c>)
 8016bd6:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_CENLOC_OFF;
 8016bd8:	2302      	movs	r3, #2
 8016bda:	607b      	str	r3, [r7, #4]
	Crc_CenLoc_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016bdc:	1d3b      	adds	r3, r7, #4
 8016bde:	2201      	movs	r2, #1
 8016be0:	4619      	mov	r1, r3
 8016be2:	48aa      	ldr	r0, [pc, #680]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016be4:	f7f2 f878 	bl	8008cd8 <HAL_CRC_Calculate>
 8016be8:	4603      	mov	r3, r0
 8016bea:	4aac      	ldr	r2, [pc, #688]	; (8016e9c <Crc_InitCrcValuesForUart+0x310>)
 8016bec:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_ON;
 8016bee:	2303      	movs	r3, #3
 8016bf0:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HighBeam_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016bf2:	1d3b      	adds	r3, r7, #4
 8016bf4:	2201      	movs	r2, #1
 8016bf6:	4619      	mov	r1, r3
 8016bf8:	48a4      	ldr	r0, [pc, #656]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016bfa:	f7f2 f86d 	bl	8008cd8 <HAL_CRC_Calculate>
 8016bfe:	4603      	mov	r3, r0
 8016c00:	4aa7      	ldr	r2, [pc, #668]	; (8016ea0 <Crc_InitCrcValuesForUart+0x314>)
 8016c02:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_OFF;
 8016c04:	2304      	movs	r3, #4
 8016c06:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HighBeam_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016c08:	1d3b      	adds	r3, r7, #4
 8016c0a:	2201      	movs	r2, #1
 8016c0c:	4619      	mov	r1, r3
 8016c0e:	489f      	ldr	r0, [pc, #636]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016c10:	f7f2 f862 	bl	8008cd8 <HAL_CRC_Calculate>
 8016c14:	4603      	mov	r3, r0
 8016c16:	4aa3      	ldr	r2, [pc, #652]	; (8016ea4 <Crc_InitCrcValuesForUart+0x318>)
 8016c18:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_ON;
 8016c1a:	2305      	movs	r3, #5
 8016c1c:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FlashHighBeam_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016c1e:	1d3b      	adds	r3, r7, #4
 8016c20:	2201      	movs	r2, #1
 8016c22:	4619      	mov	r1, r3
 8016c24:	4899      	ldr	r0, [pc, #612]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016c26:	f7f2 f857 	bl	8008cd8 <HAL_CRC_Calculate>
 8016c2a:	4603      	mov	r3, r0
 8016c2c:	4a9e      	ldr	r2, [pc, #632]	; (8016ea8 <Crc_InitCrcValuesForUart+0x31c>)
 8016c2e:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_OFF;
 8016c30:	2306      	movs	r3, #6
 8016c32:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FlashHighBeam_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016c34:	1d3b      	adds	r3, r7, #4
 8016c36:	2201      	movs	r2, #1
 8016c38:	4619      	mov	r1, r3
 8016c3a:	4894      	ldr	r0, [pc, #592]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016c3c:	f7f2 f84c 	bl	8008cd8 <HAL_CRC_Calculate>
 8016c40:	4603      	mov	r3, r0
 8016c42:	4a9a      	ldr	r2, [pc, #616]	; (8016eac <Crc_InitCrcValuesForUart+0x320>)
 8016c44:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON;
 8016c46:	2307      	movs	r3, #7
 8016c48:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalLeft_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016c4a:	1d3b      	adds	r3, r7, #4
 8016c4c:	2201      	movs	r2, #1
 8016c4e:	4619      	mov	r1, r3
 8016c50:	488e      	ldr	r0, [pc, #568]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016c52:	f7f2 f841 	bl	8008cd8 <HAL_CRC_Calculate>
 8016c56:	4603      	mov	r3, r0
 8016c58:	4a95      	ldr	r2, [pc, #596]	; (8016eb0 <Crc_InitCrcValuesForUart+0x324>)
 8016c5a:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF;
 8016c5c:	2308      	movs	r3, #8
 8016c5e:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalLeft_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016c60:	1d3b      	adds	r3, r7, #4
 8016c62:	2201      	movs	r2, #1
 8016c64:	4619      	mov	r1, r3
 8016c66:	4889      	ldr	r0, [pc, #548]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016c68:	f7f2 f836 	bl	8008cd8 <HAL_CRC_Calculate>
 8016c6c:	4603      	mov	r3, r0
 8016c6e:	4a91      	ldr	r2, [pc, #580]	; (8016eb4 <Crc_InitCrcValuesForUart+0x328>)
 8016c70:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON;
 8016c72:	2309      	movs	r3, #9
 8016c74:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalRight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016c76:	1d3b      	adds	r3, r7, #4
 8016c78:	2201      	movs	r2, #1
 8016c7a:	4619      	mov	r1, r3
 8016c7c:	4883      	ldr	r0, [pc, #524]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016c7e:	f7f2 f82b 	bl	8008cd8 <HAL_CRC_Calculate>
 8016c82:	4603      	mov	r3, r0
 8016c84:	4a8c      	ldr	r2, [pc, #560]	; (8016eb8 <Crc_InitCrcValuesForUart+0x32c>)
 8016c86:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF;
 8016c88:	230a      	movs	r3, #10
 8016c8a:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalRight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016c8c:	1d3b      	adds	r3, r7, #4
 8016c8e:	2201      	movs	r2, #1
 8016c90:	4619      	mov	r1, r3
 8016c92:	487e      	ldr	r0, [pc, #504]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016c94:	f7f2 f820 	bl	8008cd8 <HAL_CRC_Calculate>
 8016c98:	4603      	mov	r3, r0
 8016c9a:	4a88      	ldr	r2, [pc, #544]	; (8016ebc <Crc_InitCrcValuesForUart+0x330>)
 8016c9c:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON;
 8016c9e:	230b      	movs	r3, #11
 8016ca0:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HazardLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016ca2:	1d3b      	adds	r3, r7, #4
 8016ca4:	2201      	movs	r2, #1
 8016ca6:	4619      	mov	r1, r3
 8016ca8:	4878      	ldr	r0, [pc, #480]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016caa:	f7f2 f815 	bl	8008cd8 <HAL_CRC_Calculate>
 8016cae:	4603      	mov	r3, r0
 8016cb0:	4a83      	ldr	r2, [pc, #524]	; (8016ec0 <Crc_InitCrcValuesForUart+0x334>)
 8016cb2:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF;
 8016cb4:	230c      	movs	r3, #12
 8016cb6:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HazardLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016cb8:	1d3b      	adds	r3, r7, #4
 8016cba:	2201      	movs	r2, #1
 8016cbc:	4619      	mov	r1, r3
 8016cbe:	4873      	ldr	r0, [pc, #460]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016cc0:	f7f2 f80a 	bl	8008cd8 <HAL_CRC_Calculate>
 8016cc4:	4603      	mov	r3, r0
 8016cc6:	4a7f      	ldr	r2, [pc, #508]	; (8016ec4 <Crc_InitCrcValuesForUart+0x338>)
 8016cc8:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON;
 8016cca:	230d      	movs	r3, #13
 8016ccc:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightFront_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016cce:	1d3b      	adds	r3, r7, #4
 8016cd0:	2201      	movs	r2, #1
 8016cd2:	4619      	mov	r1, r3
 8016cd4:	486d      	ldr	r0, [pc, #436]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016cd6:	f7f1 ffff 	bl	8008cd8 <HAL_CRC_Calculate>
 8016cda:	4603      	mov	r3, r0
 8016cdc:	4a7a      	ldr	r2, [pc, #488]	; (8016ec8 <Crc_InitCrcValuesForUart+0x33c>)
 8016cde:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF;
 8016ce0:	230e      	movs	r3, #14
 8016ce2:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightFront_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016ce4:	1d3b      	adds	r3, r7, #4
 8016ce6:	2201      	movs	r2, #1
 8016ce8:	4619      	mov	r1, r3
 8016cea:	4868      	ldr	r0, [pc, #416]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016cec:	f7f1 fff4 	bl	8008cd8 <HAL_CRC_Calculate>
 8016cf0:	4603      	mov	r3, r0
 8016cf2:	4a76      	ldr	r2, [pc, #472]	; (8016ecc <Crc_InitCrcValuesForUart+0x340>)
 8016cf4:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTON;
 8016cf6:	2311      	movs	r3, #17
 8016cf8:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_BrakeLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016cfa:	1d3b      	adds	r3, r7, #4
 8016cfc:	2201      	movs	r2, #1
 8016cfe:	4619      	mov	r1, r3
 8016d00:	4862      	ldr	r0, [pc, #392]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016d02:	f7f1 ffe9 	bl	8008cd8 <HAL_CRC_Calculate>
 8016d06:	4603      	mov	r3, r0
 8016d08:	4a71      	ldr	r2, [pc, #452]	; (8016ed0 <Crc_InitCrcValuesForUart+0x344>)
 8016d0a:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTOFF;
 8016d0c:	2312      	movs	r3, #18
 8016d0e:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_BrakeLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016d10:	1d3b      	adds	r3, r7, #4
 8016d12:	2201      	movs	r2, #1
 8016d14:	4619      	mov	r1, r3
 8016d16:	485d      	ldr	r0, [pc, #372]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016d18:	f7f1 ffde 	bl	8008cd8 <HAL_CRC_Calculate>
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	4a6d      	ldr	r2, [pc, #436]	; (8016ed4 <Crc_InitCrcValuesForUart+0x348>)
 8016d20:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_ON;
 8016d22:	2315      	movs	r3, #21
 8016d24:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_ReverseLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016d26:	1d3b      	adds	r3, r7, #4
 8016d28:	2201      	movs	r2, #1
 8016d2a:	4619      	mov	r1, r3
 8016d2c:	4857      	ldr	r0, [pc, #348]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016d2e:	f7f1 ffd3 	bl	8008cd8 <HAL_CRC_Calculate>
 8016d32:	4603      	mov	r3, r0
 8016d34:	4a68      	ldr	r2, [pc, #416]	; (8016ed8 <Crc_InitCrcValuesForUart+0x34c>)
 8016d36:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF;
 8016d38:	2316      	movs	r3, #22
 8016d3a:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_ReverseLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016d3c:	1d3b      	adds	r3, r7, #4
 8016d3e:	2201      	movs	r2, #1
 8016d40:	4619      	mov	r1, r3
 8016d42:	4852      	ldr	r0, [pc, #328]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016d44:	f7f1 ffc8 	bl	8008cd8 <HAL_CRC_Calculate>
 8016d48:	4603      	mov	r3, r0
 8016d4a:	4a64      	ldr	r2, [pc, #400]	; (8016edc <Crc_InitCrcValuesForUart+0x350>)
 8016d4c:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_POSITIONZERO;
 8016d4e:	2317      	movs	r3, #23
 8016d50:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_PositionZero = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016d52:	1d3b      	adds	r3, r7, #4
 8016d54:	2201      	movs	r2, #1
 8016d56:	4619      	mov	r1, r3
 8016d58:	484c      	ldr	r0, [pc, #304]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016d5a:	f7f1 ffbd 	bl	8008cd8 <HAL_CRC_Calculate>
 8016d5e:	4603      	mov	r3, r0
 8016d60:	4a5f      	ldr	r2, [pc, #380]	; (8016ee0 <Crc_InitCrcValuesForUart+0x354>)
 8016d62:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 8016d64:	2318      	movs	r3, #24
 8016d66:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_AutomaticLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016d68:	1d3b      	adds	r3, r7, #4
 8016d6a:	2201      	movs	r2, #1
 8016d6c:	4619      	mov	r1, r3
 8016d6e:	4847      	ldr	r0, [pc, #284]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016d70:	f7f1 ffb2 	bl	8008cd8 <HAL_CRC_Calculate>
 8016d74:	4603      	mov	r3, r0
 8016d76:	4a5b      	ldr	r2, [pc, #364]	; (8016ee4 <Crc_InitCrcValuesForUart+0x358>)
 8016d78:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 8016d7a:	2319      	movs	r3, #25
 8016d7c:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_PositionLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016d7e:	1d3b      	adds	r3, r7, #4
 8016d80:	2201      	movs	r2, #1
 8016d82:	4619      	mov	r1, r3
 8016d84:	4841      	ldr	r0, [pc, #260]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016d86:	f7f1 ffa7 	bl	8008cd8 <HAL_CRC_Calculate>
 8016d8a:	4603      	mov	r3, r0
 8016d8c:	4a56      	ldr	r2, [pc, #344]	; (8016ee8 <Crc_InitCrcValuesForUart+0x35c>)
 8016d8e:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 8016d90:	231a      	movs	r3, #26
 8016d92:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_NightTimeLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016d94:	1d3b      	adds	r3, r7, #4
 8016d96:	2201      	movs	r2, #1
 8016d98:	4619      	mov	r1, r3
 8016d9a:	483c      	ldr	r0, [pc, #240]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016d9c:	f7f1 ff9c 	bl	8008cd8 <HAL_CRC_Calculate>
 8016da0:	4603      	mov	r3, r0
 8016da2:	4a52      	ldr	r2, [pc, #328]	; (8016eec <Crc_InitCrcValuesForUart+0x360>)
 8016da4:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_IGNITION_STEP_ONE;
 8016da6:	231b      	movs	r3, #27
 8016da8:	607b      	str	r3, [r7, #4]
	Crc_Ignition_Step_One = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016daa:	1d3b      	adds	r3, r7, #4
 8016dac:	2201      	movs	r2, #1
 8016dae:	4619      	mov	r1, r3
 8016db0:	4836      	ldr	r0, [pc, #216]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016db2:	f7f1 ff91 	bl	8008cd8 <HAL_CRC_Calculate>
 8016db6:	4603      	mov	r3, r0
 8016db8:	4a4d      	ldr	r2, [pc, #308]	; (8016ef0 <Crc_InitCrcValuesForUart+0x364>)
 8016dba:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_IGNITION_STEP_TWO;
 8016dbc:	231c      	movs	r3, #28
 8016dbe:	607b      	str	r3, [r7, #4]
	Crc_Ignition_Step_Two = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016dc0:	1d3b      	adds	r3, r7, #4
 8016dc2:	2201      	movs	r2, #1
 8016dc4:	4619      	mov	r1, r3
 8016dc6:	4831      	ldr	r0, [pc, #196]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016dc8:	f7f1 ff86 	bl	8008cd8 <HAL_CRC_Calculate>
 8016dcc:	4603      	mov	r3, r0
 8016dce:	4a49      	ldr	r2, [pc, #292]	; (8016ef4 <Crc_InitCrcValuesForUart+0x368>)
 8016dd0:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_IGNITION_TURN_OFF;
 8016dd2:	231d      	movs	r3, #29
 8016dd4:	607b      	str	r3, [r7, #4]
	Crc_Ignition_Turn_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016dd6:	1d3b      	adds	r3, r7, #4
 8016dd8:	2201      	movs	r2, #1
 8016dda:	4619      	mov	r1, r3
 8016ddc:	482b      	ldr	r0, [pc, #172]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016dde:	f7f1 ff7b 	bl	8008cd8 <HAL_CRC_Calculate>
 8016de2:	4603      	mov	r3, r0
 8016de4:	4a44      	ldr	r2, [pc, #272]	; (8016ef8 <Crc_InitCrcValuesForUart+0x36c>)
 8016de6:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_ON;
 8016de8:	2313      	movs	r3, #19
 8016dea:	607b      	str	r3, [r7, #4]
	Crc_IntLights_InteriorLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016dec:	1d3b      	adds	r3, r7, #4
 8016dee:	2201      	movs	r2, #1
 8016df0:	4619      	mov	r1, r3
 8016df2:	4826      	ldr	r0, [pc, #152]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016df4:	f7f1 ff70 	bl	8008cd8 <HAL_CRC_Calculate>
 8016df8:	4603      	mov	r3, r0
 8016dfa:	4a40      	ldr	r2, [pc, #256]	; (8016efc <Crc_InitCrcValuesForUart+0x370>)
 8016dfc:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF;
 8016dfe:	2314      	movs	r3, #20
 8016e00:	607b      	str	r3, [r7, #4]
	Crc_IntLights_InteriorLights_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016e02:	1d3b      	adds	r3, r7, #4
 8016e04:	2201      	movs	r2, #1
 8016e06:	4619      	mov	r1, r3
 8016e08:	4820      	ldr	r0, [pc, #128]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016e0a:	f7f1 ff65 	bl	8008cd8 <HAL_CRC_Calculate>
 8016e0e:	4603      	mov	r3, r0
 8016e10:	4a3b      	ldr	r2, [pc, #236]	; (8016f00 <Crc_InitCrcValuesForUart+0x374>)
 8016e12:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_LEGVENT_ON;
 8016e14:	2337      	movs	r3, #55	; 0x37
 8016e16:	607b      	str	r3, [r7, #4]
	Crc_Hvac_LegVent_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016e18:	1d3b      	adds	r3, r7, #4
 8016e1a:	2201      	movs	r2, #1
 8016e1c:	4619      	mov	r1, r3
 8016e1e:	481b      	ldr	r0, [pc, #108]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016e20:	f7f1 ff5a 	bl	8008cd8 <HAL_CRC_Calculate>
 8016e24:	4603      	mov	r3, r0
 8016e26:	4a37      	ldr	r2, [pc, #220]	; (8016f04 <Crc_InitCrcValuesForUart+0x378>)
 8016e28:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_LEGVENT_OFF;
 8016e2a:	2338      	movs	r3, #56	; 0x38
 8016e2c:	607b      	str	r3, [r7, #4]
	Crc_Hvac_LegVent_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016e2e:	1d3b      	adds	r3, r7, #4
 8016e30:	2201      	movs	r2, #1
 8016e32:	4619      	mov	r1, r3
 8016e34:	4815      	ldr	r0, [pc, #84]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016e36:	f7f1 ff4f 	bl	8008cd8 <HAL_CRC_Calculate>
 8016e3a:	4603      	mov	r3, r0
 8016e3c:	4a32      	ldr	r2, [pc, #200]	; (8016f08 <Crc_InitCrcValuesForUart+0x37c>)
 8016e3e:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_MIDVENT_ON;
 8016e40:	2339      	movs	r3, #57	; 0x39
 8016e42:	607b      	str	r3, [r7, #4]
	Crc_Hvac_MidVent_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016e44:	1d3b      	adds	r3, r7, #4
 8016e46:	2201      	movs	r2, #1
 8016e48:	4619      	mov	r1, r3
 8016e4a:	4810      	ldr	r0, [pc, #64]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016e4c:	f7f1 ff44 	bl	8008cd8 <HAL_CRC_Calculate>
 8016e50:	4603      	mov	r3, r0
 8016e52:	4a2e      	ldr	r2, [pc, #184]	; (8016f0c <Crc_InitCrcValuesForUart+0x380>)
 8016e54:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_MIDVENT_OFF;
 8016e56:	233a      	movs	r3, #58	; 0x3a
 8016e58:	607b      	str	r3, [r7, #4]
	Crc_Hvac_MidVent_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016e5a:	1d3b      	adds	r3, r7, #4
 8016e5c:	2201      	movs	r2, #1
 8016e5e:	4619      	mov	r1, r3
 8016e60:	480a      	ldr	r0, [pc, #40]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016e62:	f7f1 ff39 	bl	8008cd8 <HAL_CRC_Calculate>
 8016e66:	4603      	mov	r3, r0
 8016e68:	4a29      	ldr	r2, [pc, #164]	; (8016f10 <Crc_InitCrcValuesForUart+0x384>)
 8016e6a:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_WINDSHIELDVENT_ON;
 8016e6c:	233b      	movs	r3, #59	; 0x3b
 8016e6e:	607b      	str	r3, [r7, #4]
	Crc_Hvac_WindshieldVent_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016e70:	1d3b      	adds	r3, r7, #4
 8016e72:	2201      	movs	r2, #1
 8016e74:	4619      	mov	r1, r3
 8016e76:	4805      	ldr	r0, [pc, #20]	; (8016e8c <Crc_InitCrcValuesForUart+0x300>)
 8016e78:	f7f1 ff2e 	bl	8008cd8 <HAL_CRC_Calculate>
 8016e7c:	4603      	mov	r3, r0
 8016e7e:	4a25      	ldr	r2, [pc, #148]	; (8016f14 <Crc_InitCrcValuesForUart+0x388>)
 8016e80:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_WINDSHIELDVENT_OFF;
 8016e82:	233c      	movs	r3, #60	; 0x3c
 8016e84:	607b      	str	r3, [r7, #4]
	Crc_Hvac_WindshieldVent_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016e86:	1d3b      	adds	r3, r7, #4
 8016e88:	e046      	b.n	8016f18 <Crc_InitCrcValuesForUart+0x38c>
 8016e8a:	bf00      	nop
 8016e8c:	200003a4 	.word	0x200003a4
 8016e90:	2000e5e4 	.word	0x2000e5e4
 8016e94:	2000e5e8 	.word	0x2000e5e8
 8016e98:	2000e578 	.word	0x2000e578
 8016e9c:	2000e57c 	.word	0x2000e57c
 8016ea0:	2000e580 	.word	0x2000e580
 8016ea4:	2000e584 	.word	0x2000e584
 8016ea8:	2000e588 	.word	0x2000e588
 8016eac:	2000e58c 	.word	0x2000e58c
 8016eb0:	2000e590 	.word	0x2000e590
 8016eb4:	2000e594 	.word	0x2000e594
 8016eb8:	2000e598 	.word	0x2000e598
 8016ebc:	2000e59c 	.word	0x2000e59c
 8016ec0:	2000e5a0 	.word	0x2000e5a0
 8016ec4:	2000e5a4 	.word	0x2000e5a4
 8016ec8:	2000e5a8 	.word	0x2000e5a8
 8016ecc:	2000e5ac 	.word	0x2000e5ac
 8016ed0:	2000e5b0 	.word	0x2000e5b0
 8016ed4:	2000e5b4 	.word	0x2000e5b4
 8016ed8:	2000e5b8 	.word	0x2000e5b8
 8016edc:	2000e5bc 	.word	0x2000e5bc
 8016ee0:	2000e5c0 	.word	0x2000e5c0
 8016ee4:	2000e5c4 	.word	0x2000e5c4
 8016ee8:	2000e5c8 	.word	0x2000e5c8
 8016eec:	2000e5cc 	.word	0x2000e5cc
 8016ef0:	2000e5d0 	.word	0x2000e5d0
 8016ef4:	2000e5d4 	.word	0x2000e5d4
 8016ef8:	2000e5d8 	.word	0x2000e5d8
 8016efc:	2000e5dc 	.word	0x2000e5dc
 8016f00:	2000e5e0 	.word	0x2000e5e0
 8016f04:	2000e5ec 	.word	0x2000e5ec
 8016f08:	2000e5f0 	.word	0x2000e5f0
 8016f0c:	2000e5f4 	.word	0x2000e5f4
 8016f10:	2000e5f8 	.word	0x2000e5f8
 8016f14:	2000e5fc 	.word	0x2000e5fc
 8016f18:	2201      	movs	r2, #1
 8016f1a:	4619      	mov	r1, r3
 8016f1c:	4846      	ldr	r0, [pc, #280]	; (8017038 <Crc_InitCrcValuesForUart+0x4ac>)
 8016f1e:	f7f1 fedb 	bl	8008cd8 <HAL_CRC_Calculate>
 8016f22:	4603      	mov	r3, r0
 8016f24:	4a45      	ldr	r2, [pc, #276]	; (801703c <Crc_InitCrcValuesForUart+0x4b0>)
 8016f26:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_WINDSHIELDDEFROST_ON;
 8016f28:	233d      	movs	r3, #61	; 0x3d
 8016f2a:	607b      	str	r3, [r7, #4]
	Crc_Hvac_WindshieldDefrost_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016f2c:	1d3b      	adds	r3, r7, #4
 8016f2e:	2201      	movs	r2, #1
 8016f30:	4619      	mov	r1, r3
 8016f32:	4841      	ldr	r0, [pc, #260]	; (8017038 <Crc_InitCrcValuesForUart+0x4ac>)
 8016f34:	f7f1 fed0 	bl	8008cd8 <HAL_CRC_Calculate>
 8016f38:	4603      	mov	r3, r0
 8016f3a:	4a41      	ldr	r2, [pc, #260]	; (8017040 <Crc_InitCrcValuesForUart+0x4b4>)
 8016f3c:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_WINDSHIELDDEFROST_OFF;
 8016f3e:	233e      	movs	r3, #62	; 0x3e
 8016f40:	607b      	str	r3, [r7, #4]
	Crc_Hvac_WindshieldDefrost_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016f42:	1d3b      	adds	r3, r7, #4
 8016f44:	2201      	movs	r2, #1
 8016f46:	4619      	mov	r1, r3
 8016f48:	483b      	ldr	r0, [pc, #236]	; (8017038 <Crc_InitCrcValuesForUart+0x4ac>)
 8016f4a:	f7f1 fec5 	bl	8008cd8 <HAL_CRC_Calculate>
 8016f4e:	4603      	mov	r3, r0
 8016f50:	4a3c      	ldr	r2, [pc, #240]	; (8017044 <Crc_InitCrcValuesForUart+0x4b8>)
 8016f52:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_REARWINDSHIELDDEFROST_ON;
 8016f54:	2346      	movs	r3, #70	; 0x46
 8016f56:	607b      	str	r3, [r7, #4]
	Crc_Hvac_RearWindshieldDefrost_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016f58:	1d3b      	adds	r3, r7, #4
 8016f5a:	2201      	movs	r2, #1
 8016f5c:	4619      	mov	r1, r3
 8016f5e:	4836      	ldr	r0, [pc, #216]	; (8017038 <Crc_InitCrcValuesForUart+0x4ac>)
 8016f60:	f7f1 feba 	bl	8008cd8 <HAL_CRC_Calculate>
 8016f64:	4603      	mov	r3, r0
 8016f66:	4a38      	ldr	r2, [pc, #224]	; (8017048 <Crc_InitCrcValuesForUart+0x4bc>)
 8016f68:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_REARWINDSHIELDDEFROST_OFF;
 8016f6a:	2347      	movs	r3, #71	; 0x47
 8016f6c:	607b      	str	r3, [r7, #4]
	Crc_Hvac_RearWindshieldDefrost_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016f6e:	1d3b      	adds	r3, r7, #4
 8016f70:	2201      	movs	r2, #1
 8016f72:	4619      	mov	r1, r3
 8016f74:	4830      	ldr	r0, [pc, #192]	; (8017038 <Crc_InitCrcValuesForUart+0x4ac>)
 8016f76:	f7f1 feaf 	bl	8008cd8 <HAL_CRC_Calculate>
 8016f7a:	4603      	mov	r3, r0
 8016f7c:	4a33      	ldr	r2, [pc, #204]	; (801704c <Crc_InitCrcValuesForUart+0x4c0>)
 8016f7e:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_AC_ON;
 8016f80:	233f      	movs	r3, #63	; 0x3f
 8016f82:	607b      	str	r3, [r7, #4]
	Crc_Hvac_Ac_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016f84:	1d3b      	adds	r3, r7, #4
 8016f86:	2201      	movs	r2, #1
 8016f88:	4619      	mov	r1, r3
 8016f8a:	482b      	ldr	r0, [pc, #172]	; (8017038 <Crc_InitCrcValuesForUart+0x4ac>)
 8016f8c:	f7f1 fea4 	bl	8008cd8 <HAL_CRC_Calculate>
 8016f90:	4603      	mov	r3, r0
 8016f92:	4a2f      	ldr	r2, [pc, #188]	; (8017050 <Crc_InitCrcValuesForUart+0x4c4>)
 8016f94:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_AC_OFF;
 8016f96:	2340      	movs	r3, #64	; 0x40
 8016f98:	607b      	str	r3, [r7, #4]
	Crc_Hvac_Ac_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016f9a:	1d3b      	adds	r3, r7, #4
 8016f9c:	2201      	movs	r2, #1
 8016f9e:	4619      	mov	r1, r3
 8016fa0:	4825      	ldr	r0, [pc, #148]	; (8017038 <Crc_InitCrcValuesForUart+0x4ac>)
 8016fa2:	f7f1 fe99 	bl	8008cd8 <HAL_CRC_Calculate>
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	4a2a      	ldr	r2, [pc, #168]	; (8017054 <Crc_InitCrcValuesForUart+0x4c8>)
 8016faa:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_RECIRCULATION;
 8016fac:	2341      	movs	r3, #65	; 0x41
 8016fae:	607b      	str	r3, [r7, #4]
	Crc_Hvac_Recirculation = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016fb0:	1d3b      	adds	r3, r7, #4
 8016fb2:	2201      	movs	r2, #1
 8016fb4:	4619      	mov	r1, r3
 8016fb6:	4820      	ldr	r0, [pc, #128]	; (8017038 <Crc_InitCrcValuesForUart+0x4ac>)
 8016fb8:	f7f1 fe8e 	bl	8008cd8 <HAL_CRC_Calculate>
 8016fbc:	4603      	mov	r3, r0
 8016fbe:	4a26      	ldr	r2, [pc, #152]	; (8017058 <Crc_InitCrcValuesForUart+0x4cc>)
 8016fc0:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_NORECIRCULATION;
 8016fc2:	2342      	movs	r3, #66	; 0x42
 8016fc4:	607b      	str	r3, [r7, #4]
	Crc_Hvac_NoRecirculation = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016fc6:	1d3b      	adds	r3, r7, #4
 8016fc8:	2201      	movs	r2, #1
 8016fca:	4619      	mov	r1, r3
 8016fcc:	481a      	ldr	r0, [pc, #104]	; (8017038 <Crc_InitCrcValuesForUart+0x4ac>)
 8016fce:	f7f1 fe83 	bl	8008cd8 <HAL_CRC_Calculate>
 8016fd2:	4603      	mov	r3, r0
 8016fd4:	4a21      	ldr	r2, [pc, #132]	; (801705c <Crc_InitCrcValuesForUart+0x4d0>)
 8016fd6:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_AUTOMATICRECIRCULATION;
 8016fd8:	2343      	movs	r3, #67	; 0x43
 8016fda:	607b      	str	r3, [r7, #4]
	Crc_Hvac_AutomaticRecirculation = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016fdc:	1d3b      	adds	r3, r7, #4
 8016fde:	2201      	movs	r2, #1
 8016fe0:	4619      	mov	r1, r3
 8016fe2:	4815      	ldr	r0, [pc, #84]	; (8017038 <Crc_InitCrcValuesForUart+0x4ac>)
 8016fe4:	f7f1 fe78 	bl	8008cd8 <HAL_CRC_Calculate>
 8016fe8:	4603      	mov	r3, r0
 8016fea:	4a1d      	ldr	r2, [pc, #116]	; (8017060 <Crc_InitCrcValuesForUart+0x4d4>)
 8016fec:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_AUTOMATICMODE_ON;
 8016fee:	2344      	movs	r3, #68	; 0x44
 8016ff0:	607b      	str	r3, [r7, #4]
	Crc_Hvac_AutomaticMode_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8016ff2:	1d3b      	adds	r3, r7, #4
 8016ff4:	2201      	movs	r2, #1
 8016ff6:	4619      	mov	r1, r3
 8016ff8:	480f      	ldr	r0, [pc, #60]	; (8017038 <Crc_InitCrcValuesForUart+0x4ac>)
 8016ffa:	f7f1 fe6d 	bl	8008cd8 <HAL_CRC_Calculate>
 8016ffe:	4603      	mov	r3, r0
 8017000:	4a18      	ldr	r2, [pc, #96]	; (8017064 <Crc_InitCrcValuesForUart+0x4d8>)
 8017002:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_AUTOMATICMODE_OFF;
 8017004:	2345      	movs	r3, #69	; 0x45
 8017006:	607b      	str	r3, [r7, #4]
	Crc_Hvac_AutomaticMode_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8017008:	1d3b      	adds	r3, r7, #4
 801700a:	2201      	movs	r2, #1
 801700c:	4619      	mov	r1, r3
 801700e:	480a      	ldr	r0, [pc, #40]	; (8017038 <Crc_InitCrcValuesForUart+0x4ac>)
 8017010:	f7f1 fe62 	bl	8008cd8 <HAL_CRC_Calculate>
 8017014:	4603      	mov	r3, r0
 8017016:	4a14      	ldr	r2, [pc, #80]	; (8017068 <Crc_InitCrcValuesForUart+0x4dc>)
 8017018:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_CENLOC_FOLLOWMEHOME;
 801701a:	2348      	movs	r3, #72	; 0x48
 801701c:	607b      	str	r3, [r7, #4]
	Crc_Btc_FollowMeHome = HAL_CRC_Calculate(&hcrc, &value, 1);
 801701e:	1d3b      	adds	r3, r7, #4
 8017020:	2201      	movs	r2, #1
 8017022:	4619      	mov	r1, r3
 8017024:	4804      	ldr	r0, [pc, #16]	; (8017038 <Crc_InitCrcValuesForUart+0x4ac>)
 8017026:	f7f1 fe57 	bl	8008cd8 <HAL_CRC_Calculate>
 801702a:	4603      	mov	r3, r0
 801702c:	4a0f      	ldr	r2, [pc, #60]	; (801706c <Crc_InitCrcValuesForUart+0x4e0>)
 801702e:	6013      	str	r3, [r2, #0]
}
 8017030:	bf00      	nop
 8017032:	3708      	adds	r7, #8
 8017034:	46bd      	mov	sp, r7
 8017036:	bd80      	pop	{r7, pc}
 8017038:	200003a4 	.word	0x200003a4
 801703c:	2000e600 	.word	0x2000e600
 8017040:	2000e604 	.word	0x2000e604
 8017044:	2000e608 	.word	0x2000e608
 8017048:	2000e60c 	.word	0x2000e60c
 801704c:	2000e610 	.word	0x2000e610
 8017050:	2000e614 	.word	0x2000e614
 8017054:	2000e618 	.word	0x2000e618
 8017058:	2000e61c 	.word	0x2000e61c
 801705c:	2000e620 	.word	0x2000e620
 8017060:	2000e624 	.word	0x2000e624
 8017064:	2000e628 	.word	0x2000e628
 8017068:	2000e62c 	.word	0x2000e62c
 801706c:	2000e630 	.word	0x2000e630

08017070 <HAL_CRC_ErrorCallback>:
/***********************************************************************************
* Function: HAL_CRC_ErrorCallback												   *
* Description: Called in case of error. 								 		   *
************************************************************************************/
VOID HAL_CRC_ErrorCallback(CRC_HandleTypeDef *hcrc)
{
 8017070:	b580      	push	{r7, lr}
 8017072:	b082      	sub	sp, #8
 8017074:	af00      	add	r7, sp, #0
 8017076:	6078      	str	r0, [r7, #4]
	/* Perform re-initialization. */
	Crc_DeInit();
 8017078:	f000 f81e 	bl	80170b8 <Crc_DeInit>
	Crc_Init();
 801707c:	f000 f804 	bl	8017088 <Crc_Init>
}
 8017080:	bf00      	nop
 8017082:	3708      	adds	r7, #8
 8017084:	46bd      	mov	sp, r7
 8017086:	bd80      	pop	{r7, pc}

08017088 <Crc_Init>:
/***********************************************************************************
* Function: Crc_Init													   		   *
* Description: Initialize the peripheral.								 		   *
************************************************************************************/
StdReturnType Crc_Init()
{
 8017088:	b580      	push	{r7, lr}
 801708a:	af00      	add	r7, sp, #0
	/* Initialize the CRC.
	 * Call for the error callback in case of faulty initialization. */
	hcrc.Instance = CRC;
 801708c:	4b08      	ldr	r3, [pc, #32]	; (80170b0 <Crc_Init+0x28>)
 801708e:	4a09      	ldr	r2, [pc, #36]	; (80170b4 <Crc_Init+0x2c>)
 8017090:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8017092:	4807      	ldr	r0, [pc, #28]	; (80170b0 <Crc_Init+0x28>)
 8017094:	f7f1 fdd4 	bl	8008c40 <HAL_CRC_Init>
 8017098:	4603      	mov	r3, r0
 801709a:	2b00      	cmp	r3, #0
 801709c:	d002      	beq.n	80170a4 <Crc_Init+0x1c>
	{
		HAL_CRC_ErrorCallback(&hcrc);
 801709e:	4804      	ldr	r0, [pc, #16]	; (80170b0 <Crc_Init+0x28>)
 80170a0:	f7ff ffe6 	bl	8017070 <HAL_CRC_ErrorCallback>
	else
	{
		/* do nothing */
	}
	/* Initialize the default CRC UART data received values. */
	Crc_InitCrcValuesForUart();
 80170a4:	f7ff fd72 	bl	8016b8c <Crc_InitCrcValuesForUart>
	return E_OK;
 80170a8:	2300      	movs	r3, #0
}
 80170aa:	4618      	mov	r0, r3
 80170ac:	bd80      	pop	{r7, pc}
 80170ae:	bf00      	nop
 80170b0:	200003a4 	.word	0x200003a4
 80170b4:	40023000 	.word	0x40023000

080170b8 <Crc_DeInit>:
/***********************************************************************************
* Function: Crc_DeInit													   		   *
* Description: De-initialize the peripheral.		 		   					   *
************************************************************************************/
StdReturnType Crc_DeInit()
{
 80170b8:	b580      	push	{r7, lr}
 80170ba:	af00      	add	r7, sp, #0
	/* De-initialize the CRC. */
	HAL_CRC_DeInit(&hcrc);
 80170bc:	4802      	ldr	r0, [pc, #8]	; (80170c8 <Crc_DeInit+0x10>)
 80170be:	f7f1 fddb 	bl	8008c78 <HAL_CRC_DeInit>
	return E_OK;
 80170c2:	2300      	movs	r3, #0
}
 80170c4:	4618      	mov	r0, r3
 80170c6:	bd80      	pop	{r7, pc}
 80170c8:	200003a4 	.word	0x200003a4

080170cc <Crc_MainFunction>:
/***********************************************************************************
* Function: Crc_MainFunction													   *
* Description: Peripheral main function.		 		   						   *
************************************************************************************/
VOID Crc_MainFunction()
{
 80170cc:	b580      	push	{r7, lr}
 80170ce:	b082      	sub	sp, #8
 80170d0:	af00      	add	r7, sp, #0
	/* Get the error status in the local variable. */
	uint32 returnValue = HAL_CRC_GetState(&hcrc);
 80170d2:	4825      	ldr	r0, [pc, #148]	; (8017168 <Crc_MainFunction+0x9c>)
 80170d4:	f7f1 fe33 	bl	8008d3e <HAL_CRC_GetState>
 80170d8:	4603      	mov	r3, r0
 80170da:	607b      	str	r3, [r7, #4]
	/* Process module state. */
	switch(Crc_BswState)
 80170dc:	4b23      	ldr	r3, [pc, #140]	; (801716c <Crc_MainFunction+0xa0>)
 80170de:	781b      	ldrb	r3, [r3, #0]
 80170e0:	2b03      	cmp	r3, #3
 80170e2:	d81a      	bhi.n	801711a <Crc_MainFunction+0x4e>
 80170e4:	a201      	add	r2, pc, #4	; (adr r2, 80170ec <Crc_MainFunction+0x20>)
 80170e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170ea:	bf00      	nop
 80170ec:	080170fd 	.word	0x080170fd
 80170f0:	0801711b 	.word	0x0801711b
 80170f4:	0801710f 	.word	0x0801710f
 80170f8:	08017109 	.word	0x08017109
	{
		case CRC_INIT_STATE:
			Crc_Init();
 80170fc:	f7ff ffc4 	bl	8017088 <Crc_Init>
			Crc_BswState = CRC_INITCRCVALUES_STATE;
 8017100:	4b1a      	ldr	r3, [pc, #104]	; (801716c <Crc_MainFunction+0xa0>)
 8017102:	2202      	movs	r2, #2
 8017104:	701a      	strb	r2, [r3, #0]
			break;
 8017106:	e009      	b.n	801711c <Crc_MainFunction+0x50>
		case CRC_DEINIT_STATE:
			Crc_DeInit();
 8017108:	f7ff ffd6 	bl	80170b8 <Crc_DeInit>
			break;
 801710c:	e006      	b.n	801711c <Crc_MainFunction+0x50>
		case CRC_VERIFYUARTDATA_STATE:
			break;
		case CRC_INITCRCVALUES_STATE:
			Crc_InitCrcValuesForUart();
 801710e:	f7ff fd3d 	bl	8016b8c <Crc_InitCrcValuesForUart>
			Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 8017112:	4b16      	ldr	r3, [pc, #88]	; (801716c <Crc_MainFunction+0xa0>)
 8017114:	2201      	movs	r2, #1
 8017116:	701a      	strb	r2, [r3, #0]
			break;
 8017118:	e000      	b.n	801711c <Crc_MainFunction+0x50>
		default:
			break;
 801711a:	bf00      	nop
	}
	/* Process peripheral state. */
	switch(returnValue)
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	2b04      	cmp	r3, #4
 8017120:	d81c      	bhi.n	801715c <Crc_MainFunction+0x90>
 8017122:	a201      	add	r2, pc, #4	; (adr r2, 8017128 <Crc_MainFunction+0x5c>)
 8017124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017128:	0801713d 	.word	0x0801713d
 801712c:	08017145 	.word	0x08017145
 8017130:	0801715d 	.word	0x0801715d
 8017134:	0801714d 	.word	0x0801714d
 8017138:	08017155 	.word	0x08017155
	{
		case HAL_CRC_STATE_RESET:
			Crc_BswState = CRC_INIT_STATE;
 801713c:	4b0b      	ldr	r3, [pc, #44]	; (801716c <Crc_MainFunction+0xa0>)
 801713e:	2200      	movs	r2, #0
 8017140:	701a      	strb	r2, [r3, #0]
			break;
 8017142:	e00c      	b.n	801715e <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_READY:
			Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 8017144:	4b09      	ldr	r3, [pc, #36]	; (801716c <Crc_MainFunction+0xa0>)
 8017146:	2201      	movs	r2, #1
 8017148:	701a      	strb	r2, [r3, #0]
			break;
 801714a:	e008      	b.n	801715e <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_BUSY:
			break;
		case HAL_CRC_STATE_TIMEOUT:
			HAL_CRC_ErrorCallback(&hcrc);
 801714c:	4806      	ldr	r0, [pc, #24]	; (8017168 <Crc_MainFunction+0x9c>)
 801714e:	f7ff ff8f 	bl	8017070 <HAL_CRC_ErrorCallback>
			break;
 8017152:	e004      	b.n	801715e <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_ERROR:
			HAL_CRC_ErrorCallback(&hcrc);
 8017154:	4804      	ldr	r0, [pc, #16]	; (8017168 <Crc_MainFunction+0x9c>)
 8017156:	f7ff ff8b 	bl	8017070 <HAL_CRC_ErrorCallback>
			break;
 801715a:	e000      	b.n	801715e <Crc_MainFunction+0x92>
		default:
			break;
 801715c:	bf00      	nop
	}
}
 801715e:	bf00      	nop
 8017160:	3708      	adds	r7, #8
 8017162:	46bd      	mov	sp, r7
 8017164:	bd80      	pop	{r7, pc}
 8017166:	bf00      	nop
 8017168:	200003a4 	.word	0x200003a4
 801716c:	2000e574 	.word	0x2000e574

08017170 <EcuM_CheckForWakeupEvent>:
/***********************************************************************************
* Function: EcuM_CheckForWakeupEvent									   		   *
* Description: Checks for the wake up event and sends it forward for processing.   *
************************************************************************************/
VOID EcuM_CheckForWakeupEvent()
{
 8017170:	b580      	push	{r7, lr}
 8017172:	af00      	add	r7, sp, #0
	/* Check if power-on reset wake-up event occurred. */
	if((PWR->CSR & RCC_CSR_PORRSTF) != 0)
 8017174:	4b41      	ldr	r3, [pc, #260]	; (801727c <EcuM_CheckForWakeupEvent+0x10c>)
 8017176:	685b      	ldr	r3, [r3, #4]
 8017178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801717c:	2b00      	cmp	r3, #0
 801717e:	d00f      	beq.n	80171a0 <EcuM_CheckForWakeupEvent+0x30>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_POR);
 8017180:	2000      	movs	r0, #0
 8017182:	f000 f87f 	bl	8017284 <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_RMVF;
 8017186:	4b3e      	ldr	r3, [pc, #248]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 8017188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801718a:	4a3d      	ldr	r2, [pc, #244]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 801718c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017190:	6753      	str	r3, [r2, #116]	; 0x74
		RCC->CSR |= RCC_CSR_PORRSTF;
 8017192:	4b3b      	ldr	r3, [pc, #236]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 8017194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017196:	4a3a      	ldr	r2, [pc, #232]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 8017198:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801719c:	6753      	str	r3, [r2, #116]	; 0x74
	}
	else
	{
		/* do nothing */
	}
}
 801719e:	e06a      	b.n	8017276 <EcuM_CheckForWakeupEvent+0x106>
	else if((PWR->CSR & RCC_CSR_BORRSTF) != 0)
 80171a0:	4b36      	ldr	r3, [pc, #216]	; (801727c <EcuM_CheckForWakeupEvent+0x10c>)
 80171a2:	685b      	ldr	r3, [r3, #4]
 80171a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d00f      	beq.n	80171cc <EcuM_CheckForWakeupEvent+0x5c>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_BOR);
 80171ac:	2001      	movs	r0, #1
 80171ae:	f000 f869 	bl	8017284 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_RMVF;
 80171b2:	4b33      	ldr	r3, [pc, #204]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 80171b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80171b6:	4a32      	ldr	r2, [pc, #200]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 80171b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80171bc:	6753      	str	r3, [r2, #116]	; 0x74
		RCC->CSR |= RCC_CSR_BORRSTF;
 80171be:	4b30      	ldr	r3, [pc, #192]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 80171c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80171c2:	4a2f      	ldr	r2, [pc, #188]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 80171c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80171c8:	6753      	str	r3, [r2, #116]	; 0x74
}
 80171ca:	e054      	b.n	8017276 <EcuM_CheckForWakeupEvent+0x106>
	else if((RCC->CSR & RCC_CSR_SFTRSTF) != 0)
 80171cc:	4b2c      	ldr	r3, [pc, #176]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 80171ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80171d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d00f      	beq.n	80171f8 <EcuM_CheckForWakeupEvent+0x88>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_SOFTWARE_RESET);
 80171d8:	2002      	movs	r0, #2
 80171da:	f000 f853 	bl	8017284 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_RMVF;
 80171de:	4b28      	ldr	r3, [pc, #160]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 80171e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80171e2:	4a27      	ldr	r2, [pc, #156]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 80171e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80171e8:	6753      	str	r3, [r2, #116]	; 0x74
		RCC->CSR |= RCC_CSR_SFTRSTF;
 80171ea:	4b25      	ldr	r3, [pc, #148]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 80171ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80171ee:	4a24      	ldr	r2, [pc, #144]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 80171f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80171f4:	6753      	str	r3, [r2, #116]	; 0x74
}
 80171f6:	e03e      	b.n	8017276 <EcuM_CheckForWakeupEvent+0x106>
	else if((RCC->CSR & RCC_CSR_WWDGRSTF) != 0)
 80171f8:	4b21      	ldr	r3, [pc, #132]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 80171fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80171fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8017200:	2b00      	cmp	r3, #0
 8017202:	d00f      	beq.n	8017224 <EcuM_CheckForWakeupEvent+0xb4>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET);
 8017204:	2003      	movs	r0, #3
 8017206:	f000 f83d 	bl	8017284 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_RMVF;
 801720a:	4b1d      	ldr	r3, [pc, #116]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 801720c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801720e:	4a1c      	ldr	r2, [pc, #112]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 8017210:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017214:	6753      	str	r3, [r2, #116]	; 0x74
		RCC->CSR |= RCC_CSR_WWDGRSTF;
 8017216:	4b1a      	ldr	r3, [pc, #104]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 8017218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801721a:	4a19      	ldr	r2, [pc, #100]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 801721c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8017220:	6753      	str	r3, [r2, #116]	; 0x74
}
 8017222:	e028      	b.n	8017276 <EcuM_CheckForWakeupEvent+0x106>
	else if((RCC->CSR & RCC_CSR_LPWRRSTF) != 0)
 8017224:	4b16      	ldr	r3, [pc, #88]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 8017226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017228:	2b00      	cmp	r3, #0
 801722a:	da0f      	bge.n	801724c <EcuM_CheckForWakeupEvent+0xdc>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_LOWPOWER_RESET);
 801722c:	2004      	movs	r0, #4
 801722e:	f000 f829 	bl	8017284 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_RMVF;
 8017232:	4b13      	ldr	r3, [pc, #76]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 8017234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017236:	4a12      	ldr	r2, [pc, #72]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 8017238:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801723c:	6753      	str	r3, [r2, #116]	; 0x74
		RCC->CSR |= RCC_CSR_LPWRRSTF;
 801723e:	4b10      	ldr	r3, [pc, #64]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 8017240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017242:	4a0f      	ldr	r2, [pc, #60]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 8017244:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8017248:	6753      	str	r3, [r2, #116]	; 0x74
}
 801724a:	e014      	b.n	8017276 <EcuM_CheckForWakeupEvent+0x106>
	else if((RCC->CSR & RCC_CSR_PADRSTF) != 0)
 801724c:	4b0c      	ldr	r3, [pc, #48]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 801724e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017250:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017254:	2b00      	cmp	r3, #0
 8017256:	d00e      	beq.n	8017276 <EcuM_CheckForWakeupEvent+0x106>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_BUTTON_RESET);
 8017258:	2005      	movs	r0, #5
 801725a:	f000 f813 	bl	8017284 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_RMVF;
 801725e:	4b08      	ldr	r3, [pc, #32]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 8017260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017262:	4a07      	ldr	r2, [pc, #28]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 8017264:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017268:	6753      	str	r3, [r2, #116]	; 0x74
		RCC->CSR |= RCC_CSR_PADRSTF;
 801726a:	4b05      	ldr	r3, [pc, #20]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 801726c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801726e:	4a04      	ldr	r2, [pc, #16]	; (8017280 <EcuM_CheckForWakeupEvent+0x110>)
 8017270:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8017274:	6753      	str	r3, [r2, #116]	; 0x74
}
 8017276:	bf00      	nop
 8017278:	bd80      	pop	{r7, pc}
 801727a:	bf00      	nop
 801727c:	40007000 	.word	0x40007000
 8017280:	40023800 	.word	0x40023800

08017284 <EcuM_SetWakeupSource>:
/***********************************************************************************
* Function: EcuM_SetWakeupSource									   		   	   *
* Description: Sets the wake up source received.			 		   			   *
************************************************************************************/
VOID EcuM_SetWakeupSource(uint32 wakeupSource)
{
 8017284:	b480      	push	{r7}
 8017286:	b083      	sub	sp, #12
 8017288:	af00      	add	r7, sp, #0
 801728a:	6078      	str	r0, [r7, #4]
	/* If wake-up source is valid. */
	if(wakeupSource != NULL_PTR)
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	2b00      	cmp	r3, #0
 8017290:	d003      	beq.n	801729a <EcuM_SetWakeupSource+0x16>
	{
		/* Store the wake-up event. */
		EcuM_GlobalState = wakeupSource;
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	b2da      	uxtb	r2, r3
 8017296:	4b04      	ldr	r3, [pc, #16]	; (80172a8 <EcuM_SetWakeupSource+0x24>)
 8017298:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 801729a:	bf00      	nop
 801729c:	370c      	adds	r7, #12
 801729e:	46bd      	mov	sp, r7
 80172a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172a4:	4770      	bx	lr
 80172a6:	bf00      	nop
 80172a8:	2000e635 	.word	0x2000e635

080172ac <EcuM_ProcessWakeupEvent>:
/***********************************************************************************
* Function: EcuM_ProcessWakeupEvent									   		       *
* Description: Sends forward the wake up event.							 		   *
************************************************************************************/
VOID EcuM_ProcessWakeupEvent()
{
 80172ac:	b580      	push	{r7, lr}
 80172ae:	b082      	sub	sp, #8
 80172b0:	af00      	add	r7, sp, #0
	/* Store the wake-up event into local variable. */
	uint8 localWakeupEvent = EcuM_GlobalState;
 80172b2:	4b22      	ldr	r3, [pc, #136]	; (801733c <EcuM_ProcessWakeupEvent+0x90>)
 80172b4:	781b      	ldrb	r3, [r3, #0]
 80172b6:	71fb      	strb	r3, [r7, #7]
	/* Set the system fault for the respective wake-up event. */
	switch(localWakeupEvent)
 80172b8:	79fb      	ldrb	r3, [r7, #7]
 80172ba:	2b05      	cmp	r3, #5
 80172bc:	d838      	bhi.n	8017330 <EcuM_ProcessWakeupEvent+0x84>
 80172be:	a201      	add	r2, pc, #4	; (adr r2, 80172c4 <EcuM_ProcessWakeupEvent+0x18>)
 80172c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172c4:	080172dd 	.word	0x080172dd
 80172c8:	080172eb 	.word	0x080172eb
 80172cc:	080172f9 	.word	0x080172f9
 80172d0:	08017307 	.word	0x08017307
 80172d4:	08017315 	.word	0x08017315
 80172d8:	08017323 	.word	0x08017323
	{
		case ECUM_WAKEUPSOURCE_POR:
			EcuM_GlobalState = 255;
 80172dc:	4b17      	ldr	r3, [pc, #92]	; (801733c <EcuM_ProcessWakeupEvent+0x90>)
 80172de:	22ff      	movs	r2, #255	; 0xff
 80172e0:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_POR);
 80172e2:	2000      	movs	r0, #0
 80172e4:	f000 f9c4 	bl	8017670 <SystemManager_SetFault>
			break;
 80172e8:	e023      	b.n	8017332 <EcuM_ProcessWakeupEvent+0x86>
		case ECUM_WAKEUPSOURCE_BOR:
			EcuM_GlobalState = 255;
 80172ea:	4b14      	ldr	r3, [pc, #80]	; (801733c <EcuM_ProcessWakeupEvent+0x90>)
 80172ec:	22ff      	movs	r2, #255	; 0xff
 80172ee:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_BOR);
 80172f0:	2001      	movs	r0, #1
 80172f2:	f000 f9bd 	bl	8017670 <SystemManager_SetFault>
			break;
 80172f6:	e01c      	b.n	8017332 <EcuM_ProcessWakeupEvent+0x86>
		case ECUM_WAKEUPSOURCE_SOFTWARE_RESET:
			EcuM_GlobalState = 255;
 80172f8:	4b10      	ldr	r3, [pc, #64]	; (801733c <EcuM_ProcessWakeupEvent+0x90>)
 80172fa:	22ff      	movs	r2, #255	; 0xff
 80172fc:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_SOFTWARE_RESET);
 80172fe:	2002      	movs	r0, #2
 8017300:	f000 f9b6 	bl	8017670 <SystemManager_SetFault>
			break;
 8017304:	e015      	b.n	8017332 <EcuM_ProcessWakeupEvent+0x86>
		case ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET:
			EcuM_GlobalState = 255;
 8017306:	4b0d      	ldr	r3, [pc, #52]	; (801733c <EcuM_ProcessWakeupEvent+0x90>)
 8017308:	22ff      	movs	r2, #255	; 0xff
 801730a:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET);
 801730c:	2003      	movs	r0, #3
 801730e:	f000 f9af 	bl	8017670 <SystemManager_SetFault>
			break;
 8017312:	e00e      	b.n	8017332 <EcuM_ProcessWakeupEvent+0x86>
		case ECUM_WAKEUPSOURCE_LOWPOWER_RESET:
			EcuM_GlobalState = 255;
 8017314:	4b09      	ldr	r3, [pc, #36]	; (801733c <EcuM_ProcessWakeupEvent+0x90>)
 8017316:	22ff      	movs	r2, #255	; 0xff
 8017318:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_LOWPOWER_RESET);
 801731a:	2004      	movs	r0, #4
 801731c:	f000 f9a8 	bl	8017670 <SystemManager_SetFault>
			break;
 8017320:	e007      	b.n	8017332 <EcuM_ProcessWakeupEvent+0x86>
		case ECUM_WAKEUPSOURCE_BUTTON_RESET:
			EcuM_GlobalState = 255;
 8017322:	4b06      	ldr	r3, [pc, #24]	; (801733c <EcuM_ProcessWakeupEvent+0x90>)
 8017324:	22ff      	movs	r2, #255	; 0xff
 8017326:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_BUTTON_RESET);
 8017328:	2005      	movs	r0, #5
 801732a:	f000 f9a1 	bl	8017670 <SystemManager_SetFault>
			break;
 801732e:	e000      	b.n	8017332 <EcuM_ProcessWakeupEvent+0x86>
		default:
			break;
 8017330:	bf00      	nop
	}
}
 8017332:	bf00      	nop
 8017334:	3708      	adds	r7, #8
 8017336:	46bd      	mov	sp, r7
 8017338:	bd80      	pop	{r7, pc}
 801733a:	bf00      	nop
 801733c:	2000e635 	.word	0x2000e635

08017340 <EcuM_DriverInit>:
/***********************************************************************************
* Function: EcuM_DriverInit									   		               *
* Description: Initialize the drivers.			 		   						   *
************************************************************************************/
StdReturnType EcuM_DriverInit()
{
 8017340:	b580      	push	{r7, lr}
 8017342:	af00      	add	r7, sp, #0
	Port_Init();
 8017344:	f7f9 fc96 	bl	8010c74 <Port_Init>
	Watchdog_Init();
 8017348:	f000 fb02 	bl	8017950 <Watchdog_Init>
	MX_DMA_Init();
 801734c:	f7ee fd7a 	bl	8005e44 <MX_DMA_Init>
	Spi_Init();
 8017350:	f7fa fa0c 	bl	801176c <Spi_Init>
	CanOverSpi_Init();
 8017354:	f7f9 fc95 	bl	8010c82 <CanOverSpi_Init>
	Can_Init();
 8017358:	f7ec fe90 	bl	800407c <Can_Init>
	Tim_Init(TIMER_TWO);
 801735c:	2002      	movs	r0, #2
 801735e:	f7fa fc25 	bl	8011bac <Tim_Init>
	Tim_Init(TIMER_THREE);
 8017362:	2003      	movs	r0, #3
 8017364:	f7fa fc22 	bl	8011bac <Tim_Init>
	Tim_Init(TIMER_FOUR);
 8017368:	2004      	movs	r0, #4
 801736a:	f7fa fc1f 	bl	8011bac <Tim_Init>
	Tim_Init(TIMER_FIVE);
 801736e:	2005      	movs	r0, #5
 8017370:	f7fa fc1c 	bl	8011bac <Tim_Init>
	I2c_Init(I2C_CHANNEL_ONE);
 8017374:	2001      	movs	r0, #1
 8017376:	f7ed fead 	bl	80050d4 <I2c_Init>
	I2c_Init(I2C_CHANNEL_THREE);
 801737a:	2003      	movs	r0, #3
 801737c:	f7ed feaa 	bl	80050d4 <I2c_Init>
	Dem_Init();
 8017380:	f7f0 fa35 	bl	80077ee <Dem_Init>
	//Adc_Init();
	MX_ADC1_Init();
 8017384:	f7ee fb2e 	bl	80059e4 <MX_ADC1_Init>
	HAL_ADC_Start_DMA(&hadc1, Adc_ChannelOne_Buffer, ADC_BUFFER_LENGTH);
 8017388:	220e      	movs	r2, #14
 801738a:	4911      	ldr	r1, [pc, #68]	; (80173d0 <EcuM_DriverInit+0x90>)
 801738c:	4811      	ldr	r0, [pc, #68]	; (80173d4 <EcuM_DriverInit+0x94>)
 801738e:	f7f0 fed1 	bl	8008134 <HAL_ADC_Start_DMA>
	Crc_Init();
 8017392:	f7ff fe79 	bl	8017088 <Crc_Init>
	Uart_Init();
 8017396:	f7ee f999 	bl	80056cc <Uart_Init>
	Rte_Call_Btc_P_BtcPort_Btc_Init();
 801739a:	f7e9 ff9f 	bl	80012dc <Btc_Init>
	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_Init();
 801739e:	f7ec fc9b 	bl	8003cd8 <SenCtrl_Init>
	Rte_Call_DiagCtrl_P_DiagCtrlPort_DiagCtrl_Init();
 80173a2:	f7ea fe85 	bl	80020b0 <DiagCtrl_Init>
	Rte_Call_CenLoc_P_CenLocPort_CenLoc_Init();
 80173a6:	f7ea fbd9 	bl	8001b5c <CenLoc_Init>
	Rte_Call_ExtLights_P_ExtLightsPort_ExtLights_Init();
 80173aa:	f7eb fc63 	bl	8002c74 <ExtLights_Init>
	Rte_Call_Hvac_P_HvacPort_Hvac_Init();
 80173ae:	f7eb fcd9 	bl	8002d64 <Hvac_Init>
	Rte_Call_IntLights_P_IntLightsPort_IntLights_Init();
 80173b2:	f7ec f94b 	bl	800364c <IntLights_Init>
	Rte_Call_Pdc_P_PdcPort_Pdc_Init();
 80173b6:	f7ec f95b 	bl	8003670 <Pdc_Init>
	Rte_Call_SecAlm_P_SecAlmPort_SecAlm_Init();
 80173ba:	f7ec fc29 	bl	8003c10 <SecAlm_Init>
	MX_NVIC_Init();
 80173be:	f000 f9a7 	bl	8017710 <MX_NVIC_Init>
	EcuM_BswState = ECUM_CHECKFORWAKEUP_STATE;
 80173c2:	4b05      	ldr	r3, [pc, #20]	; (80173d8 <EcuM_DriverInit+0x98>)
 80173c4:	2201      	movs	r2, #1
 80173c6:	701a      	strb	r2, [r3, #0]
	return E_OK;
 80173c8:	2300      	movs	r3, #0
}
 80173ca:	4618      	mov	r0, r3
 80173cc:	bd80      	pop	{r7, pc}
 80173ce:	bf00      	nop
 80173d0:	20000c8c 	.word	0x20000c8c
 80173d4:	200002e0 	.word	0x200002e0
 80173d8:	2000e634 	.word	0x2000e634

080173dc <EcuM_DriverDeInit>:
/***********************************************************************************
* Function: EcuM_DriverDeInit									   		           *
* Description: De-initialize the drivers.			 		                       *
************************************************************************************/
StdReturnType EcuM_DriverDeInit()
{
 80173dc:	b580      	push	{r7, lr}
 80173de:	af00      	add	r7, sp, #0
	Rte_Call_Btc_P_BtcPort_Btc_DeInit();
 80173e0:	f7e9 fcd5 	bl	8000d8e <Btc_DeInit>
	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_DeInit();
 80173e4:	f7ec fc98 	bl	8003d18 <SenCtrl_DeInit>
	Rte_Call_DiagCtrl_P_DiagCtrlPort_DiagCtrl_DeInit();
 80173e8:	f7ea fe7a 	bl	80020e0 <DiagCtrl_DeInit>
	Rte_Call_CenLoc_P_CenLocPort_CenLoc_DeInit();
 80173ec:	f7ea fbec 	bl	8001bc8 <CenLoc_DeInit>
	Rte_Call_ExtLights_P_ExtLightsPort_ExtLights_DeInit();
 80173f0:	f7eb fb42 	bl	8002a78 <ExtLights_DeInit>
	Rte_Call_Hvac_P_HvacPort_Hvac_DeInit();
 80173f4:	f7eb fd0a 	bl	8002e0c <Hvac_DeInit>
	Rte_Call_IntLights_P_IntLightsPort_IntLights_DeInit();
 80173f8:	f7ec f8d6 	bl	80035a8 <IntLights_DeInit>
	Rte_Call_Pdc_P_PdcPort_Pdc_DeInit();
 80173fc:	f7ec f95a 	bl	80036b4 <Pdc_DeInit>
	Rte_Call_SecAlm_P_SecAlmPort_SecAlm_DeInit();
 8017400:	f7ec fb64 	bl	8003acc <SecAlm_DeInit>
	I2cLcd_DeInit();
 8017404:	f7ee f8a6 	bl	8005554 <I2cLcd_DeInit>
	Adc_DeInit();
 8017408:	f7f9 faea 	bl	80109e0 <Adc_DeInit>
	Tim_DeInit(TIMER_TWO);
 801740c:	2002      	movs	r0, #2
 801740e:	f7fa fdeb 	bl	8011fe8 <Tim_DeInit>
	Tim_DeInit(TIMER_THREE);
 8017412:	2003      	movs	r0, #3
 8017414:	f7fa fde8 	bl	8011fe8 <Tim_DeInit>
	Tim_DeInit(TIMER_FOUR);
 8017418:	2004      	movs	r0, #4
 801741a:	f7fa fde5 	bl	8011fe8 <Tim_DeInit>
	Tim_DeInit(TIMER_FIVE);
 801741e:	2005      	movs	r0, #5
 8017420:	f7fa fde2 	bl	8011fe8 <Tim_DeInit>
	Uart_DeInit();
 8017424:	f7ee f97e 	bl	8005724 <Uart_DeInit>
	Crc_DeInit();
 8017428:	f7ff fe46 	bl	80170b8 <Crc_DeInit>
	I2cExtEeprom_DeInit();
 801742c:	f7ed fbef 	bl	8004c0e <I2cExtEeprom_DeInit>
	I2c_DeInit(I2C_CHANNEL_ONE);
 8017430:	2001      	movs	r0, #1
 8017432:	f7ed feb7 	bl	80051a4 <I2c_DeInit>
	I2c_DeInit(I2C_CHANNEL_THREE);
 8017436:	2003      	movs	r0, #3
 8017438:	f7ed feb4 	bl	80051a4 <I2c_DeInit>
	Dem_DeInit();
 801743c:	f7f0 f9df 	bl	80077fe <Dem_DeInit>
	Spi_DeInit();
 8017440:	f7fa f9ce 	bl	80117e0 <Spi_DeInit>
	Can_DeInit();
 8017444:	f7ec fe26 	bl	8004094 <Can_DeInit>
	SystemManager_DeInit();
 8017448:	f000 f90c 	bl	8017664 <SystemManager_DeInit>
	return E_OK;
 801744c:	2300      	movs	r3, #0
}
 801744e:	4618      	mov	r0, r3
 8017450:	bd80      	pop	{r7, pc}
	...

08017454 <EcuM_MainFunction>:
/***********************************************************************************
* Function: EcuM_MainFunction									   		           *
* Description: Electronic control unit manager main function.			 		   *
************************************************************************************/
VOID EcuM_MainFunction()
{
 8017454:	b580      	push	{r7, lr}
 8017456:	af00      	add	r7, sp, #0
	switch(EcuM_BswState)
 8017458:	4b12      	ldr	r3, [pc, #72]	; (80174a4 <EcuM_MainFunction+0x50>)
 801745a:	781b      	ldrb	r3, [r3, #0]
 801745c:	2b03      	cmp	r3, #3
 801745e:	d81d      	bhi.n	801749c <EcuM_MainFunction+0x48>
 8017460:	a201      	add	r2, pc, #4	; (adr r2, 8017468 <EcuM_MainFunction+0x14>)
 8017462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017466:	bf00      	nop
 8017468:	08017479 	.word	0x08017479
 801746c:	08017485 	.word	0x08017485
 8017470:	08017491 	.word	0x08017491
 8017474:	0801747f 	.word	0x0801747f
	{
		case ECUM_INIT_STATE:
			EcuM_DriverInit();
 8017478:	f7ff ff62 	bl	8017340 <EcuM_DriverInit>
			break;
 801747c:	e00f      	b.n	801749e <EcuM_MainFunction+0x4a>
		case ECUM_DEINIT_STATE:
			EcuM_DriverDeInit();
 801747e:	f7ff ffad 	bl	80173dc <EcuM_DriverDeInit>
			break;
 8017482:	e00c      	b.n	801749e <EcuM_MainFunction+0x4a>
		case ECUM_CHECKFORWAKEUP_STATE:
			EcuM_CheckForWakeupEvent();
 8017484:	f7ff fe74 	bl	8017170 <EcuM_CheckForWakeupEvent>
			EcuM_BswState = ECUM_PROCESSWAKEUP_STATE;
 8017488:	4b06      	ldr	r3, [pc, #24]	; (80174a4 <EcuM_MainFunction+0x50>)
 801748a:	2202      	movs	r2, #2
 801748c:	701a      	strb	r2, [r3, #0]
			break;
 801748e:	e006      	b.n	801749e <EcuM_MainFunction+0x4a>
		case ECUM_PROCESSWAKEUP_STATE:
			EcuM_ProcessWakeupEvent();
 8017490:	f7ff ff0c 	bl	80172ac <EcuM_ProcessWakeupEvent>
			EcuM_BswState = ECUM_CHECKFORWAKEUP_STATE;
 8017494:	4b03      	ldr	r3, [pc, #12]	; (80174a4 <EcuM_MainFunction+0x50>)
 8017496:	2201      	movs	r2, #1
 8017498:	701a      	strb	r2, [r3, #0]
			break;
 801749a:	e000      	b.n	801749e <EcuM_MainFunction+0x4a>
		default:
			break;
 801749c:	bf00      	nop
	}
}
 801749e:	bf00      	nop
 80174a0:	bd80      	pop	{r7, pc}
 80174a2:	bf00      	nop
 80174a4:	2000e634 	.word	0x2000e634

080174a8 <SystemManager_ProcessFault>:
/***********************************************************************************
* Function: SystemManager_ProcessFault										       *
* Description: Initialize the system.  		   									   *
************************************************************************************/
VOID SystemManager_ProcessFault()
{
 80174a8:	b580      	push	{r7, lr}
 80174aa:	b082      	sub	sp, #8
 80174ac:	af00      	add	r7, sp, #0
	for(uint8 idx = STD_LOW ; idx < 49; idx++)
 80174ae:	2300      	movs	r3, #0
 80174b0:	71fb      	strb	r3, [r7, #7]
 80174b2:	e0c3      	b.n	801763c <SystemManager_ProcessFault+0x194>
	{
		if(SystemManager_Fault[idx] != STD_LOW)
 80174b4:	79fb      	ldrb	r3, [r7, #7]
 80174b6:	4a66      	ldr	r2, [pc, #408]	; (8017650 <SystemManager_ProcessFault+0x1a8>)
 80174b8:	5cd3      	ldrb	r3, [r2, r3]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	f000 80bb 	beq.w	8017636 <SystemManager_ProcessFault+0x18e>
		{
			if(idx == POWER_ON_RESET)
 80174c0:	79fb      	ldrb	r3, [r7, #7]
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	f000 80b7 	beq.w	8017636 <SystemManager_ProcessFault+0x18e>
			{
				/* do nothing */
			}
			else if(idx == BROWN_OUT_RESET ||
 80174c8:	79fb      	ldrb	r3, [r7, #7]
 80174ca:	2b01      	cmp	r3, #1
 80174cc:	d017      	beq.n	80174fe <SystemManager_ProcessFault+0x56>
 80174ce:	79fb      	ldrb	r3, [r7, #7]
 80174d0:	2b04      	cmp	r3, #4
 80174d2:	d014      	beq.n	80174fe <SystemManager_ProcessFault+0x56>
					idx == LOW_POWER_RESET ||
 80174d4:	79fb      	ldrb	r3, [r7, #7]
 80174d6:	2b05      	cmp	r3, #5
 80174d8:	d011      	beq.n	80174fe <SystemManager_ProcessFault+0x56>
					idx == BUTTON_RESET ||
 80174da:	79fb      	ldrb	r3, [r7, #7]
 80174dc:	2b06      	cmp	r3, #6
 80174de:	d00e      	beq.n	80174fe <SystemManager_ProcessFault+0x56>
					idx == HARDWARE_RESET ||
 80174e0:	79fb      	ldrb	r3, [r7, #7]
 80174e2:	2b07      	cmp	r3, #7
 80174e4:	d00b      	beq.n	80174fe <SystemManager_ProcessFault+0x56>
					idx == FLASH_FAULT_RESET ||
 80174e6:	79fb      	ldrb	r3, [r7, #7]
 80174e8:	2b08      	cmp	r3, #8
 80174ea:	d008      	beq.n	80174fe <SystemManager_ProcessFault+0x56>
					idx == NMI_RESET ||
 80174ec:	79fb      	ldrb	r3, [r7, #7]
 80174ee:	2b09      	cmp	r3, #9
 80174f0:	d005      	beq.n	80174fe <SystemManager_ProcessFault+0x56>
					idx == MEMORY_FAULT_RESET ||
 80174f2:	79fb      	ldrb	r3, [r7, #7]
 80174f4:	2b0a      	cmp	r3, #10
 80174f6:	d002      	beq.n	80174fe <SystemManager_ProcessFault+0x56>
					idx == USAGE_FAULT_RESET ||
 80174f8:	79fb      	ldrb	r3, [r7, #7]
 80174fa:	2b0b      	cmp	r3, #11
 80174fc:	d10d      	bne.n	801751a <SystemManager_ProcessFault+0x72>
					idx == BUS_FAULT_RESET)
			{
				if(SystemManager_Fault[idx] >= 1)
 80174fe:	79fb      	ldrb	r3, [r7, #7]
 8017500:	4a53      	ldr	r2, [pc, #332]	; (8017650 <SystemManager_ProcessFault+0x1a8>)
 8017502:	5cd3      	ldrb	r3, [r2, r3]
 8017504:	2b00      	cmp	r3, #0
 8017506:	f000 8096 	beq.w	8017636 <SystemManager_ProcessFault+0x18e>
				{
					SystemManager_Fault[idx] = STD_LOW;
 801750a:	79fb      	ldrb	r3, [r7, #7]
 801750c:	4a50      	ldr	r2, [pc, #320]	; (8017650 <SystemManager_ProcessFault+0x1a8>)
 801750e:	2100      	movs	r1, #0
 8017510:	54d1      	strb	r1, [r2, r3]
					Dem_ReceiveFault(HARDWARE_RESET_DTC_CODE);
 8017512:	2056      	movs	r0, #86	; 0x56
 8017514:	f7f0 fa26 	bl	8007964 <Dem_ReceiveFault>
				if(SystemManager_Fault[idx] >= 1)
 8017518:	e08d      	b.n	8017636 <SystemManager_ProcessFault+0x18e>
				else
				{
					/* do nothing */
				}
			}
			else if(idx == SOFTWARE_RESET ||
 801751a:	79fb      	ldrb	r3, [r7, #7]
 801751c:	2b02      	cmp	r3, #2
 801751e:	d008      	beq.n	8017532 <SystemManager_ProcessFault+0x8a>
 8017520:	79fb      	ldrb	r3, [r7, #7]
 8017522:	2b03      	cmp	r3, #3
 8017524:	d005      	beq.n	8017532 <SystemManager_ProcessFault+0x8a>
					idx == WATCHDOG_RESET ||
 8017526:	79fb      	ldrb	r3, [r7, #7]
 8017528:	2b0c      	cmp	r3, #12
 801752a:	d002      	beq.n	8017532 <SystemManager_ProcessFault+0x8a>
					idx == STACK_OVERFLOW_RESET ||
 801752c:	79fb      	ldrb	r3, [r7, #7]
 801752e:	2b0d      	cmp	r3, #13
 8017530:	d10c      	bne.n	801754c <SystemManager_ProcessFault+0xa4>
					idx == MALLOC_FAILED_RESET)
			{
				if(SystemManager_Fault[idx] >= 3)
 8017532:	79fb      	ldrb	r3, [r7, #7]
 8017534:	4a46      	ldr	r2, [pc, #280]	; (8017650 <SystemManager_ProcessFault+0x1a8>)
 8017536:	5cd3      	ldrb	r3, [r2, r3]
 8017538:	2b02      	cmp	r3, #2
 801753a:	d97c      	bls.n	8017636 <SystemManager_ProcessFault+0x18e>
				{
					SystemManager_Fault[idx] = STD_LOW;
 801753c:	79fb      	ldrb	r3, [r7, #7]
 801753e:	4a44      	ldr	r2, [pc, #272]	; (8017650 <SystemManager_ProcessFault+0x1a8>)
 8017540:	2100      	movs	r1, #0
 8017542:	54d1      	strb	r1, [r2, r3]
					Dem_ReceiveFault(SOFTWARE_RESET_DTC_CODE);
 8017544:	2035      	movs	r0, #53	; 0x35
 8017546:	f7f0 fa0d 	bl	8007964 <Dem_ReceiveFault>
				if(SystemManager_Fault[idx] >= 3)
 801754a:	e074      	b.n	8017636 <SystemManager_ProcessFault+0x18e>
				else
				{
					/* do nothing */
				}
			}
			else if(idx == ADC_ERROR_INTERNAL ||
 801754c:	79fb      	ldrb	r3, [r7, #7]
 801754e:	2b0e      	cmp	r3, #14
 8017550:	d065      	beq.n	801761e <SystemManager_ProcessFault+0x176>
 8017552:	79fb      	ldrb	r3, [r7, #7]
 8017554:	2b0f      	cmp	r3, #15
 8017556:	d062      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == ADC_ERROR_OVR ||
 8017558:	79fb      	ldrb	r3, [r7, #7]
 801755a:	2b10      	cmp	r3, #16
 801755c:	d05f      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == ADC_ERROR_DMA ||
 801755e:	79fb      	ldrb	r3, [r7, #7]
 8017560:	2b11      	cmp	r3, #17
 8017562:	d05c      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == UART_ERROR_PE ||
 8017564:	79fb      	ldrb	r3, [r7, #7]
 8017566:	2b12      	cmp	r3, #18
 8017568:	d059      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == UART_ERROR_NE ||
 801756a:	79fb      	ldrb	r3, [r7, #7]
 801756c:	2b13      	cmp	r3, #19
 801756e:	d056      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == UART_ERROR_FE ||
 8017570:	79fb      	ldrb	r3, [r7, #7]
 8017572:	2b14      	cmp	r3, #20
 8017574:	d053      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == UART_ERROR_ORE ||
 8017576:	79fb      	ldrb	r3, [r7, #7]
 8017578:	2b15      	cmp	r3, #21
 801757a:	d050      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == UART_ERROR_DMA ||
 801757c:	79fb      	ldrb	r3, [r7, #7]
 801757e:	2b16      	cmp	r3, #22
 8017580:	d04d      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == TIMER2_ERROR ||
 8017582:	79fb      	ldrb	r3, [r7, #7]
 8017584:	2b17      	cmp	r3, #23
 8017586:	d04a      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == TIMER3_ERROR ||
 8017588:	79fb      	ldrb	r3, [r7, #7]
 801758a:	2b18      	cmp	r3, #24
 801758c:	d047      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == TIMER4_ERROR ||
 801758e:	79fb      	ldrb	r3, [r7, #7]
 8017590:	2b19      	cmp	r3, #25
 8017592:	d044      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == TIMER5_ERROR ||
 8017594:	79fb      	ldrb	r3, [r7, #7]
 8017596:	2b1a      	cmp	r3, #26
 8017598:	d041      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == SPI_ERROR_MODF ||
 801759a:	79fb      	ldrb	r3, [r7, #7]
 801759c:	2b1b      	cmp	r3, #27
 801759e:	d03e      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == SPI_ERROR_FRE ||
 80175a0:	79fb      	ldrb	r3, [r7, #7]
 80175a2:	2b1c      	cmp	r3, #28
 80175a4:	d03b      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == SPI_ERROR_CRC ||
 80175a6:	79fb      	ldrb	r3, [r7, #7]
 80175a8:	2b1d      	cmp	r3, #29
 80175aa:	d038      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == SPI_ERROR_OVR ||
 80175ac:	79fb      	ldrb	r3, [r7, #7]
 80175ae:	2b1e      	cmp	r3, #30
 80175b0:	d035      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == SPI_ERROR_DMA ||
 80175b2:	79fb      	ldrb	r3, [r7, #7]
 80175b4:	2b1f      	cmp	r3, #31
 80175b6:	d032      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == SPI_ERROR_FLAG ||
 80175b8:	79fb      	ldrb	r3, [r7, #7]
 80175ba:	2b20      	cmp	r3, #32
 80175bc:	d02f      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == SPI_ERROR_ABORT ||
 80175be:	79fb      	ldrb	r3, [r7, #7]
 80175c0:	2b21      	cmp	r3, #33	; 0x21
 80175c2:	d02c      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == I2C_ERROR_BERR_ONE ||
 80175c4:	79fb      	ldrb	r3, [r7, #7]
 80175c6:	2b22      	cmp	r3, #34	; 0x22
 80175c8:	d029      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == I2C_ERROR_ARLO_ONE ||
 80175ca:	79fb      	ldrb	r3, [r7, #7]
 80175cc:	2b23      	cmp	r3, #35	; 0x23
 80175ce:	d026      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == I2C_ERROR_AF_ONE ||
 80175d0:	79fb      	ldrb	r3, [r7, #7]
 80175d2:	2b24      	cmp	r3, #36	; 0x24
 80175d4:	d023      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == I2C_ERROR_OVR_ONE ||
 80175d6:	79fb      	ldrb	r3, [r7, #7]
 80175d8:	2b25      	cmp	r3, #37	; 0x25
 80175da:	d020      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == I2C_ERROR_DMA_ONE ||
 80175dc:	79fb      	ldrb	r3, [r7, #7]
 80175de:	2b26      	cmp	r3, #38	; 0x26
 80175e0:	d01d      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == I2C_ERROR_TIMEOUT_ONE ||
 80175e2:	79fb      	ldrb	r3, [r7, #7]
 80175e4:	2b27      	cmp	r3, #39	; 0x27
 80175e6:	d01a      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == I2C_ERROR_SIZE_ONE ||
 80175e8:	79fb      	ldrb	r3, [r7, #7]
 80175ea:	2b28      	cmp	r3, #40	; 0x28
 80175ec:	d017      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == I2C_ERROR_DMA_PARAM_ONE ||
 80175ee:	79fb      	ldrb	r3, [r7, #7]
 80175f0:	2b29      	cmp	r3, #41	; 0x29
 80175f2:	d014      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == I2C_ERROR_BERR_THREE ||
 80175f4:	79fb      	ldrb	r3, [r7, #7]
 80175f6:	2b2a      	cmp	r3, #42	; 0x2a
 80175f8:	d011      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == I2C_ERROR_ARLO_THREE ||
 80175fa:	79fb      	ldrb	r3, [r7, #7]
 80175fc:	2b2b      	cmp	r3, #43	; 0x2b
 80175fe:	d00e      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == I2C_ERROR_AF_THREE ||
 8017600:	79fb      	ldrb	r3, [r7, #7]
 8017602:	2b2c      	cmp	r3, #44	; 0x2c
 8017604:	d00b      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == I2C_ERROR_OVR_THREE ||
 8017606:	79fb      	ldrb	r3, [r7, #7]
 8017608:	2b2d      	cmp	r3, #45	; 0x2d
 801760a:	d008      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == I2C_ERROR_DMA_THREE ||
 801760c:	79fb      	ldrb	r3, [r7, #7]
 801760e:	2b2e      	cmp	r3, #46	; 0x2e
 8017610:	d005      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == I2C_ERROR_TIMEOUT_THREE ||
 8017612:	79fb      	ldrb	r3, [r7, #7]
 8017614:	2b2f      	cmp	r3, #47	; 0x2f
 8017616:	d002      	beq.n	801761e <SystemManager_ProcessFault+0x176>
					idx == I2C_ERROR_SIZE_THREE ||
 8017618:	79fb      	ldrb	r3, [r7, #7]
 801761a:	2b30      	cmp	r3, #48	; 0x30
 801761c:	d10b      	bne.n	8017636 <SystemManager_ProcessFault+0x18e>
					idx == I2C_ERROR_DMA_PARAM_THREE)
			{
				if(SystemManager_Fault[idx] >= 8)
 801761e:	79fb      	ldrb	r3, [r7, #7]
 8017620:	4a0b      	ldr	r2, [pc, #44]	; (8017650 <SystemManager_ProcessFault+0x1a8>)
 8017622:	5cd3      	ldrb	r3, [r2, r3]
 8017624:	2b07      	cmp	r3, #7
 8017626:	d906      	bls.n	8017636 <SystemManager_ProcessFault+0x18e>
				{
					SystemManager_Fault[idx] = STD_LOW;
 8017628:	79fb      	ldrb	r3, [r7, #7]
 801762a:	4a09      	ldr	r2, [pc, #36]	; (8017650 <SystemManager_ProcessFault+0x1a8>)
 801762c:	2100      	movs	r1, #0
 801762e:	54d1      	strb	r1, [r2, r3]
					Dem_ReceiveFault(PERIPHERAL_ERROR_DTC_CODE);
 8017630:	2099      	movs	r0, #153	; 0x99
 8017632:	f7f0 f997 	bl	8007964 <Dem_ReceiveFault>
	for(uint8 idx = STD_LOW ; idx < 49; idx++)
 8017636:	79fb      	ldrb	r3, [r7, #7]
 8017638:	3301      	adds	r3, #1
 801763a:	71fb      	strb	r3, [r7, #7]
 801763c:	79fb      	ldrb	r3, [r7, #7]
 801763e:	2b30      	cmp	r3, #48	; 0x30
 8017640:	f67f af38 	bls.w	80174b4 <SystemManager_ProcessFault+0xc>
		else
		{
			/* do nothing */
		}
	}
}
 8017644:	bf00      	nop
 8017646:	bf00      	nop
 8017648:	3708      	adds	r7, #8
 801764a:	46bd      	mov	sp, r7
 801764c:	bd80      	pop	{r7, pc}
 801764e:	bf00      	nop
 8017650:	2000e638 	.word	0x2000e638

08017654 <SystemManager_Init>:
/***********************************************************************************
* Function: SystemManager_Init													   *
* Description: Initialize the system.  		   									   *
************************************************************************************/
VOID SystemManager_Init()
{
 8017654:	b580      	push	{r7, lr}
 8017656:	af00      	add	r7, sp, #0
	/* Perform system initialization sequence. */
	HAL_Init();
 8017658:	f7f0 fb1c 	bl	8007c94 <HAL_Init>
	SystemClock_Config();
 801765c:	f000 f8fc 	bl	8017858 <SystemClock_Config>
}
 8017660:	bf00      	nop
 8017662:	bd80      	pop	{r7, pc}

08017664 <SystemManager_DeInit>:
/***********************************************************************************
* Function: SystemManager_DeInit												   *
* Description: De-initialize the system.  		   								   *
************************************************************************************/
VOID SystemManager_DeInit()
{
 8017664:	b580      	push	{r7, lr}
 8017666:	af00      	add	r7, sp, #0
	HAL_DeInit();
 8017668:	f7f0 fb36 	bl	8007cd8 <HAL_DeInit>
}
 801766c:	bf00      	nop
 801766e:	bd80      	pop	{r7, pc}

08017670 <SystemManager_SetFault>:
/***********************************************************************************
* Function: SystemManager_SetFault										   		   *
* Description: Set the fault in the system.		 		   						   *
************************************************************************************/
StdReturnType SystemManager_SetFault(uint8 faultType)
{
 8017670:	b480      	push	{r7}
 8017672:	b085      	sub	sp, #20
 8017674:	af00      	add	r7, sp, #0
 8017676:	4603      	mov	r3, r0
 8017678:	71fb      	strb	r3, [r7, #7]
	/* Store the fault into the data type. */
	for(uint8 index = 0; index < 14; index++)
 801767a:	2300      	movs	r3, #0
 801767c:	73fb      	strb	r3, [r7, #15]
 801767e:	e00d      	b.n	801769c <SystemManager_SetFault+0x2c>
	{
		if(faultType == index)
 8017680:	79fa      	ldrb	r2, [r7, #7]
 8017682:	7bfb      	ldrb	r3, [r7, #15]
 8017684:	429a      	cmp	r2, r3
 8017686:	d106      	bne.n	8017696 <SystemManager_SetFault+0x26>
		{
			SystemManager_Fault[index]++;
 8017688:	7bfb      	ldrb	r3, [r7, #15]
 801768a:	4a09      	ldr	r2, [pc, #36]	; (80176b0 <SystemManager_SetFault+0x40>)
 801768c:	5cd2      	ldrb	r2, [r2, r3]
 801768e:	3201      	adds	r2, #1
 8017690:	b2d1      	uxtb	r1, r2
 8017692:	4a07      	ldr	r2, [pc, #28]	; (80176b0 <SystemManager_SetFault+0x40>)
 8017694:	54d1      	strb	r1, [r2, r3]
	for(uint8 index = 0; index < 14; index++)
 8017696:	7bfb      	ldrb	r3, [r7, #15]
 8017698:	3301      	adds	r3, #1
 801769a:	73fb      	strb	r3, [r7, #15]
 801769c:	7bfb      	ldrb	r3, [r7, #15]
 801769e:	2b0d      	cmp	r3, #13
 80176a0:	d9ee      	bls.n	8017680 <SystemManager_SetFault+0x10>
		else
		{
			/* do nothing */
		}
	}
	return E_OK;
 80176a2:	2300      	movs	r3, #0
}
 80176a4:	4618      	mov	r0, r3
 80176a6:	3714      	adds	r7, #20
 80176a8:	46bd      	mov	sp, r7
 80176aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ae:	4770      	bx	lr
 80176b0:	2000e638 	.word	0x2000e638

080176b4 <SystemManager_MainFunction>:
/***********************************************************************************
* Function: SystemManager_MainFunction									   		   *
* Description: System main function.									 		   *
************************************************************************************/
VOID SystemManager_MainFunction()
{
 80176b4:	b580      	push	{r7, lr}
 80176b6:	af00      	add	r7, sp, #0
	/* Process module states. */
	switch(SystemManager_BswState)
 80176b8:	4b10      	ldr	r3, [pc, #64]	; (80176fc <SystemManager_MainFunction+0x48>)
 80176ba:	781b      	ldrb	r3, [r3, #0]
 80176bc:	2b03      	cmp	r3, #3
 80176be:	d81a      	bhi.n	80176f6 <SystemManager_MainFunction+0x42>
 80176c0:	a201      	add	r2, pc, #4	; (adr r2, 80176c8 <SystemManager_MainFunction+0x14>)
 80176c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80176c6:	bf00      	nop
 80176c8:	080176d9 	.word	0x080176d9
 80176cc:	080176eb 	.word	0x080176eb
 80176d0:	080176f1 	.word	0x080176f1
 80176d4:	080176e5 	.word	0x080176e5
	{
		case SM_INIT_STATE:
			SystemManager_Init();
 80176d8:	f7ff ffbc 	bl	8017654 <SystemManager_Init>
			SystemManager_BswState = SM_PROCESSFAULT_STATE;
 80176dc:	4b07      	ldr	r3, [pc, #28]	; (80176fc <SystemManager_MainFunction+0x48>)
 80176de:	2201      	movs	r2, #1
 80176e0:	701a      	strb	r2, [r3, #0]
			break;
 80176e2:	e009      	b.n	80176f8 <SystemManager_MainFunction+0x44>
		case SM_DEINIT_STATE:
			SystemManager_DeInit();
 80176e4:	f7ff ffbe 	bl	8017664 <SystemManager_DeInit>
			break;
 80176e8:	e006      	b.n	80176f8 <SystemManager_MainFunction+0x44>
		case SM_PROCESSFAULT_STATE:
			SystemManager_ProcessFault();
 80176ea:	f7ff fedd 	bl	80174a8 <SystemManager_ProcessFault>
			break;
 80176ee:	e003      	b.n	80176f8 <SystemManager_MainFunction+0x44>
		case SM_RESET_STATE:
			SystemManager_PerformReset();
 80176f0:	f000 f806 	bl	8017700 <SystemManager_PerformReset>
			break;
 80176f4:	e000      	b.n	80176f8 <SystemManager_MainFunction+0x44>
		default:
			break;
 80176f6:	bf00      	nop
	}
}
 80176f8:	bf00      	nop
 80176fa:	bd80      	pop	{r7, pc}
 80176fc:	2000e636 	.word	0x2000e636

08017700 <SystemManager_PerformReset>:
/***********************************************************************************
* Function: SystemManager_PerformReset									   		   *
* Description: Perform system reset.		 		   							   *
************************************************************************************/
VOID SystemManager_PerformReset()
{
 8017700:	b580      	push	{r7, lr}
 8017702:	af00      	add	r7, sp, #0
	I2cExtEeprom_WriteAll();
 8017704:	f7ec ffec 	bl	80046e0 <I2cExtEeprom_WriteAll>
	HAL_NVIC_SystemReset();
 8017708:	f7f1 fa19 	bl	8008b3e <HAL_NVIC_SystemReset>
}
 801770c:	bf00      	nop
 801770e:	bd80      	pop	{r7, pc}

08017710 <MX_NVIC_Init>:
* Function: MX_NVIC_Init													   	   *
* Description: Initialize the nested vector interrupt controller with configured   *
* 			   values.		 		   											   *
************************************************************************************/
VOID MX_NVIC_Init(VOID)
{
 8017710:	b580      	push	{r7, lr}
 8017712:	af00      	add	r7, sp, #0
	/* TIM5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM5_IRQn, 10, 0);
 8017714:	2200      	movs	r2, #0
 8017716:	210a      	movs	r1, #10
 8017718:	2032      	movs	r0, #50	; 0x32
 801771a:	f7f1 f9d8 	bl	8008ace <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM5_IRQn);
 801771e:	2032      	movs	r0, #50	; 0x32
 8017720:	f7f1 f9f1 	bl	8008b06 <HAL_NVIC_EnableIRQ>
	/* WWDG_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(WWDG_IRQn, 15, 0);
 8017724:	2200      	movs	r2, #0
 8017726:	210f      	movs	r1, #15
 8017728:	2000      	movs	r0, #0
 801772a:	f7f1 f9d0 	bl	8008ace <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(WWDG_IRQn);
 801772e:	2000      	movs	r0, #0
 8017730:	f7f1 f9e9 	bl	8008b06 <HAL_NVIC_EnableIRQ>
	/* FLASH_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(FLASH_IRQn, 15, 0);
 8017734:	2200      	movs	r2, #0
 8017736:	210f      	movs	r1, #15
 8017738:	2004      	movs	r0, #4
 801773a:	f7f1 f9c8 	bl	8008ace <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FLASH_IRQn);
 801773e:	2004      	movs	r0, #4
 8017740:	f7f1 f9e1 	bl	8008b06 <HAL_NVIC_EnableIRQ>
	/* RCC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(RCC_IRQn, 15, 0);
 8017744:	2200      	movs	r2, #0
 8017746:	210f      	movs	r1, #15
 8017748:	2005      	movs	r0, #5
 801774a:	f7f1 f9c0 	bl	8008ace <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RCC_IRQn);
 801774e:	2005      	movs	r0, #5
 8017750:	f7f1 f9d9 	bl	8008b06 <HAL_NVIC_EnableIRQ>
	/* PVD_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PVD_IRQn, 15, 0);
 8017754:	2200      	movs	r2, #0
 8017756:	210f      	movs	r1, #15
 8017758:	2001      	movs	r0, #1
 801775a:	f7f1 f9b8 	bl	8008ace <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(PVD_IRQn);
 801775e:	2001      	movs	r0, #1
 8017760:	f7f1 f9d1 	bl	8008b06 <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 15, 0);
 8017764:	2200      	movs	r2, #0
 8017766:	210f      	movs	r1, #15
 8017768:	2012      	movs	r0, #18
 801776a:	f7f1 f9b0 	bl	8008ace <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 801776e:	2012      	movs	r0, #18
 8017770:	f7f1 f9c9 	bl	8008b06 <HAL_NVIC_EnableIRQ>
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8017774:	2200      	movs	r2, #0
 8017776:	210f      	movs	r1, #15
 8017778:	201c      	movs	r0, #28
 801777a:	f7f1 f9a8 	bl	8008ace <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801777e:	201c      	movs	r0, #28
 8017780:	f7f1 f9c1 	bl	8008b06 <HAL_NVIC_EnableIRQ>
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn, 15, 0);
 8017784:	2200      	movs	r2, #0
 8017786:	210f      	movs	r1, #15
 8017788:	201d      	movs	r0, #29
 801778a:	f7f1 f9a0 	bl	8008ace <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 801778e:	201d      	movs	r0, #29
 8017790:	f7f1 f9b9 	bl	8008b06 <HAL_NVIC_EnableIRQ>
	/* TIM4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM4_IRQn, 15, 0);
 8017794:	2200      	movs	r2, #0
 8017796:	210f      	movs	r1, #15
 8017798:	201e      	movs	r0, #30
 801779a:	f7f1 f998 	bl	8008ace <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 801779e:	201e      	movs	r0, #30
 80177a0:	f7f1 f9b1 	bl	8008b06 <HAL_NVIC_EnableIRQ>
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80177a4:	2200      	movs	r2, #0
 80177a6:	2100      	movs	r1, #0
 80177a8:	2025      	movs	r0, #37	; 0x25
 80177aa:	f7f1 f990 	bl	8008ace <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 80177ae:	2025      	movs	r0, #37	; 0x25
 80177b0:	f7f1 f9a9 	bl	8008b06 <HAL_NVIC_EnableIRQ>
	/* SPI3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SPI3_IRQn, 15, 0);
 80177b4:	2200      	movs	r2, #0
 80177b6:	210f      	movs	r1, #15
 80177b8:	2033      	movs	r0, #51	; 0x33
 80177ba:	f7f1 f988 	bl	8008ace <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80177be:	2033      	movs	r0, #51	; 0x33
 80177c0:	f7f1 f9a1 	bl	8008b06 <HAL_NVIC_EnableIRQ>
	/* I2C3_EV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(I2C3_EV_IRQn, 15, 0);
 80177c4:	2200      	movs	r2, #0
 80177c6:	210f      	movs	r1, #15
 80177c8:	2048      	movs	r0, #72	; 0x48
 80177ca:	f7f1 f980 	bl	8008ace <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80177ce:	2048      	movs	r0, #72	; 0x48
 80177d0:	f7f1 f999 	bl	8008b06 <HAL_NVIC_EnableIRQ>
	/* I2C3_ER_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(I2C3_ER_IRQn, 15, 0);
 80177d4:	2200      	movs	r2, #0
 80177d6:	210f      	movs	r1, #15
 80177d8:	2049      	movs	r0, #73	; 0x49
 80177da:	f7f1 f978 	bl	8008ace <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80177de:	2049      	movs	r0, #73	; 0x49
 80177e0:	f7f1 f991 	bl	8008b06 <HAL_NVIC_EnableIRQ>
	/* FPU_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(FPU_IRQn, 15, 0);
 80177e4:	2200      	movs	r2, #0
 80177e6:	210f      	movs	r1, #15
 80177e8:	2051      	movs	r0, #81	; 0x51
 80177ea:	f7f1 f970 	bl	8008ace <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FPU_IRQn);
 80177ee:	2051      	movs	r0, #81	; 0x51
 80177f0:	f7f1 f989 	bl	8008b06 <HAL_NVIC_EnableIRQ>
	/* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 10, 0);
 80177f4:	2200      	movs	r2, #0
 80177f6:	210a      	movs	r1, #10
 80177f8:	201a      	movs	r0, #26
 80177fa:	f7f1 f968 	bl	8008ace <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80177fe:	201a      	movs	r0, #26
 8017800:	f7f1 f981 	bl	8008b06 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 10, 0);
 8017804:	2200      	movs	r2, #0
 8017806:	210a      	movs	r1, #10
 8017808:	2038      	movs	r0, #56	; 0x38
 801780a:	f7f1 f960 	bl	8008ace <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 801780e:	2038      	movs	r0, #56	; 0x38
 8017810:	f7f1 f979 	bl	8008b06 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 10, 0);
 8017814:	2200      	movs	r2, #0
 8017816:	210a      	movs	r1, #10
 8017818:	200d      	movs	r0, #13
 801781a:	f7f1 f958 	bl	8008ace <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 801781e:	200d      	movs	r0, #13
 8017820:	f7f1 f971 	bl	8008b06 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 10, 0);
 8017824:	2200      	movs	r2, #0
 8017826:	210a      	movs	r1, #10
 8017828:	200f      	movs	r0, #15
 801782a:	f7f1 f950 	bl	8008ace <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 801782e:	200f      	movs	r0, #15
 8017830:	f7f1 f969 	bl	8008b06 <HAL_NVIC_EnableIRQ>
	/* I2C1_ER_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 10, 0);
 8017834:	2200      	movs	r2, #0
 8017836:	210a      	movs	r1, #10
 8017838:	2020      	movs	r0, #32
 801783a:	f7f1 f948 	bl	8008ace <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 801783e:	2020      	movs	r0, #32
 8017840:	f7f1 f961 	bl	8008b06 <HAL_NVIC_EnableIRQ>
	/* I2C1_EV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 10, 0);
 8017844:	2200      	movs	r2, #0
 8017846:	210a      	movs	r1, #10
 8017848:	201f      	movs	r0, #31
 801784a:	f7f1 f940 	bl	8008ace <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 801784e:	201f      	movs	r0, #31
 8017850:	f7f1 f959 	bl	8008b06 <HAL_NVIC_EnableIRQ>
}
 8017854:	bf00      	nop
 8017856:	bd80      	pop	{r7, pc}

08017858 <SystemClock_Config>:
/***********************************************************************************
* Function: SystemClock_Config													   *
* Description: Initialize the system clock.		 		   						   *
************************************************************************************/
VOID SystemClock_Config(VOID)
{
 8017858:	b580      	push	{r7, lr}
 801785a:	b094      	sub	sp, #80	; 0x50
 801785c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801785e:	f107 0320 	add.w	r3, r7, #32
 8017862:	2230      	movs	r2, #48	; 0x30
 8017864:	2100      	movs	r1, #0
 8017866:	4618      	mov	r0, r3
 8017868:	f000 f8de 	bl	8017a28 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801786c:	f107 030c 	add.w	r3, r7, #12
 8017870:	2200      	movs	r2, #0
 8017872:	601a      	str	r2, [r3, #0]
 8017874:	605a      	str	r2, [r3, #4]
 8017876:	609a      	str	r2, [r3, #8]
 8017878:	60da      	str	r2, [r3, #12]
 801787a:	611a      	str	r2, [r3, #16]
	__HAL_RCC_PWR_CLK_ENABLE();
 801787c:	2300      	movs	r3, #0
 801787e:	60bb      	str	r3, [r7, #8]
 8017880:	4b28      	ldr	r3, [pc, #160]	; (8017924 <SystemClock_Config+0xcc>)
 8017882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017884:	4a27      	ldr	r2, [pc, #156]	; (8017924 <SystemClock_Config+0xcc>)
 8017886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801788a:	6413      	str	r3, [r2, #64]	; 0x40
 801788c:	4b25      	ldr	r3, [pc, #148]	; (8017924 <SystemClock_Config+0xcc>)
 801788e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017894:	60bb      	str	r3, [r7, #8]
 8017896:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8017898:	2300      	movs	r3, #0
 801789a:	607b      	str	r3, [r7, #4]
 801789c:	4b22      	ldr	r3, [pc, #136]	; (8017928 <SystemClock_Config+0xd0>)
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	4a21      	ldr	r2, [pc, #132]	; (8017928 <SystemClock_Config+0xd0>)
 80178a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80178a6:	6013      	str	r3, [r2, #0]
 80178a8:	4b1f      	ldr	r3, [pc, #124]	; (8017928 <SystemClock_Config+0xd0>)
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80178b0:	607b      	str	r3, [r7, #4]
 80178b2:	687b      	ldr	r3, [r7, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80178b4:	2309      	movs	r3, #9
 80178b6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80178b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80178bc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80178be:	2301      	movs	r3, #1
 80178c0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80178c2:	2302      	movs	r3, #2
 80178c4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80178c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80178ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80178cc:	2304      	movs	r3, #4
 80178ce:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 80178d0:	2364      	movs	r3, #100	; 0x64
 80178d2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80178d4:	2302      	movs	r3, #2
 80178d6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80178d8:	2304      	movs	r3, #4
 80178da:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80178dc:	f107 0320 	add.w	r3, r7, #32
 80178e0:	4618      	mov	r0, r3
 80178e2:	f7f4 fb01 	bl	800bee8 <HAL_RCC_OscConfig>
 80178e6:	4603      	mov	r3, r0
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d001      	beq.n	80178f0 <SystemClock_Config+0x98>
	{
		Error_Handler();
 80178ec:	f000 f81e 	bl	801792c <Error_Handler>
	}
	else
	{
		/* do nothing */
	}
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 80178f0:	230f      	movs	r3, #15
 80178f2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80178f4:	2302      	movs	r3, #2
 80178f6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80178f8:	2300      	movs	r3, #0
 80178fa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80178fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017900:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8017902:	2300      	movs	r3, #0
 8017904:	61fb      	str	r3, [r7, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8017906:	f107 030c 	add.w	r3, r7, #12
 801790a:	2103      	movs	r1, #3
 801790c:	4618      	mov	r0, r3
 801790e:	f7f4 fd63 	bl	800c3d8 <HAL_RCC_ClockConfig>
 8017912:	4603      	mov	r3, r0
 8017914:	2b00      	cmp	r3, #0
 8017916:	d001      	beq.n	801791c <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8017918:	f000 f808 	bl	801792c <Error_Handler>
	}
	else
	{
		/* do nothing */
	}
}
 801791c:	bf00      	nop
 801791e:	3750      	adds	r7, #80	; 0x50
 8017920:	46bd      	mov	sp, r7
 8017922:	bd80      	pop	{r7, pc}
 8017924:	40023800 	.word	0x40023800
 8017928:	40007000 	.word	0x40007000

0801792c <Error_Handler>:
/***********************************************************************************
* Function: Error_Handler													   	   *
* Description: Perform system reset in case of system fault.			 		   *
************************************************************************************/
VOID Error_Handler(VOID)
{
 801792c:	b580      	push	{r7, lr}
 801792e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8017930:	b672      	cpsid	i
}
 8017932:	bf00      	nop
	__disable_irq();
	SystemManager_PerformReset();
 8017934:	f7ff fee4 	bl	8017700 <SystemManager_PerformReset>
	while (1)
 8017938:	e7fe      	b.n	8017938 <Error_Handler+0xc>

0801793a <HAL_WWDG_EarlyWakeupCallback>:
/***********************************************************************************
* Function: HAL_WWDG_EarlyWakeupCallback									   	   *
* Description: Early waek-up callback.							 		   		   *
************************************************************************************/
VOID HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 801793a:	b580      	push	{r7, lr}
 801793c:	b082      	sub	sp, #8
 801793e:	af00      	add	r7, sp, #0
 8017940:	6078      	str	r0, [r7, #4]
	SystemManager_SetFault(WATCHDOG_RESET);
 8017942:	2003      	movs	r0, #3
 8017944:	f7ff fe94 	bl	8017670 <SystemManager_SetFault>
}
 8017948:	bf00      	nop
 801794a:	3708      	adds	r7, #8
 801794c:	46bd      	mov	sp, r7
 801794e:	bd80      	pop	{r7, pc}

08017950 <Watchdog_Init>:
/***********************************************************************************
* Function: Watchdog_Init									   		       		   *
* Description: Peripheral initialization.							 		   	   *
************************************************************************************/
StdReturnType Watchdog_Init()
{
 8017950:	b580      	push	{r7, lr}
 8017952:	af00      	add	r7, sp, #0
	hwwdg.Instance = WWDG;
 8017954:	4b0f      	ldr	r3, [pc, #60]	; (8017994 <Watchdog_Init+0x44>)
 8017956:	4a10      	ldr	r2, [pc, #64]	; (8017998 <Watchdog_Init+0x48>)
 8017958:	601a      	str	r2, [r3, #0]
	hwwdg.Init.Window = 127;
 801795a:	4b0e      	ldr	r3, [pc, #56]	; (8017994 <Watchdog_Init+0x44>)
 801795c:	227f      	movs	r2, #127	; 0x7f
 801795e:	609a      	str	r2, [r3, #8]
	hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 8017960:	4b0c      	ldr	r3, [pc, #48]	; (8017994 <Watchdog_Init+0x44>)
 8017962:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8017966:	605a      	str	r2, [r3, #4]
	hwwdg.Init.Counter = 127;
 8017968:	4b0a      	ldr	r3, [pc, #40]	; (8017994 <Watchdog_Init+0x44>)
 801796a:	227f      	movs	r2, #127	; 0x7f
 801796c:	60da      	str	r2, [r3, #12]
	hwwdg.Init.EWIMode = WWDG_EWI_ENABLE;
 801796e:	4b09      	ldr	r3, [pc, #36]	; (8017994 <Watchdog_Init+0x44>)
 8017970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017974:	611a      	str	r2, [r3, #16]
	if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8017976:	4807      	ldr	r0, [pc, #28]	; (8017994 <Watchdog_Init+0x44>)
 8017978:	f7f8 ff04 	bl	8010784 <HAL_WWDG_Init>
 801797c:	4603      	mov	r3, r0
 801797e:	2b00      	cmp	r3, #0
 8017980:	d004      	beq.n	801798c <Watchdog_Init+0x3c>
	{
		SystemManager_SetFault(WATCHDOG_RESET);
 8017982:	2003      	movs	r0, #3
 8017984:	f7ff fe74 	bl	8017670 <SystemManager_SetFault>
		Error_Handler();
 8017988:	f7ff ffd0 	bl	801792c <Error_Handler>
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 801798c:	2300      	movs	r3, #0
}
 801798e:	4618      	mov	r0, r3
 8017990:	bd80      	pop	{r7, pc}
 8017992:	bf00      	nop
 8017994:	20000c04 	.word	0x20000c04
 8017998:	40002c00 	.word	0x40002c00

0801799c <Watchdog_MainFunction>:
/***********************************************************************************
* Function: Watchdog_MainFunction									   		       *
* Description: Peripheral main function.							 		       *
************************************************************************************/
VOID Watchdog_MainFunction()
{
 801799c:	b580      	push	{r7, lr}
 801799e:	af00      	add	r7, sp, #0
	HAL_WWDG_Refresh(&hwwdg);
 80179a0:	4802      	ldr	r0, [pc, #8]	; (80179ac <Watchdog_MainFunction+0x10>)
 80179a2:	f7f8 ff27 	bl	80107f4 <HAL_WWDG_Refresh>
}
 80179a6:	bf00      	nop
 80179a8:	bd80      	pop	{r7, pc}
 80179aa:	bf00      	nop
 80179ac:	20000c04 	.word	0x20000c04

080179b0 <atoi>:
 80179b0:	220a      	movs	r2, #10
 80179b2:	2100      	movs	r1, #0
 80179b4:	f000 ba3c 	b.w	8017e30 <strtol>

080179b8 <__errno>:
 80179b8:	4b01      	ldr	r3, [pc, #4]	; (80179c0 <__errno+0x8>)
 80179ba:	6818      	ldr	r0, [r3, #0]
 80179bc:	4770      	bx	lr
 80179be:	bf00      	nop
 80179c0:	2000006c 	.word	0x2000006c

080179c4 <__libc_init_array>:
 80179c4:	b570      	push	{r4, r5, r6, lr}
 80179c6:	4d0d      	ldr	r5, [pc, #52]	; (80179fc <__libc_init_array+0x38>)
 80179c8:	4c0d      	ldr	r4, [pc, #52]	; (8017a00 <__libc_init_array+0x3c>)
 80179ca:	1b64      	subs	r4, r4, r5
 80179cc:	10a4      	asrs	r4, r4, #2
 80179ce:	2600      	movs	r6, #0
 80179d0:	42a6      	cmp	r6, r4
 80179d2:	d109      	bne.n	80179e8 <__libc_init_array+0x24>
 80179d4:	4d0b      	ldr	r5, [pc, #44]	; (8017a04 <__libc_init_array+0x40>)
 80179d6:	4c0c      	ldr	r4, [pc, #48]	; (8017a08 <__libc_init_array+0x44>)
 80179d8:	f000 fd82 	bl	80184e0 <_init>
 80179dc:	1b64      	subs	r4, r4, r5
 80179de:	10a4      	asrs	r4, r4, #2
 80179e0:	2600      	movs	r6, #0
 80179e2:	42a6      	cmp	r6, r4
 80179e4:	d105      	bne.n	80179f2 <__libc_init_array+0x2e>
 80179e6:	bd70      	pop	{r4, r5, r6, pc}
 80179e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80179ec:	4798      	blx	r3
 80179ee:	3601      	adds	r6, #1
 80179f0:	e7ee      	b.n	80179d0 <__libc_init_array+0xc>
 80179f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80179f6:	4798      	blx	r3
 80179f8:	3601      	adds	r6, #1
 80179fa:	e7f2      	b.n	80179e2 <__libc_init_array+0x1e>
 80179fc:	08018ce0 	.word	0x08018ce0
 8017a00:	08018ce0 	.word	0x08018ce0
 8017a04:	08018ce0 	.word	0x08018ce0
 8017a08:	08018ce4 	.word	0x08018ce4

08017a0c <memcpy>:
 8017a0c:	440a      	add	r2, r1
 8017a0e:	4291      	cmp	r1, r2
 8017a10:	f100 33ff 	add.w	r3, r0, #4294967295
 8017a14:	d100      	bne.n	8017a18 <memcpy+0xc>
 8017a16:	4770      	bx	lr
 8017a18:	b510      	push	{r4, lr}
 8017a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017a1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017a22:	4291      	cmp	r1, r2
 8017a24:	d1f9      	bne.n	8017a1a <memcpy+0xe>
 8017a26:	bd10      	pop	{r4, pc}

08017a28 <memset>:
 8017a28:	4402      	add	r2, r0
 8017a2a:	4603      	mov	r3, r0
 8017a2c:	4293      	cmp	r3, r2
 8017a2e:	d100      	bne.n	8017a32 <memset+0xa>
 8017a30:	4770      	bx	lr
 8017a32:	f803 1b01 	strb.w	r1, [r3], #1
 8017a36:	e7f9      	b.n	8017a2c <memset+0x4>

08017a38 <_free_r>:
 8017a38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017a3a:	2900      	cmp	r1, #0
 8017a3c:	d044      	beq.n	8017ac8 <_free_r+0x90>
 8017a3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017a42:	9001      	str	r0, [sp, #4]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	f1a1 0404 	sub.w	r4, r1, #4
 8017a4a:	bfb8      	it	lt
 8017a4c:	18e4      	addlt	r4, r4, r3
 8017a4e:	f000 f9f9 	bl	8017e44 <__malloc_lock>
 8017a52:	4a1e      	ldr	r2, [pc, #120]	; (8017acc <_free_r+0x94>)
 8017a54:	9801      	ldr	r0, [sp, #4]
 8017a56:	6813      	ldr	r3, [r2, #0]
 8017a58:	b933      	cbnz	r3, 8017a68 <_free_r+0x30>
 8017a5a:	6063      	str	r3, [r4, #4]
 8017a5c:	6014      	str	r4, [r2, #0]
 8017a5e:	b003      	add	sp, #12
 8017a60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017a64:	f000 b9f4 	b.w	8017e50 <__malloc_unlock>
 8017a68:	42a3      	cmp	r3, r4
 8017a6a:	d908      	bls.n	8017a7e <_free_r+0x46>
 8017a6c:	6825      	ldr	r5, [r4, #0]
 8017a6e:	1961      	adds	r1, r4, r5
 8017a70:	428b      	cmp	r3, r1
 8017a72:	bf01      	itttt	eq
 8017a74:	6819      	ldreq	r1, [r3, #0]
 8017a76:	685b      	ldreq	r3, [r3, #4]
 8017a78:	1949      	addeq	r1, r1, r5
 8017a7a:	6021      	streq	r1, [r4, #0]
 8017a7c:	e7ed      	b.n	8017a5a <_free_r+0x22>
 8017a7e:	461a      	mov	r2, r3
 8017a80:	685b      	ldr	r3, [r3, #4]
 8017a82:	b10b      	cbz	r3, 8017a88 <_free_r+0x50>
 8017a84:	42a3      	cmp	r3, r4
 8017a86:	d9fa      	bls.n	8017a7e <_free_r+0x46>
 8017a88:	6811      	ldr	r1, [r2, #0]
 8017a8a:	1855      	adds	r5, r2, r1
 8017a8c:	42a5      	cmp	r5, r4
 8017a8e:	d10b      	bne.n	8017aa8 <_free_r+0x70>
 8017a90:	6824      	ldr	r4, [r4, #0]
 8017a92:	4421      	add	r1, r4
 8017a94:	1854      	adds	r4, r2, r1
 8017a96:	42a3      	cmp	r3, r4
 8017a98:	6011      	str	r1, [r2, #0]
 8017a9a:	d1e0      	bne.n	8017a5e <_free_r+0x26>
 8017a9c:	681c      	ldr	r4, [r3, #0]
 8017a9e:	685b      	ldr	r3, [r3, #4]
 8017aa0:	6053      	str	r3, [r2, #4]
 8017aa2:	4421      	add	r1, r4
 8017aa4:	6011      	str	r1, [r2, #0]
 8017aa6:	e7da      	b.n	8017a5e <_free_r+0x26>
 8017aa8:	d902      	bls.n	8017ab0 <_free_r+0x78>
 8017aaa:	230c      	movs	r3, #12
 8017aac:	6003      	str	r3, [r0, #0]
 8017aae:	e7d6      	b.n	8017a5e <_free_r+0x26>
 8017ab0:	6825      	ldr	r5, [r4, #0]
 8017ab2:	1961      	adds	r1, r4, r5
 8017ab4:	428b      	cmp	r3, r1
 8017ab6:	bf04      	itt	eq
 8017ab8:	6819      	ldreq	r1, [r3, #0]
 8017aba:	685b      	ldreq	r3, [r3, #4]
 8017abc:	6063      	str	r3, [r4, #4]
 8017abe:	bf04      	itt	eq
 8017ac0:	1949      	addeq	r1, r1, r5
 8017ac2:	6021      	streq	r1, [r4, #0]
 8017ac4:	6054      	str	r4, [r2, #4]
 8017ac6:	e7ca      	b.n	8017a5e <_free_r+0x26>
 8017ac8:	b003      	add	sp, #12
 8017aca:	bd30      	pop	{r4, r5, pc}
 8017acc:	2000e66c 	.word	0x2000e66c

08017ad0 <sbrk_aligned>:
 8017ad0:	b570      	push	{r4, r5, r6, lr}
 8017ad2:	4e0e      	ldr	r6, [pc, #56]	; (8017b0c <sbrk_aligned+0x3c>)
 8017ad4:	460c      	mov	r4, r1
 8017ad6:	6831      	ldr	r1, [r6, #0]
 8017ad8:	4605      	mov	r5, r0
 8017ada:	b911      	cbnz	r1, 8017ae2 <sbrk_aligned+0x12>
 8017adc:	f000 f8f6 	bl	8017ccc <_sbrk_r>
 8017ae0:	6030      	str	r0, [r6, #0]
 8017ae2:	4621      	mov	r1, r4
 8017ae4:	4628      	mov	r0, r5
 8017ae6:	f000 f8f1 	bl	8017ccc <_sbrk_r>
 8017aea:	1c43      	adds	r3, r0, #1
 8017aec:	d00a      	beq.n	8017b04 <sbrk_aligned+0x34>
 8017aee:	1cc4      	adds	r4, r0, #3
 8017af0:	f024 0403 	bic.w	r4, r4, #3
 8017af4:	42a0      	cmp	r0, r4
 8017af6:	d007      	beq.n	8017b08 <sbrk_aligned+0x38>
 8017af8:	1a21      	subs	r1, r4, r0
 8017afa:	4628      	mov	r0, r5
 8017afc:	f000 f8e6 	bl	8017ccc <_sbrk_r>
 8017b00:	3001      	adds	r0, #1
 8017b02:	d101      	bne.n	8017b08 <sbrk_aligned+0x38>
 8017b04:	f04f 34ff 	mov.w	r4, #4294967295
 8017b08:	4620      	mov	r0, r4
 8017b0a:	bd70      	pop	{r4, r5, r6, pc}
 8017b0c:	2000e670 	.word	0x2000e670

08017b10 <_malloc_r>:
 8017b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b14:	1ccd      	adds	r5, r1, #3
 8017b16:	f025 0503 	bic.w	r5, r5, #3
 8017b1a:	3508      	adds	r5, #8
 8017b1c:	2d0c      	cmp	r5, #12
 8017b1e:	bf38      	it	cc
 8017b20:	250c      	movcc	r5, #12
 8017b22:	2d00      	cmp	r5, #0
 8017b24:	4607      	mov	r7, r0
 8017b26:	db01      	blt.n	8017b2c <_malloc_r+0x1c>
 8017b28:	42a9      	cmp	r1, r5
 8017b2a:	d905      	bls.n	8017b38 <_malloc_r+0x28>
 8017b2c:	230c      	movs	r3, #12
 8017b2e:	603b      	str	r3, [r7, #0]
 8017b30:	2600      	movs	r6, #0
 8017b32:	4630      	mov	r0, r6
 8017b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b38:	4e2e      	ldr	r6, [pc, #184]	; (8017bf4 <_malloc_r+0xe4>)
 8017b3a:	f000 f983 	bl	8017e44 <__malloc_lock>
 8017b3e:	6833      	ldr	r3, [r6, #0]
 8017b40:	461c      	mov	r4, r3
 8017b42:	bb34      	cbnz	r4, 8017b92 <_malloc_r+0x82>
 8017b44:	4629      	mov	r1, r5
 8017b46:	4638      	mov	r0, r7
 8017b48:	f7ff ffc2 	bl	8017ad0 <sbrk_aligned>
 8017b4c:	1c43      	adds	r3, r0, #1
 8017b4e:	4604      	mov	r4, r0
 8017b50:	d14d      	bne.n	8017bee <_malloc_r+0xde>
 8017b52:	6834      	ldr	r4, [r6, #0]
 8017b54:	4626      	mov	r6, r4
 8017b56:	2e00      	cmp	r6, #0
 8017b58:	d140      	bne.n	8017bdc <_malloc_r+0xcc>
 8017b5a:	6823      	ldr	r3, [r4, #0]
 8017b5c:	4631      	mov	r1, r6
 8017b5e:	4638      	mov	r0, r7
 8017b60:	eb04 0803 	add.w	r8, r4, r3
 8017b64:	f000 f8b2 	bl	8017ccc <_sbrk_r>
 8017b68:	4580      	cmp	r8, r0
 8017b6a:	d13a      	bne.n	8017be2 <_malloc_r+0xd2>
 8017b6c:	6821      	ldr	r1, [r4, #0]
 8017b6e:	3503      	adds	r5, #3
 8017b70:	1a6d      	subs	r5, r5, r1
 8017b72:	f025 0503 	bic.w	r5, r5, #3
 8017b76:	3508      	adds	r5, #8
 8017b78:	2d0c      	cmp	r5, #12
 8017b7a:	bf38      	it	cc
 8017b7c:	250c      	movcc	r5, #12
 8017b7e:	4629      	mov	r1, r5
 8017b80:	4638      	mov	r0, r7
 8017b82:	f7ff ffa5 	bl	8017ad0 <sbrk_aligned>
 8017b86:	3001      	adds	r0, #1
 8017b88:	d02b      	beq.n	8017be2 <_malloc_r+0xd2>
 8017b8a:	6823      	ldr	r3, [r4, #0]
 8017b8c:	442b      	add	r3, r5
 8017b8e:	6023      	str	r3, [r4, #0]
 8017b90:	e00e      	b.n	8017bb0 <_malloc_r+0xa0>
 8017b92:	6822      	ldr	r2, [r4, #0]
 8017b94:	1b52      	subs	r2, r2, r5
 8017b96:	d41e      	bmi.n	8017bd6 <_malloc_r+0xc6>
 8017b98:	2a0b      	cmp	r2, #11
 8017b9a:	d916      	bls.n	8017bca <_malloc_r+0xba>
 8017b9c:	1961      	adds	r1, r4, r5
 8017b9e:	42a3      	cmp	r3, r4
 8017ba0:	6025      	str	r5, [r4, #0]
 8017ba2:	bf18      	it	ne
 8017ba4:	6059      	strne	r1, [r3, #4]
 8017ba6:	6863      	ldr	r3, [r4, #4]
 8017ba8:	bf08      	it	eq
 8017baa:	6031      	streq	r1, [r6, #0]
 8017bac:	5162      	str	r2, [r4, r5]
 8017bae:	604b      	str	r3, [r1, #4]
 8017bb0:	4638      	mov	r0, r7
 8017bb2:	f104 060b 	add.w	r6, r4, #11
 8017bb6:	f000 f94b 	bl	8017e50 <__malloc_unlock>
 8017bba:	f026 0607 	bic.w	r6, r6, #7
 8017bbe:	1d23      	adds	r3, r4, #4
 8017bc0:	1af2      	subs	r2, r6, r3
 8017bc2:	d0b6      	beq.n	8017b32 <_malloc_r+0x22>
 8017bc4:	1b9b      	subs	r3, r3, r6
 8017bc6:	50a3      	str	r3, [r4, r2]
 8017bc8:	e7b3      	b.n	8017b32 <_malloc_r+0x22>
 8017bca:	6862      	ldr	r2, [r4, #4]
 8017bcc:	42a3      	cmp	r3, r4
 8017bce:	bf0c      	ite	eq
 8017bd0:	6032      	streq	r2, [r6, #0]
 8017bd2:	605a      	strne	r2, [r3, #4]
 8017bd4:	e7ec      	b.n	8017bb0 <_malloc_r+0xa0>
 8017bd6:	4623      	mov	r3, r4
 8017bd8:	6864      	ldr	r4, [r4, #4]
 8017bda:	e7b2      	b.n	8017b42 <_malloc_r+0x32>
 8017bdc:	4634      	mov	r4, r6
 8017bde:	6876      	ldr	r6, [r6, #4]
 8017be0:	e7b9      	b.n	8017b56 <_malloc_r+0x46>
 8017be2:	230c      	movs	r3, #12
 8017be4:	603b      	str	r3, [r7, #0]
 8017be6:	4638      	mov	r0, r7
 8017be8:	f000 f932 	bl	8017e50 <__malloc_unlock>
 8017bec:	e7a1      	b.n	8017b32 <_malloc_r+0x22>
 8017bee:	6025      	str	r5, [r4, #0]
 8017bf0:	e7de      	b.n	8017bb0 <_malloc_r+0xa0>
 8017bf2:	bf00      	nop
 8017bf4:	2000e66c 	.word	0x2000e66c

08017bf8 <cleanup_glue>:
 8017bf8:	b538      	push	{r3, r4, r5, lr}
 8017bfa:	460c      	mov	r4, r1
 8017bfc:	6809      	ldr	r1, [r1, #0]
 8017bfe:	4605      	mov	r5, r0
 8017c00:	b109      	cbz	r1, 8017c06 <cleanup_glue+0xe>
 8017c02:	f7ff fff9 	bl	8017bf8 <cleanup_glue>
 8017c06:	4621      	mov	r1, r4
 8017c08:	4628      	mov	r0, r5
 8017c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c0e:	f7ff bf13 	b.w	8017a38 <_free_r>
	...

08017c14 <_reclaim_reent>:
 8017c14:	4b2c      	ldr	r3, [pc, #176]	; (8017cc8 <_reclaim_reent+0xb4>)
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	4283      	cmp	r3, r0
 8017c1a:	b570      	push	{r4, r5, r6, lr}
 8017c1c:	4604      	mov	r4, r0
 8017c1e:	d051      	beq.n	8017cc4 <_reclaim_reent+0xb0>
 8017c20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017c22:	b143      	cbz	r3, 8017c36 <_reclaim_reent+0x22>
 8017c24:	68db      	ldr	r3, [r3, #12]
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d14a      	bne.n	8017cc0 <_reclaim_reent+0xac>
 8017c2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017c2c:	6819      	ldr	r1, [r3, #0]
 8017c2e:	b111      	cbz	r1, 8017c36 <_reclaim_reent+0x22>
 8017c30:	4620      	mov	r0, r4
 8017c32:	f7ff ff01 	bl	8017a38 <_free_r>
 8017c36:	6961      	ldr	r1, [r4, #20]
 8017c38:	b111      	cbz	r1, 8017c40 <_reclaim_reent+0x2c>
 8017c3a:	4620      	mov	r0, r4
 8017c3c:	f7ff fefc 	bl	8017a38 <_free_r>
 8017c40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017c42:	b111      	cbz	r1, 8017c4a <_reclaim_reent+0x36>
 8017c44:	4620      	mov	r0, r4
 8017c46:	f7ff fef7 	bl	8017a38 <_free_r>
 8017c4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017c4c:	b111      	cbz	r1, 8017c54 <_reclaim_reent+0x40>
 8017c4e:	4620      	mov	r0, r4
 8017c50:	f7ff fef2 	bl	8017a38 <_free_r>
 8017c54:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8017c56:	b111      	cbz	r1, 8017c5e <_reclaim_reent+0x4a>
 8017c58:	4620      	mov	r0, r4
 8017c5a:	f7ff feed 	bl	8017a38 <_free_r>
 8017c5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8017c60:	b111      	cbz	r1, 8017c68 <_reclaim_reent+0x54>
 8017c62:	4620      	mov	r0, r4
 8017c64:	f7ff fee8 	bl	8017a38 <_free_r>
 8017c68:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8017c6a:	b111      	cbz	r1, 8017c72 <_reclaim_reent+0x5e>
 8017c6c:	4620      	mov	r0, r4
 8017c6e:	f7ff fee3 	bl	8017a38 <_free_r>
 8017c72:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017c74:	b111      	cbz	r1, 8017c7c <_reclaim_reent+0x68>
 8017c76:	4620      	mov	r0, r4
 8017c78:	f7ff fede 	bl	8017a38 <_free_r>
 8017c7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017c7e:	b111      	cbz	r1, 8017c86 <_reclaim_reent+0x72>
 8017c80:	4620      	mov	r0, r4
 8017c82:	f7ff fed9 	bl	8017a38 <_free_r>
 8017c86:	69a3      	ldr	r3, [r4, #24]
 8017c88:	b1e3      	cbz	r3, 8017cc4 <_reclaim_reent+0xb0>
 8017c8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017c8c:	4620      	mov	r0, r4
 8017c8e:	4798      	blx	r3
 8017c90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017c92:	b1b9      	cbz	r1, 8017cc4 <_reclaim_reent+0xb0>
 8017c94:	4620      	mov	r0, r4
 8017c96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c9a:	f7ff bfad 	b.w	8017bf8 <cleanup_glue>
 8017c9e:	5949      	ldr	r1, [r1, r5]
 8017ca0:	b941      	cbnz	r1, 8017cb4 <_reclaim_reent+0xa0>
 8017ca2:	3504      	adds	r5, #4
 8017ca4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ca6:	2d80      	cmp	r5, #128	; 0x80
 8017ca8:	68d9      	ldr	r1, [r3, #12]
 8017caa:	d1f8      	bne.n	8017c9e <_reclaim_reent+0x8a>
 8017cac:	4620      	mov	r0, r4
 8017cae:	f7ff fec3 	bl	8017a38 <_free_r>
 8017cb2:	e7ba      	b.n	8017c2a <_reclaim_reent+0x16>
 8017cb4:	680e      	ldr	r6, [r1, #0]
 8017cb6:	4620      	mov	r0, r4
 8017cb8:	f7ff febe 	bl	8017a38 <_free_r>
 8017cbc:	4631      	mov	r1, r6
 8017cbe:	e7ef      	b.n	8017ca0 <_reclaim_reent+0x8c>
 8017cc0:	2500      	movs	r5, #0
 8017cc2:	e7ef      	b.n	8017ca4 <_reclaim_reent+0x90>
 8017cc4:	bd70      	pop	{r4, r5, r6, pc}
 8017cc6:	bf00      	nop
 8017cc8:	2000006c 	.word	0x2000006c

08017ccc <_sbrk_r>:
 8017ccc:	b538      	push	{r3, r4, r5, lr}
 8017cce:	4d06      	ldr	r5, [pc, #24]	; (8017ce8 <_sbrk_r+0x1c>)
 8017cd0:	2300      	movs	r3, #0
 8017cd2:	4604      	mov	r4, r0
 8017cd4:	4608      	mov	r0, r1
 8017cd6:	602b      	str	r3, [r5, #0]
 8017cd8:	f7ef fa38 	bl	800714c <_sbrk>
 8017cdc:	1c43      	adds	r3, r0, #1
 8017cde:	d102      	bne.n	8017ce6 <_sbrk_r+0x1a>
 8017ce0:	682b      	ldr	r3, [r5, #0]
 8017ce2:	b103      	cbz	r3, 8017ce6 <_sbrk_r+0x1a>
 8017ce4:	6023      	str	r3, [r4, #0]
 8017ce6:	bd38      	pop	{r3, r4, r5, pc}
 8017ce8:	2000e674 	.word	0x2000e674

08017cec <siprintf>:
 8017cec:	b40e      	push	{r1, r2, r3}
 8017cee:	b500      	push	{lr}
 8017cf0:	b09c      	sub	sp, #112	; 0x70
 8017cf2:	ab1d      	add	r3, sp, #116	; 0x74
 8017cf4:	9002      	str	r0, [sp, #8]
 8017cf6:	9006      	str	r0, [sp, #24]
 8017cf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017cfc:	4809      	ldr	r0, [pc, #36]	; (8017d24 <siprintf+0x38>)
 8017cfe:	9107      	str	r1, [sp, #28]
 8017d00:	9104      	str	r1, [sp, #16]
 8017d02:	4909      	ldr	r1, [pc, #36]	; (8017d28 <siprintf+0x3c>)
 8017d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d08:	9105      	str	r1, [sp, #20]
 8017d0a:	6800      	ldr	r0, [r0, #0]
 8017d0c:	9301      	str	r3, [sp, #4]
 8017d0e:	a902      	add	r1, sp, #8
 8017d10:	f000 f900 	bl	8017f14 <_svfiprintf_r>
 8017d14:	9b02      	ldr	r3, [sp, #8]
 8017d16:	2200      	movs	r2, #0
 8017d18:	701a      	strb	r2, [r3, #0]
 8017d1a:	b01c      	add	sp, #112	; 0x70
 8017d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017d20:	b003      	add	sp, #12
 8017d22:	4770      	bx	lr
 8017d24:	2000006c 	.word	0x2000006c
 8017d28:	ffff0208 	.word	0xffff0208

08017d2c <_strtol_l.constprop.0>:
 8017d2c:	2b01      	cmp	r3, #1
 8017d2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d32:	d001      	beq.n	8017d38 <_strtol_l.constprop.0+0xc>
 8017d34:	2b24      	cmp	r3, #36	; 0x24
 8017d36:	d906      	bls.n	8017d46 <_strtol_l.constprop.0+0x1a>
 8017d38:	f7ff fe3e 	bl	80179b8 <__errno>
 8017d3c:	2316      	movs	r3, #22
 8017d3e:	6003      	str	r3, [r0, #0]
 8017d40:	2000      	movs	r0, #0
 8017d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d46:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8017e2c <_strtol_l.constprop.0+0x100>
 8017d4a:	460d      	mov	r5, r1
 8017d4c:	462e      	mov	r6, r5
 8017d4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017d52:	f814 700c 	ldrb.w	r7, [r4, ip]
 8017d56:	f017 0708 	ands.w	r7, r7, #8
 8017d5a:	d1f7      	bne.n	8017d4c <_strtol_l.constprop.0+0x20>
 8017d5c:	2c2d      	cmp	r4, #45	; 0x2d
 8017d5e:	d132      	bne.n	8017dc6 <_strtol_l.constprop.0+0x9a>
 8017d60:	782c      	ldrb	r4, [r5, #0]
 8017d62:	2701      	movs	r7, #1
 8017d64:	1cb5      	adds	r5, r6, #2
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d05b      	beq.n	8017e22 <_strtol_l.constprop.0+0xf6>
 8017d6a:	2b10      	cmp	r3, #16
 8017d6c:	d109      	bne.n	8017d82 <_strtol_l.constprop.0+0x56>
 8017d6e:	2c30      	cmp	r4, #48	; 0x30
 8017d70:	d107      	bne.n	8017d82 <_strtol_l.constprop.0+0x56>
 8017d72:	782c      	ldrb	r4, [r5, #0]
 8017d74:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017d78:	2c58      	cmp	r4, #88	; 0x58
 8017d7a:	d14d      	bne.n	8017e18 <_strtol_l.constprop.0+0xec>
 8017d7c:	786c      	ldrb	r4, [r5, #1]
 8017d7e:	2310      	movs	r3, #16
 8017d80:	3502      	adds	r5, #2
 8017d82:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8017d86:	f108 38ff 	add.w	r8, r8, #4294967295
 8017d8a:	f04f 0c00 	mov.w	ip, #0
 8017d8e:	fbb8 f9f3 	udiv	r9, r8, r3
 8017d92:	4666      	mov	r6, ip
 8017d94:	fb03 8a19 	mls	sl, r3, r9, r8
 8017d98:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8017d9c:	f1be 0f09 	cmp.w	lr, #9
 8017da0:	d816      	bhi.n	8017dd0 <_strtol_l.constprop.0+0xa4>
 8017da2:	4674      	mov	r4, lr
 8017da4:	42a3      	cmp	r3, r4
 8017da6:	dd24      	ble.n	8017df2 <_strtol_l.constprop.0+0xc6>
 8017da8:	f1bc 0f00 	cmp.w	ip, #0
 8017dac:	db1e      	blt.n	8017dec <_strtol_l.constprop.0+0xc0>
 8017dae:	45b1      	cmp	r9, r6
 8017db0:	d31c      	bcc.n	8017dec <_strtol_l.constprop.0+0xc0>
 8017db2:	d101      	bne.n	8017db8 <_strtol_l.constprop.0+0x8c>
 8017db4:	45a2      	cmp	sl, r4
 8017db6:	db19      	blt.n	8017dec <_strtol_l.constprop.0+0xc0>
 8017db8:	fb06 4603 	mla	r6, r6, r3, r4
 8017dbc:	f04f 0c01 	mov.w	ip, #1
 8017dc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017dc4:	e7e8      	b.n	8017d98 <_strtol_l.constprop.0+0x6c>
 8017dc6:	2c2b      	cmp	r4, #43	; 0x2b
 8017dc8:	bf04      	itt	eq
 8017dca:	782c      	ldrbeq	r4, [r5, #0]
 8017dcc:	1cb5      	addeq	r5, r6, #2
 8017dce:	e7ca      	b.n	8017d66 <_strtol_l.constprop.0+0x3a>
 8017dd0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8017dd4:	f1be 0f19 	cmp.w	lr, #25
 8017dd8:	d801      	bhi.n	8017dde <_strtol_l.constprop.0+0xb2>
 8017dda:	3c37      	subs	r4, #55	; 0x37
 8017ddc:	e7e2      	b.n	8017da4 <_strtol_l.constprop.0+0x78>
 8017dde:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8017de2:	f1be 0f19 	cmp.w	lr, #25
 8017de6:	d804      	bhi.n	8017df2 <_strtol_l.constprop.0+0xc6>
 8017de8:	3c57      	subs	r4, #87	; 0x57
 8017dea:	e7db      	b.n	8017da4 <_strtol_l.constprop.0+0x78>
 8017dec:	f04f 3cff 	mov.w	ip, #4294967295
 8017df0:	e7e6      	b.n	8017dc0 <_strtol_l.constprop.0+0x94>
 8017df2:	f1bc 0f00 	cmp.w	ip, #0
 8017df6:	da05      	bge.n	8017e04 <_strtol_l.constprop.0+0xd8>
 8017df8:	2322      	movs	r3, #34	; 0x22
 8017dfa:	6003      	str	r3, [r0, #0]
 8017dfc:	4646      	mov	r6, r8
 8017dfe:	b942      	cbnz	r2, 8017e12 <_strtol_l.constprop.0+0xe6>
 8017e00:	4630      	mov	r0, r6
 8017e02:	e79e      	b.n	8017d42 <_strtol_l.constprop.0+0x16>
 8017e04:	b107      	cbz	r7, 8017e08 <_strtol_l.constprop.0+0xdc>
 8017e06:	4276      	negs	r6, r6
 8017e08:	2a00      	cmp	r2, #0
 8017e0a:	d0f9      	beq.n	8017e00 <_strtol_l.constprop.0+0xd4>
 8017e0c:	f1bc 0f00 	cmp.w	ip, #0
 8017e10:	d000      	beq.n	8017e14 <_strtol_l.constprop.0+0xe8>
 8017e12:	1e69      	subs	r1, r5, #1
 8017e14:	6011      	str	r1, [r2, #0]
 8017e16:	e7f3      	b.n	8017e00 <_strtol_l.constprop.0+0xd4>
 8017e18:	2430      	movs	r4, #48	; 0x30
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d1b1      	bne.n	8017d82 <_strtol_l.constprop.0+0x56>
 8017e1e:	2308      	movs	r3, #8
 8017e20:	e7af      	b.n	8017d82 <_strtol_l.constprop.0+0x56>
 8017e22:	2c30      	cmp	r4, #48	; 0x30
 8017e24:	d0a5      	beq.n	8017d72 <_strtol_l.constprop.0+0x46>
 8017e26:	230a      	movs	r3, #10
 8017e28:	e7ab      	b.n	8017d82 <_strtol_l.constprop.0+0x56>
 8017e2a:	bf00      	nop
 8017e2c:	08018ba5 	.word	0x08018ba5

08017e30 <strtol>:
 8017e30:	4613      	mov	r3, r2
 8017e32:	460a      	mov	r2, r1
 8017e34:	4601      	mov	r1, r0
 8017e36:	4802      	ldr	r0, [pc, #8]	; (8017e40 <strtol+0x10>)
 8017e38:	6800      	ldr	r0, [r0, #0]
 8017e3a:	f7ff bf77 	b.w	8017d2c <_strtol_l.constprop.0>
 8017e3e:	bf00      	nop
 8017e40:	2000006c 	.word	0x2000006c

08017e44 <__malloc_lock>:
 8017e44:	4801      	ldr	r0, [pc, #4]	; (8017e4c <__malloc_lock+0x8>)
 8017e46:	f7ef bcaa 	b.w	800779e <__retarget_lock_acquire_recursive>
 8017e4a:	bf00      	nop
 8017e4c:	20000c20 	.word	0x20000c20

08017e50 <__malloc_unlock>:
 8017e50:	4801      	ldr	r0, [pc, #4]	; (8017e58 <__malloc_unlock+0x8>)
 8017e52:	f7ef bcb8 	b.w	80077c6 <__retarget_lock_release_recursive>
 8017e56:	bf00      	nop
 8017e58:	20000c20 	.word	0x20000c20

08017e5c <__ssputs_r>:
 8017e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e60:	688e      	ldr	r6, [r1, #8]
 8017e62:	429e      	cmp	r6, r3
 8017e64:	4682      	mov	sl, r0
 8017e66:	460c      	mov	r4, r1
 8017e68:	4690      	mov	r8, r2
 8017e6a:	461f      	mov	r7, r3
 8017e6c:	d838      	bhi.n	8017ee0 <__ssputs_r+0x84>
 8017e6e:	898a      	ldrh	r2, [r1, #12]
 8017e70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017e74:	d032      	beq.n	8017edc <__ssputs_r+0x80>
 8017e76:	6825      	ldr	r5, [r4, #0]
 8017e78:	6909      	ldr	r1, [r1, #16]
 8017e7a:	eba5 0901 	sub.w	r9, r5, r1
 8017e7e:	6965      	ldr	r5, [r4, #20]
 8017e80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017e84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017e88:	3301      	adds	r3, #1
 8017e8a:	444b      	add	r3, r9
 8017e8c:	106d      	asrs	r5, r5, #1
 8017e8e:	429d      	cmp	r5, r3
 8017e90:	bf38      	it	cc
 8017e92:	461d      	movcc	r5, r3
 8017e94:	0553      	lsls	r3, r2, #21
 8017e96:	d531      	bpl.n	8017efc <__ssputs_r+0xa0>
 8017e98:	4629      	mov	r1, r5
 8017e9a:	f7ff fe39 	bl	8017b10 <_malloc_r>
 8017e9e:	4606      	mov	r6, r0
 8017ea0:	b950      	cbnz	r0, 8017eb8 <__ssputs_r+0x5c>
 8017ea2:	230c      	movs	r3, #12
 8017ea4:	f8ca 3000 	str.w	r3, [sl]
 8017ea8:	89a3      	ldrh	r3, [r4, #12]
 8017eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017eae:	81a3      	strh	r3, [r4, #12]
 8017eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8017eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017eb8:	6921      	ldr	r1, [r4, #16]
 8017eba:	464a      	mov	r2, r9
 8017ebc:	f7ff fda6 	bl	8017a0c <memcpy>
 8017ec0:	89a3      	ldrh	r3, [r4, #12]
 8017ec2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017eca:	81a3      	strh	r3, [r4, #12]
 8017ecc:	6126      	str	r6, [r4, #16]
 8017ece:	6165      	str	r5, [r4, #20]
 8017ed0:	444e      	add	r6, r9
 8017ed2:	eba5 0509 	sub.w	r5, r5, r9
 8017ed6:	6026      	str	r6, [r4, #0]
 8017ed8:	60a5      	str	r5, [r4, #8]
 8017eda:	463e      	mov	r6, r7
 8017edc:	42be      	cmp	r6, r7
 8017ede:	d900      	bls.n	8017ee2 <__ssputs_r+0x86>
 8017ee0:	463e      	mov	r6, r7
 8017ee2:	6820      	ldr	r0, [r4, #0]
 8017ee4:	4632      	mov	r2, r6
 8017ee6:	4641      	mov	r1, r8
 8017ee8:	f000 faa8 	bl	801843c <memmove>
 8017eec:	68a3      	ldr	r3, [r4, #8]
 8017eee:	1b9b      	subs	r3, r3, r6
 8017ef0:	60a3      	str	r3, [r4, #8]
 8017ef2:	6823      	ldr	r3, [r4, #0]
 8017ef4:	4433      	add	r3, r6
 8017ef6:	6023      	str	r3, [r4, #0]
 8017ef8:	2000      	movs	r0, #0
 8017efa:	e7db      	b.n	8017eb4 <__ssputs_r+0x58>
 8017efc:	462a      	mov	r2, r5
 8017efe:	f000 fab7 	bl	8018470 <_realloc_r>
 8017f02:	4606      	mov	r6, r0
 8017f04:	2800      	cmp	r0, #0
 8017f06:	d1e1      	bne.n	8017ecc <__ssputs_r+0x70>
 8017f08:	6921      	ldr	r1, [r4, #16]
 8017f0a:	4650      	mov	r0, sl
 8017f0c:	f7ff fd94 	bl	8017a38 <_free_r>
 8017f10:	e7c7      	b.n	8017ea2 <__ssputs_r+0x46>
	...

08017f14 <_svfiprintf_r>:
 8017f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f18:	4698      	mov	r8, r3
 8017f1a:	898b      	ldrh	r3, [r1, #12]
 8017f1c:	061b      	lsls	r3, r3, #24
 8017f1e:	b09d      	sub	sp, #116	; 0x74
 8017f20:	4607      	mov	r7, r0
 8017f22:	460d      	mov	r5, r1
 8017f24:	4614      	mov	r4, r2
 8017f26:	d50e      	bpl.n	8017f46 <_svfiprintf_r+0x32>
 8017f28:	690b      	ldr	r3, [r1, #16]
 8017f2a:	b963      	cbnz	r3, 8017f46 <_svfiprintf_r+0x32>
 8017f2c:	2140      	movs	r1, #64	; 0x40
 8017f2e:	f7ff fdef 	bl	8017b10 <_malloc_r>
 8017f32:	6028      	str	r0, [r5, #0]
 8017f34:	6128      	str	r0, [r5, #16]
 8017f36:	b920      	cbnz	r0, 8017f42 <_svfiprintf_r+0x2e>
 8017f38:	230c      	movs	r3, #12
 8017f3a:	603b      	str	r3, [r7, #0]
 8017f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8017f40:	e0d1      	b.n	80180e6 <_svfiprintf_r+0x1d2>
 8017f42:	2340      	movs	r3, #64	; 0x40
 8017f44:	616b      	str	r3, [r5, #20]
 8017f46:	2300      	movs	r3, #0
 8017f48:	9309      	str	r3, [sp, #36]	; 0x24
 8017f4a:	2320      	movs	r3, #32
 8017f4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017f50:	f8cd 800c 	str.w	r8, [sp, #12]
 8017f54:	2330      	movs	r3, #48	; 0x30
 8017f56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018100 <_svfiprintf_r+0x1ec>
 8017f5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017f5e:	f04f 0901 	mov.w	r9, #1
 8017f62:	4623      	mov	r3, r4
 8017f64:	469a      	mov	sl, r3
 8017f66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017f6a:	b10a      	cbz	r2, 8017f70 <_svfiprintf_r+0x5c>
 8017f6c:	2a25      	cmp	r2, #37	; 0x25
 8017f6e:	d1f9      	bne.n	8017f64 <_svfiprintf_r+0x50>
 8017f70:	ebba 0b04 	subs.w	fp, sl, r4
 8017f74:	d00b      	beq.n	8017f8e <_svfiprintf_r+0x7a>
 8017f76:	465b      	mov	r3, fp
 8017f78:	4622      	mov	r2, r4
 8017f7a:	4629      	mov	r1, r5
 8017f7c:	4638      	mov	r0, r7
 8017f7e:	f7ff ff6d 	bl	8017e5c <__ssputs_r>
 8017f82:	3001      	adds	r0, #1
 8017f84:	f000 80aa 	beq.w	80180dc <_svfiprintf_r+0x1c8>
 8017f88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017f8a:	445a      	add	r2, fp
 8017f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8017f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	f000 80a2 	beq.w	80180dc <_svfiprintf_r+0x1c8>
 8017f98:	2300      	movs	r3, #0
 8017f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8017f9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017fa2:	f10a 0a01 	add.w	sl, sl, #1
 8017fa6:	9304      	str	r3, [sp, #16]
 8017fa8:	9307      	str	r3, [sp, #28]
 8017faa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017fae:	931a      	str	r3, [sp, #104]	; 0x68
 8017fb0:	4654      	mov	r4, sl
 8017fb2:	2205      	movs	r2, #5
 8017fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fb8:	4851      	ldr	r0, [pc, #324]	; (8018100 <_svfiprintf_r+0x1ec>)
 8017fba:	f7e8 f919 	bl	80001f0 <memchr>
 8017fbe:	9a04      	ldr	r2, [sp, #16]
 8017fc0:	b9d8      	cbnz	r0, 8017ffa <_svfiprintf_r+0xe6>
 8017fc2:	06d0      	lsls	r0, r2, #27
 8017fc4:	bf44      	itt	mi
 8017fc6:	2320      	movmi	r3, #32
 8017fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017fcc:	0711      	lsls	r1, r2, #28
 8017fce:	bf44      	itt	mi
 8017fd0:	232b      	movmi	r3, #43	; 0x2b
 8017fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8017fda:	2b2a      	cmp	r3, #42	; 0x2a
 8017fdc:	d015      	beq.n	801800a <_svfiprintf_r+0xf6>
 8017fde:	9a07      	ldr	r2, [sp, #28]
 8017fe0:	4654      	mov	r4, sl
 8017fe2:	2000      	movs	r0, #0
 8017fe4:	f04f 0c0a 	mov.w	ip, #10
 8017fe8:	4621      	mov	r1, r4
 8017fea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017fee:	3b30      	subs	r3, #48	; 0x30
 8017ff0:	2b09      	cmp	r3, #9
 8017ff2:	d94e      	bls.n	8018092 <_svfiprintf_r+0x17e>
 8017ff4:	b1b0      	cbz	r0, 8018024 <_svfiprintf_r+0x110>
 8017ff6:	9207      	str	r2, [sp, #28]
 8017ff8:	e014      	b.n	8018024 <_svfiprintf_r+0x110>
 8017ffa:	eba0 0308 	sub.w	r3, r0, r8
 8017ffe:	fa09 f303 	lsl.w	r3, r9, r3
 8018002:	4313      	orrs	r3, r2
 8018004:	9304      	str	r3, [sp, #16]
 8018006:	46a2      	mov	sl, r4
 8018008:	e7d2      	b.n	8017fb0 <_svfiprintf_r+0x9c>
 801800a:	9b03      	ldr	r3, [sp, #12]
 801800c:	1d19      	adds	r1, r3, #4
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	9103      	str	r1, [sp, #12]
 8018012:	2b00      	cmp	r3, #0
 8018014:	bfbb      	ittet	lt
 8018016:	425b      	neglt	r3, r3
 8018018:	f042 0202 	orrlt.w	r2, r2, #2
 801801c:	9307      	strge	r3, [sp, #28]
 801801e:	9307      	strlt	r3, [sp, #28]
 8018020:	bfb8      	it	lt
 8018022:	9204      	strlt	r2, [sp, #16]
 8018024:	7823      	ldrb	r3, [r4, #0]
 8018026:	2b2e      	cmp	r3, #46	; 0x2e
 8018028:	d10c      	bne.n	8018044 <_svfiprintf_r+0x130>
 801802a:	7863      	ldrb	r3, [r4, #1]
 801802c:	2b2a      	cmp	r3, #42	; 0x2a
 801802e:	d135      	bne.n	801809c <_svfiprintf_r+0x188>
 8018030:	9b03      	ldr	r3, [sp, #12]
 8018032:	1d1a      	adds	r2, r3, #4
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	9203      	str	r2, [sp, #12]
 8018038:	2b00      	cmp	r3, #0
 801803a:	bfb8      	it	lt
 801803c:	f04f 33ff 	movlt.w	r3, #4294967295
 8018040:	3402      	adds	r4, #2
 8018042:	9305      	str	r3, [sp, #20]
 8018044:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018110 <_svfiprintf_r+0x1fc>
 8018048:	7821      	ldrb	r1, [r4, #0]
 801804a:	2203      	movs	r2, #3
 801804c:	4650      	mov	r0, sl
 801804e:	f7e8 f8cf 	bl	80001f0 <memchr>
 8018052:	b140      	cbz	r0, 8018066 <_svfiprintf_r+0x152>
 8018054:	2340      	movs	r3, #64	; 0x40
 8018056:	eba0 000a 	sub.w	r0, r0, sl
 801805a:	fa03 f000 	lsl.w	r0, r3, r0
 801805e:	9b04      	ldr	r3, [sp, #16]
 8018060:	4303      	orrs	r3, r0
 8018062:	3401      	adds	r4, #1
 8018064:	9304      	str	r3, [sp, #16]
 8018066:	f814 1b01 	ldrb.w	r1, [r4], #1
 801806a:	4826      	ldr	r0, [pc, #152]	; (8018104 <_svfiprintf_r+0x1f0>)
 801806c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018070:	2206      	movs	r2, #6
 8018072:	f7e8 f8bd 	bl	80001f0 <memchr>
 8018076:	2800      	cmp	r0, #0
 8018078:	d038      	beq.n	80180ec <_svfiprintf_r+0x1d8>
 801807a:	4b23      	ldr	r3, [pc, #140]	; (8018108 <_svfiprintf_r+0x1f4>)
 801807c:	bb1b      	cbnz	r3, 80180c6 <_svfiprintf_r+0x1b2>
 801807e:	9b03      	ldr	r3, [sp, #12]
 8018080:	3307      	adds	r3, #7
 8018082:	f023 0307 	bic.w	r3, r3, #7
 8018086:	3308      	adds	r3, #8
 8018088:	9303      	str	r3, [sp, #12]
 801808a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801808c:	4433      	add	r3, r6
 801808e:	9309      	str	r3, [sp, #36]	; 0x24
 8018090:	e767      	b.n	8017f62 <_svfiprintf_r+0x4e>
 8018092:	fb0c 3202 	mla	r2, ip, r2, r3
 8018096:	460c      	mov	r4, r1
 8018098:	2001      	movs	r0, #1
 801809a:	e7a5      	b.n	8017fe8 <_svfiprintf_r+0xd4>
 801809c:	2300      	movs	r3, #0
 801809e:	3401      	adds	r4, #1
 80180a0:	9305      	str	r3, [sp, #20]
 80180a2:	4619      	mov	r1, r3
 80180a4:	f04f 0c0a 	mov.w	ip, #10
 80180a8:	4620      	mov	r0, r4
 80180aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80180ae:	3a30      	subs	r2, #48	; 0x30
 80180b0:	2a09      	cmp	r2, #9
 80180b2:	d903      	bls.n	80180bc <_svfiprintf_r+0x1a8>
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d0c5      	beq.n	8018044 <_svfiprintf_r+0x130>
 80180b8:	9105      	str	r1, [sp, #20]
 80180ba:	e7c3      	b.n	8018044 <_svfiprintf_r+0x130>
 80180bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80180c0:	4604      	mov	r4, r0
 80180c2:	2301      	movs	r3, #1
 80180c4:	e7f0      	b.n	80180a8 <_svfiprintf_r+0x194>
 80180c6:	ab03      	add	r3, sp, #12
 80180c8:	9300      	str	r3, [sp, #0]
 80180ca:	462a      	mov	r2, r5
 80180cc:	4b0f      	ldr	r3, [pc, #60]	; (801810c <_svfiprintf_r+0x1f8>)
 80180ce:	a904      	add	r1, sp, #16
 80180d0:	4638      	mov	r0, r7
 80180d2:	f3af 8000 	nop.w
 80180d6:	1c42      	adds	r2, r0, #1
 80180d8:	4606      	mov	r6, r0
 80180da:	d1d6      	bne.n	801808a <_svfiprintf_r+0x176>
 80180dc:	89ab      	ldrh	r3, [r5, #12]
 80180de:	065b      	lsls	r3, r3, #25
 80180e0:	f53f af2c 	bmi.w	8017f3c <_svfiprintf_r+0x28>
 80180e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80180e6:	b01d      	add	sp, #116	; 0x74
 80180e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180ec:	ab03      	add	r3, sp, #12
 80180ee:	9300      	str	r3, [sp, #0]
 80180f0:	462a      	mov	r2, r5
 80180f2:	4b06      	ldr	r3, [pc, #24]	; (801810c <_svfiprintf_r+0x1f8>)
 80180f4:	a904      	add	r1, sp, #16
 80180f6:	4638      	mov	r0, r7
 80180f8:	f000 f87a 	bl	80181f0 <_printf_i>
 80180fc:	e7eb      	b.n	80180d6 <_svfiprintf_r+0x1c2>
 80180fe:	bf00      	nop
 8018100:	08018ca5 	.word	0x08018ca5
 8018104:	08018caf 	.word	0x08018caf
 8018108:	00000000 	.word	0x00000000
 801810c:	08017e5d 	.word	0x08017e5d
 8018110:	08018cab 	.word	0x08018cab

08018114 <_printf_common>:
 8018114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018118:	4616      	mov	r6, r2
 801811a:	4699      	mov	r9, r3
 801811c:	688a      	ldr	r2, [r1, #8]
 801811e:	690b      	ldr	r3, [r1, #16]
 8018120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018124:	4293      	cmp	r3, r2
 8018126:	bfb8      	it	lt
 8018128:	4613      	movlt	r3, r2
 801812a:	6033      	str	r3, [r6, #0]
 801812c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018130:	4607      	mov	r7, r0
 8018132:	460c      	mov	r4, r1
 8018134:	b10a      	cbz	r2, 801813a <_printf_common+0x26>
 8018136:	3301      	adds	r3, #1
 8018138:	6033      	str	r3, [r6, #0]
 801813a:	6823      	ldr	r3, [r4, #0]
 801813c:	0699      	lsls	r1, r3, #26
 801813e:	bf42      	ittt	mi
 8018140:	6833      	ldrmi	r3, [r6, #0]
 8018142:	3302      	addmi	r3, #2
 8018144:	6033      	strmi	r3, [r6, #0]
 8018146:	6825      	ldr	r5, [r4, #0]
 8018148:	f015 0506 	ands.w	r5, r5, #6
 801814c:	d106      	bne.n	801815c <_printf_common+0x48>
 801814e:	f104 0a19 	add.w	sl, r4, #25
 8018152:	68e3      	ldr	r3, [r4, #12]
 8018154:	6832      	ldr	r2, [r6, #0]
 8018156:	1a9b      	subs	r3, r3, r2
 8018158:	42ab      	cmp	r3, r5
 801815a:	dc26      	bgt.n	80181aa <_printf_common+0x96>
 801815c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018160:	1e13      	subs	r3, r2, #0
 8018162:	6822      	ldr	r2, [r4, #0]
 8018164:	bf18      	it	ne
 8018166:	2301      	movne	r3, #1
 8018168:	0692      	lsls	r2, r2, #26
 801816a:	d42b      	bmi.n	80181c4 <_printf_common+0xb0>
 801816c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018170:	4649      	mov	r1, r9
 8018172:	4638      	mov	r0, r7
 8018174:	47c0      	blx	r8
 8018176:	3001      	adds	r0, #1
 8018178:	d01e      	beq.n	80181b8 <_printf_common+0xa4>
 801817a:	6823      	ldr	r3, [r4, #0]
 801817c:	68e5      	ldr	r5, [r4, #12]
 801817e:	6832      	ldr	r2, [r6, #0]
 8018180:	f003 0306 	and.w	r3, r3, #6
 8018184:	2b04      	cmp	r3, #4
 8018186:	bf08      	it	eq
 8018188:	1aad      	subeq	r5, r5, r2
 801818a:	68a3      	ldr	r3, [r4, #8]
 801818c:	6922      	ldr	r2, [r4, #16]
 801818e:	bf0c      	ite	eq
 8018190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018194:	2500      	movne	r5, #0
 8018196:	4293      	cmp	r3, r2
 8018198:	bfc4      	itt	gt
 801819a:	1a9b      	subgt	r3, r3, r2
 801819c:	18ed      	addgt	r5, r5, r3
 801819e:	2600      	movs	r6, #0
 80181a0:	341a      	adds	r4, #26
 80181a2:	42b5      	cmp	r5, r6
 80181a4:	d11a      	bne.n	80181dc <_printf_common+0xc8>
 80181a6:	2000      	movs	r0, #0
 80181a8:	e008      	b.n	80181bc <_printf_common+0xa8>
 80181aa:	2301      	movs	r3, #1
 80181ac:	4652      	mov	r2, sl
 80181ae:	4649      	mov	r1, r9
 80181b0:	4638      	mov	r0, r7
 80181b2:	47c0      	blx	r8
 80181b4:	3001      	adds	r0, #1
 80181b6:	d103      	bne.n	80181c0 <_printf_common+0xac>
 80181b8:	f04f 30ff 	mov.w	r0, #4294967295
 80181bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181c0:	3501      	adds	r5, #1
 80181c2:	e7c6      	b.n	8018152 <_printf_common+0x3e>
 80181c4:	18e1      	adds	r1, r4, r3
 80181c6:	1c5a      	adds	r2, r3, #1
 80181c8:	2030      	movs	r0, #48	; 0x30
 80181ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80181ce:	4422      	add	r2, r4
 80181d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80181d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80181d8:	3302      	adds	r3, #2
 80181da:	e7c7      	b.n	801816c <_printf_common+0x58>
 80181dc:	2301      	movs	r3, #1
 80181de:	4622      	mov	r2, r4
 80181e0:	4649      	mov	r1, r9
 80181e2:	4638      	mov	r0, r7
 80181e4:	47c0      	blx	r8
 80181e6:	3001      	adds	r0, #1
 80181e8:	d0e6      	beq.n	80181b8 <_printf_common+0xa4>
 80181ea:	3601      	adds	r6, #1
 80181ec:	e7d9      	b.n	80181a2 <_printf_common+0x8e>
	...

080181f0 <_printf_i>:
 80181f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80181f4:	7e0f      	ldrb	r7, [r1, #24]
 80181f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80181f8:	2f78      	cmp	r7, #120	; 0x78
 80181fa:	4691      	mov	r9, r2
 80181fc:	4680      	mov	r8, r0
 80181fe:	460c      	mov	r4, r1
 8018200:	469a      	mov	sl, r3
 8018202:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018206:	d807      	bhi.n	8018218 <_printf_i+0x28>
 8018208:	2f62      	cmp	r7, #98	; 0x62
 801820a:	d80a      	bhi.n	8018222 <_printf_i+0x32>
 801820c:	2f00      	cmp	r7, #0
 801820e:	f000 80d8 	beq.w	80183c2 <_printf_i+0x1d2>
 8018212:	2f58      	cmp	r7, #88	; 0x58
 8018214:	f000 80a3 	beq.w	801835e <_printf_i+0x16e>
 8018218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801821c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018220:	e03a      	b.n	8018298 <_printf_i+0xa8>
 8018222:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018226:	2b15      	cmp	r3, #21
 8018228:	d8f6      	bhi.n	8018218 <_printf_i+0x28>
 801822a:	a101      	add	r1, pc, #4	; (adr r1, 8018230 <_printf_i+0x40>)
 801822c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018230:	08018289 	.word	0x08018289
 8018234:	0801829d 	.word	0x0801829d
 8018238:	08018219 	.word	0x08018219
 801823c:	08018219 	.word	0x08018219
 8018240:	08018219 	.word	0x08018219
 8018244:	08018219 	.word	0x08018219
 8018248:	0801829d 	.word	0x0801829d
 801824c:	08018219 	.word	0x08018219
 8018250:	08018219 	.word	0x08018219
 8018254:	08018219 	.word	0x08018219
 8018258:	08018219 	.word	0x08018219
 801825c:	080183a9 	.word	0x080183a9
 8018260:	080182cd 	.word	0x080182cd
 8018264:	0801838b 	.word	0x0801838b
 8018268:	08018219 	.word	0x08018219
 801826c:	08018219 	.word	0x08018219
 8018270:	080183cb 	.word	0x080183cb
 8018274:	08018219 	.word	0x08018219
 8018278:	080182cd 	.word	0x080182cd
 801827c:	08018219 	.word	0x08018219
 8018280:	08018219 	.word	0x08018219
 8018284:	08018393 	.word	0x08018393
 8018288:	682b      	ldr	r3, [r5, #0]
 801828a:	1d1a      	adds	r2, r3, #4
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	602a      	str	r2, [r5, #0]
 8018290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018298:	2301      	movs	r3, #1
 801829a:	e0a3      	b.n	80183e4 <_printf_i+0x1f4>
 801829c:	6820      	ldr	r0, [r4, #0]
 801829e:	6829      	ldr	r1, [r5, #0]
 80182a0:	0606      	lsls	r6, r0, #24
 80182a2:	f101 0304 	add.w	r3, r1, #4
 80182a6:	d50a      	bpl.n	80182be <_printf_i+0xce>
 80182a8:	680e      	ldr	r6, [r1, #0]
 80182aa:	602b      	str	r3, [r5, #0]
 80182ac:	2e00      	cmp	r6, #0
 80182ae:	da03      	bge.n	80182b8 <_printf_i+0xc8>
 80182b0:	232d      	movs	r3, #45	; 0x2d
 80182b2:	4276      	negs	r6, r6
 80182b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80182b8:	485e      	ldr	r0, [pc, #376]	; (8018434 <_printf_i+0x244>)
 80182ba:	230a      	movs	r3, #10
 80182bc:	e019      	b.n	80182f2 <_printf_i+0x102>
 80182be:	680e      	ldr	r6, [r1, #0]
 80182c0:	602b      	str	r3, [r5, #0]
 80182c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80182c6:	bf18      	it	ne
 80182c8:	b236      	sxthne	r6, r6
 80182ca:	e7ef      	b.n	80182ac <_printf_i+0xbc>
 80182cc:	682b      	ldr	r3, [r5, #0]
 80182ce:	6820      	ldr	r0, [r4, #0]
 80182d0:	1d19      	adds	r1, r3, #4
 80182d2:	6029      	str	r1, [r5, #0]
 80182d4:	0601      	lsls	r1, r0, #24
 80182d6:	d501      	bpl.n	80182dc <_printf_i+0xec>
 80182d8:	681e      	ldr	r6, [r3, #0]
 80182da:	e002      	b.n	80182e2 <_printf_i+0xf2>
 80182dc:	0646      	lsls	r6, r0, #25
 80182de:	d5fb      	bpl.n	80182d8 <_printf_i+0xe8>
 80182e0:	881e      	ldrh	r6, [r3, #0]
 80182e2:	4854      	ldr	r0, [pc, #336]	; (8018434 <_printf_i+0x244>)
 80182e4:	2f6f      	cmp	r7, #111	; 0x6f
 80182e6:	bf0c      	ite	eq
 80182e8:	2308      	moveq	r3, #8
 80182ea:	230a      	movne	r3, #10
 80182ec:	2100      	movs	r1, #0
 80182ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80182f2:	6865      	ldr	r5, [r4, #4]
 80182f4:	60a5      	str	r5, [r4, #8]
 80182f6:	2d00      	cmp	r5, #0
 80182f8:	bfa2      	ittt	ge
 80182fa:	6821      	ldrge	r1, [r4, #0]
 80182fc:	f021 0104 	bicge.w	r1, r1, #4
 8018300:	6021      	strge	r1, [r4, #0]
 8018302:	b90e      	cbnz	r6, 8018308 <_printf_i+0x118>
 8018304:	2d00      	cmp	r5, #0
 8018306:	d04d      	beq.n	80183a4 <_printf_i+0x1b4>
 8018308:	4615      	mov	r5, r2
 801830a:	fbb6 f1f3 	udiv	r1, r6, r3
 801830e:	fb03 6711 	mls	r7, r3, r1, r6
 8018312:	5dc7      	ldrb	r7, [r0, r7]
 8018314:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018318:	4637      	mov	r7, r6
 801831a:	42bb      	cmp	r3, r7
 801831c:	460e      	mov	r6, r1
 801831e:	d9f4      	bls.n	801830a <_printf_i+0x11a>
 8018320:	2b08      	cmp	r3, #8
 8018322:	d10b      	bne.n	801833c <_printf_i+0x14c>
 8018324:	6823      	ldr	r3, [r4, #0]
 8018326:	07de      	lsls	r6, r3, #31
 8018328:	d508      	bpl.n	801833c <_printf_i+0x14c>
 801832a:	6923      	ldr	r3, [r4, #16]
 801832c:	6861      	ldr	r1, [r4, #4]
 801832e:	4299      	cmp	r1, r3
 8018330:	bfde      	ittt	le
 8018332:	2330      	movle	r3, #48	; 0x30
 8018334:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018338:	f105 35ff 	addle.w	r5, r5, #4294967295
 801833c:	1b52      	subs	r2, r2, r5
 801833e:	6122      	str	r2, [r4, #16]
 8018340:	f8cd a000 	str.w	sl, [sp]
 8018344:	464b      	mov	r3, r9
 8018346:	aa03      	add	r2, sp, #12
 8018348:	4621      	mov	r1, r4
 801834a:	4640      	mov	r0, r8
 801834c:	f7ff fee2 	bl	8018114 <_printf_common>
 8018350:	3001      	adds	r0, #1
 8018352:	d14c      	bne.n	80183ee <_printf_i+0x1fe>
 8018354:	f04f 30ff 	mov.w	r0, #4294967295
 8018358:	b004      	add	sp, #16
 801835a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801835e:	4835      	ldr	r0, [pc, #212]	; (8018434 <_printf_i+0x244>)
 8018360:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8018364:	6829      	ldr	r1, [r5, #0]
 8018366:	6823      	ldr	r3, [r4, #0]
 8018368:	f851 6b04 	ldr.w	r6, [r1], #4
 801836c:	6029      	str	r1, [r5, #0]
 801836e:	061d      	lsls	r5, r3, #24
 8018370:	d514      	bpl.n	801839c <_printf_i+0x1ac>
 8018372:	07df      	lsls	r7, r3, #31
 8018374:	bf44      	itt	mi
 8018376:	f043 0320 	orrmi.w	r3, r3, #32
 801837a:	6023      	strmi	r3, [r4, #0]
 801837c:	b91e      	cbnz	r6, 8018386 <_printf_i+0x196>
 801837e:	6823      	ldr	r3, [r4, #0]
 8018380:	f023 0320 	bic.w	r3, r3, #32
 8018384:	6023      	str	r3, [r4, #0]
 8018386:	2310      	movs	r3, #16
 8018388:	e7b0      	b.n	80182ec <_printf_i+0xfc>
 801838a:	6823      	ldr	r3, [r4, #0]
 801838c:	f043 0320 	orr.w	r3, r3, #32
 8018390:	6023      	str	r3, [r4, #0]
 8018392:	2378      	movs	r3, #120	; 0x78
 8018394:	4828      	ldr	r0, [pc, #160]	; (8018438 <_printf_i+0x248>)
 8018396:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801839a:	e7e3      	b.n	8018364 <_printf_i+0x174>
 801839c:	0659      	lsls	r1, r3, #25
 801839e:	bf48      	it	mi
 80183a0:	b2b6      	uxthmi	r6, r6
 80183a2:	e7e6      	b.n	8018372 <_printf_i+0x182>
 80183a4:	4615      	mov	r5, r2
 80183a6:	e7bb      	b.n	8018320 <_printf_i+0x130>
 80183a8:	682b      	ldr	r3, [r5, #0]
 80183aa:	6826      	ldr	r6, [r4, #0]
 80183ac:	6961      	ldr	r1, [r4, #20]
 80183ae:	1d18      	adds	r0, r3, #4
 80183b0:	6028      	str	r0, [r5, #0]
 80183b2:	0635      	lsls	r5, r6, #24
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	d501      	bpl.n	80183bc <_printf_i+0x1cc>
 80183b8:	6019      	str	r1, [r3, #0]
 80183ba:	e002      	b.n	80183c2 <_printf_i+0x1d2>
 80183bc:	0670      	lsls	r0, r6, #25
 80183be:	d5fb      	bpl.n	80183b8 <_printf_i+0x1c8>
 80183c0:	8019      	strh	r1, [r3, #0]
 80183c2:	2300      	movs	r3, #0
 80183c4:	6123      	str	r3, [r4, #16]
 80183c6:	4615      	mov	r5, r2
 80183c8:	e7ba      	b.n	8018340 <_printf_i+0x150>
 80183ca:	682b      	ldr	r3, [r5, #0]
 80183cc:	1d1a      	adds	r2, r3, #4
 80183ce:	602a      	str	r2, [r5, #0]
 80183d0:	681d      	ldr	r5, [r3, #0]
 80183d2:	6862      	ldr	r2, [r4, #4]
 80183d4:	2100      	movs	r1, #0
 80183d6:	4628      	mov	r0, r5
 80183d8:	f7e7 ff0a 	bl	80001f0 <memchr>
 80183dc:	b108      	cbz	r0, 80183e2 <_printf_i+0x1f2>
 80183de:	1b40      	subs	r0, r0, r5
 80183e0:	6060      	str	r0, [r4, #4]
 80183e2:	6863      	ldr	r3, [r4, #4]
 80183e4:	6123      	str	r3, [r4, #16]
 80183e6:	2300      	movs	r3, #0
 80183e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80183ec:	e7a8      	b.n	8018340 <_printf_i+0x150>
 80183ee:	6923      	ldr	r3, [r4, #16]
 80183f0:	462a      	mov	r2, r5
 80183f2:	4649      	mov	r1, r9
 80183f4:	4640      	mov	r0, r8
 80183f6:	47d0      	blx	sl
 80183f8:	3001      	adds	r0, #1
 80183fa:	d0ab      	beq.n	8018354 <_printf_i+0x164>
 80183fc:	6823      	ldr	r3, [r4, #0]
 80183fe:	079b      	lsls	r3, r3, #30
 8018400:	d413      	bmi.n	801842a <_printf_i+0x23a>
 8018402:	68e0      	ldr	r0, [r4, #12]
 8018404:	9b03      	ldr	r3, [sp, #12]
 8018406:	4298      	cmp	r0, r3
 8018408:	bfb8      	it	lt
 801840a:	4618      	movlt	r0, r3
 801840c:	e7a4      	b.n	8018358 <_printf_i+0x168>
 801840e:	2301      	movs	r3, #1
 8018410:	4632      	mov	r2, r6
 8018412:	4649      	mov	r1, r9
 8018414:	4640      	mov	r0, r8
 8018416:	47d0      	blx	sl
 8018418:	3001      	adds	r0, #1
 801841a:	d09b      	beq.n	8018354 <_printf_i+0x164>
 801841c:	3501      	adds	r5, #1
 801841e:	68e3      	ldr	r3, [r4, #12]
 8018420:	9903      	ldr	r1, [sp, #12]
 8018422:	1a5b      	subs	r3, r3, r1
 8018424:	42ab      	cmp	r3, r5
 8018426:	dcf2      	bgt.n	801840e <_printf_i+0x21e>
 8018428:	e7eb      	b.n	8018402 <_printf_i+0x212>
 801842a:	2500      	movs	r5, #0
 801842c:	f104 0619 	add.w	r6, r4, #25
 8018430:	e7f5      	b.n	801841e <_printf_i+0x22e>
 8018432:	bf00      	nop
 8018434:	08018cb6 	.word	0x08018cb6
 8018438:	08018cc7 	.word	0x08018cc7

0801843c <memmove>:
 801843c:	4288      	cmp	r0, r1
 801843e:	b510      	push	{r4, lr}
 8018440:	eb01 0402 	add.w	r4, r1, r2
 8018444:	d902      	bls.n	801844c <memmove+0x10>
 8018446:	4284      	cmp	r4, r0
 8018448:	4623      	mov	r3, r4
 801844a:	d807      	bhi.n	801845c <memmove+0x20>
 801844c:	1e43      	subs	r3, r0, #1
 801844e:	42a1      	cmp	r1, r4
 8018450:	d008      	beq.n	8018464 <memmove+0x28>
 8018452:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018456:	f803 2f01 	strb.w	r2, [r3, #1]!
 801845a:	e7f8      	b.n	801844e <memmove+0x12>
 801845c:	4402      	add	r2, r0
 801845e:	4601      	mov	r1, r0
 8018460:	428a      	cmp	r2, r1
 8018462:	d100      	bne.n	8018466 <memmove+0x2a>
 8018464:	bd10      	pop	{r4, pc}
 8018466:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801846a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801846e:	e7f7      	b.n	8018460 <memmove+0x24>

08018470 <_realloc_r>:
 8018470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018474:	4680      	mov	r8, r0
 8018476:	4614      	mov	r4, r2
 8018478:	460e      	mov	r6, r1
 801847a:	b921      	cbnz	r1, 8018486 <_realloc_r+0x16>
 801847c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018480:	4611      	mov	r1, r2
 8018482:	f7ff bb45 	b.w	8017b10 <_malloc_r>
 8018486:	b92a      	cbnz	r2, 8018494 <_realloc_r+0x24>
 8018488:	f7ff fad6 	bl	8017a38 <_free_r>
 801848c:	4625      	mov	r5, r4
 801848e:	4628      	mov	r0, r5
 8018490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018494:	f000 f81b 	bl	80184ce <_malloc_usable_size_r>
 8018498:	4284      	cmp	r4, r0
 801849a:	4607      	mov	r7, r0
 801849c:	d802      	bhi.n	80184a4 <_realloc_r+0x34>
 801849e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80184a2:	d812      	bhi.n	80184ca <_realloc_r+0x5a>
 80184a4:	4621      	mov	r1, r4
 80184a6:	4640      	mov	r0, r8
 80184a8:	f7ff fb32 	bl	8017b10 <_malloc_r>
 80184ac:	4605      	mov	r5, r0
 80184ae:	2800      	cmp	r0, #0
 80184b0:	d0ed      	beq.n	801848e <_realloc_r+0x1e>
 80184b2:	42bc      	cmp	r4, r7
 80184b4:	4622      	mov	r2, r4
 80184b6:	4631      	mov	r1, r6
 80184b8:	bf28      	it	cs
 80184ba:	463a      	movcs	r2, r7
 80184bc:	f7ff faa6 	bl	8017a0c <memcpy>
 80184c0:	4631      	mov	r1, r6
 80184c2:	4640      	mov	r0, r8
 80184c4:	f7ff fab8 	bl	8017a38 <_free_r>
 80184c8:	e7e1      	b.n	801848e <_realloc_r+0x1e>
 80184ca:	4635      	mov	r5, r6
 80184cc:	e7df      	b.n	801848e <_realloc_r+0x1e>

080184ce <_malloc_usable_size_r>:
 80184ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80184d2:	1f18      	subs	r0, r3, #4
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	bfbc      	itt	lt
 80184d8:	580b      	ldrlt	r3, [r1, r0]
 80184da:	18c0      	addlt	r0, r0, r3
 80184dc:	4770      	bx	lr
	...

080184e0 <_init>:
 80184e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184e2:	bf00      	nop
 80184e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184e6:	bc08      	pop	{r3}
 80184e8:	469e      	mov	lr, r3
 80184ea:	4770      	bx	lr

080184ec <_fini>:
 80184ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184ee:	bf00      	nop
 80184f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184f2:	bc08      	pop	{r3}
 80184f4:	469e      	mov	lr, r3
 80184f6:	4770      	bx	lr
