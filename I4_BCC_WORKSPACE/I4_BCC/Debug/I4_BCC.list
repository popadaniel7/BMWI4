
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000edcc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  0800ef6c  0800ef6c  0001ef6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f744  0800f744  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800f744  0800f744  0001f744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f74c  0800f74c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f74c  0800f74c  0001f74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f750  0800f750  0001f750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800f754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052d0  20000078  0800f7cc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005348  0800f7cc  00025348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002db9e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ab4  00000000  00000000  0004dc46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002480  00000000  00000000  00054700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021b0  00000000  00000000  00056b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021596  00000000  00000000  00058d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003aa64  00000000  00000000  0007a2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5a67  00000000  00000000  000b4d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016a791  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009794  00000000  00000000  0016a7e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ef54 	.word	0x0800ef54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800ef54 	.word	0x0800ef54

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <BtcRxVal>:
	return E_OK;

}

StdReturnType BtcRxVal()
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

	if(BtcReceivedDataOnBluetooth >= BTC_RX_HVAC_TEMPERATUREVALUE_MIN && BtcReceivedDataOnBluetooth <= BTC_RX_HVAC_TEMPERATUREVALUE_MAX)
 80004e8:	4bec      	ldr	r3, [pc, #944]	; (800089c <BtcRxVal+0x3b8>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b95      	cmp	r3, #149	; 0x95
 80004ee:	d908      	bls.n	8000502 <BtcRxVal+0x1e>
 80004f0:	4bea      	ldr	r3, [pc, #936]	; (800089c <BtcRxVal+0x3b8>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2ba6      	cmp	r3, #166	; 0xa6
 80004f6:	d804      	bhi.n	8000502 <BtcRxVal+0x1e>
	{

		Btc_TemperatureValue = BtcReceivedDataOnBluetooth;
 80004f8:	4be8      	ldr	r3, [pc, #928]	; (800089c <BtcRxVal+0x3b8>)
 80004fa:	781a      	ldrb	r2, [r3, #0]
 80004fc:	4be8      	ldr	r3, [pc, #928]	; (80008a0 <BtcRxVal+0x3bc>)
 80004fe:	701a      	strb	r2, [r3, #0]
 8000500:	e00b      	b.n	800051a <BtcRxVal+0x36>

	}
	else if(BtcReceivedDataOnBluetooth >= BTC_RX_HVAC_FANVALUE_MIN && BtcReceivedDataOnBluetooth <= BTC_RX_HVAC_FANVALUE_MAX)
 8000502:	4be6      	ldr	r3, [pc, #920]	; (800089c <BtcRxVal+0x3b8>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2ba9      	cmp	r3, #169	; 0xa9
 8000508:	d907      	bls.n	800051a <BtcRxVal+0x36>
 800050a:	4be4      	ldr	r3, [pc, #912]	; (800089c <BtcRxVal+0x3b8>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2bb1      	cmp	r3, #177	; 0xb1
 8000510:	d803      	bhi.n	800051a <BtcRxVal+0x36>
	{

		Btc_FanValue = BtcReceivedDataOnBluetooth;
 8000512:	4be2      	ldr	r3, [pc, #904]	; (800089c <BtcRxVal+0x3b8>)
 8000514:	781a      	ldrb	r2, [r3, #0]
 8000516:	4be3      	ldr	r3, [pc, #908]	; (80008a4 <BtcRxVal+0x3c0>)
 8000518:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	switch(BtcReceivedDataOnBluetooth)
 800051a:	4be0      	ldr	r3, [pc, #896]	; (800089c <BtcRxVal+0x3b8>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	3b01      	subs	r3, #1
 8000520:	2bd5      	cmp	r3, #213	; 0xd5
 8000522:	f200 827e 	bhi.w	8000a22 <BtcRxVal+0x53e>
 8000526:	a201      	add	r2, pc, #4	; (adr r2, 800052c <BtcRxVal+0x48>)
 8000528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052c:	080008c9 	.word	0x080008c9
 8000530:	080008d1 	.word	0x080008d1
 8000534:	080008d9 	.word	0x080008d9
 8000538:	080008e7 	.word	0x080008e7
 800053c:	080008ef 	.word	0x080008ef
 8000540:	080008fd 	.word	0x080008fd
 8000544:	08000905 	.word	0x08000905
 8000548:	08000913 	.word	0x08000913
 800054c:	0800091b 	.word	0x0800091b
 8000550:	08000929 	.word	0x08000929
 8000554:	08000931 	.word	0x08000931
 8000558:	08000939 	.word	0x08000939
 800055c:	08000941 	.word	0x08000941
 8000560:	08000949 	.word	0x08000949
 8000564:	08000951 	.word	0x08000951
 8000568:	08000959 	.word	0x08000959
 800056c:	08000961 	.word	0x08000961
 8000570:	08000969 	.word	0x08000969
 8000574:	08000971 	.word	0x08000971
 8000578:	08000979 	.word	0x08000979
 800057c:	08000885 	.word	0x08000885
 8000580:	0800088d 	.word	0x0800088d
 8000584:	08000a23 	.word	0x08000a23
 8000588:	08000a23 	.word	0x08000a23
 800058c:	08000a23 	.word	0x08000a23
 8000590:	08000a23 	.word	0x08000a23
 8000594:	08000a23 	.word	0x08000a23
 8000598:	08000a23 	.word	0x08000a23
 800059c:	08000a23 	.word	0x08000a23
 80005a0:	08000a23 	.word	0x08000a23
 80005a4:	08000a23 	.word	0x08000a23
 80005a8:	08000a23 	.word	0x08000a23
 80005ac:	08000a23 	.word	0x08000a23
 80005b0:	08000a23 	.word	0x08000a23
 80005b4:	08000a23 	.word	0x08000a23
 80005b8:	08000a23 	.word	0x08000a23
 80005bc:	08000a23 	.word	0x08000a23
 80005c0:	08000a23 	.word	0x08000a23
 80005c4:	08000a23 	.word	0x08000a23
 80005c8:	08000a23 	.word	0x08000a23
 80005cc:	08000a23 	.word	0x08000a23
 80005d0:	08000a23 	.word	0x08000a23
 80005d4:	08000a23 	.word	0x08000a23
 80005d8:	08000a23 	.word	0x08000a23
 80005dc:	08000a23 	.word	0x08000a23
 80005e0:	08000a23 	.word	0x08000a23
 80005e4:	08000a23 	.word	0x08000a23
 80005e8:	08000a23 	.word	0x08000a23
 80005ec:	08000a23 	.word	0x08000a23
 80005f0:	08000a23 	.word	0x08000a23
 80005f4:	08000a23 	.word	0x08000a23
 80005f8:	08000a23 	.word	0x08000a23
 80005fc:	08000a23 	.word	0x08000a23
 8000600:	08000a23 	.word	0x08000a23
 8000604:	08000a23 	.word	0x08000a23
 8000608:	08000a23 	.word	0x08000a23
 800060c:	08000a23 	.word	0x08000a23
 8000610:	08000a23 	.word	0x08000a23
 8000614:	08000a23 	.word	0x08000a23
 8000618:	08000a23 	.word	0x08000a23
 800061c:	08000a23 	.word	0x08000a23
 8000620:	08000a23 	.word	0x08000a23
 8000624:	08000a23 	.word	0x08000a23
 8000628:	08000a23 	.word	0x08000a23
 800062c:	08000a23 	.word	0x08000a23
 8000630:	08000a23 	.word	0x08000a23
 8000634:	08000a23 	.word	0x08000a23
 8000638:	08000a23 	.word	0x08000a23
 800063c:	08000a23 	.word	0x08000a23
 8000640:	08000a23 	.word	0x08000a23
 8000644:	08000a23 	.word	0x08000a23
 8000648:	08000a23 	.word	0x08000a23
 800064c:	08000a23 	.word	0x08000a23
 8000650:	08000a23 	.word	0x08000a23
 8000654:	08000a23 	.word	0x08000a23
 8000658:	08000a23 	.word	0x08000a23
 800065c:	08000a23 	.word	0x08000a23
 8000660:	08000a23 	.word	0x08000a23
 8000664:	08000a23 	.word	0x08000a23
 8000668:	08000a23 	.word	0x08000a23
 800066c:	08000a23 	.word	0x08000a23
 8000670:	08000a23 	.word	0x08000a23
 8000674:	08000a23 	.word	0x08000a23
 8000678:	08000a23 	.word	0x08000a23
 800067c:	08000a23 	.word	0x08000a23
 8000680:	08000a23 	.word	0x08000a23
 8000684:	08000a23 	.word	0x08000a23
 8000688:	08000a23 	.word	0x08000a23
 800068c:	08000a23 	.word	0x08000a23
 8000690:	08000a23 	.word	0x08000a23
 8000694:	08000a23 	.word	0x08000a23
 8000698:	08000a23 	.word	0x08000a23
 800069c:	08000a23 	.word	0x08000a23
 80006a0:	08000a23 	.word	0x08000a23
 80006a4:	08000a23 	.word	0x08000a23
 80006a8:	08000a23 	.word	0x08000a23
 80006ac:	08000a23 	.word	0x08000a23
 80006b0:	08000a23 	.word	0x08000a23
 80006b4:	08000a23 	.word	0x08000a23
 80006b8:	08000895 	.word	0x08000895
 80006bc:	080008b1 	.word	0x080008b1
 80006c0:	080008b9 	.word	0x080008b9
 80006c4:	080008c1 	.word	0x080008c1
 80006c8:	08000a23 	.word	0x08000a23
 80006cc:	08000a23 	.word	0x08000a23
 80006d0:	08000a23 	.word	0x08000a23
 80006d4:	08000a23 	.word	0x08000a23
 80006d8:	08000a23 	.word	0x08000a23
 80006dc:	08000a23 	.word	0x08000a23
 80006e0:	08000a23 	.word	0x08000a23
 80006e4:	08000a23 	.word	0x08000a23
 80006e8:	08000a23 	.word	0x08000a23
 80006ec:	08000a23 	.word	0x08000a23
 80006f0:	08000a23 	.word	0x08000a23
 80006f4:	08000a23 	.word	0x08000a23
 80006f8:	08000a23 	.word	0x08000a23
 80006fc:	08000a23 	.word	0x08000a23
 8000700:	08000a23 	.word	0x08000a23
 8000704:	08000a23 	.word	0x08000a23
 8000708:	08000a23 	.word	0x08000a23
 800070c:	08000a23 	.word	0x08000a23
 8000710:	08000a23 	.word	0x08000a23
 8000714:	08000a23 	.word	0x08000a23
 8000718:	08000a23 	.word	0x08000a23
 800071c:	08000a23 	.word	0x08000a23
 8000720:	08000a23 	.word	0x08000a23
 8000724:	08000a23 	.word	0x08000a23
 8000728:	08000a23 	.word	0x08000a23
 800072c:	08000a23 	.word	0x08000a23
 8000730:	08000a23 	.word	0x08000a23
 8000734:	08000a23 	.word	0x08000a23
 8000738:	08000a23 	.word	0x08000a23
 800073c:	08000a23 	.word	0x08000a23
 8000740:	08000a23 	.word	0x08000a23
 8000744:	08000a23 	.word	0x08000a23
 8000748:	08000a23 	.word	0x08000a23
 800074c:	08000a23 	.word	0x08000a23
 8000750:	08000a23 	.word	0x08000a23
 8000754:	08000a23 	.word	0x08000a23
 8000758:	08000a23 	.word	0x08000a23
 800075c:	08000a23 	.word	0x08000a23
 8000760:	08000a23 	.word	0x08000a23
 8000764:	08000a23 	.word	0x08000a23
 8000768:	08000a23 	.word	0x08000a23
 800076c:	08000a23 	.word	0x08000a23
 8000770:	08000a23 	.word	0x08000a23
 8000774:	08000a23 	.word	0x08000a23
 8000778:	08000a23 	.word	0x08000a23
 800077c:	08000a23 	.word	0x08000a23
 8000780:	08000a23 	.word	0x08000a23
 8000784:	08000a23 	.word	0x08000a23
 8000788:	08000a23 	.word	0x08000a23
 800078c:	08000a23 	.word	0x08000a23
 8000790:	08000a23 	.word	0x08000a23
 8000794:	08000a23 	.word	0x08000a23
 8000798:	08000a23 	.word	0x08000a23
 800079c:	08000a23 	.word	0x08000a23
 80007a0:	08000a23 	.word	0x08000a23
 80007a4:	08000a23 	.word	0x08000a23
 80007a8:	08000a23 	.word	0x08000a23
 80007ac:	08000a23 	.word	0x08000a23
 80007b0:	08000a23 	.word	0x08000a23
 80007b4:	08000a23 	.word	0x08000a23
 80007b8:	08000a23 	.word	0x08000a23
 80007bc:	08000a23 	.word	0x08000a23
 80007c0:	08000a23 	.word	0x08000a23
 80007c4:	08000a23 	.word	0x08000a23
 80007c8:	08000a23 	.word	0x08000a23
 80007cc:	08000a23 	.word	0x08000a23
 80007d0:	08000a23 	.word	0x08000a23
 80007d4:	08000a23 	.word	0x08000a23
 80007d8:	08000a23 	.word	0x08000a23
 80007dc:	08000a23 	.word	0x08000a23
 80007e0:	08000a23 	.word	0x08000a23
 80007e4:	08000a23 	.word	0x08000a23
 80007e8:	08000a23 	.word	0x08000a23
 80007ec:	08000a23 	.word	0x08000a23
 80007f0:	08000a23 	.word	0x08000a23
 80007f4:	08000a23 	.word	0x08000a23
 80007f8:	08000a23 	.word	0x08000a23
 80007fc:	08000a23 	.word	0x08000a23
 8000800:	08000a23 	.word	0x08000a23
 8000804:	08000a23 	.word	0x08000a23
 8000808:	08000a23 	.word	0x08000a23
 800080c:	08000a23 	.word	0x08000a23
 8000810:	08000a23 	.word	0x08000a23
 8000814:	08000a23 	.word	0x08000a23
 8000818:	08000a23 	.word	0x08000a23
 800081c:	08000a23 	.word	0x08000a23
 8000820:	08000a23 	.word	0x08000a23
 8000824:	08000a23 	.word	0x08000a23
 8000828:	08000a23 	.word	0x08000a23
 800082c:	08000a23 	.word	0x08000a23
 8000830:	08000a23 	.word	0x08000a23
 8000834:	08000a23 	.word	0x08000a23
 8000838:	08000a23 	.word	0x08000a23
 800083c:	08000a23 	.word	0x08000a23
 8000840:	08000a23 	.word	0x08000a23
 8000844:	08000a23 	.word	0x08000a23
 8000848:	08000981 	.word	0x08000981
 800084c:	08000989 	.word	0x08000989
 8000850:	08000997 	.word	0x08000997
 8000854:	080009ab 	.word	0x080009ab
 8000858:	080009b3 	.word	0x080009b3
 800085c:	08000a0d 	.word	0x08000a0d
 8000860:	08000a1b 	.word	0x08000a1b
 8000864:	080009bb 	.word	0x080009bb
 8000868:	080009c3 	.word	0x080009c3
 800086c:	080009cb 	.word	0x080009cb
 8000870:	080009d9 	.word	0x080009d9
 8000874:	080009e1 	.word	0x080009e1
 8000878:	080009ef 	.word	0x080009ef
 800087c:	080009f7 	.word	0x080009f7
 8000880:	08000a05 	.word	0x08000a05
	{

		case BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:

			Btc_ReverseLight = BTC_RX_EXTLIGHTS_REVERSELIGHT_ON;
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <BtcRxVal+0x3c4>)
 8000886:	2215      	movs	r2, #21
 8000888:	701a      	strb	r2, [r3, #0]

			break;
 800088a:	e0cb      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:

			Btc_ReverseLight = BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <BtcRxVal+0x3c4>)
 800088e:	2216      	movs	r2, #22
 8000890:	701a      	strb	r2, [r3, #0]

			break;
 8000892:	e0c7      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_EXTLIGHTS_POSITIONZERO:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <BtcRxVal+0x3c8>)
 8000896:	2264      	movs	r2, #100	; 0x64
 8000898:	701a      	strb	r2, [r3, #0]

			break;
 800089a:	e0c3      	b.n	8000a24 <BtcRxVal+0x540>
 800089c:	20000094 	.word	0x20000094
 80008a0:	200000cb 	.word	0x200000cb
 80008a4:	200000cc 	.word	0x200000cc
 80008a8:	200000bf 	.word	0x200000bf
 80008ac:	200000b6 	.word	0x200000b6

		case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 80008b0:	4b5f      	ldr	r3, [pc, #380]	; (8000a30 <BtcRxVal+0x54c>)
 80008b2:	2265      	movs	r2, #101	; 0x65
 80008b4:	701a      	strb	r2, [r3, #0]

			break;
 80008b6:	e0b5      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 80008b8:	4b5d      	ldr	r3, [pc, #372]	; (8000a30 <BtcRxVal+0x54c>)
 80008ba:	2266      	movs	r2, #102	; 0x66
 80008bc:	701a      	strb	r2, [r3, #0]

			break;
 80008be:	e0b1      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 80008c0:	4b5b      	ldr	r3, [pc, #364]	; (8000a30 <BtcRxVal+0x54c>)
 80008c2:	2267      	movs	r2, #103	; 0x67
 80008c4:	701a      	strb	r2, [r3, #0]

			break;
 80008c6:	e0ad      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_CENLOC_ON:

			Btc_CenLoc = STD_HIGH;
 80008c8:	4b5a      	ldr	r3, [pc, #360]	; (8000a34 <BtcRxVal+0x550>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	701a      	strb	r2, [r3, #0]

			break;
 80008ce:	e0a9      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_CENLOC_OFF:

			Btc_CenLoc = STD_LOW;
 80008d0:	4b58      	ldr	r3, [pc, #352]	; (8000a34 <BtcRxVal+0x550>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]

			break;
 80008d6:	e0a5      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_EXTLIGHTS_HIGBEAM_ON:

			Btc_HighBeam = STD_HIGH;
 80008d8:	4b57      	ldr	r3, [pc, #348]	; (8000a38 <BtcRxVal+0x554>)
 80008da:	2201      	movs	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]
			Btc_FlashHighBeam = STD_LOW;
 80008de:	4b57      	ldr	r3, [pc, #348]	; (8000a3c <BtcRxVal+0x558>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]

			break;
 80008e4:	e09e      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_EXTLIGHTS_HIGBEAM_OFF:

			Btc_HighBeam = STD_LOW;
 80008e6:	4b54      	ldr	r3, [pc, #336]	; (8000a38 <BtcRxVal+0x554>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]

			break;
 80008ec:	e09a      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_ON:

			Btc_FlashHighBeam = STD_HIGH;
 80008ee:	4b53      	ldr	r3, [pc, #332]	; (8000a3c <BtcRxVal+0x558>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	701a      	strb	r2, [r3, #0]
			Btc_HighBeam = STD_LOW;
 80008f4:	4b50      	ldr	r3, [pc, #320]	; (8000a38 <BtcRxVal+0x554>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]

			break;
 80008fa:	e093      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_OFF:

			Btc_FlashHighBeam = STD_LOW;
 80008fc:	4b4f      	ldr	r3, [pc, #316]	; (8000a3c <BtcRxVal+0x558>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]

			break;
 8000902:	e08f      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:

			Btc_TurnSignalLeft = STD_HIGH;
 8000904:	4b4e      	ldr	r3, [pc, #312]	; (8000a40 <BtcRxVal+0x55c>)
 8000906:	2201      	movs	r2, #1
 8000908:	701a      	strb	r2, [r3, #0]
			Btc_TurnSignalRight = STD_LOW;
 800090a:	4b4e      	ldr	r3, [pc, #312]	; (8000a44 <BtcRxVal+0x560>)
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]

			break;
 8000910:	e088      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:

			Btc_TurnSignalLeft = STD_LOW;
 8000912:	4b4b      	ldr	r3, [pc, #300]	; (8000a40 <BtcRxVal+0x55c>)
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]

			break;
 8000918:	e084      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_ESTLIGHTS_TURNSIGNALRIGHT_ON:

			Btc_TurnSignalRight = STD_HIGH;
 800091a:	4b4a      	ldr	r3, [pc, #296]	; (8000a44 <BtcRxVal+0x560>)
 800091c:	2201      	movs	r2, #1
 800091e:	701a      	strb	r2, [r3, #0]
			Btc_TurnSignalLeft = STD_LOW;
 8000920:	4b47      	ldr	r3, [pc, #284]	; (8000a40 <BtcRxVal+0x55c>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]

			break;
 8000926:	e07d      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_ESTLIGHTS_TURNSIGNALRIGHT_OFF:

			Btc_TurnSignalRight = STD_LOW;
 8000928:	4b46      	ldr	r3, [pc, #280]	; (8000a44 <BtcRxVal+0x560>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]

			break;
 800092e:	e079      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:

			Btc_HazardLight = STD_HIGH;
 8000930:	4b45      	ldr	r3, [pc, #276]	; (8000a48 <BtcRxVal+0x564>)
 8000932:	2201      	movs	r2, #1
 8000934:	701a      	strb	r2, [r3, #0]

			break;
 8000936:	e075      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:

			Btc_HazardLight = STD_LOW;
 8000938:	4b43      	ldr	r3, [pc, #268]	; (8000a48 <BtcRxVal+0x564>)
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]

			break;
 800093e:	e071      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:

			Btc_FrontFogLight = STD_HIGH;
 8000940:	4b42      	ldr	r3, [pc, #264]	; (8000a4c <BtcRxVal+0x568>)
 8000942:	2201      	movs	r2, #1
 8000944:	701a      	strb	r2, [r3, #0]

			break;
 8000946:	e06d      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:

			Btc_FrontFogLight = STD_LOW;
 8000948:	4b40      	ldr	r3, [pc, #256]	; (8000a4c <BtcRxVal+0x568>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]

			break;
 800094e:	e069      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:

			Btc_RearFogLight = STD_HIGH;
 8000950:	4b3f      	ldr	r3, [pc, #252]	; (8000a50 <BtcRxVal+0x56c>)
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]

			break;
 8000956:	e065      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:

			Btc_RearFogLight = STD_LOW;
 8000958:	4b3d      	ldr	r3, [pc, #244]	; (8000a50 <BtcRxVal+0x56c>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]

			break;
 800095e:	e061      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTON:

			Btc_BrakeLight = STD_HIGH;
 8000960:	4b3c      	ldr	r3, [pc, #240]	; (8000a54 <BtcRxVal+0x570>)
 8000962:	2201      	movs	r2, #1
 8000964:	701a      	strb	r2, [r3, #0]

			break;
 8000966:	e05d      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:

			Btc_BrakeLight = STD_LOW;
 8000968:	4b3a      	ldr	r3, [pc, #232]	; (8000a54 <BtcRxVal+0x570>)
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]

			break;
 800096e:	e059      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:

			Btc_IntLights = STD_HIGH;
 8000970:	4b39      	ldr	r3, [pc, #228]	; (8000a58 <BtcRxVal+0x574>)
 8000972:	2201      	movs	r2, #1
 8000974:	701a      	strb	r2, [r3, #0]

			break;
 8000976:	e055      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:

			Btc_IntLights = STD_LOW;
 8000978:	4b37      	ldr	r3, [pc, #220]	; (8000a58 <BtcRxVal+0x574>)
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]

			break;
 800097e:	e051      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_HVAC_NORMALMODE_ON:

			Btc_NormalMode = STD_HIGH;
 8000980:	4b36      	ldr	r3, [pc, #216]	; (8000a5c <BtcRxVal+0x578>)
 8000982:	2201      	movs	r2, #1
 8000984:	701a      	strb	r2, [r3, #0]

			break;
 8000986:	e04d      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_HVAC_RECIRCULATIONMODE_ON:

			Btc_NormalMode = STD_LOW;
 8000988:	4b34      	ldr	r3, [pc, #208]	; (8000a5c <BtcRxVal+0x578>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
			Btc_RecirculationMode = STD_HIGH;
 800098e:	4b34      	ldr	r3, [pc, #208]	; (8000a60 <BtcRxVal+0x57c>)
 8000990:	2201      	movs	r2, #1
 8000992:	701a      	strb	r2, [r3, #0]

			break;
 8000994:	e046      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_HVAC_AUTOMATICMODE_ON:

			Btc_NormalMode = STD_LOW;
 8000996:	4b31      	ldr	r3, [pc, #196]	; (8000a5c <BtcRxVal+0x578>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
			Btc_RecirculationMode = STD_LOW;
 800099c:	4b30      	ldr	r3, [pc, #192]	; (8000a60 <BtcRxVal+0x57c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_HIGH;
 80009a2:	4b30      	ldr	r3, [pc, #192]	; (8000a64 <BtcRxVal+0x580>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]

			break;
 80009a8:	e03c      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_HVAC_BACKWINDOWDEFROSTON:

			Btc_BackwindowDefrost = STD_HIGH;
 80009aa:	4b2f      	ldr	r3, [pc, #188]	; (8000a68 <BtcRxVal+0x584>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	701a      	strb	r2, [r3, #0]

			break;
 80009b0:	e038      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_HVAC_BACKWINDOWDEFROSTOFF:

			Btc_BackwindowDefrost = STD_LOW;
 80009b2:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <BtcRxVal+0x584>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]

			break;
 80009b8:	e034      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_HVAC_AC_ON:

			Btc_AC = STD_HIGH;
 80009ba:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <BtcRxVal+0x588>)
 80009bc:	2201      	movs	r2, #1
 80009be:	701a      	strb	r2, [r3, #0]

			break;
 80009c0:	e030      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_HVAC_AC_OFF:

			Btc_AC = STD_LOW;
 80009c2:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <BtcRxVal+0x588>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]

			break;
 80009c8:	e02c      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_HVAC_LEGVENT_ON:

			Btc_LegVents = STD_HIGH;
 80009ca:	4b29      	ldr	r3, [pc, #164]	; (8000a70 <BtcRxVal+0x58c>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_LOW;
 80009d0:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <BtcRxVal+0x580>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]

			break;
 80009d6:	e025      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_HVAC_LEGVENT_OFF:

			Btc_LegVents = STD_LOW;
 80009d8:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <BtcRxVal+0x58c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]

			break;
 80009de:	e021      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_HVAC_MIDVENT_ON:

			Btc_MidVents = STD_HIGH;
 80009e0:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <BtcRxVal+0x590>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_LOW;
 80009e6:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <BtcRxVal+0x580>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]

			break;
 80009ec:	e01a      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_HVAC_MIDVENT_OFF:

			Btc_MidVents = STD_LOW;
 80009ee:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <BtcRxVal+0x590>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]

			break;
 80009f4:	e016      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_HVAC_WINDSHIELDVENT_ON:

			Btc_WindshieldVents = STD_HIGH;
 80009f6:	4b20      	ldr	r3, [pc, #128]	; (8000a78 <BtcRxVal+0x594>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_LOW;
 80009fc:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <BtcRxVal+0x580>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]

			break;
 8000a02:	e00f      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_HVAC_WINDSHIELDVENT_OFF:

			Btc_WindshieldVents = STD_LOW;
 8000a04:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <BtcRxVal+0x594>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]

			break;
 8000a0a:	e00b      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_HVAC_WINDSHIELDDEFROST_ON:

			Btc_WindshieldDefrost = STD_HIGH;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <BtcRxVal+0x598>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_LOW;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <BtcRxVal+0x580>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]

			break;
 8000a18:	e004      	b.n	8000a24 <BtcRxVal+0x540>

		case BTC_RX_HVAC_WINDSHIELDDEFROST_OFF:

			Btc_WindshieldDefrost = STD_LOW;
 8000a1a:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <BtcRxVal+0x598>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]

			break;
 8000a20:	e000      	b.n	8000a24 <BtcRxVal+0x540>

		default:

			break;
 8000a22:	bf00      	nop

	}

	return 1;
 8000a24:	2301      	movs	r3, #1

}
 8000a26:	4618      	mov	r0, r3
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	200000b6 	.word	0x200000b6
 8000a34:	2000009f 	.word	0x2000009f
 8000a38:	200000b7 	.word	0x200000b7
 8000a3c:	200000b8 	.word	0x200000b8
 8000a40:	200000ba 	.word	0x200000ba
 8000a44:	200000bb 	.word	0x200000bb
 8000a48:	200000bc 	.word	0x200000bc
 8000a4c:	200000b9 	.word	0x200000b9
 8000a50:	200000be 	.word	0x200000be
 8000a54:	200000bd 	.word	0x200000bd
 8000a58:	200000f5 	.word	0x200000f5
 8000a5c:	200000d5 	.word	0x200000d5
 8000a60:	200000d4 	.word	0x200000d4
 8000a64:	200000d3 	.word	0x200000d3
 8000a68:	200000d1 	.word	0x200000d1
 8000a6c:	200000d2 	.word	0x200000d2
 8000a70:	200000cd 	.word	0x200000cd
 8000a74:	200000ce 	.word	0x200000ce
 8000a78:	200000cf 	.word	0x200000cf
 8000a7c:	200000d0 	.word	0x200000d0

08000a80 <BtcEnableUart>:

StdReturnType BtcEnableUart()
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0

	uint8 status = STD_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	71fb      	strb	r3, [r7, #7]

	if(HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1) != E_NOT_OK)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	490e      	ldr	r1, [pc, #56]	; (8000ac8 <BtcEnableUart+0x48>)
 8000a8e:	480f      	ldr	r0, [pc, #60]	; (8000acc <BtcEnableUart+0x4c>)
 8000a90:	f00a fbba 	bl	800b208 <HAL_UART_Receive_IT>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d007      	beq.n	8000aaa <BtcEnableUart+0x2a>
	{
		HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	490a      	ldr	r1, [pc, #40]	; (8000ac8 <BtcEnableUart+0x48>)
 8000a9e:	480b      	ldr	r0, [pc, #44]	; (8000acc <BtcEnableUart+0x4c>)
 8000aa0:	f00a fbb2 	bl	800b208 <HAL_UART_Receive_IT>
		status = E_OK;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	71fb      	strb	r3, [r7, #7]
 8000aa8:	e009      	b.n	8000abe <BtcEnableUart+0x3e>
	}
	else if(HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1) == E_NOT_OK)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4906      	ldr	r1, [pc, #24]	; (8000ac8 <BtcEnableUart+0x48>)
 8000aae:	4807      	ldr	r0, [pc, #28]	; (8000acc <BtcEnableUart+0x4c>)
 8000ab0:	f00a fbaa 	bl	800b208 <HAL_UART_Receive_IT>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d101      	bne.n	8000abe <BtcEnableUart+0x3e>
	{
		status = E_NOT_OK;
 8000aba:	2301      	movs	r3, #1
 8000abc:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* do nothing */
	}

	return status;
 8000abe:	79fb      	ldrb	r3, [r7, #7]

}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000094 	.word	0x20000094
 8000acc:	20000890 	.word	0x20000890

08000ad0 <BtcMainFunction>:

void BtcMainFunction()
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0

	BtcEnableUart();
 8000ad4:	f7ff ffd4 	bl	8000a80 <BtcEnableUart>
	BtcRxVal();
 8000ad8:	f7ff fd04 	bl	80004e4 <BtcRxVal>

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <CenLocState>:

	return E_OK;
}

StdReturnType CenLocState()
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0

	uint8 status = E_OK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	71fb      	strb	r3, [r7, #7]

	if(CenLoc_PreviousState != CenLoc_CurrentState)
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <CenLocState+0x5c>)
 8000aec:	781a      	ldrb	r2, [r3, #0]
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <CenLocState+0x60>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d01b      	beq.n	8000b2e <CenLocState+0x4e>
	{

		CenLoc_ExtLights_LockedState 	= CenLoc_PreviousState;
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <CenLocState+0x5c>)
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <CenLocState+0x64>)
 8000afc:	701a      	strb	r2, [r3, #0]
		CenLoc_ExtLights_UnlockedState 	= CenLoc_CurrentState;
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <CenLocState+0x60>)
 8000b00:	781a      	ldrb	r2, [r3, #0]
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <CenLocState+0x68>)
 8000b04:	701a      	strb	r2, [r3, #0]
		CenLoc_PreviousState 			= CenLoc_CurrentState;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <CenLocState+0x60>)
 8000b08:	781a      	ldrb	r2, [r3, #0]
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <CenLocState+0x5c>)
 8000b0c:	701a      	strb	r2, [r3, #0]
		CenLoc_LockUnlockFlag 			= !CenLoc_CurrentState;
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <CenLocState+0x60>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	bf0c      	ite	eq
 8000b16:	2301      	moveq	r3, #1
 8000b18:	2300      	movne	r3, #0
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <CenLocState+0x6c>)
 8000b20:	701a      	strb	r2, [r3, #0]
		CenLoc_LockCounter 				= STD_LOW;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <CenLocState+0x70>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
		CenLoc_UnlockCounter 			= STD_LOW;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <CenLocState+0x74>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	return status;
 8000b2e:	79fb      	ldrb	r3, [r7, #7]

}
 8000b30:	4618      	mov	r0, r3
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	20000096 	.word	0x20000096
 8000b40:	20000095 	.word	0x20000095
 8000b44:	20000099 	.word	0x20000099
 8000b48:	20000098 	.word	0x20000098
 8000b4c:	20000097 	.word	0x20000097
 8000b50:	2000009c 	.word	0x2000009c
 8000b54:	2000009d 	.word	0x2000009d

08000b58 <CenLocSecAlmStateToOff>:

void CenLocSecAlmStateToOff()
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH)
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <CenLocSecAlmStateToOff+0x1c>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d102      	bne.n	8000b6a <CenLocSecAlmStateToOff+0x12>
	{

		SecAlm_Trigger = STD_LOW;
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <CenLocSecAlmStateToOff+0x20>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	20000095 	.word	0x20000095
 8000b78:	200000f6 	.word	0x200000f6

08000b7c <CenLocRxBtcState>:

void CenLocRxBtcState()
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

	if(Btc_CenLoc == STD_HIGH)
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <CenLocRxBtcState+0x30>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d104      	bne.n	8000b92 <CenLocRxBtcState+0x16>
	{

		CenLoc_CurrentState = Btc_CenLoc;
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <CenLocRxBtcState+0x30>)
 8000b8a:	781a      	ldrb	r2, [r3, #0]
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <CenLocRxBtcState+0x34>)
 8000b8e:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8000b90:	e007      	b.n	8000ba2 <CenLocRxBtcState+0x26>
	else if(Btc_CenLoc == STD_LOW)
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <CenLocRxBtcState+0x30>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d103      	bne.n	8000ba2 <CenLocRxBtcState+0x26>
		CenLoc_CurrentState = Btc_CenLoc;
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <CenLocRxBtcState+0x30>)
 8000b9c:	781a      	ldrb	r2, [r3, #0]
 8000b9e:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <CenLocRxBtcState+0x34>)
 8000ba0:	701a      	strb	r2, [r3, #0]
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	2000009f 	.word	0x2000009f
 8000bb0:	20000095 	.word	0x20000095

08000bb4 <CenLocToggleDoorLED>:

void CenLocToggleDoorLED(uint8 PinState)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CENLOC_DOOR_LED_PORT, CENLOC_DOOR_LED_PIN, PinState);
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	2140      	movs	r1, #64	; 0x40
 8000bc4:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <CenLocToggleDoorLED+0x20>)
 8000bc6:	f004 fe8d 	bl	80058e4 <HAL_GPIO_WritePin>

}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40020400 	.word	0x40020400

08000bd8 <CenLocFollowMeHome>:

void CenLocFollowMeHome()
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0


	CenLoc_Timer5Value = __HAL_TIM_GET_COUNTER(&htim5);
 8000bdc:	4b37      	ldr	r3, [pc, #220]	; (8000cbc <CenLocFollowMeHome+0xe4>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be2:	4a37      	ldr	r2, [pc, #220]	; (8000cc0 <CenLocFollowMeHome+0xe8>)
 8000be4:	6013      	str	r3, [r2, #0]

	if(CenLoc_ExtLights_LockedState == STD_LOW && CenLoc_ExtLights_UnlockedState == STD_HIGH && CenLoc_Timer5StartStopFlag == 0)
 8000be6:	4b37      	ldr	r3, [pc, #220]	; (8000cc4 <CenLocFollowMeHome+0xec>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d115      	bne.n	8000c1a <CenLocFollowMeHome+0x42>
 8000bee:	4b36      	ldr	r3, [pc, #216]	; (8000cc8 <CenLocFollowMeHome+0xf0>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d111      	bne.n	8000c1a <CenLocFollowMeHome+0x42>
 8000bf6:	4b35      	ldr	r3, [pc, #212]	; (8000ccc <CenLocFollowMeHome+0xf4>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d10d      	bne.n	8000c1a <CenLocFollowMeHome+0x42>
	{

		CenLoc_Timer5StartStopFlag = 1;
 8000bfe:	4b33      	ldr	r3, [pc, #204]	; (8000ccc <CenLocFollowMeHome+0xf4>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim5, 0);
 8000c04:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <CenLocFollowMeHome+0xe4>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start(&htim5);
 8000c0c:	482b      	ldr	r0, [pc, #172]	; (8000cbc <CenLocFollowMeHome+0xe4>)
 8000c0e:	f009 f9d9 	bl	8009fc4 <HAL_TIM_Base_Start>
		Timer5ChangeState = 1;
 8000c12:	4b2f      	ldr	r3, [pc, #188]	; (8000cd0 <CenLocFollowMeHome+0xf8>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	701a      	strb	r2, [r3, #0]
 8000c18:	e018      	b.n	8000c4c <CenLocFollowMeHome+0x74>

	}
	else if(CenLoc_ExtLights_LockedState == STD_HIGH && CenLoc_ExtLights_UnlockedState == STD_LOW && CenLoc_Timer5StartStopFlag == 1)
 8000c1a:	4b2a      	ldr	r3, [pc, #168]	; (8000cc4 <CenLocFollowMeHome+0xec>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d114      	bne.n	8000c4c <CenLocFollowMeHome+0x74>
 8000c22:	4b29      	ldr	r3, [pc, #164]	; (8000cc8 <CenLocFollowMeHome+0xf0>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d110      	bne.n	8000c4c <CenLocFollowMeHome+0x74>
 8000c2a:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <CenLocFollowMeHome+0xf4>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d10c      	bne.n	8000c4c <CenLocFollowMeHome+0x74>
	{

		CenLoc_Timer5StartStopFlag = 0;
 8000c32:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <CenLocFollowMeHome+0xf4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim5, 0);
 8000c38:	4b20      	ldr	r3, [pc, #128]	; (8000cbc <CenLocFollowMeHome+0xe4>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start(&htim5);
 8000c40:	481e      	ldr	r0, [pc, #120]	; (8000cbc <CenLocFollowMeHome+0xe4>)
 8000c42:	f009 f9bf 	bl	8009fc4 <HAL_TIM_Base_Start>
		Timer5ChangeState = 0;
 8000c46:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <CenLocFollowMeHome+0xf8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(__HAL_TIM_GET_COUNTER(&htim5) < 100000 && (Timer5ChangeState == 1 || Timer5ChangeState == 0))
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <CenLocFollowMeHome+0xe4>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c52:	4a20      	ldr	r2, [pc, #128]	; (8000cd4 <CenLocFollowMeHome+0xfc>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d80b      	bhi.n	8000c70 <CenLocFollowMeHome+0x98>
 8000c58:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <CenLocFollowMeHome+0xf8>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d003      	beq.n	8000c68 <CenLocFollowMeHome+0x90>
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <CenLocFollowMeHome+0xf8>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d103      	bne.n	8000c70 <CenLocFollowMeHome+0x98>
	{

		CenLoc_FollowMeHomeState = STD_HIGH;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <CenLocFollowMeHome+0x100>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
 8000c6e:	e00e      	b.n	8000c8e <CenLocFollowMeHome+0xb6>

	}
	else if(__HAL_TIM_GET_COUNTER(&htim5) >= 100000)
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <CenLocFollowMeHome+0xe4>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c76:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <CenLocFollowMeHome+0xfc>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d908      	bls.n	8000c8e <CenLocFollowMeHome+0xb6>
	{

		CenLoc_FollowMeHomeState = STD_LOW;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <CenLocFollowMeHome+0x100>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
		Timer5ChangeState = 2;
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <CenLocFollowMeHome+0xf8>)
 8000c84:	2202      	movs	r2, #2
 8000c86:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop(&htim5);
 8000c88:	480c      	ldr	r0, [pc, #48]	; (8000cbc <CenLocFollowMeHome+0xe4>)
 8000c8a:	f009 fa25 	bl	800a0d8 <HAL_TIM_Base_Stop>

	}

	ExtLightsFrontFogLight(CenLoc_FollowMeHomeState);
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <CenLocFollowMeHome+0x100>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fcce 	bl	8001634 <ExtLightsFrontFogLight>
	ExtLightsDayTimeRunningLight(CenLoc_FollowMeHomeState);
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <CenLocFollowMeHome+0x100>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 fcb7 	bl	8001610 <ExtLightsDayTimeRunningLight>
	ExtLightsLowBeam(CenLoc_FollowMeHomeState);
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <CenLocFollowMeHome+0x100>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 fc8e 	bl	80015c8 <ExtLightsLowBeam>
	ExtLightsRearPositionLight(CenLoc_FollowMeHomeState);
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <CenLocFollowMeHome+0x100>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 fcf5 	bl	80016a0 <ExtLightsRearPositionLight>

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000674 	.word	0x20000674
 8000cc0:	200000a8 	.word	0x200000a8
 8000cc4:	20000099 	.word	0x20000099
 8000cc8:	20000098 	.word	0x20000098
 8000ccc:	2000009e 	.word	0x2000009e
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	0001869f 	.word	0x0001869f
 8000cd8:	2000009a 	.word	0x2000009a

08000cdc <CenLocBlinkSignals>:

void CenLocBlinkSignals()
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0

	ExtLightsTurnSignalLeft(CenLoc_BlinkState);
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <CenLocBlinkSignals+0x1c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 fcb7 	bl	8001658 <ExtLightsTurnSignalLeft>
	ExtLightsTurnSignalRight(CenLoc_BlinkState);
 8000cea:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <CenLocBlinkSignals+0x1c>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 fcc4 	bl	800167c <ExtLightsTurnSignalRight>

}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	2000009b 	.word	0x2000009b

08000cfc <CenLocLockUnlockStates>:

StdReturnType CenLocLockUnlockStates()
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0

	uint8 status = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	71fb      	strb	r3, [r7, #7]

	if(CenLoc_CurrentState == STD_HIGH && SecAlm_Trigger == STD_LOW)
 8000d06:	4b96      	ldr	r3, [pc, #600]	; (8000f60 <CenLocLockUnlockStates+0x264>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	f040 8094 	bne.w	8000e38 <CenLocLockUnlockStates+0x13c>
 8000d10:	4b94      	ldr	r3, [pc, #592]	; (8000f64 <CenLocLockUnlockStates+0x268>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	f040 808f 	bne.w	8000e38 <CenLocLockUnlockStates+0x13c>
	{

		HAL_TIM_Base_Stop(&htim3);
 8000d1a:	4893      	ldr	r0, [pc, #588]	; (8000f68 <CenLocLockUnlockStates+0x26c>)
 8000d1c:	f009 f9dc 	bl	800a0d8 <HAL_TIM_Base_Stop>
		CenLocToggleDoorLED(CenLoc_CurrentState);
 8000d20:	4b8f      	ldr	r3, [pc, #572]	; (8000f60 <CenLocLockUnlockStates+0x264>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff45 	bl	8000bb4 <CenLocToggleDoorLED>
		SecAlmToggleAlarmLed(!CenLoc_CurrentState);
 8000d2a:	4b8d      	ldr	r3, [pc, #564]	; (8000f60 <CenLocLockUnlockStates+0x264>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	bf0c      	ite	eq
 8000d32:	2301      	moveq	r3, #1
 8000d34:	2300      	movne	r3, #0
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f001 f87b 	bl	8001e34 <SecAlmToggleAlarmLed>
		CenLocFollowMeHome();
 8000d3e:	f7ff ff4b 	bl	8000bd8 <CenLocFollowMeHome>

		if(CenLoc_LockCounter < 4)
 8000d42:	4b8a      	ldr	r3, [pc, #552]	; (8000f6c <CenLocLockUnlockStates+0x270>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d86c      	bhi.n	8000e24 <CenLocLockUnlockStates+0x128>
		{

			HAL_TIM_Base_Start(&htim2);
 8000d4a:	4889      	ldr	r0, [pc, #548]	; (8000f70 <CenLocLockUnlockStates+0x274>)
 8000d4c:	f009 f93a 	bl	8009fc4 <HAL_TIM_Base_Start>
			CenLoc_Timer2Value = __HAL_TIM_GET_COUNTER(&htim2);
 8000d50:	4b87      	ldr	r3, [pc, #540]	; (8000f70 <CenLocLockUnlockStates+0x274>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d56:	4a87      	ldr	r2, [pc, #540]	; (8000f74 <CenLocLockUnlockStates+0x278>)
 8000d58:	6013      	str	r3, [r2, #0]

			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000d5a:	4b85      	ldr	r3, [pc, #532]	; (8000f70 <CenLocLockUnlockStates+0x274>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d60:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d80a      	bhi.n	8000d7e <CenLocLockUnlockStates+0x82>
			{

				CenLoc_BlinkState = STD_HIGH;
 8000d68:	4b83      	ldr	r3, [pc, #524]	; (8000f78 <CenLocLockUnlockStates+0x27c>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 8000d6e:	4b82      	ldr	r3, [pc, #520]	; (8000f78 <CenLocLockUnlockStates+0x27c>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f93e 	bl	8000ff4 <CenLocToggleBuzzer>
				CenLocBlinkSignals();
 8000d78:	f7ff ffb0 	bl	8000cdc <CenLocBlinkSignals>
		if(CenLoc_LockCounter < 4)
 8000d7c:	e12b      	b.n	8000fd6 <CenLocLockUnlockStates+0x2da>

			}
			else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000d7e:	4b7c      	ldr	r3, [pc, #496]	; (8000f70 <CenLocLockUnlockStates+0x274>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d84:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d911      	bls.n	8000db0 <CenLocLockUnlockStates+0xb4>
 8000d8c:	4b78      	ldr	r3, [pc, #480]	; (8000f70 <CenLocLockUnlockStates+0x274>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d92:	f241 3287 	movw	r2, #4999	; 0x1387
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d80a      	bhi.n	8000db0 <CenLocLockUnlockStates+0xb4>
			{

				CenLoc_BlinkState = STD_LOW;
 8000d9a:	4b77      	ldr	r3, [pc, #476]	; (8000f78 <CenLocLockUnlockStates+0x27c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 8000da0:	4b75      	ldr	r3, [pc, #468]	; (8000f78 <CenLocLockUnlockStates+0x27c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 f925 	bl	8000ff4 <CenLocToggleBuzzer>
				CenLocBlinkSignals();
 8000daa:	f7ff ff97 	bl	8000cdc <CenLocBlinkSignals>
 8000dae:	e042      	b.n	8000e36 <CenLocLockUnlockStates+0x13a>

			}
			else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 8000db0:	4b6f      	ldr	r3, [pc, #444]	; (8000f70 <CenLocLockUnlockStates+0x274>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d911      	bls.n	8000de2 <CenLocLockUnlockStates+0xe6>
 8000dbe:	4b6c      	ldr	r3, [pc, #432]	; (8000f70 <CenLocLockUnlockStates+0x274>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc4:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d80a      	bhi.n	8000de2 <CenLocLockUnlockStates+0xe6>
			{

				CenLoc_BlinkState = STD_HIGH;
 8000dcc:	4b6a      	ldr	r3, [pc, #424]	; (8000f78 <CenLocLockUnlockStates+0x27c>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 8000dd2:	4b69      	ldr	r3, [pc, #420]	; (8000f78 <CenLocLockUnlockStates+0x27c>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f90c 	bl	8000ff4 <CenLocToggleBuzzer>
				CenLocBlinkSignals();
 8000ddc:	f7ff ff7e 	bl	8000cdc <CenLocBlinkSignals>
 8000de0:	e029      	b.n	8000e36 <CenLocLockUnlockStates+0x13a>

			}
			else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8000de2:	4b63      	ldr	r3, [pc, #396]	; (8000f70 <CenLocLockUnlockStates+0x274>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de8:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000dec:	4293      	cmp	r3, r2
 8000dee:	f240 80f2 	bls.w	8000fd6 <CenLocLockUnlockStates+0x2da>
 8000df2:	4b5f      	ldr	r3, [pc, #380]	; (8000f70 <CenLocLockUnlockStates+0x274>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	f200 80ea 	bhi.w	8000fd6 <CenLocLockUnlockStates+0x2da>
			{

				CenLoc_BlinkState = STD_LOW;
 8000e02:	4b5d      	ldr	r3, [pc, #372]	; (8000f78 <CenLocLockUnlockStates+0x27c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 8000e08:	4b5b      	ldr	r3, [pc, #364]	; (8000f78 <CenLocLockUnlockStates+0x27c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 f8f1 	bl	8000ff4 <CenLocToggleBuzzer>
				CenLocBlinkSignals();
 8000e12:	f7ff ff63 	bl	8000cdc <CenLocBlinkSignals>
				CenLoc_LockCounter = CenLoc_LockCounter + 1;
 8000e16:	4b55      	ldr	r3, [pc, #340]	; (8000f6c <CenLocLockUnlockStates+0x270>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b53      	ldr	r3, [pc, #332]	; (8000f6c <CenLocLockUnlockStates+0x270>)
 8000e20:	701a      	strb	r2, [r3, #0]
		if(CenLoc_LockCounter < 4)
 8000e22:	e0d8      	b.n	8000fd6 <CenLocLockUnlockStates+0x2da>

				/* do nothing */

			}
		}
		else if(CenLoc_LockCounter >= 4)
 8000e24:	4b51      	ldr	r3, [pc, #324]	; (8000f6c <CenLocLockUnlockStates+0x270>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	f240 80d4 	bls.w	8000fd6 <CenLocLockUnlockStates+0x2da>
		{

			HAL_TIM_Base_Stop(&htim2);
 8000e2e:	4850      	ldr	r0, [pc, #320]	; (8000f70 <CenLocLockUnlockStates+0x274>)
 8000e30:	f009 f952 	bl	800a0d8 <HAL_TIM_Base_Stop>
		if(CenLoc_LockCounter < 4)
 8000e34:	e0cf      	b.n	8000fd6 <CenLocLockUnlockStates+0x2da>
 8000e36:	e0ce      	b.n	8000fd6 <CenLocLockUnlockStates+0x2da>
			/* do nothing */

		}

	}
	else if(CenLoc_CurrentState == STD_LOW && SecAlm_Trigger == STD_LOW)
 8000e38:	4b49      	ldr	r3, [pc, #292]	; (8000f60 <CenLocLockUnlockStates+0x264>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f040 80cd 	bne.w	8000fdc <CenLocLockUnlockStates+0x2e0>
 8000e42:	4b48      	ldr	r3, [pc, #288]	; (8000f64 <CenLocLockUnlockStates+0x268>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f040 80c8 	bne.w	8000fdc <CenLocLockUnlockStates+0x2e0>
	{

		CenLocToggleDoorLED(CenLoc_CurrentState);
 8000e4c:	4b44      	ldr	r3, [pc, #272]	; (8000f60 <CenLocLockUnlockStates+0x264>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff feaf 	bl	8000bb4 <CenLocToggleDoorLED>
		HAL_TIM_Base_Start(&htim3);
 8000e56:	4844      	ldr	r0, [pc, #272]	; (8000f68 <CenLocLockUnlockStates+0x26c>)
 8000e58:	f009 f8b4 	bl	8009fc4 <HAL_TIM_Base_Start>
		CenLoc_Timer3Value = __HAL_TIM_GET_COUNTER(&htim3);
 8000e5c:	4b42      	ldr	r3, [pc, #264]	; (8000f68 <CenLocLockUnlockStates+0x26c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e62:	4a46      	ldr	r2, [pc, #280]	; (8000f7c <CenLocLockUnlockStates+0x280>)
 8000e64:	6013      	str	r3, [r2, #0]
		CenLocFollowMeHome();
 8000e66:	f7ff feb7 	bl	8000bd8 <CenLocFollowMeHome>

		if(40000 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 41250)
 8000e6a:	4b3f      	ldr	r3, [pc, #252]	; (8000f68 <CenLocLockUnlockStates+0x26c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e70:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d911      	bls.n	8000e9c <CenLocLockUnlockStates+0x1a0>
 8000e78:	4b3b      	ldr	r3, [pc, #236]	; (8000f68 <CenLocLockUnlockStates+0x26c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7e:	f24a 1221 	movw	r2, #41249	; 0xa121
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d80a      	bhi.n	8000e9c <CenLocLockUnlockStates+0x1a0>
		{

			SecAlmToggleAlarmLed(!CenLoc_CurrentState);
 8000e86:	4b36      	ldr	r3, [pc, #216]	; (8000f60 <CenLocLockUnlockStates+0x264>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	bf0c      	ite	eq
 8000e8e:	2301      	moveq	r3, #1
 8000e90:	2300      	movne	r3, #0
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4618      	mov	r0, r3
 8000e96:	f000 ffcd 	bl	8001e34 <SecAlmToggleAlarmLed>
 8000e9a:	e03f      	b.n	8000f1c <CenLocLockUnlockStates+0x220>

		}
		else if(41250 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 42500)
 8000e9c:	4b32      	ldr	r3, [pc, #200]	; (8000f68 <CenLocLockUnlockStates+0x26c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea2:	f24a 1222 	movw	r2, #41250	; 0xa122
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d90c      	bls.n	8000ec4 <CenLocLockUnlockStates+0x1c8>
 8000eaa:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <CenLocLockUnlockStates+0x26c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb0:	f24a 6203 	movw	r2, #42499	; 0xa603
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d805      	bhi.n	8000ec4 <CenLocLockUnlockStates+0x1c8>
		{

			SecAlmToggleAlarmLed(CenLoc_CurrentState);
 8000eb8:	4b29      	ldr	r3, [pc, #164]	; (8000f60 <CenLocLockUnlockStates+0x264>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 ffb9 	bl	8001e34 <SecAlmToggleAlarmLed>
 8000ec2:	e02b      	b.n	8000f1c <CenLocLockUnlockStates+0x220>

		}
		else if(42500 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 43750)
 8000ec4:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <CenLocLockUnlockStates+0x26c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eca:	f24a 6204 	movw	r2, #42500	; 0xa604
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d911      	bls.n	8000ef6 <CenLocLockUnlockStates+0x1fa>
 8000ed2:	4b25      	ldr	r3, [pc, #148]	; (8000f68 <CenLocLockUnlockStates+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed8:	f64a 22e5 	movw	r2, #43749	; 0xaae5
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d80a      	bhi.n	8000ef6 <CenLocLockUnlockStates+0x1fa>
		{

			SecAlmToggleAlarmLed(!CenLoc_CurrentState);
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	; (8000f60 <CenLocLockUnlockStates+0x264>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	bf0c      	ite	eq
 8000ee8:	2301      	moveq	r3, #1
 8000eea:	2300      	movne	r3, #0
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 ffa0 	bl	8001e34 <SecAlmToggleAlarmLed>
 8000ef4:	e012      	b.n	8000f1c <CenLocLockUnlockStates+0x220>

		}
		else if(43750 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 45000)
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <CenLocLockUnlockStates+0x26c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efc:	f64a 22e6 	movw	r2, #43750	; 0xaae6
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d90b      	bls.n	8000f1c <CenLocLockUnlockStates+0x220>
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <CenLocLockUnlockStates+0x26c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0a:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d804      	bhi.n	8000f1c <CenLocLockUnlockStates+0x220>
		{

			SecAlmToggleAlarmLed(CenLoc_CurrentState);
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <CenLocLockUnlockStates+0x264>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 ff8c 	bl	8001e34 <SecAlmToggleAlarmLed>

			/* do nothing */

		}

		if(CenLoc_UnlockCounter < 2 && CenLoc_LockUnlockFlag == STD_HIGH)
 8000f1c:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <CenLocLockUnlockStates+0x284>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d850      	bhi.n	8000fc6 <CenLocLockUnlockStates+0x2ca>
 8000f24:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <CenLocLockUnlockStates+0x288>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d14c      	bne.n	8000fc6 <CenLocLockUnlockStates+0x2ca>
		{

			HAL_TIM_Base_Start(&htim2);
 8000f2c:	4810      	ldr	r0, [pc, #64]	; (8000f70 <CenLocLockUnlockStates+0x274>)
 8000f2e:	f009 f849 	bl	8009fc4 <HAL_TIM_Base_Start>
			CenLoc_Timer2Value = __HAL_TIM_GET_COUNTER(&htim2);
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <CenLocLockUnlockStates+0x274>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f38:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <CenLocLockUnlockStates+0x278>)
 8000f3a:	6013      	str	r3, [r2, #0]

			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <CenLocLockUnlockStates+0x274>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f42:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d81e      	bhi.n	8000f88 <CenLocLockUnlockStates+0x28c>
			{

				CenLoc_BlinkState = STD_HIGH;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <CenLocLockUnlockStates+0x27c>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <CenLocLockUnlockStates+0x27c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 f84d 	bl	8000ff4 <CenLocToggleBuzzer>
				CenLocBlinkSignals();
 8000f5a:	f7ff febf 	bl	8000cdc <CenLocBlinkSignals>
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000f5e:	e03c      	b.n	8000fda <CenLocLockUnlockStates+0x2de>
 8000f60:	20000095 	.word	0x20000095
 8000f64:	200000f6 	.word	0x200000f6
 8000f68:	2000050c 	.word	0x2000050c
 8000f6c:	2000009c 	.word	0x2000009c
 8000f70:	20000458 	.word	0x20000458
 8000f74:	200000a0 	.word	0x200000a0
 8000f78:	2000009b 	.word	0x2000009b
 8000f7c:	200000a4 	.word	0x200000a4
 8000f80:	2000009d 	.word	0x2000009d
 8000f84:	20000097 	.word	0x20000097

			}
			else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000f88:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <CenLocLockUnlockStates+0x2ec>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d921      	bls.n	8000fda <CenLocLockUnlockStates+0x2de>
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <CenLocLockUnlockStates+0x2ec>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d81a      	bhi.n	8000fda <CenLocLockUnlockStates+0x2de>
			{

				CenLoc_BlinkState = STD_LOW;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <CenLocLockUnlockStates+0x2f0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <CenLocLockUnlockStates+0x2f0>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f820 	bl	8000ff4 <CenLocToggleBuzzer>
				CenLocBlinkSignals();
 8000fb4:	f7ff fe92 	bl	8000cdc <CenLocBlinkSignals>
				CenLoc_UnlockCounter = CenLoc_UnlockCounter + 1;
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <CenLocLockUnlockStates+0x2f4>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <CenLocLockUnlockStates+0x2f4>)
 8000fc2:	701a      	strb	r2, [r3, #0]
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000fc4:	e009      	b.n	8000fda <CenLocLockUnlockStates+0x2de>
				/* do nothing */

			}

		}
		else if(CenLoc_UnlockCounter >= 2)
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <CenLocLockUnlockStates+0x2f4>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d906      	bls.n	8000fdc <CenLocLockUnlockStates+0x2e0>
		{

			HAL_TIM_Base_Stop(&htim2);
 8000fce:	4806      	ldr	r0, [pc, #24]	; (8000fe8 <CenLocLockUnlockStates+0x2ec>)
 8000fd0:	f009 f882 	bl	800a0d8 <HAL_TIM_Base_Stop>
 8000fd4:	e002      	b.n	8000fdc <CenLocLockUnlockStates+0x2e0>
		if(CenLoc_LockCounter < 4)
 8000fd6:	bf00      	nop
 8000fd8:	e000      	b.n	8000fdc <CenLocLockUnlockStates+0x2e0>
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000fda:	bf00      	nop

		/* do nothing */

	}

	return status;
 8000fdc:	79fb      	ldrb	r3, [r7, #7]

}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000458 	.word	0x20000458
 8000fec:	2000009b 	.word	0x2000009b
 8000ff0:	2000009d 	.word	0x2000009d

08000ff4 <CenLocToggleBuzzer>:

void CenLocToggleBuzzer(uint8 PinState)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CENLOC_BUZZER_PORT, CENLOC_BUZZER_PIN, PinState);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	461a      	mov	r2, r3
 8001002:	2140      	movs	r1, #64	; 0x40
 8001004:	4803      	ldr	r0, [pc, #12]	; (8001014 <CenLocToggleBuzzer+0x20>)
 8001006:	f004 fc6d 	bl	80058e4 <HAL_GPIO_WritePin>

}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40020400 	.word	0x40020400

08001018 <CenLocMainFunction>:

void CenLocMainFunction()
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0

	CenLocRxBtcState();
 800101c:	f7ff fdae 	bl	8000b7c <CenLocRxBtcState>
	CenLocSecAlmStateToOff();
 8001020:	f7ff fd9a 	bl	8000b58 <CenLocSecAlmStateToOff>
	CenLocState();
 8001024:	f7ff fd5c 	bl	8000ae0 <CenLocState>
	CenLocLockUnlockStates();
 8001028:	f7ff fe68 	bl	8000cfc <CenLocLockUnlockStates>

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <ExtLightsMainFunction>:
void ExtLightsLightState();
StdReturnType ExtLightsInit();
uint32 ExtLightsLightReadSensorValue();

void ExtLightsMainFunction()
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0

	ExtLightsRxBtcState();
 8001034:	f000 f9f8 	bl	8001428 <ExtLightsRxBtcState>
	ExtLightsLightState();
 8001038:	f000 f802 	bl	8001040 <ExtLightsLightState>

}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <ExtLightsLightState>:
	return E_OK;

}

void ExtLightsLightState()
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

	uint8 lightSensorState = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	71fb      	strb	r3, [r7, #7]

	ExtLightsHighBeam(ExtLights_HighBeam_CurrentState);
 800104a:	4ba0      	ldr	r3, [pc, #640]	; (80012cc <ExtLightsLightState+0x28c>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f000 facc 	bl	80015ec <ExtLightsHighBeam>
	ExtLightsHighBeam(ExtLights_FlashHighBeam_CurrentState);
 8001054:	4b9e      	ldr	r3, [pc, #632]	; (80012d0 <ExtLightsLightState+0x290>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fac7 	bl	80015ec <ExtLightsHighBeam>
	ExtLightsFrontFogLight(ExtLights_FrontFogLight_CurrentState);
 800105e:	4b9d      	ldr	r3, [pc, #628]	; (80012d4 <ExtLightsLightState+0x294>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f000 fae6 	bl	8001634 <ExtLightsFrontFogLight>
	ExtLightsRearFogLight(ExtLights_RearFogLight_CurrentState);
 8001068:	4b9b      	ldr	r3, [pc, #620]	; (80012d8 <ExtLightsLightState+0x298>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f000 fb29 	bl	80016c4 <ExtLightsRearFogLight>
	ExtLightsReverseLight(ExtLights_ReverseLight_CurrentState);
 8001072:	4b9a      	ldr	r3, [pc, #616]	; (80012dc <ExtLightsLightState+0x29c>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fb36 	bl	80016e8 <ExtLightsReverseLight>

	if(Btc_ReverseLight == STD_HIGH)
 800107c:	4b98      	ldr	r3, [pc, #608]	; (80012e0 <ExtLightsLightState+0x2a0>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d104      	bne.n	800108e <ExtLightsLightState+0x4e>
	{

		ExtLights_ReverseLight_CurrentState = Btc_ReverseLight;
 8001084:	4b96      	ldr	r3, [pc, #600]	; (80012e0 <ExtLightsLightState+0x2a0>)
 8001086:	781a      	ldrb	r2, [r3, #0]
 8001088:	4b94      	ldr	r3, [pc, #592]	; (80012dc <ExtLightsLightState+0x29c>)
 800108a:	701a      	strb	r2, [r3, #0]
 800108c:	e007      	b.n	800109e <ExtLightsLightState+0x5e>

	}
	else if(Btc_ReverseLight == STD_HIGH)
 800108e:	4b94      	ldr	r3, [pc, #592]	; (80012e0 <ExtLightsLightState+0x2a0>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d103      	bne.n	800109e <ExtLightsLightState+0x5e>
	{

		ExtLights_ReverseLight_CurrentState = Btc_ReverseLight;
 8001096:	4b92      	ldr	r3, [pc, #584]	; (80012e0 <ExtLightsLightState+0x2a0>)
 8001098:	781a      	ldrb	r2, [r3, #0]
 800109a:	4b90      	ldr	r3, [pc, #576]	; (80012dc <ExtLightsLightState+0x29c>)
 800109c:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATEZERO)
 800109e:	4b91      	ldr	r3, [pc, #580]	; (80012e4 <ExtLightsLightState+0x2a4>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b64      	cmp	r3, #100	; 0x64
 80010a4:	d10c      	bne.n	80010c0 <ExtLightsLightState+0x80>
	{

		ExtLightsLowBeam(STD_LOW);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f000 fa8e 	bl	80015c8 <ExtLightsLowBeam>
		ExtLightsDayTimeRunningLight(STD_LOW);
 80010ac:	2000      	movs	r0, #0
 80010ae:	f000 faaf 	bl	8001610 <ExtLightsDayTimeRunningLight>
		ExtLightsRearPositionLight(STD_LOW);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f000 faf4 	bl	80016a0 <ExtLightsRearPositionLight>
		ExtLightsLicensePlateLight(STD_LOW);
 80010b8:	2000      	movs	r0, #0
 80010ba:	f000 fb27 	bl	800170c <ExtLightsLicensePlateLight>
 80010be:	e048      	b.n	8001152 <ExtLightsLightState+0x112>

	}
	else if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATEONE)
 80010c0:	4b88      	ldr	r3, [pc, #544]	; (80012e4 <ExtLightsLightState+0x2a4>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b65      	cmp	r3, #101	; 0x65
 80010c6:	d123      	bne.n	8001110 <ExtLightsLightState+0xd0>
	{

		lightSensorState = ExtLightsLightReadSensorValue();
 80010c8:	f000 fa6c 	bl	80015a4 <ExtLightsLightReadSensorValue>
 80010cc:	4603      	mov	r3, r0
 80010ce:	71fb      	strb	r3, [r7, #7]

		if(lightSensorState < EXTLIGHTS_LIGHTSENSOR_DAYNIGHTVALUE)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	2b95      	cmp	r3, #149	; 0x95
 80010d4:	d80c      	bhi.n	80010f0 <ExtLightsLightState+0xb0>
		{

			ExtLightsLowBeam(STD_HIGH);
 80010d6:	2001      	movs	r0, #1
 80010d8:	f000 fa76 	bl	80015c8 <ExtLightsLowBeam>
			ExtLightsDayTimeRunningLight(STD_HIGH);
 80010dc:	2001      	movs	r0, #1
 80010de:	f000 fa97 	bl	8001610 <ExtLightsDayTimeRunningLight>
			ExtLightsRearPositionLight(STD_HIGH);
 80010e2:	2001      	movs	r0, #1
 80010e4:	f000 fadc 	bl	80016a0 <ExtLightsRearPositionLight>
			ExtLightsLicensePlateLight(STD_HIGH);
 80010e8:	2001      	movs	r0, #1
 80010ea:	f000 fb0f 	bl	800170c <ExtLightsLicensePlateLight>
 80010ee:	e030      	b.n	8001152 <ExtLightsLightState+0x112>

		}
		else if(lightSensorState > EXTLIGHTS_LIGHTSENSOR_DAYNIGHTVALUE)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	2b96      	cmp	r3, #150	; 0x96
 80010f4:	d92d      	bls.n	8001152 <ExtLightsLightState+0x112>
		{

			ExtLightsLowBeam(STD_LOW);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f000 fa66 	bl	80015c8 <ExtLightsLowBeam>
			ExtLightsDayTimeRunningLight(STD_HIGH);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f000 fa87 	bl	8001610 <ExtLightsDayTimeRunningLight>
			ExtLightsRearPositionLight(STD_LOW);
 8001102:	2000      	movs	r0, #0
 8001104:	f000 facc 	bl	80016a0 <ExtLightsRearPositionLight>
			ExtLightsLicensePlateLight(STD_LOW);
 8001108:	2000      	movs	r0, #0
 800110a:	f000 faff 	bl	800170c <ExtLightsLicensePlateLight>
 800110e:	e020      	b.n	8001152 <ExtLightsLightState+0x112>

		}

	}
	else if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATETWO)
 8001110:	4b74      	ldr	r3, [pc, #464]	; (80012e4 <ExtLightsLightState+0x2a4>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b66      	cmp	r3, #102	; 0x66
 8001116:	d10c      	bne.n	8001132 <ExtLightsLightState+0xf2>
	{

		ExtLightsLowBeam(STD_LOW);
 8001118:	2000      	movs	r0, #0
 800111a:	f000 fa55 	bl	80015c8 <ExtLightsLowBeam>
		ExtLightsDayTimeRunningLight(STD_HIGH);
 800111e:	2001      	movs	r0, #1
 8001120:	f000 fa76 	bl	8001610 <ExtLightsDayTimeRunningLight>
		ExtLightsRearPositionLight(STD_HIGH);
 8001124:	2001      	movs	r0, #1
 8001126:	f000 fabb 	bl	80016a0 <ExtLightsRearPositionLight>
		ExtLightsLicensePlateLight(STD_HIGH);
 800112a:	2001      	movs	r0, #1
 800112c:	f000 faee 	bl	800170c <ExtLightsLicensePlateLight>
 8001130:	e00f      	b.n	8001152 <ExtLightsLightState+0x112>

	}
	else if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATETHREE)
 8001132:	4b6c      	ldr	r3, [pc, #432]	; (80012e4 <ExtLightsLightState+0x2a4>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b67      	cmp	r3, #103	; 0x67
 8001138:	d10b      	bne.n	8001152 <ExtLightsLightState+0x112>
	{

		ExtLightsLowBeam(STD_HIGH);
 800113a:	2001      	movs	r0, #1
 800113c:	f000 fa44 	bl	80015c8 <ExtLightsLowBeam>
		ExtLightsDayTimeRunningLight(STD_HIGH);
 8001140:	2001      	movs	r0, #1
 8001142:	f000 fa65 	bl	8001610 <ExtLightsDayTimeRunningLight>
		ExtLightsRearPositionLight(STD_HIGH);
 8001146:	2001      	movs	r0, #1
 8001148:	f000 faaa 	bl	80016a0 <ExtLightsRearPositionLight>
		ExtLightsLicensePlateLight(STD_HIGH);
 800114c:	2001      	movs	r0, #1
 800114e:	f000 fadd 	bl	800170c <ExtLightsLicensePlateLight>

		/* do nothing */

	}

	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8001152:	4b65      	ldr	r3, [pc, #404]	; (80012e8 <ExtLightsLightState+0x2a8>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d155      	bne.n	8001206 <ExtLightsLightState+0x1c6>
	{

		HAL_TIM_Base_Start(&htim2);
 800115a:	4864      	ldr	r0, [pc, #400]	; (80012ec <ExtLightsLightState+0x2ac>)
 800115c:	f008 ff32 	bl	8009fc4 <HAL_TIM_Base_Start>

		if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8001160:	4b62      	ldr	r3, [pc, #392]	; (80012ec <ExtLightsLightState+0x2ac>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001166:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800116a:	4293      	cmp	r3, r2
 800116c:	d805      	bhi.n	800117a <ExtLightsLightState+0x13a>
		{

			ExtLightsTurnSignalLeft(ExtLights_TurnSignalLeft_CurrentState);
 800116e:	4b5e      	ldr	r3, [pc, #376]	; (80012e8 <ExtLightsLightState+0x2a8>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f000 fa70 	bl	8001658 <ExtLightsTurnSignalLeft>
 8001178:	e04e      	b.n	8001218 <ExtLightsLightState+0x1d8>

		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2)  && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 800117a:	4b5c      	ldr	r3, [pc, #368]	; (80012ec <ExtLightsLightState+0x2ac>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001184:	4293      	cmp	r3, r2
 8001186:	d911      	bls.n	80011ac <ExtLightsLightState+0x16c>
 8001188:	4b58      	ldr	r3, [pc, #352]	; (80012ec <ExtLightsLightState+0x2ac>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001192:	4293      	cmp	r3, r2
 8001194:	d80a      	bhi.n	80011ac <ExtLightsLightState+0x16c>
		{

			ExtLightsTurnSignalLeft(!ExtLights_TurnSignalLeft_CurrentState);
 8001196:	4b54      	ldr	r3, [pc, #336]	; (80012e8 <ExtLightsLightState+0x2a8>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	bf0c      	ite	eq
 800119e:	2301      	moveq	r3, #1
 80011a0:	2300      	movne	r3, #0
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fa57 	bl	8001658 <ExtLightsTurnSignalLeft>
 80011aa:	e035      	b.n	8001218 <ExtLightsLightState+0x1d8>

		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 80011ac:	4b4f      	ldr	r3, [pc, #316]	; (80012ec <ExtLightsLightState+0x2ac>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d90c      	bls.n	80011d4 <ExtLightsLightState+0x194>
 80011ba:	4b4c      	ldr	r3, [pc, #304]	; (80012ec <ExtLightsLightState+0x2ac>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d805      	bhi.n	80011d4 <ExtLightsLightState+0x194>
		{

			ExtLightsTurnSignalLeft(ExtLights_TurnSignalLeft_CurrentState);
 80011c8:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <ExtLightsLightState+0x2a8>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 fa43 	bl	8001658 <ExtLightsTurnSignalLeft>
 80011d2:	e021      	b.n	8001218 <ExtLightsLightState+0x1d8>

		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 80011d4:	4b45      	ldr	r3, [pc, #276]	; (80012ec <ExtLightsLightState+0x2ac>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011da:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80011de:	4293      	cmp	r3, r2
 80011e0:	d91a      	bls.n	8001218 <ExtLightsLightState+0x1d8>
 80011e2:	4b42      	ldr	r3, [pc, #264]	; (80012ec <ExtLightsLightState+0x2ac>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	f242 720f 	movw	r2, #9999	; 0x270f
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d813      	bhi.n	8001218 <ExtLightsLightState+0x1d8>
		{

			ExtLightsTurnSignalLeft(!ExtLights_TurnSignalLeft_CurrentState);
 80011f0:	4b3d      	ldr	r3, [pc, #244]	; (80012e8 <ExtLightsLightState+0x2a8>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	bf0c      	ite	eq
 80011f8:	2301      	moveq	r3, #1
 80011fa:	2300      	movne	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 fa2a 	bl	8001658 <ExtLightsTurnSignalLeft>
 8001204:	e008      	b.n	8001218 <ExtLightsLightState+0x1d8>
			/* do nothing */

		}

	}
	else if(ExtLights_TurnSignalLeft_CurrentState == STD_LOW)
 8001206:	4b38      	ldr	r3, [pc, #224]	; (80012e8 <ExtLightsLightState+0x2a8>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d104      	bne.n	8001218 <ExtLightsLightState+0x1d8>
	{

		ExtLightsTurnSignalLeft(ExtLights_TurnSignalLeft_CurrentState);
 800120e:	4b36      	ldr	r3, [pc, #216]	; (80012e8 <ExtLightsLightState+0x2a8>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f000 fa20 	bl	8001658 <ExtLightsTurnSignalLeft>

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8001218:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <ExtLightsLightState+0x2b0>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d169      	bne.n	80012f4 <ExtLightsLightState+0x2b4>
	{

		HAL_TIM_Base_Start(&htim2);
 8001220:	4832      	ldr	r0, [pc, #200]	; (80012ec <ExtLightsLightState+0x2ac>)
 8001222:	f008 fecf 	bl	8009fc4 <HAL_TIM_Base_Start>

		if(__HAL_TIM_GET_COUNTER(&htim2)< 2500)
 8001226:	4b31      	ldr	r3, [pc, #196]	; (80012ec <ExtLightsLightState+0x2ac>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001230:	4293      	cmp	r3, r2
 8001232:	d805      	bhi.n	8001240 <ExtLightsLightState+0x200>
		{

			ExtLightsTurnSignalRight(ExtLights_TurnSignalRight_CurrentState);
 8001234:	4b2e      	ldr	r3, [pc, #184]	; (80012f0 <ExtLightsLightState+0x2b0>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f000 fa1f 	bl	800167c <ExtLightsTurnSignalRight>
 800123e:	e062      	b.n	8001306 <ExtLightsLightState+0x2c6>

		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8001240:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <ExtLightsLightState+0x2ac>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800124a:	4293      	cmp	r3, r2
 800124c:	d911      	bls.n	8001272 <ExtLightsLightState+0x232>
 800124e:	4b27      	ldr	r3, [pc, #156]	; (80012ec <ExtLightsLightState+0x2ac>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001254:	f241 3287 	movw	r2, #4999	; 0x1387
 8001258:	4293      	cmp	r3, r2
 800125a:	d80a      	bhi.n	8001272 <ExtLightsLightState+0x232>
		{

			ExtLightsTurnSignalRight(!ExtLights_TurnSignalRight_CurrentState);
 800125c:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <ExtLightsLightState+0x2b0>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	bf0c      	ite	eq
 8001264:	2301      	moveq	r3, #1
 8001266:	2300      	movne	r3, #0
 8001268:	b2db      	uxtb	r3, r3
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fa06 	bl	800167c <ExtLightsTurnSignalRight>
 8001270:	e049      	b.n	8001306 <ExtLightsLightState+0x2c6>

		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 8001272:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <ExtLightsLightState+0x2ac>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001278:	f241 3288 	movw	r2, #5000	; 0x1388
 800127c:	4293      	cmp	r3, r2
 800127e:	d90c      	bls.n	800129a <ExtLightsLightState+0x25a>
 8001280:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <ExtLightsLightState+0x2ac>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001286:	f641 524b 	movw	r2, #7499	; 0x1d4b
 800128a:	4293      	cmp	r3, r2
 800128c:	d805      	bhi.n	800129a <ExtLightsLightState+0x25a>
		{

			ExtLightsTurnSignalRight(ExtLights_TurnSignalRight_CurrentState);
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <ExtLightsLightState+0x2b0>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f9f2 	bl	800167c <ExtLightsTurnSignalRight>
 8001298:	e035      	b.n	8001306 <ExtLightsLightState+0x2c6>

		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <ExtLightsLightState+0x2ac>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d92e      	bls.n	8001306 <ExtLightsLightState+0x2c6>
 80012a8:	4b10      	ldr	r3, [pc, #64]	; (80012ec <ExtLightsLightState+0x2ac>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d827      	bhi.n	8001306 <ExtLightsLightState+0x2c6>
		{

			ExtLightsTurnSignalRight(!ExtLights_TurnSignalRight_CurrentState);
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <ExtLightsLightState+0x2b0>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	bf0c      	ite	eq
 80012be:	2301      	moveq	r3, #1
 80012c0:	2300      	movne	r3, #0
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 f9d9 	bl	800167c <ExtLightsTurnSignalRight>
 80012ca:	e01c      	b.n	8001306 <ExtLightsLightState+0x2c6>
 80012cc:	200000b0 	.word	0x200000b0
 80012d0:	200000ae 	.word	0x200000ae
 80012d4:	200000b1 	.word	0x200000b1
 80012d8:	200000b5 	.word	0x200000b5
 80012dc:	200000ac 	.word	0x200000ac
 80012e0:	200000bf 	.word	0x200000bf
 80012e4:	200000af 	.word	0x200000af
 80012e8:	200000b2 	.word	0x200000b2
 80012ec:	20000458 	.word	0x20000458
 80012f0:	200000b3 	.word	0x200000b3

			/* do nothing */

		}
	}
	else if(ExtLights_TurnSignalRight_CurrentState == STD_LOW)
 80012f4:	4b49      	ldr	r3, [pc, #292]	; (800141c <ExtLightsLightState+0x3dc>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d104      	bne.n	8001306 <ExtLightsLightState+0x2c6>
	{

		ExtLightsTurnSignalRight(ExtLights_TurnSignalRight_CurrentState);
 80012fc:	4b47      	ldr	r3, [pc, #284]	; (800141c <ExtLightsLightState+0x3dc>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f000 f9bb 	bl	800167c <ExtLightsTurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 8001306:	4b46      	ldr	r3, [pc, #280]	; (8001420 <ExtLightsLightState+0x3e0>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d173      	bne.n	80013f6 <ExtLightsLightState+0x3b6>
	{

		HAL_TIM_Base_Start(&htim2);
 800130e:	4845      	ldr	r0, [pc, #276]	; (8001424 <ExtLightsLightState+0x3e4>)
 8001310:	f008 fe58 	bl	8009fc4 <HAL_TIM_Base_Start>

		if(__HAL_TIM_GET_COUNTER(&htim2)< 2500)
 8001314:	4b43      	ldr	r3, [pc, #268]	; (8001424 <ExtLightsLightState+0x3e4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800131e:	4293      	cmp	r3, r2
 8001320:	d80a      	bhi.n	8001338 <ExtLightsLightState+0x2f8>
		{

			ExtLightsTurnSignalRight(ExtLights_HazardLight_CurrentState);
 8001322:	4b3f      	ldr	r3, [pc, #252]	; (8001420 <ExtLightsLightState+0x3e0>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f9a8 	bl	800167c <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(ExtLights_HazardLight_CurrentState);
 800132c:	4b3c      	ldr	r3, [pc, #240]	; (8001420 <ExtLightsLightState+0x3e0>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f000 f991 	bl	8001658 <ExtLightsTurnSignalLeft>

		/* do nothing */

	}

}
 8001336:	e06d      	b.n	8001414 <ExtLightsLightState+0x3d4>
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8001338:	4b3a      	ldr	r3, [pc, #232]	; (8001424 <ExtLightsLightState+0x3e4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001342:	4293      	cmp	r3, r2
 8001344:	d91b      	bls.n	800137e <ExtLightsLightState+0x33e>
 8001346:	4b37      	ldr	r3, [pc, #220]	; (8001424 <ExtLightsLightState+0x3e4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001350:	4293      	cmp	r3, r2
 8001352:	d814      	bhi.n	800137e <ExtLightsLightState+0x33e>
			ExtLightsTurnSignalRight(!ExtLights_HazardLight_CurrentState);
 8001354:	4b32      	ldr	r3, [pc, #200]	; (8001420 <ExtLightsLightState+0x3e0>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	bf0c      	ite	eq
 800135c:	2301      	moveq	r3, #1
 800135e:	2300      	movne	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f98a 	bl	800167c <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(!ExtLights_HazardLight_CurrentState);
 8001368:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <ExtLightsLightState+0x3e0>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	bf0c      	ite	eq
 8001370:	2301      	moveq	r3, #1
 8001372:	2300      	movne	r3, #0
 8001374:	b2db      	uxtb	r3, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f96e 	bl	8001658 <ExtLightsTurnSignalLeft>
 800137c:	e04a      	b.n	8001414 <ExtLightsLightState+0x3d4>
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2)&& __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 800137e:	4b29      	ldr	r3, [pc, #164]	; (8001424 <ExtLightsLightState+0x3e4>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	f241 3288 	movw	r2, #5000	; 0x1388
 8001388:	4293      	cmp	r3, r2
 800138a:	d911      	bls.n	80013b0 <ExtLightsLightState+0x370>
 800138c:	4b25      	ldr	r3, [pc, #148]	; (8001424 <ExtLightsLightState+0x3e4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001392:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8001396:	4293      	cmp	r3, r2
 8001398:	d80a      	bhi.n	80013b0 <ExtLightsLightState+0x370>
			ExtLightsTurnSignalRight(ExtLights_HazardLight_CurrentState);
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <ExtLightsLightState+0x3e0>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f96c 	bl	800167c <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(ExtLights_HazardLight_CurrentState);
 80013a4:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <ExtLightsLightState+0x3e0>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 f955 	bl	8001658 <ExtLightsTurnSignalLeft>
 80013ae:	e031      	b.n	8001414 <ExtLightsLightState+0x3d4>
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 80013b0:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <ExtLightsLightState+0x3e4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b6:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d92a      	bls.n	8001414 <ExtLightsLightState+0x3d4>
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <ExtLightsLightState+0x3e4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	f242 720f 	movw	r2, #9999	; 0x270f
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d823      	bhi.n	8001414 <ExtLightsLightState+0x3d4>
			ExtLightsTurnSignalRight(!ExtLights_HazardLight_CurrentState);
 80013cc:	4b14      	ldr	r3, [pc, #80]	; (8001420 <ExtLightsLightState+0x3e0>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	bf0c      	ite	eq
 80013d4:	2301      	moveq	r3, #1
 80013d6:	2300      	movne	r3, #0
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 f94e 	bl	800167c <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(!ExtLights_HazardLight_CurrentState);
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <ExtLightsLightState+0x3e0>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	bf0c      	ite	eq
 80013e8:	2301      	moveq	r3, #1
 80013ea:	2300      	movne	r3, #0
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f932 	bl	8001658 <ExtLightsTurnSignalLeft>
}
 80013f4:	e00e      	b.n	8001414 <ExtLightsLightState+0x3d4>
	else if(ExtLights_HazardLight_CurrentState == STD_LOW)
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <ExtLightsLightState+0x3e0>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10a      	bne.n	8001414 <ExtLightsLightState+0x3d4>
		ExtLightsTurnSignalRight(ExtLights_HazardLight_CurrentState);
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <ExtLightsLightState+0x3e0>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f93a 	bl	800167c <ExtLightsTurnSignalRight>
		ExtLightsTurnSignalLeft(ExtLights_HazardLight_CurrentState);
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <ExtLightsLightState+0x3e0>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f000 f923 	bl	8001658 <ExtLightsTurnSignalLeft>
}
 8001412:	e7ff      	b.n	8001414 <ExtLightsLightState+0x3d4>
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200000b3 	.word	0x200000b3
 8001420:	200000b4 	.word	0x200000b4
 8001424:	20000458 	.word	0x20000458

08001428 <ExtLightsRxBtcState>:

void ExtLightsRxBtcState()
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

	if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATEZERO)
 800142c:	4b4d      	ldr	r3, [pc, #308]	; (8001564 <ExtLightsRxBtcState+0x13c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b64      	cmp	r3, #100	; 0x64
 8001432:	d103      	bne.n	800143c <ExtLightsRxBtcState+0x14>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATEZERO;
 8001434:	4b4c      	ldr	r3, [pc, #304]	; (8001568 <ExtLightsRxBtcState+0x140>)
 8001436:	2264      	movs	r2, #100	; 0x64
 8001438:	701a      	strb	r2, [r3, #0]
 800143a:	e016      	b.n	800146a <ExtLightsRxBtcState+0x42>

	}
	else if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATEONE)
 800143c:	4b49      	ldr	r3, [pc, #292]	; (8001564 <ExtLightsRxBtcState+0x13c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b65      	cmp	r3, #101	; 0x65
 8001442:	d103      	bne.n	800144c <ExtLightsRxBtcState+0x24>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATEONE;
 8001444:	4b48      	ldr	r3, [pc, #288]	; (8001568 <ExtLightsRxBtcState+0x140>)
 8001446:	2265      	movs	r2, #101	; 0x65
 8001448:	701a      	strb	r2, [r3, #0]
 800144a:	e00e      	b.n	800146a <ExtLightsRxBtcState+0x42>

	}
	else if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATETWO)
 800144c:	4b45      	ldr	r3, [pc, #276]	; (8001564 <ExtLightsRxBtcState+0x13c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b66      	cmp	r3, #102	; 0x66
 8001452:	d103      	bne.n	800145c <ExtLightsRxBtcState+0x34>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATETWO;
 8001454:	4b44      	ldr	r3, [pc, #272]	; (8001568 <ExtLightsRxBtcState+0x140>)
 8001456:	2266      	movs	r2, #102	; 0x66
 8001458:	701a      	strb	r2, [r3, #0]
 800145a:	e006      	b.n	800146a <ExtLightsRxBtcState+0x42>

	}
	else if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATETHREE)
 800145c:	4b41      	ldr	r3, [pc, #260]	; (8001564 <ExtLightsRxBtcState+0x13c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b67      	cmp	r3, #103	; 0x67
 8001462:	d102      	bne.n	800146a <ExtLightsRxBtcState+0x42>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATETHREE;
 8001464:	4b40      	ldr	r3, [pc, #256]	; (8001568 <ExtLightsRxBtcState+0x140>)
 8001466:	2267      	movs	r2, #103	; 0x67
 8001468:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_HighBeam == STD_HIGH)
 800146a:	4b40      	ldr	r3, [pc, #256]	; (800156c <ExtLightsRxBtcState+0x144>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d104      	bne.n	800147c <ExtLightsRxBtcState+0x54>
	{

		ExtLights_HighBeam_CurrentState = Btc_HighBeam;
 8001472:	4b3e      	ldr	r3, [pc, #248]	; (800156c <ExtLightsRxBtcState+0x144>)
 8001474:	781a      	ldrb	r2, [r3, #0]
 8001476:	4b3e      	ldr	r3, [pc, #248]	; (8001570 <ExtLightsRxBtcState+0x148>)
 8001478:	701a      	strb	r2, [r3, #0]
 800147a:	e007      	b.n	800148c <ExtLightsRxBtcState+0x64>

	}
	else if(Btc_HighBeam == STD_LOW)
 800147c:	4b3b      	ldr	r3, [pc, #236]	; (800156c <ExtLightsRxBtcState+0x144>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d103      	bne.n	800148c <ExtLightsRxBtcState+0x64>
	{

		ExtLights_HighBeam_CurrentState = Btc_HighBeam;
 8001484:	4b39      	ldr	r3, [pc, #228]	; (800156c <ExtLightsRxBtcState+0x144>)
 8001486:	781a      	ldrb	r2, [r3, #0]
 8001488:	4b39      	ldr	r3, [pc, #228]	; (8001570 <ExtLightsRxBtcState+0x148>)
 800148a:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_FrontFogLight == STD_HIGH)
 800148c:	4b39      	ldr	r3, [pc, #228]	; (8001574 <ExtLightsRxBtcState+0x14c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d104      	bne.n	800149e <ExtLightsRxBtcState+0x76>
	{

		ExtLights_FrontFogLight_CurrentState = Btc_FrontFogLight;
 8001494:	4b37      	ldr	r3, [pc, #220]	; (8001574 <ExtLightsRxBtcState+0x14c>)
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	4b37      	ldr	r3, [pc, #220]	; (8001578 <ExtLightsRxBtcState+0x150>)
 800149a:	701a      	strb	r2, [r3, #0]
 800149c:	e007      	b.n	80014ae <ExtLightsRxBtcState+0x86>

	}
	else if(Btc_FrontFogLight == STD_LOW)
 800149e:	4b35      	ldr	r3, [pc, #212]	; (8001574 <ExtLightsRxBtcState+0x14c>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d103      	bne.n	80014ae <ExtLightsRxBtcState+0x86>
	{

		ExtLights_FrontFogLight_CurrentState = Btc_FrontFogLight;
 80014a6:	4b33      	ldr	r3, [pc, #204]	; (8001574 <ExtLightsRxBtcState+0x14c>)
 80014a8:	781a      	ldrb	r2, [r3, #0]
 80014aa:	4b33      	ldr	r3, [pc, #204]	; (8001578 <ExtLightsRxBtcState+0x150>)
 80014ac:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_RearFogLight == STD_HIGH)
 80014ae:	4b33      	ldr	r3, [pc, #204]	; (800157c <ExtLightsRxBtcState+0x154>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d104      	bne.n	80014c0 <ExtLightsRxBtcState+0x98>
	{

		ExtLights_RearFogLight_CurrentState = Btc_RearFogLight;
 80014b6:	4b31      	ldr	r3, [pc, #196]	; (800157c <ExtLightsRxBtcState+0x154>)
 80014b8:	781a      	ldrb	r2, [r3, #0]
 80014ba:	4b31      	ldr	r3, [pc, #196]	; (8001580 <ExtLightsRxBtcState+0x158>)
 80014bc:	701a      	strb	r2, [r3, #0]
 80014be:	e007      	b.n	80014d0 <ExtLightsRxBtcState+0xa8>

	}
	else if(Btc_RearFogLight == STD_LOW)
 80014c0:	4b2e      	ldr	r3, [pc, #184]	; (800157c <ExtLightsRxBtcState+0x154>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d103      	bne.n	80014d0 <ExtLightsRxBtcState+0xa8>
	{

		ExtLights_RearFogLight_CurrentState = Btc_RearFogLight;
 80014c8:	4b2c      	ldr	r3, [pc, #176]	; (800157c <ExtLightsRxBtcState+0x154>)
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <ExtLightsRxBtcState+0x158>)
 80014ce:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_BrakeLight == STD_HIGH)
 80014d0:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <ExtLightsRxBtcState+0x15c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d104      	bne.n	80014e2 <ExtLightsRxBtcState+0xba>
	{

		ExtLights_BrakeLight_CurrentState = Btc_BrakeLight;
 80014d8:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <ExtLightsRxBtcState+0x15c>)
 80014da:	781a      	ldrb	r2, [r3, #0]
 80014dc:	4b2a      	ldr	r3, [pc, #168]	; (8001588 <ExtLightsRxBtcState+0x160>)
 80014de:	701a      	strb	r2, [r3, #0]
 80014e0:	e007      	b.n	80014f2 <ExtLightsRxBtcState+0xca>

	}
	else if(Btc_BrakeLight == STD_LOW)
 80014e2:	4b28      	ldr	r3, [pc, #160]	; (8001584 <ExtLightsRxBtcState+0x15c>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d103      	bne.n	80014f2 <ExtLightsRxBtcState+0xca>
	{

		ExtLights_BrakeLight_CurrentState = Btc_BrakeLight;
 80014ea:	4b26      	ldr	r3, [pc, #152]	; (8001584 <ExtLightsRxBtcState+0x15c>)
 80014ec:	781a      	ldrb	r2, [r3, #0]
 80014ee:	4b26      	ldr	r3, [pc, #152]	; (8001588 <ExtLightsRxBtcState+0x160>)
 80014f0:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_TurnSignalLeft == STD_HIGH)
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <ExtLightsRxBtcState+0x164>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d104      	bne.n	8001504 <ExtLightsRxBtcState+0xdc>
	{

		ExtLights_TurnSignalLeft_CurrentState = Btc_TurnSignalLeft;
 80014fa:	4b24      	ldr	r3, [pc, #144]	; (800158c <ExtLightsRxBtcState+0x164>)
 80014fc:	781a      	ldrb	r2, [r3, #0]
 80014fe:	4b24      	ldr	r3, [pc, #144]	; (8001590 <ExtLightsRxBtcState+0x168>)
 8001500:	701a      	strb	r2, [r3, #0]
 8001502:	e007      	b.n	8001514 <ExtLightsRxBtcState+0xec>

	}
	else if(Btc_TurnSignalLeft == STD_LOW)
 8001504:	4b21      	ldr	r3, [pc, #132]	; (800158c <ExtLightsRxBtcState+0x164>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d103      	bne.n	8001514 <ExtLightsRxBtcState+0xec>
	{

		ExtLights_TurnSignalLeft_CurrentState = Btc_TurnSignalLeft;
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <ExtLightsRxBtcState+0x164>)
 800150e:	781a      	ldrb	r2, [r3, #0]
 8001510:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <ExtLightsRxBtcState+0x168>)
 8001512:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_TurnSignalRight == STD_HIGH)
 8001514:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <ExtLightsRxBtcState+0x16c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d104      	bne.n	8001526 <ExtLightsRxBtcState+0xfe>
	{

		ExtLights_TurnSignalRight_CurrentState = Btc_TurnSignalRight;
 800151c:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <ExtLightsRxBtcState+0x16c>)
 800151e:	781a      	ldrb	r2, [r3, #0]
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <ExtLightsRxBtcState+0x170>)
 8001522:	701a      	strb	r2, [r3, #0]
 8001524:	e007      	b.n	8001536 <ExtLightsRxBtcState+0x10e>

	}
	else if(Btc_TurnSignalRight == STD_LOW)
 8001526:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <ExtLightsRxBtcState+0x16c>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d103      	bne.n	8001536 <ExtLightsRxBtcState+0x10e>
	{

		ExtLights_TurnSignalRight_CurrentState = Btc_TurnSignalRight;
 800152e:	4b19      	ldr	r3, [pc, #100]	; (8001594 <ExtLightsRxBtcState+0x16c>)
 8001530:	781a      	ldrb	r2, [r3, #0]
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <ExtLightsRxBtcState+0x170>)
 8001534:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_HazardLight == STD_HIGH)
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <ExtLightsRxBtcState+0x174>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d104      	bne.n	8001548 <ExtLightsRxBtcState+0x120>
	{

		ExtLights_HazardLight_CurrentState = Btc_HazardLight;
 800153e:	4b17      	ldr	r3, [pc, #92]	; (800159c <ExtLightsRxBtcState+0x174>)
 8001540:	781a      	ldrb	r2, [r3, #0]
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <ExtLightsRxBtcState+0x178>)
 8001544:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8001546:	e007      	b.n	8001558 <ExtLightsRxBtcState+0x130>
	else if(Btc_HazardLight == STD_LOW)
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <ExtLightsRxBtcState+0x174>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d103      	bne.n	8001558 <ExtLightsRxBtcState+0x130>
		ExtLights_HazardLight_CurrentState = Btc_HazardLight;
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <ExtLightsRxBtcState+0x174>)
 8001552:	781a      	ldrb	r2, [r3, #0]
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <ExtLightsRxBtcState+0x178>)
 8001556:	701a      	strb	r2, [r3, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	200000b6 	.word	0x200000b6
 8001568:	200000af 	.word	0x200000af
 800156c:	200000b7 	.word	0x200000b7
 8001570:	200000b0 	.word	0x200000b0
 8001574:	200000b9 	.word	0x200000b9
 8001578:	200000b1 	.word	0x200000b1
 800157c:	200000be 	.word	0x200000be
 8001580:	200000b5 	.word	0x200000b5
 8001584:	200000bd 	.word	0x200000bd
 8001588:	200000ad 	.word	0x200000ad
 800158c:	200000ba 	.word	0x200000ba
 8001590:	200000b2 	.word	0x200000b2
 8001594:	200000bb 	.word	0x200000bb
 8001598:	200000b3 	.word	0x200000b3
 800159c:	200000bc 	.word	0x200000bc
 80015a0:	200000b4 	.word	0x200000b4

080015a4 <ExtLightsLightReadSensorValue>:

uint32 ExtLightsLightReadSensorValue()
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0

	uint8 sensorValue = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	71fb      	strb	r3, [r7, #7]

	sensorValue = ADC_BUFFER[2];
 80015ae:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <ExtLightsLightReadSensorValue+0x20>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	71fb      	strb	r3, [r7, #7]

	return sensorValue;
 80015b4:	79fb      	ldrb	r3, [r7, #7]

}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	200000dc 	.word	0x200000dc

080015c8 <ExtLightsLowBeam>:

void ExtLightsLowBeam(uint8 PinState)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_LOWBEAM_PORT, EXTLIGHTS_LOWBEAM_PIN, PinState);
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	461a      	mov	r2, r3
 80015d6:	2120      	movs	r1, #32
 80015d8:	4803      	ldr	r0, [pc, #12]	; (80015e8 <ExtLightsLowBeam+0x20>)
 80015da:	f004 f983 	bl	80058e4 <HAL_GPIO_WritePin>

}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40020000 	.word	0x40020000

080015ec <ExtLightsHighBeam>:

void ExtLightsHighBeam(uint8 PinState)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	461a      	mov	r2, r3
 80015fa:	2120      	movs	r1, #32
 80015fc:	4803      	ldr	r0, [pc, #12]	; (800160c <ExtLightsHighBeam+0x20>)
 80015fe:	f004 f971 	bl	80058e4 <HAL_GPIO_WritePin>

}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40020000 	.word	0x40020000

08001610 <ExtLightsDayTimeRunningLight>:

void ExtLightsDayTimeRunningLight(uint8 PinState)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_DAYTIMERUNNINGLIGHT_PORT, EXTLIGHTS_DAYTIMERUNNINGLIGHT_PIN, PinState);
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	461a      	mov	r2, r3
 800161e:	2120      	movs	r1, #32
 8001620:	4803      	ldr	r0, [pc, #12]	; (8001630 <ExtLightsDayTimeRunningLight+0x20>)
 8001622:	f004 f95f 	bl	80058e4 <HAL_GPIO_WritePin>

}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40020000 	.word	0x40020000

08001634 <ExtLightsFrontFogLight>:

void ExtLightsFrontFogLight(uint8 PinState)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_FRONTFOGLIGHT_PORT, EXTLIGHTS_FRONTFOGLIGHT_PIN, PinState);
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	461a      	mov	r2, r3
 8001642:	2120      	movs	r1, #32
 8001644:	4803      	ldr	r0, [pc, #12]	; (8001654 <ExtLightsFrontFogLight+0x20>)
 8001646:	f004 f94d 	bl	80058e4 <HAL_GPIO_WritePin>

}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40020000 	.word	0x40020000

08001658 <ExtLightsTurnSignalLeft>:

void ExtLightsTurnSignalLeft(uint8 PinState)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALLEFT_PORT, EXTLIGHTS_TURNSIGNALLEFT_PIN, PinState);
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	461a      	mov	r2, r3
 8001666:	2120      	movs	r1, #32
 8001668:	4803      	ldr	r0, [pc, #12]	; (8001678 <ExtLightsTurnSignalLeft+0x20>)
 800166a:	f004 f93b 	bl	80058e4 <HAL_GPIO_WritePin>

}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40020000 	.word	0x40020000

0800167c <ExtLightsTurnSignalRight>:

void ExtLightsTurnSignalRight(uint8 PinState)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALRIGHT_PORT, EXTLIGHTS_TURNSIGNALRIGHT_PIN, PinState);
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	461a      	mov	r2, r3
 800168a:	2120      	movs	r1, #32
 800168c:	4803      	ldr	r0, [pc, #12]	; (800169c <ExtLightsTurnSignalRight+0x20>)
 800168e:	f004 f929 	bl	80058e4 <HAL_GPIO_WritePin>

}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40020000 	.word	0x40020000

080016a0 <ExtLightsRearPositionLight>:

void ExtLightsRearPositionLight(uint8 PinState)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REARPOSITIONLIGHT_PORT, EXTLIGHTS_REARPOSITIONLIGHT_PIN, PinState);
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	461a      	mov	r2, r3
 80016ae:	2120      	movs	r1, #32
 80016b0:	4803      	ldr	r0, [pc, #12]	; (80016c0 <ExtLightsRearPositionLight+0x20>)
 80016b2:	f004 f917 	bl	80058e4 <HAL_GPIO_WritePin>

}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40020000 	.word	0x40020000

080016c4 <ExtLightsRearFogLight>:

void ExtLightsRearFogLight(uint8 PinState)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REARFOGLIGHT_PORT, EXTLIGHTS_REARFOGLIGHT_PIN, PinState);
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	461a      	mov	r2, r3
 80016d2:	2120      	movs	r1, #32
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <ExtLightsRearFogLight+0x20>)
 80016d6:	f004 f905 	bl	80058e4 <HAL_GPIO_WritePin>

}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40020000 	.word	0x40020000

080016e8 <ExtLightsReverseLight>:
	HAL_GPIO_WritePin(EXTLIGHTS_BRAKELIGHT_PORT, EXTLIGHTS_BRAKELIGHT_PIN, PinState);

}

void ExtLightsReverseLight(uint8 PinState)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REVERSELIGHT_PORT, EXTLIGHTS_REVERSELIGHT_PIN, PinState);
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	461a      	mov	r2, r3
 80016f6:	2120      	movs	r1, #32
 80016f8:	4803      	ldr	r0, [pc, #12]	; (8001708 <ExtLightsReverseLight+0x20>)
 80016fa:	f004 f8f3 	bl	80058e4 <HAL_GPIO_WritePin>

}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40020000 	.word	0x40020000

0800170c <ExtLightsLicensePlateLight>:

void ExtLightsLicensePlateLight(uint8 PinState)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_LICENSEPLATELIGHT_PORT, EXTLIGHTS_LICENSEPLATELIGHT_PIN, PinState);
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	461a      	mov	r2, r3
 800171a:	2120      	movs	r1, #32
 800171c:	4803      	ldr	r0, [pc, #12]	; (800172c <ExtLightsLicensePlateLight+0x20>)
 800171e:	f004 f8e1 	bl	80058e4 <HAL_GPIO_WritePin>

}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40020000 	.word	0x40020000

08001730 <HVACTemSenReturnTemperatureValue>:
	}

}

float HVACTemSenReturnTemperatureValue(float TemSenVal)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	ed87 0a01 	vstr	s0, [r7, #4]

	/* redo */

	return 1;
 800173a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800173e:	ee07 3a90 	vmov	s15, r3

}
 8001742:	eeb0 0a67 	vmov.f32	s0, s15
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HVACTemSenAdcReceivedValues>:

float HVACTemSenAdcReceivedValues()
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0

	uint32 RxTem = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]

	HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, 6);
 800175a:	2206      	movs	r2, #6
 800175c:	490f      	ldr	r1, [pc, #60]	; (800179c <HVACTemSenAdcReceivedValues+0x4c>)
 800175e:	4810      	ldr	r0, [pc, #64]	; (80017a0 <HVACTemSenAdcReceivedValues+0x50>)
 8001760:	f002 f914 	bl	800398c <HAL_ADC_Start_DMA>
	RxTem = HVACTemSenReturnTemperatureValue(ADC_BUFFER[0]);
 8001764:	4b0d      	ldr	r3, [pc, #52]	; (800179c <HVACTemSenAdcReceivedValues+0x4c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	ee07 3a90 	vmov	s15, r3
 800176c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001770:	eeb0 0a67 	vmov.f32	s0, s15
 8001774:	f7ff ffdc 	bl	8001730 <HVACTemSenReturnTemperatureValue>
 8001778:	eef0 7a40 	vmov.f32	s15, s0
 800177c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001780:	ee17 3a90 	vmov	r3, s15
 8001784:	607b      	str	r3, [r7, #4]

	return RxTem;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	ee07 3a90 	vmov	s15, r3
 800178c:	eef8 7a67 	vcvt.f32.u32	s15, s15

}
 8001790:	eeb0 0a67 	vmov.f32	s0, s15
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200000dc 	.word	0x200000dc
 80017a0:	20000108 	.word	0x20000108

080017a4 <HVACMainFunction>:


}

void HVACMainFunction()
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0

	//HVACI2cTxToLcd();
	HVAC_TemSenRxTemperature = HVACTemSenAdcReceivedValues();
 80017a8:	f7ff ffd2 	bl	8001750 <HVACTemSenAdcReceivedValues>
 80017ac:	eef0 7a40 	vmov.f32	s15, s0
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HVACMainFunction+0x1c>)
 80017b2:	edc3 7a00 	vstr	s15, [r3]
	HVACState();
 80017b6:	f000 f805 	bl	80017c4 <HVACState>

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200000d8 	.word	0x200000d8

080017c4 <HVACState>:

void HVACState()
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0

	HVAC_BackwindowDefrost_CurrentState 	= Btc_BackwindowDefrost;
 80017ca:	4ba4      	ldr	r3, [pc, #656]	; (8001a5c <HVACState+0x298>)
 80017cc:	781a      	ldrb	r2, [r3, #0]
 80017ce:	4ba4      	ldr	r3, [pc, #656]	; (8001a60 <HVACState+0x29c>)
 80017d0:	701a      	strb	r2, [r3, #0]
	HVAC_AC_CurrentState 					= Btc_AC;
 80017d2:	4ba4      	ldr	r3, [pc, #656]	; (8001a64 <HVACState+0x2a0>)
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	4ba4      	ldr	r3, [pc, #656]	; (8001a68 <HVACState+0x2a4>)
 80017d8:	701a      	strb	r2, [r3, #0]
	HVAC_RecirculationMode_CurrentState 	= Btc_RecirculationMode;
 80017da:	4ba4      	ldr	r3, [pc, #656]	; (8001a6c <HVACState+0x2a8>)
 80017dc:	781a      	ldrb	r2, [r3, #0]
 80017de:	4ba4      	ldr	r3, [pc, #656]	; (8001a70 <HVACState+0x2ac>)
 80017e0:	701a      	strb	r2, [r3, #0]

	if(Btc_TemperatureValue != STD_LOW)
 80017e2:	4ba4      	ldr	r3, [pc, #656]	; (8001a74 <HVACState+0x2b0>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d004      	beq.n	80017f4 <HVACState+0x30>
	{

		HVAC_TemperatureValue = Btc_TemperatureValue;
 80017ea:	4ba2      	ldr	r3, [pc, #648]	; (8001a74 <HVACState+0x2b0>)
 80017ec:	781a      	ldrb	r2, [r3, #0]
 80017ee:	4ba2      	ldr	r3, [pc, #648]	; (8001a78 <HVACState+0x2b4>)
 80017f0:	701a      	strb	r2, [r3, #0]
 80017f2:	e009      	b.n	8001808 <HVACState+0x44>

	}
	else if(Btc_TemperatureValue == STD_LOW)
 80017f4:	4b9f      	ldr	r3, [pc, #636]	; (8001a74 <HVACState+0x2b0>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d105      	bne.n	8001808 <HVACState+0x44>
	{

		Btc_TemperatureValue 	= 22;
 80017fc:	4b9d      	ldr	r3, [pc, #628]	; (8001a74 <HVACState+0x2b0>)
 80017fe:	2216      	movs	r2, #22
 8001800:	701a      	strb	r2, [r3, #0]
		Btc_FanValue 		= 1;
 8001802:	4b9e      	ldr	r3, [pc, #632]	; (8001a7c <HVACState+0x2b8>)
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_FanValue == STD_LOW)
 8001808:	4b9c      	ldr	r3, [pc, #624]	; (8001a7c <HVACState+0x2b8>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d103      	bne.n	8001818 <HVACState+0x54>
	{

		HVAC_CurrentState = STD_LOW;
 8001810:	4b9b      	ldr	r3, [pc, #620]	; (8001a80 <HVACState+0x2bc>)
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
 8001816:	e00a      	b.n	800182e <HVACState+0x6a>

	}
	else if(Btc_FanValue != STD_LOW)
 8001818:	4b98      	ldr	r3, [pc, #608]	; (8001a7c <HVACState+0x2b8>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d006      	beq.n	800182e <HVACState+0x6a>
	{

		HVAC_CurrentState 	= STD_HIGH;
 8001820:	4b97      	ldr	r3, [pc, #604]	; (8001a80 <HVACState+0x2bc>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
		HVAC_FanValue 		= Btc_FanValue;
 8001826:	4b95      	ldr	r3, [pc, #596]	; (8001a7c <HVACState+0x2b8>)
 8001828:	781a      	ldrb	r2, [r3, #0]
 800182a:	4b96      	ldr	r3, [pc, #600]	; (8001a84 <HVACState+0x2c0>)
 800182c:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_LegVents == STD_HIGH)
 800182e:	4b96      	ldr	r3, [pc, #600]	; (8001a88 <HVACState+0x2c4>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d107      	bne.n	8001846 <HVACState+0x82>
	{

		Btc_AutomaticMode 			= STD_LOW;
 8001836:	4b95      	ldr	r3, [pc, #596]	; (8001a8c <HVACState+0x2c8>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 	= Btc_LegVents;
 800183c:	4b92      	ldr	r3, [pc, #584]	; (8001a88 <HVACState+0x2c4>)
 800183e:	781a      	ldrb	r2, [r3, #0]
 8001840:	4b93      	ldr	r3, [pc, #588]	; (8001a90 <HVACState+0x2cc>)
 8001842:	701a      	strb	r2, [r3, #0]
 8001844:	e00a      	b.n	800185c <HVACState+0x98>

	}
	else if(Btc_LegVents == STD_LOW)
 8001846:	4b90      	ldr	r3, [pc, #576]	; (8001a88 <HVACState+0x2c4>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d106      	bne.n	800185c <HVACState+0x98>
	{

		Btc_AutomaticMode 			= STD_LOW;
 800184e:	4b8f      	ldr	r3, [pc, #572]	; (8001a8c <HVACState+0x2c8>)
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 	= Btc_LegVents;
 8001854:	4b8c      	ldr	r3, [pc, #560]	; (8001a88 <HVACState+0x2c4>)
 8001856:	781a      	ldrb	r2, [r3, #0]
 8001858:	4b8d      	ldr	r3, [pc, #564]	; (8001a90 <HVACState+0x2cc>)
 800185a:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_MidVents == STD_HIGH)
 800185c:	4b8d      	ldr	r3, [pc, #564]	; (8001a94 <HVACState+0x2d0>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d107      	bne.n	8001874 <HVACState+0xb0>
	{

		Btc_AutomaticMode 			= STD_LOW;
 8001864:	4b89      	ldr	r3, [pc, #548]	; (8001a8c <HVACState+0x2c8>)
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 	= Btc_MidVents;
 800186a:	4b8a      	ldr	r3, [pc, #552]	; (8001a94 <HVACState+0x2d0>)
 800186c:	781a      	ldrb	r2, [r3, #0]
 800186e:	4b8a      	ldr	r3, [pc, #552]	; (8001a98 <HVACState+0x2d4>)
 8001870:	701a      	strb	r2, [r3, #0]
 8001872:	e00a      	b.n	800188a <HVACState+0xc6>

	}
	else if(Btc_MidVents == STD_LOW)
 8001874:	4b87      	ldr	r3, [pc, #540]	; (8001a94 <HVACState+0x2d0>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d106      	bne.n	800188a <HVACState+0xc6>
	{

		Btc_AutomaticMode 			= STD_LOW;
 800187c:	4b83      	ldr	r3, [pc, #524]	; (8001a8c <HVACState+0x2c8>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 	= Btc_MidVents;
 8001882:	4b84      	ldr	r3, [pc, #528]	; (8001a94 <HVACState+0x2d0>)
 8001884:	781a      	ldrb	r2, [r3, #0]
 8001886:	4b84      	ldr	r3, [pc, #528]	; (8001a98 <HVACState+0x2d4>)
 8001888:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_WindshieldVents == STD_HIGH)
 800188a:	4b84      	ldr	r3, [pc, #528]	; (8001a9c <HVACState+0x2d8>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d107      	bne.n	80018a2 <HVACState+0xde>
	{

		Btc_AutomaticMode 					= STD_LOW;
 8001892:	4b7e      	ldr	r3, [pc, #504]	; (8001a8c <HVACState+0x2c8>)
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 	= Btc_WindshieldVents;
 8001898:	4b80      	ldr	r3, [pc, #512]	; (8001a9c <HVACState+0x2d8>)
 800189a:	781a      	ldrb	r2, [r3, #0]
 800189c:	4b80      	ldr	r3, [pc, #512]	; (8001aa0 <HVACState+0x2dc>)
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	e00a      	b.n	80018b8 <HVACState+0xf4>

	}
	else if(Btc_WindshieldVents == STD_LOW)
 80018a2:	4b7e      	ldr	r3, [pc, #504]	; (8001a9c <HVACState+0x2d8>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d106      	bne.n	80018b8 <HVACState+0xf4>
	{

		Btc_AutomaticMode 					= STD_LOW;
 80018aa:	4b78      	ldr	r3, [pc, #480]	; (8001a8c <HVACState+0x2c8>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 	= Btc_WindshieldVents;
 80018b0:	4b7a      	ldr	r3, [pc, #488]	; (8001a9c <HVACState+0x2d8>)
 80018b2:	781a      	ldrb	r2, [r3, #0]
 80018b4:	4b7a      	ldr	r3, [pc, #488]	; (8001aa0 <HVACState+0x2dc>)
 80018b6:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_WindshieldDefrost == STD_HIGH)
 80018b8:	4b7a      	ldr	r3, [pc, #488]	; (8001aa4 <HVACState+0x2e0>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d110      	bne.n	80018e2 <HVACState+0x11e>
	{

		Btc_AutomaticMode				 		= STD_LOW;
 80018c0:	4b72      	ldr	r3, [pc, #456]	; (8001a8c <HVACState+0x2c8>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
 80018c6:	4b77      	ldr	r3, [pc, #476]	; (8001aa4 <HVACState+0x2e0>)
 80018c8:	781a      	ldrb	r2, [r3, #0]
 80018ca:	4b77      	ldr	r3, [pc, #476]	; (8001aa8 <HVACState+0x2e4>)
 80018cc:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= STD_LOW;
 80018ce:	4b70      	ldr	r3, [pc, #448]	; (8001a90 <HVACState+0x2cc>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= STD_LOW;
 80018d4:	4b70      	ldr	r3, [pc, #448]	; (8001a98 <HVACState+0x2d4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= STD_LOW;
 80018da:	4b71      	ldr	r3, [pc, #452]	; (8001aa0 <HVACState+0x2dc>)
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
 80018e0:	e016      	b.n	8001910 <HVACState+0x14c>

	}
	else if(Btc_WindshieldDefrost == STD_LOW)
 80018e2:	4b70      	ldr	r3, [pc, #448]	; (8001aa4 <HVACState+0x2e0>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d112      	bne.n	8001910 <HVACState+0x14c>
	{

		Btc_AutomaticMode				 		= STD_LOW;
 80018ea:	4b68      	ldr	r3, [pc, #416]	; (8001a8c <HVACState+0x2c8>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
 80018f0:	4b6c      	ldr	r3, [pc, #432]	; (8001aa4 <HVACState+0x2e0>)
 80018f2:	781a      	ldrb	r2, [r3, #0]
 80018f4:	4b6c      	ldr	r3, [pc, #432]	; (8001aa8 <HVACState+0x2e4>)
 80018f6:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= Btc_LegVents;
 80018f8:	4b63      	ldr	r3, [pc, #396]	; (8001a88 <HVACState+0x2c4>)
 80018fa:	781a      	ldrb	r2, [r3, #0]
 80018fc:	4b64      	ldr	r3, [pc, #400]	; (8001a90 <HVACState+0x2cc>)
 80018fe:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= Btc_MidVents;
 8001900:	4b64      	ldr	r3, [pc, #400]	; (8001a94 <HVACState+0x2d0>)
 8001902:	781a      	ldrb	r2, [r3, #0]
 8001904:	4b64      	ldr	r3, [pc, #400]	; (8001a98 <HVACState+0x2d4>)
 8001906:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= Btc_WindshieldVents;
 8001908:	4b64      	ldr	r3, [pc, #400]	; (8001a9c <HVACState+0x2d8>)
 800190a:	781a      	ldrb	r2, [r3, #0]
 800190c:	4b64      	ldr	r3, [pc, #400]	; (8001aa0 <HVACState+0x2dc>)
 800190e:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_AutomaticMode == STD_HIGH)
 8001910:	4b5e      	ldr	r3, [pc, #376]	; (8001a8c <HVACState+0x2c8>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b01      	cmp	r3, #1
 8001916:	f040 80e5 	bne.w	8001ae4 <HVACState+0x320>
	{

		HVAC_AutomaticMode_CurrentState 		= STD_HIGH;
 800191a:	4b64      	ldr	r3, [pc, #400]	; (8001aac <HVACState+0x2e8>)
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= STD_LOW;
 8001920:	4b61      	ldr	r3, [pc, #388]	; (8001aa8 <HVACState+0x2e4>)
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= STD_LOW;
 8001926:	4b5e      	ldr	r3, [pc, #376]	; (8001aa0 <HVACState+0x2dc>)
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= STD_LOW;
 800192c:	4b5a      	ldr	r3, [pc, #360]	; (8001a98 <HVACState+0x2d4>)
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= STD_LOW;
 8001932:	4b57      	ldr	r3, [pc, #348]	; (8001a90 <HVACState+0x2cc>)
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]

		if(HVAC_TemperatureValue < HVAC_TemSenRxTemperature)
 8001938:	4b4f      	ldr	r3, [pc, #316]	; (8001a78 <HVACState+0x2b4>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	ee07 3a90 	vmov	s15, r3
 8001940:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001944:	4b5a      	ldr	r3, [pc, #360]	; (8001ab0 <HVACState+0x2ec>)
 8001946:	edd3 7a00 	vldr	s15, [r3]
 800194a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800194e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001952:	d542      	bpl.n	80019da <HVACState+0x216>
		{

			if((HVAC_TemSenRxTemperature - HVAC_TemperatureValue) * 2 > 7)
 8001954:	4b56      	ldr	r3, [pc, #344]	; (8001ab0 <HVACState+0x2ec>)
 8001956:	ed93 7a00 	vldr	s14, [r3]
 800195a:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <HVACState+0x2b4>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800196a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800196e:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001972:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197a:	dd03      	ble.n	8001984 <HVACState+0x1c0>
			{

				HVAC_FanValue = 7;
 800197c:	4b41      	ldr	r3, [pc, #260]	; (8001a84 <HVACState+0x2c0>)
 800197e:	2207      	movs	r2, #7
 8001980:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8001982:	e0c6      	b.n	8001b12 <HVACState+0x34e>
			else if((HVAC_TemSenRxTemperature - HVAC_TemperatureValue) * 2 <= 7)
 8001984:	4b4a      	ldr	r3, [pc, #296]	; (8001ab0 <HVACState+0x2ec>)
 8001986:	ed93 7a00 	vldr	s14, [r3]
 800198a:	4b3b      	ldr	r3, [pc, #236]	; (8001a78 <HVACState+0x2b4>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	ee07 3a90 	vmov	s15, r3
 8001992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800199e:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80019a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019aa:	d900      	bls.n	80019ae <HVACState+0x1ea>
}
 80019ac:	e0b1      	b.n	8001b12 <HVACState+0x34e>
				HVAC_FanValue = (HVAC_TemSenRxTemperature - HVAC_TemperatureValue) * 2;
 80019ae:	4b40      	ldr	r3, [pc, #256]	; (8001ab0 <HVACState+0x2ec>)
 80019b0:	ed93 7a00 	vldr	s14, [r3]
 80019b4:	4b30      	ldr	r3, [pc, #192]	; (8001a78 <HVACState+0x2b4>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	ee07 3a90 	vmov	s15, r3
 80019bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019cc:	edc7 7a01 	vstr	s15, [r7, #4]
 80019d0:	793b      	ldrb	r3, [r7, #4]
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	4b2b      	ldr	r3, [pc, #172]	; (8001a84 <HVACState+0x2c0>)
 80019d6:	701a      	strb	r2, [r3, #0]
}
 80019d8:	e09b      	b.n	8001b12 <HVACState+0x34e>
		else if(HVAC_TemperatureValue >= HVAC_TemSenRxTemperature)
 80019da:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <HVACState+0x2b4>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e6:	4b32      	ldr	r3, [pc, #200]	; (8001ab0 <HVACState+0x2ec>)
 80019e8:	edd3 7a00 	vldr	s15, [r3]
 80019ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f4:	da00      	bge.n	80019f8 <HVACState+0x234>
}
 80019f6:	e08c      	b.n	8001b12 <HVACState+0x34e>
			if((HVAC_TemSenRxTemperature - HVAC_TemperatureValue) / 2 < 1)
 80019f8:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <HVACState+0x2ec>)
 80019fa:	ed93 7a00 	vldr	s14, [r3]
 80019fe:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <HVACState+0x2b4>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	ee07 3a90 	vmov	s15, r3
 8001a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a0e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a22:	d503      	bpl.n	8001a2c <HVACState+0x268>
				HVAC_FanValue = 1;
 8001a24:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <HVACState+0x2c0>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
}
 8001a2a:	e072      	b.n	8001b12 <HVACState+0x34e>
			else if((HVAC_TemSenRxTemperature - HVAC_TemperatureValue) / 2 > 1)
 8001a2c:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <HVACState+0x2ec>)
 8001a2e:	ed93 7a00 	vldr	s14, [r3]
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <HVACState+0x2b4>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	ee07 3a90 	vmov	s15, r3
 8001a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a42:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a56:	dc2d      	bgt.n	8001ab4 <HVACState+0x2f0>
}
 8001a58:	e05b      	b.n	8001b12 <HVACState+0x34e>
 8001a5a:	bf00      	nop
 8001a5c:	200000d1 	.word	0x200000d1
 8001a60:	200000ca 	.word	0x200000ca
 8001a64:	200000d2 	.word	0x200000d2
 8001a68:	200000c7 	.word	0x200000c7
 8001a6c:	200000d4 	.word	0x200000d4
 8001a70:	200000c9 	.word	0x200000c9
 8001a74:	200000cb 	.word	0x200000cb
 8001a78:	200000c1 	.word	0x200000c1
 8001a7c:	200000cc 	.word	0x200000cc
 8001a80:	200000c0 	.word	0x200000c0
 8001a84:	200000c2 	.word	0x200000c2
 8001a88:	200000cd 	.word	0x200000cd
 8001a8c:	200000d3 	.word	0x200000d3
 8001a90:	200000c3 	.word	0x200000c3
 8001a94:	200000ce 	.word	0x200000ce
 8001a98:	200000c4 	.word	0x200000c4
 8001a9c:	200000cf 	.word	0x200000cf
 8001aa0:	200000c5 	.word	0x200000c5
 8001aa4:	200000d0 	.word	0x200000d0
 8001aa8:	200000c6 	.word	0x200000c6
 8001aac:	200000c8 	.word	0x200000c8
 8001ab0:	200000d8 	.word	0x200000d8
				HVAC_FanValue = (HVAC_TemSenRxTemperature - HVAC_TemperatureValue) / 2;
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <HVACState+0x35c>)
 8001ab6:	ed93 7a00 	vldr	s14, [r3]
 8001aba:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <HVACState+0x360>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	ee07 3a90 	vmov	s15, r3
 8001ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001aca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ace:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ad6:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ada:	793b      	ldrb	r3, [r7, #4]
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HVACState+0x364>)
 8001ae0:	701a      	strb	r2, [r3, #0]
}
 8001ae2:	e016      	b.n	8001b12 <HVACState+0x34e>
	else if(Btc_NormalMode == STD_HIGH)
 8001ae4:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <HVACState+0x368>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d112      	bne.n	8001b12 <HVACState+0x34e>
		HVAC_AutomaticMode_CurrentState 		= STD_LOW;
 8001aec:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <HVACState+0x36c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <HVACState+0x370>)
 8001af4:	781a      	ldrb	r2, [r3, #0]
 8001af6:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <HVACState+0x374>)
 8001af8:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= Btc_WindshieldVents;
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HVACState+0x378>)
 8001afc:	781a      	ldrb	r2, [r3, #0]
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <HVACState+0x37c>)
 8001b00:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= Btc_MidVents;
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <HVACState+0x380>)
 8001b04:	781a      	ldrb	r2, [r3, #0]
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <HVACState+0x384>)
 8001b08:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= Btc_LegVents;
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <HVACState+0x388>)
 8001b0c:	781a      	ldrb	r2, [r3, #0]
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <HVACState+0x38c>)
 8001b10:	701a      	strb	r2, [r3, #0]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	200000d8 	.word	0x200000d8
 8001b24:	200000c1 	.word	0x200000c1
 8001b28:	200000c2 	.word	0x200000c2
 8001b2c:	200000d5 	.word	0x200000d5
 8001b30:	200000c8 	.word	0x200000c8
 8001b34:	200000d0 	.word	0x200000d0
 8001b38:	200000c6 	.word	0x200000c6
 8001b3c:	200000cf 	.word	0x200000cf
 8001b40:	200000c5 	.word	0x200000c5
 8001b44:	200000ce 	.word	0x200000ce
 8001b48:	200000c4 	.word	0x200000c4
 8001b4c:	200000cd 	.word	0x200000cd
 8001b50:	200000c3 	.word	0x200000c3

08001b54 <IntLightsRxBtcState>:
void IntLightsMainFunction();
void IntLightsToggleIntLights(uint8 PinState);
void IntLightsRxBtcState();

void IntLightsRxBtcState()
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0

	uint8 lightsStateFromBtcCommand = BtcReceivedDataOnBluetooth;
 8001b5a:	4b24      	ldr	r3, [pc, #144]	; (8001bec <IntLightsRxBtcState+0x98>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]

	switch(lightsStateFromBtcCommand)
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	2b13      	cmp	r3, #19
 8001b66:	d83b      	bhi.n	8001be0 <IntLightsRxBtcState+0x8c>
 8001b68:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <IntLightsRxBtcState+0x1c>)
 8001b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6e:	bf00      	nop
 8001b70:	08001bc1 	.word	0x08001bc1
 8001b74:	08001bc9 	.word	0x08001bc9
 8001b78:	08001be1 	.word	0x08001be1
 8001b7c:	08001be1 	.word	0x08001be1
 8001b80:	08001be1 	.word	0x08001be1
 8001b84:	08001be1 	.word	0x08001be1
 8001b88:	08001be1 	.word	0x08001be1
 8001b8c:	08001be1 	.word	0x08001be1
 8001b90:	08001be1 	.word	0x08001be1
 8001b94:	08001be1 	.word	0x08001be1
 8001b98:	08001be1 	.word	0x08001be1
 8001b9c:	08001be1 	.word	0x08001be1
 8001ba0:	08001be1 	.word	0x08001be1
 8001ba4:	08001be1 	.word	0x08001be1
 8001ba8:	08001be1 	.word	0x08001be1
 8001bac:	08001be1 	.word	0x08001be1
 8001bb0:	08001be1 	.word	0x08001be1
 8001bb4:	08001be1 	.word	0x08001be1
 8001bb8:	08001bd1 	.word	0x08001bd1
 8001bbc:	08001bd9 	.word	0x08001bd9
	{
		case LIGHTSON_CENLOCON:

			IntLights_CurrentState = STD_HIGH;
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <IntLightsRxBtcState+0x9c>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	701a      	strb	r2, [r3, #0]

			break;
 8001bc6:	e00b      	b.n	8001be0 <IntLightsRxBtcState+0x8c>

		case LIGHTSOFF_CENLOCOFF:

			IntLights_CurrentState = STD_LOW;
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <IntLightsRxBtcState+0x9c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]

			break;
 8001bce:	e007      	b.n	8001be0 <IntLightsRxBtcState+0x8c>

		case LIGHTSON_INTLIGHTSON:

			IntLights_CurrentState = STD_HIGH;
 8001bd0:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <IntLightsRxBtcState+0x9c>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]

			break;
 8001bd6:	e003      	b.n	8001be0 <IntLightsRxBtcState+0x8c>

		case LIGHTSOFF_INTLIGHTSOFF:

			IntLights_CurrentState = STD_LOW;
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <IntLightsRxBtcState+0x9c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]

			break;
 8001bde:	bf00      	nop

	}

}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	20000094 	.word	0x20000094
 8001bf0:	200000f4 	.word	0x200000f4

08001bf4 <IntLightsMainFunction>:

void IntLightsMainFunction()
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0

	IntLightsRxBtcState();
 8001bf8:	f7ff ffac 	bl	8001b54 <IntLightsRxBtcState>
	IntLightsToggleIntLights(IntLights_CurrentState);
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <IntLightsMainFunction+0x18>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 f805 	bl	8001c10 <IntLightsToggleIntLights>

}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200000f4 	.word	0x200000f4

08001c10 <IntLightsToggleIntLights>:
	return E_OK;

}

void IntLightsToggleIntLights(uint8 PinState)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(INTERIOR_LIGHT_PORT, INTERIOR_LIGHT_PIN, PinState);
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c22:	4803      	ldr	r0, [pc, #12]	; (8001c30 <IntLightsToggleIntLights+0x20>)
 8001c24:	f003 fe5e 	bl	80058e4 <HAL_GPIO_WritePin>

}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40020400 	.word	0x40020400

08001c34 <SecAlmVibeSenReadPin>:
void SecAlmState();
void SecAlmLightsBuzzerControl();
void SecAlmTurnOnExtLights();

StdReturnType SecAlmVibeSenReadPin()
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0

	uint8 PinState = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	71fb      	strb	r3, [r7, #7]

	PinState = HAL_GPIO_ReadPin(SECALM_VIBSEN_PORT, SECALM_VIBSEN_PIN);
 8001c3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c42:	4805      	ldr	r0, [pc, #20]	; (8001c58 <SecAlmVibeSenReadPin+0x24>)
 8001c44:	f003 fe28 	bl	8005898 <HAL_GPIO_ReadPin>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	71fb      	strb	r3, [r7, #7]

	return PinState;
 8001c4c:	79fb      	ldrb	r3, [r7, #7]

}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40020400 	.word	0x40020400

08001c5c <SecAlmVibSenStatus>:

StdReturnType SecAlmVibSenStatus()
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0

	uint8 status = STD_LOW;
 8001c62:	2300      	movs	r3, #0
 8001c64:	71fb      	strb	r3, [r7, #7]

	SecAlm_VibSenStatusFlag = SecAlmVibeSenReadPin();
 8001c66:	f7ff ffe5 	bl	8001c34 <SecAlmVibeSenReadPin>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <SecAlmVibSenStatus+0x30>)
 8001c70:	601a      	str	r2, [r3, #0]

	if(SecAlm_VibSenStatusFlag >= 1000)
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <SecAlmVibSenStatus+0x30>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c7a:	d301      	bcc.n	8001c80 <SecAlmVibSenStatus+0x24>
	{

		status = STD_HIGH;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* do nothing */
	}

	return status;
 8001c80:	79fb      	ldrb	r3, [r7, #7]

}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200000f8 	.word	0x200000f8

08001c90 <SecAlmState>:

void SecAlmState()
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0

	if(SecAlmVibSenStatus() == STD_HIGH && CenLoc_CurrentState == STD_LOW)
 8001c94:	f7ff ffe2 	bl	8001c5c <SecAlmVibSenStatus>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d106      	bne.n	8001cac <SecAlmState+0x1c>
 8001c9e:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <SecAlmState+0x20>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d102      	bne.n	8001cac <SecAlmState+0x1c>
	{

		SecAlm_Trigger = STD_HIGH;
 8001ca6:	4b03      	ldr	r3, [pc, #12]	; (8001cb4 <SecAlmState+0x24>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000095 	.word	0x20000095
 8001cb4:	200000f6 	.word	0x200000f6

08001cb8 <SecAlmTurnOnExtLights>:

void SecAlmTurnOnExtLights()
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0

	ExtLightsLowBeam(SecAlm_PinStateChange);
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <SecAlmTurnOnExtLights+0x44>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fc81 	bl	80015c8 <ExtLightsLowBeam>
	ExtLightsRearPositionLight(SecAlm_PinStateChange);
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <SecAlmTurnOnExtLights+0x44>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fce8 	bl	80016a0 <ExtLightsRearPositionLight>
	ExtLightsFrontFogLight(SecAlm_PinStateChange);
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <SecAlmTurnOnExtLights+0x44>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fcad 	bl	8001634 <ExtLightsFrontFogLight>
	ExtLightsRearFogLight(SecAlm_PinStateChange);
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <SecAlmTurnOnExtLights+0x44>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fcf0 	bl	80016c4 <ExtLightsRearFogLight>
	ExtLightsTurnSignalRight(SecAlm_PinStateChange);
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <SecAlmTurnOnExtLights+0x44>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fcc7 	bl	800167c <ExtLightsTurnSignalRight>
	ExtLightsTurnSignalLeft(SecAlm_PinStateChange);
 8001cee:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <SecAlmTurnOnExtLights+0x44>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fcb0 	bl	8001658 <ExtLightsTurnSignalLeft>

}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	200000fc 	.word	0x200000fc

08001d00 <SecAlmLightsBuzzerControl>:

void SecAlmLightsBuzzerControl()
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0

	if(SecAlm_Trigger == STD_HIGH)
 8001d04:	4b35      	ldr	r3, [pc, #212]	; (8001ddc <SecAlmLightsBuzzerControl+0xdc>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d155      	bne.n	8001db8 <SecAlmLightsBuzzerControl+0xb8>
	{

		if(SecAlm_Timer5Value > 100000)
 8001d0c:	4b34      	ldr	r3, [pc, #208]	; (8001de0 <SecAlmLightsBuzzerControl+0xe0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a34      	ldr	r2, [pc, #208]	; (8001de4 <SecAlmLightsBuzzerControl+0xe4>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d902      	bls.n	8001d1c <SecAlmLightsBuzzerControl+0x1c>
		{

			HAL_TIM_Base_Stop(&htim5);
 8001d16:	4834      	ldr	r0, [pc, #208]	; (8001de8 <SecAlmLightsBuzzerControl+0xe8>)
 8001d18:	f008 f9de 	bl	800a0d8 <HAL_TIM_Base_Stop>

			/* do nothing */

		}

		HAL_TIM_Base_Start(&htim5);
 8001d1c:	4832      	ldr	r0, [pc, #200]	; (8001de8 <SecAlmLightsBuzzerControl+0xe8>)
 8001d1e:	f008 f951 	bl	8009fc4 <HAL_TIM_Base_Start>
		SecAlm_Timer5Value = __HAL_TIM_GET_COUNTER(&htim5);
 8001d22:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <SecAlmLightsBuzzerControl+0xe8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	4a2d      	ldr	r2, [pc, #180]	; (8001de0 <SecAlmLightsBuzzerControl+0xe0>)
 8001d2a:	6013      	str	r3, [r2, #0]

		if(__HAL_TIM_GET_COUNTER(&htim5) < 100000)
 8001d2c:	4b2e      	ldr	r3, [pc, #184]	; (8001de8 <SecAlmLightsBuzzerControl+0xe8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	4a2e      	ldr	r2, [pc, #184]	; (8001dec <SecAlmLightsBuzzerControl+0xec>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d832      	bhi.n	8001d9e <SecAlmLightsBuzzerControl+0x9e>
		{

			HAL_TIM_Base_Start(&htim4);
 8001d38:	482d      	ldr	r0, [pc, #180]	; (8001df0 <SecAlmLightsBuzzerControl+0xf0>)
 8001d3a:	f008 f943 	bl	8009fc4 <HAL_TIM_Base_Start>
			SecAlm_Timer4Value = __HAL_TIM_GET_COUNTER(&htim4);
 8001d3e:	4b2c      	ldr	r3, [pc, #176]	; (8001df0 <SecAlmLightsBuzzerControl+0xf0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	4a2b      	ldr	r2, [pc, #172]	; (8001df4 <SecAlmLightsBuzzerControl+0xf4>)
 8001d46:	6013      	str	r3, [r2, #0]

			if(__HAL_TIM_GET_COUNTER(&htim4) < 5000)
 8001d48:	4b29      	ldr	r3, [pc, #164]	; (8001df0 <SecAlmLightsBuzzerControl+0xf0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d80a      	bhi.n	8001d6c <SecAlmLightsBuzzerControl+0x6c>
			{

				SecAlm_PinStateChange = STD_HIGH;
 8001d56:	4b28      	ldr	r3, [pc, #160]	; (8001df8 <SecAlmLightsBuzzerControl+0xf8>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	701a      	strb	r2, [r3, #0]
				SecAlmToggleAlarmBuzzer(SecAlm_PinStateChange);
 8001d5c:	4b26      	ldr	r3, [pc, #152]	; (8001df8 <SecAlmLightsBuzzerControl+0xf8>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 f855 	bl	8001e10 <SecAlmToggleAlarmBuzzer>
				SecAlmTurnOnExtLights();
 8001d66:	f7ff ffa7 	bl	8001cb8 <SecAlmTurnOnExtLights>

		/* do nothing */

	}

}
 8001d6a:	e034      	b.n	8001dd6 <SecAlmLightsBuzzerControl+0xd6>
			else if(5000 < __HAL_TIM_GET_COUNTER(&htim4) && __HAL_TIM_GET_COUNTER(&htim4) < 10000)
 8001d6c:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <SecAlmLightsBuzzerControl+0xf0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d92d      	bls.n	8001dd6 <SecAlmLightsBuzzerControl+0xd6>
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <SecAlmLightsBuzzerControl+0xf0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d826      	bhi.n	8001dd6 <SecAlmLightsBuzzerControl+0xd6>
				SecAlm_PinStateChange = STD_LOW;
 8001d88:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <SecAlmLightsBuzzerControl+0xf8>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
				SecAlmToggleAlarmBuzzer(SecAlm_PinStateChange);
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <SecAlmLightsBuzzerControl+0xf8>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 f83c 	bl	8001e10 <SecAlmToggleAlarmBuzzer>
				SecAlmTurnOnExtLights();
 8001d98:	f7ff ff8e 	bl	8001cb8 <SecAlmTurnOnExtLights>
}
 8001d9c:	e01b      	b.n	8001dd6 <SecAlmLightsBuzzerControl+0xd6>
		else if(__HAL_TIM_GET_COUNTER(&htim5) > 100000)
 8001d9e:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <SecAlmLightsBuzzerControl+0xe8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	4a0f      	ldr	r2, [pc, #60]	; (8001de4 <SecAlmLightsBuzzerControl+0xe4>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d915      	bls.n	8001dd6 <SecAlmLightsBuzzerControl+0xd6>
			SecAlm_Trigger = STD_LOW;
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <SecAlmLightsBuzzerControl+0xdc>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim5);
 8001db0:	480d      	ldr	r0, [pc, #52]	; (8001de8 <SecAlmLightsBuzzerControl+0xe8>)
 8001db2:	f008 f991 	bl	800a0d8 <HAL_TIM_Base_Stop>
}
 8001db6:	e00e      	b.n	8001dd6 <SecAlmLightsBuzzerControl+0xd6>
	else if(SecAlm_Trigger == STD_LOW)
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <SecAlmLightsBuzzerControl+0xdc>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10a      	bne.n	8001dd6 <SecAlmLightsBuzzerControl+0xd6>
		HAL_TIM_Base_Stop(&htim4);
 8001dc0:	480b      	ldr	r0, [pc, #44]	; (8001df0 <SecAlmLightsBuzzerControl+0xf0>)
 8001dc2:	f008 f989 	bl	800a0d8 <HAL_TIM_Base_Stop>
		SecAlm_PinStateChange = STD_LOW;
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <SecAlmLightsBuzzerControl+0xf8>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
		SecAlm_VibSenStatusFlag = STD_LOW;
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <SecAlmLightsBuzzerControl+0xfc>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
		SecAlmTurnOnExtLights();
 8001dd2:	f7ff ff71 	bl	8001cb8 <SecAlmTurnOnExtLights>
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200000f6 	.word	0x200000f6
 8001de0:	20000100 	.word	0x20000100
 8001de4:	000186a0 	.word	0x000186a0
 8001de8:	20000674 	.word	0x20000674
 8001dec:	0001869f 	.word	0x0001869f
 8001df0:	200005c0 	.word	0x200005c0
 8001df4:	20000104 	.word	0x20000104
 8001df8:	200000fc 	.word	0x200000fc
 8001dfc:	200000f8 	.word	0x200000f8

08001e00 <SecAlmMainFunction>:

void SecAlmMainFunction()
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0

	SecAlmState();
 8001e04:	f7ff ff44 	bl	8001c90 <SecAlmState>
	SecAlmLightsBuzzerControl();
 8001e08:	f7ff ff7a 	bl	8001d00 <SecAlmLightsBuzzerControl>

}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <SecAlmToggleAlarmBuzzer>:
	return E_OK;

}

void SecAlmToggleAlarmBuzzer(uint8 PinState)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e22:	4803      	ldr	r0, [pc, #12]	; (8001e30 <SecAlmToggleAlarmBuzzer+0x20>)
 8001e24:	f003 fd5e 	bl	80058e4 <HAL_GPIO_WritePin>

}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40020400 	.word	0x40020400

08001e34 <SecAlmToggleAlarmLed>:

void SecAlmToggleAlarmLed(uint8 PinState)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	461a      	mov	r2, r3
 8001e42:	2180      	movs	r1, #128	; 0x80
 8001e44:	4803      	ldr	r0, [pc, #12]	; (8001e54 <SecAlmToggleAlarmLed+0x20>)
 8001e46:	f003 fd4d 	bl	80058e4 <HAL_GPIO_WritePin>

}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40020000 	.word	0x40020000

08001e58 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e5e:	463b      	mov	r3, r7
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e6a:	4b3e      	ldr	r3, [pc, #248]	; (8001f64 <MX_ADC1_Init+0x10c>)
 8001e6c:	4a3e      	ldr	r2, [pc, #248]	; (8001f68 <MX_ADC1_Init+0x110>)
 8001e6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e70:	4b3c      	ldr	r3, [pc, #240]	; (8001f64 <MX_ADC1_Init+0x10c>)
 8001e72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e76:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e78:	4b3a      	ldr	r3, [pc, #232]	; (8001f64 <MX_ADC1_Init+0x10c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001e7e:	4b39      	ldr	r3, [pc, #228]	; (8001f64 <MX_ADC1_Init+0x10c>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e84:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <MX_ADC1_Init+0x10c>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e8a:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <MX_ADC1_Init+0x10c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e92:	4b34      	ldr	r3, [pc, #208]	; (8001f64 <MX_ADC1_Init+0x10c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e98:	4b32      	ldr	r3, [pc, #200]	; (8001f64 <MX_ADC1_Init+0x10c>)
 8001e9a:	4a34      	ldr	r2, [pc, #208]	; (8001f6c <MX_ADC1_Init+0x114>)
 8001e9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e9e:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <MX_ADC1_Init+0x10c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001ea4:	4b2f      	ldr	r3, [pc, #188]	; (8001f64 <MX_ADC1_Init+0x10c>)
 8001ea6:	2205      	movs	r2, #5
 8001ea8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001eaa:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <MX_ADC1_Init+0x10c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001eb2:	4b2c      	ldr	r3, [pc, #176]	; (8001f64 <MX_ADC1_Init+0x10c>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001eb8:	482a      	ldr	r0, [pc, #168]	; (8001f64 <MX_ADC1_Init+0x10c>)
 8001eba:	f001 faa3 	bl	8003404 <HAL_ADC_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001ec4:	f000 fbca 	bl	800265c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ed4:	463b      	mov	r3, r7
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4822      	ldr	r0, [pc, #136]	; (8001f64 <MX_ADC1_Init+0x10c>)
 8001eda:	f001 fe97 	bl	8003c0c <HAL_ADC_ConfigChannel>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ee4:	f000 fbba 	bl	800265c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001eec:	2302      	movs	r3, #2
 8001eee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ef0:	463b      	mov	r3, r7
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	481b      	ldr	r0, [pc, #108]	; (8001f64 <MX_ADC1_Init+0x10c>)
 8001ef6:	f001 fe89 	bl	8003c0c <HAL_ADC_ConfigChannel>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001f00:	f000 fbac 	bl	800265c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001f04:	2303      	movs	r3, #3
 8001f06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f0c:	463b      	mov	r3, r7
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4814      	ldr	r0, [pc, #80]	; (8001f64 <MX_ADC1_Init+0x10c>)
 8001f12:	f001 fe7b 	bl	8003c0c <HAL_ADC_ConfigChannel>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001f1c:	f000 fb9e 	bl	800265c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001f20:	2309      	movs	r3, #9
 8001f22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001f24:	2304      	movs	r3, #4
 8001f26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f28:	463b      	mov	r3, r7
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	480d      	ldr	r0, [pc, #52]	; (8001f64 <MX_ADC1_Init+0x10c>)
 8001f2e:	f001 fe6d 	bl	8003c0c <HAL_ADC_ConfigChannel>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001f38:	f000 fb90 	bl	800265c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <MX_ADC1_Init+0x118>)
 8001f3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001f40:	2305      	movs	r3, #5
 8001f42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001f44:	2307      	movs	r3, #7
 8001f46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f48:	463b      	mov	r3, r7
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4805      	ldr	r0, [pc, #20]	; (8001f64 <MX_ADC1_Init+0x10c>)
 8001f4e:	f001 fe5d 	bl	8003c0c <HAL_ADC_ConfigChannel>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8001f58:	f000 fb80 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000108 	.word	0x20000108
 8001f68:	40012000 	.word	0x40012000
 8001f6c:	0f000001 	.word	0x0f000001
 8001f70:	10000012 	.word	0x10000012

08001f74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08c      	sub	sp, #48	; 0x30
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 031c 	add.w	r3, r7, #28
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a4d      	ldr	r2, [pc, #308]	; (80020c8 <HAL_ADC_MspInit+0x154>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	f040 8094 	bne.w	80020c0 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61bb      	str	r3, [r7, #24]
 8001f9c:	4b4b      	ldr	r3, [pc, #300]	; (80020cc <HAL_ADC_MspInit+0x158>)
 8001f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa0:	4a4a      	ldr	r2, [pc, #296]	; (80020cc <HAL_ADC_MspInit+0x158>)
 8001fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa6:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa8:	4b48      	ldr	r3, [pc, #288]	; (80020cc <HAL_ADC_MspInit+0x158>)
 8001faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb0:	61bb      	str	r3, [r7, #24]
 8001fb2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	4b44      	ldr	r3, [pc, #272]	; (80020cc <HAL_ADC_MspInit+0x158>)
 8001fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbc:	4a43      	ldr	r2, [pc, #268]	; (80020cc <HAL_ADC_MspInit+0x158>)
 8001fbe:	f043 0304 	orr.w	r3, r3, #4
 8001fc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc4:	4b41      	ldr	r3, [pc, #260]	; (80020cc <HAL_ADC_MspInit+0x158>)
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	4b3d      	ldr	r3, [pc, #244]	; (80020cc <HAL_ADC_MspInit+0x158>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	4a3c      	ldr	r2, [pc, #240]	; (80020cc <HAL_ADC_MspInit+0x158>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe0:	4b3a      	ldr	r3, [pc, #232]	; (80020cc <HAL_ADC_MspInit+0x158>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	4b36      	ldr	r3, [pc, #216]	; (80020cc <HAL_ADC_MspInit+0x158>)
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	4a35      	ldr	r2, [pc, #212]	; (80020cc <HAL_ADC_MspInit+0x158>)
 8001ff6:	f043 0302 	orr.w	r3, r3, #2
 8001ffa:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffc:	4b33      	ldr	r3, [pc, #204]	; (80020cc <HAL_ADC_MspInit+0x158>)
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002008:	2307      	movs	r3, #7
 800200a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800200c:	2303      	movs	r3, #3
 800200e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002014:	f107 031c 	add.w	r3, r7, #28
 8002018:	4619      	mov	r1, r3
 800201a:	482d      	ldr	r0, [pc, #180]	; (80020d0 <HAL_ADC_MspInit+0x15c>)
 800201c:	f003 f9a2 	bl	8005364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002020:	230e      	movs	r3, #14
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002024:	2303      	movs	r3, #3
 8002026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202c:	f107 031c 	add.w	r3, r7, #28
 8002030:	4619      	mov	r1, r3
 8002032:	4828      	ldr	r0, [pc, #160]	; (80020d4 <HAL_ADC_MspInit+0x160>)
 8002034:	f003 f996 	bl	8005364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002038:	2302      	movs	r3, #2
 800203a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800203c:	2303      	movs	r3, #3
 800203e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002044:	f107 031c 	add.w	r3, r7, #28
 8002048:	4619      	mov	r1, r3
 800204a:	4823      	ldr	r0, [pc, #140]	; (80020d8 <HAL_ADC_MspInit+0x164>)
 800204c:	f003 f98a 	bl	8005364 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002050:	4b22      	ldr	r3, [pc, #136]	; (80020dc <HAL_ADC_MspInit+0x168>)
 8002052:	4a23      	ldr	r2, [pc, #140]	; (80020e0 <HAL_ADC_MspInit+0x16c>)
 8002054:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002056:	4b21      	ldr	r3, [pc, #132]	; (80020dc <HAL_ADC_MspInit+0x168>)
 8002058:	2200      	movs	r2, #0
 800205a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800205c:	4b1f      	ldr	r3, [pc, #124]	; (80020dc <HAL_ADC_MspInit+0x168>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002062:	4b1e      	ldr	r3, [pc, #120]	; (80020dc <HAL_ADC_MspInit+0x168>)
 8002064:	2200      	movs	r2, #0
 8002066:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002068:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <HAL_ADC_MspInit+0x168>)
 800206a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800206e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002070:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <HAL_ADC_MspInit+0x168>)
 8002072:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002076:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002078:	4b18      	ldr	r3, [pc, #96]	; (80020dc <HAL_ADC_MspInit+0x168>)
 800207a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800207e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002080:	4b16      	ldr	r3, [pc, #88]	; (80020dc <HAL_ADC_MspInit+0x168>)
 8002082:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002086:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002088:	4b14      	ldr	r3, [pc, #80]	; (80020dc <HAL_ADC_MspInit+0x168>)
 800208a:	2200      	movs	r2, #0
 800208c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800208e:	4b13      	ldr	r3, [pc, #76]	; (80020dc <HAL_ADC_MspInit+0x168>)
 8002090:	2200      	movs	r2, #0
 8002092:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002094:	4811      	ldr	r0, [pc, #68]	; (80020dc <HAL_ADC_MspInit+0x168>)
 8002096:	f002 fa05 	bl	80044a4 <HAL_DMA_Init>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80020a0:	f000 fadc 	bl	800265c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a0d      	ldr	r2, [pc, #52]	; (80020dc <HAL_ADC_MspInit+0x168>)
 80020a8:	639a      	str	r2, [r3, #56]	; 0x38
 80020aa:	4a0c      	ldr	r2, [pc, #48]	; (80020dc <HAL_ADC_MspInit+0x168>)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80020b0:	2200      	movs	r2, #0
 80020b2:	2105      	movs	r1, #5
 80020b4:	2012      	movs	r0, #18
 80020b6:	f002 f987 	bl	80043c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80020ba:	2012      	movs	r0, #18
 80020bc:	f002 f9b0 	bl	8004420 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80020c0:	bf00      	nop
 80020c2:	3730      	adds	r7, #48	; 0x30
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40012000 	.word	0x40012000
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40020800 	.word	0x40020800
 80020d4:	40020000 	.word	0x40020000
 80020d8:	40020400 	.word	0x40020400
 80020dc:	2000016c 	.word	0x2000016c
 80020e0:	40026410 	.word	0x40026410

080020e4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <MX_CRC_Init+0x20>)
 80020ea:	4a07      	ldr	r2, [pc, #28]	; (8002108 <MX_CRC_Init+0x24>)
 80020ec:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80020ee:	4805      	ldr	r0, [pc, #20]	; (8002104 <MX_CRC_Init+0x20>)
 80020f0:	f002 f9ae 	bl	8004450 <HAL_CRC_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80020fa:	f000 faaf 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200001cc 	.word	0x200001cc
 8002108:	40023000 	.word	0x40023000

0800210c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <HAL_CRC_MspInit+0x3c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d10d      	bne.n	800213a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	4b0a      	ldr	r3, [pc, #40]	; (800214c <HAL_CRC_MspInit+0x40>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a09      	ldr	r2, [pc, #36]	; (800214c <HAL_CRC_MspInit+0x40>)
 8002128:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b07      	ldr	r3, [pc, #28]	; (800214c <HAL_CRC_MspInit+0x40>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40023000 	.word	0x40023000
 800214c:	40023800 	.word	0x40023800

08002150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <MX_DMA_Init+0x3c>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a0b      	ldr	r2, [pc, #44]	; (800218c <MX_DMA_Init+0x3c>)
 8002160:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <MX_DMA_Init+0x3c>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	2105      	movs	r1, #5
 8002176:	2038      	movs	r0, #56	; 0x38
 8002178:	f002 f926 	bl	80043c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800217c:	2038      	movs	r0, #56	; 0x38
 800217e:	f002 f94f 	bl	8004420 <HAL_NVIC_EnableIRQ>

}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800

08002190 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002194:	4a08      	ldr	r2, [pc, #32]	; (80021b8 <MX_FREERTOS_Init+0x28>)
 8002196:	2100      	movs	r1, #0
 8002198:	4808      	ldr	r0, [pc, #32]	; (80021bc <MX_FREERTOS_Init+0x2c>)
 800219a:	f00a f8ad 	bl	800c2f8 <osThreadNew>
 800219e:	4603      	mov	r3, r0
 80021a0:	4a07      	ldr	r2, [pc, #28]	; (80021c0 <MX_FREERTOS_Init+0x30>)
 80021a2:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80021a4:	4a07      	ldr	r2, [pc, #28]	; (80021c4 <MX_FREERTOS_Init+0x34>)
 80021a6:	2100      	movs	r1, #0
 80021a8:	4807      	ldr	r0, [pc, #28]	; (80021c8 <MX_FREERTOS_Init+0x38>)
 80021aa:	f00a f8a5 	bl	800c2f8 <osThreadNew>
 80021ae:	4603      	mov	r3, r0
 80021b0:	4a06      	ldr	r2, [pc, #24]	; (80021cc <MX_FREERTOS_Init+0x3c>)
 80021b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	0800f67c 	.word	0x0800f67c
 80021bc:	080021d1 	.word	0x080021d1
 80021c0:	200001d8 	.word	0x200001d8
 80021c4:	0800f6a0 	.word	0x0800f6a0
 80021c8:	080021f9 	.word	0x080021f9
 80021cc:	200001dc 	.word	0x200001dc

080021d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  CenLocMainFunction();
 80021d8:	f7fe ff1e 	bl	8001018 <CenLocMainFunction>
	  BtcMainFunction();
 80021dc:	f7fe fc78 	bl	8000ad0 <BtcMainFunction>
	  ExtLightsMainFunction();
 80021e0:	f7fe ff26 	bl	8001030 <ExtLightsMainFunction>
	  IntLightsMainFunction();
 80021e4:	f7ff fd06 	bl	8001bf4 <IntLightsMainFunction>
	  SecAlmMainFunction();
 80021e8:	f7ff fe0a 	bl	8001e00 <SecAlmMainFunction>
	  HVACMainFunction();
 80021ec:	f7ff fada 	bl	80017a4 <HVACMainFunction>
    osDelay(1);
 80021f0:	2001      	movs	r0, #1
 80021f2:	f00a f913 	bl	800c41c <osDelay>
	  CenLocMainFunction();
 80021f6:	e7ef      	b.n	80021d8 <StartDefaultTask+0x8>

080021f8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  OS_Counter++;
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <StartTask02+0x1c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	3301      	adds	r3, #1
 8002206:	4a03      	ldr	r2, [pc, #12]	; (8002214 <StartTask02+0x1c>)
 8002208:	6013      	str	r3, [r2, #0]
    osDelay(1);
 800220a:	2001      	movs	r0, #1
 800220c:	f00a f906 	bl	800c41c <osDelay>
	  OS_Counter++;
 8002210:	e7f6      	b.n	8002200 <StartTask02+0x8>
 8002212:	bf00      	nop
 8002214:	200001d4 	.word	0x200001d4

08002218 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	4b1e      	ldr	r3, [pc, #120]	; (800229c <MX_GPIO_Init+0x84>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a1d      	ldr	r2, [pc, #116]	; (800229c <MX_GPIO_Init+0x84>)
 8002228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b1b      	ldr	r3, [pc, #108]	; (800229c <MX_GPIO_Init+0x84>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <MX_GPIO_Init+0x84>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a16      	ldr	r2, [pc, #88]	; (800229c <MX_GPIO_Init+0x84>)
 8002244:	f043 0304 	orr.w	r3, r3, #4
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b14      	ldr	r3, [pc, #80]	; (800229c <MX_GPIO_Init+0x84>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
 800225a:	4b10      	ldr	r3, [pc, #64]	; (800229c <MX_GPIO_Init+0x84>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a0f      	ldr	r2, [pc, #60]	; (800229c <MX_GPIO_Init+0x84>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <MX_GPIO_Init+0x84>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	603b      	str	r3, [r7, #0]
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <MX_GPIO_Init+0x84>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a08      	ldr	r2, [pc, #32]	; (800229c <MX_GPIO_Init+0x84>)
 800227c:	f043 0302 	orr.w	r3, r3, #2
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <MX_GPIO_Init+0x84>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	683b      	ldr	r3, [r7, #0]

}
 800228e:	bf00      	nop
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800

080022a0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022a4:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <MX_I2C1_Init+0x50>)
 80022a6:	4a13      	ldr	r2, [pc, #76]	; (80022f4 <MX_I2C1_Init+0x54>)
 80022a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80022aa:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <MX_I2C1_Init+0x50>)
 80022ac:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <MX_I2C1_Init+0x58>)
 80022ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022b0:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <MX_I2C1_Init+0x50>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022b6:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <MX_I2C1_Init+0x50>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <MX_I2C1_Init+0x50>)
 80022be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022c4:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <MX_I2C1_Init+0x50>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <MX_I2C1_Init+0x50>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022d0:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <MX_I2C1_Init+0x50>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <MX_I2C1_Init+0x50>)
 80022d8:	2200      	movs	r2, #0
 80022da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022dc:	4804      	ldr	r0, [pc, #16]	; (80022f0 <MX_I2C1_Init+0x50>)
 80022de:	f003 fb33 	bl	8005948 <HAL_I2C_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80022e8:	f000 f9b8 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	200001e0 	.word	0x200001e0
 80022f4:	40005400 	.word	0x40005400
 80022f8:	000186a0 	.word	0x000186a0

080022fc <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <MX_I2C3_Init+0x50>)
 8002302:	4a13      	ldr	r2, [pc, #76]	; (8002350 <MX_I2C3_Init+0x54>)
 8002304:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <MX_I2C3_Init+0x50>)
 8002308:	4a12      	ldr	r2, [pc, #72]	; (8002354 <MX_I2C3_Init+0x58>)
 800230a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <MX_I2C3_Init+0x50>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <MX_I2C3_Init+0x50>)
 8002314:	2200      	movs	r2, #0
 8002316:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <MX_I2C3_Init+0x50>)
 800231a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800231e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <MX_I2C3_Init+0x50>)
 8002322:	2200      	movs	r2, #0
 8002324:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <MX_I2C3_Init+0x50>)
 8002328:	2200      	movs	r2, #0
 800232a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800232c:	4b07      	ldr	r3, [pc, #28]	; (800234c <MX_I2C3_Init+0x50>)
 800232e:	2200      	movs	r2, #0
 8002330:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <MX_I2C3_Init+0x50>)
 8002334:	2200      	movs	r2, #0
 8002336:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002338:	4804      	ldr	r0, [pc, #16]	; (800234c <MX_I2C3_Init+0x50>)
 800233a:	f003 fb05 	bl	8005948 <HAL_I2C_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002344:	f000 f98a 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000264 	.word	0x20000264
 8002350:	40005c00 	.word	0x40005c00
 8002354:	000186a0 	.word	0x000186a0

08002358 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08c      	sub	sp, #48	; 0x30
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	f107 031c 	add.w	r3, r7, #28
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a4a      	ldr	r2, [pc, #296]	; (80024a0 <HAL_I2C_MspInit+0x148>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d13d      	bne.n	80023f6 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
 800237e:	4b49      	ldr	r3, [pc, #292]	; (80024a4 <HAL_I2C_MspInit+0x14c>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4a48      	ldr	r2, [pc, #288]	; (80024a4 <HAL_I2C_MspInit+0x14c>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	4b46      	ldr	r3, [pc, #280]	; (80024a4 <HAL_I2C_MspInit+0x14c>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	61bb      	str	r3, [r7, #24]
 8002394:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002396:	f44f 7310 	mov.w	r3, #576	; 0x240
 800239a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800239c:	2312      	movs	r3, #18
 800239e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a4:	2303      	movs	r3, #3
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023a8:	2304      	movs	r3, #4
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ac:	f107 031c 	add.w	r3, r7, #28
 80023b0:	4619      	mov	r1, r3
 80023b2:	483d      	ldr	r0, [pc, #244]	; (80024a8 <HAL_I2C_MspInit+0x150>)
 80023b4:	f002 ffd6 	bl	8005364 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	4b39      	ldr	r3, [pc, #228]	; (80024a4 <HAL_I2C_MspInit+0x14c>)
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	4a38      	ldr	r2, [pc, #224]	; (80024a4 <HAL_I2C_MspInit+0x14c>)
 80023c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023c6:	6413      	str	r3, [r2, #64]	; 0x40
 80023c8:	4b36      	ldr	r3, [pc, #216]	; (80024a4 <HAL_I2C_MspInit+0x14c>)
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80023d4:	2200      	movs	r2, #0
 80023d6:	2105      	movs	r1, #5
 80023d8:	201f      	movs	r0, #31
 80023da:	f001 fff5 	bl	80043c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80023de:	201f      	movs	r0, #31
 80023e0:	f002 f81e 	bl	8004420 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80023e4:	2200      	movs	r2, #0
 80023e6:	2105      	movs	r1, #5
 80023e8:	2020      	movs	r0, #32
 80023ea:	f001 ffed 	bl	80043c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80023ee:	2020      	movs	r0, #32
 80023f0:	f002 f816 	bl	8004420 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80023f4:	e050      	b.n	8002498 <HAL_I2C_MspInit+0x140>
  else if(i2cHandle->Instance==I2C3)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a2c      	ldr	r2, [pc, #176]	; (80024ac <HAL_I2C_MspInit+0x154>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d14b      	bne.n	8002498 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002400:	2300      	movs	r3, #0
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <HAL_I2C_MspInit+0x14c>)
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	4a26      	ldr	r2, [pc, #152]	; (80024a4 <HAL_I2C_MspInit+0x14c>)
 800240a:	f043 0304 	orr.w	r3, r3, #4
 800240e:	6313      	str	r3, [r2, #48]	; 0x30
 8002410:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <HAL_I2C_MspInit+0x14c>)
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <HAL_I2C_MspInit+0x14c>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	4a1f      	ldr	r2, [pc, #124]	; (80024a4 <HAL_I2C_MspInit+0x14c>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6313      	str	r3, [r2, #48]	; 0x30
 800242c:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <HAL_I2C_MspInit+0x14c>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002438:	f44f 7300 	mov.w	r3, #512	; 0x200
 800243c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800243e:	2312      	movs	r3, #18
 8002440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002446:	2303      	movs	r3, #3
 8002448:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800244a:	2304      	movs	r3, #4
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800244e:	f107 031c 	add.w	r3, r7, #28
 8002452:	4619      	mov	r1, r3
 8002454:	4816      	ldr	r0, [pc, #88]	; (80024b0 <HAL_I2C_MspInit+0x158>)
 8002456:	f002 ff85 	bl	8005364 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800245a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800245e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002460:	2312      	movs	r3, #18
 8002462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002468:	2303      	movs	r3, #3
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800246c:	2304      	movs	r3, #4
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002470:	f107 031c 	add.w	r3, r7, #28
 8002474:	4619      	mov	r1, r3
 8002476:	480f      	ldr	r0, [pc, #60]	; (80024b4 <HAL_I2C_MspInit+0x15c>)
 8002478:	f002 ff74 	bl	8005364 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800247c:	2300      	movs	r3, #0
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <HAL_I2C_MspInit+0x14c>)
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	4a07      	ldr	r2, [pc, #28]	; (80024a4 <HAL_I2C_MspInit+0x14c>)
 8002486:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800248a:	6413      	str	r3, [r2, #64]	; 0x40
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <HAL_I2C_MspInit+0x14c>)
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	68bb      	ldr	r3, [r7, #8]
}
 8002498:	bf00      	nop
 800249a:	3730      	adds	r7, #48	; 0x30
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40005400 	.word	0x40005400
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40020400 	.word	0x40020400
 80024ac:	40005c00 	.word	0x40005c00
 80024b0:	40020800 	.word	0x40020800
 80024b4:	40020000 	.word	0x40020000

080024b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024bc:	f000 ff60 	bl	8003380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024c0:	f000 f82c 	bl	800251c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024c4:	f7ff fea8 	bl	8002218 <MX_GPIO_Init>
  MX_DMA_Init();
 80024c8:	f7ff fe42 	bl	8002150 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80024cc:	f000 fdfa 	bl	80030c4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80024d0:	f000 fbb4 	bl	8002c3c <MX_TIM2_Init>
  MX_TIM3_Init();
 80024d4:	f000 fc00 	bl	8002cd8 <MX_TIM3_Init>
  MX_TIM5_Init();
 80024d8:	f000 fc9a 	bl	8002e10 <MX_TIM5_Init>
  MX_TIM4_Init();
 80024dc:	f000 fc4a 	bl	8002d74 <MX_TIM4_Init>
  MX_ADC1_Init();
 80024e0:	f7ff fcba 	bl	8001e58 <MX_ADC1_Init>
  MX_CRC_Init();
 80024e4:	f7ff fdfe 	bl	80020e4 <MX_CRC_Init>
  MX_RTC_Init();
 80024e8:	f000 f8c8 	bl	800267c <MX_RTC_Init>
  MX_I2C1_Init();
 80024ec:	f7ff fed8 	bl	80022a0 <MX_I2C1_Init>
  MX_TIM9_Init();
 80024f0:	f000 fcde 	bl	8002eb0 <MX_TIM9_Init>
  MX_I2C3_Init();
 80024f4:	f7ff ff02 	bl	80022fc <MX_I2C3_Init>
  MX_SPI1_Init();
 80024f8:	f000 f9a6 	bl	8002848 <MX_SPI1_Init>
  MX_MBEDTLS_Init();
 80024fc:	f009 fe66 	bl	800c1cc <MX_MBEDTLS_Init>
  MX_TIM11_Init();
 8002500:	f000 fd10 	bl	8002f24 <MX_TIM11_Init>
  /* Call PreOsInit function */
  MX_MBEDTLS_Init();
 8002504:	f009 fe62 	bl	800c1cc <MX_MBEDTLS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002508:	f000 f872 	bl	80025f0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800250c:	f009 feaa 	bl	800c264 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002510:	f7ff fe3e 	bl	8002190 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002514:	f009 feca 	bl	800c2ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002518:	e7fe      	b.n	8002518 <main+0x60>
	...

0800251c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b094      	sub	sp, #80	; 0x50
 8002520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002522:	f107 0320 	add.w	r3, r7, #32
 8002526:	2230      	movs	r2, #48	; 0x30
 8002528:	2100      	movs	r1, #0
 800252a:	4618      	mov	r0, r3
 800252c:	f00c fc48 	bl	800edc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002530:	f107 030c 	add.w	r3, r7, #12
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002540:	2300      	movs	r3, #0
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	4b28      	ldr	r3, [pc, #160]	; (80025e8 <SystemClock_Config+0xcc>)
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	4a27      	ldr	r2, [pc, #156]	; (80025e8 <SystemClock_Config+0xcc>)
 800254a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254e:	6413      	str	r3, [r2, #64]	; 0x40
 8002550:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <SystemClock_Config+0xcc>)
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800255c:	2300      	movs	r3, #0
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	4b22      	ldr	r3, [pc, #136]	; (80025ec <SystemClock_Config+0xd0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a21      	ldr	r2, [pc, #132]	; (80025ec <SystemClock_Config+0xd0>)
 8002566:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <SystemClock_Config+0xd0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002574:	607b      	str	r3, [r7, #4]
 8002576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002578:	2309      	movs	r3, #9
 800257a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800257c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002582:	2301      	movs	r3, #1
 8002584:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002586:	2302      	movs	r3, #2
 8002588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800258a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800258e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002590:	2304      	movs	r3, #4
 8002592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002594:	2364      	movs	r3, #100	; 0x64
 8002596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002598:	2302      	movs	r3, #2
 800259a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800259c:	2304      	movs	r3, #4
 800259e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025a0:	f107 0320 	add.w	r3, r7, #32
 80025a4:	4618      	mov	r0, r3
 80025a6:	f005 f8e9 	bl	800777c <HAL_RCC_OscConfig>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80025b0:	f000 f854 	bl	800265c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025b4:	230f      	movs	r3, #15
 80025b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025b8:	2302      	movs	r3, #2
 80025ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80025ca:	f107 030c 	add.w	r3, r7, #12
 80025ce:	2103      	movs	r1, #3
 80025d0:	4618      	mov	r0, r3
 80025d2:	f005 fbfb 	bl	8007dcc <HAL_RCC_ClockConfig>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80025dc:	f000 f83e 	bl	800265c <Error_Handler>
  }
}
 80025e0:	bf00      	nop
 80025e2:	3750      	adds	r7, #80	; 0x50
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40007000 	.word	0x40007000

080025f0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 80025f4:	2200      	movs	r2, #0
 80025f6:	2105      	movs	r1, #5
 80025f8:	2004      	movs	r0, #4
 80025fa:	f001 fee5 	bl	80043c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80025fe:	2004      	movs	r0, #4
 8002600:	f001 ff0e 	bl	8004420 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002604:	2200      	movs	r2, #0
 8002606:	2105      	movs	r1, #5
 8002608:	201c      	movs	r0, #28
 800260a:	f001 fedd 	bl	80043c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800260e:	201c      	movs	r0, #28
 8002610:	f001 ff06 	bl	8004420 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002614:	2200      	movs	r2, #0
 8002616:	2105      	movs	r1, #5
 8002618:	201d      	movs	r0, #29
 800261a:	f001 fed5 	bl	80043c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800261e:	201d      	movs	r0, #29
 8002620:	f001 fefe 	bl	8004420 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 8002624:	2200      	movs	r2, #0
 8002626:	2105      	movs	r1, #5
 8002628:	2051      	movs	r0, #81	; 0x51
 800262a:	f001 fecd 	bl	80043c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 800262e:	2051      	movs	r0, #81	; 0x51
 8002630:	f001 fef6 	bl	8004420 <HAL_NVIC_EnableIRQ>
}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a04      	ldr	r2, [pc, #16]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d101      	bne.n	800264e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800264a:	f000 febb 	bl	80033c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40010000 	.word	0x40010000

0800265c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002660:	b672      	cpsid	i
}
 8002662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002664:	e7fe      	b.n	8002664 <Error_Handler+0x8>

08002666 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b090      	sub	sp, #64	; 0x40
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002682:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	609a      	str	r2, [r3, #8]
 800268e:	60da      	str	r2, [r3, #12]
 8002690:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002692:	2300      	movs	r3, #0
 8002694:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002696:	463b      	mov	r3, r7
 8002698:	2228      	movs	r2, #40	; 0x28
 800269a:	2100      	movs	r1, #0
 800269c:	4618      	mov	r0, r3
 800269e:	f00c fb8f 	bl	800edc0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80026a2:	4b46      	ldr	r3, [pc, #280]	; (80027bc <MX_RTC_Init+0x140>)
 80026a4:	4a46      	ldr	r2, [pc, #280]	; (80027c0 <MX_RTC_Init+0x144>)
 80026a6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80026a8:	4b44      	ldr	r3, [pc, #272]	; (80027bc <MX_RTC_Init+0x140>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80026ae:	4b43      	ldr	r3, [pc, #268]	; (80027bc <MX_RTC_Init+0x140>)
 80026b0:	227f      	movs	r2, #127	; 0x7f
 80026b2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80026b4:	4b41      	ldr	r3, [pc, #260]	; (80027bc <MX_RTC_Init+0x140>)
 80026b6:	22ff      	movs	r2, #255	; 0xff
 80026b8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80026ba:	4b40      	ldr	r3, [pc, #256]	; (80027bc <MX_RTC_Init+0x140>)
 80026bc:	2200      	movs	r2, #0
 80026be:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80026c0:	4b3e      	ldr	r3, [pc, #248]	; (80027bc <MX_RTC_Init+0x140>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80026c6:	4b3d      	ldr	r3, [pc, #244]	; (80027bc <MX_RTC_Init+0x140>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80026cc:	483b      	ldr	r0, [pc, #236]	; (80027bc <MX_RTC_Init+0x140>)
 80026ce:	f006 f88d 	bl	80087ec <HAL_RTC_Init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80026d8:	f7ff ffc0 	bl	800265c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80026dc:	2300      	movs	r3, #0
 80026de:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80026e2:	2300      	movs	r3, #0
 80026e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80026f2:	2300      	movs	r3, #0
 80026f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80026f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026fa:	2201      	movs	r2, #1
 80026fc:	4619      	mov	r1, r3
 80026fe:	482f      	ldr	r0, [pc, #188]	; (80027bc <MX_RTC_Init+0x140>)
 8002700:	f006 f978 	bl	80089f4 <HAL_RTC_SetTime>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800270a:	f7ff ffa7 	bl	800265c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800270e:	2301      	movs	r3, #1
 8002710:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002714:	2301      	movs	r3, #1
 8002716:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800271a:	2301      	movs	r3, #1
 800271c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8002720:	2300      	movs	r3, #0
 8002722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800272a:	2201      	movs	r2, #1
 800272c:	4619      	mov	r1, r3
 800272e:	4823      	ldr	r0, [pc, #140]	; (80027bc <MX_RTC_Init+0x140>)
 8002730:	f006 faa8 	bl	8008c84 <HAL_RTC_SetDate>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800273a:	f7ff ff8f 	bl	800265c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800273e:	2300      	movs	r3, #0
 8002740:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002742:	2300      	movs	r3, #0
 8002744:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002746:	2300      	movs	r3, #0
 8002748:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800274a:	2300      	movs	r3, #0
 800274c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002762:	2301      	movs	r3, #1
 8002764:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800276e:	463b      	mov	r3, r7
 8002770:	2201      	movs	r2, #1
 8002772:	4619      	mov	r1, r3
 8002774:	4811      	ldr	r0, [pc, #68]	; (80027bc <MX_RTC_Init+0x140>)
 8002776:	f006 fb91 	bl	8008e9c <HAL_RTC_SetAlarm>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002780:	f7ff ff6c 	bl	800265c <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800278a:	463b      	mov	r3, r7
 800278c:	2201      	movs	r2, #1
 800278e:	4619      	mov	r1, r3
 8002790:	480a      	ldr	r0, [pc, #40]	; (80027bc <MX_RTC_Init+0x140>)
 8002792:	f006 fb83 	bl	8008e9c <HAL_RTC_SetAlarm>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 800279c:	f7ff ff5e 	bl	800265c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80027a0:	2200      	movs	r2, #0
 80027a2:	2100      	movs	r1, #0
 80027a4:	4805      	ldr	r0, [pc, #20]	; (80027bc <MX_RTC_Init+0x140>)
 80027a6:	f006 ff33 	bl	8009610 <HAL_RTCEx_SetWakeUpTimer>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 80027b0:	f7ff ff54 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80027b4:	bf00      	nop
 80027b6:	3740      	adds	r7, #64	; 0x40
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	200002e8 	.word	0x200002e8
 80027c0:	40002800 	.word	0x40002800

080027c4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027cc:	f107 0308 	add.w	r3, r7, #8
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]
 80027dc:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a0c      	ldr	r2, [pc, #48]	; (8002814 <HAL_RTC_MspInit+0x50>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d111      	bne.n	800280c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80027e8:	2302      	movs	r3, #2
 80027ea:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80027ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027f0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027f2:	f107 0308 	add.w	r3, r7, #8
 80027f6:	4618      	mov	r0, r3
 80027f8:	f005 fde2 	bl	80083c0 <HAL_RCCEx_PeriphCLKConfig>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002802:	f7ff ff2b 	bl	800265c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002806:	4b04      	ldr	r3, [pc, #16]	; (8002818 <HAL_RTC_MspInit+0x54>)
 8002808:	2201      	movs	r2, #1
 800280a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800280c:	bf00      	nop
 800280e:	3720      	adds	r7, #32
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40002800 	.word	0x40002800
 8002818:	42470e3c 	.word	0x42470e3c

0800281c <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a05      	ldr	r2, [pc, #20]	; (8002840 <HAL_RTC_MspDeInit+0x24>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d102      	bne.n	8002834 <HAL_RTC_MspDeInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_RTC_MspDeInit+0x28>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	40002800 	.word	0x40002800
 8002844:	42470e3c 	.word	0x42470e3c

08002848 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800284c:	4b17      	ldr	r3, [pc, #92]	; (80028ac <MX_SPI1_Init+0x64>)
 800284e:	4a18      	ldr	r2, [pc, #96]	; (80028b0 <MX_SPI1_Init+0x68>)
 8002850:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002852:	4b16      	ldr	r3, [pc, #88]	; (80028ac <MX_SPI1_Init+0x64>)
 8002854:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002858:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800285a:	4b14      	ldr	r3, [pc, #80]	; (80028ac <MX_SPI1_Init+0x64>)
 800285c:	2200      	movs	r2, #0
 800285e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002860:	4b12      	ldr	r3, [pc, #72]	; (80028ac <MX_SPI1_Init+0x64>)
 8002862:	2200      	movs	r2, #0
 8002864:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002866:	4b11      	ldr	r3, [pc, #68]	; (80028ac <MX_SPI1_Init+0x64>)
 8002868:	2200      	movs	r2, #0
 800286a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800286c:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <MX_SPI1_Init+0x64>)
 800286e:	2200      	movs	r2, #0
 8002870:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002872:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <MX_SPI1_Init+0x64>)
 8002874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002878:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <MX_SPI1_Init+0x64>)
 800287c:	2200      	movs	r2, #0
 800287e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002880:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <MX_SPI1_Init+0x64>)
 8002882:	2200      	movs	r2, #0
 8002884:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <MX_SPI1_Init+0x64>)
 8002888:	2200      	movs	r2, #0
 800288a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800288c:	4b07      	ldr	r3, [pc, #28]	; (80028ac <MX_SPI1_Init+0x64>)
 800288e:	2200      	movs	r2, #0
 8002890:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <MX_SPI1_Init+0x64>)
 8002894:	220a      	movs	r2, #10
 8002896:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002898:	4804      	ldr	r0, [pc, #16]	; (80028ac <MX_SPI1_Init+0x64>)
 800289a:	f006 ff8d 	bl	80097b8 <HAL_SPI_Init>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80028a4:	f7ff feda 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028a8:	bf00      	nop
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20000324 	.word	0x20000324
 80028b0:	40013000 	.word	0x40013000

080028b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08a      	sub	sp, #40	; 0x28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1d      	ldr	r2, [pc, #116]	; (8002948 <HAL_SPI_MspInit+0x94>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d133      	bne.n	800293e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	4b1c      	ldr	r3, [pc, #112]	; (800294c <HAL_SPI_MspInit+0x98>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	4a1b      	ldr	r2, [pc, #108]	; (800294c <HAL_SPI_MspInit+0x98>)
 80028e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028e4:	6453      	str	r3, [r2, #68]	; 0x44
 80028e6:	4b19      	ldr	r3, [pc, #100]	; (800294c <HAL_SPI_MspInit+0x98>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <HAL_SPI_MspInit+0x98>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a14      	ldr	r2, [pc, #80]	; (800294c <HAL_SPI_MspInit+0x98>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_SPI_MspInit+0x98>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800290e:	23e0      	movs	r3, #224	; 0xe0
 8002910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002912:	2302      	movs	r3, #2
 8002914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291a:	2303      	movs	r3, #3
 800291c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800291e:	2305      	movs	r3, #5
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002922:	f107 0314 	add.w	r3, r7, #20
 8002926:	4619      	mov	r1, r3
 8002928:	4809      	ldr	r0, [pc, #36]	; (8002950 <HAL_SPI_MspInit+0x9c>)
 800292a:	f002 fd1b 	bl	8005364 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	2105      	movs	r1, #5
 8002932:	2023      	movs	r0, #35	; 0x23
 8002934:	f001 fd48 	bl	80043c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002938:	2023      	movs	r0, #35	; 0x23
 800293a:	f001 fd71 	bl	8004420 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800293e:	bf00      	nop
 8002940:	3728      	adds	r7, #40	; 0x28
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40013000 	.word	0x40013000
 800294c:	40023800 	.word	0x40023800
 8002950:	40020000 	.word	0x40020000

08002954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <HAL_MspInit+0x74>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	4a19      	ldr	r2, [pc, #100]	; (80029c8 <HAL_MspInit+0x74>)
 8002964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002968:	6453      	str	r3, [r2, #68]	; 0x44
 800296a:	4b17      	ldr	r3, [pc, #92]	; (80029c8 <HAL_MspInit+0x74>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002972:	607b      	str	r3, [r7, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	603b      	str	r3, [r7, #0]
 800297a:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <HAL_MspInit+0x74>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <HAL_MspInit+0x74>)
 8002980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002984:	6413      	str	r3, [r2, #64]	; 0x40
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <HAL_MspInit+0x74>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002992:	2200      	movs	r2, #0
 8002994:	210f      	movs	r1, #15
 8002996:	f06f 0001 	mvn.w	r0, #1
 800299a:	f001 fd15 	bl	80043c8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 800299e:	2200      	movs	r2, #0
 80029a0:	2105      	movs	r1, #5
 80029a2:	2001      	movs	r0, #1
 80029a4:	f001 fd10 	bl	80043c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80029a8:	2001      	movs	r0, #1
 80029aa:	f001 fd39 	bl	8004420 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80029ae:	2200      	movs	r2, #0
 80029b0:	2105      	movs	r1, #5
 80029b2:	2005      	movs	r0, #5
 80029b4:	f001 fd08 	bl	80043c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80029b8:	2005      	movs	r0, #5
 80029ba:	f001 fd31 	bl	8004420 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40023800 	.word	0x40023800

080029cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08c      	sub	sp, #48	; 0x30
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80029dc:	2300      	movs	r3, #0
 80029de:	60bb      	str	r3, [r7, #8]
 80029e0:	4b2e      	ldr	r3, [pc, #184]	; (8002a9c <HAL_InitTick+0xd0>)
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	4a2d      	ldr	r2, [pc, #180]	; (8002a9c <HAL_InitTick+0xd0>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	6453      	str	r3, [r2, #68]	; 0x44
 80029ec:	4b2b      	ldr	r3, [pc, #172]	; (8002a9c <HAL_InitTick+0xd0>)
 80029ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029f8:	f107 020c 	add.w	r2, r7, #12
 80029fc:	f107 0310 	add.w	r3, r7, #16
 8002a00:	4611      	mov	r1, r2
 8002a02:	4618      	mov	r0, r3
 8002a04:	f005 fcaa 	bl	800835c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002a08:	f005 fc94 	bl	8008334 <HAL_RCC_GetPCLK2Freq>
 8002a0c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a10:	4a23      	ldr	r2, [pc, #140]	; (8002aa0 <HAL_InitTick+0xd4>)
 8002a12:	fba2 2303 	umull	r2, r3, r2, r3
 8002a16:	0c9b      	lsrs	r3, r3, #18
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002a1c:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <HAL_InitTick+0xd8>)
 8002a1e:	4a22      	ldr	r2, [pc, #136]	; (8002aa8 <HAL_InitTick+0xdc>)
 8002a20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002a22:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <HAL_InitTick+0xd8>)
 8002a24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a28:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002a2a:	4a1e      	ldr	r2, [pc, #120]	; (8002aa4 <HAL_InitTick+0xd8>)
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002a30:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <HAL_InitTick+0xd8>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a36:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <HAL_InitTick+0xd8>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a3c:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <HAL_InitTick+0xd8>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002a42:	4818      	ldr	r0, [pc, #96]	; (8002aa4 <HAL_InitTick+0xd8>)
 8002a44:	f007 f9ec 	bl	8009e20 <HAL_TIM_Base_Init>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002a4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d11b      	bne.n	8002a8e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002a56:	4813      	ldr	r0, [pc, #76]	; (8002aa4 <HAL_InitTick+0xd8>)
 8002a58:	f007 fba0 	bl	800a19c <HAL_TIM_Base_Start_IT>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002a62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d111      	bne.n	8002a8e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002a6a:	2019      	movs	r0, #25
 8002a6c:	f001 fcd8 	bl	8004420 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b0f      	cmp	r3, #15
 8002a74:	d808      	bhi.n	8002a88 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002a76:	2200      	movs	r2, #0
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	2019      	movs	r0, #25
 8002a7c:	f001 fca4 	bl	80043c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a80:	4a0a      	ldr	r2, [pc, #40]	; (8002aac <HAL_InitTick+0xe0>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e002      	b.n	8002a8e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002a8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3730      	adds	r7, #48	; 0x30
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	431bde83 	.word	0x431bde83
 8002aa4:	200003a4 	.word	0x200003a4
 8002aa8:	40010000 	.word	0x40010000
 8002aac:	20000008 	.word	0x20000008

08002ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ab4:	e7fe      	b.n	8002ab4 <NMI_Handler+0x4>

08002ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aba:	e7fe      	b.n	8002aba <HardFault_Handler+0x4>

08002abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ac0:	e7fe      	b.n	8002ac0 <MemManage_Handler+0x4>

08002ac2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ac6:	e7fe      	b.n	8002ac6 <BusFault_Handler+0x4>

08002ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002acc:	e7fe      	b.n	8002acc <UsageFault_Handler+0x4>

08002ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8002ae0:	f004 fe32 	bl	8007748 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002ae4:	bf00      	nop
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002aec:	f002 fa64 	bl	8004fb8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8002af0:	bf00      	nop
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
	...

08002b04 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b08:	4802      	ldr	r0, [pc, #8]	; (8002b14 <ADC_IRQHandler+0x10>)
 8002b0a:	f000 fdfd 	bl	8003708 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000108 	.word	0x20000108

08002b18 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002b1c:	4802      	ldr	r0, [pc, #8]	; (8002b28 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002b1e:	f007 fbcf 	bl	800a2c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000728 	.word	0x20000728

08002b2c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b30:	4802      	ldr	r0, [pc, #8]	; (8002b3c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002b32:	f007 fbc5 	bl	800a2c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	200003a4 	.word	0x200003a4

08002b40 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002b44:	4802      	ldr	r0, [pc, #8]	; (8002b50 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002b46:	f007 fbbb 	bl	800a2c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	200007dc 	.word	0x200007dc

08002b54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b58:	4802      	ldr	r0, [pc, #8]	; (8002b64 <TIM2_IRQHandler+0x10>)
 8002b5a:	f007 fbb1 	bl	800a2c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000458 	.word	0x20000458

08002b68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b6c:	4802      	ldr	r0, [pc, #8]	; (8002b78 <TIM3_IRQHandler+0x10>)
 8002b6e:	f007 fba7 	bl	800a2c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	2000050c 	.word	0x2000050c

08002b7c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b80:	4802      	ldr	r0, [pc, #8]	; (8002b8c <TIM4_IRQHandler+0x10>)
 8002b82:	f007 fb9d 	bl	800a2c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	200005c0 	.word	0x200005c0

08002b90 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002b94:	4802      	ldr	r0, [pc, #8]	; (8002ba0 <I2C1_EV_IRQHandler+0x10>)
 8002b96:	f003 f8e1 	bl	8005d5c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200001e0 	.word	0x200001e0

08002ba4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002ba8:	4802      	ldr	r0, [pc, #8]	; (8002bb4 <I2C1_ER_IRQHandler+0x10>)
 8002baa:	f003 fa48 	bl	800603e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200001e0 	.word	0x200001e0

08002bb8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002bbc:	4802      	ldr	r0, [pc, #8]	; (8002bc8 <SPI1_IRQHandler+0x10>)
 8002bbe:	f006 ffc9 	bl	8009b54 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000324 	.word	0x20000324

08002bcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002bd0:	4802      	ldr	r0, [pc, #8]	; (8002bdc <USART1_IRQHandler+0x10>)
 8002bd2:	f008 fb49 	bl	800b268 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000890 	.word	0x20000890

08002be0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002be4:	4802      	ldr	r0, [pc, #8]	; (8002bf0 <TIM5_IRQHandler+0x10>)
 8002be6:	f007 fb6b 	bl	800a2c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000674 	.word	0x20000674

08002bf4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002bf8:	4802      	ldr	r0, [pc, #8]	; (8002c04 <DMA2_Stream0_IRQHandler+0x10>)
 8002bfa:	f001 ff65 	bl	8004ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	2000016c 	.word	0x2000016c

08002c08 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <SystemInit+0x20>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	4a05      	ldr	r2, [pc, #20]	; (8002c38 <SystemInit+0x20>)
 8002c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c42:	f107 0308 	add.w	r3, r7, #8
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	605a      	str	r2, [r3, #4]
 8002c4c:	609a      	str	r2, [r3, #8]
 8002c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c50:	463b      	mov	r3, r7
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c58:	4b1e      	ldr	r3, [pc, #120]	; (8002cd4 <MX_TIM2_Init+0x98>)
 8002c5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8002c60:	4b1c      	ldr	r3, [pc, #112]	; (8002cd4 <MX_TIM2_Init+0x98>)
 8002c62:	f242 720f 	movw	r2, #9999	; 0x270f
 8002c66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c68:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <MX_TIM2_Init+0x98>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8002c6e:	4b19      	ldr	r3, [pc, #100]	; (8002cd4 <MX_TIM2_Init+0x98>)
 8002c70:	f242 720f 	movw	r2, #9999	; 0x270f
 8002c74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c76:	4b17      	ldr	r3, [pc, #92]	; (8002cd4 <MX_TIM2_Init+0x98>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c7c:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <MX_TIM2_Init+0x98>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c82:	4814      	ldr	r0, [pc, #80]	; (8002cd4 <MX_TIM2_Init+0x98>)
 8002c84:	f007 f8cc 	bl	8009e20 <HAL_TIM_Base_Init>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002c8e:	f7ff fce5 	bl	800265c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c98:	f107 0308 	add.w	r3, r7, #8
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	480d      	ldr	r0, [pc, #52]	; (8002cd4 <MX_TIM2_Init+0x98>)
 8002ca0:	f007 fc36 	bl	800a510 <HAL_TIM_ConfigClockSource>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002caa:	f7ff fcd7 	bl	800265c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cb6:	463b      	mov	r3, r7
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4806      	ldr	r0, [pc, #24]	; (8002cd4 <MX_TIM2_Init+0x98>)
 8002cbc:	f008 f904 	bl	800aec8 <HAL_TIMEx_MasterConfigSynchronization>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002cc6:	f7ff fcc9 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002cca:	bf00      	nop
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000458 	.word	0x20000458

08002cd8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cde:	f107 0308 	add.w	r3, r7, #8
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
 8002ce8:	609a      	str	r2, [r3, #8]
 8002cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cec:	463b      	mov	r3, r7
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002cf4:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <MX_TIM3_Init+0x94>)
 8002cf6:	4a1e      	ldr	r2, [pc, #120]	; (8002d70 <MX_TIM3_Init+0x98>)
 8002cf8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8002cfa:	4b1c      	ldr	r3, [pc, #112]	; (8002d6c <MX_TIM3_Init+0x94>)
 8002cfc:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d02:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <MX_TIM3_Init+0x94>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8002d08:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <MX_TIM3_Init+0x94>)
 8002d0a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002d0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d10:	4b16      	ldr	r3, [pc, #88]	; (8002d6c <MX_TIM3_Init+0x94>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d16:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <MX_TIM3_Init+0x94>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d1c:	4813      	ldr	r0, [pc, #76]	; (8002d6c <MX_TIM3_Init+0x94>)
 8002d1e:	f007 f87f 	bl	8009e20 <HAL_TIM_Base_Init>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002d28:	f7ff fc98 	bl	800265c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d32:	f107 0308 	add.w	r3, r7, #8
 8002d36:	4619      	mov	r1, r3
 8002d38:	480c      	ldr	r0, [pc, #48]	; (8002d6c <MX_TIM3_Init+0x94>)
 8002d3a:	f007 fbe9 	bl	800a510 <HAL_TIM_ConfigClockSource>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002d44:	f7ff fc8a 	bl	800265c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d50:	463b      	mov	r3, r7
 8002d52:	4619      	mov	r1, r3
 8002d54:	4805      	ldr	r0, [pc, #20]	; (8002d6c <MX_TIM3_Init+0x94>)
 8002d56:	f008 f8b7 	bl	800aec8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002d60:	f7ff fc7c 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002d64:	bf00      	nop
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	2000050c 	.word	0x2000050c
 8002d70:	40000400 	.word	0x40000400

08002d74 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d7a:	f107 0308 	add.w	r3, r7, #8
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	605a      	str	r2, [r3, #4]
 8002d84:	609a      	str	r2, [r3, #8]
 8002d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d88:	463b      	mov	r3, r7
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d90:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <MX_TIM4_Init+0x94>)
 8002d92:	4a1e      	ldr	r2, [pc, #120]	; (8002e0c <MX_TIM4_Init+0x98>)
 8002d94:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 8002d96:	4b1c      	ldr	r3, [pc, #112]	; (8002e08 <MX_TIM4_Init+0x94>)
 8002d98:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d9e:	4b1a      	ldr	r3, [pc, #104]	; (8002e08 <MX_TIM4_Init+0x94>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8002da4:	4b18      	ldr	r3, [pc, #96]	; (8002e08 <MX_TIM4_Init+0x94>)
 8002da6:	f242 720f 	movw	r2, #9999	; 0x270f
 8002daa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dac:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <MX_TIM4_Init+0x94>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002db2:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <MX_TIM4_Init+0x94>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002db8:	4813      	ldr	r0, [pc, #76]	; (8002e08 <MX_TIM4_Init+0x94>)
 8002dba:	f007 f831 	bl	8009e20 <HAL_TIM_Base_Init>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002dc4:	f7ff fc4a 	bl	800265c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002dce:	f107 0308 	add.w	r3, r7, #8
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	480c      	ldr	r0, [pc, #48]	; (8002e08 <MX_TIM4_Init+0x94>)
 8002dd6:	f007 fb9b 	bl	800a510 <HAL_TIM_ConfigClockSource>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002de0:	f7ff fc3c 	bl	800265c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002de4:	2300      	movs	r3, #0
 8002de6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002de8:	2300      	movs	r3, #0
 8002dea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002dec:	463b      	mov	r3, r7
 8002dee:	4619      	mov	r1, r3
 8002df0:	4805      	ldr	r0, [pc, #20]	; (8002e08 <MX_TIM4_Init+0x94>)
 8002df2:	f008 f869 	bl	800aec8 <HAL_TIMEx_MasterConfigSynchronization>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002dfc:	f7ff fc2e 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002e00:	bf00      	nop
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	200005c0 	.word	0x200005c0
 8002e0c:	40000800 	.word	0x40000800

08002e10 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e16:	f107 0308 	add.w	r3, r7, #8
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	605a      	str	r2, [r3, #4]
 8002e20:	609a      	str	r2, [r3, #8]
 8002e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e24:	463b      	mov	r3, r7
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002e2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <MX_TIM5_Init+0x94>)
 8002e2e:	4a1e      	ldr	r2, [pc, #120]	; (8002ea8 <MX_TIM5_Init+0x98>)
 8002e30:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10000-1;
 8002e32:	4b1c      	ldr	r3, [pc, #112]	; (8002ea4 <MX_TIM5_Init+0x94>)
 8002e34:	f242 720f 	movw	r2, #9999	; 0x270f
 8002e38:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ea4 <MX_TIM5_Init+0x94>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 110000-1;
 8002e40:	4b18      	ldr	r3, [pc, #96]	; (8002ea4 <MX_TIM5_Init+0x94>)
 8002e42:	4a1a      	ldr	r2, [pc, #104]	; (8002eac <MX_TIM5_Init+0x9c>)
 8002e44:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e46:	4b17      	ldr	r3, [pc, #92]	; (8002ea4 <MX_TIM5_Init+0x94>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e4c:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <MX_TIM5_Init+0x94>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002e52:	4814      	ldr	r0, [pc, #80]	; (8002ea4 <MX_TIM5_Init+0x94>)
 8002e54:	f006 ffe4 	bl	8009e20 <HAL_TIM_Base_Init>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002e5e:	f7ff fbfd 	bl	800265c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002e68:	f107 0308 	add.w	r3, r7, #8
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	480d      	ldr	r0, [pc, #52]	; (8002ea4 <MX_TIM5_Init+0x94>)
 8002e70:	f007 fb4e 	bl	800a510 <HAL_TIM_ConfigClockSource>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002e7a:	f7ff fbef 	bl	800265c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e86:	463b      	mov	r3, r7
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4806      	ldr	r0, [pc, #24]	; (8002ea4 <MX_TIM5_Init+0x94>)
 8002e8c:	f008 f81c 	bl	800aec8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002e96:	f7ff fbe1 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002e9a:	bf00      	nop
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000674 	.word	0x20000674
 8002ea8:	40000c00 	.word	0x40000c00
 8002eac:	0001adaf 	.word	0x0001adaf

08002eb0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eb6:	463b      	mov	r3, r7
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002ec2:	4b16      	ldr	r3, [pc, #88]	; (8002f1c <MX_TIM9_Init+0x6c>)
 8002ec4:	4a16      	ldr	r2, [pc, #88]	; (8002f20 <MX_TIM9_Init+0x70>)
 8002ec6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10000-1;
 8002ec8:	4b14      	ldr	r3, [pc, #80]	; (8002f1c <MX_TIM9_Init+0x6c>)
 8002eca:	f242 720f 	movw	r2, #9999	; 0x270f
 8002ece:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed0:	4b12      	ldr	r3, [pc, #72]	; (8002f1c <MX_TIM9_Init+0x6c>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000-1;
 8002ed6:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <MX_TIM9_Init+0x6c>)
 8002ed8:	f242 720f 	movw	r2, #9999	; 0x270f
 8002edc:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ede:	4b0f      	ldr	r3, [pc, #60]	; (8002f1c <MX_TIM9_Init+0x6c>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <MX_TIM9_Init+0x6c>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002eea:	480c      	ldr	r0, [pc, #48]	; (8002f1c <MX_TIM9_Init+0x6c>)
 8002eec:	f006 ff98 	bl	8009e20 <HAL_TIM_Base_Init>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8002ef6:	f7ff fbb1 	bl	800265c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002efe:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002f00:	463b      	mov	r3, r7
 8002f02:	4619      	mov	r1, r3
 8002f04:	4805      	ldr	r0, [pc, #20]	; (8002f1c <MX_TIM9_Init+0x6c>)
 8002f06:	f007 fb03 	bl	800a510 <HAL_TIM_ConfigClockSource>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8002f10:	f7ff fba4 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002f14:	bf00      	nop
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000728 	.word	0x20000728
 8002f20:	40014000 	.word	0x40014000

08002f24 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002f28:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <MX_TIM11_Init+0x40>)
 8002f2a:	4a0f      	ldr	r2, [pc, #60]	; (8002f68 <MX_TIM11_Init+0x44>)
 8002f2c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10000-1;
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <MX_TIM11_Init+0x40>)
 8002f30:	f242 720f 	movw	r2, #9999	; 0x270f
 8002f34:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f36:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <MX_TIM11_Init+0x40>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 8002f3c:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <MX_TIM11_Init+0x40>)
 8002f3e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002f42:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f44:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <MX_TIM11_Init+0x40>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f4a:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <MX_TIM11_Init+0x40>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002f50:	4804      	ldr	r0, [pc, #16]	; (8002f64 <MX_TIM11_Init+0x40>)
 8002f52:	f006 ff65 	bl	8009e20 <HAL_TIM_Base_Init>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002f5c:	f7ff fb7e 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002f60:	bf00      	nop
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	200007dc 	.word	0x200007dc
 8002f68:	40014800 	.word	0x40014800

08002f6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7c:	d10e      	bne.n	8002f9c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	4b4a      	ldr	r3, [pc, #296]	; (80030ac <HAL_TIM_Base_MspInit+0x140>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	4a49      	ldr	r2, [pc, #292]	; (80030ac <HAL_TIM_Base_MspInit+0x140>)
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8e:	4b47      	ldr	r3, [pc, #284]	; (80030ac <HAL_TIM_Base_MspInit+0x140>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	61fb      	str	r3, [r7, #28]
 8002f98:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002f9a:	e082      	b.n	80030a2 <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM3)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a43      	ldr	r2, [pc, #268]	; (80030b0 <HAL_TIM_Base_MspInit+0x144>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d10e      	bne.n	8002fc4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61bb      	str	r3, [r7, #24]
 8002faa:	4b40      	ldr	r3, [pc, #256]	; (80030ac <HAL_TIM_Base_MspInit+0x140>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	4a3f      	ldr	r2, [pc, #252]	; (80030ac <HAL_TIM_Base_MspInit+0x140>)
 8002fb0:	f043 0302 	orr.w	r3, r3, #2
 8002fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb6:	4b3d      	ldr	r3, [pc, #244]	; (80030ac <HAL_TIM_Base_MspInit+0x140>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	69bb      	ldr	r3, [r7, #24]
}
 8002fc2:	e06e      	b.n	80030a2 <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM4)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a3a      	ldr	r2, [pc, #232]	; (80030b4 <HAL_TIM_Base_MspInit+0x148>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d116      	bne.n	8002ffc <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	4b36      	ldr	r3, [pc, #216]	; (80030ac <HAL_TIM_Base_MspInit+0x140>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	4a35      	ldr	r2, [pc, #212]	; (80030ac <HAL_TIM_Base_MspInit+0x140>)
 8002fd8:	f043 0304 	orr.w	r3, r3, #4
 8002fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fde:	4b33      	ldr	r3, [pc, #204]	; (80030ac <HAL_TIM_Base_MspInit+0x140>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002fea:	2200      	movs	r2, #0
 8002fec:	2105      	movs	r1, #5
 8002fee:	201e      	movs	r0, #30
 8002ff0:	f001 f9ea 	bl	80043c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002ff4:	201e      	movs	r0, #30
 8002ff6:	f001 fa13 	bl	8004420 <HAL_NVIC_EnableIRQ>
}
 8002ffa:	e052      	b.n	80030a2 <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM5)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a2d      	ldr	r2, [pc, #180]	; (80030b8 <HAL_TIM_Base_MspInit+0x14c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d116      	bne.n	8003034 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	613b      	str	r3, [r7, #16]
 800300a:	4b28      	ldr	r3, [pc, #160]	; (80030ac <HAL_TIM_Base_MspInit+0x140>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	4a27      	ldr	r2, [pc, #156]	; (80030ac <HAL_TIM_Base_MspInit+0x140>)
 8003010:	f043 0308 	orr.w	r3, r3, #8
 8003014:	6413      	str	r3, [r2, #64]	; 0x40
 8003016:	4b25      	ldr	r3, [pc, #148]	; (80030ac <HAL_TIM_Base_MspInit+0x140>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	613b      	str	r3, [r7, #16]
 8003020:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8003022:	2200      	movs	r2, #0
 8003024:	2105      	movs	r1, #5
 8003026:	2032      	movs	r0, #50	; 0x32
 8003028:	f001 f9ce 	bl	80043c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800302c:	2032      	movs	r0, #50	; 0x32
 800302e:	f001 f9f7 	bl	8004420 <HAL_NVIC_EnableIRQ>
}
 8003032:	e036      	b.n	80030a2 <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM9)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a20      	ldr	r2, [pc, #128]	; (80030bc <HAL_TIM_Base_MspInit+0x150>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d116      	bne.n	800306c <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	4b1a      	ldr	r3, [pc, #104]	; (80030ac <HAL_TIM_Base_MspInit+0x140>)
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	4a19      	ldr	r2, [pc, #100]	; (80030ac <HAL_TIM_Base_MspInit+0x140>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304c:	6453      	str	r3, [r2, #68]	; 0x44
 800304e:	4b17      	ldr	r3, [pc, #92]	; (80030ac <HAL_TIM_Base_MspInit+0x140>)
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800305a:	2200      	movs	r2, #0
 800305c:	2105      	movs	r1, #5
 800305e:	2018      	movs	r0, #24
 8003060:	f001 f9b2 	bl	80043c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003064:	2018      	movs	r0, #24
 8003066:	f001 f9db 	bl	8004420 <HAL_NVIC_EnableIRQ>
}
 800306a:	e01a      	b.n	80030a2 <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM11)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a13      	ldr	r2, [pc, #76]	; (80030c0 <HAL_TIM_Base_MspInit+0x154>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d115      	bne.n	80030a2 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <HAL_TIM_Base_MspInit+0x140>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	4a0b      	ldr	r2, [pc, #44]	; (80030ac <HAL_TIM_Base_MspInit+0x140>)
 8003080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003084:	6453      	str	r3, [r2, #68]	; 0x44
 8003086:	4b09      	ldr	r3, [pc, #36]	; (80030ac <HAL_TIM_Base_MspInit+0x140>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800308e:	60bb      	str	r3, [r7, #8]
 8003090:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8003092:	2200      	movs	r2, #0
 8003094:	2105      	movs	r1, #5
 8003096:	201a      	movs	r0, #26
 8003098:	f001 f996 	bl	80043c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800309c:	201a      	movs	r0, #26
 800309e:	f001 f9bf 	bl	8004420 <HAL_NVIC_EnableIRQ>
}
 80030a2:	bf00      	nop
 80030a4:	3720      	adds	r7, #32
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40000400 	.word	0x40000400
 80030b4:	40000800 	.word	0x40000800
 80030b8:	40000c00 	.word	0x40000c00
 80030bc:	40014000 	.word	0x40014000
 80030c0:	40014800 	.word	0x40014800

080030c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030ca:	4a12      	ldr	r2, [pc, #72]	; (8003114 <MX_USART1_UART_Init+0x50>)
 80030cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80030ce:	4b10      	ldr	r3, [pc, #64]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80030d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030d6:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030d8:	2200      	movs	r2, #0
 80030da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030dc:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030de:	2200      	movs	r2, #0
 80030e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030e2:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030e8:	4b09      	ldr	r3, [pc, #36]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030ea:	220c      	movs	r2, #12
 80030ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ee:	4b08      	ldr	r3, [pc, #32]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030f4:	4b06      	ldr	r3, [pc, #24]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030fa:	4805      	ldr	r0, [pc, #20]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030fc:	f007 ffc0 	bl	800b080 <HAL_UART_Init>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003106:	f7ff faa9 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000890 	.word	0x20000890
 8003114:	40011000 	.word	0x40011000

08003118 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08a      	sub	sp, #40	; 0x28
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003120:	f107 0314 	add.w	r3, r7, #20
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a2c      	ldr	r2, [pc, #176]	; (80031e8 <HAL_UART_MspInit+0xd0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d152      	bne.n	80031e0 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	4b2b      	ldr	r3, [pc, #172]	; (80031ec <HAL_UART_MspInit+0xd4>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	4a2a      	ldr	r2, [pc, #168]	; (80031ec <HAL_UART_MspInit+0xd4>)
 8003144:	f043 0310 	orr.w	r3, r3, #16
 8003148:	6453      	str	r3, [r2, #68]	; 0x44
 800314a:	4b28      	ldr	r3, [pc, #160]	; (80031ec <HAL_UART_MspInit+0xd4>)
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	f003 0310 	and.w	r3, r3, #16
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	4b24      	ldr	r3, [pc, #144]	; (80031ec <HAL_UART_MspInit+0xd4>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	4a23      	ldr	r2, [pc, #140]	; (80031ec <HAL_UART_MspInit+0xd4>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	6313      	str	r3, [r2, #48]	; 0x30
 8003166:	4b21      	ldr	r3, [pc, #132]	; (80031ec <HAL_UART_MspInit+0xd4>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <HAL_UART_MspInit+0xd4>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	4a1c      	ldr	r2, [pc, #112]	; (80031ec <HAL_UART_MspInit+0xd4>)
 800317c:	f043 0302 	orr.w	r3, r3, #2
 8003180:	6313      	str	r3, [r2, #48]	; 0x30
 8003182:	4b1a      	ldr	r3, [pc, #104]	; (80031ec <HAL_UART_MspInit+0xd4>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	60bb      	str	r3, [r7, #8]
 800318c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800318e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003194:	2302      	movs	r3, #2
 8003196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	2300      	movs	r3, #0
 800319a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319c:	2303      	movs	r3, #3
 800319e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031a0:	2307      	movs	r3, #7
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a4:	f107 0314 	add.w	r3, r7, #20
 80031a8:	4619      	mov	r1, r3
 80031aa:	4811      	ldr	r0, [pc, #68]	; (80031f0 <HAL_UART_MspInit+0xd8>)
 80031ac:	f002 f8da 	bl	8005364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b4:	2302      	movs	r3, #2
 80031b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031bc:	2303      	movs	r3, #3
 80031be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031c0:	2307      	movs	r3, #7
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c4:	f107 0314 	add.w	r3, r7, #20
 80031c8:	4619      	mov	r1, r3
 80031ca:	480a      	ldr	r0, [pc, #40]	; (80031f4 <HAL_UART_MspInit+0xdc>)
 80031cc:	f002 f8ca 	bl	8005364 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80031d0:	2200      	movs	r2, #0
 80031d2:	2105      	movs	r1, #5
 80031d4:	2025      	movs	r0, #37	; 0x25
 80031d6:	f001 f8f7 	bl	80043c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031da:	2025      	movs	r0, #37	; 0x25
 80031dc:	f001 f920 	bl	8004420 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80031e0:	bf00      	nop
 80031e2:	3728      	adds	r7, #40	; 0x28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40011000 	.word	0x40011000
 80031ec:	40023800 	.word	0x40023800
 80031f0:	40020000 	.word	0x40020000
 80031f4:	40020400 	.word	0x40020400

080031f8 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a05      	ldr	r2, [pc, #20]	; (800321c <HAL_UART_RxCpltCallback+0x24>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d104      	bne.n	8003214 <HAL_UART_RxCpltCallback+0x1c>
  {

	//BtcReceivedDataIRQ = STD_HIGH;
    HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1);
 800320a:	2201      	movs	r2, #1
 800320c:	4904      	ldr	r1, [pc, #16]	; (8003220 <HAL_UART_RxCpltCallback+0x28>)
 800320e:	4805      	ldr	r0, [pc, #20]	; (8003224 <HAL_UART_RxCpltCallback+0x2c>)
 8003210:	f007 fffa 	bl	800b208 <HAL_UART_Receive_IT>

	  /* do nothing */

  }

}
 8003214:	bf00      	nop
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40011000 	.word	0x40011000
 8003220:	20000094 	.word	0x20000094
 8003224:	20000890 	.word	0x20000890

08003228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003260 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800322c:	480d      	ldr	r0, [pc, #52]	; (8003264 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800322e:	490e      	ldr	r1, [pc, #56]	; (8003268 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003230:	4a0e      	ldr	r2, [pc, #56]	; (800326c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003234:	e002      	b.n	800323c <LoopCopyDataInit>

08003236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800323a:	3304      	adds	r3, #4

0800323c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800323c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800323e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003240:	d3f9      	bcc.n	8003236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003242:	4a0b      	ldr	r2, [pc, #44]	; (8003270 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003244:	4c0b      	ldr	r4, [pc, #44]	; (8003274 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003248:	e001      	b.n	800324e <LoopFillZerobss>

0800324a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800324a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800324c:	3204      	adds	r2, #4

0800324e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800324e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003250:	d3fb      	bcc.n	800324a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003252:	f7ff fce1 	bl	8002c18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003256:	f00b fd81 	bl	800ed5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800325a:	f7ff f92d 	bl	80024b8 <main>
  bx  lr    
 800325e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003260:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003268:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800326c:	0800f754 	.word	0x0800f754
  ldr r2, =_sbss
 8003270:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003274:	20005348 	.word	0x20005348

08003278 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003278:	e7fe      	b.n	8003278 <DMA1_Stream0_IRQHandler>

0800327a <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d104      	bne.n	8003292 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003288:	b672      	cpsid	i
}
 800328a:	bf00      	nop
 800328c:	f7ff f9e6 	bl	800265c <Error_Handler>
 8003290:	e7fe      	b.n	8003290 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	7a1b      	ldrb	r3, [r3, #8]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d904      	bls.n	80032a4 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800329a:	b672      	cpsid	i
}
 800329c:	bf00      	nop
 800329e:	f7ff f9dd 	bl	800265c <Error_Handler>
 80032a2:	e7fe      	b.n	80032a2 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	7a1b      	ldrb	r3, [r3, #8]
 80032a8:	1c5a      	adds	r2, r3, #1
 80032aa:	b2d1      	uxtb	r1, r2
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	7211      	strb	r1, [r2, #8]
 80032b0:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80032b2:	f3ef 8211 	mrs	r2, BASEPRI
 80032b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ba:	f383 8811 	msr	BASEPRI, r3
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	60fa      	str	r2, [r7, #12]
 80032c8:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80032d2:	bf00      	nop
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d104      	bne.n	80032f2 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80032e8:	b672      	cpsid	i
}
 80032ea:	bf00      	nop
 80032ec:	f7ff f9b6 	bl	800265c <Error_Handler>
 80032f0:	e7fe      	b.n	80032f0 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	7a1b      	ldrb	r3, [r3, #8]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	7a1b      	ldrb	r3, [r3, #8]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d904      	bls.n	8003310 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8003306:	b672      	cpsid	i
}
 8003308:	bf00      	nop
 800330a:	f7ff f9a7 	bl	800265c <Error_Handler>
 800330e:	e7fe      	b.n	800330e <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	7a1b      	ldrb	r3, [r3, #8]
 8003314:	461a      	mov	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800331c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003324:	bf00      	nop
}
 8003326:	bf00      	nop
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b082      	sub	sp, #8
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d104      	bne.n	8003346 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800333c:	b672      	cpsid	i
}
 800333e:	bf00      	nop
 8003340:	f7ff f98c 	bl	800265c <Error_Handler>
 8003344:	e7fe      	b.n	8003344 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff96 	bl	800327a <stm32_lock_acquire>
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d104      	bne.n	800336e <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003364:	b672      	cpsid	i
}
 8003366:	bf00      	nop
 8003368:	f7ff f978 	bl	800265c <Error_Handler>
 800336c:	e7fe      	b.n	800336c <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff ffb2 	bl	80032da <stm32_lock_release>
}
 8003376:	bf00      	nop
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003384:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <HAL_Init+0x40>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0d      	ldr	r2, [pc, #52]	; (80033c0 <HAL_Init+0x40>)
 800338a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800338e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <HAL_Init+0x40>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a0a      	ldr	r2, [pc, #40]	; (80033c0 <HAL_Init+0x40>)
 8003396:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800339a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800339c:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <HAL_Init+0x40>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a07      	ldr	r2, [pc, #28]	; (80033c0 <HAL_Init+0x40>)
 80033a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033a8:	2003      	movs	r0, #3
 80033aa:	f000 ffed 	bl	8004388 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033ae:	200f      	movs	r0, #15
 80033b0:	f7ff fb0c 	bl	80029cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033b4:	f7ff face 	bl	8002954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40023c00 	.word	0x40023c00

080033c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_IncTick+0x20>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <HAL_IncTick+0x24>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4413      	add	r3, r2
 80033d4:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <HAL_IncTick+0x24>)
 80033d6:	6013      	str	r3, [r2, #0]
}
 80033d8:	bf00      	nop
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	2000000c 	.word	0x2000000c
 80033e8:	20000910 	.word	0x20000910

080033ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return uwTick;
 80033f0:	4b03      	ldr	r3, [pc, #12]	; (8003400 <HAL_GetTick+0x14>)
 80033f2:	681b      	ldr	r3, [r3, #0]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	20000910 	.word	0x20000910

08003404 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800340c:	2300      	movs	r3, #0
 800340e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e16f      	b.n	80036fa <HAL_ADC_Init+0x2f6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a93      	ldr	r2, [pc, #588]	; (800366c <HAL_ADC_Init+0x268>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d004      	beq.n	800342e <HAL_ADC_Init+0x2a>
 8003424:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8003428:	4891      	ldr	r0, [pc, #580]	; (8003670 <HAL_ADC_Init+0x26c>)
 800342a:	f7ff f91c 	bl	8002666 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d013      	beq.n	800345e <HAL_ADC_Init+0x5a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343e:	d00e      	beq.n	800345e <HAL_ADC_Init+0x5a>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003448:	d009      	beq.n	800345e <HAL_ADC_Init+0x5a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003452:	d004      	beq.n	800345e <HAL_ADC_Init+0x5a>
 8003454:	f240 1143 	movw	r1, #323	; 0x143
 8003458:	4885      	ldr	r0, [pc, #532]	; (8003670 <HAL_ADC_Init+0x26c>)
 800345a:	f7ff f904 	bl	8002666 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d013      	beq.n	800348e <HAL_ADC_Init+0x8a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800346e:	d00e      	beq.n	800348e <HAL_ADC_Init+0x8a>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003478:	d009      	beq.n	800348e <HAL_ADC_Init+0x8a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003482:	d004      	beq.n	800348e <HAL_ADC_Init+0x8a>
 8003484:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8003488:	4879      	ldr	r0, [pc, #484]	; (8003670 <HAL_ADC_Init+0x26c>)
 800348a:	f7ff f8ec 	bl	8002666 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d008      	beq.n	80034a8 <HAL_ADC_Init+0xa4>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d004      	beq.n	80034a8 <HAL_ADC_Init+0xa4>
 800349e:	f240 1145 	movw	r1, #325	; 0x145
 80034a2:	4873      	ldr	r0, [pc, #460]	; (8003670 <HAL_ADC_Init+0x26c>)
 80034a4:	f7ff f8df 	bl	8002666 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	7e1b      	ldrb	r3, [r3, #24]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_ADC_Init+0xbe>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	7e1b      	ldrb	r3, [r3, #24]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d004      	beq.n	80034c2 <HAL_ADC_Init+0xbe>
 80034b8:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80034bc:	486c      	ldr	r0, [pc, #432]	; (8003670 <HAL_ADC_Init+0x26c>)
 80034be:	f7ff f8d2 	bl	8002666 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d054      	beq.n	8003574 <HAL_ADC_Init+0x170>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034d2:	d04f      	beq.n	8003574 <HAL_ADC_Init+0x170>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034dc:	d04a      	beq.n	8003574 <HAL_ADC_Init+0x170>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034e6:	d045      	beq.n	8003574 <HAL_ADC_Init+0x170>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034f0:	d040      	beq.n	8003574 <HAL_ADC_Init+0x170>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80034fa:	d03b      	beq.n	8003574 <HAL_ADC_Init+0x170>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003500:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003504:	d036      	beq.n	8003574 <HAL_ADC_Init+0x170>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 800350e:	d031      	beq.n	8003574 <HAL_ADC_Init+0x170>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003518:	d02c      	beq.n	8003574 <HAL_ADC_Init+0x170>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351e:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8003522:	d027      	beq.n	8003574 <HAL_ADC_Init+0x170>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003528:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800352c:	d022      	beq.n	8003574 <HAL_ADC_Init+0x170>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003532:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8003536:	d01d      	beq.n	8003574 <HAL_ADC_Init+0x170>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003540:	d018      	beq.n	8003574 <HAL_ADC_Init+0x170>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003546:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 800354a:	d013      	beq.n	8003574 <HAL_ADC_Init+0x170>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003554:	d00e      	beq.n	8003574 <HAL_ADC_Init+0x170>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800355e:	d009      	beq.n	8003574 <HAL_ADC_Init+0x170>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	4a43      	ldr	r2, [pc, #268]	; (8003674 <HAL_ADC_Init+0x270>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d004      	beq.n	8003574 <HAL_ADC_Init+0x170>
 800356a:	f240 1147 	movw	r1, #327	; 0x147
 800356e:	4840      	ldr	r0, [pc, #256]	; (8003670 <HAL_ADC_Init+0x26c>)
 8003570:	f7ff f879 	bl	8002666 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d009      	beq.n	8003590 <HAL_ADC_Init+0x18c>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003584:	d004      	beq.n	8003590 <HAL_ADC_Init+0x18c>
 8003586:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800358a:	4839      	ldr	r0, [pc, #228]	; (8003670 <HAL_ADC_Init+0x26c>)
 800358c:	f7ff f86b 	bl	8002666 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_ADC_Init+0x19c>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	2b10      	cmp	r3, #16
 800359e:	d904      	bls.n	80035aa <HAL_ADC_Init+0x1a6>
 80035a0:	f240 1149 	movw	r1, #329	; 0x149
 80035a4:	4832      	ldr	r0, [pc, #200]	; (8003670 <HAL_ADC_Init+0x26c>)
 80035a6:	f7ff f85e 	bl	8002666 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d009      	beq.n	80035c8 <HAL_ADC_Init+0x1c4>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d004      	beq.n	80035c8 <HAL_ADC_Init+0x1c4>
 80035be:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80035c2:	482b      	ldr	r0, [pc, #172]	; (8003670 <HAL_ADC_Init+0x26c>)
 80035c4:	f7ff f84f 	bl	8002666 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d00c      	beq.n	80035ea <HAL_ADC_Init+0x1e6>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_ADC_Init+0x1e6>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d004      	beq.n	80035ea <HAL_ADC_Init+0x1e6>
 80035e0:	f240 114b 	movw	r1, #331	; 0x14b
 80035e4:	4822      	ldr	r0, [pc, #136]	; (8003670 <HAL_ADC_Init+0x26c>)
 80035e6:	f7ff f83e 	bl	8002666 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d009      	beq.n	8003608 <HAL_ADC_Init+0x204>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d004      	beq.n	8003608 <HAL_ADC_Init+0x204>
 80035fe:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8003602:	481b      	ldr	r0, [pc, #108]	; (8003670 <HAL_ADC_Init+0x26c>)
 8003604:	f7ff f82f 	bl	8002666 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	4a19      	ldr	r2, [pc, #100]	; (8003674 <HAL_ADC_Init+0x270>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d017      	beq.n	8003642 <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003616:	2b00      	cmp	r3, #0
 8003618:	d013      	beq.n	8003642 <HAL_ADC_Init+0x23e>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003622:	d00e      	beq.n	8003642 <HAL_ADC_Init+0x23e>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800362c:	d009      	beq.n	8003642 <HAL_ADC_Init+0x23e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003632:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003636:	d004      	beq.n	8003642 <HAL_ADC_Init+0x23e>
 8003638:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800363c:	480c      	ldr	r0, [pc, #48]	; (8003670 <HAL_ADC_Init+0x26c>)
 800363e:	f7ff f812 	bl	8002666 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d131      	bne.n	80036ae <HAL_ADC_Init+0x2aa>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <HAL_ADC_Init+0x274>)
 800364e:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a0a      	ldr	r2, [pc, #40]	; (800367c <HAL_ADC_Init+0x278>)
 8003654:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a09      	ldr	r2, [pc, #36]	; (8003680 <HAL_ADC_Init+0x27c>)
 800365a:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a09      	ldr	r2, [pc, #36]	; (8003684 <HAL_ADC_Init+0x280>)
 8003660:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a08      	ldr	r2, [pc, #32]	; (8003688 <HAL_ADC_Init+0x284>)
 8003666:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	e00f      	b.n	800368c <HAL_ADC_Init+0x288>
 800366c:	40012000 	.word	0x40012000
 8003670:	0800ef84 	.word	0x0800ef84
 8003674:	0f000001 	.word	0x0f000001
 8003678:	08003bbd 	.word	0x08003bbd
 800367c:	08003bd1 	.word	0x08003bd1
 8003680:	08003be5 	.word	0x08003be5
 8003684:	08003bf9 	.word	0x08003bf9
 8003688:	08004219 	.word	0x08004219
 800368c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368e:	2b00      	cmp	r3, #0
 8003690:	d102      	bne.n	8003698 <HAL_ADC_Init+0x294>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a1b      	ldr	r2, [pc, #108]	; (8003704 <HAL_ADC_Init+0x300>)
 8003696:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d118      	bne.n	80036ec <HAL_ADC_Init+0x2e8>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80036c2:	f023 0302 	bic.w	r3, r3, #2
 80036c6:	f043 0202 	orr.w	r2, r3, #2
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fc12 	bl	8003ef8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f023 0303 	bic.w	r3, r3, #3
 80036e2:	f043 0201 	orr.w	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	641a      	str	r2, [r3, #64]	; 0x40
 80036ea:	e001      	b.n	80036f0 <HAL_ADC_Init+0x2ec>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	08001f75 	.word	0x08001f75

08003708 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	2300      	movs	r3, #0
 8003716:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	7e1b      	ldrb	r3, [r3, #24]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_ADC_IRQHandler+0x3a>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	7e1b      	ldrb	r3, [r3, #24]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d004      	beq.n	8003742 <HAL_ADC_IRQHandler+0x3a>
 8003738:	f240 41b7 	movw	r1, #1207	; 0x4b7
 800373c:	4892      	ldr	r0, [pc, #584]	; (8003988 <HAL_ADC_IRQHandler+0x280>)
 800373e:	f7fe ff92 	bl	8002666 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_ADC_IRQHandler+0x4a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	2b10      	cmp	r3, #16
 8003750:	d904      	bls.n	800375c <HAL_ADC_IRQHandler+0x54>
 8003752:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
 8003756:	488c      	ldr	r0, [pc, #560]	; (8003988 <HAL_ADC_IRQHandler+0x280>)
 8003758:	f7fe ff85 	bl	8002666 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d00c      	beq.n	800377e <HAL_ADC_IRQHandler+0x76>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_ADC_IRQHandler+0x76>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d004      	beq.n	800377e <HAL_ADC_IRQHandler+0x76>
 8003774:	f240 41b9 	movw	r1, #1209	; 0x4b9
 8003778:	4883      	ldr	r0, [pc, #524]	; (8003988 <HAL_ADC_IRQHandler+0x280>)
 800377a:	f7fe ff74 	bl	8002666 <assert_failed>
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d04a      	beq.n	800382a <HAL_ADC_IRQHandler+0x122>
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d047      	beq.n	800382a <HAL_ADC_IRQHandler+0x122>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d105      	bne.n	80037b2 <HAL_ADC_IRQHandler+0xaa>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d12b      	bne.n	8003818 <HAL_ADC_IRQHandler+0x110>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d127      	bne.n	8003818 <HAL_ADC_IRQHandler+0x110>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d006      	beq.n	80037e4 <HAL_ADC_IRQHandler+0xdc>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d119      	bne.n	8003818 <HAL_ADC_IRQHandler+0x110>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0220 	bic.w	r2, r2, #32
 80037f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d105      	bne.n	8003818 <HAL_ADC_IRQHandler+0x110>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	f043 0201 	orr.w	r2, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 0212 	mvn.w	r2, #18
 8003828:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003838:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d058      	beq.n	80038f2 <HAL_ADC_IRQHandler+0x1ea>
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d055      	beq.n	80038f2 <HAL_ADC_IRQHandler+0x1ea>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b00      	cmp	r3, #0
 8003850:	d105      	bne.n	800385e <HAL_ADC_IRQHandler+0x156>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d139      	bne.n	80038e0 <HAL_ADC_IRQHandler+0x1d8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003876:	2b00      	cmp	r3, #0
 8003878:	d006      	beq.n	8003888 <HAL_ADC_IRQHandler+0x180>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003884:	2b00      	cmp	r3, #0
 8003886:	d12b      	bne.n	80038e0 <HAL_ADC_IRQHandler+0x1d8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003892:	2b00      	cmp	r3, #0
 8003894:	d124      	bne.n	80038e0 <HAL_ADC_IRQHandler+0x1d8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d11d      	bne.n	80038e0 <HAL_ADC_IRQHandler+0x1d8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d119      	bne.n	80038e0 <HAL_ADC_IRQHandler+0x1d8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d105      	bne.n	80038e0 <HAL_ADC_IRQHandler+0x1d8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	f043 0201 	orr.w	r2, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 020c 	mvn.w	r2, #12
 80038f0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003900:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d018      	beq.n	800393a <HAL_ADC_IRQHandler+0x232>
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d015      	beq.n	800393a <HAL_ADC_IRQHandler+0x232>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b01      	cmp	r3, #1
 800391a:	d10e      	bne.n	800393a <HAL_ADC_IRQHandler+0x232>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0201 	mvn.w	r2, #1
 8003938:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f003 0320 	and.w	r3, r3, #32
 8003940:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003948:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d016      	beq.n	800397e <HAL_ADC_IRQHandler+0x276>
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d013      	beq.n	800397e <HAL_ADC_IRQHandler+0x276>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	f043 0202 	orr.w	r2, r3, #2
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f06f 0220 	mvn.w	r2, #32
 800396a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0220 	mvn.w	r2, #32
 800397c:	601a      	str	r2, [r3, #0]
  }
}
 800397e:	bf00      	nop
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	0800ef84 	.word	0x0800ef84

0800398c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	7e1b      	ldrb	r3, [r3, #24]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d008      	beq.n	80039b6 <HAL_ADC_Start_DMA+0x2a>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	7e1b      	ldrb	r3, [r3, #24]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d004      	beq.n	80039b6 <HAL_ADC_Start_DMA+0x2a>
 80039ac:	f240 515a 	movw	r1, #1370	; 0x55a
 80039b0:	487a      	ldr	r0, [pc, #488]	; (8003b9c <HAL_ADC_Start_DMA+0x210>)
 80039b2:	f7fe fe58 	bl	8002666 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d013      	beq.n	80039e6 <HAL_ADC_Start_DMA+0x5a>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039c6:	d00e      	beq.n	80039e6 <HAL_ADC_Start_DMA+0x5a>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039d0:	d009      	beq.n	80039e6 <HAL_ADC_Start_DMA+0x5a>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039da:	d004      	beq.n	80039e6 <HAL_ADC_Start_DMA+0x5a>
 80039dc:	f240 515b 	movw	r1, #1371	; 0x55b
 80039e0:	486e      	ldr	r0, [pc, #440]	; (8003b9c <HAL_ADC_Start_DMA+0x210>)
 80039e2:	f7fe fe40 	bl	8002666 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_ADC_Start_DMA+0x68>
 80039f0:	2302      	movs	r3, #2
 80039f2:	e0ce      	b.n	8003b92 <HAL_ADC_Start_DMA+0x206>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d018      	beq.n	8003a3c <HAL_ADC_Start_DMA+0xb0>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0201 	orr.w	r2, r2, #1
 8003a18:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a1a:	4b61      	ldr	r3, [pc, #388]	; (8003ba0 <HAL_ADC_Start_DMA+0x214>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a61      	ldr	r2, [pc, #388]	; (8003ba4 <HAL_ADC_Start_DMA+0x218>)
 8003a20:	fba2 2303 	umull	r2, r3, r2, r3
 8003a24:	0c9a      	lsrs	r2, r3, #18
 8003a26:	4613      	mov	r3, r2
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	4413      	add	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003a2e:	e002      	b.n	8003a36 <HAL_ADC_Start_DMA+0xaa>
    {
      counter--;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1f9      	bne.n	8003a30 <HAL_ADC_Start_DMA+0xa4>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a4a:	d107      	bne.n	8003a5c <HAL_ADC_Start_DMA+0xd0>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a5a:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	f040 8086 	bne.w	8003b78 <HAL_ADC_Start_DMA+0x1ec>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a74:	f023 0301 	bic.w	r3, r3, #1
 8003a78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d007      	beq.n	8003a9e <HAL_ADC_Start_DMA+0x112>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aaa:	d106      	bne.n	8003aba <HAL_ADC_Start_DMA+0x12e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab0:	f023 0206 	bic.w	r2, r3, #6
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	645a      	str	r2, [r3, #68]	; 0x44
 8003ab8:	e002      	b.n	8003ac0 <HAL_ADC_Start_DMA+0x134>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ac8:	4b37      	ldr	r3, [pc, #220]	; (8003ba8 <HAL_ADC_Start_DMA+0x21c>)
 8003aca:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad0:	4a36      	ldr	r2, [pc, #216]	; (8003bac <HAL_ADC_Start_DMA+0x220>)
 8003ad2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad8:	4a35      	ldr	r2, [pc, #212]	; (8003bb0 <HAL_ADC_Start_DMA+0x224>)
 8003ada:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	4a34      	ldr	r2, [pc, #208]	; (8003bb4 <HAL_ADC_Start_DMA+0x228>)
 8003ae2:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003aec:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003afc:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b0c:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	334c      	adds	r3, #76	; 0x4c
 8003b18:	4619      	mov	r1, r3
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f000 fedb 	bl	80048d8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10f      	bne.n	8003b4e <HAL_ADC_Start_DMA+0x1c2>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d129      	bne.n	8003b90 <HAL_ADC_Start_DMA+0x204>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b4a:	609a      	str	r2, [r3, #8]
 8003b4c:	e020      	b.n	8003b90 <HAL_ADC_Start_DMA+0x204>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a19      	ldr	r2, [pc, #100]	; (8003bb8 <HAL_ADC_Start_DMA+0x22c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d11b      	bne.n	8003b90 <HAL_ADC_Start_DMA+0x204>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d114      	bne.n	8003b90 <HAL_ADC_Start_DMA+0x204>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b74:	609a      	str	r2, [r3, #8]
 8003b76:	e00b      	b.n	8003b90 <HAL_ADC_Start_DMA+0x204>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	f043 0210 	orr.w	r2, r3, #16
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b88:	f043 0201 	orr.w	r2, r3, #1
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	0800ef84 	.word	0x0800ef84
 8003ba0:	20000004 	.word	0x20000004
 8003ba4:	431bde83 	.word	0x431bde83
 8003ba8:	40012300 	.word	0x40012300
 8003bac:	0800410d 	.word	0x0800410d
 8003bb0:	080041cb 	.word	0x080041cb
 8003bb4:	080041e9 	.word	0x080041e9
 8003bb8:	40012000 	.word	0x40012000

08003bbc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b12      	cmp	r3, #18
 8003c20:	d909      	bls.n	8003c36 <HAL_ADC_ConfigChannel+0x2a>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a72      	ldr	r2, [pc, #456]	; (8003df0 <HAL_ADC_ConfigChannel+0x1e4>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d004      	beq.n	8003c36 <HAL_ADC_ConfigChannel+0x2a>
 8003c2c:	f240 618b 	movw	r1, #1675	; 0x68b
 8003c30:	4870      	ldr	r0, [pc, #448]	; (8003df4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003c32:	f7fe fd18 	bl	8002666 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_ADC_ConfigChannel+0x3a>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b10      	cmp	r3, #16
 8003c44:	d904      	bls.n	8003c50 <HAL_ADC_ConfigChannel+0x44>
 8003c46:	f240 618c 	movw	r1, #1676	; 0x68c
 8003c4a:	486a      	ldr	r0, [pc, #424]	; (8003df4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003c4c:	f7fe fd0b 	bl	8002666 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d020      	beq.n	8003c9a <HAL_ADC_ConfigChannel+0x8e>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d01c      	beq.n	8003c9a <HAL_ADC_ConfigChannel+0x8e>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d018      	beq.n	8003c9a <HAL_ADC_ConfigChannel+0x8e>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d014      	beq.n	8003c9a <HAL_ADC_ConfigChannel+0x8e>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d010      	beq.n	8003c9a <HAL_ADC_ConfigChannel+0x8e>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b05      	cmp	r3, #5
 8003c7e:	d00c      	beq.n	8003c9a <HAL_ADC_ConfigChannel+0x8e>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2b06      	cmp	r3, #6
 8003c86:	d008      	beq.n	8003c9a <HAL_ADC_ConfigChannel+0x8e>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b07      	cmp	r3, #7
 8003c8e:	d004      	beq.n	8003c9a <HAL_ADC_ConfigChannel+0x8e>
 8003c90:	f240 618d 	movw	r1, #1677	; 0x68d
 8003c94:	4857      	ldr	r0, [pc, #348]	; (8003df4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003c96:	f7fe fce6 	bl	8002666 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x9c>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e118      	b.n	8003eda <HAL_ADC_ConfigChannel+0x2ce>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b09      	cmp	r3, #9
 8003cb6:	d925      	bls.n	8003d04 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68d9      	ldr	r1, [r3, #12]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	4413      	add	r3, r2
 8003ccc:	3b1e      	subs	r3, #30
 8003cce:	2207      	movs	r2, #7
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	43da      	mvns	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	400a      	ands	r2, r1
 8003cdc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68d9      	ldr	r1, [r3, #12]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	4618      	mov	r0, r3
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	4403      	add	r3, r0
 8003cf6:	3b1e      	subs	r3, #30
 8003cf8:	409a      	lsls	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	60da      	str	r2, [r3, #12]
 8003d02:	e022      	b.n	8003d4a <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6919      	ldr	r1, [r3, #16]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	461a      	mov	r2, r3
 8003d12:	4613      	mov	r3, r2
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	4413      	add	r3, r2
 8003d18:	2207      	movs	r2, #7
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	43da      	mvns	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	400a      	ands	r2, r1
 8003d26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6919      	ldr	r1, [r3, #16]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	4618      	mov	r0, r3
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	4403      	add	r3, r0
 8003d40:	409a      	lsls	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b06      	cmp	r3, #6
 8003d50:	d824      	bhi.n	8003d9c <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	3b05      	subs	r3, #5
 8003d64:	221f      	movs	r2, #31
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	43da      	mvns	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	400a      	ands	r2, r1
 8003d72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	4618      	mov	r0, r3
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	3b05      	subs	r3, #5
 8003d8e:	fa00 f203 	lsl.w	r2, r0, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	635a      	str	r2, [r3, #52]	; 0x34
 8003d9a:	e051      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2b0c      	cmp	r3, #12
 8003da2:	d829      	bhi.n	8003df8 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	4613      	mov	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	3b23      	subs	r3, #35	; 0x23
 8003db6:	221f      	movs	r2, #31
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	43da      	mvns	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	400a      	ands	r2, r1
 8003dc4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	3b23      	subs	r3, #35	; 0x23
 8003de0:	fa00 f203 	lsl.w	r2, r0, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	631a      	str	r2, [r3, #48]	; 0x30
 8003dec:	e028      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x234>
 8003dee:	bf00      	nop
 8003df0:	10000012 	.word	0x10000012
 8003df4:	0800ef84 	.word	0x0800ef84
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	3b41      	subs	r3, #65	; 0x41
 8003e0a:	221f      	movs	r2, #31
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	43da      	mvns	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	400a      	ands	r2, r1
 8003e18:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	4618      	mov	r0, r3
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	3b41      	subs	r3, #65	; 0x41
 8003e34:	fa00 f203 	lsl.w	r2, r0, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e40:	4b28      	ldr	r3, [pc, #160]	; (8003ee4 <HAL_ADC_ConfigChannel+0x2d8>)
 8003e42:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a27      	ldr	r2, [pc, #156]	; (8003ee8 <HAL_ADC_ConfigChannel+0x2dc>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d10f      	bne.n	8003e6e <HAL_ADC_ConfigChannel+0x262>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b12      	cmp	r3, #18
 8003e54:	d10b      	bne.n	8003e6e <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a1d      	ldr	r2, [pc, #116]	; (8003ee8 <HAL_ADC_ConfigChannel+0x2dc>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d12b      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x2c4>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a1b      	ldr	r2, [pc, #108]	; (8003eec <HAL_ADC_ConfigChannel+0x2e0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d003      	beq.n	8003e8a <HAL_ADC_ConfigChannel+0x27e>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b11      	cmp	r3, #17
 8003e88:	d122      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a11      	ldr	r2, [pc, #68]	; (8003eec <HAL_ADC_ConfigChannel+0x2e0>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d111      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003eac:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <HAL_ADC_ConfigChannel+0x2e4>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a10      	ldr	r2, [pc, #64]	; (8003ef4 <HAL_ADC_ConfigChannel+0x2e8>)
 8003eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb6:	0c9a      	lsrs	r2, r3, #18
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ec2:	e002      	b.n	8003eca <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1f9      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40012300 	.word	0x40012300
 8003ee8:	40012000 	.word	0x40012000
 8003eec:	10000012 	.word	0x10000012
 8003ef0:	20000004 	.word	0x20000004
 8003ef4:	431bde83 	.word	0x431bde83

08003ef8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f00:	4b7f      	ldr	r3, [pc, #508]	; (8004100 <ADC_Init+0x208>)
 8003f02:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6859      	ldr	r1, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	021a      	lsls	r2, r3, #8
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6859      	ldr	r1, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6899      	ldr	r1, [r3, #8]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8a:	4a5e      	ldr	r2, [pc, #376]	; (8004104 <ADC_Init+0x20c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d022      	beq.n	8003fd6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6899      	ldr	r1, [r3, #8]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6899      	ldr	r1, [r3, #8]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	609a      	str	r2, [r3, #8]
 8003fd4:	e00f      	b.n	8003ff6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fe4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ff4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0202 	bic.w	r2, r2, #2
 8004004:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6899      	ldr	r1, [r3, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	7e1b      	ldrb	r3, [r3, #24]
 8004010:	005a      	lsls	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d028      	beq.n	8004076 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <ADC_Init+0x13c>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	2b08      	cmp	r3, #8
 8004032:	d904      	bls.n	800403e <ADC_Init+0x146>
 8004034:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8004038:	4833      	ldr	r0, [pc, #204]	; (8004108 <ADC_Init+0x210>)
 800403a:	f7fe fb14 	bl	8002666 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800404c:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800405c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6859      	ldr	r1, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	3b01      	subs	r3, #1
 800406a:	035a      	lsls	r2, r3, #13
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	605a      	str	r2, [r3, #4]
 8004074:	e007      	b.n	8004086 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004084:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004094:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	3b01      	subs	r3, #1
 80040a2:	051a      	lsls	r2, r3, #20
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6899      	ldr	r1, [r3, #8]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040c8:	025a      	lsls	r2, r3, #9
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6899      	ldr	r1, [r3, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	029a      	lsls	r2, r3, #10
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	609a      	str	r2, [r3, #8]
}
 80040f6:	bf00      	nop
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40012300 	.word	0x40012300
 8004104:	0f000001 	.word	0x0f000001
 8004108:	0800ef84 	.word	0x0800ef84

0800410c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004118:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004122:	2b00      	cmp	r3, #0
 8004124:	d13d      	bne.n	80041a2 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d12b      	bne.n	8004198 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004144:	2b00      	cmp	r3, #0
 8004146:	d127      	bne.n	8004198 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004152:	2b00      	cmp	r3, #0
 8004154:	d006      	beq.n	8004164 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004160:	2b00      	cmp	r3, #0
 8004162:	d119      	bne.n	8004198 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0220 	bic.w	r2, r2, #32
 8004172:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d105      	bne.n	8004198 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	f043 0201 	orr.w	r2, r3, #1
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041a0:	e00f      	b.n	80041c2 <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d004      	beq.n	80041b8 <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	4798      	blx	r3
}
 80041b6:	e004      	b.n	80041c2 <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	4798      	blx	r3
}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041e0:	bf00      	nop
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2240      	movs	r2, #64	; 0x40
 80041fa:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004200:	f043 0204 	orr.w	r2, r3, #4
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004210:	bf00      	nop
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800423c:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <__NVIC_SetPriorityGrouping+0x44>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004248:	4013      	ands	r3, r2
 800424a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800425c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800425e:	4a04      	ldr	r2, [pc, #16]	; (8004270 <__NVIC_SetPriorityGrouping+0x44>)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	60d3      	str	r3, [r2, #12]
}
 8004264:	bf00      	nop
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	e000ed00 	.word	0xe000ed00

08004274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004278:	4b04      	ldr	r3, [pc, #16]	; (800428c <__NVIC_GetPriorityGrouping+0x18>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	0a1b      	lsrs	r3, r3, #8
 800427e:	f003 0307 	and.w	r3, r3, #7
}
 8004282:	4618      	mov	r0, r3
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	e000ed00 	.word	0xe000ed00

08004290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800429a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	db0b      	blt.n	80042ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	f003 021f 	and.w	r2, r3, #31
 80042a8:	4907      	ldr	r1, [pc, #28]	; (80042c8 <__NVIC_EnableIRQ+0x38>)
 80042aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	2001      	movs	r0, #1
 80042b2:	fa00 f202 	lsl.w	r2, r0, r2
 80042b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	e000e100 	.word	0xe000e100

080042cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	6039      	str	r1, [r7, #0]
 80042d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	db0a      	blt.n	80042f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	490c      	ldr	r1, [pc, #48]	; (8004318 <__NVIC_SetPriority+0x4c>)
 80042e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ea:	0112      	lsls	r2, r2, #4
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	440b      	add	r3, r1
 80042f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042f4:	e00a      	b.n	800430c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	4908      	ldr	r1, [pc, #32]	; (800431c <__NVIC_SetPriority+0x50>)
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	3b04      	subs	r3, #4
 8004304:	0112      	lsls	r2, r2, #4
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	440b      	add	r3, r1
 800430a:	761a      	strb	r2, [r3, #24]
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	e000e100 	.word	0xe000e100
 800431c:	e000ed00 	.word	0xe000ed00

08004320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004320:	b480      	push	{r7}
 8004322:	b089      	sub	sp, #36	; 0x24
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f1c3 0307 	rsb	r3, r3, #7
 800433a:	2b04      	cmp	r3, #4
 800433c:	bf28      	it	cs
 800433e:	2304      	movcs	r3, #4
 8004340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	3304      	adds	r3, #4
 8004346:	2b06      	cmp	r3, #6
 8004348:	d902      	bls.n	8004350 <NVIC_EncodePriority+0x30>
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	3b03      	subs	r3, #3
 800434e:	e000      	b.n	8004352 <NVIC_EncodePriority+0x32>
 8004350:	2300      	movs	r3, #0
 8004352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004354:	f04f 32ff 	mov.w	r2, #4294967295
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43da      	mvns	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	401a      	ands	r2, r3
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004368:	f04f 31ff 	mov.w	r1, #4294967295
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	fa01 f303 	lsl.w	r3, r1, r3
 8004372:	43d9      	mvns	r1, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004378:	4313      	orrs	r3, r2
         );
}
 800437a:	4618      	mov	r0, r3
 800437c:	3724      	adds	r7, #36	; 0x24
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
	...

08004388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b07      	cmp	r3, #7
 8004394:	d00f      	beq.n	80043b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b06      	cmp	r3, #6
 800439a:	d00c      	beq.n	80043b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b05      	cmp	r3, #5
 80043a0:	d009      	beq.n	80043b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d006      	beq.n	80043b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d003      	beq.n	80043b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80043ae:	2190      	movs	r1, #144	; 0x90
 80043b0:	4804      	ldr	r0, [pc, #16]	; (80043c4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80043b2:	f7fe f958 	bl	8002666 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff ff38 	bl	800422c <__NVIC_SetPriorityGrouping>
}
 80043bc:	bf00      	nop
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	0800eff8 	.word	0x0800eff8

080043c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b0f      	cmp	r3, #15
 80043de:	d903      	bls.n	80043e8 <HAL_NVIC_SetPriority+0x20>
 80043e0:	21a8      	movs	r1, #168	; 0xa8
 80043e2:	480e      	ldr	r0, [pc, #56]	; (800441c <HAL_NVIC_SetPriority+0x54>)
 80043e4:	f7fe f93f 	bl	8002666 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2b0f      	cmp	r3, #15
 80043ec:	d903      	bls.n	80043f6 <HAL_NVIC_SetPriority+0x2e>
 80043ee:	21a9      	movs	r1, #169	; 0xa9
 80043f0:	480a      	ldr	r0, [pc, #40]	; (800441c <HAL_NVIC_SetPriority+0x54>)
 80043f2:	f7fe f938 	bl	8002666 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043f6:	f7ff ff3d 	bl	8004274 <__NVIC_GetPriorityGrouping>
 80043fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	68b9      	ldr	r1, [r7, #8]
 8004400:	6978      	ldr	r0, [r7, #20]
 8004402:	f7ff ff8d 	bl	8004320 <NVIC_EncodePriority>
 8004406:	4602      	mov	r2, r0
 8004408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800440c:	4611      	mov	r1, r2
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff ff5c 	bl	80042cc <__NVIC_SetPriority>
}
 8004414:	bf00      	nop
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	0800eff8 	.word	0x0800eff8

08004420 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800442a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442e:	2b00      	cmp	r3, #0
 8004430:	da03      	bge.n	800443a <HAL_NVIC_EnableIRQ+0x1a>
 8004432:	21bc      	movs	r1, #188	; 0xbc
 8004434:	4805      	ldr	r0, [pc, #20]	; (800444c <HAL_NVIC_EnableIRQ+0x2c>)
 8004436:	f7fe f916 	bl	8002666 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800443a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff ff26 	bl	8004290 <__NVIC_EnableIRQ>
}
 8004444:	bf00      	nop
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	0800eff8 	.word	0x0800eff8

08004450 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e017      	b.n	8004492 <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a0d      	ldr	r2, [pc, #52]	; (800449c <HAL_CRC_Init+0x4c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d003      	beq.n	8004474 <HAL_CRC_Init+0x24>
 800446c:	2168      	movs	r1, #104	; 0x68
 800446e:	480c      	ldr	r0, [pc, #48]	; (80044a0 <HAL_CRC_Init+0x50>)
 8004470:	f7fe f8f9 	bl	8002666 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	795b      	ldrb	r3, [r3, #5]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d105      	bne.n	800448a <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7fd fe41 	bl	800210c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40023000 	.word	0x40023000
 80044a0:	0800f070 	.word	0x0800f070

080044a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044b0:	f7fe ff9c 	bl	80033ec <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e203      	b.n	80048c8 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a8b      	ldr	r2, [pc, #556]	; (80046f4 <HAL_DMA_Init+0x250>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d04e      	beq.n	8004568 <HAL_DMA_Init+0xc4>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a8a      	ldr	r2, [pc, #552]	; (80046f8 <HAL_DMA_Init+0x254>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d049      	beq.n	8004568 <HAL_DMA_Init+0xc4>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a88      	ldr	r2, [pc, #544]	; (80046fc <HAL_DMA_Init+0x258>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d044      	beq.n	8004568 <HAL_DMA_Init+0xc4>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a87      	ldr	r2, [pc, #540]	; (8004700 <HAL_DMA_Init+0x25c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d03f      	beq.n	8004568 <HAL_DMA_Init+0xc4>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a85      	ldr	r2, [pc, #532]	; (8004704 <HAL_DMA_Init+0x260>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d03a      	beq.n	8004568 <HAL_DMA_Init+0xc4>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a84      	ldr	r2, [pc, #528]	; (8004708 <HAL_DMA_Init+0x264>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d035      	beq.n	8004568 <HAL_DMA_Init+0xc4>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a82      	ldr	r2, [pc, #520]	; (800470c <HAL_DMA_Init+0x268>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d030      	beq.n	8004568 <HAL_DMA_Init+0xc4>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a81      	ldr	r2, [pc, #516]	; (8004710 <HAL_DMA_Init+0x26c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d02b      	beq.n	8004568 <HAL_DMA_Init+0xc4>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a7f      	ldr	r2, [pc, #508]	; (8004714 <HAL_DMA_Init+0x270>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d026      	beq.n	8004568 <HAL_DMA_Init+0xc4>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a7e      	ldr	r2, [pc, #504]	; (8004718 <HAL_DMA_Init+0x274>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d021      	beq.n	8004568 <HAL_DMA_Init+0xc4>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a7c      	ldr	r2, [pc, #496]	; (800471c <HAL_DMA_Init+0x278>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d01c      	beq.n	8004568 <HAL_DMA_Init+0xc4>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a7b      	ldr	r2, [pc, #492]	; (8004720 <HAL_DMA_Init+0x27c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d017      	beq.n	8004568 <HAL_DMA_Init+0xc4>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a79      	ldr	r2, [pc, #484]	; (8004724 <HAL_DMA_Init+0x280>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d012      	beq.n	8004568 <HAL_DMA_Init+0xc4>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a78      	ldr	r2, [pc, #480]	; (8004728 <HAL_DMA_Init+0x284>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d00d      	beq.n	8004568 <HAL_DMA_Init+0xc4>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a76      	ldr	r2, [pc, #472]	; (800472c <HAL_DMA_Init+0x288>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d008      	beq.n	8004568 <HAL_DMA_Init+0xc4>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a75      	ldr	r2, [pc, #468]	; (8004730 <HAL_DMA_Init+0x28c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d003      	beq.n	8004568 <HAL_DMA_Init+0xc4>
 8004560:	21b7      	movs	r1, #183	; 0xb7
 8004562:	4874      	ldr	r0, [pc, #464]	; (8004734 <HAL_DMA_Init+0x290>)
 8004564:	f7fe f87f 	bl	8002666 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d026      	beq.n	80045be <HAL_DMA_Init+0x11a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004578:	d021      	beq.n	80045be <HAL_DMA_Init+0x11a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004582:	d01c      	beq.n	80045be <HAL_DMA_Init+0x11a>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800458c:	d017      	beq.n	80045be <HAL_DMA_Init+0x11a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004596:	d012      	beq.n	80045be <HAL_DMA_Init+0x11a>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80045a0:	d00d      	beq.n	80045be <HAL_DMA_Init+0x11a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80045aa:	d008      	beq.n	80045be <HAL_DMA_Init+0x11a>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80045b4:	d003      	beq.n	80045be <HAL_DMA_Init+0x11a>
 80045b6:	21b8      	movs	r1, #184	; 0xb8
 80045b8:	485e      	ldr	r0, [pc, #376]	; (8004734 <HAL_DMA_Init+0x290>)
 80045ba:	f7fe f854 	bl	8002666 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00b      	beq.n	80045de <HAL_DMA_Init+0x13a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	2b40      	cmp	r3, #64	; 0x40
 80045cc:	d007      	beq.n	80045de <HAL_DMA_Init+0x13a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b80      	cmp	r3, #128	; 0x80
 80045d4:	d003      	beq.n	80045de <HAL_DMA_Init+0x13a>
 80045d6:	21b9      	movs	r1, #185	; 0xb9
 80045d8:	4856      	ldr	r0, [pc, #344]	; (8004734 <HAL_DMA_Init+0x290>)
 80045da:	f7fe f844 	bl	8002666 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045e6:	d007      	beq.n	80045f8 <HAL_DMA_Init+0x154>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_DMA_Init+0x154>
 80045f0:	21ba      	movs	r1, #186	; 0xba
 80045f2:	4850      	ldr	r0, [pc, #320]	; (8004734 <HAL_DMA_Init+0x290>)
 80045f4:	f7fe f837 	bl	8002666 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004600:	d007      	beq.n	8004612 <HAL_DMA_Init+0x16e>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_DMA_Init+0x16e>
 800460a:	21bb      	movs	r1, #187	; 0xbb
 800460c:	4849      	ldr	r0, [pc, #292]	; (8004734 <HAL_DMA_Init+0x290>)
 800460e:	f7fe f82a 	bl	8002666 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00d      	beq.n	8004636 <HAL_DMA_Init+0x192>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004622:	d008      	beq.n	8004636 <HAL_DMA_Init+0x192>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800462c:	d003      	beq.n	8004636 <HAL_DMA_Init+0x192>
 800462e:	21bc      	movs	r1, #188	; 0xbc
 8004630:	4840      	ldr	r0, [pc, #256]	; (8004734 <HAL_DMA_Init+0x290>)
 8004632:	f7fe f818 	bl	8002666 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00d      	beq.n	800465a <HAL_DMA_Init+0x1b6>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004646:	d008      	beq.n	800465a <HAL_DMA_Init+0x1b6>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004650:	d003      	beq.n	800465a <HAL_DMA_Init+0x1b6>
 8004652:	21bd      	movs	r1, #189	; 0xbd
 8004654:	4837      	ldr	r0, [pc, #220]	; (8004734 <HAL_DMA_Init+0x290>)
 8004656:	f7fe f806 	bl	8002666 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00c      	beq.n	800467c <HAL_DMA_Init+0x1d8>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800466a:	d007      	beq.n	800467c <HAL_DMA_Init+0x1d8>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	2b20      	cmp	r3, #32
 8004672:	d003      	beq.n	800467c <HAL_DMA_Init+0x1d8>
 8004674:	21be      	movs	r1, #190	; 0xbe
 8004676:	482f      	ldr	r0, [pc, #188]	; (8004734 <HAL_DMA_Init+0x290>)
 8004678:	f7fd fff5 	bl	8002666 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d012      	beq.n	80046aa <HAL_DMA_Init+0x206>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800468c:	d00d      	beq.n	80046aa <HAL_DMA_Init+0x206>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004696:	d008      	beq.n	80046aa <HAL_DMA_Init+0x206>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046a0:	d003      	beq.n	80046aa <HAL_DMA_Init+0x206>
 80046a2:	21bf      	movs	r1, #191	; 0xbf
 80046a4:	4823      	ldr	r0, [pc, #140]	; (8004734 <HAL_DMA_Init+0x290>)
 80046a6:	f7fd ffde 	bl	8002666 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d007      	beq.n	80046c2 <HAL_DMA_Init+0x21e>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d003      	beq.n	80046c2 <HAL_DMA_Init+0x21e>
 80046ba:	21c0      	movs	r1, #192	; 0xc0
 80046bc:	481d      	ldr	r0, [pc, #116]	; (8004734 <HAL_DMA_Init+0x290>)
 80046be:	f7fd ffd2 	bl	8002666 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d064      	beq.n	8004794 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d032      	beq.n	8004738 <HAL_DMA_Init+0x294>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d02e      	beq.n	8004738 <HAL_DMA_Init+0x294>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d02a      	beq.n	8004738 <HAL_DMA_Init+0x294>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d026      	beq.n	8004738 <HAL_DMA_Init+0x294>
 80046ea:	21c5      	movs	r1, #197	; 0xc5
 80046ec:	4811      	ldr	r0, [pc, #68]	; (8004734 <HAL_DMA_Init+0x290>)
 80046ee:	f7fd ffba 	bl	8002666 <assert_failed>
 80046f2:	e021      	b.n	8004738 <HAL_DMA_Init+0x294>
 80046f4:	40026010 	.word	0x40026010
 80046f8:	40026028 	.word	0x40026028
 80046fc:	40026040 	.word	0x40026040
 8004700:	40026058 	.word	0x40026058
 8004704:	40026070 	.word	0x40026070
 8004708:	40026088 	.word	0x40026088
 800470c:	400260a0 	.word	0x400260a0
 8004710:	400260b8 	.word	0x400260b8
 8004714:	40026410 	.word	0x40026410
 8004718:	40026428 	.word	0x40026428
 800471c:	40026440 	.word	0x40026440
 8004720:	40026458 	.word	0x40026458
 8004724:	40026470 	.word	0x40026470
 8004728:	40026488 	.word	0x40026488
 800472c:	400264a0 	.word	0x400264a0
 8004730:	400264b8 	.word	0x400264b8
 8004734:	0800f0e4 	.word	0x0800f0e4
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473c:	2b00      	cmp	r3, #0
 800473e:	d012      	beq.n	8004766 <HAL_DMA_Init+0x2c2>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004748:	d00d      	beq.n	8004766 <HAL_DMA_Init+0x2c2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004752:	d008      	beq.n	8004766 <HAL_DMA_Init+0x2c2>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800475c:	d003      	beq.n	8004766 <HAL_DMA_Init+0x2c2>
 800475e:	21c6      	movs	r1, #198	; 0xc6
 8004760:	485b      	ldr	r0, [pc, #364]	; (80048d0 <HAL_DMA_Init+0x42c>)
 8004762:	f7fd ff80 	bl	8002666 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476a:	2b00      	cmp	r3, #0
 800476c:	d012      	beq.n	8004794 <HAL_DMA_Init+0x2f0>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004772:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004776:	d00d      	beq.n	8004794 <HAL_DMA_Init+0x2f0>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004780:	d008      	beq.n	8004794 <HAL_DMA_Init+0x2f0>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004786:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800478a:	d003      	beq.n	8004794 <HAL_DMA_Init+0x2f0>
 800478c:	21c7      	movs	r1, #199	; 0xc7
 800478e:	4850      	ldr	r0, [pc, #320]	; (80048d0 <HAL_DMA_Init+0x42c>)
 8004790:	f7fd ff69 	bl	8002666 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0201 	bic.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047b4:	e00f      	b.n	80047d6 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047b6:	f7fe fe19 	bl	80033ec <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b05      	cmp	r3, #5
 80047c2:	d908      	bls.n	80047d6 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2220      	movs	r2, #32
 80047c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2203      	movs	r2, #3
 80047ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e078      	b.n	80048c8 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e8      	bne.n	80047b6 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	4b39      	ldr	r3, [pc, #228]	; (80048d4 <HAL_DMA_Init+0x430>)
 80047f0:	4013      	ands	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004802:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800480e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800481a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4313      	orrs	r3, r2
 8004826:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	2b04      	cmp	r3, #4
 800482e:	d107      	bne.n	8004840 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	4313      	orrs	r3, r2
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f023 0307 	bic.w	r3, r3, #7
 8004856:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	4313      	orrs	r3, r2
 8004860:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	2b04      	cmp	r3, #4
 8004868:	d117      	bne.n	800489a <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00e      	beq.n	800489a <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 fb1f 	bl	8004ec0 <DMA_CheckFifoParam>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d008      	beq.n	800489a <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2240      	movs	r2, #64	; 0x40
 800488c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004896:	2301      	movs	r3, #1
 8004898:	e016      	b.n	80048c8 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fad6 	bl	8004e54 <DMA_CalcBaseAndBitshift>
 80048a8:	4603      	mov	r3, r0
 80048aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b0:	223f      	movs	r2, #63	; 0x3f
 80048b2:	409a      	lsls	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	0800f0e4 	.word	0x0800f0e4
 80048d4:	f010803f 	.word	0xf010803f

080048d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
 80048e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_DMA_Start_IT+0x26>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fc:	d304      	bcc.n	8004908 <HAL_DMA_Start_IT+0x30>
 80048fe:	f240 11cb 	movw	r1, #459	; 0x1cb
 8004902:	4827      	ldr	r0, [pc, #156]	; (80049a0 <HAL_DMA_Start_IT+0xc8>)
 8004904:	f7fd feaf 	bl	8002666 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <HAL_DMA_Start_IT+0x3e>
 8004912:	2302      	movs	r3, #2
 8004914:	e040      	b.n	8004998 <HAL_DMA_Start_IT+0xc0>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b01      	cmp	r3, #1
 8004928:	d12f      	bne.n	800498a <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2202      	movs	r2, #2
 800492e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	68b9      	ldr	r1, [r7, #8]
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 fa5a 	bl	8004df8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004948:	223f      	movs	r2, #63	; 0x3f
 800494a:	409a      	lsls	r2, r3
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0216 	orr.w	r2, r2, #22
 800495e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	2b00      	cmp	r3, #0
 8004966:	d007      	beq.n	8004978 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0208 	orr.w	r2, r2, #8
 8004976:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	e005      	b.n	8004996 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004992:	2302      	movs	r3, #2
 8004994:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004996:	7dfb      	ldrb	r3, [r7, #23]
}
 8004998:	4618      	mov	r0, r3
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	0800f0e4 	.word	0x0800f0e4

080049a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80049b2:	f7fe fd1b 	bl	80033ec <HAL_GetTick>
 80049b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d008      	beq.n	80049d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2280      	movs	r2, #128	; 0x80
 80049c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e052      	b.n	8004a7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0216 	bic.w	r2, r2, #22
 80049e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695a      	ldr	r2, [r3, #20]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d103      	bne.n	8004a06 <HAL_DMA_Abort+0x62>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d007      	beq.n	8004a16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0208 	bic.w	r2, r2, #8
 8004a14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0201 	bic.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a26:	e013      	b.n	8004a50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a28:	f7fe fce0 	bl	80033ec <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b05      	cmp	r3, #5
 8004a34:	d90c      	bls.n	8004a50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2203      	movs	r2, #3
 8004a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e015      	b.n	8004a7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1e4      	bne.n	8004a28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a62:	223f      	movs	r2, #63	; 0x3f
 8004a64:	409a      	lsls	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d004      	beq.n	8004aa2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2280      	movs	r2, #128	; 0x80
 8004a9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e00c      	b.n	8004abc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2205      	movs	r2, #5
 8004aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0201 	bic.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ad4:	4b8e      	ldr	r3, [pc, #568]	; (8004d10 <HAL_DMA_IRQHandler+0x248>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a8e      	ldr	r2, [pc, #568]	; (8004d14 <HAL_DMA_IRQHandler+0x24c>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	0a9b      	lsrs	r3, r3, #10
 8004ae0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af2:	2208      	movs	r2, #8
 8004af4:	409a      	lsls	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4013      	ands	r3, r2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01a      	beq.n	8004b34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d013      	beq.n	8004b34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0204 	bic.w	r2, r2, #4
 8004b1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b20:	2208      	movs	r2, #8
 8004b22:	409a      	lsls	r2, r3
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2c:	f043 0201 	orr.w	r2, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b38:	2201      	movs	r2, #1
 8004b3a:	409a      	lsls	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d012      	beq.n	8004b6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00b      	beq.n	8004b6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b56:	2201      	movs	r2, #1
 8004b58:	409a      	lsls	r2, r3
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b62:	f043 0202 	orr.w	r2, r3, #2
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6e:	2204      	movs	r2, #4
 8004b70:	409a      	lsls	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4013      	ands	r3, r2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d012      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00b      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8c:	2204      	movs	r2, #4
 8004b8e:	409a      	lsls	r2, r3
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b98:	f043 0204 	orr.w	r2, r3, #4
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba4:	2210      	movs	r2, #16
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d043      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d03c      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc2:	2210      	movs	r2, #16
 8004bc4:	409a      	lsls	r2, r3
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d018      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d108      	bne.n	8004bf8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d024      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	4798      	blx	r3
 8004bf6:	e01f      	b.n	8004c38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d01b      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	4798      	blx	r3
 8004c08:	e016      	b.n	8004c38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d107      	bne.n	8004c28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0208 	bic.w	r2, r2, #8
 8004c26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	409a      	lsls	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4013      	ands	r3, r2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 808f 	beq.w	8004d68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0310 	and.w	r3, r3, #16
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 8087 	beq.w	8004d68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5e:	2220      	movs	r2, #32
 8004c60:	409a      	lsls	r2, r3
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b05      	cmp	r3, #5
 8004c70:	d136      	bne.n	8004ce0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0216 	bic.w	r2, r2, #22
 8004c80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695a      	ldr	r2, [r3, #20]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d103      	bne.n	8004ca2 <HAL_DMA_IRQHandler+0x1da>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d007      	beq.n	8004cb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0208 	bic.w	r2, r2, #8
 8004cb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb6:	223f      	movs	r2, #63	; 0x3f
 8004cb8:	409a      	lsls	r2, r3
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d07e      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	4798      	blx	r3
        }
        return;
 8004cde:	e079      	b.n	8004dd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d01d      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10d      	bne.n	8004d18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d031      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	4798      	blx	r3
 8004d0c:	e02c      	b.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
 8004d0e:	bf00      	nop
 8004d10:	20000004 	.word	0x20000004
 8004d14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d023      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	4798      	blx	r3
 8004d28:	e01e      	b.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10f      	bne.n	8004d58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0210 	bic.w	r2, r2, #16
 8004d46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d032      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d022      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2205      	movs	r2, #5
 8004d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0201 	bic.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	3301      	adds	r3, #1
 8004d98:	60bb      	str	r3, [r7, #8]
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d307      	bcc.n	8004db0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f2      	bne.n	8004d94 <HAL_DMA_IRQHandler+0x2cc>
 8004dae:	e000      	b.n	8004db2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004db0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d005      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	4798      	blx	r3
 8004dd2:	e000      	b.n	8004dd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004dd4:	bf00      	nop
    }
  }
}
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dea:	b2db      	uxtb	r3, r3
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	2b40      	cmp	r3, #64	; 0x40
 8004e24:	d108      	bne.n	8004e38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e36:	e007      	b.n	8004e48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	60da      	str	r2, [r3, #12]
}
 8004e48:	bf00      	nop
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	3b10      	subs	r3, #16
 8004e64:	4a14      	ldr	r2, [pc, #80]	; (8004eb8 <DMA_CalcBaseAndBitshift+0x64>)
 8004e66:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6a:	091b      	lsrs	r3, r3, #4
 8004e6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e6e:	4a13      	ldr	r2, [pc, #76]	; (8004ebc <DMA_CalcBaseAndBitshift+0x68>)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4413      	add	r3, r2
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d909      	bls.n	8004e96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e8a:	f023 0303 	bic.w	r3, r3, #3
 8004e8e:	1d1a      	adds	r2, r3, #4
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	659a      	str	r2, [r3, #88]	; 0x58
 8004e94:	e007      	b.n	8004ea6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e9e:	f023 0303 	bic.w	r3, r3, #3
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	aaaaaaab 	.word	0xaaaaaaab
 8004ebc:	0800f6dc 	.word	0x0800f6dc

08004ec0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d11f      	bne.n	8004f1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d856      	bhi.n	8004f8e <DMA_CheckFifoParam+0xce>
 8004ee0:	a201      	add	r2, pc, #4	; (adr r2, 8004ee8 <DMA_CheckFifoParam+0x28>)
 8004ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee6:	bf00      	nop
 8004ee8:	08004ef9 	.word	0x08004ef9
 8004eec:	08004f0b 	.word	0x08004f0b
 8004ef0:	08004ef9 	.word	0x08004ef9
 8004ef4:	08004f8f 	.word	0x08004f8f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d046      	beq.n	8004f92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f08:	e043      	b.n	8004f92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f12:	d140      	bne.n	8004f96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f18:	e03d      	b.n	8004f96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f22:	d121      	bne.n	8004f68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	d837      	bhi.n	8004f9a <DMA_CheckFifoParam+0xda>
 8004f2a:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <DMA_CheckFifoParam+0x70>)
 8004f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f30:	08004f41 	.word	0x08004f41
 8004f34:	08004f47 	.word	0x08004f47
 8004f38:	08004f41 	.word	0x08004f41
 8004f3c:	08004f59 	.word	0x08004f59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	73fb      	strb	r3, [r7, #15]
      break;
 8004f44:	e030      	b.n	8004fa8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d025      	beq.n	8004f9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f56:	e022      	b.n	8004f9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f60:	d11f      	bne.n	8004fa2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f66:	e01c      	b.n	8004fa2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d903      	bls.n	8004f76 <DMA_CheckFifoParam+0xb6>
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b03      	cmp	r3, #3
 8004f72:	d003      	beq.n	8004f7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f74:	e018      	b.n	8004fa8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	73fb      	strb	r3, [r7, #15]
      break;
 8004f7a:	e015      	b.n	8004fa8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00e      	beq.n	8004fa6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f8c:	e00b      	b.n	8004fa6 <DMA_CheckFifoParam+0xe6>
      break;
 8004f8e:	bf00      	nop
 8004f90:	e00a      	b.n	8004fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8004f92:	bf00      	nop
 8004f94:	e008      	b.n	8004fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8004f96:	bf00      	nop
 8004f98:	e006      	b.n	8004fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8004f9a:	bf00      	nop
 8004f9c:	e004      	b.n	8004fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8004f9e:	bf00      	nop
 8004fa0:	e002      	b.n	8004fa8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004fa2:	bf00      	nop
 8004fa4:	e000      	b.n	8004fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fa6:	bf00      	nop
    }
  } 
  
  return status; 
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop

08004fb8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004fc2:	4b4b      	ldr	r3, [pc, #300]	; (80050f0 <HAL_FLASH_IRQHandler+0x138>)
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d020      	beq.n	8005010 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8004fce:	4b49      	ldr	r3, [pc, #292]	; (80050f4 <HAL_FLASH_IRQHandler+0x13c>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d107      	bne.n	8004fe8 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8004fd8:	4b46      	ldr	r3, [pc, #280]	; (80050f4 <HAL_FLASH_IRQHandler+0x13c>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8004fde:	4b45      	ldr	r3, [pc, #276]	; (80050f4 <HAL_FLASH_IRQHandler+0x13c>)
 8004fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe4:	60da      	str	r2, [r3, #12]
 8004fe6:	e00b      	b.n	8005000 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8004fe8:	4b42      	ldr	r3, [pc, #264]	; (80050f4 <HAL_FLASH_IRQHandler+0x13c>)
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d103      	bne.n	8004ffa <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8004ff2:	4b40      	ldr	r3, [pc, #256]	; (80050f4 <HAL_FLASH_IRQHandler+0x13c>)
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	607b      	str	r3, [r7, #4]
 8004ff8:	e002      	b.n	8005000 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8004ffa:	4b3e      	ldr	r3, [pc, #248]	; (80050f4 <HAL_FLASH_IRQHandler+0x13c>)
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8005000:	f000 f88e 	bl	8005120 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f881 	bl	800510c <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800500a:	4b3a      	ldr	r3, [pc, #232]	; (80050f4 <HAL_FLASH_IRQHandler+0x13c>)
 800500c:	2200      	movs	r2, #0
 800500e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005010:	4b37      	ldr	r3, [pc, #220]	; (80050f0 <HAL_FLASH_IRQHandler+0x138>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	d04a      	beq.n	80050b2 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800501c:	4b34      	ldr	r3, [pc, #208]	; (80050f0 <HAL_FLASH_IRQHandler+0x138>)
 800501e:	2201      	movs	r2, #1
 8005020:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8005022:	4b34      	ldr	r3, [pc, #208]	; (80050f4 <HAL_FLASH_IRQHandler+0x13c>)
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b01      	cmp	r3, #1
 800502a:	d12d      	bne.n	8005088 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800502c:	4b31      	ldr	r3, [pc, #196]	; (80050f4 <HAL_FLASH_IRQHandler+0x13c>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	3b01      	subs	r3, #1
 8005032:	4a30      	ldr	r2, [pc, #192]	; (80050f4 <HAL_FLASH_IRQHandler+0x13c>)
 8005034:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8005036:	4b2f      	ldr	r3, [pc, #188]	; (80050f4 <HAL_FLASH_IRQHandler+0x13c>)
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d015      	beq.n	800506a <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 800503e:	4b2d      	ldr	r3, [pc, #180]	; (80050f4 <HAL_FLASH_IRQHandler+0x13c>)
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f857 	bl	80050f8 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 800504a:	4b2a      	ldr	r3, [pc, #168]	; (80050f4 <HAL_FLASH_IRQHandler+0x13c>)
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	3301      	adds	r3, #1
 8005050:	4a28      	ldr	r2, [pc, #160]	; (80050f4 <HAL_FLASH_IRQHandler+0x13c>)
 8005052:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8005054:	4b27      	ldr	r3, [pc, #156]	; (80050f4 <HAL_FLASH_IRQHandler+0x13c>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800505a:	4b26      	ldr	r3, [pc, #152]	; (80050f4 <HAL_FLASH_IRQHandler+0x13c>)
 800505c:	7a1b      	ldrb	r3, [r3, #8]
 800505e:	b2db      	uxtb	r3, r3
 8005060:	4619      	mov	r1, r3
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f8c2 	bl	80051ec <FLASH_Erase_Sector>
 8005068:	e023      	b.n	80050b2 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800506a:	f04f 33ff 	mov.w	r3, #4294967295
 800506e:	607b      	str	r3, [r7, #4]
 8005070:	4a20      	ldr	r2, [pc, #128]	; (80050f4 <HAL_FLASH_IRQHandler+0x13c>)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005076:	4b1f      	ldr	r3, [pc, #124]	; (80050f4 <HAL_FLASH_IRQHandler+0x13c>)
 8005078:	2200      	movs	r2, #0
 800507a:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800507c:	f000 f92c 	bl	80052d8 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f839 	bl	80050f8 <HAL_FLASH_EndOfOperationCallback>
 8005086:	e014      	b.n	80050b2 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8005088:	4b1a      	ldr	r3, [pc, #104]	; (80050f4 <HAL_FLASH_IRQHandler+0x13c>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d107      	bne.n	80050a2 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8005092:	f000 f921 	bl	80052d8 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8005096:	4b17      	ldr	r3, [pc, #92]	; (80050f4 <HAL_FLASH_IRQHandler+0x13c>)
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	4618      	mov	r0, r3
 800509c:	f000 f82c 	bl	80050f8 <HAL_FLASH_EndOfOperationCallback>
 80050a0:	e004      	b.n	80050ac <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80050a2:	4b14      	ldr	r3, [pc, #80]	; (80050f4 <HAL_FLASH_IRQHandler+0x13c>)
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 f826 	bl	80050f8 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80050ac:	4b11      	ldr	r3, [pc, #68]	; (80050f4 <HAL_FLASH_IRQHandler+0x13c>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80050b2:	4b10      	ldr	r3, [pc, #64]	; (80050f4 <HAL_FLASH_IRQHandler+0x13c>)
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d114      	bne.n	80050e6 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 80050bc:	4b0c      	ldr	r3, [pc, #48]	; (80050f0 <HAL_FLASH_IRQHandler+0x138>)
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	4a0b      	ldr	r2, [pc, #44]	; (80050f0 <HAL_FLASH_IRQHandler+0x138>)
 80050c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80050c6:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 80050c8:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <HAL_FLASH_IRQHandler+0x138>)
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	4a08      	ldr	r2, [pc, #32]	; (80050f0 <HAL_FLASH_IRQHandler+0x138>)
 80050ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050d2:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 80050d4:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <HAL_FLASH_IRQHandler+0x138>)
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	4a05      	ldr	r2, [pc, #20]	; (80050f0 <HAL_FLASH_IRQHandler+0x138>)
 80050da:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80050de:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80050e0:	4b04      	ldr	r3, [pc, #16]	; (80050f4 <HAL_FLASH_IRQHandler+0x13c>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	761a      	strb	r2, [r3, #24]
  }
}
 80050e6:	bf00      	nop
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40023c00 	.word	0x40023c00
 80050f4:	20000914 	.word	0x20000914

080050f8 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005124:	4b2f      	ldr	r3, [pc, #188]	; (80051e4 <FLASH_SetErrorCode+0xc4>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f003 0310 	and.w	r3, r3, #16
 800512c:	2b00      	cmp	r3, #0
 800512e:	d008      	beq.n	8005142 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005130:	4b2d      	ldr	r3, [pc, #180]	; (80051e8 <FLASH_SetErrorCode+0xc8>)
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	f043 0310 	orr.w	r3, r3, #16
 8005138:	4a2b      	ldr	r2, [pc, #172]	; (80051e8 <FLASH_SetErrorCode+0xc8>)
 800513a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800513c:	4b29      	ldr	r3, [pc, #164]	; (80051e4 <FLASH_SetErrorCode+0xc4>)
 800513e:	2210      	movs	r2, #16
 8005140:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005142:	4b28      	ldr	r3, [pc, #160]	; (80051e4 <FLASH_SetErrorCode+0xc4>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f003 0320 	and.w	r3, r3, #32
 800514a:	2b00      	cmp	r3, #0
 800514c:	d008      	beq.n	8005160 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800514e:	4b26      	ldr	r3, [pc, #152]	; (80051e8 <FLASH_SetErrorCode+0xc8>)
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	f043 0308 	orr.w	r3, r3, #8
 8005156:	4a24      	ldr	r2, [pc, #144]	; (80051e8 <FLASH_SetErrorCode+0xc8>)
 8005158:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800515a:	4b22      	ldr	r3, [pc, #136]	; (80051e4 <FLASH_SetErrorCode+0xc4>)
 800515c:	2220      	movs	r2, #32
 800515e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005160:	4b20      	ldr	r3, [pc, #128]	; (80051e4 <FLASH_SetErrorCode+0xc4>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005168:	2b00      	cmp	r3, #0
 800516a:	d008      	beq.n	800517e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800516c:	4b1e      	ldr	r3, [pc, #120]	; (80051e8 <FLASH_SetErrorCode+0xc8>)
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	f043 0304 	orr.w	r3, r3, #4
 8005174:	4a1c      	ldr	r2, [pc, #112]	; (80051e8 <FLASH_SetErrorCode+0xc8>)
 8005176:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005178:	4b1a      	ldr	r3, [pc, #104]	; (80051e4 <FLASH_SetErrorCode+0xc4>)
 800517a:	2240      	movs	r2, #64	; 0x40
 800517c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800517e:	4b19      	ldr	r3, [pc, #100]	; (80051e4 <FLASH_SetErrorCode+0xc4>)
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005186:	2b00      	cmp	r3, #0
 8005188:	d008      	beq.n	800519c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800518a:	4b17      	ldr	r3, [pc, #92]	; (80051e8 <FLASH_SetErrorCode+0xc8>)
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	f043 0302 	orr.w	r3, r3, #2
 8005192:	4a15      	ldr	r2, [pc, #84]	; (80051e8 <FLASH_SetErrorCode+0xc8>)
 8005194:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005196:	4b13      	ldr	r3, [pc, #76]	; (80051e4 <FLASH_SetErrorCode+0xc4>)
 8005198:	2280      	movs	r2, #128	; 0x80
 800519a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800519c:	4b11      	ldr	r3, [pc, #68]	; (80051e4 <FLASH_SetErrorCode+0xc4>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d009      	beq.n	80051bc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80051a8:	4b0f      	ldr	r3, [pc, #60]	; (80051e8 <FLASH_SetErrorCode+0xc8>)
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	f043 0301 	orr.w	r3, r3, #1
 80051b0:	4a0d      	ldr	r2, [pc, #52]	; (80051e8 <FLASH_SetErrorCode+0xc8>)
 80051b2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80051b4:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <FLASH_SetErrorCode+0xc4>)
 80051b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051ba:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80051bc:	4b09      	ldr	r3, [pc, #36]	; (80051e4 <FLASH_SetErrorCode+0xc4>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80051c8:	4b07      	ldr	r3, [pc, #28]	; (80051e8 <FLASH_SetErrorCode+0xc8>)
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	f043 0320 	orr.w	r3, r3, #32
 80051d0:	4a05      	ldr	r2, [pc, #20]	; (80051e8 <FLASH_SetErrorCode+0xc8>)
 80051d2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80051d4:	4b03      	ldr	r3, [pc, #12]	; (80051e4 <FLASH_SetErrorCode+0xc4>)
 80051d6:	2202      	movs	r2, #2
 80051d8:	60da      	str	r2, [r3, #12]
  }
}
 80051da:	bf00      	nop
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	40023c00 	.word	0x40023c00
 80051e8:	20000914 	.word	0x20000914

080051ec <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	460b      	mov	r3, r1
 80051f6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d019      	beq.n	8005236 <FLASH_Erase_Sector+0x4a>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d016      	beq.n	8005236 <FLASH_Erase_Sector+0x4a>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d013      	beq.n	8005236 <FLASH_Erase_Sector+0x4a>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b03      	cmp	r3, #3
 8005212:	d010      	beq.n	8005236 <FLASH_Erase_Sector+0x4a>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b04      	cmp	r3, #4
 8005218:	d00d      	beq.n	8005236 <FLASH_Erase_Sector+0x4a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b05      	cmp	r3, #5
 800521e:	d00a      	beq.n	8005236 <FLASH_Erase_Sector+0x4a>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b06      	cmp	r3, #6
 8005224:	d007      	beq.n	8005236 <FLASH_Erase_Sector+0x4a>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b07      	cmp	r3, #7
 800522a:	d004      	beq.n	8005236 <FLASH_Erase_Sector+0x4a>
 800522c:	f240 31d9 	movw	r1, #985	; 0x3d9
 8005230:	4827      	ldr	r0, [pc, #156]	; (80052d0 <FLASH_Erase_Sector+0xe4>)
 8005232:	f7fd fa18 	bl	8002666 <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8005236:	78fb      	ldrb	r3, [r7, #3]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00d      	beq.n	8005258 <FLASH_Erase_Sector+0x6c>
 800523c:	78fb      	ldrb	r3, [r7, #3]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d00a      	beq.n	8005258 <FLASH_Erase_Sector+0x6c>
 8005242:	78fb      	ldrb	r3, [r7, #3]
 8005244:	2b02      	cmp	r3, #2
 8005246:	d007      	beq.n	8005258 <FLASH_Erase_Sector+0x6c>
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	2b03      	cmp	r3, #3
 800524c:	d004      	beq.n	8005258 <FLASH_Erase_Sector+0x6c>
 800524e:	f240 31da 	movw	r1, #986	; 0x3da
 8005252:	481f      	ldr	r0, [pc, #124]	; (80052d0 <FLASH_Erase_Sector+0xe4>)
 8005254:	f7fd fa07 	bl	8002666 <assert_failed>

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005258:	78fb      	ldrb	r3, [r7, #3]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d102      	bne.n	8005264 <FLASH_Erase_Sector+0x78>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
 8005262:	e010      	b.n	8005286 <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005264:	78fb      	ldrb	r3, [r7, #3]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d103      	bne.n	8005272 <FLASH_Erase_Sector+0x86>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800526a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	e009      	b.n	8005286 <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005272:	78fb      	ldrb	r3, [r7, #3]
 8005274:	2b02      	cmp	r3, #2
 8005276:	d103      	bne.n	8005280 <FLASH_Erase_Sector+0x94>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005278:	f44f 7300 	mov.w	r3, #512	; 0x200
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	e002      	b.n	8005286 <FLASH_Erase_Sector+0x9a>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005280:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005284:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005286:	4b13      	ldr	r3, [pc, #76]	; (80052d4 <FLASH_Erase_Sector+0xe8>)
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	4a12      	ldr	r2, [pc, #72]	; (80052d4 <FLASH_Erase_Sector+0xe8>)
 800528c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005290:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005292:	4b10      	ldr	r3, [pc, #64]	; (80052d4 <FLASH_Erase_Sector+0xe8>)
 8005294:	691a      	ldr	r2, [r3, #16]
 8005296:	490f      	ldr	r1, [pc, #60]	; (80052d4 <FLASH_Erase_Sector+0xe8>)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800529e:	4b0d      	ldr	r3, [pc, #52]	; (80052d4 <FLASH_Erase_Sector+0xe8>)
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	4a0c      	ldr	r2, [pc, #48]	; (80052d4 <FLASH_Erase_Sector+0xe8>)
 80052a4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80052a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80052aa:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <FLASH_Erase_Sector+0xe8>)
 80052ac:	691a      	ldr	r2, [r3, #16]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	4313      	orrs	r3, r2
 80052b4:	4a07      	ldr	r2, [pc, #28]	; (80052d4 <FLASH_Erase_Sector+0xe8>)
 80052b6:	f043 0302 	orr.w	r3, r3, #2
 80052ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <FLASH_Erase_Sector+0xe8>)
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	4a04      	ldr	r2, [pc, #16]	; (80052d4 <FLASH_Erase_Sector+0xe8>)
 80052c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052c6:	6113      	str	r3, [r2, #16]
}
 80052c8:	bf00      	nop
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	0800f158 	.word	0x0800f158
 80052d4:	40023c00 	.word	0x40023c00

080052d8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80052dc:	4b20      	ldr	r3, [pc, #128]	; (8005360 <FLASH_FlushCaches+0x88>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d017      	beq.n	8005318 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80052e8:	4b1d      	ldr	r3, [pc, #116]	; (8005360 <FLASH_FlushCaches+0x88>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a1c      	ldr	r2, [pc, #112]	; (8005360 <FLASH_FlushCaches+0x88>)
 80052ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052f2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80052f4:	4b1a      	ldr	r3, [pc, #104]	; (8005360 <FLASH_FlushCaches+0x88>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a19      	ldr	r2, [pc, #100]	; (8005360 <FLASH_FlushCaches+0x88>)
 80052fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052fe:	6013      	str	r3, [r2, #0]
 8005300:	4b17      	ldr	r3, [pc, #92]	; (8005360 <FLASH_FlushCaches+0x88>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a16      	ldr	r2, [pc, #88]	; (8005360 <FLASH_FlushCaches+0x88>)
 8005306:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800530a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800530c:	4b14      	ldr	r3, [pc, #80]	; (8005360 <FLASH_FlushCaches+0x88>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a13      	ldr	r2, [pc, #76]	; (8005360 <FLASH_FlushCaches+0x88>)
 8005312:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005316:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005318:	4b11      	ldr	r3, [pc, #68]	; (8005360 <FLASH_FlushCaches+0x88>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005320:	2b00      	cmp	r3, #0
 8005322:	d017      	beq.n	8005354 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005324:	4b0e      	ldr	r3, [pc, #56]	; (8005360 <FLASH_FlushCaches+0x88>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a0d      	ldr	r2, [pc, #52]	; (8005360 <FLASH_FlushCaches+0x88>)
 800532a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800532e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005330:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <FLASH_FlushCaches+0x88>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a0a      	ldr	r2, [pc, #40]	; (8005360 <FLASH_FlushCaches+0x88>)
 8005336:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	4b08      	ldr	r3, [pc, #32]	; (8005360 <FLASH_FlushCaches+0x88>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a07      	ldr	r2, [pc, #28]	; (8005360 <FLASH_FlushCaches+0x88>)
 8005342:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005346:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005348:	4b05      	ldr	r3, [pc, #20]	; (8005360 <FLASH_FlushCaches+0x88>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a04      	ldr	r2, [pc, #16]	; (8005360 <FLASH_FlushCaches+0x88>)
 800534e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005352:	6013      	str	r3, [r2, #0]
  }
}
 8005354:	bf00      	nop
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40023c00 	.word	0x40023c00

08005364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800536e:	2300      	movs	r3, #0
 8005370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005372:	2300      	movs	r3, #0
 8005374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005376:	2300      	movs	r3, #0
 8005378:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a33      	ldr	r2, [pc, #204]	; (800544c <HAL_GPIO_Init+0xe8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d017      	beq.n	80053b2 <HAL_GPIO_Init+0x4e>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a32      	ldr	r2, [pc, #200]	; (8005450 <HAL_GPIO_Init+0xec>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d013      	beq.n	80053b2 <HAL_GPIO_Init+0x4e>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a31      	ldr	r2, [pc, #196]	; (8005454 <HAL_GPIO_Init+0xf0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00f      	beq.n	80053b2 <HAL_GPIO_Init+0x4e>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a30      	ldr	r2, [pc, #192]	; (8005458 <HAL_GPIO_Init+0xf4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00b      	beq.n	80053b2 <HAL_GPIO_Init+0x4e>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a2f      	ldr	r2, [pc, #188]	; (800545c <HAL_GPIO_Init+0xf8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d007      	beq.n	80053b2 <HAL_GPIO_Init+0x4e>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a2e      	ldr	r2, [pc, #184]	; (8005460 <HAL_GPIO_Init+0xfc>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d003      	beq.n	80053b2 <HAL_GPIO_Init+0x4e>
 80053aa:	21ac      	movs	r1, #172	; 0xac
 80053ac:	482d      	ldr	r0, [pc, #180]	; (8005464 <HAL_GPIO_Init+0x100>)
 80053ae:	f7fd f95a 	bl	8002666 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <HAL_GPIO_Init+0x64>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	0c1b      	lsrs	r3, r3, #16
 80053c2:	041b      	lsls	r3, r3, #16
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <HAL_GPIO_Init+0x6c>
 80053c8:	21ad      	movs	r1, #173	; 0xad
 80053ca:	4826      	ldr	r0, [pc, #152]	; (8005464 <HAL_GPIO_Init+0x100>)
 80053cc:	f7fd f94b 	bl	8002666 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d035      	beq.n	8005444 <HAL_GPIO_Init+0xe0>
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d031      	beq.n	8005444 <HAL_GPIO_Init+0xe0>
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2b11      	cmp	r3, #17
 80053e6:	d02d      	beq.n	8005444 <HAL_GPIO_Init+0xe0>
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d029      	beq.n	8005444 <HAL_GPIO_Init+0xe0>
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	2b12      	cmp	r3, #18
 80053f6:	d025      	beq.n	8005444 <HAL_GPIO_Init+0xe0>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8005400:	d020      	beq.n	8005444 <HAL_GPIO_Init+0xe0>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800540a:	d01b      	beq.n	8005444 <HAL_GPIO_Init+0xe0>
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8005414:	d016      	beq.n	8005444 <HAL_GPIO_Init+0xe0>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800541e:	d011      	beq.n	8005444 <HAL_GPIO_Init+0xe0>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8005428:	d00c      	beq.n	8005444 <HAL_GPIO_Init+0xe0>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8005432:	d007      	beq.n	8005444 <HAL_GPIO_Init+0xe0>
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2b03      	cmp	r3, #3
 800543a:	d003      	beq.n	8005444 <HAL_GPIO_Init+0xe0>
 800543c:	21ae      	movs	r1, #174	; 0xae
 800543e:	4809      	ldr	r0, [pc, #36]	; (8005464 <HAL_GPIO_Init+0x100>)
 8005440:	f7fd f911 	bl	8002666 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005444:	2300      	movs	r3, #0
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	e20c      	b.n	8005864 <HAL_GPIO_Init+0x500>
 800544a:	bf00      	nop
 800544c:	40020000 	.word	0x40020000
 8005450:	40020400 	.word	0x40020400
 8005454:	40020800 	.word	0x40020800
 8005458:	40020c00 	.word	0x40020c00
 800545c:	40021000 	.word	0x40021000
 8005460:	40021c00 	.word	0x40021c00
 8005464:	0800f1d0 	.word	0x0800f1d0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005468:	2201      	movs	r2, #1
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	fa02 f303 	lsl.w	r3, r2, r3
 8005470:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4013      	ands	r3, r2
 800547a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	429a      	cmp	r2, r3
 8005482:	f040 81ec 	bne.w	800585e <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	2b01      	cmp	r3, #1
 8005490:	d005      	beq.n	800549e <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800549a:	2b02      	cmp	r3, #2
 800549c:	d144      	bne.n	8005528 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00f      	beq.n	80054c6 <HAL_GPIO_Init+0x162>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d00b      	beq.n	80054c6 <HAL_GPIO_Init+0x162>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d007      	beq.n	80054c6 <HAL_GPIO_Init+0x162>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	2b03      	cmp	r3, #3
 80054bc:	d003      	beq.n	80054c6 <HAL_GPIO_Init+0x162>
 80054be:	21c0      	movs	r1, #192	; 0xc0
 80054c0:	4884      	ldr	r0, [pc, #528]	; (80056d4 <HAL_GPIO_Init+0x370>)
 80054c2:	f7fd f8d0 	bl	8002666 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	2203      	movs	r2, #3
 80054d2:	fa02 f303 	lsl.w	r3, r2, r3
 80054d6:	43db      	mvns	r3, r3
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	4013      	ands	r3, r2
 80054dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054fc:	2201      	movs	r2, #1
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	43db      	mvns	r3, r3
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	4013      	ands	r3, r2
 800550a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	091b      	lsrs	r3, r3, #4
 8005512:	f003 0201 	and.w	r2, r3, #1
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	fa02 f303 	lsl.w	r3, r2, r3
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	4313      	orrs	r3, r2
 8005520:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f003 0303 	and.w	r3, r3, #3
 8005530:	2b03      	cmp	r3, #3
 8005532:	d027      	beq.n	8005584 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00b      	beq.n	8005554 <HAL_GPIO_Init+0x1f0>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d007      	beq.n	8005554 <HAL_GPIO_Init+0x1f0>
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	2b02      	cmp	r3, #2
 800554a:	d003      	beq.n	8005554 <HAL_GPIO_Init+0x1f0>
 800554c:	21d1      	movs	r1, #209	; 0xd1
 800554e:	4861      	ldr	r0, [pc, #388]	; (80056d4 <HAL_GPIO_Init+0x370>)
 8005550:	f7fd f889 	bl	8002666 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	2203      	movs	r2, #3
 8005560:	fa02 f303 	lsl.w	r3, r2, r3
 8005564:	43db      	mvns	r3, r3
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	4013      	ands	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	4313      	orrs	r3, r2
 800557c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f003 0303 	and.w	r3, r3, #3
 800558c:	2b02      	cmp	r3, #2
 800558e:	f040 80a3 	bne.w	80056d8 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d077      	beq.n	800568a <HAL_GPIO_Init+0x326>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	2b09      	cmp	r3, #9
 80055a0:	d073      	beq.n	800568a <HAL_GPIO_Init+0x326>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d06f      	beq.n	800568a <HAL_GPIO_Init+0x326>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d06b      	beq.n	800568a <HAL_GPIO_Init+0x326>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d067      	beq.n	800568a <HAL_GPIO_Init+0x326>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d063      	beq.n	800568a <HAL_GPIO_Init+0x326>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d05f      	beq.n	800568a <HAL_GPIO_Init+0x326>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d05b      	beq.n	800568a <HAL_GPIO_Init+0x326>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d057      	beq.n	800568a <HAL_GPIO_Init+0x326>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d053      	beq.n	800568a <HAL_GPIO_Init+0x326>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d04f      	beq.n	800568a <HAL_GPIO_Init+0x326>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d04b      	beq.n	800568a <HAL_GPIO_Init+0x326>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d047      	beq.n	800568a <HAL_GPIO_Init+0x326>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d043      	beq.n	800568a <HAL_GPIO_Init+0x326>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	2b05      	cmp	r3, #5
 8005608:	d03f      	beq.n	800568a <HAL_GPIO_Init+0x326>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	2b05      	cmp	r3, #5
 8005610:	d03b      	beq.n	800568a <HAL_GPIO_Init+0x326>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	2b05      	cmp	r3, #5
 8005618:	d037      	beq.n	800568a <HAL_GPIO_Init+0x326>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	2b06      	cmp	r3, #6
 8005620:	d033      	beq.n	800568a <HAL_GPIO_Init+0x326>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	2b06      	cmp	r3, #6
 8005628:	d02f      	beq.n	800568a <HAL_GPIO_Init+0x326>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	2b05      	cmp	r3, #5
 8005630:	d02b      	beq.n	800568a <HAL_GPIO_Init+0x326>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	2b06      	cmp	r3, #6
 8005638:	d027      	beq.n	800568a <HAL_GPIO_Init+0x326>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	2b07      	cmp	r3, #7
 8005640:	d023      	beq.n	800568a <HAL_GPIO_Init+0x326>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	2b07      	cmp	r3, #7
 8005648:	d01f      	beq.n	800568a <HAL_GPIO_Init+0x326>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	2b07      	cmp	r3, #7
 8005650:	d01b      	beq.n	800568a <HAL_GPIO_Init+0x326>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	2b08      	cmp	r3, #8
 8005658:	d017      	beq.n	800568a <HAL_GPIO_Init+0x326>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	2b0a      	cmp	r3, #10
 8005660:	d013      	beq.n	800568a <HAL_GPIO_Init+0x326>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	2b09      	cmp	r3, #9
 8005668:	d00f      	beq.n	800568a <HAL_GPIO_Init+0x326>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b09      	cmp	r3, #9
 8005670:	d00b      	beq.n	800568a <HAL_GPIO_Init+0x326>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	2b0c      	cmp	r3, #12
 8005678:	d007      	beq.n	800568a <HAL_GPIO_Init+0x326>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	2b0f      	cmp	r3, #15
 8005680:	d003      	beq.n	800568a <HAL_GPIO_Init+0x326>
 8005682:	21de      	movs	r1, #222	; 0xde
 8005684:	4813      	ldr	r0, [pc, #76]	; (80056d4 <HAL_GPIO_Init+0x370>)
 8005686:	f7fc ffee 	bl	8002666 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	08da      	lsrs	r2, r3, #3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3208      	adds	r2, #8
 8005692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	220f      	movs	r2, #15
 80056a2:	fa02 f303 	lsl.w	r3, r2, r3
 80056a6:	43db      	mvns	r3, r3
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	4013      	ands	r3, r2
 80056ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	691a      	ldr	r2, [r3, #16]
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	fa02 f303 	lsl.w	r3, r2, r3
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	08da      	lsrs	r2, r3, #3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3208      	adds	r2, #8
 80056cc:	69b9      	ldr	r1, [r7, #24]
 80056ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80056d2:	e001      	b.n	80056d8 <HAL_GPIO_Init+0x374>
 80056d4:	0800f1d0 	.word	0x0800f1d0
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	2203      	movs	r2, #3
 80056e4:	fa02 f303 	lsl.w	r3, r2, r3
 80056e8:	43db      	mvns	r3, r3
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	4013      	ands	r3, r2
 80056ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f003 0203 	and.w	r2, r3, #3
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	005b      	lsls	r3, r3, #1
 80056fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	4313      	orrs	r3, r2
 8005704:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 80a2 	beq.w	800585e <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800571a:	2300      	movs	r3, #0
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	4b56      	ldr	r3, [pc, #344]	; (8005878 <HAL_GPIO_Init+0x514>)
 8005720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005722:	4a55      	ldr	r2, [pc, #340]	; (8005878 <HAL_GPIO_Init+0x514>)
 8005724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005728:	6453      	str	r3, [r2, #68]	; 0x44
 800572a:	4b53      	ldr	r3, [pc, #332]	; (8005878 <HAL_GPIO_Init+0x514>)
 800572c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005736:	4a51      	ldr	r2, [pc, #324]	; (800587c <HAL_GPIO_Init+0x518>)
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	089b      	lsrs	r3, r3, #2
 800573c:	3302      	adds	r3, #2
 800573e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	f003 0303 	and.w	r3, r3, #3
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	220f      	movs	r2, #15
 800574e:	fa02 f303 	lsl.w	r3, r2, r3
 8005752:	43db      	mvns	r3, r3
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	4013      	ands	r3, r2
 8005758:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a48      	ldr	r2, [pc, #288]	; (8005880 <HAL_GPIO_Init+0x51c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d019      	beq.n	8005796 <HAL_GPIO_Init+0x432>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a47      	ldr	r2, [pc, #284]	; (8005884 <HAL_GPIO_Init+0x520>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d013      	beq.n	8005792 <HAL_GPIO_Init+0x42e>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a46      	ldr	r2, [pc, #280]	; (8005888 <HAL_GPIO_Init+0x524>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00d      	beq.n	800578e <HAL_GPIO_Init+0x42a>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a45      	ldr	r2, [pc, #276]	; (800588c <HAL_GPIO_Init+0x528>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d007      	beq.n	800578a <HAL_GPIO_Init+0x426>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a44      	ldr	r2, [pc, #272]	; (8005890 <HAL_GPIO_Init+0x52c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d101      	bne.n	8005786 <HAL_GPIO_Init+0x422>
 8005782:	2304      	movs	r3, #4
 8005784:	e008      	b.n	8005798 <HAL_GPIO_Init+0x434>
 8005786:	2307      	movs	r3, #7
 8005788:	e006      	b.n	8005798 <HAL_GPIO_Init+0x434>
 800578a:	2303      	movs	r3, #3
 800578c:	e004      	b.n	8005798 <HAL_GPIO_Init+0x434>
 800578e:	2302      	movs	r3, #2
 8005790:	e002      	b.n	8005798 <HAL_GPIO_Init+0x434>
 8005792:	2301      	movs	r3, #1
 8005794:	e000      	b.n	8005798 <HAL_GPIO_Init+0x434>
 8005796:	2300      	movs	r3, #0
 8005798:	69fa      	ldr	r2, [r7, #28]
 800579a:	f002 0203 	and.w	r2, r2, #3
 800579e:	0092      	lsls	r2, r2, #2
 80057a0:	4093      	lsls	r3, r2
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057a8:	4934      	ldr	r1, [pc, #208]	; (800587c <HAL_GPIO_Init+0x518>)
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	089b      	lsrs	r3, r3, #2
 80057ae:	3302      	adds	r3, #2
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057b6:	4b37      	ldr	r3, [pc, #220]	; (8005894 <HAL_GPIO_Init+0x530>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	43db      	mvns	r3, r3
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	4013      	ands	r3, r2
 80057c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057da:	4a2e      	ldr	r2, [pc, #184]	; (8005894 <HAL_GPIO_Init+0x530>)
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057e0:	4b2c      	ldr	r3, [pc, #176]	; (8005894 <HAL_GPIO_Init+0x530>)
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	43db      	mvns	r3, r3
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	4013      	ands	r3, r2
 80057ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	4313      	orrs	r3, r2
 8005802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005804:	4a23      	ldr	r2, [pc, #140]	; (8005894 <HAL_GPIO_Init+0x530>)
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800580a:	4b22      	ldr	r3, [pc, #136]	; (8005894 <HAL_GPIO_Init+0x530>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	43db      	mvns	r3, r3
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	4013      	ands	r3, r2
 8005818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800582e:	4a19      	ldr	r2, [pc, #100]	; (8005894 <HAL_GPIO_Init+0x530>)
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005834:	4b17      	ldr	r3, [pc, #92]	; (8005894 <HAL_GPIO_Init+0x530>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	43db      	mvns	r3, r3
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	4013      	ands	r3, r2
 8005842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	4313      	orrs	r3, r2
 8005856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005858:	4a0e      	ldr	r2, [pc, #56]	; (8005894 <HAL_GPIO_Init+0x530>)
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	3301      	adds	r3, #1
 8005862:	61fb      	str	r3, [r7, #28]
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	2b0f      	cmp	r3, #15
 8005868:	f67f adfe 	bls.w	8005468 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 800586c:	bf00      	nop
 800586e:	bf00      	nop
 8005870:	3720      	adds	r7, #32
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	40023800 	.word	0x40023800
 800587c:	40013800 	.word	0x40013800
 8005880:	40020000 	.word	0x40020000
 8005884:	40020400 	.word	0x40020400
 8005888:	40020800 	.word	0x40020800
 800588c:	40020c00 	.word	0x40020c00
 8005890:	40021000 	.word	0x40021000
 8005894:	40013c00 	.word	0x40013c00

08005898 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80058a4:	887b      	ldrh	r3, [r7, #2]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d004      	beq.n	80058b4 <HAL_GPIO_ReadPin+0x1c>
 80058aa:	887b      	ldrh	r3, [r7, #2]
 80058ac:	0c1b      	lsrs	r3, r3, #16
 80058ae:	041b      	lsls	r3, r3, #16
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d004      	beq.n	80058be <HAL_GPIO_ReadPin+0x26>
 80058b4:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80058b8:	4809      	ldr	r0, [pc, #36]	; (80058e0 <HAL_GPIO_ReadPin+0x48>)
 80058ba:	f7fc fed4 	bl	8002666 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691a      	ldr	r2, [r3, #16]
 80058c2:	887b      	ldrh	r3, [r7, #2]
 80058c4:	4013      	ands	r3, r2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 80058ca:	2301      	movs	r3, #1
 80058cc:	73fb      	strb	r3, [r7, #15]
 80058ce:	e001      	b.n	80058d4 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058d0:	2300      	movs	r3, #0
 80058d2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	0800f1d0 	.word	0x0800f1d0

080058e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	807b      	strh	r3, [r7, #2]
 80058f0:	4613      	mov	r3, r2
 80058f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80058f4:	887b      	ldrh	r3, [r7, #2]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d004      	beq.n	8005904 <HAL_GPIO_WritePin+0x20>
 80058fa:	887b      	ldrh	r3, [r7, #2]
 80058fc:	0c1b      	lsrs	r3, r3, #16
 80058fe:	041b      	lsls	r3, r3, #16
 8005900:	2b00      	cmp	r3, #0
 8005902:	d004      	beq.n	800590e <HAL_GPIO_WritePin+0x2a>
 8005904:	f240 119d 	movw	r1, #413	; 0x19d
 8005908:	480e      	ldr	r0, [pc, #56]	; (8005944 <HAL_GPIO_WritePin+0x60>)
 800590a:	f7fc feac 	bl	8002666 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800590e:	787b      	ldrb	r3, [r7, #1]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d007      	beq.n	8005924 <HAL_GPIO_WritePin+0x40>
 8005914:	787b      	ldrb	r3, [r7, #1]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d004      	beq.n	8005924 <HAL_GPIO_WritePin+0x40>
 800591a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800591e:	4809      	ldr	r0, [pc, #36]	; (8005944 <HAL_GPIO_WritePin+0x60>)
 8005920:	f7fc fea1 	bl	8002666 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8005924:	787b      	ldrb	r3, [r7, #1]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800592a:	887a      	ldrh	r2, [r7, #2]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005930:	e003      	b.n	800593a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005932:	887b      	ldrh	r3, [r7, #2]
 8005934:	041a      	lsls	r2, r3, #16
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	619a      	str	r2, [r3, #24]
}
 800593a:	bf00      	nop
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	0800f1d0 	.word	0x0800f1d0

08005948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e1f7      	b.n	8005d4a <HAL_I2C_Init+0x402>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a81      	ldr	r2, [pc, #516]	; (8005b64 <HAL_I2C_Init+0x21c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00e      	beq.n	8005982 <HAL_I2C_Init+0x3a>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a7f      	ldr	r2, [pc, #508]	; (8005b68 <HAL_I2C_Init+0x220>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d009      	beq.n	8005982 <HAL_I2C_Init+0x3a>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a7e      	ldr	r2, [pc, #504]	; (8005b6c <HAL_I2C_Init+0x224>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d004      	beq.n	8005982 <HAL_I2C_Init+0x3a>
 8005978:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800597c:	487c      	ldr	r0, [pc, #496]	; (8005b70 <HAL_I2C_Init+0x228>)
 800597e:	f7fc fe72 	bl	8002666 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d004      	beq.n	8005994 <HAL_I2C_Init+0x4c>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	4a79      	ldr	r2, [pc, #484]	; (8005b74 <HAL_I2C_Init+0x22c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d904      	bls.n	800599e <HAL_I2C_Init+0x56>
 8005994:	f240 11bf 	movw	r1, #447	; 0x1bf
 8005998:	4875      	ldr	r0, [pc, #468]	; (8005b70 <HAL_I2C_Init+0x228>)
 800599a:	f7fc fe64 	bl	8002666 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d009      	beq.n	80059ba <HAL_I2C_Init+0x72>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059ae:	d004      	beq.n	80059ba <HAL_I2C_Init+0x72>
 80059b0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80059b4:	486e      	ldr	r0, [pc, #440]	; (8005b70 <HAL_I2C_Init+0x228>)
 80059b6:	f7fc fe56 	bl	8002666 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80059c2:	f023 0303 	bic.w	r3, r3, #3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d004      	beq.n	80059d4 <HAL_I2C_Init+0x8c>
 80059ca:	f240 11c1 	movw	r1, #449	; 0x1c1
 80059ce:	4868      	ldr	r0, [pc, #416]	; (8005b70 <HAL_I2C_Init+0x228>)
 80059d0:	f7fc fe49 	bl	8002666 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059dc:	d009      	beq.n	80059f2 <HAL_I2C_Init+0xaa>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80059e6:	d004      	beq.n	80059f2 <HAL_I2C_Init+0xaa>
 80059e8:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80059ec:	4860      	ldr	r0, [pc, #384]	; (8005b70 <HAL_I2C_Init+0x228>)
 80059ee:	f7fc fe3a 	bl	8002666 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d008      	beq.n	8005a0c <HAL_I2C_Init+0xc4>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d004      	beq.n	8005a0c <HAL_I2C_Init+0xc4>
 8005a02:	f240 11c3 	movw	r1, #451	; 0x1c3
 8005a06:	485a      	ldr	r0, [pc, #360]	; (8005b70 <HAL_I2C_Init+0x228>)
 8005a08:	f7fc fe2d 	bl	8002666 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d004      	beq.n	8005a22 <HAL_I2C_Init+0xda>
 8005a18:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8005a1c:	4854      	ldr	r0, [pc, #336]	; (8005b70 <HAL_I2C_Init+0x228>)
 8005a1e:	f7fc fe22 	bl	8002666 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d008      	beq.n	8005a3c <HAL_I2C_Init+0xf4>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	2b40      	cmp	r3, #64	; 0x40
 8005a30:	d004      	beq.n	8005a3c <HAL_I2C_Init+0xf4>
 8005a32:	f240 11c5 	movw	r1, #453	; 0x1c5
 8005a36:	484e      	ldr	r0, [pc, #312]	; (8005b70 <HAL_I2C_Init+0x228>)
 8005a38:	f7fc fe15 	bl	8002666 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d008      	beq.n	8005a56 <HAL_I2C_Init+0x10e>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	2b80      	cmp	r3, #128	; 0x80
 8005a4a:	d004      	beq.n	8005a56 <HAL_I2C_Init+0x10e>
 8005a4c:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8005a50:	4847      	ldr	r0, [pc, #284]	; (8005b70 <HAL_I2C_Init+0x228>)
 8005a52:	f7fc fe08 	bl	8002666 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d12c      	bne.n	8005abc <HAL_I2C_Init+0x174>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a42      	ldr	r2, [pc, #264]	; (8005b78 <HAL_I2C_Init+0x230>)
 8005a6e:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a42      	ldr	r2, [pc, #264]	; (8005b7c <HAL_I2C_Init+0x234>)
 8005a74:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a41      	ldr	r2, [pc, #260]	; (8005b80 <HAL_I2C_Init+0x238>)
 8005a7a:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a41      	ldr	r2, [pc, #260]	; (8005b84 <HAL_I2C_Init+0x23c>)
 8005a80:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a40      	ldr	r2, [pc, #256]	; (8005b88 <HAL_I2C_Init+0x240>)
 8005a86:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a40      	ldr	r2, [pc, #256]	; (8005b8c <HAL_I2C_Init+0x244>)
 8005a8c:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a3f      	ldr	r2, [pc, #252]	; (8005b90 <HAL_I2C_Init+0x248>)
 8005a92:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a3f      	ldr	r2, [pc, #252]	; (8005b94 <HAL_I2C_Init+0x24c>)
 8005a98:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a3e      	ldr	r2, [pc, #248]	; (8005b98 <HAL_I2C_Init+0x250>)
 8005a9e:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a3e      	ldr	r2, [pc, #248]	; (8005b9c <HAL_I2C_Init+0x254>)
 8005aa4:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d102      	bne.n	8005ab4 <HAL_I2C_Init+0x16c>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a3b      	ldr	r2, [pc, #236]	; (8005ba0 <HAL_I2C_Init+0x258>)
 8005ab2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2224      	movs	r2, #36	; 0x24
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0201 	bic.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ae2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005af2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005af4:	f002 fc0a 	bl	800830c <HAL_RCC_GetPCLK1Freq>
 8005af8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	4a29      	ldr	r2, [pc, #164]	; (8005ba4 <HAL_I2C_Init+0x25c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d807      	bhi.n	8005b14 <HAL_I2C_Init+0x1cc>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4a28      	ldr	r2, [pc, #160]	; (8005ba8 <HAL_I2C_Init+0x260>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	bf94      	ite	ls
 8005b0c:	2301      	movls	r3, #1
 8005b0e:	2300      	movhi	r3, #0
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	e006      	b.n	8005b22 <HAL_I2C_Init+0x1da>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4a25      	ldr	r2, [pc, #148]	; (8005bac <HAL_I2C_Init+0x264>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	bf94      	ite	ls
 8005b1c:	2301      	movls	r3, #1
 8005b1e:	2300      	movhi	r3, #0
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <HAL_I2C_Init+0x1e2>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e10f      	b.n	8005d4a <HAL_I2C_Init+0x402>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4a20      	ldr	r2, [pc, #128]	; (8005bb0 <HAL_I2C_Init+0x268>)
 8005b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b32:	0c9b      	lsrs	r3, r3, #18
 8005b34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	4a12      	ldr	r2, [pc, #72]	; (8005ba4 <HAL_I2C_Init+0x25c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d82a      	bhi.n	8005bb4 <HAL_I2C_Init+0x26c>
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	3301      	adds	r3, #1
 8005b62:	e031      	b.n	8005bc8 <HAL_I2C_Init+0x280>
 8005b64:	40005400 	.word	0x40005400
 8005b68:	40005800 	.word	0x40005800
 8005b6c:	40005c00 	.word	0x40005c00
 8005b70:	0800f244 	.word	0x0800f244
 8005b74:	00061a80 	.word	0x00061a80
 8005b78:	0800618d 	.word	0x0800618d
 8005b7c:	080061a1 	.word	0x080061a1
 8005b80:	080061b5 	.word	0x080061b5
 8005b84:	080061c9 	.word	0x080061c9
 8005b88:	080061f9 	.word	0x080061f9
 8005b8c:	0800620d 	.word	0x0800620d
 8005b90:	08006221 	.word	0x08006221
 8005b94:	08006235 	.word	0x08006235
 8005b98:	08006249 	.word	0x08006249
 8005b9c:	080061dd 	.word	0x080061dd
 8005ba0:	08002359 	.word	0x08002359
 8005ba4:	000186a0 	.word	0x000186a0
 8005ba8:	001e847f 	.word	0x001e847f
 8005bac:	003d08ff 	.word	0x003d08ff
 8005bb0:	431bde83 	.word	0x431bde83
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005bba:	fb02 f303 	mul.w	r3, r2, r3
 8005bbe:	4a65      	ldr	r2, [pc, #404]	; (8005d54 <HAL_I2C_Init+0x40c>)
 8005bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc4:	099b      	lsrs	r3, r3, #6
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6812      	ldr	r2, [r2, #0]
 8005bcc:	430b      	orrs	r3, r1
 8005bce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005bda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	495d      	ldr	r1, [pc, #372]	; (8005d58 <HAL_I2C_Init+0x410>)
 8005be4:	428b      	cmp	r3, r1
 8005be6:	d819      	bhi.n	8005c1c <HAL_I2C_Init+0x2d4>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	1e59      	subs	r1, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bf6:	1c59      	adds	r1, r3, #1
 8005bf8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005bfc:	400b      	ands	r3, r1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00a      	beq.n	8005c18 <HAL_I2C_Init+0x2d0>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	1e59      	subs	r1, r3, #1
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c10:	3301      	adds	r3, #1
 8005c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c16:	e051      	b.n	8005cbc <HAL_I2C_Init+0x374>
 8005c18:	2304      	movs	r3, #4
 8005c1a:	e04f      	b.n	8005cbc <HAL_I2C_Init+0x374>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d111      	bne.n	8005c48 <HAL_I2C_Init+0x300>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	1e58      	subs	r0, r3, #1
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6859      	ldr	r1, [r3, #4]
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	440b      	add	r3, r1
 8005c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c36:	3301      	adds	r3, #1
 8005c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	bf0c      	ite	eq
 8005c40:	2301      	moveq	r3, #1
 8005c42:	2300      	movne	r3, #0
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	e012      	b.n	8005c6e <HAL_I2C_Init+0x326>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	1e58      	subs	r0, r3, #1
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6859      	ldr	r1, [r3, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	440b      	add	r3, r1
 8005c56:	0099      	lsls	r1, r3, #2
 8005c58:	440b      	add	r3, r1
 8005c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c5e:	3301      	adds	r3, #1
 8005c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	bf0c      	ite	eq
 8005c68:	2301      	moveq	r3, #1
 8005c6a:	2300      	movne	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <HAL_I2C_Init+0x32e>
 8005c72:	2301      	movs	r3, #1
 8005c74:	e022      	b.n	8005cbc <HAL_I2C_Init+0x374>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10e      	bne.n	8005c9c <HAL_I2C_Init+0x354>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	1e58      	subs	r0, r3, #1
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6859      	ldr	r1, [r3, #4]
 8005c86:	460b      	mov	r3, r1
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	440b      	add	r3, r1
 8005c8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c90:	3301      	adds	r3, #1
 8005c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c9a:	e00f      	b.n	8005cbc <HAL_I2C_Init+0x374>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	1e58      	subs	r0, r3, #1
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6859      	ldr	r1, [r3, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	440b      	add	r3, r1
 8005caa:	0099      	lsls	r1, r3, #2
 8005cac:	440b      	add	r3, r1
 8005cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cbc:	6879      	ldr	r1, [r7, #4]
 8005cbe:	6809      	ldr	r1, [r1, #0]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	69da      	ldr	r2, [r3, #28]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005cea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	6911      	ldr	r1, [r2, #16]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	68d2      	ldr	r2, [r2, #12]
 8005cf6:	4311      	orrs	r1, r2
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6812      	ldr	r2, [r2, #0]
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	695a      	ldr	r2, [r3, #20]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0201 	orr.w	r2, r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	10624dd3 	.word	0x10624dd3
 8005d58:	000186a0 	.word	0x000186a0

08005d5c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d74:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d7c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d84:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
 8005d88:	2b10      	cmp	r3, #16
 8005d8a:	d003      	beq.n	8005d94 <HAL_I2C_EV_IRQHandler+0x38>
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
 8005d8e:	2b40      	cmp	r3, #64	; 0x40
 8005d90:	f040 80c1 	bne.w	8005f16 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10d      	bne.n	8005dca <HAL_I2C_EV_IRQHandler+0x6e>
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005db4:	d003      	beq.n	8005dbe <HAL_I2C_EV_IRQHandler+0x62>
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005dbc:	d101      	bne.n	8005dc2 <HAL_I2C_EV_IRQHandler+0x66>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e000      	b.n	8005dc4 <HAL_I2C_EV_IRQHandler+0x68>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	f000 8132 	beq.w	800602e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00c      	beq.n	8005dee <HAL_I2C_EV_IRQHandler+0x92>
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	0a5b      	lsrs	r3, r3, #9
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d006      	beq.n	8005dee <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f001 fc95 	bl	8007710 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fd8f 	bl	800690a <I2C_Master_SB>
 8005dec:	e092      	b.n	8005f14 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	08db      	lsrs	r3, r3, #3
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d009      	beq.n	8005e0e <HAL_I2C_EV_IRQHandler+0xb2>
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	0a5b      	lsrs	r3, r3, #9
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fe05 	bl	8006a16 <I2C_Master_ADD10>
 8005e0c:	e082      	b.n	8005f14 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	085b      	lsrs	r3, r3, #1
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d009      	beq.n	8005e2e <HAL_I2C_EV_IRQHandler+0xd2>
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	0a5b      	lsrs	r3, r3, #9
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fe1f 	bl	8006a6a <I2C_Master_ADDR>
 8005e2c:	e072      	b.n	8005f14 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	089b      	lsrs	r3, r3, #2
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d03b      	beq.n	8005eb2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e48:	f000 80f3 	beq.w	8006032 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	09db      	lsrs	r3, r3, #7
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00f      	beq.n	8005e78 <HAL_I2C_EV_IRQHandler+0x11c>
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	0a9b      	lsrs	r3, r3, #10
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d009      	beq.n	8005e78 <HAL_I2C_EV_IRQHandler+0x11c>
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	089b      	lsrs	r3, r3, #2
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d103      	bne.n	8005e78 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f9f3 	bl	800625c <I2C_MasterTransmit_TXE>
 8005e76:	e04d      	b.n	8005f14 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	089b      	lsrs	r3, r3, #2
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 80d6 	beq.w	8006032 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	0a5b      	lsrs	r3, r3, #9
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f000 80cf 	beq.w	8006032 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005e94:	7bbb      	ldrb	r3, [r7, #14]
 8005e96:	2b21      	cmp	r3, #33	; 0x21
 8005e98:	d103      	bne.n	8005ea2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fa7d 	bl	800639a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ea0:	e0c7      	b.n	8006032 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	2b40      	cmp	r3, #64	; 0x40
 8005ea6:	f040 80c4 	bne.w	8006032 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 faee 	bl	800648c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005eb0:	e0bf      	b.n	8006032 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ec0:	f000 80b7 	beq.w	8006032 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	099b      	lsrs	r3, r3, #6
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00f      	beq.n	8005ef0 <HAL_I2C_EV_IRQHandler+0x194>
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	0a9b      	lsrs	r3, r3, #10
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d009      	beq.n	8005ef0 <HAL_I2C_EV_IRQHandler+0x194>
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	089b      	lsrs	r3, r3, #2
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d103      	bne.n	8005ef0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fb64 	bl	80065b6 <I2C_MasterReceive_RXNE>
 8005eee:	e011      	b.n	8005f14 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	089b      	lsrs	r3, r3, #2
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 809a 	beq.w	8006032 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	0a5b      	lsrs	r3, r3, #9
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 8093 	beq.w	8006032 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fc10 	bl	8006732 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f12:	e08e      	b.n	8006032 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005f14:	e08d      	b.n	8006032 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d004      	beq.n	8005f28 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	61fb      	str	r3, [r7, #28]
 8005f26:	e007      	b.n	8005f38 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	085b      	lsrs	r3, r3, #1
 8005f3c:	f003 0301 	and.w	r3, r3, #1
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d012      	beq.n	8005f6a <HAL_I2C_EV_IRQHandler+0x20e>
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	0a5b      	lsrs	r3, r3, #9
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00c      	beq.n	8005f6a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005f60:	69b9      	ldr	r1, [r7, #24]
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 ffd2 	bl	8006f0c <I2C_Slave_ADDR>
 8005f68:	e066      	b.n	8006038 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	091b      	lsrs	r3, r3, #4
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d009      	beq.n	8005f8a <HAL_I2C_EV_IRQHandler+0x22e>
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	0a5b      	lsrs	r3, r3, #9
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f001 f80c 	bl	8006fa0 <I2C_Slave_STOPF>
 8005f88:	e056      	b.n	8006038 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005f8a:	7bbb      	ldrb	r3, [r7, #14]
 8005f8c:	2b21      	cmp	r3, #33	; 0x21
 8005f8e:	d002      	beq.n	8005f96 <HAL_I2C_EV_IRQHandler+0x23a>
 8005f90:	7bbb      	ldrb	r3, [r7, #14]
 8005f92:	2b29      	cmp	r3, #41	; 0x29
 8005f94:	d125      	bne.n	8005fe2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	09db      	lsrs	r3, r3, #7
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00f      	beq.n	8005fc2 <HAL_I2C_EV_IRQHandler+0x266>
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	0a9b      	lsrs	r3, r3, #10
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d009      	beq.n	8005fc2 <HAL_I2C_EV_IRQHandler+0x266>
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	089b      	lsrs	r3, r3, #2
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d103      	bne.n	8005fc2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fee6 	bl	8006d8c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005fc0:	e039      	b.n	8006036 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	089b      	lsrs	r3, r3, #2
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d033      	beq.n	8006036 <HAL_I2C_EV_IRQHandler+0x2da>
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	0a5b      	lsrs	r3, r3, #9
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d02d      	beq.n	8006036 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 ff14 	bl	8006e08 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005fe0:	e029      	b.n	8006036 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	099b      	lsrs	r3, r3, #6
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00f      	beq.n	800600e <HAL_I2C_EV_IRQHandler+0x2b2>
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	0a9b      	lsrs	r3, r3, #10
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d009      	beq.n	800600e <HAL_I2C_EV_IRQHandler+0x2b2>
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	089b      	lsrs	r3, r3, #2
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d103      	bne.n	800600e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 ff1f 	bl	8006e4a <I2C_SlaveReceive_RXNE>
 800600c:	e014      	b.n	8006038 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	089b      	lsrs	r3, r3, #2
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00e      	beq.n	8006038 <HAL_I2C_EV_IRQHandler+0x2dc>
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	0a5b      	lsrs	r3, r3, #9
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b00      	cmp	r3, #0
 8006024:	d008      	beq.n	8006038 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 ff4e 	bl	8006ec8 <I2C_SlaveReceive_BTF>
 800602c:	e004      	b.n	8006038 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800602e:	bf00      	nop
 8006030:	e002      	b.n	8006038 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006032:	bf00      	nop
 8006034:	e000      	b.n	8006038 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006036:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006038:	3720      	adds	r7, #32
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b08a      	sub	sp, #40	; 0x28
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006056:	2300      	movs	r3, #0
 8006058:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006060:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	0a1b      	lsrs	r3, r3, #8
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00e      	beq.n	800608c <HAL_I2C_ER_IRQHandler+0x4e>
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	0a1b      	lsrs	r3, r3, #8
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b00      	cmp	r3, #0
 8006078:	d008      	beq.n	800608c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	f043 0301 	orr.w	r3, r3, #1
 8006080:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800608a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	0a5b      	lsrs	r3, r3, #9
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00e      	beq.n	80060b6 <HAL_I2C_ER_IRQHandler+0x78>
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	0a1b      	lsrs	r3, r3, #8
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d008      	beq.n	80060b6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	f043 0302 	orr.w	r3, r3, #2
 80060aa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80060b4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	0a9b      	lsrs	r3, r3, #10
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d03f      	beq.n	8006142 <HAL_I2C_ER_IRQHandler+0x104>
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	0a1b      	lsrs	r3, r3, #8
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d039      	beq.n	8006142 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80060ce:	7efb      	ldrb	r3, [r7, #27]
 80060d0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80060e8:	7ebb      	ldrb	r3, [r7, #26]
 80060ea:	2b20      	cmp	r3, #32
 80060ec:	d112      	bne.n	8006114 <HAL_I2C_ER_IRQHandler+0xd6>
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10f      	bne.n	8006114 <HAL_I2C_ER_IRQHandler+0xd6>
 80060f4:	7cfb      	ldrb	r3, [r7, #19]
 80060f6:	2b21      	cmp	r3, #33	; 0x21
 80060f8:	d008      	beq.n	800610c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80060fa:	7cfb      	ldrb	r3, [r7, #19]
 80060fc:	2b29      	cmp	r3, #41	; 0x29
 80060fe:	d005      	beq.n	800610c <HAL_I2C_ER_IRQHandler+0xce>
 8006100:	7cfb      	ldrb	r3, [r7, #19]
 8006102:	2b28      	cmp	r3, #40	; 0x28
 8006104:	d106      	bne.n	8006114 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2b21      	cmp	r3, #33	; 0x21
 800610a:	d103      	bne.n	8006114 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f001 f87b 	bl	8007208 <I2C_Slave_AF>
 8006112:	e016      	b.n	8006142 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800611c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	f043 0304 	orr.w	r3, r3, #4
 8006124:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006126:	7efb      	ldrb	r3, [r7, #27]
 8006128:	2b10      	cmp	r3, #16
 800612a:	d002      	beq.n	8006132 <HAL_I2C_ER_IRQHandler+0xf4>
 800612c:	7efb      	ldrb	r3, [r7, #27]
 800612e:	2b40      	cmp	r3, #64	; 0x40
 8006130:	d107      	bne.n	8006142 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006140:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	0adb      	lsrs	r3, r3, #11
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00e      	beq.n	800616c <HAL_I2C_ER_IRQHandler+0x12e>
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	0a1b      	lsrs	r3, r3, #8
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	d008      	beq.n	800616c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	f043 0308 	orr.w	r3, r3, #8
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800616a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	2b00      	cmp	r3, #0
 8006170:	d008      	beq.n	8006184 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	431a      	orrs	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f001 f8b4 	bl	80072ec <I2C_ITError>
  }
}
 8006184:	bf00      	nop
 8006186:	3728      	adds	r7, #40	; 0x28
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	460b      	mov	r3, r1
 80061e6:	70fb      	strb	r3, [r7, #3]
 80061e8:	4613      	mov	r3, r2
 80061ea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800626a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006272:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006278:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800627e:	2b00      	cmp	r3, #0
 8006280:	d153      	bne.n	800632a <I2C_MasterTransmit_TXE+0xce>
 8006282:	7bfb      	ldrb	r3, [r7, #15]
 8006284:	2b21      	cmp	r3, #33	; 0x21
 8006286:	d150      	bne.n	800632a <I2C_MasterTransmit_TXE+0xce>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2b08      	cmp	r3, #8
 800628c:	d01e      	beq.n	80062cc <I2C_MasterTransmit_TXE+0x70>
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2b20      	cmp	r3, #32
 8006292:	d01b      	beq.n	80062cc <I2C_MasterTransmit_TXE+0x70>
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800629a:	d017      	beq.n	80062cc <I2C_MasterTransmit_TXE+0x70>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062aa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2211      	movs	r2, #17
 80062b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2220      	movs	r2, #32
 80062be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80062ca:	e062      	b.n	8006392 <I2C_MasterTransmit_TXE+0x136>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062da:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ea:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2220      	movs	r2, #32
 80062f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b40      	cmp	r3, #64	; 0x40
 8006304:	d108      	bne.n	8006318 <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006316:	e03c      	b.n	8006392 <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MemTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006328:	e033      	b.n	8006392 <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MasterTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800632a:	7bfb      	ldrb	r3, [r7, #15]
 800632c:	2b21      	cmp	r3, #33	; 0x21
 800632e:	d005      	beq.n	800633c <I2C_MasterTransmit_TXE+0xe0>
 8006330:	7bbb      	ldrb	r3, [r7, #14]
 8006332:	2b40      	cmp	r3, #64	; 0x40
 8006334:	d12d      	bne.n	8006392 <I2C_MasterTransmit_TXE+0x136>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	2b22      	cmp	r3, #34	; 0x22
 800633a:	d12a      	bne.n	8006392 <I2C_MasterTransmit_TXE+0x136>
  {
    if (hi2c->XferCount == 0U)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006340:	b29b      	uxth	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d108      	bne.n	8006358 <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006354:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006356:	e01c      	b.n	8006392 <I2C_MasterTransmit_TXE+0x136>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b40      	cmp	r3, #64	; 0x40
 8006362:	d103      	bne.n	800636c <I2C_MasterTransmit_TXE+0x110>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f891 	bl	800648c <I2C_MemoryTransmit_TXE_BTF>
}
 800636a:	e012      	b.n	8006392 <I2C_MasterTransmit_TXE+0x136>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	781a      	ldrb	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006386:	b29b      	uxth	r3, r3
 8006388:	3b01      	subs	r3, #1
 800638a:	b29a      	uxth	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006390:	e7ff      	b.n	8006392 <I2C_MasterTransmit_TXE+0x136>
 8006392:	bf00      	nop
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b084      	sub	sp, #16
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b21      	cmp	r3, #33	; 0x21
 80063b2:	d167      	bne.n	8006484 <I2C_MasterTransmit_BTF+0xea>
  {
    if (hi2c->XferCount != 0U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d012      	beq.n	80063e4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	781a      	ldrb	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d8:	b29b      	uxth	r3, r3
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80063e2:	e04f      	b.n	8006484 <I2C_MasterTransmit_BTF+0xea>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d01e      	beq.n	8006428 <I2C_MasterTransmit_BTF+0x8e>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b20      	cmp	r3, #32
 80063ee:	d01b      	beq.n	8006428 <I2C_MasterTransmit_BTF+0x8e>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063f6:	d017      	beq.n	8006428 <I2C_MasterTransmit_BTF+0x8e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006406:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2211      	movs	r2, #17
 800640c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2220      	movs	r2, #32
 800641a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->MasterTxCpltCallback(hi2c);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	4798      	blx	r3
}
 8006426:	e02d      	b.n	8006484 <I2C_MasterTransmit_BTF+0xea>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006436:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006446:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2220      	movs	r2, #32
 8006452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b40      	cmp	r3, #64	; 0x40
 8006460:	d108      	bne.n	8006474 <I2C_MasterTransmit_BTF+0xda>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MemTxCpltCallback(hi2c);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	4798      	blx	r3
}
 8006472:	e007      	b.n	8006484 <I2C_MasterTransmit_BTF+0xea>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MasterTxCpltCallback(hi2c);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	4798      	blx	r3
}
 8006484:	bf00      	nop
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800649a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d11d      	bne.n	80064e0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d10b      	bne.n	80064c4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064bc:	1c9a      	adds	r2, r3, #2
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80064c2:	e074      	b.n	80065ae <I2C_MemoryTransmit_TXE_BTF+0x122>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	121b      	asrs	r3, r3, #8
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80064de:	e066      	b.n	80065ae <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 1U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d10b      	bne.n	8006500 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f8:	1c5a      	adds	r2, r3, #1
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80064fe:	e056      	b.n	80065ae <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 2U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006504:	2b02      	cmp	r3, #2
 8006506:	d152      	bne.n	80065ae <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	2b22      	cmp	r3, #34	; 0x22
 800650c:	d10d      	bne.n	800652a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800651c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006528:	e041      	b.n	80065ae <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652e:	b29b      	uxth	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d015      	beq.n	8006560 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006534:	7bfb      	ldrb	r3, [r7, #15]
 8006536:	2b21      	cmp	r3, #33	; 0x21
 8006538:	d112      	bne.n	8006560 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653e:	781a      	ldrb	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	1c5a      	adds	r2, r3, #1
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006554:	b29b      	uxth	r3, r3
 8006556:	3b01      	subs	r3, #1
 8006558:	b29a      	uxth	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800655e:	e026      	b.n	80065ae <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006564:	b29b      	uxth	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d121      	bne.n	80065ae <I2C_MemoryTransmit_TXE_BTF+0x122>
 800656a:	7bfb      	ldrb	r3, [r7, #15]
 800656c:	2b21      	cmp	r3, #33	; 0x21
 800656e:	d11e      	bne.n	80065ae <I2C_MemoryTransmit_TXE_BTF+0x122>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800657e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800658e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2220      	movs	r2, #32
 800659a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->MemTxCpltCallback(hi2c);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	4798      	blx	r3
}
 80065ae:	bf00      	nop
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b084      	sub	sp, #16
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b22      	cmp	r3, #34	; 0x22
 80065c8:	f040 80af 	bne.w	800672a <I2C_MasterReceive_RXNE+0x174>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b03      	cmp	r3, #3
 80065d8:	d921      	bls.n	800661e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	691a      	ldr	r2, [r3, #16]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	b2d2      	uxtb	r2, r2
 80065e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	3b01      	subs	r3, #1
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006604:	b29b      	uxth	r3, r3
 8006606:	2b03      	cmp	r3, #3
 8006608:	f040 808f 	bne.w	800672a <I2C_MasterReceive_RXNE+0x174>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800661a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800661c:	e085      	b.n	800672a <I2C_MasterReceive_RXNE+0x174>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006622:	2b02      	cmp	r3, #2
 8006624:	d078      	beq.n	8006718 <I2C_MasterReceive_RXNE+0x162>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d002      	beq.n	8006632 <I2C_MasterReceive_RXNE+0x7c>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d172      	bne.n	8006718 <I2C_MasterReceive_RXNE+0x162>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f001 f83a 	bl	80076ac <I2C_WaitOnSTOPRequestThroughIT>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d144      	bne.n	80066c8 <I2C_MasterReceive_RXNE+0x112>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800664c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800665c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	691a      	ldr	r2, [r3, #16]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006668:	b2d2      	uxtb	r2, r2
 800666a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667a:	b29b      	uxth	r3, r3
 800667c:	3b01      	subs	r3, #1
 800667e:	b29a      	uxth	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2220      	movs	r2, #32
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b40      	cmp	r3, #64	; 0x40
 8006696:	d10b      	bne.n	80066b0 <I2C_MasterReceive_RXNE+0xfa>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MemRxCpltCallback(hi2c);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80066ae:	e03c      	b.n	800672a <I2C_MasterReceive_RXNE+0x174>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2212      	movs	r2, #18
 80066bc:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MasterRxCpltCallback(hi2c);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80066c6:	e030      	b.n	800672a <I2C_MasterReceive_RXNE+0x174>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066d6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	691a      	ldr	r2, [r3, #16]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e2:	b2d2      	uxtb	r2, r2
 80066e4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ea:	1c5a      	adds	r2, r3, #1
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2220      	movs	r2, #32
 8006702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCallback(hi2c);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006716:	e008      	b.n	800672a <I2C_MasterReceive_RXNE+0x174>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006726:	605a      	str	r2, [r3, #4]
}
 8006728:	e7ff      	b.n	800672a <I2C_MasterReceive_RXNE+0x174>
 800672a:	bf00      	nop
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b084      	sub	sp, #16
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006744:	b29b      	uxth	r3, r3
 8006746:	2b04      	cmp	r3, #4
 8006748:	d11b      	bne.n	8006782 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006758:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	691a      	ldr	r2, [r3, #16]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	b2d2      	uxtb	r2, r2
 8006766:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006776:	b29b      	uxth	r3, r3
 8006778:	3b01      	subs	r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006780:	e0bf      	b.n	8006902 <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 3U)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006786:	b29b      	uxth	r3, r3
 8006788:	2b03      	cmp	r3, #3
 800678a:	d129      	bne.n	80067e0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800679a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b04      	cmp	r3, #4
 80067a0:	d00a      	beq.n	80067b8 <I2C_MasterReceive_BTF+0x86>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d007      	beq.n	80067b8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067b6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	691a      	ldr	r2, [r3, #16]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	b2d2      	uxtb	r2, r2
 80067c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b29a      	uxth	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80067de:	e090      	b.n	8006902 <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 2U)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d178      	bne.n	80068dc <I2C_MasterReceive_BTF+0x1aa>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d002      	beq.n	80067f6 <I2C_MasterReceive_BTF+0xc4>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2b10      	cmp	r3, #16
 80067f4:	d108      	bne.n	8006808 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	e019      	b.n	800683c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b04      	cmp	r3, #4
 800680c:	d002      	beq.n	8006814 <I2C_MasterReceive_BTF+0xe2>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b02      	cmp	r3, #2
 8006812:	d108      	bne.n	8006826 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	e00a      	b.n	800683c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2b10      	cmp	r3, #16
 800682a:	d007      	beq.n	800683c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800683a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	691a      	ldr	r2, [r3, #16]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006858:	b29b      	uxth	r3, r3
 800685a:	3b01      	subs	r3, #1
 800685c:	b29a      	uxth	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	691a      	ldr	r2, [r3, #16]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800687e:	b29b      	uxth	r3, r3
 8006880:	3b01      	subs	r3, #1
 8006882:	b29a      	uxth	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006896:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2220      	movs	r2, #32
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b40      	cmp	r3, #64	; 0x40
 80068aa:	d10b      	bne.n	80068c4 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MemRxCpltCallback(hi2c);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	4798      	blx	r3
}
 80068c2:	e01e      	b.n	8006902 <I2C_MasterReceive_BTF+0x1d0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2212      	movs	r2, #18
 80068d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	4798      	blx	r3
}
 80068da:	e012      	b.n	8006902 <I2C_MasterReceive_BTF+0x1d0>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	691a      	ldr	r2, [r3, #16]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	b2d2      	uxtb	r2, r2
 80068e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	3b01      	subs	r3, #1
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006902:	bf00      	nop
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800690a:	b480      	push	{r7}
 800690c:	b083      	sub	sp, #12
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b40      	cmp	r3, #64	; 0x40
 800691c:	d117      	bne.n	800694e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006922:	2b00      	cmp	r3, #0
 8006924:	d109      	bne.n	800693a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692a:	b2db      	uxtb	r3, r3
 800692c:	461a      	mov	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006936:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006938:	e067      	b.n	8006a0a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800693e:	b2db      	uxtb	r3, r3
 8006940:	f043 0301 	orr.w	r3, r3, #1
 8006944:	b2da      	uxtb	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	611a      	str	r2, [r3, #16]
}
 800694c:	e05d      	b.n	8006a0a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006956:	d133      	bne.n	80069c0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b21      	cmp	r3, #33	; 0x21
 8006962:	d109      	bne.n	8006978 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006968:	b2db      	uxtb	r3, r3
 800696a:	461a      	mov	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006974:	611a      	str	r2, [r3, #16]
 8006976:	e008      	b.n	800698a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697c:	b2db      	uxtb	r3, r3
 800697e:	f043 0301 	orr.w	r3, r3, #1
 8006982:	b2da      	uxtb	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698e:	2b00      	cmp	r3, #0
 8006990:	d004      	beq.n	800699c <I2C_Master_SB+0x92>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006998:	2b00      	cmp	r3, #0
 800699a:	d108      	bne.n	80069ae <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d032      	beq.n	8006a0a <I2C_Master_SB+0x100>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d02d      	beq.n	8006a0a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069bc:	605a      	str	r2, [r3, #4]
}
 80069be:	e024      	b.n	8006a0a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10e      	bne.n	80069e6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	11db      	asrs	r3, r3, #7
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	f003 0306 	and.w	r3, r3, #6
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	f063 030f 	orn	r3, r3, #15
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	611a      	str	r2, [r3, #16]
}
 80069e4:	e011      	b.n	8006a0a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d10d      	bne.n	8006a0a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	11db      	asrs	r3, r3, #7
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	f003 0306 	and.w	r3, r3, #6
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	f063 030e 	orn	r3, r3, #14
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	611a      	str	r2, [r3, #16]
}
 8006a0a:	bf00      	nop
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b083      	sub	sp, #12
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d004      	beq.n	8006a3c <I2C_Master_ADD10+0x26>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d108      	bne.n	8006a4e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00c      	beq.n	8006a5e <I2C_Master_ADD10+0x48>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d007      	beq.n	8006a5e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a5c:	605a      	str	r2, [r3, #4]
  }
}
 8006a5e:	bf00      	nop
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b091      	sub	sp, #68	; 0x44
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a80:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a86:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b22      	cmp	r3, #34	; 0x22
 8006a92:	f040 8169 	bne.w	8006d68 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10f      	bne.n	8006abe <I2C_Master_ADDR+0x54>
 8006a9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006aa2:	2b40      	cmp	r3, #64	; 0x40
 8006aa4:	d10b      	bne.n	8006abe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	633b      	str	r3, [r7, #48]	; 0x30
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	633b      	str	r3, [r7, #48]	; 0x30
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	e160      	b.n	8006d80 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d11d      	bne.n	8006b02 <I2C_Master_ADDR+0x98>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ace:	d118      	bne.n	8006b02 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006af4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	651a      	str	r2, [r3, #80]	; 0x50
 8006b00:	e13e      	b.n	8006d80 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d113      	bne.n	8006b34 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b20:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	e115      	b.n	8006d60 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	f040 808a 	bne.w	8006c54 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b46:	d137      	bne.n	8006bb8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b56:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b66:	d113      	bne.n	8006b90 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b76:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b78:	2300      	movs	r3, #0
 8006b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	627b      	str	r3, [r7, #36]	; 0x24
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	e0e7      	b.n	8006d60 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b90:	2300      	movs	r3, #0
 8006b92:	623b      	str	r3, [r7, #32]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	623b      	str	r3, [r7, #32]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	623b      	str	r3, [r7, #32]
 8006ba4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bb4:	601a      	str	r2, [r3, #0]
 8006bb6:	e0d3      	b.n	8006d60 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bba:	2b08      	cmp	r3, #8
 8006bbc:	d02e      	beq.n	8006c1c <I2C_Master_ADDR+0x1b2>
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d02b      	beq.n	8006c1c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc6:	2b12      	cmp	r3, #18
 8006bc8:	d102      	bne.n	8006bd0 <I2C_Master_ADDR+0x166>
 8006bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d125      	bne.n	8006c1c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d00e      	beq.n	8006bf4 <I2C_Master_ADDR+0x18a>
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d00b      	beq.n	8006bf4 <I2C_Master_ADDR+0x18a>
 8006bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bde:	2b10      	cmp	r3, #16
 8006be0:	d008      	beq.n	8006bf4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	e007      	b.n	8006c04 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c02:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c04:	2300      	movs	r3, #0
 8006c06:	61fb      	str	r3, [r7, #28]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	61fb      	str	r3, [r7, #28]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	61fb      	str	r3, [r7, #28]
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	e0a1      	b.n	8006d60 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c2a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	61bb      	str	r3, [r7, #24]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	61bb      	str	r3, [r7, #24]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	61bb      	str	r3, [r7, #24]
 8006c40:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	e085      	b.n	8006d60 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d14d      	bne.n	8006cfa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c60:	2b04      	cmp	r3, #4
 8006c62:	d016      	beq.n	8006c92 <I2C_Master_ADDR+0x228>
 8006c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d013      	beq.n	8006c92 <I2C_Master_ADDR+0x228>
 8006c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6c:	2b10      	cmp	r3, #16
 8006c6e:	d010      	beq.n	8006c92 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c7e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	e007      	b.n	8006ca2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ca0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cb0:	d117      	bne.n	8006ce2 <I2C_Master_ADDR+0x278>
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006cb8:	d00b      	beq.n	8006cd2 <I2C_Master_ADDR+0x268>
 8006cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d008      	beq.n	8006cd2 <I2C_Master_ADDR+0x268>
 8006cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc2:	2b08      	cmp	r3, #8
 8006cc4:	d005      	beq.n	8006cd2 <I2C_Master_ADDR+0x268>
 8006cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc8:	2b10      	cmp	r3, #16
 8006cca:	d002      	beq.n	8006cd2 <I2C_Master_ADDR+0x268>
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cce:	2b20      	cmp	r3, #32
 8006cd0:	d107      	bne.n	8006ce2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ce0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	617b      	str	r3, [r7, #20]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	617b      	str	r3, [r7, #20]
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	e032      	b.n	8006d60 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d08:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d18:	d117      	bne.n	8006d4a <I2C_Master_ADDR+0x2e0>
 8006d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d20:	d00b      	beq.n	8006d3a <I2C_Master_ADDR+0x2d0>
 8006d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d008      	beq.n	8006d3a <I2C_Master_ADDR+0x2d0>
 8006d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2a:	2b08      	cmp	r3, #8
 8006d2c:	d005      	beq.n	8006d3a <I2C_Master_ADDR+0x2d0>
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d30:	2b10      	cmp	r3, #16
 8006d32:	d002      	beq.n	8006d3a <I2C_Master_ADDR+0x2d0>
 8006d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d36:	2b20      	cmp	r3, #32
 8006d38:	d107      	bne.n	8006d4a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	685a      	ldr	r2, [r3, #4]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d48:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	613b      	str	r3, [r7, #16]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	613b      	str	r3, [r7, #16]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	613b      	str	r3, [r7, #16]
 8006d5e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006d66:	e00b      	b.n	8006d80 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d68:	2300      	movs	r3, #0
 8006d6a:	60fb      	str	r3, [r7, #12]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	60fb      	str	r3, [r7, #12]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
}
 8006d7e:	e7ff      	b.n	8006d80 <I2C_Master_ADDR+0x316>
 8006d80:	bf00      	nop
 8006d82:	3744      	adds	r7, #68	; 0x44
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d02c      	beq.n	8006e00 <I2C_SlaveTransmit_TXE+0x74>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006daa:	781a      	ldrb	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db6:	1c5a      	adds	r2, r3, #1
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d115      	bne.n	8006e00 <I2C_SlaveTransmit_TXE+0x74>
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
 8006dd6:	2b29      	cmp	r3, #41	; 0x29
 8006dd8:	d112      	bne.n	8006e00 <I2C_SlaveTransmit_TXE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	685a      	ldr	r2, [r3, #4]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006de8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2221      	movs	r2, #33	; 0x21
 8006dee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2228      	movs	r2, #40	; 0x28
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	4798      	blx	r3
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006e00:	bf00      	nop
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d011      	beq.n	8006e3e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1e:	781a      	ldrb	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	3b01      	subs	r3, #1
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006e3e:	bf00      	nop
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b084      	sub	sp, #16
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e58:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d02d      	beq.n	8006ec0 <I2C_SlaveReceive_RXNE+0x76>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	691a      	ldr	r2, [r3, #16]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6e:	b2d2      	uxtb	r2, r2
 8006e70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e76:	1c5a      	adds	r2, r3, #1
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	3b01      	subs	r3, #1
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d115      	bne.n	8006ec0 <I2C_SlaveReceive_RXNE+0x76>
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
 8006e96:	2b2a      	cmp	r3, #42	; 0x2a
 8006e98:	d112      	bne.n	8006ec0 <I2C_SlaveReceive_RXNE+0x76>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ea8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2222      	movs	r2, #34	; 0x22
 8006eae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2228      	movs	r2, #40	; 0x28
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	4798      	blx	r3
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006ec0:	bf00      	nop
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d012      	beq.n	8006f00 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	691a      	ldr	r2, [r3, #16]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee4:	b2d2      	uxtb	r2, r2
 8006ee6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eec:	1c5a      	adds	r2, r3, #1
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006f16:	2300      	movs	r3, #0
 8006f18:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f26:	2b28      	cmp	r3, #40	; 0x28
 8006f28:	d127      	bne.n	8006f7a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f38:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	089b      	lsrs	r3, r3, #2
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006f46:	2301      	movs	r3, #1
 8006f48:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	09db      	lsrs	r3, r3, #7
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d103      	bne.n	8006f5e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	81bb      	strh	r3, [r7, #12]
 8006f5c:	e002      	b.n	8006f64 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f70:	89ba      	ldrh	r2, [r7, #12]
 8006f72:	7bf9      	ldrb	r1, [r7, #15]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	4798      	blx	r3
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006f78:	e00e      	b.n	8006f98 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60bb      	str	r3, [r7, #8]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	60bb      	str	r3, [r7, #8]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	60bb      	str	r3, [r7, #8]
 8006f8e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006f98:	bf00      	nop
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fbe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60bb      	str	r3, [r7, #8]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	60bb      	str	r3, [r7, #8]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f042 0201 	orr.w	r2, r2, #1
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ffc:	d172      	bne.n	80070e4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
 8007000:	2b22      	cmp	r3, #34	; 0x22
 8007002:	d002      	beq.n	800700a <I2C_Slave_STOPF+0x6a>
 8007004:	7bfb      	ldrb	r3, [r7, #15]
 8007006:	2b2a      	cmp	r3, #42	; 0x2a
 8007008:	d135      	bne.n	8007076 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	b29a      	uxth	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800701c:	b29b      	uxth	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d005      	beq.n	800702e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007026:	f043 0204 	orr.w	r2, r3, #4
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800703c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007042:	4618      	mov	r0, r3
 8007044:	f7fd feca 	bl	8004ddc <HAL_DMA_GetState>
 8007048:	4603      	mov	r3, r0
 800704a:	2b01      	cmp	r3, #1
 800704c:	d049      	beq.n	80070e2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007052:	4a6b      	ldr	r2, [pc, #428]	; (8007200 <I2C_Slave_STOPF+0x260>)
 8007054:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705a:	4618      	mov	r0, r3
 800705c:	f7fd fd12 	bl	8004a84 <HAL_DMA_Abort_IT>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d03d      	beq.n	80070e2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007070:	4610      	mov	r0, r2
 8007072:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007074:	e035      	b.n	80070e2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	b29a      	uxth	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007088:	b29b      	uxth	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d005      	beq.n	800709a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007092:	f043 0204 	orr.w	r2, r3, #4
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7fd fe94 	bl	8004ddc <HAL_DMA_GetState>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d014      	beq.n	80070e4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070be:	4a50      	ldr	r2, [pc, #320]	; (8007200 <I2C_Slave_STOPF+0x260>)
 80070c0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fd fcdc 	bl	8004a84 <HAL_DMA_Abort_IT>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d008      	beq.n	80070e4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80070dc:	4610      	mov	r0, r2
 80070de:	4798      	blx	r3
 80070e0:	e000      	b.n	80070e4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070e2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d03e      	beq.n	800716c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	f003 0304 	and.w	r3, r3, #4
 80070f8:	2b04      	cmp	r3, #4
 80070fa:	d112      	bne.n	8007122 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	691a      	ldr	r2, [r3, #16]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	b2d2      	uxtb	r2, r2
 8007108:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710e:	1c5a      	adds	r2, r3, #1
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007118:	b29b      	uxth	r3, r3
 800711a:	3b01      	subs	r3, #1
 800711c:	b29a      	uxth	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712c:	2b40      	cmp	r3, #64	; 0x40
 800712e:	d112      	bne.n	8007156 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	691a      	ldr	r2, [r3, #16]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800714c:	b29b      	uxth	r3, r3
 800714e:	3b01      	subs	r3, #1
 8007150:	b29a      	uxth	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800715a:	b29b      	uxth	r3, r3
 800715c:	2b00      	cmp	r3, #0
 800715e:	d005      	beq.n	800716c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007164:	f043 0204 	orr.w	r2, r3, #4
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f8b9 	bl	80072ec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800717a:	e03c      	b.n	80071f6 <I2C_Slave_STOPF+0x256>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800717c:	7bfb      	ldrb	r3, [r7, #15]
 800717e:	2b2a      	cmp	r3, #42	; 0x2a
 8007180:	d10a      	bne.n	8007198 <I2C_Slave_STOPF+0x1f8>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2228      	movs	r2, #40	; 0x28
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b28      	cmp	r3, #40	; 0x28
 80071a2:	d112      	bne.n	80071ca <I2C_Slave_STOPF+0x22a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a17      	ldr	r2, [pc, #92]	; (8007204 <I2C_Slave_STOPF+0x264>)
 80071a8:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ListenCpltCallback(hi2c);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	4798      	blx	r3
}
 80071c8:	e015      	b.n	80071f6 <I2C_Slave_STOPF+0x256>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ce:	2b22      	cmp	r3, #34	; 0x22
 80071d0:	d002      	beq.n	80071d8 <I2C_Slave_STOPF+0x238>
 80071d2:	7bfb      	ldrb	r3, [r7, #15]
 80071d4:	2b22      	cmp	r3, #34	; 0x22
 80071d6:	d10e      	bne.n	80071f6 <I2C_Slave_STOPF+0x256>
        hi2c->PreviousState = I2C_STATE_NONE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->SlaveRxCpltCallback(hi2c);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	4798      	blx	r3
}
 80071f6:	bf00      	nop
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	08007559 	.word	0x08007559
 8007204:	ffff0000 	.word	0xffff0000

08007208 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007216:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	2b08      	cmp	r3, #8
 8007222:	d002      	beq.n	800722a <I2C_Slave_AF+0x22>
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	2b20      	cmp	r3, #32
 8007228:	d12a      	bne.n	8007280 <I2C_Slave_AF+0x78>
 800722a:	7bfb      	ldrb	r3, [r7, #15]
 800722c:	2b28      	cmp	r3, #40	; 0x28
 800722e:	d127      	bne.n	8007280 <I2C_Slave_AF+0x78>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a2d      	ldr	r2, [pc, #180]	; (80072e8 <I2C_Slave_AF+0xe0>)
 8007234:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007244:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800724e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800725e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2220      	movs	r2, #32
 800726a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	4798      	blx	r3
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800727e:	e02f      	b.n	80072e0 <I2C_Slave_AF+0xd8>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007280:	7bfb      	ldrb	r3, [r7, #15]
 8007282:	2b21      	cmp	r3, #33	; 0x21
 8007284:	d127      	bne.n	80072d6 <I2C_Slave_AF+0xce>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a17      	ldr	r2, [pc, #92]	; (80072e8 <I2C_Slave_AF+0xe0>)
 800728a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2221      	movs	r2, #33	; 0x21
 8007290:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2220      	movs	r2, #32
 8007296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685a      	ldr	r2, [r3, #4]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80072b0:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072ba:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072ca:	601a      	str	r2, [r3, #0]
    hi2c->SlaveTxCpltCallback(hi2c);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	4798      	blx	r3
}
 80072d4:	e004      	b.n	80072e0 <I2C_Slave_AF+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072de:	615a      	str	r2, [r3, #20]
}
 80072e0:	bf00      	nop
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	ffff0000 	.word	0xffff0000

080072ec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007302:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007304:	7bbb      	ldrb	r3, [r7, #14]
 8007306:	2b10      	cmp	r3, #16
 8007308:	d002      	beq.n	8007310 <I2C_ITError+0x24>
 800730a:	7bbb      	ldrb	r3, [r7, #14]
 800730c:	2b40      	cmp	r3, #64	; 0x40
 800730e:	d10a      	bne.n	8007326 <I2C_ITError+0x3a>
 8007310:	7bfb      	ldrb	r3, [r7, #15]
 8007312:	2b22      	cmp	r3, #34	; 0x22
 8007314:	d107      	bne.n	8007326 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007324:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007326:	7bfb      	ldrb	r3, [r7, #15]
 8007328:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800732c:	2b28      	cmp	r3, #40	; 0x28
 800732e:	d107      	bne.n	8007340 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2228      	movs	r2, #40	; 0x28
 800733a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800733e:	e015      	b.n	800736c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800734a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800734e:	d00a      	beq.n	8007366 <I2C_ITError+0x7a>
 8007350:	7bfb      	ldrb	r3, [r7, #15]
 8007352:	2b60      	cmp	r3, #96	; 0x60
 8007354:	d007      	beq.n	8007366 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2220      	movs	r2, #32
 800735a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800737a:	d162      	bne.n	8007442 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800738a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007390:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b01      	cmp	r3, #1
 8007398:	d020      	beq.n	80073dc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800739e:	4a6c      	ldr	r2, [pc, #432]	; (8007550 <I2C_ITError+0x264>)
 80073a0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fd fb6c 	bl	8004a84 <HAL_DMA_Abort_IT>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 808b 	beq.w	80074ca <I2C_ITError+0x1de>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 0201 	bic.w	r2, r2, #1
 80073c2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2220      	movs	r2, #32
 80073c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80073d6:	4610      	mov	r0, r2
 80073d8:	4798      	blx	r3
 80073da:	e076      	b.n	80074ca <I2C_ITError+0x1de>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e0:	4a5b      	ldr	r2, [pc, #364]	; (8007550 <I2C_ITError+0x264>)
 80073e2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7fd fb4b 	bl	8004a84 <HAL_DMA_Abort_IT>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d06a      	beq.n	80074ca <I2C_ITError+0x1de>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073fe:	2b40      	cmp	r3, #64	; 0x40
 8007400:	d10b      	bne.n	800741a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	691a      	ldr	r2, [r3, #16]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740c:	b2d2      	uxtb	r2, r2
 800740e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007414:	1c5a      	adds	r2, r3, #1
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f022 0201 	bic.w	r2, r2, #1
 8007428:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2220      	movs	r2, #32
 800742e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800743c:	4610      	mov	r0, r2
 800743e:	4798      	blx	r3
 8007440:	e043      	b.n	80074ca <I2C_ITError+0x1de>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b60      	cmp	r3, #96	; 0x60
 800744c:	d126      	bne.n	800749c <I2C_ITError+0x1b0>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2220      	movs	r2, #32
 8007452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007466:	2b40      	cmp	r3, #64	; 0x40
 8007468:	d10b      	bne.n	8007482 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	691a      	ldr	r2, [r3, #16]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007474:	b2d2      	uxtb	r2, r2
 8007476:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0201 	bic.w	r2, r2, #1
 8007490:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	4798      	blx	r3
 800749a:	e016      	b.n	80074ca <I2C_ITError+0x1de>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a6:	2b40      	cmp	r3, #64	; 0x40
 80074a8:	d10b      	bne.n	80074c2 <I2C_ITError+0x1d6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	691a      	ldr	r2, [r3, #16]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	b2d2      	uxtb	r2, r2
 80074b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	1c5a      	adds	r2, r3, #1
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10e      	bne.n	80074f8 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d109      	bne.n	80074f8 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d104      	bne.n	80074f8 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d007      	beq.n	8007508 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007506:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800750e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007514:	f003 0304 	and.w	r3, r3, #4
 8007518:	2b04      	cmp	r3, #4
 800751a:	d114      	bne.n	8007546 <I2C_ITError+0x25a>
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	2b28      	cmp	r3, #40	; 0x28
 8007520:	d111      	bne.n	8007546 <I2C_ITError+0x25a>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a0b      	ldr	r2, [pc, #44]	; (8007554 <I2C_ITError+0x268>)
 8007526:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2220      	movs	r2, #32
 8007532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	4798      	blx	r3
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007546:	bf00      	nop
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	08007559 	.word	0x08007559
 8007554:	ffff0000 	.word	0xffff0000

08007558 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007560:	2300      	movs	r3, #0
 8007562:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007568:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007570:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007572:	4b4c      	ldr	r3, [pc, #304]	; (80076a4 <I2C_DMAAbort+0x14c>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	08db      	lsrs	r3, r3, #3
 8007578:	4a4b      	ldr	r2, [pc, #300]	; (80076a8 <I2C_DMAAbort+0x150>)
 800757a:	fba2 2303 	umull	r2, r3, r2, r3
 800757e:	0a1a      	lsrs	r2, r3, #8
 8007580:	4613      	mov	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	00da      	lsls	r2, r3, #3
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d106      	bne.n	80075a0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	f043 0220 	orr.w	r2, r3, #32
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800759e:	e00a      	b.n	80075b6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	3b01      	subs	r3, #1
 80075a4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075b4:	d0ea      	beq.n	800758c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c2:	2200      	movs	r2, #0
 80075c4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d2:	2200      	movs	r2, #0
 80075d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075e4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2200      	movs	r2, #0
 80075ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d003      	beq.n	80075fc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f8:	2200      	movs	r2, #0
 80075fa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007600:	2b00      	cmp	r3, #0
 8007602:	d003      	beq.n	800760c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007608:	2200      	movs	r2, #0
 800760a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f022 0201 	bic.w	r2, r2, #1
 800761a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b60      	cmp	r3, #96	; 0x60
 8007626:	d10f      	bne.n	8007648 <I2C_DMAAbort+0xf0>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	2220      	movs	r2, #32
 800762c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	2200      	movs	r2, #0
 800763c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007642:	6978      	ldr	r0, [r7, #20]
 8007644:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007646:	e028      	b.n	800769a <I2C_DMAAbort+0x142>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007648:	7cfb      	ldrb	r3, [r7, #19]
 800764a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800764e:	2b28      	cmp	r3, #40	; 0x28
 8007650:	d117      	bne.n	8007682 <I2C_DMAAbort+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f042 0201 	orr.w	r2, r2, #1
 8007660:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007670:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	2200      	movs	r2, #0
 8007676:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	2228      	movs	r2, #40	; 0x28
 800767c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007680:	e007      	b.n	8007692 <I2C_DMAAbort+0x13a>
      hi2c->State = HAL_I2C_STATE_READY;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	2220      	movs	r2, #32
 8007686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCallback(hi2c);
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007696:	6978      	ldr	r0, [r7, #20]
 8007698:	4798      	blx	r3
}
 800769a:	bf00      	nop
 800769c:	3718      	adds	r7, #24
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	20000004 	.word	0x20000004
 80076a8:	14f8b589 	.word	0x14f8b589

080076ac <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076b4:	2300      	movs	r3, #0
 80076b6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80076b8:	4b13      	ldr	r3, [pc, #76]	; (8007708 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	08db      	lsrs	r3, r3, #3
 80076be:	4a13      	ldr	r2, [pc, #76]	; (800770c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80076c0:	fba2 2303 	umull	r2, r3, r2, r3
 80076c4:	0a1a      	lsrs	r2, r3, #8
 80076c6:	4613      	mov	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	3b01      	subs	r3, #1
 80076d2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d107      	bne.n	80076ea <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076de:	f043 0220 	orr.w	r2, r3, #32
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e008      	b.n	80076fc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076f8:	d0e9      	beq.n	80076ce <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	20000004 	.word	0x20000004
 800770c:	14f8b589 	.word	0x14f8b589

08007710 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007720:	d103      	bne.n	800772a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007728:	e007      	b.n	800773a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007732:	d102      	bne.n	800773a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2208      	movs	r2, #8
 8007738:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800773a:	bf00      	nop
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
	...

08007748 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800774c:	4b06      	ldr	r3, [pc, #24]	; (8007768 <HAL_PWR_PVD_IRQHandler+0x20>)
 800774e:	695b      	ldr	r3, [r3, #20]
 8007750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d005      	beq.n	8007764 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8007758:	f000 f808 	bl	800776c <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800775c:	4b02      	ldr	r3, [pc, #8]	; (8007768 <HAL_PWR_PVD_IRQHandler+0x20>)
 800775e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007762:	615a      	str	r2, [r3, #20]
  }
}
 8007764:	bf00      	nop
 8007766:	bd80      	pop	{r7, pc}
 8007768:	40013c00 	.word	0x40013c00

0800776c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800776c:	b480      	push	{r7}
 800776e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8007770:	bf00      	nop
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
	...

0800777c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b086      	sub	sp, #24
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e314      	b.n	8007db8 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b0f      	cmp	r3, #15
 8007794:	d903      	bls.n	800779e <HAL_RCC_OscConfig+0x22>
 8007796:	21e6      	movs	r1, #230	; 0xe6
 8007798:	4897      	ldr	r0, [pc, #604]	; (80079f8 <HAL_RCC_OscConfig+0x27c>)
 800779a:	f7fa ff64 	bl	8002666 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 8088 	beq.w	80078bc <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00d      	beq.n	80077d0 <HAL_RCC_OscConfig+0x54>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077bc:	d008      	beq.n	80077d0 <HAL_RCC_OscConfig+0x54>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077c6:	d003      	beq.n	80077d0 <HAL_RCC_OscConfig+0x54>
 80077c8:	21eb      	movs	r1, #235	; 0xeb
 80077ca:	488b      	ldr	r0, [pc, #556]	; (80079f8 <HAL_RCC_OscConfig+0x27c>)
 80077cc:	f7fa ff4b 	bl	8002666 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077d0:	4b8a      	ldr	r3, [pc, #552]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f003 030c 	and.w	r3, r3, #12
 80077d8:	2b04      	cmp	r3, #4
 80077da:	d00c      	beq.n	80077f6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077dc:	4b87      	ldr	r3, [pc, #540]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077e4:	2b08      	cmp	r3, #8
 80077e6:	d112      	bne.n	800780e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077e8:	4b84      	ldr	r3, [pc, #528]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077f4:	d10b      	bne.n	800780e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077f6:	4b81      	ldr	r3, [pc, #516]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d05b      	beq.n	80078ba <HAL_RCC_OscConfig+0x13e>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d157      	bne.n	80078ba <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e2d4      	b.n	8007db8 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007816:	d106      	bne.n	8007826 <HAL_RCC_OscConfig+0xaa>
 8007818:	4b78      	ldr	r3, [pc, #480]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a77      	ldr	r2, [pc, #476]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 800781e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007822:	6013      	str	r3, [r2, #0]
 8007824:	e01d      	b.n	8007862 <HAL_RCC_OscConfig+0xe6>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800782e:	d10c      	bne.n	800784a <HAL_RCC_OscConfig+0xce>
 8007830:	4b72      	ldr	r3, [pc, #456]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a71      	ldr	r2, [pc, #452]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 8007836:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800783a:	6013      	str	r3, [r2, #0]
 800783c:	4b6f      	ldr	r3, [pc, #444]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a6e      	ldr	r2, [pc, #440]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 8007842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007846:	6013      	str	r3, [r2, #0]
 8007848:	e00b      	b.n	8007862 <HAL_RCC_OscConfig+0xe6>
 800784a:	4b6c      	ldr	r3, [pc, #432]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a6b      	ldr	r2, [pc, #428]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 8007850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007854:	6013      	str	r3, [r2, #0]
 8007856:	4b69      	ldr	r3, [pc, #420]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a68      	ldr	r2, [pc, #416]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 800785c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007860:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d013      	beq.n	8007892 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800786a:	f7fb fdbf 	bl	80033ec <HAL_GetTick>
 800786e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007870:	e008      	b.n	8007884 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007872:	f7fb fdbb 	bl	80033ec <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	2b64      	cmp	r3, #100	; 0x64
 800787e:	d901      	bls.n	8007884 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e299      	b.n	8007db8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007884:	4b5d      	ldr	r3, [pc, #372]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d0f0      	beq.n	8007872 <HAL_RCC_OscConfig+0xf6>
 8007890:	e014      	b.n	80078bc <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007892:	f7fb fdab 	bl	80033ec <HAL_GetTick>
 8007896:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007898:	e008      	b.n	80078ac <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800789a:	f7fb fda7 	bl	80033ec <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	2b64      	cmp	r3, #100	; 0x64
 80078a6:	d901      	bls.n	80078ac <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e285      	b.n	8007db8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078ac:	4b53      	ldr	r3, [pc, #332]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1f0      	bne.n	800789a <HAL_RCC_OscConfig+0x11e>
 80078b8:	e000      	b.n	80078bc <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0302 	and.w	r3, r3, #2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d079      	beq.n	80079bc <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d008      	beq.n	80078e2 <HAL_RCC_OscConfig+0x166>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d004      	beq.n	80078e2 <HAL_RCC_OscConfig+0x166>
 80078d8:	f240 111d 	movw	r1, #285	; 0x11d
 80078dc:	4846      	ldr	r0, [pc, #280]	; (80079f8 <HAL_RCC_OscConfig+0x27c>)
 80078de:	f7fa fec2 	bl	8002666 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	2b1f      	cmp	r3, #31
 80078e8:	d904      	bls.n	80078f4 <HAL_RCC_OscConfig+0x178>
 80078ea:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80078ee:	4842      	ldr	r0, [pc, #264]	; (80079f8 <HAL_RCC_OscConfig+0x27c>)
 80078f0:	f7fa feb9 	bl	8002666 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078f4:	4b41      	ldr	r3, [pc, #260]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f003 030c 	and.w	r3, r3, #12
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00b      	beq.n	8007918 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007900:	4b3e      	ldr	r3, [pc, #248]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007908:	2b08      	cmp	r3, #8
 800790a:	d11c      	bne.n	8007946 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800790c:	4b3b      	ldr	r3, [pc, #236]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d116      	bne.n	8007946 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007918:	4b38      	ldr	r3, [pc, #224]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0302 	and.w	r3, r3, #2
 8007920:	2b00      	cmp	r3, #0
 8007922:	d005      	beq.n	8007930 <HAL_RCC_OscConfig+0x1b4>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d001      	beq.n	8007930 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e243      	b.n	8007db8 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007930:	4b32      	ldr	r3, [pc, #200]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	00db      	lsls	r3, r3, #3
 800793e:	492f      	ldr	r1, [pc, #188]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 8007940:	4313      	orrs	r3, r2
 8007942:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007944:	e03a      	b.n	80079bc <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d020      	beq.n	8007990 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800794e:	4b2c      	ldr	r3, [pc, #176]	; (8007a00 <HAL_RCC_OscConfig+0x284>)
 8007950:	2201      	movs	r2, #1
 8007952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007954:	f7fb fd4a 	bl	80033ec <HAL_GetTick>
 8007958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800795a:	e008      	b.n	800796e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800795c:	f7fb fd46 	bl	80033ec <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	2b02      	cmp	r3, #2
 8007968:	d901      	bls.n	800796e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e224      	b.n	8007db8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800796e:	4b23      	ldr	r3, [pc, #140]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0302 	and.w	r3, r3, #2
 8007976:	2b00      	cmp	r3, #0
 8007978:	d0f0      	beq.n	800795c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800797a:	4b20      	ldr	r3, [pc, #128]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	00db      	lsls	r3, r3, #3
 8007988:	491c      	ldr	r1, [pc, #112]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 800798a:	4313      	orrs	r3, r2
 800798c:	600b      	str	r3, [r1, #0]
 800798e:	e015      	b.n	80079bc <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007990:	4b1b      	ldr	r3, [pc, #108]	; (8007a00 <HAL_RCC_OscConfig+0x284>)
 8007992:	2200      	movs	r2, #0
 8007994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007996:	f7fb fd29 	bl	80033ec <HAL_GetTick>
 800799a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800799c:	e008      	b.n	80079b0 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800799e:	f7fb fd25 	bl	80033ec <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d901      	bls.n	80079b0 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e203      	b.n	8007db8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079b0:	4b12      	ldr	r3, [pc, #72]	; (80079fc <HAL_RCC_OscConfig+0x280>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1f0      	bne.n	800799e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0308 	and.w	r3, r3, #8
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d045      	beq.n	8007a54 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	695b      	ldr	r3, [r3, #20]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d008      	beq.n	80079e2 <HAL_RCC_OscConfig+0x266>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	695b      	ldr	r3, [r3, #20]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d004      	beq.n	80079e2 <HAL_RCC_OscConfig+0x266>
 80079d8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80079dc:	4806      	ldr	r0, [pc, #24]	; (80079f8 <HAL_RCC_OscConfig+0x27c>)
 80079de:	f7fa fe42 	bl	8002666 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d01e      	beq.n	8007a28 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079ea:	4b06      	ldr	r3, [pc, #24]	; (8007a04 <HAL_RCC_OscConfig+0x288>)
 80079ec:	2201      	movs	r2, #1
 80079ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079f0:	f7fb fcfc 	bl	80033ec <HAL_GetTick>
 80079f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079f6:	e010      	b.n	8007a1a <HAL_RCC_OscConfig+0x29e>
 80079f8:	0800f2b8 	.word	0x0800f2b8
 80079fc:	40023800 	.word	0x40023800
 8007a00:	42470000 	.word	0x42470000
 8007a04:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a08:	f7fb fcf0 	bl	80033ec <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d901      	bls.n	8007a1a <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e1ce      	b.n	8007db8 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a1a:	4b5e      	ldr	r3, [pc, #376]	; (8007b94 <HAL_RCC_OscConfig+0x418>)
 8007a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a1e:	f003 0302 	and.w	r3, r3, #2
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d0f0      	beq.n	8007a08 <HAL_RCC_OscConfig+0x28c>
 8007a26:	e015      	b.n	8007a54 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a28:	4b5b      	ldr	r3, [pc, #364]	; (8007b98 <HAL_RCC_OscConfig+0x41c>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a2e:	f7fb fcdd 	bl	80033ec <HAL_GetTick>
 8007a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a34:	e008      	b.n	8007a48 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a36:	f7fb fcd9 	bl	80033ec <HAL_GetTick>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d901      	bls.n	8007a48 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e1b7      	b.n	8007db8 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a48:	4b52      	ldr	r3, [pc, #328]	; (8007b94 <HAL_RCC_OscConfig+0x418>)
 8007a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a4c:	f003 0302 	and.w	r3, r3, #2
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1f0      	bne.n	8007a36 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0304 	and.w	r3, r3, #4
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 80b0 	beq.w	8007bc2 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a62:	2300      	movs	r3, #0
 8007a64:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00c      	beq.n	8007a88 <HAL_RCC_OscConfig+0x30c>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d008      	beq.n	8007a88 <HAL_RCC_OscConfig+0x30c>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	2b05      	cmp	r3, #5
 8007a7c:	d004      	beq.n	8007a88 <HAL_RCC_OscConfig+0x30c>
 8007a7e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8007a82:	4846      	ldr	r0, [pc, #280]	; (8007b9c <HAL_RCC_OscConfig+0x420>)
 8007a84:	f7fa fdef 	bl	8002666 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a88:	4b42      	ldr	r3, [pc, #264]	; (8007b94 <HAL_RCC_OscConfig+0x418>)
 8007a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10f      	bne.n	8007ab4 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a94:	2300      	movs	r3, #0
 8007a96:	60bb      	str	r3, [r7, #8]
 8007a98:	4b3e      	ldr	r3, [pc, #248]	; (8007b94 <HAL_RCC_OscConfig+0x418>)
 8007a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9c:	4a3d      	ldr	r2, [pc, #244]	; (8007b94 <HAL_RCC_OscConfig+0x418>)
 8007a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8007aa4:	4b3b      	ldr	r3, [pc, #236]	; (8007b94 <HAL_RCC_OscConfig+0x418>)
 8007aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aac:	60bb      	str	r3, [r7, #8]
 8007aae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ab4:	4b3a      	ldr	r3, [pc, #232]	; (8007ba0 <HAL_RCC_OscConfig+0x424>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d118      	bne.n	8007af2 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ac0:	4b37      	ldr	r3, [pc, #220]	; (8007ba0 <HAL_RCC_OscConfig+0x424>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a36      	ldr	r2, [pc, #216]	; (8007ba0 <HAL_RCC_OscConfig+0x424>)
 8007ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007acc:	f7fb fc8e 	bl	80033ec <HAL_GetTick>
 8007ad0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ad2:	e008      	b.n	8007ae6 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ad4:	f7fb fc8a 	bl	80033ec <HAL_GetTick>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d901      	bls.n	8007ae6 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e168      	b.n	8007db8 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ae6:	4b2e      	ldr	r3, [pc, #184]	; (8007ba0 <HAL_RCC_OscConfig+0x424>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d0f0      	beq.n	8007ad4 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d106      	bne.n	8007b08 <HAL_RCC_OscConfig+0x38c>
 8007afa:	4b26      	ldr	r3, [pc, #152]	; (8007b94 <HAL_RCC_OscConfig+0x418>)
 8007afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afe:	4a25      	ldr	r2, [pc, #148]	; (8007b94 <HAL_RCC_OscConfig+0x418>)
 8007b00:	f043 0301 	orr.w	r3, r3, #1
 8007b04:	6713      	str	r3, [r2, #112]	; 0x70
 8007b06:	e01c      	b.n	8007b42 <HAL_RCC_OscConfig+0x3c6>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	2b05      	cmp	r3, #5
 8007b0e:	d10c      	bne.n	8007b2a <HAL_RCC_OscConfig+0x3ae>
 8007b10:	4b20      	ldr	r3, [pc, #128]	; (8007b94 <HAL_RCC_OscConfig+0x418>)
 8007b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b14:	4a1f      	ldr	r2, [pc, #124]	; (8007b94 <HAL_RCC_OscConfig+0x418>)
 8007b16:	f043 0304 	orr.w	r3, r3, #4
 8007b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8007b1c:	4b1d      	ldr	r3, [pc, #116]	; (8007b94 <HAL_RCC_OscConfig+0x418>)
 8007b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b20:	4a1c      	ldr	r2, [pc, #112]	; (8007b94 <HAL_RCC_OscConfig+0x418>)
 8007b22:	f043 0301 	orr.w	r3, r3, #1
 8007b26:	6713      	str	r3, [r2, #112]	; 0x70
 8007b28:	e00b      	b.n	8007b42 <HAL_RCC_OscConfig+0x3c6>
 8007b2a:	4b1a      	ldr	r3, [pc, #104]	; (8007b94 <HAL_RCC_OscConfig+0x418>)
 8007b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2e:	4a19      	ldr	r2, [pc, #100]	; (8007b94 <HAL_RCC_OscConfig+0x418>)
 8007b30:	f023 0301 	bic.w	r3, r3, #1
 8007b34:	6713      	str	r3, [r2, #112]	; 0x70
 8007b36:	4b17      	ldr	r3, [pc, #92]	; (8007b94 <HAL_RCC_OscConfig+0x418>)
 8007b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3a:	4a16      	ldr	r2, [pc, #88]	; (8007b94 <HAL_RCC_OscConfig+0x418>)
 8007b3c:	f023 0304 	bic.w	r3, r3, #4
 8007b40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d015      	beq.n	8007b76 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b4a:	f7fb fc4f 	bl	80033ec <HAL_GetTick>
 8007b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b50:	e00a      	b.n	8007b68 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b52:	f7fb fc4b 	bl	80033ec <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d901      	bls.n	8007b68 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e127      	b.n	8007db8 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b68:	4b0a      	ldr	r3, [pc, #40]	; (8007b94 <HAL_RCC_OscConfig+0x418>)
 8007b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b6c:	f003 0302 	and.w	r3, r3, #2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d0ee      	beq.n	8007b52 <HAL_RCC_OscConfig+0x3d6>
 8007b74:	e01c      	b.n	8007bb0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b76:	f7fb fc39 	bl	80033ec <HAL_GetTick>
 8007b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b7c:	e012      	b.n	8007ba4 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b7e:	f7fb fc35 	bl	80033ec <HAL_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d909      	bls.n	8007ba4 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e111      	b.n	8007db8 <HAL_RCC_OscConfig+0x63c>
 8007b94:	40023800 	.word	0x40023800
 8007b98:	42470e80 	.word	0x42470e80
 8007b9c:	0800f2b8 	.word	0x0800f2b8
 8007ba0:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ba4:	4b86      	ldr	r3, [pc, #536]	; (8007dc0 <HAL_RCC_OscConfig+0x644>)
 8007ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba8:	f003 0302 	and.w	r3, r3, #2
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1e6      	bne.n	8007b7e <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007bb0:	7dfb      	ldrb	r3, [r7, #23]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d105      	bne.n	8007bc2 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bb6:	4b82      	ldr	r3, [pc, #520]	; (8007dc0 <HAL_RCC_OscConfig+0x644>)
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	4a81      	ldr	r2, [pc, #516]	; (8007dc0 <HAL_RCC_OscConfig+0x644>)
 8007bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00c      	beq.n	8007be4 <HAL_RCC_OscConfig+0x468>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d008      	beq.n	8007be4 <HAL_RCC_OscConfig+0x468>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d004      	beq.n	8007be4 <HAL_RCC_OscConfig+0x468>
 8007bda:	f240 11cd 	movw	r1, #461	; 0x1cd
 8007bde:	4879      	ldr	r0, [pc, #484]	; (8007dc4 <HAL_RCC_OscConfig+0x648>)
 8007be0:	f7fa fd41 	bl	8002666 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f000 80e4 	beq.w	8007db6 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007bee:	4b74      	ldr	r3, [pc, #464]	; (8007dc0 <HAL_RCC_OscConfig+0x644>)
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f003 030c 	and.w	r3, r3, #12
 8007bf6:	2b08      	cmp	r3, #8
 8007bf8:	f000 80a5 	beq.w	8007d46 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	f040 8089 	bne.w	8007d18 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	69db      	ldr	r3, [r3, #28]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d009      	beq.n	8007c22 <HAL_RCC_OscConfig+0x4a6>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	69db      	ldr	r3, [r3, #28]
 8007c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c16:	d004      	beq.n	8007c22 <HAL_RCC_OscConfig+0x4a6>
 8007c18:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8007c1c:	4869      	ldr	r0, [pc, #420]	; (8007dc4 <HAL_RCC_OscConfig+0x648>)
 8007c1e:	f7fa fd22 	bl	8002666 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	2b3f      	cmp	r3, #63	; 0x3f
 8007c28:	d904      	bls.n	8007c34 <HAL_RCC_OscConfig+0x4b8>
 8007c2a:	f240 11d7 	movw	r1, #471	; 0x1d7
 8007c2e:	4865      	ldr	r0, [pc, #404]	; (8007dc4 <HAL_RCC_OscConfig+0x648>)
 8007c30:	f7fa fd19 	bl	8002666 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c38:	2b31      	cmp	r3, #49	; 0x31
 8007c3a:	d904      	bls.n	8007c46 <HAL_RCC_OscConfig+0x4ca>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c40:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007c44:	d904      	bls.n	8007c50 <HAL_RCC_OscConfig+0x4d4>
 8007c46:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8007c4a:	485e      	ldr	r0, [pc, #376]	; (8007dc4 <HAL_RCC_OscConfig+0x648>)
 8007c4c:	f7fa fd0b 	bl	8002666 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d010      	beq.n	8007c7a <HAL_RCC_OscConfig+0x4fe>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	d00c      	beq.n	8007c7a <HAL_RCC_OscConfig+0x4fe>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c64:	2b06      	cmp	r3, #6
 8007c66:	d008      	beq.n	8007c7a <HAL_RCC_OscConfig+0x4fe>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	d004      	beq.n	8007c7a <HAL_RCC_OscConfig+0x4fe>
 8007c70:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007c74:	4853      	ldr	r0, [pc, #332]	; (8007dc4 <HAL_RCC_OscConfig+0x648>)
 8007c76:	f7fa fcf6 	bl	8002666 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d903      	bls.n	8007c8a <HAL_RCC_OscConfig+0x50e>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c86:	2b0f      	cmp	r3, #15
 8007c88:	d904      	bls.n	8007c94 <HAL_RCC_OscConfig+0x518>
 8007c8a:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8007c8e:	484d      	ldr	r0, [pc, #308]	; (8007dc4 <HAL_RCC_OscConfig+0x648>)
 8007c90:	f7fa fce9 	bl	8002666 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c94:	4b4c      	ldr	r3, [pc, #304]	; (8007dc8 <HAL_RCC_OscConfig+0x64c>)
 8007c96:	2200      	movs	r2, #0
 8007c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c9a:	f7fb fba7 	bl	80033ec <HAL_GetTick>
 8007c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ca0:	e008      	b.n	8007cb4 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ca2:	f7fb fba3 	bl	80033ec <HAL_GetTick>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d901      	bls.n	8007cb4 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e081      	b.n	8007db8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cb4:	4b42      	ldr	r3, [pc, #264]	; (8007dc0 <HAL_RCC_OscConfig+0x644>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1f0      	bne.n	8007ca2 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	69da      	ldr	r2, [r3, #28]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a1b      	ldr	r3, [r3, #32]
 8007cc8:	431a      	orrs	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cce:	019b      	lsls	r3, r3, #6
 8007cd0:	431a      	orrs	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd6:	085b      	lsrs	r3, r3, #1
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	041b      	lsls	r3, r3, #16
 8007cdc:	431a      	orrs	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce2:	061b      	lsls	r3, r3, #24
 8007ce4:	4936      	ldr	r1, [pc, #216]	; (8007dc0 <HAL_RCC_OscConfig+0x644>)
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007cea:	4b37      	ldr	r3, [pc, #220]	; (8007dc8 <HAL_RCC_OscConfig+0x64c>)
 8007cec:	2201      	movs	r2, #1
 8007cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cf0:	f7fb fb7c 	bl	80033ec <HAL_GetTick>
 8007cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cf6:	e008      	b.n	8007d0a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cf8:	f7fb fb78 	bl	80033ec <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d901      	bls.n	8007d0a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e056      	b.n	8007db8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d0a:	4b2d      	ldr	r3, [pc, #180]	; (8007dc0 <HAL_RCC_OscConfig+0x644>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d0f0      	beq.n	8007cf8 <HAL_RCC_OscConfig+0x57c>
 8007d16:	e04e      	b.n	8007db6 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d18:	4b2b      	ldr	r3, [pc, #172]	; (8007dc8 <HAL_RCC_OscConfig+0x64c>)
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d1e:	f7fb fb65 	bl	80033ec <HAL_GetTick>
 8007d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d24:	e008      	b.n	8007d38 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d26:	f7fb fb61 	bl	80033ec <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d901      	bls.n	8007d38 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e03f      	b.n	8007db8 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d38:	4b21      	ldr	r3, [pc, #132]	; (8007dc0 <HAL_RCC_OscConfig+0x644>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1f0      	bne.n	8007d26 <HAL_RCC_OscConfig+0x5aa>
 8007d44:	e037      	b.n	8007db6 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	699b      	ldr	r3, [r3, #24]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d101      	bne.n	8007d52 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e032      	b.n	8007db8 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007d52:	4b1b      	ldr	r3, [pc, #108]	; (8007dc0 <HAL_RCC_OscConfig+0x644>)
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d028      	beq.n	8007db2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d121      	bne.n	8007db2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d11a      	bne.n	8007db2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007d82:	4013      	ands	r3, r2
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007d88:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d111      	bne.n	8007db2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d98:	085b      	lsrs	r3, r3, #1
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d107      	bne.n	8007db2 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d001      	beq.n	8007db6 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e000      	b.n	8007db8 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	40023800 	.word	0x40023800
 8007dc4:	0800f2b8 	.word	0x0800f2b8
 8007dc8:	42470060 	.word	0x42470060

08007dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d101      	bne.n	8007de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e174      	b.n	80080ca <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d003      	beq.n	8007df0 <HAL_RCC_ClockConfig+0x24>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b0f      	cmp	r3, #15
 8007dee:	d904      	bls.n	8007dfa <HAL_RCC_ClockConfig+0x2e>
 8007df0:	f240 215a 	movw	r1, #602	; 0x25a
 8007df4:	487b      	ldr	r0, [pc, #492]	; (8007fe4 <HAL_RCC_ClockConfig+0x218>)
 8007df6:	f7fa fc36 	bl	8002666 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d019      	beq.n	8007e34 <HAL_RCC_ClockConfig+0x68>
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d016      	beq.n	8007e34 <HAL_RCC_ClockConfig+0x68>
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d013      	beq.n	8007e34 <HAL_RCC_ClockConfig+0x68>
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	d010      	beq.n	8007e34 <HAL_RCC_ClockConfig+0x68>
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	2b04      	cmp	r3, #4
 8007e16:	d00d      	beq.n	8007e34 <HAL_RCC_ClockConfig+0x68>
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	2b05      	cmp	r3, #5
 8007e1c:	d00a      	beq.n	8007e34 <HAL_RCC_ClockConfig+0x68>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b06      	cmp	r3, #6
 8007e22:	d007      	beq.n	8007e34 <HAL_RCC_ClockConfig+0x68>
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	2b07      	cmp	r3, #7
 8007e28:	d004      	beq.n	8007e34 <HAL_RCC_ClockConfig+0x68>
 8007e2a:	f240 215b 	movw	r1, #603	; 0x25b
 8007e2e:	486d      	ldr	r0, [pc, #436]	; (8007fe4 <HAL_RCC_ClockConfig+0x218>)
 8007e30:	f7fa fc19 	bl	8002666 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e34:	4b6c      	ldr	r3, [pc, #432]	; (8007fe8 <HAL_RCC_ClockConfig+0x21c>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0307 	and.w	r3, r3, #7
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d90c      	bls.n	8007e5c <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e42:	4b69      	ldr	r3, [pc, #420]	; (8007fe8 <HAL_RCC_ClockConfig+0x21c>)
 8007e44:	683a      	ldr	r2, [r7, #0]
 8007e46:	b2d2      	uxtb	r2, r2
 8007e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e4a:	4b67      	ldr	r3, [pc, #412]	; (8007fe8 <HAL_RCC_ClockConfig+0x21c>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 0307 	and.w	r3, r3, #7
 8007e52:	683a      	ldr	r2, [r7, #0]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d001      	beq.n	8007e5c <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e136      	b.n	80080ca <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 0302 	and.w	r3, r3, #2
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d049      	beq.n	8007efc <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0304 	and.w	r3, r3, #4
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d005      	beq.n	8007e80 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e74:	4b5d      	ldr	r3, [pc, #372]	; (8007fec <HAL_RCC_ClockConfig+0x220>)
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	4a5c      	ldr	r2, [pc, #368]	; (8007fec <HAL_RCC_ClockConfig+0x220>)
 8007e7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007e7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0308 	and.w	r3, r3, #8
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d005      	beq.n	8007e98 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e8c:	4b57      	ldr	r3, [pc, #348]	; (8007fec <HAL_RCC_ClockConfig+0x220>)
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	4a56      	ldr	r2, [pc, #344]	; (8007fec <HAL_RCC_ClockConfig+0x220>)
 8007e92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007e96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d024      	beq.n	8007eea <HAL_RCC_ClockConfig+0x11e>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	2b80      	cmp	r3, #128	; 0x80
 8007ea6:	d020      	beq.n	8007eea <HAL_RCC_ClockConfig+0x11e>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	2b90      	cmp	r3, #144	; 0x90
 8007eae:	d01c      	beq.n	8007eea <HAL_RCC_ClockConfig+0x11e>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	2ba0      	cmp	r3, #160	; 0xa0
 8007eb6:	d018      	beq.n	8007eea <HAL_RCC_ClockConfig+0x11e>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	2bb0      	cmp	r3, #176	; 0xb0
 8007ebe:	d014      	beq.n	8007eea <HAL_RCC_ClockConfig+0x11e>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	2bc0      	cmp	r3, #192	; 0xc0
 8007ec6:	d010      	beq.n	8007eea <HAL_RCC_ClockConfig+0x11e>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	2bd0      	cmp	r3, #208	; 0xd0
 8007ece:	d00c      	beq.n	8007eea <HAL_RCC_ClockConfig+0x11e>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	2be0      	cmp	r3, #224	; 0xe0
 8007ed6:	d008      	beq.n	8007eea <HAL_RCC_ClockConfig+0x11e>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	2bf0      	cmp	r3, #240	; 0xf0
 8007ede:	d004      	beq.n	8007eea <HAL_RCC_ClockConfig+0x11e>
 8007ee0:	f240 217e 	movw	r1, #638	; 0x27e
 8007ee4:	483f      	ldr	r0, [pc, #252]	; (8007fe4 <HAL_RCC_ClockConfig+0x218>)
 8007ee6:	f7fa fbbe 	bl	8002666 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007eea:	4b40      	ldr	r3, [pc, #256]	; (8007fec <HAL_RCC_ClockConfig+0x220>)
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	493d      	ldr	r1, [pc, #244]	; (8007fec <HAL_RCC_ClockConfig+0x220>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d059      	beq.n	8007fbc <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d010      	beq.n	8007f32 <HAL_RCC_ClockConfig+0x166>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d00c      	beq.n	8007f32 <HAL_RCC_ClockConfig+0x166>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d008      	beq.n	8007f32 <HAL_RCC_ClockConfig+0x166>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	2b03      	cmp	r3, #3
 8007f26:	d004      	beq.n	8007f32 <HAL_RCC_ClockConfig+0x166>
 8007f28:	f240 2185 	movw	r1, #645	; 0x285
 8007f2c:	482d      	ldr	r0, [pc, #180]	; (8007fe4 <HAL_RCC_ClockConfig+0x218>)
 8007f2e:	f7fa fb9a 	bl	8002666 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d107      	bne.n	8007f4a <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f3a:	4b2c      	ldr	r3, [pc, #176]	; (8007fec <HAL_RCC_ClockConfig+0x220>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d119      	bne.n	8007f7a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e0bf      	b.n	80080ca <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d003      	beq.n	8007f5a <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f56:	2b03      	cmp	r3, #3
 8007f58:	d107      	bne.n	8007f6a <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f5a:	4b24      	ldr	r3, [pc, #144]	; (8007fec <HAL_RCC_ClockConfig+0x220>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d109      	bne.n	8007f7a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e0af      	b.n	80080ca <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f6a:	4b20      	ldr	r3, [pc, #128]	; (8007fec <HAL_RCC_ClockConfig+0x220>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0302 	and.w	r3, r3, #2
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e0a7      	b.n	80080ca <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f7a:	4b1c      	ldr	r3, [pc, #112]	; (8007fec <HAL_RCC_ClockConfig+0x220>)
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f023 0203 	bic.w	r2, r3, #3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	4919      	ldr	r1, [pc, #100]	; (8007fec <HAL_RCC_ClockConfig+0x220>)
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f8c:	f7fb fa2e 	bl	80033ec <HAL_GetTick>
 8007f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f92:	e00a      	b.n	8007faa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f94:	f7fb fa2a 	bl	80033ec <HAL_GetTick>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d901      	bls.n	8007faa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e08f      	b.n	80080ca <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007faa:	4b10      	ldr	r3, [pc, #64]	; (8007fec <HAL_RCC_ClockConfig+0x220>)
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f003 020c 	and.w	r2, r3, #12
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d1eb      	bne.n	8007f94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007fbc:	4b0a      	ldr	r3, [pc, #40]	; (8007fe8 <HAL_RCC_ClockConfig+0x21c>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0307 	and.w	r3, r3, #7
 8007fc4:	683a      	ldr	r2, [r7, #0]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d212      	bcs.n	8007ff0 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fca:	4b07      	ldr	r3, [pc, #28]	; (8007fe8 <HAL_RCC_ClockConfig+0x21c>)
 8007fcc:	683a      	ldr	r2, [r7, #0]
 8007fce:	b2d2      	uxtb	r2, r2
 8007fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fd2:	4b05      	ldr	r3, [pc, #20]	; (8007fe8 <HAL_RCC_ClockConfig+0x21c>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 0307 	and.w	r3, r3, #7
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d007      	beq.n	8007ff0 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e072      	b.n	80080ca <HAL_RCC_ClockConfig+0x2fe>
 8007fe4:	0800f2b8 	.word	0x0800f2b8
 8007fe8:	40023c00 	.word	0x40023c00
 8007fec:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 0304 	and.w	r3, r3, #4
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d025      	beq.n	8008048 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d018      	beq.n	8008036 <HAL_RCC_ClockConfig+0x26a>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800800c:	d013      	beq.n	8008036 <HAL_RCC_ClockConfig+0x26a>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008016:	d00e      	beq.n	8008036 <HAL_RCC_ClockConfig+0x26a>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008020:	d009      	beq.n	8008036 <HAL_RCC_ClockConfig+0x26a>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800802a:	d004      	beq.n	8008036 <HAL_RCC_ClockConfig+0x26a>
 800802c:	f240 21c3 	movw	r1, #707	; 0x2c3
 8008030:	4828      	ldr	r0, [pc, #160]	; (80080d4 <HAL_RCC_ClockConfig+0x308>)
 8008032:	f7fa fb18 	bl	8002666 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008036:	4b28      	ldr	r3, [pc, #160]	; (80080d8 <HAL_RCC_ClockConfig+0x30c>)
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	4925      	ldr	r1, [pc, #148]	; (80080d8 <HAL_RCC_ClockConfig+0x30c>)
 8008044:	4313      	orrs	r3, r2
 8008046:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0308 	and.w	r3, r3, #8
 8008050:	2b00      	cmp	r3, #0
 8008052:	d026      	beq.n	80080a2 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d018      	beq.n	800808e <HAL_RCC_ClockConfig+0x2c2>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008064:	d013      	beq.n	800808e <HAL_RCC_ClockConfig+0x2c2>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800806e:	d00e      	beq.n	800808e <HAL_RCC_ClockConfig+0x2c2>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008078:	d009      	beq.n	800808e <HAL_RCC_ClockConfig+0x2c2>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8008082:	d004      	beq.n	800808e <HAL_RCC_ClockConfig+0x2c2>
 8008084:	f240 21ca 	movw	r1, #714	; 0x2ca
 8008088:	4812      	ldr	r0, [pc, #72]	; (80080d4 <HAL_RCC_ClockConfig+0x308>)
 800808a:	f7fa faec 	bl	8002666 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800808e:	4b12      	ldr	r3, [pc, #72]	; (80080d8 <HAL_RCC_ClockConfig+0x30c>)
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	00db      	lsls	r3, r3, #3
 800809c:	490e      	ldr	r1, [pc, #56]	; (80080d8 <HAL_RCC_ClockConfig+0x30c>)
 800809e:	4313      	orrs	r3, r2
 80080a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80080a2:	f000 f821 	bl	80080e8 <HAL_RCC_GetSysClockFreq>
 80080a6:	4602      	mov	r2, r0
 80080a8:	4b0b      	ldr	r3, [pc, #44]	; (80080d8 <HAL_RCC_ClockConfig+0x30c>)
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	091b      	lsrs	r3, r3, #4
 80080ae:	f003 030f 	and.w	r3, r3, #15
 80080b2:	490a      	ldr	r1, [pc, #40]	; (80080dc <HAL_RCC_ClockConfig+0x310>)
 80080b4:	5ccb      	ldrb	r3, [r1, r3]
 80080b6:	fa22 f303 	lsr.w	r3, r2, r3
 80080ba:	4a09      	ldr	r2, [pc, #36]	; (80080e0 <HAL_RCC_ClockConfig+0x314>)
 80080bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80080be:	4b09      	ldr	r3, [pc, #36]	; (80080e4 <HAL_RCC_ClockConfig+0x318>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fa fc82 	bl	80029cc <HAL_InitTick>

  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	0800f2b8 	.word	0x0800f2b8
 80080d8:	40023800 	.word	0x40023800
 80080dc:	0800f6c4 	.word	0x0800f6c4
 80080e0:	20000004 	.word	0x20000004
 80080e4:	20000008 	.word	0x20000008

080080e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080ec:	b094      	sub	sp, #80	; 0x50
 80080ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80080f0:	2300      	movs	r3, #0
 80080f2:	647b      	str	r3, [r7, #68]	; 0x44
 80080f4:	2300      	movs	r3, #0
 80080f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080f8:	2300      	movs	r3, #0
 80080fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80080fc:	2300      	movs	r3, #0
 80080fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008100:	4b79      	ldr	r3, [pc, #484]	; (80082e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f003 030c 	and.w	r3, r3, #12
 8008108:	2b08      	cmp	r3, #8
 800810a:	d00d      	beq.n	8008128 <HAL_RCC_GetSysClockFreq+0x40>
 800810c:	2b08      	cmp	r3, #8
 800810e:	f200 80e1 	bhi.w	80082d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008112:	2b00      	cmp	r3, #0
 8008114:	d002      	beq.n	800811c <HAL_RCC_GetSysClockFreq+0x34>
 8008116:	2b04      	cmp	r3, #4
 8008118:	d003      	beq.n	8008122 <HAL_RCC_GetSysClockFreq+0x3a>
 800811a:	e0db      	b.n	80082d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800811c:	4b73      	ldr	r3, [pc, #460]	; (80082ec <HAL_RCC_GetSysClockFreq+0x204>)
 800811e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008120:	e0db      	b.n	80082da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008122:	4b73      	ldr	r3, [pc, #460]	; (80082f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8008124:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008126:	e0d8      	b.n	80082da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008128:	4b6f      	ldr	r3, [pc, #444]	; (80082e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008130:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008132:	4b6d      	ldr	r3, [pc, #436]	; (80082e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d063      	beq.n	8008206 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800813e:	4b6a      	ldr	r3, [pc, #424]	; (80082e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	099b      	lsrs	r3, r3, #6
 8008144:	2200      	movs	r2, #0
 8008146:	63bb      	str	r3, [r7, #56]	; 0x38
 8008148:	63fa      	str	r2, [r7, #60]	; 0x3c
 800814a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008150:	633b      	str	r3, [r7, #48]	; 0x30
 8008152:	2300      	movs	r3, #0
 8008154:	637b      	str	r3, [r7, #52]	; 0x34
 8008156:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800815a:	4622      	mov	r2, r4
 800815c:	462b      	mov	r3, r5
 800815e:	f04f 0000 	mov.w	r0, #0
 8008162:	f04f 0100 	mov.w	r1, #0
 8008166:	0159      	lsls	r1, r3, #5
 8008168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800816c:	0150      	lsls	r0, r2, #5
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	4621      	mov	r1, r4
 8008174:	1a51      	subs	r1, r2, r1
 8008176:	6139      	str	r1, [r7, #16]
 8008178:	4629      	mov	r1, r5
 800817a:	eb63 0301 	sbc.w	r3, r3, r1
 800817e:	617b      	str	r3, [r7, #20]
 8008180:	f04f 0200 	mov.w	r2, #0
 8008184:	f04f 0300 	mov.w	r3, #0
 8008188:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800818c:	4659      	mov	r1, fp
 800818e:	018b      	lsls	r3, r1, #6
 8008190:	4651      	mov	r1, sl
 8008192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008196:	4651      	mov	r1, sl
 8008198:	018a      	lsls	r2, r1, #6
 800819a:	4651      	mov	r1, sl
 800819c:	ebb2 0801 	subs.w	r8, r2, r1
 80081a0:	4659      	mov	r1, fp
 80081a2:	eb63 0901 	sbc.w	r9, r3, r1
 80081a6:	f04f 0200 	mov.w	r2, #0
 80081aa:	f04f 0300 	mov.w	r3, #0
 80081ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081ba:	4690      	mov	r8, r2
 80081bc:	4699      	mov	r9, r3
 80081be:	4623      	mov	r3, r4
 80081c0:	eb18 0303 	adds.w	r3, r8, r3
 80081c4:	60bb      	str	r3, [r7, #8]
 80081c6:	462b      	mov	r3, r5
 80081c8:	eb49 0303 	adc.w	r3, r9, r3
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	f04f 0200 	mov.w	r2, #0
 80081d2:	f04f 0300 	mov.w	r3, #0
 80081d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80081da:	4629      	mov	r1, r5
 80081dc:	024b      	lsls	r3, r1, #9
 80081de:	4621      	mov	r1, r4
 80081e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80081e4:	4621      	mov	r1, r4
 80081e6:	024a      	lsls	r2, r1, #9
 80081e8:	4610      	mov	r0, r2
 80081ea:	4619      	mov	r1, r3
 80081ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081ee:	2200      	movs	r2, #0
 80081f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80081f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081f8:	f7f7 fff2 	bl	80001e0 <__aeabi_uldivmod>
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	4613      	mov	r3, r2
 8008202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008204:	e058      	b.n	80082b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008206:	4b38      	ldr	r3, [pc, #224]	; (80082e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	099b      	lsrs	r3, r3, #6
 800820c:	2200      	movs	r2, #0
 800820e:	4618      	mov	r0, r3
 8008210:	4611      	mov	r1, r2
 8008212:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008216:	623b      	str	r3, [r7, #32]
 8008218:	2300      	movs	r3, #0
 800821a:	627b      	str	r3, [r7, #36]	; 0x24
 800821c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008220:	4642      	mov	r2, r8
 8008222:	464b      	mov	r3, r9
 8008224:	f04f 0000 	mov.w	r0, #0
 8008228:	f04f 0100 	mov.w	r1, #0
 800822c:	0159      	lsls	r1, r3, #5
 800822e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008232:	0150      	lsls	r0, r2, #5
 8008234:	4602      	mov	r2, r0
 8008236:	460b      	mov	r3, r1
 8008238:	4641      	mov	r1, r8
 800823a:	ebb2 0a01 	subs.w	sl, r2, r1
 800823e:	4649      	mov	r1, r9
 8008240:	eb63 0b01 	sbc.w	fp, r3, r1
 8008244:	f04f 0200 	mov.w	r2, #0
 8008248:	f04f 0300 	mov.w	r3, #0
 800824c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008250:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008254:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008258:	ebb2 040a 	subs.w	r4, r2, sl
 800825c:	eb63 050b 	sbc.w	r5, r3, fp
 8008260:	f04f 0200 	mov.w	r2, #0
 8008264:	f04f 0300 	mov.w	r3, #0
 8008268:	00eb      	lsls	r3, r5, #3
 800826a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800826e:	00e2      	lsls	r2, r4, #3
 8008270:	4614      	mov	r4, r2
 8008272:	461d      	mov	r5, r3
 8008274:	4643      	mov	r3, r8
 8008276:	18e3      	adds	r3, r4, r3
 8008278:	603b      	str	r3, [r7, #0]
 800827a:	464b      	mov	r3, r9
 800827c:	eb45 0303 	adc.w	r3, r5, r3
 8008280:	607b      	str	r3, [r7, #4]
 8008282:	f04f 0200 	mov.w	r2, #0
 8008286:	f04f 0300 	mov.w	r3, #0
 800828a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800828e:	4629      	mov	r1, r5
 8008290:	028b      	lsls	r3, r1, #10
 8008292:	4621      	mov	r1, r4
 8008294:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008298:	4621      	mov	r1, r4
 800829a:	028a      	lsls	r2, r1, #10
 800829c:	4610      	mov	r0, r2
 800829e:	4619      	mov	r1, r3
 80082a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082a2:	2200      	movs	r2, #0
 80082a4:	61bb      	str	r3, [r7, #24]
 80082a6:	61fa      	str	r2, [r7, #28]
 80082a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082ac:	f7f7 ff98 	bl	80001e0 <__aeabi_uldivmod>
 80082b0:	4602      	mov	r2, r0
 80082b2:	460b      	mov	r3, r1
 80082b4:	4613      	mov	r3, r2
 80082b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80082b8:	4b0b      	ldr	r3, [pc, #44]	; (80082e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	0c1b      	lsrs	r3, r3, #16
 80082be:	f003 0303 	and.w	r3, r3, #3
 80082c2:	3301      	adds	r3, #1
 80082c4:	005b      	lsls	r3, r3, #1
 80082c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80082c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80082d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80082d2:	e002      	b.n	80082da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80082d4:	4b05      	ldr	r3, [pc, #20]	; (80082ec <HAL_RCC_GetSysClockFreq+0x204>)
 80082d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80082d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80082da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3750      	adds	r7, #80	; 0x50
 80082e0:	46bd      	mov	sp, r7
 80082e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082e6:	bf00      	nop
 80082e8:	40023800 	.word	0x40023800
 80082ec:	00f42400 	.word	0x00f42400
 80082f0:	007a1200 	.word	0x007a1200

080082f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082f4:	b480      	push	{r7}
 80082f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082f8:	4b03      	ldr	r3, [pc, #12]	; (8008308 <HAL_RCC_GetHCLKFreq+0x14>)
 80082fa:	681b      	ldr	r3, [r3, #0]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	20000004 	.word	0x20000004

0800830c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008310:	f7ff fff0 	bl	80082f4 <HAL_RCC_GetHCLKFreq>
 8008314:	4602      	mov	r2, r0
 8008316:	4b05      	ldr	r3, [pc, #20]	; (800832c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	0a9b      	lsrs	r3, r3, #10
 800831c:	f003 0307 	and.w	r3, r3, #7
 8008320:	4903      	ldr	r1, [pc, #12]	; (8008330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008322:	5ccb      	ldrb	r3, [r1, r3]
 8008324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008328:	4618      	mov	r0, r3
 800832a:	bd80      	pop	{r7, pc}
 800832c:	40023800 	.word	0x40023800
 8008330:	0800f6d4 	.word	0x0800f6d4

08008334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008338:	f7ff ffdc 	bl	80082f4 <HAL_RCC_GetHCLKFreq>
 800833c:	4602      	mov	r2, r0
 800833e:	4b05      	ldr	r3, [pc, #20]	; (8008354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	0b5b      	lsrs	r3, r3, #13
 8008344:	f003 0307 	and.w	r3, r3, #7
 8008348:	4903      	ldr	r1, [pc, #12]	; (8008358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800834a:	5ccb      	ldrb	r3, [r1, r3]
 800834c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008350:	4618      	mov	r0, r3
 8008352:	bd80      	pop	{r7, pc}
 8008354:	40023800 	.word	0x40023800
 8008358:	0800f6d4 	.word	0x0800f6d4

0800835c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	220f      	movs	r2, #15
 800836a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800836c:	4b12      	ldr	r3, [pc, #72]	; (80083b8 <HAL_RCC_GetClockConfig+0x5c>)
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	f003 0203 	and.w	r2, r3, #3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008378:	4b0f      	ldr	r3, [pc, #60]	; (80083b8 <HAL_RCC_GetClockConfig+0x5c>)
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008384:	4b0c      	ldr	r3, [pc, #48]	; (80083b8 <HAL_RCC_GetClockConfig+0x5c>)
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008390:	4b09      	ldr	r3, [pc, #36]	; (80083b8 <HAL_RCC_GetClockConfig+0x5c>)
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	08db      	lsrs	r3, r3, #3
 8008396:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800839e:	4b07      	ldr	r3, [pc, #28]	; (80083bc <HAL_RCC_GetClockConfig+0x60>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 0207 	and.w	r2, r3, #7
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	601a      	str	r2, [r3, #0]
}
 80083aa:	bf00      	nop
 80083ac:	370c      	adds	r7, #12
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	40023800 	.word	0x40023800
 80083bc:	40023c00 	.word	0x40023c00

080083c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80083c8:	2300      	movs	r3, #0
 80083ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80083cc:	2300      	movs	r3, #0
 80083ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d003      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2b0f      	cmp	r3, #15
 80083de:	d904      	bls.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80083e0:	f640 11d7 	movw	r1, #2519	; 0x9d7
 80083e4:	4834      	ldr	r0, [pc, #208]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80083e6:	f7fa f93e 	bl	8002666 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d105      	bne.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d066      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d903      	bls.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	2b07      	cmp	r3, #7
 8008410:	d904      	bls.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8008412:	f640 11de 	movw	r1, #2526	; 0x9de
 8008416:	4828      	ldr	r0, [pc, #160]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8008418:	f7fa f925 	bl	8002666 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	2b31      	cmp	r3, #49	; 0x31
 8008422:	d904      	bls.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800842c:	d904      	bls.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800842e:	f640 11df 	movw	r1, #2527	; 0x9df
 8008432:	4821      	ldr	r0, [pc, #132]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8008434:	f7fa f917 	bl	8002666 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d903      	bls.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	2b3f      	cmp	r3, #63	; 0x3f
 8008446:	d904      	bls.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8008448:	f640 11e1 	movw	r1, #2529	; 0x9e1
 800844c:	481a      	ldr	r0, [pc, #104]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800844e:	f7fa f90a 	bl	8002666 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008452:	4b1a      	ldr	r3, [pc, #104]	; (80084bc <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8008454:	2200      	movs	r2, #0
 8008456:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008458:	f7fa ffc8 	bl	80033ec <HAL_GetTick>
 800845c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800845e:	e008      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008460:	f7fa ffc4 	bl	80033ec <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	2b02      	cmp	r3, #2
 800846c:	d901      	bls.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e1b3      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008472:	4b13      	ldr	r3, [pc, #76]	; (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1f0      	bne.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	019b      	lsls	r3, r3, #6
 8008488:	431a      	orrs	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	071b      	lsls	r3, r3, #28
 8008490:	490b      	ldr	r1, [pc, #44]	; (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8008492:	4313      	orrs	r3, r2
 8008494:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008498:	4b08      	ldr	r3, [pc, #32]	; (80084bc <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 800849a:	2201      	movs	r2, #1
 800849c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800849e:	f7fa ffa5 	bl	80033ec <HAL_GetTick>
 80084a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084a4:	e00e      	b.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80084a6:	f7fa ffa1 	bl	80033ec <HAL_GetTick>
 80084aa:	4602      	mov	r2, r0
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d907      	bls.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e190      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80084b8:	0800f32c 	.word	0x0800f32c
 80084bc:	42470068 	.word	0x42470068
 80084c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084c4:	4b88      	ldr	r3, [pc, #544]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d0ea      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 0302 	and.w	r3, r3, #2
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f000 8173 	beq.w	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084e6:	f000 80a6 	beq.w	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084f2:	f000 80a0 	beq.w	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	4a7c      	ldr	r2, [pc, #496]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	f000 809a 	beq.w	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	4a7a      	ldr	r2, [pc, #488]	; (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008508:	4293      	cmp	r3, r2
 800850a:	f000 8094 	beq.w	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	4a78      	ldr	r2, [pc, #480]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8008514:	4293      	cmp	r3, r2
 8008516:	f000 808e 	beq.w	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	4a76      	ldr	r2, [pc, #472]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008520:	4293      	cmp	r3, r2
 8008522:	f000 8088 	beq.w	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	4a74      	ldr	r2, [pc, #464]	; (80086fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800852c:	4293      	cmp	r3, r2
 800852e:	f000 8082 	beq.w	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	4a72      	ldr	r2, [pc, #456]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d07c      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	4a70      	ldr	r2, [pc, #448]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d077      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	4a6f      	ldr	r2, [pc, #444]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d072      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	4a6d      	ldr	r2, [pc, #436]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d06d      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	4a6c      	ldr	r2, [pc, #432]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d068      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	4a6a      	ldr	r2, [pc, #424]	; (8008714 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d063      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	4a69      	ldr	r2, [pc, #420]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d05e      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	4a67      	ldr	r2, [pc, #412]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d059      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	4a66      	ldr	r2, [pc, #408]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d054      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	4a64      	ldr	r2, [pc, #400]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d04f      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	4a63      	ldr	r2, [pc, #396]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d04a      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	4a61      	ldr	r2, [pc, #388]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d045      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	4a60      	ldr	r2, [pc, #384]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d040      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	4a5e      	ldr	r2, [pc, #376]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d03b      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	4a5d      	ldr	r2, [pc, #372]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d036      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	4a5b      	ldr	r2, [pc, #364]	; (800873c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d031      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	4a5a      	ldr	r2, [pc, #360]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d02c      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	4a58      	ldr	r2, [pc, #352]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d027      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	4a57      	ldr	r2, [pc, #348]	; (8008748 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d022      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	4a55      	ldr	r2, [pc, #340]	; (800874c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d01d      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	4a54      	ldr	r2, [pc, #336]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d018      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	4a52      	ldr	r2, [pc, #328]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d013      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	4a51      	ldr	r2, [pc, #324]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d00e      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	4a4f      	ldr	r2, [pc, #316]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d009      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	4a4e      	ldr	r2, [pc, #312]	; (8008760 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d004      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800862c:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 8008630:	484c      	ldr	r0, [pc, #304]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8008632:	f7fa f818 	bl	8002666 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008636:	2300      	movs	r3, #0
 8008638:	60fb      	str	r3, [r7, #12]
 800863a:	4b2b      	ldr	r3, [pc, #172]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800863c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863e:	4a2a      	ldr	r2, [pc, #168]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008644:	6413      	str	r3, [r2, #64]	; 0x40
 8008646:	4b28      	ldr	r3, [pc, #160]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800864e:	60fb      	str	r3, [r7, #12]
 8008650:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008652:	4b45      	ldr	r3, [pc, #276]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a44      	ldr	r2, [pc, #272]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8008658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800865c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800865e:	f7fa fec5 	bl	80033ec <HAL_GetTick>
 8008662:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008664:	e008      	b.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008666:	f7fa fec1 	bl	80033ec <HAL_GetTick>
 800866a:	4602      	mov	r2, r0
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	2b02      	cmp	r3, #2
 8008672:	d901      	bls.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8008674:	2303      	movs	r3, #3
 8008676:	e0b0      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008678:	4b3b      	ldr	r3, [pc, #236]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008680:	2b00      	cmp	r3, #0
 8008682:	d0f0      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008684:	4b18      	ldr	r3, [pc, #96]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008688:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800868c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d073      	beq.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d06c      	beq.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086a2:	4b11      	ldr	r3, [pc, #68]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80086a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80086ac:	4b2f      	ldr	r3, [pc, #188]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80086ae:	2201      	movs	r2, #1
 80086b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80086b2:	4b2e      	ldr	r3, [pc, #184]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80086b8:	4a0b      	ldr	r2, [pc, #44]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80086be:	4b0a      	ldr	r3, [pc, #40]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80086c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d158      	bne.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80086ca:	f7fa fe8f 	bl	80033ec <HAL_GetTick>
 80086ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086d0:	e04e      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086d2:	f7fa fe8b 	bl	80033ec <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d945      	bls.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e078      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80086e8:	40023800 	.word	0x40023800
 80086ec:	00020300 	.word	0x00020300
 80086f0:	00030300 	.word	0x00030300
 80086f4:	00040300 	.word	0x00040300
 80086f8:	00050300 	.word	0x00050300
 80086fc:	00060300 	.word	0x00060300
 8008700:	00070300 	.word	0x00070300
 8008704:	00080300 	.word	0x00080300
 8008708:	00090300 	.word	0x00090300
 800870c:	000a0300 	.word	0x000a0300
 8008710:	000b0300 	.word	0x000b0300
 8008714:	000c0300 	.word	0x000c0300
 8008718:	000d0300 	.word	0x000d0300
 800871c:	000e0300 	.word	0x000e0300
 8008720:	000f0300 	.word	0x000f0300
 8008724:	00100300 	.word	0x00100300
 8008728:	00110300 	.word	0x00110300
 800872c:	00120300 	.word	0x00120300
 8008730:	00130300 	.word	0x00130300
 8008734:	00140300 	.word	0x00140300
 8008738:	00150300 	.word	0x00150300
 800873c:	00160300 	.word	0x00160300
 8008740:	00170300 	.word	0x00170300
 8008744:	00180300 	.word	0x00180300
 8008748:	00190300 	.word	0x00190300
 800874c:	001a0300 	.word	0x001a0300
 8008750:	001b0300 	.word	0x001b0300
 8008754:	001c0300 	.word	0x001c0300
 8008758:	001d0300 	.word	0x001d0300
 800875c:	001e0300 	.word	0x001e0300
 8008760:	001f0300 	.word	0x001f0300
 8008764:	0800f32c 	.word	0x0800f32c
 8008768:	40007000 	.word	0x40007000
 800876c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008770:	4b1c      	ldr	r3, [pc, #112]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008774:	f003 0302 	and.w	r3, r3, #2
 8008778:	2b00      	cmp	r3, #0
 800877a:	d0aa      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008784:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008788:	d10d      	bne.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800878a:	4b16      	ldr	r3, [pc, #88]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800879a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800879e:	4911      	ldr	r1, [pc, #68]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80087a0:	4313      	orrs	r3, r2
 80087a2:	608b      	str	r3, [r1, #8]
 80087a4:	e005      	b.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80087a6:	4b0f      	ldr	r3, [pc, #60]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	4a0e      	ldr	r2, [pc, #56]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80087ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80087b0:	6093      	str	r3, [r2, #8]
 80087b2:	4b0c      	ldr	r3, [pc, #48]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80087b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087be:	4909      	ldr	r1, [pc, #36]	; (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80087c0:	4313      	orrs	r3, r2
 80087c2:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f003 0308 	and.w	r3, r3, #8
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d003      	beq.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	7d1a      	ldrb	r2, [r3, #20]
 80087d4:	4b04      	ldr	r3, [pc, #16]	; (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80087d6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3718      	adds	r7, #24
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	40023800 	.word	0x40023800
 80087e8:	424711e0 	.word	0x424711e0

080087ec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d101      	bne.n	8008802 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e0e2      	b.n	80089c8 <HAL_RTC_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a72      	ldr	r2, [pc, #456]	; (80089d0 <HAL_RTC_Init+0x1e4>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d004      	beq.n	8008816 <HAL_RTC_Init+0x2a>
 800880c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8008810:	4870      	ldr	r0, [pc, #448]	; (80089d4 <HAL_RTC_Init+0x1e8>)
 8008812:	f7f9 ff28 	bl	8002666 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	2b40      	cmp	r3, #64	; 0x40
 800881c:	d008      	beq.n	8008830 <HAL_RTC_Init+0x44>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d004      	beq.n	8008830 <HAL_RTC_Init+0x44>
 8008826:	f240 1105 	movw	r1, #261	; 0x105
 800882a:	486a      	ldr	r0, [pc, #424]	; (80089d4 <HAL_RTC_Init+0x1e8>)
 800882c:	f7f9 ff1b 	bl	8002666 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	2b7f      	cmp	r3, #127	; 0x7f
 8008836:	d904      	bls.n	8008842 <HAL_RTC_Init+0x56>
 8008838:	f44f 7183 	mov.w	r1, #262	; 0x106
 800883c:	4865      	ldr	r0, [pc, #404]	; (80089d4 <HAL_RTC_Init+0x1e8>)
 800883e:	f7f9 ff12 	bl	8002666 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800884a:	d304      	bcc.n	8008856 <HAL_RTC_Init+0x6a>
 800884c:	f240 1107 	movw	r1, #263	; 0x107
 8008850:	4860      	ldr	r0, [pc, #384]	; (80089d4 <HAL_RTC_Init+0x1e8>)
 8008852:	f7f9 ff08 	bl	8002666 <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d013      	beq.n	8008886 <HAL_RTC_Init+0x9a>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008866:	d00e      	beq.n	8008886 <HAL_RTC_Init+0x9a>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008870:	d009      	beq.n	8008886 <HAL_RTC_Init+0x9a>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800887a:	d004      	beq.n	8008886 <HAL_RTC_Init+0x9a>
 800887c:	f44f 7184 	mov.w	r1, #264	; 0x108
 8008880:	4854      	ldr	r0, [pc, #336]	; (80089d4 <HAL_RTC_Init+0x1e8>)
 8008882:	f7f9 fef0 	bl	8002666 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d009      	beq.n	80088a2 <HAL_RTC_Init+0xb6>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008896:	d004      	beq.n	80088a2 <HAL_RTC_Init+0xb6>
 8008898:	f240 1109 	movw	r1, #265	; 0x109
 800889c:	484d      	ldr	r0, [pc, #308]	; (80089d4 <HAL_RTC_Init+0x1e8>)
 800889e:	f7f9 fee2 	bl	8002666 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d009      	beq.n	80088be <HAL_RTC_Init+0xd2>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	699b      	ldr	r3, [r3, #24]
 80088ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80088b2:	d004      	beq.n	80088be <HAL_RTC_Init+0xd2>
 80088b4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80088b8:	4846      	ldr	r0, [pc, #280]	; (80089d4 <HAL_RTC_Init+0x1e8>)
 80088ba:	f7f9 fed4 	bl	8002666 <assert_failed>

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	7f5b      	ldrb	r3, [r3, #29]
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d123      	bne.n	8008910 <HAL_RTC_Init+0x124>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	771a      	strb	r2, [r3, #28]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a41      	ldr	r2, [pc, #260]	; (80089d8 <HAL_RTC_Init+0x1ec>)
 80088d2:	621a      	str	r2, [r3, #32]
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a41      	ldr	r2, [pc, #260]	; (80089dc <HAL_RTC_Init+0x1f0>)
 80088d8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4a40      	ldr	r2, [pc, #256]	; (80089e0 <HAL_RTC_Init+0x1f4>)
 80088de:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a40      	ldr	r2, [pc, #256]	; (80089e4 <HAL_RTC_Init+0x1f8>)
 80088e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4a3f      	ldr	r2, [pc, #252]	; (80089e8 <HAL_RTC_Init+0x1fc>)
 80088ea:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(RTC_TAMPER2_SUPPORT)
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
#endif /* RTC_TAMPER2_SUPPORT */

    if (hrtc->MspInitCallback == NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d102      	bne.n	80088fa <HAL_RTC_Init+0x10e>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a3d      	ldr	r2, [pc, #244]	; (80089ec <HAL_RTC_Init+0x200>)
 80088f8:	635a      	str	r2, [r3, #52]	; 0x34
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	4798      	blx	r3

    if (hrtc->MspDeInitCallback == NULL)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008906:	2b00      	cmp	r3, #0
 8008908:	d102      	bne.n	8008910 <HAL_RTC_Init+0x124>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a38      	ldr	r2, [pc, #224]	; (80089f0 <HAL_RTC_Init+0x204>)
 800890e:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_RTC_MspInit(hrtc);
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2202      	movs	r2, #2
 8008914:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	22ca      	movs	r2, #202	; 0xca
 800891c:	625a      	str	r2, [r3, #36]	; 0x24
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2253      	movs	r2, #83	; 0x53
 8008924:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fdc8 	bl	80094bc <RTC_EnterInitMode>
 800892c:	4603      	mov	r3, r0
 800892e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008930:	7bfb      	ldrb	r3, [r7, #15]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d12c      	bne.n	8008990 <HAL_RTC_Init+0x1a4>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	6812      	ldr	r2, [r2, #0]
 8008940:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008948:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	6899      	ldr	r1, [r3, #8]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685a      	ldr	r2, [r3, #4]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	431a      	orrs	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	431a      	orrs	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	430a      	orrs	r2, r1
 8008966:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	68d2      	ldr	r2, [r2, #12]
 8008970:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	6919      	ldr	r1, [r3, #16]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	041a      	lsls	r2, r3, #16
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	430a      	orrs	r2, r1
 8008984:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 fdcf 	bl	800952a <RTC_ExitInitMode>
 800898c:	4603      	mov	r3, r0
 800898e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008990:	7bfb      	ldrb	r3, [r7, #15]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d113      	bne.n	80089be <HAL_RTC_Init+0x1d2>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80089a4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	699a      	ldr	r2, [r3, #24]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	430a      	orrs	r2, r1
 80089b6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	22ff      	movs	r2, #255	; 0xff
 80089c4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80089c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	40002800 	.word	0x40002800
 80089d4:	0800f3a4 	.word	0x0800f3a4
 80089d8:	08009459 	.word	0x08009459
 80089dc:	080097a5 	.word	0x080097a5
 80089e0:	080095e7 	.word	0x080095e7
 80089e4:	08009791 	.word	0x08009791
 80089e8:	080095fb 	.word	0x080095fb
 80089ec:	080027c5 	.word	0x080027c5
 80089f0:	0800281d 	.word	0x0800281d

080089f4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80089f4:	b590      	push	{r4, r7, lr}
 80089f6:	b087      	sub	sp, #28
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008a00:	2300      	movs	r3, #0
 8008a02:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d007      	beq.n	8008a1a <HAL_RTC_SetTime+0x26>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d004      	beq.n	8008a1a <HAL_RTC_SetTime+0x26>
 8008a10:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8008a14:	489a      	ldr	r0, [pc, #616]	; (8008c80 <HAL_RTC_SetTime+0x28c>)
 8008a16:	f7f9 fe26 	bl	8002666 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a22:	d00d      	beq.n	8008a40 <HAL_RTC_SetTime+0x4c>
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a2c:	d008      	beq.n	8008a40 <HAL_RTC_SetTime+0x4c>
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d004      	beq.n	8008a40 <HAL_RTC_SetTime+0x4c>
 8008a36:	f240 21b5 	movw	r1, #693	; 0x2b5
 8008a3a:	4891      	ldr	r0, [pc, #580]	; (8008c80 <HAL_RTC_SetTime+0x28c>)
 8008a3c:	f7f9 fe13 	bl	8002666 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d009      	beq.n	8008a5c <HAL_RTC_SetTime+0x68>
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a50:	d004      	beq.n	8008a5c <HAL_RTC_SetTime+0x68>
 8008a52:	f240 21b6 	movw	r1, #694	; 0x2b6
 8008a56:	488a      	ldr	r0, [pc, #552]	; (8008c80 <HAL_RTC_SetTime+0x28c>)
 8008a58:	f7f9 fe05 	bl	8002666 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	7f1b      	ldrb	r3, [r3, #28]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d101      	bne.n	8008a68 <HAL_RTC_SetTime+0x74>
 8008a64:	2302      	movs	r3, #2
 8008a66:	e107      	b.n	8008c78 <HAL_RTC_SetTime+0x284>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2202      	movs	r2, #2
 8008a72:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d15c      	bne.n	8008b34 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d01a      	beq.n	8008abe <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d003      	beq.n	8008a98 <HAL_RTC_SetTime+0xa4>
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	2b0c      	cmp	r3, #12
 8008a96:	d904      	bls.n	8008aa2 <HAL_RTC_SetTime+0xae>
 8008a98:	f240 21c1 	movw	r1, #705	; 0x2c1
 8008a9c:	4878      	ldr	r0, [pc, #480]	; (8008c80 <HAL_RTC_SetTime+0x28c>)
 8008a9e:	f7f9 fde2 	bl	8002666 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	78db      	ldrb	r3, [r3, #3]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d015      	beq.n	8008ad6 <HAL_RTC_SetTime+0xe2>
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	78db      	ldrb	r3, [r3, #3]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d011      	beq.n	8008ad6 <HAL_RTC_SetTime+0xe2>
 8008ab2:	f240 21c2 	movw	r1, #706	; 0x2c2
 8008ab6:	4872      	ldr	r0, [pc, #456]	; (8008c80 <HAL_RTC_SetTime+0x28c>)
 8008ab8:	f7f9 fdd5 	bl	8002666 <assert_failed>
 8008abc:	e00b      	b.n	8008ad6 <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	2b17      	cmp	r3, #23
 8008aca:	d904      	bls.n	8008ad6 <HAL_RTC_SetTime+0xe2>
 8008acc:	f240 21c7 	movw	r1, #711	; 0x2c7
 8008ad0:	486b      	ldr	r0, [pc, #428]	; (8008c80 <HAL_RTC_SetTime+0x28c>)
 8008ad2:	f7f9 fdc8 	bl	8002666 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	785b      	ldrb	r3, [r3, #1]
 8008ada:	2b3b      	cmp	r3, #59	; 0x3b
 8008adc:	d904      	bls.n	8008ae8 <HAL_RTC_SetTime+0xf4>
 8008ade:	f240 21c9 	movw	r1, #713	; 0x2c9
 8008ae2:	4867      	ldr	r0, [pc, #412]	; (8008c80 <HAL_RTC_SetTime+0x28c>)
 8008ae4:	f7f9 fdbf 	bl	8002666 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	789b      	ldrb	r3, [r3, #2]
 8008aec:	2b3b      	cmp	r3, #59	; 0x3b
 8008aee:	d904      	bls.n	8008afa <HAL_RTC_SetTime+0x106>
 8008af0:	f240 21ca 	movw	r1, #714	; 0x2ca
 8008af4:	4862      	ldr	r0, [pc, #392]	; (8008c80 <HAL_RTC_SetTime+0x28c>)
 8008af6:	f7f9 fdb6 	bl	8002666 <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 fd38 	bl	8009574 <RTC_ByteToBcd2>
 8008b04:	4603      	mov	r3, r0
 8008b06:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	785b      	ldrb	r3, [r3, #1]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 fd31 	bl	8009574 <RTC_ByteToBcd2>
 8008b12:	4603      	mov	r3, r0
 8008b14:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008b16:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	789b      	ldrb	r3, [r3, #2]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f000 fd29 	bl	8009574 <RTC_ByteToBcd2>
 8008b22:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b24:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	78db      	ldrb	r3, [r3, #3]
 8008b2c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	617b      	str	r3, [r7, #20]
 8008b32:	e062      	b.n	8008bfa <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d022      	beq.n	8008b88 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 fd31 	bl	80095ae <RTC_Bcd2ToByte>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d007      	beq.n	8008b62 <HAL_RTC_SetTime+0x16e>
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 fd29 	bl	80095ae <RTC_Bcd2ToByte>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b0c      	cmp	r3, #12
 8008b60:	d904      	bls.n	8008b6c <HAL_RTC_SetTime+0x178>
 8008b62:	f240 21d5 	movw	r1, #725	; 0x2d5
 8008b66:	4846      	ldr	r0, [pc, #280]	; (8008c80 <HAL_RTC_SetTime+0x28c>)
 8008b68:	f7f9 fd7d 	bl	8002666 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	78db      	ldrb	r3, [r3, #3]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d019      	beq.n	8008ba8 <HAL_RTC_SetTime+0x1b4>
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	78db      	ldrb	r3, [r3, #3]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d015      	beq.n	8008ba8 <HAL_RTC_SetTime+0x1b4>
 8008b7c:	f240 21d6 	movw	r1, #726	; 0x2d6
 8008b80:	483f      	ldr	r0, [pc, #252]	; (8008c80 <HAL_RTC_SetTime+0x28c>)
 8008b82:	f7f9 fd70 	bl	8002666 <assert_failed>
 8008b86:	e00f      	b.n	8008ba8 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 fd0b 	bl	80095ae <RTC_Bcd2ToByte>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b17      	cmp	r3, #23
 8008b9c:	d904      	bls.n	8008ba8 <HAL_RTC_SetTime+0x1b4>
 8008b9e:	f240 21db 	movw	r1, #731	; 0x2db
 8008ba2:	4837      	ldr	r0, [pc, #220]	; (8008c80 <HAL_RTC_SetTime+0x28c>)
 8008ba4:	f7f9 fd5f 	bl	8002666 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	785b      	ldrb	r3, [r3, #1]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f000 fcfe 	bl	80095ae <RTC_Bcd2ToByte>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b3b      	cmp	r3, #59	; 0x3b
 8008bb6:	d904      	bls.n	8008bc2 <HAL_RTC_SetTime+0x1ce>
 8008bb8:	f240 21dd 	movw	r1, #733	; 0x2dd
 8008bbc:	4830      	ldr	r0, [pc, #192]	; (8008c80 <HAL_RTC_SetTime+0x28c>)
 8008bbe:	f7f9 fd52 	bl	8002666 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	789b      	ldrb	r3, [r3, #2]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f000 fcf1 	bl	80095ae <RTC_Bcd2ToByte>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b3b      	cmp	r3, #59	; 0x3b
 8008bd0:	d904      	bls.n	8008bdc <HAL_RTC_SetTime+0x1e8>
 8008bd2:	f240 21de 	movw	r1, #734	; 0x2de
 8008bd6:	482a      	ldr	r0, [pc, #168]	; (8008c80 <HAL_RTC_SetTime+0x28c>)
 8008bd8:	f7f9 fd45 	bl	8002666 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	785b      	ldrb	r3, [r3, #1]
 8008be6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008be8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008bee:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	78db      	ldrb	r3, [r3, #3]
 8008bf4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	22ca      	movs	r2, #202	; 0xca
 8008c00:	625a      	str	r2, [r3, #36]	; 0x24
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2253      	movs	r2, #83	; 0x53
 8008c08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f000 fc56 	bl	80094bc <RTC_EnterInitMode>
 8008c10:	4603      	mov	r3, r0
 8008c12:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008c14:	7cfb      	ldrb	r3, [r7, #19]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d120      	bne.n	8008c5c <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008c24:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008c28:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	689a      	ldr	r2, [r3, #8]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c38:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	6899      	ldr	r1, [r3, #8]
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	68da      	ldr	r2, [r3, #12]
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	431a      	orrs	r2, r3
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f000 fc69 	bl	800952a <RTC_ExitInitMode>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008c5c:	7cfb      	ldrb	r3, [r7, #19]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d102      	bne.n	8008c68 <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2201      	movs	r2, #1
 8008c66:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	22ff      	movs	r2, #255	; 0xff
 8008c6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	771a      	strb	r2, [r3, #28]

  return status;
 8008c76:	7cfb      	ldrb	r3, [r7, #19]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	371c      	adds	r7, #28
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd90      	pop	{r4, r7, pc}
 8008c80:	0800f3a4 	.word	0x0800f3a4

08008c84 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008c84:	b590      	push	{r4, r7, lr}
 8008c86:	b087      	sub	sp, #28
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008c90:	2300      	movs	r3, #0
 8008c92:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d007      	beq.n	8008caa <HAL_RTC_SetDate+0x26>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d004      	beq.n	8008caa <HAL_RTC_SetDate+0x26>
 8008ca0:	f240 3153 	movw	r1, #851	; 0x353
 8008ca4:	487c      	ldr	r0, [pc, #496]	; (8008e98 <HAL_RTC_SetDate+0x214>)
 8008ca6:	f7f9 fcde 	bl	8002666 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	7f1b      	ldrb	r3, [r3, #28]
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d101      	bne.n	8008cb6 <HAL_RTC_SetDate+0x32>
 8008cb2:	2302      	movs	r3, #2
 8008cb4:	e0ec      	b.n	8008e90 <HAL_RTC_SetDate+0x20c>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2202      	movs	r2, #2
 8008cc0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d10e      	bne.n	8008ce6 <HAL_RTC_SetDate+0x62>
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	785b      	ldrb	r3, [r3, #1]
 8008ccc:	f003 0310 	and.w	r3, r3, #16
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d008      	beq.n	8008ce6 <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	785b      	ldrb	r3, [r3, #1]
 8008cd8:	f023 0310 	bic.w	r3, r3, #16
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	330a      	adds	r3, #10
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d01c      	beq.n	8008d28 <HAL_RTC_SetDate+0xa4>
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d018      	beq.n	8008d28 <HAL_RTC_SetDate+0xa4>
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	2b03      	cmp	r3, #3
 8008cfc:	d014      	beq.n	8008d28 <HAL_RTC_SetDate+0xa4>
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	2b04      	cmp	r3, #4
 8008d04:	d010      	beq.n	8008d28 <HAL_RTC_SetDate+0xa4>
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	2b05      	cmp	r3, #5
 8008d0c:	d00c      	beq.n	8008d28 <HAL_RTC_SetDate+0xa4>
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	2b06      	cmp	r3, #6
 8008d14:	d008      	beq.n	8008d28 <HAL_RTC_SetDate+0xa4>
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	2b07      	cmp	r3, #7
 8008d1c:	d004      	beq.n	8008d28 <HAL_RTC_SetDate+0xa4>
 8008d1e:	f240 315f 	movw	r1, #863	; 0x35f
 8008d22:	485d      	ldr	r0, [pc, #372]	; (8008e98 <HAL_RTC_SetDate+0x214>)
 8008d24:	f7f9 fc9f 	bl	8002666 <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d13f      	bne.n	8008dae <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	78db      	ldrb	r3, [r3, #3]
 8008d32:	2b63      	cmp	r3, #99	; 0x63
 8008d34:	d904      	bls.n	8008d40 <HAL_RTC_SetDate+0xbc>
 8008d36:	f240 3163 	movw	r1, #867	; 0x363
 8008d3a:	4857      	ldr	r0, [pc, #348]	; (8008e98 <HAL_RTC_SetDate+0x214>)
 8008d3c:	f7f9 fc93 	bl	8002666 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	785b      	ldrb	r3, [r3, #1]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d003      	beq.n	8008d50 <HAL_RTC_SetDate+0xcc>
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	785b      	ldrb	r3, [r3, #1]
 8008d4c:	2b0c      	cmp	r3, #12
 8008d4e:	d904      	bls.n	8008d5a <HAL_RTC_SetDate+0xd6>
 8008d50:	f44f 7159 	mov.w	r1, #868	; 0x364
 8008d54:	4850      	ldr	r0, [pc, #320]	; (8008e98 <HAL_RTC_SetDate+0x214>)
 8008d56:	f7f9 fc86 	bl	8002666 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	789b      	ldrb	r3, [r3, #2]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d003      	beq.n	8008d6a <HAL_RTC_SetDate+0xe6>
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	789b      	ldrb	r3, [r3, #2]
 8008d66:	2b1f      	cmp	r3, #31
 8008d68:	d904      	bls.n	8008d74 <HAL_RTC_SetDate+0xf0>
 8008d6a:	f240 3165 	movw	r1, #869	; 0x365
 8008d6e:	484a      	ldr	r0, [pc, #296]	; (8008e98 <HAL_RTC_SetDate+0x214>)
 8008d70:	f7f9 fc79 	bl	8002666 <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	78db      	ldrb	r3, [r3, #3]
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f000 fbfb 	bl	8009574 <RTC_ByteToBcd2>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	785b      	ldrb	r3, [r3, #1]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 fbf4 	bl	8009574 <RTC_ByteToBcd2>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008d90:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	789b      	ldrb	r3, [r3, #2]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f000 fbec 	bl	8009574 <RTC_ByteToBcd2>
 8008d9c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008d9e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008da8:	4313      	orrs	r3, r2
 8008daa:	617b      	str	r3, [r7, #20]
 8008dac:	e045      	b.n	8008e3a <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	78db      	ldrb	r3, [r3, #3]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 fbfb 	bl	80095ae <RTC_Bcd2ToByte>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b63      	cmp	r3, #99	; 0x63
 8008dbc:	d904      	bls.n	8008dc8 <HAL_RTC_SetDate+0x144>
 8008dbe:	f240 316e 	movw	r1, #878	; 0x36e
 8008dc2:	4835      	ldr	r0, [pc, #212]	; (8008e98 <HAL_RTC_SetDate+0x214>)
 8008dc4:	f7f9 fc4f 	bl	8002666 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	785b      	ldrb	r3, [r3, #1]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f000 fbee 	bl	80095ae <RTC_Bcd2ToByte>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d007      	beq.n	8008de8 <HAL_RTC_SetDate+0x164>
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	785b      	ldrb	r3, [r3, #1]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f000 fbe6 	bl	80095ae <RTC_Bcd2ToByte>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b0c      	cmp	r3, #12
 8008de6:	d904      	bls.n	8008df2 <HAL_RTC_SetDate+0x16e>
 8008de8:	f240 316f 	movw	r1, #879	; 0x36f
 8008dec:	482a      	ldr	r0, [pc, #168]	; (8008e98 <HAL_RTC_SetDate+0x214>)
 8008dee:	f7f9 fc3a 	bl	8002666 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	789b      	ldrb	r3, [r3, #2]
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 fbd9 	bl	80095ae <RTC_Bcd2ToByte>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d007      	beq.n	8008e12 <HAL_RTC_SetDate+0x18e>
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	789b      	ldrb	r3, [r3, #2]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f000 fbd1 	bl	80095ae <RTC_Bcd2ToByte>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b1f      	cmp	r3, #31
 8008e10:	d904      	bls.n	8008e1c <HAL_RTC_SetDate+0x198>
 8008e12:	f44f 715c 	mov.w	r1, #880	; 0x370
 8008e16:	4820      	ldr	r0, [pc, #128]	; (8008e98 <HAL_RTC_SetDate+0x214>)
 8008e18:	f7f9 fc25 	bl	8002666 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	78db      	ldrb	r3, [r3, #3]
 8008e20:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	785b      	ldrb	r3, [r3, #1]
 8008e26:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008e28:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008e2a:	68ba      	ldr	r2, [r7, #8]
 8008e2c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008e2e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008e36:	4313      	orrs	r3, r2
 8008e38:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	22ca      	movs	r2, #202	; 0xca
 8008e40:	625a      	str	r2, [r3, #36]	; 0x24
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2253      	movs	r2, #83	; 0x53
 8008e48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f000 fb36 	bl	80094bc <RTC_EnterInitMode>
 8008e50:	4603      	mov	r3, r0
 8008e52:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008e54:	7cfb      	ldrb	r3, [r7, #19]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d10c      	bne.n	8008e74 <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008e64:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e68:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f000 fb5d 	bl	800952a <RTC_ExitInitMode>
 8008e70:	4603      	mov	r3, r0
 8008e72:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008e74:	7cfb      	ldrb	r3, [r7, #19]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d102      	bne.n	8008e80 <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	22ff      	movs	r2, #255	; 0xff
 8008e86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	771a      	strb	r2, [r3, #28]

  return status;
 8008e8e:	7cfb      	ldrb	r3, [r7, #19]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	371c      	adds	r7, #28
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd90      	pop	{r4, r7, pc}
 8008e98:	0800f3a4 	.word	0x0800f3a4

08008e9c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008e9c:	b590      	push	{r4, r7, lr}
 8008e9e:	b089      	sub	sp, #36	; 0x24
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8008eac:	2300      	movs	r3, #0
 8008eae:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d007      	beq.n	8008eca <HAL_RTC_SetAlarm+0x2e>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d004      	beq.n	8008eca <HAL_RTC_SetAlarm+0x2e>
 8008ec0:	f240 31e7 	movw	r1, #999	; 0x3e7
 8008ec4:	4876      	ldr	r0, [pc, #472]	; (80090a0 <HAL_RTC_SetAlarm+0x204>)
 8008ec6:	f7f9 fbce 	bl	8002666 <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ed2:	d009      	beq.n	8008ee8 <HAL_RTC_SetAlarm+0x4c>
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008edc:	d004      	beq.n	8008ee8 <HAL_RTC_SetAlarm+0x4c>
 8008ede:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008ee2:	486f      	ldr	r0, [pc, #444]	; (80090a0 <HAL_RTC_SetAlarm+0x204>)
 8008ee4:	f7f9 fbbf 	bl	8002666 <assert_failed>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	695b      	ldr	r3, [r3, #20]
 8008eec:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d004      	beq.n	8008efe <HAL_RTC_SetAlarm+0x62>
 8008ef4:	f240 31e9 	movw	r1, #1001	; 0x3e9
 8008ef8:	4869      	ldr	r0, [pc, #420]	; (80090a0 <HAL_RTC_SetAlarm+0x204>)
 8008efa:	f7f9 fbb4 	bl	8002666 <assert_failed>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	69db      	ldr	r3, [r3, #28]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d009      	beq.n	8008f1a <HAL_RTC_SetAlarm+0x7e>
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	69db      	ldr	r3, [r3, #28]
 8008f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f0e:	d004      	beq.n	8008f1a <HAL_RTC_SetAlarm+0x7e>
 8008f10:	f240 31ea 	movw	r1, #1002	; 0x3ea
 8008f14:	4862      	ldr	r0, [pc, #392]	; (80090a0 <HAL_RTC_SetAlarm+0x204>)
 8008f16:	f7f9 fba6 	bl	8002666 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f22:	d304      	bcc.n	8008f2e <HAL_RTC_SetAlarm+0x92>
 8008f24:	f240 31eb 	movw	r1, #1003	; 0x3eb
 8008f28:	485d      	ldr	r0, [pc, #372]	; (80090a0 <HAL_RTC_SetAlarm+0x204>)
 8008f2a:	f7f9 fb9c 	bl	8002666 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d04f      	beq.n	8008fd6 <HAL_RTC_SetAlarm+0x13a>
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	699b      	ldr	r3, [r3, #24]
 8008f3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f3e:	d04a      	beq.n	8008fd6 <HAL_RTC_SetAlarm+0x13a>
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	699b      	ldr	r3, [r3, #24]
 8008f44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f48:	d045      	beq.n	8008fd6 <HAL_RTC_SetAlarm+0x13a>
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	699b      	ldr	r3, [r3, #24]
 8008f4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f52:	d040      	beq.n	8008fd6 <HAL_RTC_SetAlarm+0x13a>
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f5c:	d03b      	beq.n	8008fd6 <HAL_RTC_SetAlarm+0x13a>
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008f66:	d036      	beq.n	8008fd6 <HAL_RTC_SetAlarm+0x13a>
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8008f70:	d031      	beq.n	8008fd6 <HAL_RTC_SetAlarm+0x13a>
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8008f7a:	d02c      	beq.n	8008fd6 <HAL_RTC_SetAlarm+0x13a>
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	699b      	ldr	r3, [r3, #24]
 8008f80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f84:	d027      	beq.n	8008fd6 <HAL_RTC_SetAlarm+0x13a>
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8008f8e:	d022      	beq.n	8008fd6 <HAL_RTC_SetAlarm+0x13a>
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8008f98:	d01d      	beq.n	8008fd6 <HAL_RTC_SetAlarm+0x13a>
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8008fa2:	d018      	beq.n	8008fd6 <HAL_RTC_SetAlarm+0x13a>
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008fac:	d013      	beq.n	8008fd6 <HAL_RTC_SetAlarm+0x13a>
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8008fb6:	d00e      	beq.n	8008fd6 <HAL_RTC_SetAlarm+0x13a>
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8008fc0:	d009      	beq.n	8008fd6 <HAL_RTC_SetAlarm+0x13a>
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008fca:	d004      	beq.n	8008fd6 <HAL_RTC_SetAlarm+0x13a>
 8008fcc:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
 8008fd0:	4833      	ldr	r0, [pc, #204]	; (80090a0 <HAL_RTC_SetAlarm+0x204>)
 8008fd2:	f7f9 fb48 	bl	8002666 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	7f1b      	ldrb	r3, [r3, #28]
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d101      	bne.n	8008fe2 <HAL_RTC_SetAlarm+0x146>
 8008fde:	2302      	movs	r3, #2
 8008fe0:	e235      	b.n	800944e <HAL_RTC_SetAlarm+0x5b2>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2202      	movs	r2, #2
 8008fec:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f040 80ad 	bne.w	8009150 <HAL_RTC_SetAlarm+0x2b4>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009000:	2b00      	cmp	r3, #0
 8009002:	d01a      	beq.n	800903a <HAL_RTC_SetAlarm+0x19e>
    {
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d003      	beq.n	8009014 <HAL_RTC_SetAlarm+0x178>
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	2b0c      	cmp	r3, #12
 8009012:	d904      	bls.n	800901e <HAL_RTC_SetAlarm+0x182>
 8009014:	f240 31fa 	movw	r1, #1018	; 0x3fa
 8009018:	4821      	ldr	r0, [pc, #132]	; (80090a0 <HAL_RTC_SetAlarm+0x204>)
 800901a:	f7f9 fb24 	bl	8002666 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	78db      	ldrb	r3, [r3, #3]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d015      	beq.n	8009052 <HAL_RTC_SetAlarm+0x1b6>
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	78db      	ldrb	r3, [r3, #3]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d011      	beq.n	8009052 <HAL_RTC_SetAlarm+0x1b6>
 800902e:	f240 31fb 	movw	r1, #1019	; 0x3fb
 8009032:	481b      	ldr	r0, [pc, #108]	; (80090a0 <HAL_RTC_SetAlarm+0x204>)
 8009034:	f7f9 fb17 	bl	8002666 <assert_failed>
 8009038:	e00b      	b.n	8009052 <HAL_RTC_SetAlarm+0x1b6>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	2200      	movs	r2, #0
 800903e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	2b17      	cmp	r3, #23
 8009046:	d904      	bls.n	8009052 <HAL_RTC_SetAlarm+0x1b6>
 8009048:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800904c:	4814      	ldr	r0, [pc, #80]	; (80090a0 <HAL_RTC_SetAlarm+0x204>)
 800904e:	f7f9 fb0a 	bl	8002666 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	785b      	ldrb	r3, [r3, #1]
 8009056:	2b3b      	cmp	r3, #59	; 0x3b
 8009058:	d904      	bls.n	8009064 <HAL_RTC_SetAlarm+0x1c8>
 800905a:	f240 4102 	movw	r1, #1026	; 0x402
 800905e:	4810      	ldr	r0, [pc, #64]	; (80090a0 <HAL_RTC_SetAlarm+0x204>)
 8009060:	f7f9 fb01 	bl	8002666 <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	789b      	ldrb	r3, [r3, #2]
 8009068:	2b3b      	cmp	r3, #59	; 0x3b
 800906a:	d904      	bls.n	8009076 <HAL_RTC_SetAlarm+0x1da>
 800906c:	f240 4103 	movw	r1, #1027	; 0x403
 8009070:	480b      	ldr	r0, [pc, #44]	; (80090a0 <HAL_RTC_SetAlarm+0x204>)
 8009072:	f7f9 faf8 	bl	8002666 <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	69db      	ldr	r3, [r3, #28]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d112      	bne.n	80090a4 <HAL_RTC_SetAlarm+0x208>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d004      	beq.n	8009092 <HAL_RTC_SetAlarm+0x1f6>
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800908e:	2b1f      	cmp	r3, #31
 8009090:	d930      	bls.n	80090f4 <HAL_RTC_SetAlarm+0x258>
 8009092:	f240 4107 	movw	r1, #1031	; 0x407
 8009096:	4802      	ldr	r0, [pc, #8]	; (80090a0 <HAL_RTC_SetAlarm+0x204>)
 8009098:	f7f9 fae5 	bl	8002666 <assert_failed>
 800909c:	e02a      	b.n	80090f4 <HAL_RTC_SetAlarm+0x258>
 800909e:	bf00      	nop
 80090a0:	0800f3a4 	.word	0x0800f3a4
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d022      	beq.n	80090f4 <HAL_RTC_SetAlarm+0x258>
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d01d      	beq.n	80090f4 <HAL_RTC_SetAlarm+0x258>
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090be:	2b03      	cmp	r3, #3
 80090c0:	d018      	beq.n	80090f4 <HAL_RTC_SetAlarm+0x258>
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090c8:	2b04      	cmp	r3, #4
 80090ca:	d013      	beq.n	80090f4 <HAL_RTC_SetAlarm+0x258>
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090d2:	2b05      	cmp	r3, #5
 80090d4:	d00e      	beq.n	80090f4 <HAL_RTC_SetAlarm+0x258>
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090dc:	2b06      	cmp	r3, #6
 80090de:	d009      	beq.n	80090f4 <HAL_RTC_SetAlarm+0x258>
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090e6:	2b07      	cmp	r3, #7
 80090e8:	d004      	beq.n	80090f4 <HAL_RTC_SetAlarm+0x258>
 80090ea:	f240 410b 	movw	r1, #1035	; 0x40b
 80090ee:	48a1      	ldr	r0, [pc, #644]	; (8009374 <HAL_RTC_SetAlarm+0x4d8>)
 80090f0:	f7f9 fab9 	bl	8002666 <assert_failed>
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f000 fa3b 	bl	8009574 <RTC_ByteToBcd2>
 80090fe:	4603      	mov	r3, r0
 8009100:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	785b      	ldrb	r3, [r3, #1]
 8009106:	4618      	mov	r0, r3
 8009108:	f000 fa34 	bl	8009574 <RTC_ByteToBcd2>
 800910c:	4603      	mov	r3, r0
 800910e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009110:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	789b      	ldrb	r3, [r3, #2]
 8009116:	4618      	mov	r0, r3
 8009118:	f000 fa2c 	bl	8009574 <RTC_ByteToBcd2>
 800911c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800911e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	78db      	ldrb	r3, [r3, #3]
 8009126:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009128:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009132:	4618      	mov	r0, r3
 8009134:	f000 fa1e 	bl	8009574 <RTC_ByteToBcd2>
 8009138:	4603      	mov	r3, r0
 800913a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800913c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009144:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800914a:	4313      	orrs	r3, r2
 800914c:	61fb      	str	r3, [r7, #28]
 800914e:	e0cd      	b.n	80092ec <HAL_RTC_SetAlarm+0x450>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800915a:	2b00      	cmp	r3, #0
 800915c:	d022      	beq.n	80091a4 <HAL_RTC_SetAlarm+0x308>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	4618      	mov	r0, r3
 8009164:	f000 fa23 	bl	80095ae <RTC_Bcd2ToByte>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d007      	beq.n	800917e <HAL_RTC_SetAlarm+0x2e2>
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	4618      	mov	r0, r3
 8009174:	f000 fa1b 	bl	80095ae <RTC_Bcd2ToByte>
 8009178:	4603      	mov	r3, r0
 800917a:	2b0c      	cmp	r3, #12
 800917c:	d904      	bls.n	8009188 <HAL_RTC_SetAlarm+0x2ec>
 800917e:	f240 411a 	movw	r1, #1050	; 0x41a
 8009182:	487c      	ldr	r0, [pc, #496]	; (8009374 <HAL_RTC_SetAlarm+0x4d8>)
 8009184:	f7f9 fa6f 	bl	8002666 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	78db      	ldrb	r3, [r3, #3]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d019      	beq.n	80091c4 <HAL_RTC_SetAlarm+0x328>
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	78db      	ldrb	r3, [r3, #3]
 8009194:	2b01      	cmp	r3, #1
 8009196:	d015      	beq.n	80091c4 <HAL_RTC_SetAlarm+0x328>
 8009198:	f240 411b 	movw	r1, #1051	; 0x41b
 800919c:	4875      	ldr	r0, [pc, #468]	; (8009374 <HAL_RTC_SetAlarm+0x4d8>)
 800919e:	f7f9 fa62 	bl	8002666 <assert_failed>
 80091a2:	e00f      	b.n	80091c4 <HAL_RTC_SetAlarm+0x328>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	2200      	movs	r2, #0
 80091a8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	4618      	mov	r0, r3
 80091b0:	f000 f9fd 	bl	80095ae <RTC_Bcd2ToByte>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b17      	cmp	r3, #23
 80091b8:	d904      	bls.n	80091c4 <HAL_RTC_SetAlarm+0x328>
 80091ba:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80091be:	486d      	ldr	r0, [pc, #436]	; (8009374 <HAL_RTC_SetAlarm+0x4d8>)
 80091c0:	f7f9 fa51 	bl	8002666 <assert_failed>
    }

    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	785b      	ldrb	r3, [r3, #1]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f000 f9f0 	bl	80095ae <RTC_Bcd2ToByte>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b3b      	cmp	r3, #59	; 0x3b
 80091d2:	d904      	bls.n	80091de <HAL_RTC_SetAlarm+0x342>
 80091d4:	f240 4123 	movw	r1, #1059	; 0x423
 80091d8:	4866      	ldr	r0, [pc, #408]	; (8009374 <HAL_RTC_SetAlarm+0x4d8>)
 80091da:	f7f9 fa44 	bl	8002666 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	789b      	ldrb	r3, [r3, #2]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 f9e3 	bl	80095ae <RTC_Bcd2ToByte>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b3b      	cmp	r3, #59	; 0x3b
 80091ec:	d904      	bls.n	80091f8 <HAL_RTC_SetAlarm+0x35c>
 80091ee:	f240 4124 	movw	r1, #1060	; 0x424
 80091f2:	4860      	ldr	r0, [pc, #384]	; (8009374 <HAL_RTC_SetAlarm+0x4d8>)
 80091f4:	f7f9 fa37 	bl	8002666 <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	69db      	ldr	r3, [r3, #28]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d117      	bne.n	8009230 <HAL_RTC_SetAlarm+0x394>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009206:	4618      	mov	r0, r3
 8009208:	f000 f9d1 	bl	80095ae <RTC_Bcd2ToByte>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d008      	beq.n	8009224 <HAL_RTC_SetAlarm+0x388>
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009218:	4618      	mov	r0, r3
 800921a:	f000 f9c8 	bl	80095ae <RTC_Bcd2ToByte>
 800921e:	4603      	mov	r3, r0
 8009220:	2b1f      	cmp	r3, #31
 8009222:	d949      	bls.n	80092b8 <HAL_RTC_SetAlarm+0x41c>
 8009224:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8009228:	4852      	ldr	r0, [pc, #328]	; (8009374 <HAL_RTC_SetAlarm+0x4d8>)
 800922a:	f7f9 fa1c 	bl	8002666 <assert_failed>
 800922e:	e043      	b.n	80092b8 <HAL_RTC_SetAlarm+0x41c>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009236:	4618      	mov	r0, r3
 8009238:	f000 f9b9 	bl	80095ae <RTC_Bcd2ToByte>
 800923c:	4603      	mov	r3, r0
 800923e:	2b01      	cmp	r3, #1
 8009240:	d03a      	beq.n	80092b8 <HAL_RTC_SetAlarm+0x41c>
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009248:	4618      	mov	r0, r3
 800924a:	f000 f9b0 	bl	80095ae <RTC_Bcd2ToByte>
 800924e:	4603      	mov	r3, r0
 8009250:	2b02      	cmp	r3, #2
 8009252:	d031      	beq.n	80092b8 <HAL_RTC_SetAlarm+0x41c>
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	f893 3020 	ldrb.w	r3, [r3, #32]
 800925a:	4618      	mov	r0, r3
 800925c:	f000 f9a7 	bl	80095ae <RTC_Bcd2ToByte>
 8009260:	4603      	mov	r3, r0
 8009262:	2b03      	cmp	r3, #3
 8009264:	d028      	beq.n	80092b8 <HAL_RTC_SetAlarm+0x41c>
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800926c:	4618      	mov	r0, r3
 800926e:	f000 f99e 	bl	80095ae <RTC_Bcd2ToByte>
 8009272:	4603      	mov	r3, r0
 8009274:	2b04      	cmp	r3, #4
 8009276:	d01f      	beq.n	80092b8 <HAL_RTC_SetAlarm+0x41c>
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800927e:	4618      	mov	r0, r3
 8009280:	f000 f995 	bl	80095ae <RTC_Bcd2ToByte>
 8009284:	4603      	mov	r3, r0
 8009286:	2b05      	cmp	r3, #5
 8009288:	d016      	beq.n	80092b8 <HAL_RTC_SetAlarm+0x41c>
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009290:	4618      	mov	r0, r3
 8009292:	f000 f98c 	bl	80095ae <RTC_Bcd2ToByte>
 8009296:	4603      	mov	r3, r0
 8009298:	2b06      	cmp	r3, #6
 800929a:	d00d      	beq.n	80092b8 <HAL_RTC_SetAlarm+0x41c>
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 f983 	bl	80095ae <RTC_Bcd2ToByte>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b07      	cmp	r3, #7
 80092ac:	d004      	beq.n	80092b8 <HAL_RTC_SetAlarm+0x41c>
 80092ae:	f240 412c 	movw	r1, #1068	; 0x42c
 80092b2:	4830      	ldr	r0, [pc, #192]	; (8009374 <HAL_RTC_SetAlarm+0x4d8>)
 80092b4:	f7f9 f9d7 	bl	8002666 <assert_failed>
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	785b      	ldrb	r3, [r3, #1]
 80092c2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80092c4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80092ca:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	78db      	ldrb	r3, [r3, #3]
 80092d0:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80092d2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80092da:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80092dc:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80092e2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80092e8:	4313      	orrs	r3, r2
 80092ea:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80092f4:	4313      	orrs	r3, r2
 80092f6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	22ca      	movs	r2, #202	; 0xca
 80092fe:	625a      	str	r2, [r3, #36]	; 0x24
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2253      	movs	r2, #83	; 0x53
 8009306:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009310:	d14a      	bne.n	80093a8 <HAL_RTC_SetAlarm+0x50c>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	689a      	ldr	r2, [r3, #8]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009320:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	689a      	ldr	r2, [r3, #8]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009330:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	b2da      	uxtb	r2, r3
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8009342:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009344:	f7fa f852 	bl	80033ec <HAL_GetTick>
 8009348:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800934a:	e015      	b.n	8009378 <HAL_RTC_SetAlarm+0x4dc>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800934c:	f7fa f84e 	bl	80033ec <HAL_GetTick>
 8009350:	4602      	mov	r2, r0
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800935a:	d90d      	bls.n	8009378 <HAL_RTC_SetAlarm+0x4dc>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	22ff      	movs	r2, #255	; 0xff
 8009362:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2203      	movs	r2, #3
 8009368:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2200      	movs	r2, #0
 800936e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009370:	2303      	movs	r3, #3
 8009372:	e06c      	b.n	800944e <HAL_RTC_SetAlarm+0x5b2>
 8009374:	0800f3a4 	.word	0x0800f3a4
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	2b00      	cmp	r3, #0
 8009384:	d0e2      	beq.n	800934c <HAL_RTC_SetAlarm+0x4b0>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	69fa      	ldr	r2, [r7, #28]
 800938c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	697a      	ldr	r2, [r7, #20]
 8009394:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	689a      	ldr	r2, [r3, #8]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093a4:	609a      	str	r2, [r3, #8]
 80093a6:	e047      	b.n	8009438 <HAL_RTC_SetAlarm+0x59c>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	689a      	ldr	r2, [r3, #8]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80093b6:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	689a      	ldr	r2, [r3, #8]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093c6:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	b2da      	uxtb	r2, r3
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f462 7220 	orn	r2, r2, #640	; 0x280
 80093d8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80093da:	f7fa f807 	bl	80033ec <HAL_GetTick>
 80093de:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80093e0:	e013      	b.n	800940a <HAL_RTC_SetAlarm+0x56e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80093e2:	f7fa f803 	bl	80033ec <HAL_GetTick>
 80093e6:	4602      	mov	r2, r0
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093f0:	d90b      	bls.n	800940a <HAL_RTC_SetAlarm+0x56e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	22ff      	movs	r2, #255	; 0xff
 80093f8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2203      	movs	r2, #3
 80093fe:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009406:	2303      	movs	r3, #3
 8009408:	e021      	b.n	800944e <HAL_RTC_SetAlarm+0x5b2>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	f003 0302 	and.w	r3, r3, #2
 8009414:	2b00      	cmp	r3, #0
 8009416:	d0e4      	beq.n	80093e2 <HAL_RTC_SetAlarm+0x546>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	69fa      	ldr	r2, [r7, #28]
 800941e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	697a      	ldr	r2, [r7, #20]
 8009426:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	689a      	ldr	r2, [r3, #8]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009436:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	22ff      	movs	r2, #255	; 0xff
 800943e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2201      	movs	r2, #1
 8009444:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3724      	adds	r7, #36	; 0x24
 8009452:	46bd      	mov	sp, r7
 8009454:	bd90      	pop	{r4, r7, pc}
 8009456:	bf00      	nop

08009458 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8009460:	bf00      	nop
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009474:	2300      	movs	r3, #0
 8009476:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	68da      	ldr	r2, [r3, #12]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009486:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009488:	f7f9 ffb0 	bl	80033ec <HAL_GetTick>
 800948c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800948e:	e009      	b.n	80094a4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009490:	f7f9 ffac 	bl	80033ec <HAL_GetTick>
 8009494:	4602      	mov	r2, r0
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	1ad3      	subs	r3, r2, r3
 800949a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800949e:	d901      	bls.n	80094a4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80094a0:	2303      	movs	r3, #3
 80094a2:	e007      	b.n	80094b4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	f003 0320 	and.w	r3, r3, #32
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d0ee      	beq.n	8009490 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80094c4:	2300      	movs	r3, #0
 80094c6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80094c8:	2300      	movs	r3, #0
 80094ca:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d122      	bne.n	8009520 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68da      	ldr	r2, [r3, #12]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80094e8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80094ea:	f7f9 ff7f 	bl	80033ec <HAL_GetTick>
 80094ee:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80094f0:	e00c      	b.n	800950c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80094f2:	f7f9 ff7b 	bl	80033ec <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009500:	d904      	bls.n	800950c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2204      	movs	r2, #4
 8009506:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009516:	2b00      	cmp	r3, #0
 8009518:	d102      	bne.n	8009520 <RTC_EnterInitMode+0x64>
 800951a:	7bfb      	ldrb	r3, [r7, #15]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d1e8      	bne.n	80094f2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009520:	7bfb      	ldrb	r3, [r7, #15]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b084      	sub	sp, #16
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68da      	ldr	r2, [r3, #12]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009544:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	f003 0320 	and.w	r3, r3, #32
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10a      	bne.n	800956a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f7ff ff89 	bl	800946c <HAL_RTC_WaitForSynchro>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d004      	beq.n	800956a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2204      	movs	r2, #4
 8009564:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800956a:	7bfb      	ldrb	r3, [r7, #15]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	4603      	mov	r3, r0
 800957c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800957e:	2300      	movs	r3, #0
 8009580:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8009582:	e005      	b.n	8009590 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009584:	7bfb      	ldrb	r3, [r7, #15]
 8009586:	3301      	adds	r3, #1
 8009588:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800958a:	79fb      	ldrb	r3, [r7, #7]
 800958c:	3b0a      	subs	r3, #10
 800958e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009590:	79fb      	ldrb	r3, [r7, #7]
 8009592:	2b09      	cmp	r3, #9
 8009594:	d8f6      	bhi.n	8009584 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009596:	7bfb      	ldrb	r3, [r7, #15]
 8009598:	011b      	lsls	r3, r3, #4
 800959a:	b2da      	uxtb	r2, r3
 800959c:	79fb      	ldrb	r3, [r7, #7]
 800959e:	4313      	orrs	r3, r2
 80095a0:	b2db      	uxtb	r3, r3
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3714      	adds	r7, #20
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b085      	sub	sp, #20
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	4603      	mov	r3, r0
 80095b6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80095b8:	2300      	movs	r3, #0
 80095ba:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80095bc:	79fb      	ldrb	r3, [r7, #7]
 80095be:	091b      	lsrs	r3, r3, #4
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	461a      	mov	r2, r3
 80095c4:	0092      	lsls	r2, r2, #2
 80095c6:	4413      	add	r3, r2
 80095c8:	005b      	lsls	r3, r3, #1
 80095ca:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80095cc:	79fb      	ldrb	r3, [r7, #7]
 80095ce:	f003 030f 	and.w	r3, r3, #15
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	7bfb      	ldrb	r3, [r7, #15]
 80095d6:	4413      	add	r3, r2
 80095d8:	b2db      	uxtb	r3, r3
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3714      	adds	r7, #20
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr

080095e6 <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 80095e6:	b480      	push	{r7}
 80095e8:	b083      	sub	sp, #12
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 80095ee:	bf00      	nop
 80095f0:	370c      	adds	r7, #12
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr

080095fa <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 80095fa:	b480      	push	{r7}
 80095fc:	b083      	sub	sp, #12
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 8009602:	bf00      	nop
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
	...

08009610 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800961c:	2300      	movs	r3, #0
 800961e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d013      	beq.n	800964e <HAL_RTCEx_SetWakeUpTimer+0x3e>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2b01      	cmp	r3, #1
 800962a:	d010      	beq.n	800964e <HAL_RTCEx_SetWakeUpTimer+0x3e>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2b02      	cmp	r3, #2
 8009630:	d00d      	beq.n	800964e <HAL_RTCEx_SetWakeUpTimer+0x3e>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b03      	cmp	r3, #3
 8009636:	d00a      	beq.n	800964e <HAL_RTCEx_SetWakeUpTimer+0x3e>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b04      	cmp	r3, #4
 800963c:	d007      	beq.n	800964e <HAL_RTCEx_SetWakeUpTimer+0x3e>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2b06      	cmp	r3, #6
 8009642:	d004      	beq.n	800964e <HAL_RTCEx_SetWakeUpTimer+0x3e>
 8009644:	f240 3165 	movw	r1, #869	; 0x365
 8009648:	4850      	ldr	r0, [pc, #320]	; (800978c <HAL_RTCEx_SetWakeUpTimer+0x17c>)
 800964a:	f7f9 f80c 	bl	8002666 <assert_failed>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009654:	d304      	bcc.n	8009660 <HAL_RTCEx_SetWakeUpTimer+0x50>
 8009656:	f240 3166 	movw	r1, #870	; 0x366
 800965a:	484c      	ldr	r0, [pc, #304]	; (800978c <HAL_RTCEx_SetWakeUpTimer+0x17c>)
 800965c:	f7f9 f803 	bl	8002666 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	7f1b      	ldrb	r3, [r3, #28]
 8009664:	2b01      	cmp	r3, #1
 8009666:	d101      	bne.n	800966c <HAL_RTCEx_SetWakeUpTimer+0x5c>
 8009668:	2302      	movs	r3, #2
 800966a:	e08a      	b.n	8009782 <HAL_RTCEx_SetWakeUpTimer+0x172>
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2201      	movs	r2, #1
 8009670:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2202      	movs	r2, #2
 8009676:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	22ca      	movs	r2, #202	; 0xca
 800967e:	625a      	str	r2, [r3, #36]	; 0x24
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2253      	movs	r2, #83	; 0x53
 8009686:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009692:	2b00      	cmp	r3, #0
 8009694:	d01e      	beq.n	80096d4 <HAL_RTCEx_SetWakeUpTimer+0xc4>
  {
    tickstart = HAL_GetTick();
 8009696:	f7f9 fea9 	bl	80033ec <HAL_GetTick>
 800969a:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 800969c:	e013      	b.n	80096c6 <HAL_RTCEx_SetWakeUpTimer+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800969e:	f7f9 fea5 	bl	80033ec <HAL_GetTick>
 80096a2:	4602      	mov	r2, r0
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	1ad3      	subs	r3, r2, r3
 80096a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096ac:	d90b      	bls.n	80096c6 <HAL_RTCEx_SetWakeUpTimer+0xb6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	22ff      	movs	r2, #255	; 0xff
 80096b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2203      	movs	r2, #3
 80096ba:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2200      	movs	r2, #0
 80096c0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80096c2:	2303      	movs	r3, #3
 80096c4:	e05d      	b.n	8009782 <HAL_RTCEx_SetWakeUpTimer+0x172>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	f003 0304 	and.w	r3, r3, #4
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1e4      	bne.n	800969e <HAL_RTCEx_SetWakeUpTimer+0x8e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	689a      	ldr	r2, [r3, #8]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096e2:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80096f4:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80096f6:	f7f9 fe79 	bl	80033ec <HAL_GetTick>
 80096fa:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80096fc:	e013      	b.n	8009726 <HAL_RTCEx_SetWakeUpTimer+0x116>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80096fe:	f7f9 fe75 	bl	80033ec <HAL_GetTick>
 8009702:	4602      	mov	r2, r0
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	1ad3      	subs	r3, r2, r3
 8009708:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800970c:	d90b      	bls.n	8009726 <HAL_RTCEx_SetWakeUpTimer+0x116>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	22ff      	movs	r2, #255	; 0xff
 8009714:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2203      	movs	r2, #3
 800971a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2200      	movs	r2, #0
 8009720:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8009722:	2303      	movs	r3, #3
 8009724:	e02d      	b.n	8009782 <HAL_RTCEx_SetWakeUpTimer+0x172>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	f003 0304 	and.w	r3, r3, #4
 8009730:	2b00      	cmp	r3, #0
 8009732:	d0e4      	beq.n	80096fe <HAL_RTCEx_SetWakeUpTimer+0xee>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	689a      	ldr	r2, [r3, #8]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f022 0207 	bic.w	r2, r2, #7
 8009742:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	6899      	ldr	r1, [r3, #8]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	430a      	orrs	r2, r1
 8009752:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68ba      	ldr	r2, [r7, #8]
 800975a:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	689a      	ldr	r2, [r3, #8]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800976a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	22ff      	movs	r2, #255	; 0xff
 8009772:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2201      	movs	r2, #1
 8009778:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3718      	adds	r7, #24
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	0800f418 	.word	0x0800f418

08009790 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8009798:	bf00      	nop
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80097ac:	bf00      	nop
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d101      	bne.n	80097ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	e1ac      	b.n	8009b24 <HAL_SPI_Init+0x36c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a75      	ldr	r2, [pc, #468]	; (80099a4 <HAL_SPI_Init+0x1ec>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d018      	beq.n	8009806 <HAL_SPI_Init+0x4e>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a73      	ldr	r2, [pc, #460]	; (80099a8 <HAL_SPI_Init+0x1f0>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d013      	beq.n	8009806 <HAL_SPI_Init+0x4e>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a72      	ldr	r2, [pc, #456]	; (80099ac <HAL_SPI_Init+0x1f4>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d00e      	beq.n	8009806 <HAL_SPI_Init+0x4e>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a70      	ldr	r2, [pc, #448]	; (80099b0 <HAL_SPI_Init+0x1f8>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d009      	beq.n	8009806 <HAL_SPI_Init+0x4e>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a6f      	ldr	r2, [pc, #444]	; (80099b4 <HAL_SPI_Init+0x1fc>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d004      	beq.n	8009806 <HAL_SPI_Init+0x4e>
 80097fc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009800:	486d      	ldr	r0, [pc, #436]	; (80099b8 <HAL_SPI_Init+0x200>)
 8009802:	f7f8 ff30 	bl	8002666 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d009      	beq.n	8009822 <HAL_SPI_Init+0x6a>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009816:	d004      	beq.n	8009822 <HAL_SPI_Init+0x6a>
 8009818:	f240 1141 	movw	r1, #321	; 0x141
 800981c:	4866      	ldr	r0, [pc, #408]	; (80099b8 <HAL_SPI_Init+0x200>)
 800981e:	f7f8 ff22 	bl	8002666 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00e      	beq.n	8009848 <HAL_SPI_Init+0x90>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009832:	d009      	beq.n	8009848 <HAL_SPI_Init+0x90>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800983c:	d004      	beq.n	8009848 <HAL_SPI_Init+0x90>
 800983e:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8009842:	485d      	ldr	r0, [pc, #372]	; (80099b8 <HAL_SPI_Init+0x200>)
 8009844:	f7f8 ff0f 	bl	8002666 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009850:	d008      	beq.n	8009864 <HAL_SPI_Init+0xac>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d004      	beq.n	8009864 <HAL_SPI_Init+0xac>
 800985a:	f240 1143 	movw	r1, #323	; 0x143
 800985e:	4856      	ldr	r0, [pc, #344]	; (80099b8 <HAL_SPI_Init+0x200>)
 8009860:	f7f8 ff01 	bl	8002666 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800986c:	d00d      	beq.n	800988a <HAL_SPI_Init+0xd2>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d009      	beq.n	800988a <HAL_SPI_Init+0xd2>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	699b      	ldr	r3, [r3, #24]
 800987a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800987e:	d004      	beq.n	800988a <HAL_SPI_Init+0xd2>
 8009880:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8009884:	484c      	ldr	r0, [pc, #304]	; (80099b8 <HAL_SPI_Init+0x200>)
 8009886:	f7f8 feee 	bl	8002666 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	69db      	ldr	r3, [r3, #28]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d020      	beq.n	80098d4 <HAL_SPI_Init+0x11c>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	69db      	ldr	r3, [r3, #28]
 8009896:	2b08      	cmp	r3, #8
 8009898:	d01c      	beq.n	80098d4 <HAL_SPI_Init+0x11c>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	69db      	ldr	r3, [r3, #28]
 800989e:	2b10      	cmp	r3, #16
 80098a0:	d018      	beq.n	80098d4 <HAL_SPI_Init+0x11c>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	69db      	ldr	r3, [r3, #28]
 80098a6:	2b18      	cmp	r3, #24
 80098a8:	d014      	beq.n	80098d4 <HAL_SPI_Init+0x11c>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	69db      	ldr	r3, [r3, #28]
 80098ae:	2b20      	cmp	r3, #32
 80098b0:	d010      	beq.n	80098d4 <HAL_SPI_Init+0x11c>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	69db      	ldr	r3, [r3, #28]
 80098b6:	2b28      	cmp	r3, #40	; 0x28
 80098b8:	d00c      	beq.n	80098d4 <HAL_SPI_Init+0x11c>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	69db      	ldr	r3, [r3, #28]
 80098be:	2b30      	cmp	r3, #48	; 0x30
 80098c0:	d008      	beq.n	80098d4 <HAL_SPI_Init+0x11c>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	69db      	ldr	r3, [r3, #28]
 80098c6:	2b38      	cmp	r3, #56	; 0x38
 80098c8:	d004      	beq.n	80098d4 <HAL_SPI_Init+0x11c>
 80098ca:	f240 1145 	movw	r1, #325	; 0x145
 80098ce:	483a      	ldr	r0, [pc, #232]	; (80099b8 <HAL_SPI_Init+0x200>)
 80098d0:	f7f8 fec9 	bl	8002666 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6a1b      	ldr	r3, [r3, #32]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d008      	beq.n	80098ee <HAL_SPI_Init+0x136>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a1b      	ldr	r3, [r3, #32]
 80098e0:	2b80      	cmp	r3, #128	; 0x80
 80098e2:	d004      	beq.n	80098ee <HAL_SPI_Init+0x136>
 80098e4:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80098e8:	4833      	ldr	r0, [pc, #204]	; (80099b8 <HAL_SPI_Init+0x200>)
 80098ea:	f7f8 febc 	bl	8002666 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d008      	beq.n	8009908 <HAL_SPI_Init+0x150>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fa:	2b10      	cmp	r3, #16
 80098fc:	d004      	beq.n	8009908 <HAL_SPI_Init+0x150>
 80098fe:	f240 1147 	movw	r1, #327	; 0x147
 8009902:	482d      	ldr	r0, [pc, #180]	; (80099b8 <HAL_SPI_Init+0x200>)
 8009904:	f7f8 feaf 	bl	8002666 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990c:	2b00      	cmp	r3, #0
 800990e:	d155      	bne.n	80099bc <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d008      	beq.n	800992a <HAL_SPI_Init+0x172>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	691b      	ldr	r3, [r3, #16]
 800991c:	2b02      	cmp	r3, #2
 800991e:	d004      	beq.n	800992a <HAL_SPI_Init+0x172>
 8009920:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8009924:	4824      	ldr	r0, [pc, #144]	; (80099b8 <HAL_SPI_Init+0x200>)
 8009926:	f7f8 fe9e 	bl	8002666 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	695b      	ldr	r3, [r3, #20]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d008      	beq.n	8009944 <HAL_SPI_Init+0x18c>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	695b      	ldr	r3, [r3, #20]
 8009936:	2b01      	cmp	r3, #1
 8009938:	d004      	beq.n	8009944 <HAL_SPI_Init+0x18c>
 800993a:	f240 114b 	movw	r1, #331	; 0x14b
 800993e:	481e      	ldr	r0, [pc, #120]	; (80099b8 <HAL_SPI_Init+0x200>)
 8009940:	f7f8 fe91 	bl	8002666 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800994c:	d125      	bne.n	800999a <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	69db      	ldr	r3, [r3, #28]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d05d      	beq.n	8009a12 <HAL_SPI_Init+0x25a>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	69db      	ldr	r3, [r3, #28]
 800995a:	2b08      	cmp	r3, #8
 800995c:	d059      	beq.n	8009a12 <HAL_SPI_Init+0x25a>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	69db      	ldr	r3, [r3, #28]
 8009962:	2b10      	cmp	r3, #16
 8009964:	d055      	beq.n	8009a12 <HAL_SPI_Init+0x25a>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	69db      	ldr	r3, [r3, #28]
 800996a:	2b18      	cmp	r3, #24
 800996c:	d051      	beq.n	8009a12 <HAL_SPI_Init+0x25a>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	69db      	ldr	r3, [r3, #28]
 8009972:	2b20      	cmp	r3, #32
 8009974:	d04d      	beq.n	8009a12 <HAL_SPI_Init+0x25a>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	69db      	ldr	r3, [r3, #28]
 800997a:	2b28      	cmp	r3, #40	; 0x28
 800997c:	d049      	beq.n	8009a12 <HAL_SPI_Init+0x25a>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	69db      	ldr	r3, [r3, #28]
 8009982:	2b30      	cmp	r3, #48	; 0x30
 8009984:	d045      	beq.n	8009a12 <HAL_SPI_Init+0x25a>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	69db      	ldr	r3, [r3, #28]
 800998a:	2b38      	cmp	r3, #56	; 0x38
 800998c:	d041      	beq.n	8009a12 <HAL_SPI_Init+0x25a>
 800998e:	f240 114f 	movw	r1, #335	; 0x14f
 8009992:	4809      	ldr	r0, [pc, #36]	; (80099b8 <HAL_SPI_Init+0x200>)
 8009994:	f7f8 fe67 	bl	8002666 <assert_failed>
 8009998:	e03b      	b.n	8009a12 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	61da      	str	r2, [r3, #28]
 80099a0:	e037      	b.n	8009a12 <HAL_SPI_Init+0x25a>
 80099a2:	bf00      	nop
 80099a4:	40013000 	.word	0x40013000
 80099a8:	40003800 	.word	0x40003800
 80099ac:	40003c00 	.word	0x40003c00
 80099b0:	40013400 	.word	0x40013400
 80099b4:	40015000 	.word	0x40015000
 80099b8:	0800f490 	.word	0x0800f490
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	69db      	ldr	r3, [r3, #28]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d020      	beq.n	8009a06 <HAL_SPI_Init+0x24e>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	69db      	ldr	r3, [r3, #28]
 80099c8:	2b08      	cmp	r3, #8
 80099ca:	d01c      	beq.n	8009a06 <HAL_SPI_Init+0x24e>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	69db      	ldr	r3, [r3, #28]
 80099d0:	2b10      	cmp	r3, #16
 80099d2:	d018      	beq.n	8009a06 <HAL_SPI_Init+0x24e>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	69db      	ldr	r3, [r3, #28]
 80099d8:	2b18      	cmp	r3, #24
 80099da:	d014      	beq.n	8009a06 <HAL_SPI_Init+0x24e>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	69db      	ldr	r3, [r3, #28]
 80099e0:	2b20      	cmp	r3, #32
 80099e2:	d010      	beq.n	8009a06 <HAL_SPI_Init+0x24e>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	69db      	ldr	r3, [r3, #28]
 80099e8:	2b28      	cmp	r3, #40	; 0x28
 80099ea:	d00c      	beq.n	8009a06 <HAL_SPI_Init+0x24e>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	69db      	ldr	r3, [r3, #28]
 80099f0:	2b30      	cmp	r3, #48	; 0x30
 80099f2:	d008      	beq.n	8009a06 <HAL_SPI_Init+0x24e>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	69db      	ldr	r3, [r3, #28]
 80099f8:	2b38      	cmp	r3, #56	; 0x38
 80099fa:	d004      	beq.n	8009a06 <HAL_SPI_Init+0x24e>
 80099fc:	f240 1159 	movw	r1, #345	; 0x159
 8009a00:	484a      	ldr	r0, [pc, #296]	; (8009b2c <HAL_SPI_Init+0x374>)
 8009a02:	f7f8 fe30 	bl	8002666 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d126      	bne.n	8009a72 <HAL_SPI_Init+0x2ba>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a40      	ldr	r2, [pc, #256]	; (8009b30 <HAL_SPI_Init+0x378>)
 8009a30:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a3f      	ldr	r2, [pc, #252]	; (8009b34 <HAL_SPI_Init+0x37c>)
 8009a36:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4a3f      	ldr	r2, [pc, #252]	; (8009b38 <HAL_SPI_Init+0x380>)
 8009a3c:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4a3e      	ldr	r2, [pc, #248]	; (8009b3c <HAL_SPI_Init+0x384>)
 8009a42:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a3e      	ldr	r2, [pc, #248]	; (8009b40 <HAL_SPI_Init+0x388>)
 8009a48:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a3d      	ldr	r2, [pc, #244]	; (8009b44 <HAL_SPI_Init+0x38c>)
 8009a4e:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a3d      	ldr	r2, [pc, #244]	; (8009b48 <HAL_SPI_Init+0x390>)
 8009a54:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4a3c      	ldr	r2, [pc, #240]	; (8009b4c <HAL_SPI_Init+0x394>)
 8009a5a:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d102      	bne.n	8009a6a <HAL_SPI_Init+0x2b2>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a3a      	ldr	r2, [pc, #232]	; (8009b50 <HAL_SPI_Init+0x398>)
 8009a68:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2202      	movs	r2, #2
 8009a76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a88:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009a9a:	431a      	orrs	r2, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009aa4:	431a      	orrs	r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	f003 0302 	and.w	r3, r3, #2
 8009aae:	431a      	orrs	r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	695b      	ldr	r3, [r3, #20]
 8009ab4:	f003 0301 	and.w	r3, r3, #1
 8009ab8:	431a      	orrs	r2, r3
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	699b      	ldr	r3, [r3, #24]
 8009abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ac2:	431a      	orrs	r2, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	69db      	ldr	r3, [r3, #28]
 8009ac8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009acc:	431a      	orrs	r2, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a1b      	ldr	r3, [r3, #32]
 8009ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ad6:	ea42 0103 	orr.w	r1, r2, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ade:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	430a      	orrs	r2, r1
 8009ae8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	699b      	ldr	r3, [r3, #24]
 8009aee:	0c1b      	lsrs	r3, r3, #16
 8009af0:	f003 0104 	and.w	r1, r3, #4
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af8:	f003 0210 	and.w	r2, r3, #16
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	430a      	orrs	r2, r1
 8009b02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	69da      	ldr	r2, [r3, #28]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3708      	adds	r7, #8
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	0800f490 	.word	0x0800f490
 8009b30:	08009d55 	.word	0x08009d55
 8009b34:	08009d69 	.word	0x08009d69
 8009b38:	08009d7d 	.word	0x08009d7d
 8009b3c:	08009d91 	.word	0x08009d91
 8009b40:	08009da5 	.word	0x08009da5
 8009b44:	08009db9 	.word	0x08009db9
 8009b48:	08009dcd 	.word	0x08009dcd
 8009b4c:	08009de1 	.word	0x08009de1
 8009b50:	080028b5 	.word	0x080028b5

08009b54 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b088      	sub	sp, #32
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009b6c:	69bb      	ldr	r3, [r7, #24]
 8009b6e:	099b      	lsrs	r3, r3, #6
 8009b70:	f003 0301 	and.w	r3, r3, #1
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10f      	bne.n	8009b98 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00a      	beq.n	8009b98 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	099b      	lsrs	r3, r3, #6
 8009b86:	f003 0301 	and.w	r3, r3, #1
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d004      	beq.n	8009b98 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	4798      	blx	r3
    return;
 8009b96:	e0d8      	b.n	8009d4a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	085b      	lsrs	r3, r3, #1
 8009b9c:	f003 0301 	and.w	r3, r3, #1
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00a      	beq.n	8009bba <HAL_SPI_IRQHandler+0x66>
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	09db      	lsrs	r3, r3, #7
 8009ba8:	f003 0301 	and.w	r3, r3, #1
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d004      	beq.n	8009bba <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	4798      	blx	r3
    return;
 8009bb8:	e0c7      	b.n	8009d4a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	095b      	lsrs	r3, r3, #5
 8009bbe:	f003 0301 	and.w	r3, r3, #1
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d10c      	bne.n	8009be0 <HAL_SPI_IRQHandler+0x8c>
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	099b      	lsrs	r3, r3, #6
 8009bca:	f003 0301 	and.w	r3, r3, #1
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d106      	bne.n	8009be0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	0a1b      	lsrs	r3, r3, #8
 8009bd6:	f003 0301 	and.w	r3, r3, #1
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	f000 80b5 	beq.w	8009d4a <HAL_SPI_IRQHandler+0x1f6>
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	095b      	lsrs	r3, r3, #5
 8009be4:	f003 0301 	and.w	r3, r3, #1
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 80ae 	beq.w	8009d4a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	099b      	lsrs	r3, r3, #6
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d023      	beq.n	8009c42 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b03      	cmp	r3, #3
 8009c04:	d011      	beq.n	8009c2a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c0a:	f043 0204 	orr.w	r2, r3, #4
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c12:	2300      	movs	r3, #0
 8009c14:	617b      	str	r3, [r7, #20]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	617b      	str	r3, [r7, #20]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	617b      	str	r3, [r7, #20]
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	e00b      	b.n	8009c42 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	613b      	str	r3, [r7, #16]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	613b      	str	r3, [r7, #16]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	613b      	str	r3, [r7, #16]
 8009c3e:	693b      	ldr	r3, [r7, #16]
        return;
 8009c40:	e083      	b.n	8009d4a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	095b      	lsrs	r3, r3, #5
 8009c46:	f003 0301 	and.w	r3, r3, #1
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d014      	beq.n	8009c78 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c52:	f043 0201 	orr.w	r2, r3, #1
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60fb      	str	r3, [r7, #12]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	60fb      	str	r3, [r7, #12]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c74:	601a      	str	r2, [r3, #0]
 8009c76:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	0a1b      	lsrs	r3, r3, #8
 8009c7c:	f003 0301 	and.w	r3, r3, #1
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d00c      	beq.n	8009c9e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c88:	f043 0208 	orr.w	r2, r3, #8
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009c90:	2300      	movs	r3, #0
 8009c92:	60bb      	str	r3, [r7, #8]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	689b      	ldr	r3, [r3, #8]
 8009c9a:	60bb      	str	r3, [r7, #8]
 8009c9c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d050      	beq.n	8009d48 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	685a      	ldr	r2, [r3, #4]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009cb4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	f003 0302 	and.w	r3, r3, #2
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d104      	bne.n	8009cd2 <HAL_SPI_IRQHandler+0x17e>
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	f003 0301 	and.w	r3, r3, #1
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d034      	beq.n	8009d3c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	685a      	ldr	r2, [r3, #4]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f022 0203 	bic.w	r2, r2, #3
 8009ce0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d011      	beq.n	8009d0e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cee:	4a18      	ldr	r2, [pc, #96]	; (8009d50 <HAL_SPI_IRQHandler+0x1fc>)
 8009cf0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fa fec4 	bl	8004a84 <HAL_DMA_Abort_IT>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d005      	beq.n	8009d0e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d017      	beq.n	8009d46 <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d1a:	4a0d      	ldr	r2, [pc, #52]	; (8009d50 <HAL_SPI_IRQHandler+0x1fc>)
 8009d1c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fa feae 	bl	8004a84 <HAL_DMA_Abort_IT>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d00b      	beq.n	8009d46 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009d3a:	e004      	b.n	8009d46 <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009d44:	e000      	b.n	8009d48 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8009d46:	bf00      	nop
    return;
 8009d48:	bf00      	nop
  }
}
 8009d4a:	3720      	adds	r7, #32
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	08009df5 	.word	0x08009df5

08009d54 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009d5c:	bf00      	nop
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009d70:	bf00      	nop
 8009d72:	370c      	adds	r7, #12
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009d84:	bf00      	nop
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009d98:	bf00      	nop
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009dac:	bf00      	nop
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009dd4:	bf00      	nop
 8009dd6:	370c      	adds	r7, #12
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8009de8:	bf00      	nop
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e00:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2200      	movs	r2, #0
 8009e06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009e16:	bf00      	nop
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
	...

08009e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d101      	bne.n	8009e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e0b2      	b.n	8009f98 <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a5a      	ldr	r2, [pc, #360]	; (8009fa0 <HAL_TIM_Base_Init+0x180>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d027      	beq.n	8009e8c <HAL_TIM_Base_Init+0x6c>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e44:	d022      	beq.n	8009e8c <HAL_TIM_Base_Init+0x6c>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a56      	ldr	r2, [pc, #344]	; (8009fa4 <HAL_TIM_Base_Init+0x184>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d01d      	beq.n	8009e8c <HAL_TIM_Base_Init+0x6c>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a54      	ldr	r2, [pc, #336]	; (8009fa8 <HAL_TIM_Base_Init+0x188>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d018      	beq.n	8009e8c <HAL_TIM_Base_Init+0x6c>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a53      	ldr	r2, [pc, #332]	; (8009fac <HAL_TIM_Base_Init+0x18c>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d013      	beq.n	8009e8c <HAL_TIM_Base_Init+0x6c>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a51      	ldr	r2, [pc, #324]	; (8009fb0 <HAL_TIM_Base_Init+0x190>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d00e      	beq.n	8009e8c <HAL_TIM_Base_Init+0x6c>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a50      	ldr	r2, [pc, #320]	; (8009fb4 <HAL_TIM_Base_Init+0x194>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d009      	beq.n	8009e8c <HAL_TIM_Base_Init+0x6c>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a4e      	ldr	r2, [pc, #312]	; (8009fb8 <HAL_TIM_Base_Init+0x198>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d004      	beq.n	8009e8c <HAL_TIM_Base_Init+0x6c>
 8009e82:	f240 1113 	movw	r1, #275	; 0x113
 8009e86:	484d      	ldr	r0, [pc, #308]	; (8009fbc <HAL_TIM_Base_Init+0x19c>)
 8009e88:	f7f8 fbed 	bl	8002666 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d014      	beq.n	8009ebe <HAL_TIM_Base_Init+0x9e>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	2b10      	cmp	r3, #16
 8009e9a:	d010      	beq.n	8009ebe <HAL_TIM_Base_Init+0x9e>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	2b20      	cmp	r3, #32
 8009ea2:	d00c      	beq.n	8009ebe <HAL_TIM_Base_Init+0x9e>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	2b40      	cmp	r3, #64	; 0x40
 8009eaa:	d008      	beq.n	8009ebe <HAL_TIM_Base_Init+0x9e>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	2b60      	cmp	r3, #96	; 0x60
 8009eb2:	d004      	beq.n	8009ebe <HAL_TIM_Base_Init+0x9e>
 8009eb4:	f44f 718a 	mov.w	r1, #276	; 0x114
 8009eb8:	4840      	ldr	r0, [pc, #256]	; (8009fbc <HAL_TIM_Base_Init+0x19c>)
 8009eba:	f7f8 fbd4 	bl	8002666 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00e      	beq.n	8009ee4 <HAL_TIM_Base_Init+0xc4>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ece:	d009      	beq.n	8009ee4 <HAL_TIM_Base_Init+0xc4>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ed8:	d004      	beq.n	8009ee4 <HAL_TIM_Base_Init+0xc4>
 8009eda:	f240 1115 	movw	r1, #277	; 0x115
 8009ede:	4837      	ldr	r0, [pc, #220]	; (8009fbc <HAL_TIM_Base_Init+0x19c>)
 8009ee0:	f7f8 fbc1 	bl	8002666 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	699b      	ldr	r3, [r3, #24]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d008      	beq.n	8009efe <HAL_TIM_Base_Init+0xde>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	699b      	ldr	r3, [r3, #24]
 8009ef0:	2b80      	cmp	r3, #128	; 0x80
 8009ef2:	d004      	beq.n	8009efe <HAL_TIM_Base_Init+0xde>
 8009ef4:	f44f 718b 	mov.w	r1, #278	; 0x116
 8009ef8:	4830      	ldr	r0, [pc, #192]	; (8009fbc <HAL_TIM_Base_Init+0x19c>)
 8009efa:	f7f8 fbb4 	bl	8002666 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d111      	bne.n	8009f2e <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 ff80 	bl	800ae18 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d102      	bne.n	8009f26 <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4a27      	ldr	r2, [pc, #156]	; (8009fc0 <HAL_TIM_Base_Init+0x1a0>)
 8009f24:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2202      	movs	r2, #2
 8009f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	4619      	mov	r1, r3
 8009f40:	4610      	mov	r0, r2
 8009f42:	f000 fe4f 	bl	800abe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2201      	movs	r2, #1
 8009f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2201      	movs	r2, #1
 8009f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2201      	movs	r2, #1
 8009f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2201      	movs	r2, #1
 8009f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3708      	adds	r7, #8
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	40010000 	.word	0x40010000
 8009fa4:	40000400 	.word	0x40000400
 8009fa8:	40000800 	.word	0x40000800
 8009fac:	40000c00 	.word	0x40000c00
 8009fb0:	40014000 	.word	0x40014000
 8009fb4:	40014400 	.word	0x40014400
 8009fb8:	40014800 	.word	0x40014800
 8009fbc:	0800f504 	.word	0x0800f504
 8009fc0:	08002f6d 	.word	0x08002f6d

08009fc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a39      	ldr	r2, [pc, #228]	; (800a0b8 <HAL_TIM_Base_Start+0xf4>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d027      	beq.n	800a026 <HAL_TIM_Base_Start+0x62>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fde:	d022      	beq.n	800a026 <HAL_TIM_Base_Start+0x62>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a35      	ldr	r2, [pc, #212]	; (800a0bc <HAL_TIM_Base_Start+0xf8>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d01d      	beq.n	800a026 <HAL_TIM_Base_Start+0x62>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a34      	ldr	r2, [pc, #208]	; (800a0c0 <HAL_TIM_Base_Start+0xfc>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d018      	beq.n	800a026 <HAL_TIM_Base_Start+0x62>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a32      	ldr	r2, [pc, #200]	; (800a0c4 <HAL_TIM_Base_Start+0x100>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d013      	beq.n	800a026 <HAL_TIM_Base_Start+0x62>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a31      	ldr	r2, [pc, #196]	; (800a0c8 <HAL_TIM_Base_Start+0x104>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d00e      	beq.n	800a026 <HAL_TIM_Base_Start+0x62>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a2f      	ldr	r2, [pc, #188]	; (800a0cc <HAL_TIM_Base_Start+0x108>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d009      	beq.n	800a026 <HAL_TIM_Base_Start+0x62>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a2e      	ldr	r2, [pc, #184]	; (800a0d0 <HAL_TIM_Base_Start+0x10c>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d004      	beq.n	800a026 <HAL_TIM_Base_Start+0x62>
 800a01c:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800a020:	482c      	ldr	r0, [pc, #176]	; (800a0d4 <HAL_TIM_Base_Start+0x110>)
 800a022:	f7f8 fb20 	bl	8002666 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d001      	beq.n	800a036 <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	e03c      	b.n	800a0b0 <HAL_TIM_Base_Start+0xec>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2202      	movs	r2, #2
 800a03a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a1d      	ldr	r2, [pc, #116]	; (800a0b8 <HAL_TIM_Base_Start+0xf4>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d018      	beq.n	800a07a <HAL_TIM_Base_Start+0xb6>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a050:	d013      	beq.n	800a07a <HAL_TIM_Base_Start+0xb6>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a19      	ldr	r2, [pc, #100]	; (800a0bc <HAL_TIM_Base_Start+0xf8>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d00e      	beq.n	800a07a <HAL_TIM_Base_Start+0xb6>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a17      	ldr	r2, [pc, #92]	; (800a0c0 <HAL_TIM_Base_Start+0xfc>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d009      	beq.n	800a07a <HAL_TIM_Base_Start+0xb6>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a16      	ldr	r2, [pc, #88]	; (800a0c4 <HAL_TIM_Base_Start+0x100>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d004      	beq.n	800a07a <HAL_TIM_Base_Start+0xb6>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a14      	ldr	r2, [pc, #80]	; (800a0c8 <HAL_TIM_Base_Start+0x104>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d111      	bne.n	800a09e <HAL_TIM_Base_Start+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	f003 0307 	and.w	r3, r3, #7
 800a084:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2b06      	cmp	r3, #6
 800a08a:	d010      	beq.n	800a0ae <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f042 0201 	orr.w	r2, r2, #1
 800a09a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a09c:	e007      	b.n	800a0ae <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f042 0201 	orr.w	r2, r2, #1
 800a0ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a0ae:	2300      	movs	r3, #0
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	40010000 	.word	0x40010000
 800a0bc:	40000400 	.word	0x40000400
 800a0c0:	40000800 	.word	0x40000800
 800a0c4:	40000c00 	.word	0x40000c00
 800a0c8:	40014000 	.word	0x40014000
 800a0cc:	40014400 	.word	0x40014400
 800a0d0:	40014800 	.word	0x40014800
 800a0d4:	0800f504 	.word	0x0800f504

0800a0d8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a25      	ldr	r2, [pc, #148]	; (800a17c <HAL_TIM_Base_Stop+0xa4>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d027      	beq.n	800a13a <HAL_TIM_Base_Stop+0x62>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0f2:	d022      	beq.n	800a13a <HAL_TIM_Base_Stop+0x62>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a21      	ldr	r2, [pc, #132]	; (800a180 <HAL_TIM_Base_Stop+0xa8>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d01d      	beq.n	800a13a <HAL_TIM_Base_Stop+0x62>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a20      	ldr	r2, [pc, #128]	; (800a184 <HAL_TIM_Base_Stop+0xac>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d018      	beq.n	800a13a <HAL_TIM_Base_Stop+0x62>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a1e      	ldr	r2, [pc, #120]	; (800a188 <HAL_TIM_Base_Stop+0xb0>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d013      	beq.n	800a13a <HAL_TIM_Base_Stop+0x62>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a1d      	ldr	r2, [pc, #116]	; (800a18c <HAL_TIM_Base_Stop+0xb4>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d00e      	beq.n	800a13a <HAL_TIM_Base_Stop+0x62>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a1b      	ldr	r2, [pc, #108]	; (800a190 <HAL_TIM_Base_Stop+0xb8>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d009      	beq.n	800a13a <HAL_TIM_Base_Stop+0x62>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a1a      	ldr	r2, [pc, #104]	; (800a194 <HAL_TIM_Base_Stop+0xbc>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d004      	beq.n	800a13a <HAL_TIM_Base_Stop+0x62>
 800a130:	f240 11b9 	movw	r1, #441	; 0x1b9
 800a134:	4818      	ldr	r0, [pc, #96]	; (800a198 <HAL_TIM_Base_Stop+0xc0>)
 800a136:	f7f8 fa96 	bl	8002666 <assert_failed>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	6a1a      	ldr	r2, [r3, #32]
 800a140:	f241 1311 	movw	r3, #4369	; 0x1111
 800a144:	4013      	ands	r3, r2
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10f      	bne.n	800a16a <HAL_TIM_Base_Stop+0x92>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	6a1a      	ldr	r2, [r3, #32]
 800a150:	f240 4344 	movw	r3, #1092	; 0x444
 800a154:	4013      	ands	r3, r2
 800a156:	2b00      	cmp	r3, #0
 800a158:	d107      	bne.n	800a16a <HAL_TIM_Base_Stop+0x92>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f022 0201 	bic.w	r2, r2, #1
 800a168:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2201      	movs	r2, #1
 800a16e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a172:	2300      	movs	r3, #0
}
 800a174:	4618      	mov	r0, r3
 800a176:	3708      	adds	r7, #8
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	40010000 	.word	0x40010000
 800a180:	40000400 	.word	0x40000400
 800a184:	40000800 	.word	0x40000800
 800a188:	40000c00 	.word	0x40000c00
 800a18c:	40014000 	.word	0x40014000
 800a190:	40014400 	.word	0x40014400
 800a194:	40014800 	.word	0x40014800
 800a198:	0800f504 	.word	0x0800f504

0800a19c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a3d      	ldr	r2, [pc, #244]	; (800a2a0 <HAL_TIM_Base_Start_IT+0x104>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d027      	beq.n	800a1fe <HAL_TIM_Base_Start_IT+0x62>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1b6:	d022      	beq.n	800a1fe <HAL_TIM_Base_Start_IT+0x62>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a39      	ldr	r2, [pc, #228]	; (800a2a4 <HAL_TIM_Base_Start_IT+0x108>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d01d      	beq.n	800a1fe <HAL_TIM_Base_Start_IT+0x62>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a38      	ldr	r2, [pc, #224]	; (800a2a8 <HAL_TIM_Base_Start_IT+0x10c>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d018      	beq.n	800a1fe <HAL_TIM_Base_Start_IT+0x62>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a36      	ldr	r2, [pc, #216]	; (800a2ac <HAL_TIM_Base_Start_IT+0x110>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d013      	beq.n	800a1fe <HAL_TIM_Base_Start_IT+0x62>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a35      	ldr	r2, [pc, #212]	; (800a2b0 <HAL_TIM_Base_Start_IT+0x114>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d00e      	beq.n	800a1fe <HAL_TIM_Base_Start_IT+0x62>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a33      	ldr	r2, [pc, #204]	; (800a2b4 <HAL_TIM_Base_Start_IT+0x118>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d009      	beq.n	800a1fe <HAL_TIM_Base_Start_IT+0x62>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a32      	ldr	r2, [pc, #200]	; (800a2b8 <HAL_TIM_Base_Start_IT+0x11c>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d004      	beq.n	800a1fe <HAL_TIM_Base_Start_IT+0x62>
 800a1f4:	f240 11cf 	movw	r1, #463	; 0x1cf
 800a1f8:	4830      	ldr	r0, [pc, #192]	; (800a2bc <HAL_TIM_Base_Start_IT+0x120>)
 800a1fa:	f7f8 fa34 	bl	8002666 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a204:	b2db      	uxtb	r3, r3
 800a206:	2b01      	cmp	r3, #1
 800a208:	d001      	beq.n	800a20e <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	e044      	b.n	800a298 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2202      	movs	r2, #2
 800a212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68da      	ldr	r2, [r3, #12]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f042 0201 	orr.w	r2, r2, #1
 800a224:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a1d      	ldr	r2, [pc, #116]	; (800a2a0 <HAL_TIM_Base_Start_IT+0x104>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d018      	beq.n	800a262 <HAL_TIM_Base_Start_IT+0xc6>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a238:	d013      	beq.n	800a262 <HAL_TIM_Base_Start_IT+0xc6>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a19      	ldr	r2, [pc, #100]	; (800a2a4 <HAL_TIM_Base_Start_IT+0x108>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d00e      	beq.n	800a262 <HAL_TIM_Base_Start_IT+0xc6>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a17      	ldr	r2, [pc, #92]	; (800a2a8 <HAL_TIM_Base_Start_IT+0x10c>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d009      	beq.n	800a262 <HAL_TIM_Base_Start_IT+0xc6>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a16      	ldr	r2, [pc, #88]	; (800a2ac <HAL_TIM_Base_Start_IT+0x110>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d004      	beq.n	800a262 <HAL_TIM_Base_Start_IT+0xc6>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a14      	ldr	r2, [pc, #80]	; (800a2b0 <HAL_TIM_Base_Start_IT+0x114>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d111      	bne.n	800a286 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	f003 0307 	and.w	r3, r3, #7
 800a26c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2b06      	cmp	r3, #6
 800a272:	d010      	beq.n	800a296 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f042 0201 	orr.w	r2, r2, #1
 800a282:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a284:	e007      	b.n	800a296 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f042 0201 	orr.w	r2, r2, #1
 800a294:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	40010000 	.word	0x40010000
 800a2a4:	40000400 	.word	0x40000400
 800a2a8:	40000800 	.word	0x40000800
 800a2ac:	40000c00 	.word	0x40000c00
 800a2b0:	40014000 	.word	0x40014000
 800a2b4:	40014400 	.word	0x40014400
 800a2b8:	40014800 	.word	0x40014800
 800a2bc:	0800f504 	.word	0x0800f504

0800a2c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	691b      	ldr	r3, [r3, #16]
 800a2ce:	f003 0302 	and.w	r3, r3, #2
 800a2d2:	2b02      	cmp	r3, #2
 800a2d4:	d128      	bne.n	800a328 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	f003 0302 	and.w	r3, r3, #2
 800a2e0:	2b02      	cmp	r3, #2
 800a2e2:	d121      	bne.n	800a328 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f06f 0202 	mvn.w	r2, #2
 800a2ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	699b      	ldr	r3, [r3, #24]
 800a2fa:	f003 0303 	and.w	r3, r3, #3
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d005      	beq.n	800a30e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	4798      	blx	r3
 800a30c:	e009      	b.n	800a322 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	691b      	ldr	r3, [r3, #16]
 800a32e:	f003 0304 	and.w	r3, r3, #4
 800a332:	2b04      	cmp	r3, #4
 800a334:	d128      	bne.n	800a388 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	f003 0304 	and.w	r3, r3, #4
 800a340:	2b04      	cmp	r3, #4
 800a342:	d121      	bne.n	800a388 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f06f 0204 	mvn.w	r2, #4
 800a34c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2202      	movs	r2, #2
 800a352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	699b      	ldr	r3, [r3, #24]
 800a35a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d005      	beq.n	800a36e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	4798      	blx	r3
 800a36c:	e009      	b.n	800a382 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	f003 0308 	and.w	r3, r3, #8
 800a392:	2b08      	cmp	r3, #8
 800a394:	d128      	bne.n	800a3e8 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	f003 0308 	and.w	r3, r3, #8
 800a3a0:	2b08      	cmp	r3, #8
 800a3a2:	d121      	bne.n	800a3e8 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f06f 0208 	mvn.w	r2, #8
 800a3ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2204      	movs	r2, #4
 800a3b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	69db      	ldr	r3, [r3, #28]
 800a3ba:	f003 0303 	and.w	r3, r3, #3
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d005      	beq.n	800a3ce <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	4798      	blx	r3
 800a3cc:	e009      	b.n	800a3e2 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	f003 0310 	and.w	r3, r3, #16
 800a3f2:	2b10      	cmp	r3, #16
 800a3f4:	d128      	bne.n	800a448 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	f003 0310 	and.w	r3, r3, #16
 800a400:	2b10      	cmp	r3, #16
 800a402:	d121      	bne.n	800a448 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f06f 0210 	mvn.w	r2, #16
 800a40c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2208      	movs	r2, #8
 800a412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	69db      	ldr	r3, [r3, #28]
 800a41a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d005      	beq.n	800a42e <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	4798      	blx	r3
 800a42c:	e009      	b.n	800a442 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	f003 0301 	and.w	r3, r3, #1
 800a452:	2b01      	cmp	r3, #1
 800a454:	d110      	bne.n	800a478 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	f003 0301 	and.w	r3, r3, #1
 800a460:	2b01      	cmp	r3, #1
 800a462:	d109      	bne.n	800a478 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f06f 0201 	mvn.w	r2, #1
 800a46c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a482:	2b80      	cmp	r3, #128	; 0x80
 800a484:	d110      	bne.n	800a4a8 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a490:	2b80      	cmp	r3, #128	; 0x80
 800a492:	d109      	bne.n	800a4a8 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a49c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	691b      	ldr	r3, [r3, #16]
 800a4ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4b2:	2b40      	cmp	r3, #64	; 0x40
 800a4b4:	d110      	bne.n	800a4d8 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4c0:	2b40      	cmp	r3, #64	; 0x40
 800a4c2:	d109      	bne.n	800a4d8 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a4cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	f003 0320 	and.w	r3, r3, #32
 800a4e2:	2b20      	cmp	r3, #32
 800a4e4:	d110      	bne.n	800a508 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	f003 0320 	and.w	r3, r3, #32
 800a4f0:	2b20      	cmp	r3, #32
 800a4f2:	d109      	bne.n	800a508 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f06f 0220 	mvn.w	r2, #32
 800a4fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a508:	bf00      	nop
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a51a:	2300      	movs	r3, #0
 800a51c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a524:	2b01      	cmp	r3, #1
 800a526:	d101      	bne.n	800a52c <HAL_TIM_ConfigClockSource+0x1c>
 800a528:	2302      	movs	r3, #2
 800a52a:	e2f0      	b.n	800ab0e <HAL_TIM_ConfigClockSource+0x5fe>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2201      	movs	r2, #1
 800a530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2202      	movs	r2, #2
 800a538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a544:	d029      	beq.n	800a59a <HAL_TIM_ConfigClockSource+0x8a>
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2b70      	cmp	r3, #112	; 0x70
 800a54c:	d025      	beq.n	800a59a <HAL_TIM_ConfigClockSource+0x8a>
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a556:	d020      	beq.n	800a59a <HAL_TIM_ConfigClockSource+0x8a>
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	2b40      	cmp	r3, #64	; 0x40
 800a55e:	d01c      	beq.n	800a59a <HAL_TIM_ConfigClockSource+0x8a>
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2b50      	cmp	r3, #80	; 0x50
 800a566:	d018      	beq.n	800a59a <HAL_TIM_ConfigClockSource+0x8a>
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2b60      	cmp	r3, #96	; 0x60
 800a56e:	d014      	beq.n	800a59a <HAL_TIM_ConfigClockSource+0x8a>
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d010      	beq.n	800a59a <HAL_TIM_ConfigClockSource+0x8a>
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2b10      	cmp	r3, #16
 800a57e:	d00c      	beq.n	800a59a <HAL_TIM_ConfigClockSource+0x8a>
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2b20      	cmp	r3, #32
 800a586:	d008      	beq.n	800a59a <HAL_TIM_ConfigClockSource+0x8a>
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2b30      	cmp	r3, #48	; 0x30
 800a58e:	d004      	beq.n	800a59a <HAL_TIM_ConfigClockSource+0x8a>
 800a590:	f241 41b7 	movw	r1, #5303	; 0x14b7
 800a594:	487c      	ldr	r0, [pc, #496]	; (800a788 <HAL_TIM_ConfigClockSource+0x278>)
 800a596:	f7f8 f866 	bl	8002666 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a5a8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5b0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68ba      	ldr	r2, [r7, #8]
 800a5b8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5c2:	f000 80f1 	beq.w	800a7a8 <HAL_TIM_ConfigClockSource+0x298>
 800a5c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5ca:	f200 8293 	bhi.w	800aaf4 <HAL_TIM_ConfigClockSource+0x5e4>
 800a5ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5d2:	d02d      	beq.n	800a630 <HAL_TIM_ConfigClockSource+0x120>
 800a5d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5d8:	f200 828c 	bhi.w	800aaf4 <HAL_TIM_ConfigClockSource+0x5e4>
 800a5dc:	2b70      	cmp	r3, #112	; 0x70
 800a5de:	d05d      	beq.n	800a69c <HAL_TIM_ConfigClockSource+0x18c>
 800a5e0:	2b70      	cmp	r3, #112	; 0x70
 800a5e2:	f200 8287 	bhi.w	800aaf4 <HAL_TIM_ConfigClockSource+0x5e4>
 800a5e6:	2b60      	cmp	r3, #96	; 0x60
 800a5e8:	f000 81a0 	beq.w	800a92c <HAL_TIM_ConfigClockSource+0x41c>
 800a5ec:	2b60      	cmp	r3, #96	; 0x60
 800a5ee:	f200 8281 	bhi.w	800aaf4 <HAL_TIM_ConfigClockSource+0x5e4>
 800a5f2:	2b50      	cmp	r3, #80	; 0x50
 800a5f4:	f000 8144 	beq.w	800a880 <HAL_TIM_ConfigClockSource+0x370>
 800a5f8:	2b50      	cmp	r3, #80	; 0x50
 800a5fa:	f200 827b 	bhi.w	800aaf4 <HAL_TIM_ConfigClockSource+0x5e4>
 800a5fe:	2b40      	cmp	r3, #64	; 0x40
 800a600:	f000 81f6 	beq.w	800a9f0 <HAL_TIM_ConfigClockSource+0x4e0>
 800a604:	2b40      	cmp	r3, #64	; 0x40
 800a606:	f200 8275 	bhi.w	800aaf4 <HAL_TIM_ConfigClockSource+0x5e4>
 800a60a:	2b30      	cmp	r3, #48	; 0x30
 800a60c:	f000 8246 	beq.w	800aa9c <HAL_TIM_ConfigClockSource+0x58c>
 800a610:	2b30      	cmp	r3, #48	; 0x30
 800a612:	f200 826f 	bhi.w	800aaf4 <HAL_TIM_ConfigClockSource+0x5e4>
 800a616:	2b20      	cmp	r3, #32
 800a618:	f000 8240 	beq.w	800aa9c <HAL_TIM_ConfigClockSource+0x58c>
 800a61c:	2b20      	cmp	r3, #32
 800a61e:	f200 8269 	bhi.w	800aaf4 <HAL_TIM_ConfigClockSource+0x5e4>
 800a622:	2b00      	cmp	r3, #0
 800a624:	f000 823a 	beq.w	800aa9c <HAL_TIM_ConfigClockSource+0x58c>
 800a628:	2b10      	cmp	r3, #16
 800a62a:	f000 8237 	beq.w	800aa9c <HAL_TIM_ConfigClockSource+0x58c>
 800a62e:	e261      	b.n	800aaf4 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a55      	ldr	r2, [pc, #340]	; (800a78c <HAL_TIM_ConfigClockSource+0x27c>)
 800a636:	4293      	cmp	r3, r2
 800a638:	f000 825f 	beq.w	800aafa <HAL_TIM_ConfigClockSource+0x5ea>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a644:	f000 8259 	beq.w	800aafa <HAL_TIM_ConfigClockSource+0x5ea>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a50      	ldr	r2, [pc, #320]	; (800a790 <HAL_TIM_ConfigClockSource+0x280>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	f000 8253 	beq.w	800aafa <HAL_TIM_ConfigClockSource+0x5ea>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a4e      	ldr	r2, [pc, #312]	; (800a794 <HAL_TIM_ConfigClockSource+0x284>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	f000 824d 	beq.w	800aafa <HAL_TIM_ConfigClockSource+0x5ea>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a4c      	ldr	r2, [pc, #304]	; (800a798 <HAL_TIM_ConfigClockSource+0x288>)
 800a666:	4293      	cmp	r3, r2
 800a668:	f000 8247 	beq.w	800aafa <HAL_TIM_ConfigClockSource+0x5ea>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a4a      	ldr	r2, [pc, #296]	; (800a79c <HAL_TIM_ConfigClockSource+0x28c>)
 800a672:	4293      	cmp	r3, r2
 800a674:	f000 8241 	beq.w	800aafa <HAL_TIM_ConfigClockSource+0x5ea>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a48      	ldr	r2, [pc, #288]	; (800a7a0 <HAL_TIM_ConfigClockSource+0x290>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	f000 823b 	beq.w	800aafa <HAL_TIM_ConfigClockSource+0x5ea>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a46      	ldr	r2, [pc, #280]	; (800a7a4 <HAL_TIM_ConfigClockSource+0x294>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	f000 8235 	beq.w	800aafa <HAL_TIM_ConfigClockSource+0x5ea>
 800a690:	f241 41c3 	movw	r1, #5315	; 0x14c3
 800a694:	483c      	ldr	r0, [pc, #240]	; (800a788 <HAL_TIM_ConfigClockSource+0x278>)
 800a696:	f7f7 ffe6 	bl	8002666 <assert_failed>
      break;
 800a69a:	e22e      	b.n	800aafa <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a3a      	ldr	r2, [pc, #232]	; (800a78c <HAL_TIM_ConfigClockSource+0x27c>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d01d      	beq.n	800a6e2 <HAL_TIM_ConfigClockSource+0x1d2>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6ae:	d018      	beq.n	800a6e2 <HAL_TIM_ConfigClockSource+0x1d2>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a36      	ldr	r2, [pc, #216]	; (800a790 <HAL_TIM_ConfigClockSource+0x280>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d013      	beq.n	800a6e2 <HAL_TIM_ConfigClockSource+0x1d2>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a35      	ldr	r2, [pc, #212]	; (800a794 <HAL_TIM_ConfigClockSource+0x284>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d00e      	beq.n	800a6e2 <HAL_TIM_ConfigClockSource+0x1d2>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a33      	ldr	r2, [pc, #204]	; (800a798 <HAL_TIM_ConfigClockSource+0x288>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d009      	beq.n	800a6e2 <HAL_TIM_ConfigClockSource+0x1d2>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a32      	ldr	r2, [pc, #200]	; (800a79c <HAL_TIM_ConfigClockSource+0x28c>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d004      	beq.n	800a6e2 <HAL_TIM_ConfigClockSource+0x1d2>
 800a6d8:	f241 41ca 	movw	r1, #5322	; 0x14ca
 800a6dc:	482a      	ldr	r0, [pc, #168]	; (800a788 <HAL_TIM_ConfigClockSource+0x278>)
 800a6de:	f7f7 ffc2 	bl	8002666 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d013      	beq.n	800a712 <HAL_TIM_ConfigClockSource+0x202>
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6f2:	d00e      	beq.n	800a712 <HAL_TIM_ConfigClockSource+0x202>
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6fc:	d009      	beq.n	800a712 <HAL_TIM_ConfigClockSource+0x202>
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a706:	d004      	beq.n	800a712 <HAL_TIM_ConfigClockSource+0x202>
 800a708:	f241 41cd 	movw	r1, #5325	; 0x14cd
 800a70c:	481e      	ldr	r0, [pc, #120]	; (800a788 <HAL_TIM_ConfigClockSource+0x278>)
 800a70e:	f7f7 ffaa 	bl	8002666 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a71a:	d014      	beq.n	800a746 <HAL_TIM_ConfigClockSource+0x236>
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d010      	beq.n	800a746 <HAL_TIM_ConfigClockSource+0x236>
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d00c      	beq.n	800a746 <HAL_TIM_ConfigClockSource+0x236>
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	2b02      	cmp	r3, #2
 800a732:	d008      	beq.n	800a746 <HAL_TIM_ConfigClockSource+0x236>
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	2b0a      	cmp	r3, #10
 800a73a:	d004      	beq.n	800a746 <HAL_TIM_ConfigClockSource+0x236>
 800a73c:	f241 41ce 	movw	r1, #5326	; 0x14ce
 800a740:	4811      	ldr	r0, [pc, #68]	; (800a788 <HAL_TIM_ConfigClockSource+0x278>)
 800a742:	f7f7 ff90 	bl	8002666 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	68db      	ldr	r3, [r3, #12]
 800a74a:	2b0f      	cmp	r3, #15
 800a74c:	d904      	bls.n	800a758 <HAL_TIM_ConfigClockSource+0x248>
 800a74e:	f241 41cf 	movw	r1, #5327	; 0x14cf
 800a752:	480d      	ldr	r0, [pc, #52]	; (800a788 <HAL_TIM_ConfigClockSource+0x278>)
 800a754:	f7f7 ff87 	bl	8002666 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6818      	ldr	r0, [r3, #0]
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	6899      	ldr	r1, [r3, #8]
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	685a      	ldr	r2, [r3, #4]
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	f000 fb36 	bl	800add8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a77a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	68ba      	ldr	r2, [r7, #8]
 800a782:	609a      	str	r2, [r3, #8]
      break;
 800a784:	e1ba      	b.n	800aafc <HAL_TIM_ConfigClockSource+0x5ec>
 800a786:	bf00      	nop
 800a788:	0800f504 	.word	0x0800f504
 800a78c:	40010000 	.word	0x40010000
 800a790:	40000400 	.word	0x40000400
 800a794:	40000800 	.word	0x40000800
 800a798:	40000c00 	.word	0x40000c00
 800a79c:	40014000 	.word	0x40014000
 800a7a0:	40014400 	.word	0x40014400
 800a7a4:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a8a      	ldr	r2, [pc, #552]	; (800a9d8 <HAL_TIM_ConfigClockSource+0x4c8>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d018      	beq.n	800a7e4 <HAL_TIM_ConfigClockSource+0x2d4>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7ba:	d013      	beq.n	800a7e4 <HAL_TIM_ConfigClockSource+0x2d4>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a86      	ldr	r2, [pc, #536]	; (800a9dc <HAL_TIM_ConfigClockSource+0x4cc>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d00e      	beq.n	800a7e4 <HAL_TIM_ConfigClockSource+0x2d4>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a85      	ldr	r2, [pc, #532]	; (800a9e0 <HAL_TIM_ConfigClockSource+0x4d0>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d009      	beq.n	800a7e4 <HAL_TIM_ConfigClockSource+0x2d4>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a83      	ldr	r2, [pc, #524]	; (800a9e4 <HAL_TIM_ConfigClockSource+0x4d4>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d004      	beq.n	800a7e4 <HAL_TIM_ConfigClockSource+0x2d4>
 800a7da:	f241 41e2 	movw	r1, #5346	; 0x14e2
 800a7de:	4882      	ldr	r0, [pc, #520]	; (800a9e8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a7e0:	f7f7 ff41 	bl	8002666 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d013      	beq.n	800a814 <HAL_TIM_ConfigClockSource+0x304>
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7f4:	d00e      	beq.n	800a814 <HAL_TIM_ConfigClockSource+0x304>
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7fe:	d009      	beq.n	800a814 <HAL_TIM_ConfigClockSource+0x304>
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a808:	d004      	beq.n	800a814 <HAL_TIM_ConfigClockSource+0x304>
 800a80a:	f241 41e5 	movw	r1, #5349	; 0x14e5
 800a80e:	4876      	ldr	r0, [pc, #472]	; (800a9e8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a810:	f7f7 ff29 	bl	8002666 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a81c:	d014      	beq.n	800a848 <HAL_TIM_ConfigClockSource+0x338>
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d010      	beq.n	800a848 <HAL_TIM_ConfigClockSource+0x338>
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00c      	beq.n	800a848 <HAL_TIM_ConfigClockSource+0x338>
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	2b02      	cmp	r3, #2
 800a834:	d008      	beq.n	800a848 <HAL_TIM_ConfigClockSource+0x338>
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	2b0a      	cmp	r3, #10
 800a83c:	d004      	beq.n	800a848 <HAL_TIM_ConfigClockSource+0x338>
 800a83e:	f241 41e6 	movw	r1, #5350	; 0x14e6
 800a842:	4869      	ldr	r0, [pc, #420]	; (800a9e8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a844:	f7f7 ff0f 	bl	8002666 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	2b0f      	cmp	r3, #15
 800a84e:	d904      	bls.n	800a85a <HAL_TIM_ConfigClockSource+0x34a>
 800a850:	f241 41e7 	movw	r1, #5351	; 0x14e7
 800a854:	4864      	ldr	r0, [pc, #400]	; (800a9e8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a856:	f7f7 ff06 	bl	8002666 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6818      	ldr	r0, [r3, #0]
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	6899      	ldr	r1, [r3, #8]
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	685a      	ldr	r2, [r3, #4]
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	f000 fab5 	bl	800add8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	689a      	ldr	r2, [r3, #8]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a87c:	609a      	str	r2, [r3, #8]
      break;
 800a87e:	e13d      	b.n	800aafc <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a54      	ldr	r2, [pc, #336]	; (800a9d8 <HAL_TIM_ConfigClockSource+0x4c8>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d01d      	beq.n	800a8c6 <HAL_TIM_ConfigClockSource+0x3b6>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a892:	d018      	beq.n	800a8c6 <HAL_TIM_ConfigClockSource+0x3b6>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a50      	ldr	r2, [pc, #320]	; (800a9dc <HAL_TIM_ConfigClockSource+0x4cc>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d013      	beq.n	800a8c6 <HAL_TIM_ConfigClockSource+0x3b6>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a4f      	ldr	r2, [pc, #316]	; (800a9e0 <HAL_TIM_ConfigClockSource+0x4d0>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d00e      	beq.n	800a8c6 <HAL_TIM_ConfigClockSource+0x3b6>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a4d      	ldr	r2, [pc, #308]	; (800a9e4 <HAL_TIM_ConfigClockSource+0x4d4>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d009      	beq.n	800a8c6 <HAL_TIM_ConfigClockSource+0x3b6>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a4d      	ldr	r2, [pc, #308]	; (800a9ec <HAL_TIM_ConfigClockSource+0x4dc>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d004      	beq.n	800a8c6 <HAL_TIM_ConfigClockSource+0x3b6>
 800a8bc:	f241 41f6 	movw	r1, #5366	; 0x14f6
 800a8c0:	4849      	ldr	r0, [pc, #292]	; (800a9e8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a8c2:	f7f7 fed0 	bl	8002666 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8ce:	d014      	beq.n	800a8fa <HAL_TIM_ConfigClockSource+0x3ea>
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d010      	beq.n	800a8fa <HAL_TIM_ConfigClockSource+0x3ea>
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d00c      	beq.n	800a8fa <HAL_TIM_ConfigClockSource+0x3ea>
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d008      	beq.n	800a8fa <HAL_TIM_ConfigClockSource+0x3ea>
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	2b0a      	cmp	r3, #10
 800a8ee:	d004      	beq.n	800a8fa <HAL_TIM_ConfigClockSource+0x3ea>
 800a8f0:	f241 41f9 	movw	r1, #5369	; 0x14f9
 800a8f4:	483c      	ldr	r0, [pc, #240]	; (800a9e8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a8f6:	f7f7 feb6 	bl	8002666 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	2b0f      	cmp	r3, #15
 800a900:	d904      	bls.n	800a90c <HAL_TIM_ConfigClockSource+0x3fc>
 800a902:	f241 41fa 	movw	r1, #5370	; 0x14fa
 800a906:	4838      	ldr	r0, [pc, #224]	; (800a9e8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a908:	f7f7 fead 	bl	8002666 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6818      	ldr	r0, [r3, #0]
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	6859      	ldr	r1, [r3, #4]
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	461a      	mov	r2, r3
 800a91a:	f000 f9e3 	bl	800ace4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2150      	movs	r1, #80	; 0x50
 800a924:	4618      	mov	r0, r3
 800a926:	f000 fa3c 	bl	800ada2 <TIM_ITRx_SetConfig>
      break;
 800a92a:	e0e7      	b.n	800aafc <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a29      	ldr	r2, [pc, #164]	; (800a9d8 <HAL_TIM_ConfigClockSource+0x4c8>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d01d      	beq.n	800a972 <HAL_TIM_ConfigClockSource+0x462>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a93e:	d018      	beq.n	800a972 <HAL_TIM_ConfigClockSource+0x462>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a25      	ldr	r2, [pc, #148]	; (800a9dc <HAL_TIM_ConfigClockSource+0x4cc>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d013      	beq.n	800a972 <HAL_TIM_ConfigClockSource+0x462>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a24      	ldr	r2, [pc, #144]	; (800a9e0 <HAL_TIM_ConfigClockSource+0x4d0>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d00e      	beq.n	800a972 <HAL_TIM_ConfigClockSource+0x462>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a22      	ldr	r2, [pc, #136]	; (800a9e4 <HAL_TIM_ConfigClockSource+0x4d4>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d009      	beq.n	800a972 <HAL_TIM_ConfigClockSource+0x462>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a22      	ldr	r2, [pc, #136]	; (800a9ec <HAL_TIM_ConfigClockSource+0x4dc>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d004      	beq.n	800a972 <HAL_TIM_ConfigClockSource+0x462>
 800a968:	f241 5106 	movw	r1, #5382	; 0x1506
 800a96c:	481e      	ldr	r0, [pc, #120]	; (800a9e8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a96e:	f7f7 fe7a 	bl	8002666 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a97a:	d014      	beq.n	800a9a6 <HAL_TIM_ConfigClockSource+0x496>
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d010      	beq.n	800a9a6 <HAL_TIM_ConfigClockSource+0x496>
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d00c      	beq.n	800a9a6 <HAL_TIM_ConfigClockSource+0x496>
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	2b02      	cmp	r3, #2
 800a992:	d008      	beq.n	800a9a6 <HAL_TIM_ConfigClockSource+0x496>
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	2b0a      	cmp	r3, #10
 800a99a:	d004      	beq.n	800a9a6 <HAL_TIM_ConfigClockSource+0x496>
 800a99c:	f241 5109 	movw	r1, #5385	; 0x1509
 800a9a0:	4811      	ldr	r0, [pc, #68]	; (800a9e8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a9a2:	f7f7 fe60 	bl	8002666 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	2b0f      	cmp	r3, #15
 800a9ac:	d904      	bls.n	800a9b8 <HAL_TIM_ConfigClockSource+0x4a8>
 800a9ae:	f241 510a 	movw	r1, #5386	; 0x150a
 800a9b2:	480d      	ldr	r0, [pc, #52]	; (800a9e8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a9b4:	f7f7 fe57 	bl	8002666 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6818      	ldr	r0, [r3, #0]
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	6859      	ldr	r1, [r3, #4]
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	f000 f9bc 	bl	800ad42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2160      	movs	r1, #96	; 0x60
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f000 f9e6 	bl	800ada2 <TIM_ITRx_SetConfig>
      break;
 800a9d6:	e091      	b.n	800aafc <HAL_TIM_ConfigClockSource+0x5ec>
 800a9d8:	40010000 	.word	0x40010000
 800a9dc:	40000400 	.word	0x40000400
 800a9e0:	40000800 	.word	0x40000800
 800a9e4:	40000c00 	.word	0x40000c00
 800a9e8:	0800f504 	.word	0x0800f504
 800a9ec:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a48      	ldr	r2, [pc, #288]	; (800ab18 <HAL_TIM_ConfigClockSource+0x608>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d01d      	beq.n	800aa36 <HAL_TIM_ConfigClockSource+0x526>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa02:	d018      	beq.n	800aa36 <HAL_TIM_ConfigClockSource+0x526>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a44      	ldr	r2, [pc, #272]	; (800ab1c <HAL_TIM_ConfigClockSource+0x60c>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d013      	beq.n	800aa36 <HAL_TIM_ConfigClockSource+0x526>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a43      	ldr	r2, [pc, #268]	; (800ab20 <HAL_TIM_ConfigClockSource+0x610>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d00e      	beq.n	800aa36 <HAL_TIM_ConfigClockSource+0x526>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a41      	ldr	r2, [pc, #260]	; (800ab24 <HAL_TIM_ConfigClockSource+0x614>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d009      	beq.n	800aa36 <HAL_TIM_ConfigClockSource+0x526>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a40      	ldr	r2, [pc, #256]	; (800ab28 <HAL_TIM_ConfigClockSource+0x618>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d004      	beq.n	800aa36 <HAL_TIM_ConfigClockSource+0x526>
 800aa2c:	f241 5116 	movw	r1, #5398	; 0x1516
 800aa30:	483e      	ldr	r0, [pc, #248]	; (800ab2c <HAL_TIM_ConfigClockSource+0x61c>)
 800aa32:	f7f7 fe18 	bl	8002666 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa3e:	d014      	beq.n	800aa6a <HAL_TIM_ConfigClockSource+0x55a>
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d010      	beq.n	800aa6a <HAL_TIM_ConfigClockSource+0x55a>
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00c      	beq.n	800aa6a <HAL_TIM_ConfigClockSource+0x55a>
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	2b02      	cmp	r3, #2
 800aa56:	d008      	beq.n	800aa6a <HAL_TIM_ConfigClockSource+0x55a>
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	2b0a      	cmp	r3, #10
 800aa5e:	d004      	beq.n	800aa6a <HAL_TIM_ConfigClockSource+0x55a>
 800aa60:	f241 5119 	movw	r1, #5401	; 0x1519
 800aa64:	4831      	ldr	r0, [pc, #196]	; (800ab2c <HAL_TIM_ConfigClockSource+0x61c>)
 800aa66:	f7f7 fdfe 	bl	8002666 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	2b0f      	cmp	r3, #15
 800aa70:	d904      	bls.n	800aa7c <HAL_TIM_ConfigClockSource+0x56c>
 800aa72:	f241 511a 	movw	r1, #5402	; 0x151a
 800aa76:	482d      	ldr	r0, [pc, #180]	; (800ab2c <HAL_TIM_ConfigClockSource+0x61c>)
 800aa78:	f7f7 fdf5 	bl	8002666 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6818      	ldr	r0, [r3, #0]
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	6859      	ldr	r1, [r3, #4]
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	461a      	mov	r2, r3
 800aa8a:	f000 f92b 	bl	800ace4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	2140      	movs	r1, #64	; 0x40
 800aa94:	4618      	mov	r0, r3
 800aa96:	f000 f984 	bl	800ada2 <TIM_ITRx_SetConfig>
      break;
 800aa9a:	e02f      	b.n	800aafc <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a1d      	ldr	r2, [pc, #116]	; (800ab18 <HAL_TIM_ConfigClockSource+0x608>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d01d      	beq.n	800aae2 <HAL_TIM_ConfigClockSource+0x5d2>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaae:	d018      	beq.n	800aae2 <HAL_TIM_ConfigClockSource+0x5d2>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a19      	ldr	r2, [pc, #100]	; (800ab1c <HAL_TIM_ConfigClockSource+0x60c>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d013      	beq.n	800aae2 <HAL_TIM_ConfigClockSource+0x5d2>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a18      	ldr	r2, [pc, #96]	; (800ab20 <HAL_TIM_ConfigClockSource+0x610>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d00e      	beq.n	800aae2 <HAL_TIM_ConfigClockSource+0x5d2>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a16      	ldr	r2, [pc, #88]	; (800ab24 <HAL_TIM_ConfigClockSource+0x614>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d009      	beq.n	800aae2 <HAL_TIM_ConfigClockSource+0x5d2>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a15      	ldr	r2, [pc, #84]	; (800ab28 <HAL_TIM_ConfigClockSource+0x618>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d004      	beq.n	800aae2 <HAL_TIM_ConfigClockSource+0x5d2>
 800aad8:	f241 5129 	movw	r1, #5417	; 0x1529
 800aadc:	4813      	ldr	r0, [pc, #76]	; (800ab2c <HAL_TIM_ConfigClockSource+0x61c>)
 800aade:	f7f7 fdc2 	bl	8002666 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4619      	mov	r1, r3
 800aaec:	4610      	mov	r0, r2
 800aaee:	f000 f958 	bl	800ada2 <TIM_ITRx_SetConfig>
      break;
 800aaf2:	e003      	b.n	800aafc <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	73fb      	strb	r3, [r7, #15]
      break;
 800aaf8:	e000      	b.n	800aafc <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 800aafa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2201      	movs	r2, #1
 800ab00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ab0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	40010000 	.word	0x40010000
 800ab1c:	40000400 	.word	0x40000400
 800ab20:	40000800 	.word	0x40000800
 800ab24:	40000c00 	.word	0x40000c00
 800ab28:	40014000 	.word	0x40014000
 800ab2c:	0800f504 	.word	0x0800f504

0800ab30 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b083      	sub	sp, #12
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800ab38:	bf00      	nop
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab4c:	bf00      	nop
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab60:	bf00      	nop
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800ab74:	bf00      	nop
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab88:	bf00      	nop
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800ab9c:	bf00      	nop
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800abb0:	bf00      	nop
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800abc4:	bf00      	nop
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800abd8:	bf00      	nop
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b085      	sub	sp, #20
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	4a34      	ldr	r2, [pc, #208]	; (800acc8 <TIM_Base_SetConfig+0xe4>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d00f      	beq.n	800ac1c <TIM_Base_SetConfig+0x38>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac02:	d00b      	beq.n	800ac1c <TIM_Base_SetConfig+0x38>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	4a31      	ldr	r2, [pc, #196]	; (800accc <TIM_Base_SetConfig+0xe8>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d007      	beq.n	800ac1c <TIM_Base_SetConfig+0x38>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4a30      	ldr	r2, [pc, #192]	; (800acd0 <TIM_Base_SetConfig+0xec>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d003      	beq.n	800ac1c <TIM_Base_SetConfig+0x38>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	4a2f      	ldr	r2, [pc, #188]	; (800acd4 <TIM_Base_SetConfig+0xf0>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d108      	bne.n	800ac2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	68fa      	ldr	r2, [r7, #12]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4a25      	ldr	r2, [pc, #148]	; (800acc8 <TIM_Base_SetConfig+0xe4>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d01b      	beq.n	800ac6e <TIM_Base_SetConfig+0x8a>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac3c:	d017      	beq.n	800ac6e <TIM_Base_SetConfig+0x8a>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4a22      	ldr	r2, [pc, #136]	; (800accc <TIM_Base_SetConfig+0xe8>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d013      	beq.n	800ac6e <TIM_Base_SetConfig+0x8a>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	4a21      	ldr	r2, [pc, #132]	; (800acd0 <TIM_Base_SetConfig+0xec>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d00f      	beq.n	800ac6e <TIM_Base_SetConfig+0x8a>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	4a20      	ldr	r2, [pc, #128]	; (800acd4 <TIM_Base_SetConfig+0xf0>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d00b      	beq.n	800ac6e <TIM_Base_SetConfig+0x8a>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	4a1f      	ldr	r2, [pc, #124]	; (800acd8 <TIM_Base_SetConfig+0xf4>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d007      	beq.n	800ac6e <TIM_Base_SetConfig+0x8a>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4a1e      	ldr	r2, [pc, #120]	; (800acdc <TIM_Base_SetConfig+0xf8>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d003      	beq.n	800ac6e <TIM_Base_SetConfig+0x8a>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4a1d      	ldr	r2, [pc, #116]	; (800ace0 <TIM_Base_SetConfig+0xfc>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d108      	bne.n	800ac80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	695b      	ldr	r3, [r3, #20]
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	689a      	ldr	r2, [r3, #8]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	4a08      	ldr	r2, [pc, #32]	; (800acc8 <TIM_Base_SetConfig+0xe4>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d103      	bne.n	800acb4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	691a      	ldr	r2, [r3, #16]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2201      	movs	r2, #1
 800acb8:	615a      	str	r2, [r3, #20]
}
 800acba:	bf00      	nop
 800acbc:	3714      	adds	r7, #20
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop
 800acc8:	40010000 	.word	0x40010000
 800accc:	40000400 	.word	0x40000400
 800acd0:	40000800 	.word	0x40000800
 800acd4:	40000c00 	.word	0x40000c00
 800acd8:	40014000 	.word	0x40014000
 800acdc:	40014400 	.word	0x40014400
 800ace0:	40014800 	.word	0x40014800

0800ace4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b087      	sub	sp, #28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	6a1b      	ldr	r3, [r3, #32]
 800acf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6a1b      	ldr	r3, [r3, #32]
 800acfa:	f023 0201 	bic.w	r2, r3, #1
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	699b      	ldr	r3, [r3, #24]
 800ad06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	011b      	lsls	r3, r3, #4
 800ad14:	693a      	ldr	r2, [r7, #16]
 800ad16:	4313      	orrs	r3, r2
 800ad18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	f023 030a 	bic.w	r3, r3, #10
 800ad20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	693a      	ldr	r2, [r7, #16]
 800ad2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	697a      	ldr	r2, [r7, #20]
 800ad34:	621a      	str	r2, [r3, #32]
}
 800ad36:	bf00      	nop
 800ad38:	371c      	adds	r7, #28
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr

0800ad42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad42:	b480      	push	{r7}
 800ad44:	b087      	sub	sp, #28
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	60f8      	str	r0, [r7, #12]
 800ad4a:	60b9      	str	r1, [r7, #8]
 800ad4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	6a1b      	ldr	r3, [r3, #32]
 800ad52:	f023 0210 	bic.w	r2, r3, #16
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	699b      	ldr	r3, [r3, #24]
 800ad5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6a1b      	ldr	r3, [r3, #32]
 800ad64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	031b      	lsls	r3, r3, #12
 800ad72:	697a      	ldr	r2, [r7, #20]
 800ad74:	4313      	orrs	r3, r2
 800ad76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ad7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	011b      	lsls	r3, r3, #4
 800ad84:	693a      	ldr	r2, [r7, #16]
 800ad86:	4313      	orrs	r3, r2
 800ad88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	697a      	ldr	r2, [r7, #20]
 800ad8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	621a      	str	r2, [r3, #32]
}
 800ad96:	bf00      	nop
 800ad98:	371c      	adds	r7, #28
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr

0800ada2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ada2:	b480      	push	{r7}
 800ada4:	b085      	sub	sp, #20
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
 800adaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800adba:	683a      	ldr	r2, [r7, #0]
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	f043 0307 	orr.w	r3, r3, #7
 800adc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	609a      	str	r2, [r3, #8]
}
 800adcc:	bf00      	nop
 800adce:	3714      	adds	r7, #20
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800add8:	b480      	push	{r7}
 800adda:	b087      	sub	sp, #28
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	607a      	str	r2, [r7, #4]
 800ade4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800adf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	021a      	lsls	r2, r3, #8
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	431a      	orrs	r2, r3
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	4313      	orrs	r3, r2
 800ae00:	697a      	ldr	r2, [r7, #20]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	697a      	ldr	r2, [r7, #20]
 800ae0a:	609a      	str	r2, [r3, #8]
}
 800ae0c:	bf00      	nop
 800ae0e:	371c      	adds	r7, #28
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	4a1c      	ldr	r2, [pc, #112]	; (800ae94 <TIM_ResetCallback+0x7c>)
 800ae24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4a1b      	ldr	r2, [pc, #108]	; (800ae98 <TIM_ResetCallback+0x80>)
 800ae2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4a1a      	ldr	r2, [pc, #104]	; (800ae9c <TIM_ResetCallback+0x84>)
 800ae34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4a19      	ldr	r2, [pc, #100]	; (800aea0 <TIM_ResetCallback+0x88>)
 800ae3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4a18      	ldr	r2, [pc, #96]	; (800aea4 <TIM_ResetCallback+0x8c>)
 800ae44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	4a17      	ldr	r2, [pc, #92]	; (800aea8 <TIM_ResetCallback+0x90>)
 800ae4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	4a16      	ldr	r2, [pc, #88]	; (800aeac <TIM_ResetCallback+0x94>)
 800ae54:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	4a15      	ldr	r2, [pc, #84]	; (800aeb0 <TIM_ResetCallback+0x98>)
 800ae5c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	4a14      	ldr	r2, [pc, #80]	; (800aeb4 <TIM_ResetCallback+0x9c>)
 800ae64:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4a13      	ldr	r2, [pc, #76]	; (800aeb8 <TIM_ResetCallback+0xa0>)
 800ae6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a12      	ldr	r2, [pc, #72]	; (800aebc <TIM_ResetCallback+0xa4>)
 800ae74:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	4a11      	ldr	r2, [pc, #68]	; (800aec0 <TIM_ResetCallback+0xa8>)
 800ae7c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4a10      	ldr	r2, [pc, #64]	; (800aec4 <TIM_ResetCallback+0xac>)
 800ae84:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800ae88:	bf00      	nop
 800ae8a:	370c      	adds	r7, #12
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr
 800ae94:	08002639 	.word	0x08002639
 800ae98:	0800ab31 	.word	0x0800ab31
 800ae9c:	0800aba9 	.word	0x0800aba9
 800aea0:	0800abbd 	.word	0x0800abbd
 800aea4:	0800ab59 	.word	0x0800ab59
 800aea8:	0800ab6d 	.word	0x0800ab6d
 800aeac:	0800ab45 	.word	0x0800ab45
 800aeb0:	0800ab81 	.word	0x0800ab81
 800aeb4:	0800ab95 	.word	0x0800ab95
 800aeb8:	0800abd1 	.word	0x0800abd1
 800aebc:	0800b045 	.word	0x0800b045
 800aec0:	0800b059 	.word	0x0800b059
 800aec4:	0800b06d 	.word	0x0800b06d

0800aec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a55      	ldr	r2, [pc, #340]	; (800b02c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d018      	beq.n	800af0e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aee4:	d013      	beq.n	800af0e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a51      	ldr	r2, [pc, #324]	; (800b030 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d00e      	beq.n	800af0e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a4f      	ldr	r2, [pc, #316]	; (800b034 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d009      	beq.n	800af0e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a4e      	ldr	r2, [pc, #312]	; (800b038 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d004      	beq.n	800af0e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800af04:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800af08:	484c      	ldr	r0, [pc, #304]	; (800b03c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800af0a:	f7f7 fbac 	bl	8002666 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d020      	beq.n	800af58 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	2b10      	cmp	r3, #16
 800af1c:	d01c      	beq.n	800af58 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2b20      	cmp	r3, #32
 800af24:	d018      	beq.n	800af58 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2b30      	cmp	r3, #48	; 0x30
 800af2c:	d014      	beq.n	800af58 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	2b40      	cmp	r3, #64	; 0x40
 800af34:	d010      	beq.n	800af58 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	2b50      	cmp	r3, #80	; 0x50
 800af3c:	d00c      	beq.n	800af58 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	2b60      	cmp	r3, #96	; 0x60
 800af44:	d008      	beq.n	800af58 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b70      	cmp	r3, #112	; 0x70
 800af4c:	d004      	beq.n	800af58 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800af4e:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800af52:	483a      	ldr	r0, [pc, #232]	; (800b03c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800af54:	f7f7 fb87 	bl	8002666 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	2b80      	cmp	r3, #128	; 0x80
 800af5e:	d008      	beq.n	800af72 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d004      	beq.n	800af72 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800af68:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800af6c:	4833      	ldr	r0, [pc, #204]	; (800b03c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800af6e:	f7f7 fb7a 	bl	8002666 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d101      	bne.n	800af80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800af7c:	2302      	movs	r3, #2
 800af7e:	e050      	b.n	800b022 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2201      	movs	r2, #1
 800af84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2202      	movs	r2, #2
 800af8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	4313      	orrs	r3, r2
 800afb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	68fa      	ldr	r2, [r7, #12]
 800afb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4a1b      	ldr	r2, [pc, #108]	; (800b02c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	d018      	beq.n	800aff6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afcc:	d013      	beq.n	800aff6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a17      	ldr	r2, [pc, #92]	; (800b030 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d00e      	beq.n	800aff6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a15      	ldr	r2, [pc, #84]	; (800b034 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d009      	beq.n	800aff6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a14      	ldr	r2, [pc, #80]	; (800b038 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d004      	beq.n	800aff6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a13      	ldr	r2, [pc, #76]	; (800b040 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d10c      	bne.n	800b010 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800affc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	68ba      	ldr	r2, [r7, #8]
 800b004:	4313      	orrs	r3, r2
 800b006:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	68ba      	ldr	r2, [r7, #8]
 800b00e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2201      	movs	r2, #1
 800b014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b020:	2300      	movs	r3, #0
}
 800b022:	4618      	mov	r0, r3
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	40010000 	.word	0x40010000
 800b030:	40000400 	.word	0x40000400
 800b034:	40000800 	.word	0x40000800
 800b038:	40000c00 	.word	0x40000c00
 800b03c:	0800f578 	.word	0x0800f578
 800b040:	40014000 	.word	0x40014000

0800b044 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b04c:	bf00      	nop
 800b04e:	370c      	adds	r7, #12
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800b060:	bf00      	nop
 800b062:	370c      	adds	r7, #12
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b074:	bf00      	nop
 800b076:	370c      	adds	r7, #12
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr

0800b080 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d101      	bne.n	800b092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b08e:	2301      	movs	r3, #1
 800b090:	e0ab      	b.n	800b1ea <HAL_UART_Init+0x16a>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	699b      	ldr	r3, [r3, #24]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d02c      	beq.n	800b0f4 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4a55      	ldr	r2, [pc, #340]	; (800b1f4 <HAL_UART_Init+0x174>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d00e      	beq.n	800b0c2 <HAL_UART_Init+0x42>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a53      	ldr	r2, [pc, #332]	; (800b1f8 <HAL_UART_Init+0x178>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d009      	beq.n	800b0c2 <HAL_UART_Init+0x42>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4a52      	ldr	r2, [pc, #328]	; (800b1fc <HAL_UART_Init+0x17c>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d004      	beq.n	800b0c2 <HAL_UART_Init+0x42>
 800b0b8:	f240 1173 	movw	r1, #371	; 0x173
 800b0bc:	4850      	ldr	r0, [pc, #320]	; (800b200 <HAL_UART_Init+0x180>)
 800b0be:	f7f7 fad2 	bl	8002666 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	699b      	ldr	r3, [r3, #24]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d028      	beq.n	800b11c <HAL_UART_Init+0x9c>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	699b      	ldr	r3, [r3, #24]
 800b0ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0d2:	d023      	beq.n	800b11c <HAL_UART_Init+0x9c>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	699b      	ldr	r3, [r3, #24]
 800b0d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0dc:	d01e      	beq.n	800b11c <HAL_UART_Init+0x9c>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	699b      	ldr	r3, [r3, #24]
 800b0e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b0e6:	d019      	beq.n	800b11c <HAL_UART_Init+0x9c>
 800b0e8:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800b0ec:	4844      	ldr	r0, [pc, #272]	; (800b200 <HAL_UART_Init+0x180>)
 800b0ee:	f7f7 faba 	bl	8002666 <assert_failed>
 800b0f2:	e013      	b.n	800b11c <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4a3e      	ldr	r2, [pc, #248]	; (800b1f4 <HAL_UART_Init+0x174>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d00e      	beq.n	800b11c <HAL_UART_Init+0x9c>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a3d      	ldr	r2, [pc, #244]	; (800b1f8 <HAL_UART_Init+0x178>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d009      	beq.n	800b11c <HAL_UART_Init+0x9c>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a3b      	ldr	r2, [pc, #236]	; (800b1fc <HAL_UART_Init+0x17c>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d004      	beq.n	800b11c <HAL_UART_Init+0x9c>
 800b112:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800b116:	483a      	ldr	r0, [pc, #232]	; (800b200 <HAL_UART_Init+0x180>)
 800b118:	f7f7 faa5 	bl	8002666 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d009      	beq.n	800b138 <HAL_UART_Init+0xb8>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b12c:	d004      	beq.n	800b138 <HAL_UART_Init+0xb8>
 800b12e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800b132:	4833      	ldr	r0, [pc, #204]	; (800b200 <HAL_UART_Init+0x180>)
 800b134:	f7f7 fa97 	bl	8002666 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	69db      	ldr	r3, [r3, #28]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d009      	beq.n	800b154 <HAL_UART_Init+0xd4>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	69db      	ldr	r3, [r3, #28]
 800b144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b148:	d004      	beq.n	800b154 <HAL_UART_Init+0xd4>
 800b14a:	f240 117b 	movw	r1, #379	; 0x17b
 800b14e:	482c      	ldr	r0, [pc, #176]	; (800b200 <HAL_UART_Init+0x180>)
 800b150:	f7f7 fa89 	bl	8002666 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d111      	bne.n	800b184 <HAL_UART_Init+0x104>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 fb61 	bl	800b830 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b172:	2b00      	cmp	r3, #0
 800b174:	d102      	bne.n	800b17c <HAL_UART_Init+0xfc>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4a22      	ldr	r2, [pc, #136]	; (800b204 <HAL_UART_Init+0x184>)
 800b17a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2224      	movs	r2, #36	; 0x24
 800b188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68da      	ldr	r2, [r3, #12]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b19a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 fd5b 	bl	800bc58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	691a      	ldr	r2, [r3, #16]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b1b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	695a      	ldr	r2, [r3, #20]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b1c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	68da      	ldr	r2, [r3, #12]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b1d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2220      	movs	r2, #32
 800b1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2220      	movs	r2, #32
 800b1e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	40011000 	.word	0x40011000
 800b1f8:	40004400 	.word	0x40004400
 800b1fc:	40011400 	.word	0x40011400
 800b200:	0800f5f0 	.word	0x0800f5f0
 800b204:	08003119 	.word	0x08003119

0800b208 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	4613      	mov	r3, r2
 800b214:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	2b20      	cmp	r3, #32
 800b220:	d11d      	bne.n	800b25e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d002      	beq.n	800b22e <HAL_UART_Receive_IT+0x26>
 800b228:	88fb      	ldrh	r3, [r7, #6]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d101      	bne.n	800b232 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	e016      	b.n	800b260 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d101      	bne.n	800b240 <HAL_UART_Receive_IT+0x38>
 800b23c:	2302      	movs	r3, #2
 800b23e:	e00f      	b.n	800b260 <HAL_UART_Receive_IT+0x58>
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2201      	movs	r2, #1
 800b244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2200      	movs	r2, #0
 800b24c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b24e:	88fb      	ldrh	r3, [r7, #6]
 800b250:	461a      	mov	r2, r3
 800b252:	68b9      	ldr	r1, [r7, #8]
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	f000 fb23 	bl	800b8a0 <UART_Start_Receive_IT>
 800b25a:	4603      	mov	r3, r0
 800b25c:	e000      	b.n	800b260 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b25e:	2302      	movs	r3, #2
  }
}
 800b260:	4618      	mov	r0, r3
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b0ba      	sub	sp, #232	; 0xe8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	695b      	ldr	r3, [r3, #20]
 800b28a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b28e:	2300      	movs	r3, #0
 800b290:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b294:	2300      	movs	r3, #0
 800b296:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b29a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b29e:	f003 030f 	and.w	r3, r3, #15
 800b2a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b2a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d10f      	bne.n	800b2ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b2ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2b2:	f003 0320 	and.w	r3, r3, #32
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d009      	beq.n	800b2ce <HAL_UART_IRQHandler+0x66>
 800b2ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2be:	f003 0320 	and.w	r3, r3, #32
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d003      	beq.n	800b2ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 fc09 	bl	800bade <UART_Receive_IT>
      return;
 800b2cc:	e25b      	b.n	800b786 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b2ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f000 80e1 	beq.w	800b49a <HAL_UART_IRQHandler+0x232>
 800b2d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2dc:	f003 0301 	and.w	r3, r3, #1
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d106      	bne.n	800b2f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b2e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f000 80d4 	beq.w	800b49a <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b2f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2f6:	f003 0301 	and.w	r3, r3, #1
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00b      	beq.n	800b316 <HAL_UART_IRQHandler+0xae>
 800b2fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b306:	2b00      	cmp	r3, #0
 800b308:	d005      	beq.n	800b316 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b30e:	f043 0201 	orr.w	r2, r3, #1
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b31a:	f003 0304 	and.w	r3, r3, #4
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d00b      	beq.n	800b33a <HAL_UART_IRQHandler+0xd2>
 800b322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b326:	f003 0301 	and.w	r3, r3, #1
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d005      	beq.n	800b33a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b332:	f043 0202 	orr.w	r2, r3, #2
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b33a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b33e:	f003 0302 	and.w	r3, r3, #2
 800b342:	2b00      	cmp	r3, #0
 800b344:	d00b      	beq.n	800b35e <HAL_UART_IRQHandler+0xf6>
 800b346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b34a:	f003 0301 	and.w	r3, r3, #1
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d005      	beq.n	800b35e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b356:	f043 0204 	orr.w	r2, r3, #4
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b35e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b362:	f003 0308 	and.w	r3, r3, #8
 800b366:	2b00      	cmp	r3, #0
 800b368:	d011      	beq.n	800b38e <HAL_UART_IRQHandler+0x126>
 800b36a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b36e:	f003 0320 	and.w	r3, r3, #32
 800b372:	2b00      	cmp	r3, #0
 800b374:	d105      	bne.n	800b382 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b37a:	f003 0301 	and.w	r3, r3, #1
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d005      	beq.n	800b38e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b386:	f043 0208 	orr.w	r2, r3, #8
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b392:	2b00      	cmp	r3, #0
 800b394:	f000 81f2 	beq.w	800b77c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b39c:	f003 0320 	and.w	r3, r3, #32
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d008      	beq.n	800b3b6 <HAL_UART_IRQHandler+0x14e>
 800b3a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3a8:	f003 0320 	and.w	r3, r3, #32
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d002      	beq.n	800b3b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 fb94 	bl	800bade <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	695b      	ldr	r3, [r3, #20]
 800b3bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3c0:	2b40      	cmp	r3, #64	; 0x40
 800b3c2:	bf0c      	ite	eq
 800b3c4:	2301      	moveq	r3, #1
 800b3c6:	2300      	movne	r3, #0
 800b3c8:	b2db      	uxtb	r3, r3
 800b3ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d2:	f003 0308 	and.w	r3, r3, #8
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d103      	bne.n	800b3e2 <HAL_UART_IRQHandler+0x17a>
 800b3da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d051      	beq.n	800b486 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 fa9a 	bl	800b91c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	695b      	ldr	r3, [r3, #20]
 800b3ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3f2:	2b40      	cmp	r3, #64	; 0x40
 800b3f4:	d142      	bne.n	800b47c <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	3314      	adds	r3, #20
 800b3fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b400:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b404:	e853 3f00 	ldrex	r3, [r3]
 800b408:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b40c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b414:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	3314      	adds	r3, #20
 800b41e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b422:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b426:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b42a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b42e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b432:	e841 2300 	strex	r3, r2, [r1]
 800b436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b43a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d1d9      	bne.n	800b3f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b446:	2b00      	cmp	r3, #0
 800b448:	d013      	beq.n	800b472 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b44e:	4a7f      	ldr	r2, [pc, #508]	; (800b64c <HAL_UART_IRQHandler+0x3e4>)
 800b450:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b456:	4618      	mov	r0, r3
 800b458:	f7f9 fb14 	bl	8004a84 <HAL_DMA_Abort_IT>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d019      	beq.n	800b496 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b46c:	4610      	mov	r0, r2
 800b46e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b470:	e011      	b.n	800b496 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b47a:	e00c      	b.n	800b496 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b484:	e007      	b.n	800b496 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b494:	e172      	b.n	800b77c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b496:	bf00      	nop
    return;
 800b498:	e170      	b.n	800b77c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	f040 814c 	bne.w	800b73c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b4a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4a8:	f003 0310 	and.w	r3, r3, #16
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f000 8145 	beq.w	800b73c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b4b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4b6:	f003 0310 	and.w	r3, r3, #16
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	f000 813e 	beq.w	800b73c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	60bb      	str	r3, [r7, #8]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	60bb      	str	r3, [r7, #8]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	60bb      	str	r3, [r7, #8]
 800b4d4:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	695b      	ldr	r3, [r3, #20]
 800b4dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4e0:	2b40      	cmp	r3, #64	; 0x40
 800b4e2:	f040 80b5 	bne.w	800b650 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b4f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	f000 8142 	beq.w	800b780 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b500:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b504:	429a      	cmp	r2, r3
 800b506:	f080 813b 	bcs.w	800b780 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b510:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b516:	69db      	ldr	r3, [r3, #28]
 800b518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b51c:	f000 8088 	beq.w	800b630 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	330c      	adds	r3, #12
 800b526:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b52a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b52e:	e853 3f00 	ldrex	r3, [r3]
 800b532:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b536:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b53a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b53e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	330c      	adds	r3, #12
 800b548:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b54c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b550:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b554:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b558:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b55c:	e841 2300 	strex	r3, r2, [r1]
 800b560:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b564:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d1d9      	bne.n	800b520 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	3314      	adds	r3, #20
 800b572:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b574:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b576:	e853 3f00 	ldrex	r3, [r3]
 800b57a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b57c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b57e:	f023 0301 	bic.w	r3, r3, #1
 800b582:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	3314      	adds	r3, #20
 800b58c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b590:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b594:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b596:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b598:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b59c:	e841 2300 	strex	r3, r2, [r1]
 800b5a0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b5a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d1e1      	bne.n	800b56c <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	3314      	adds	r3, #20
 800b5ae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b5b2:	e853 3f00 	ldrex	r3, [r3]
 800b5b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b5b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	3314      	adds	r3, #20
 800b5c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b5cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b5ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b5d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b5d4:	e841 2300 	strex	r3, r2, [r1]
 800b5d8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b5da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d1e3      	bne.n	800b5a8 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2220      	movs	r2, #32
 800b5e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	330c      	adds	r3, #12
 800b5f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5f8:	e853 3f00 	ldrex	r3, [r3]
 800b5fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b5fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b600:	f023 0310 	bic.w	r3, r3, #16
 800b604:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	330c      	adds	r3, #12
 800b60e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b612:	65ba      	str	r2, [r7, #88]	; 0x58
 800b614:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b616:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b618:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b61a:	e841 2300 	strex	r3, r2, [r1]
 800b61e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b622:	2b00      	cmp	r3, #0
 800b624:	d1e3      	bne.n	800b5ee <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7f9 f9ba 	bl	80049a4 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b63c:	b292      	uxth	r2, r2
 800b63e:	1a8a      	subs	r2, r1, r2
 800b640:	b292      	uxth	r2, r2
 800b642:	4611      	mov	r1, r2
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b648:	e09a      	b.n	800b780 <HAL_UART_IRQHandler+0x518>
 800b64a:	bf00      	nop
 800b64c:	0800b9e3 	.word	0x0800b9e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b658:	b29b      	uxth	r3, r3
 800b65a:	1ad3      	subs	r3, r2, r3
 800b65c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b664:	b29b      	uxth	r3, r3
 800b666:	2b00      	cmp	r3, #0
 800b668:	f000 808c 	beq.w	800b784 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b66c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b670:	2b00      	cmp	r3, #0
 800b672:	f000 8087 	beq.w	800b784 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	330c      	adds	r3, #12
 800b67c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b680:	e853 3f00 	ldrex	r3, [r3]
 800b684:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b688:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b68c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	330c      	adds	r3, #12
 800b696:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b69a:	647a      	str	r2, [r7, #68]	; 0x44
 800b69c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b69e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b6a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b6a2:	e841 2300 	strex	r3, r2, [r1]
 800b6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b6a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d1e3      	bne.n	800b676 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	3314      	adds	r3, #20
 800b6b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b8:	e853 3f00 	ldrex	r3, [r3]
 800b6bc:	623b      	str	r3, [r7, #32]
   return(result);
 800b6be:	6a3b      	ldr	r3, [r7, #32]
 800b6c0:	f023 0301 	bic.w	r3, r3, #1
 800b6c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	3314      	adds	r3, #20
 800b6ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b6d2:	633a      	str	r2, [r7, #48]	; 0x30
 800b6d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6da:	e841 2300 	strex	r3, r2, [r1]
 800b6de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d1e3      	bne.n	800b6ae <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2220      	movs	r2, #32
 800b6ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	330c      	adds	r3, #12
 800b6fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	e853 3f00 	ldrex	r3, [r3]
 800b702:	60fb      	str	r3, [r7, #12]
   return(result);
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f023 0310 	bic.w	r3, r3, #16
 800b70a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	330c      	adds	r3, #12
 800b714:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b718:	61fa      	str	r2, [r7, #28]
 800b71a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b71c:	69b9      	ldr	r1, [r7, #24]
 800b71e:	69fa      	ldr	r2, [r7, #28]
 800b720:	e841 2300 	strex	r3, r2, [r1]
 800b724:	617b      	str	r3, [r7, #20]
   return(result);
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d1e3      	bne.n	800b6f4 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b730:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800b734:	4611      	mov	r1, r2
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b73a:	e023      	b.n	800b784 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b73c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b744:	2b00      	cmp	r3, #0
 800b746:	d009      	beq.n	800b75c <HAL_UART_IRQHandler+0x4f4>
 800b748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b74c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b750:	2b00      	cmp	r3, #0
 800b752:	d003      	beq.n	800b75c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 f959 	bl	800ba0c <UART_Transmit_IT>
    return;
 800b75a:	e014      	b.n	800b786 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b764:	2b00      	cmp	r3, #0
 800b766:	d00e      	beq.n	800b786 <HAL_UART_IRQHandler+0x51e>
 800b768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b76c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b770:	2b00      	cmp	r3, #0
 800b772:	d008      	beq.n	800b786 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 f999 	bl	800baac <UART_EndTransmit_IT>
    return;
 800b77a:	e004      	b.n	800b786 <HAL_UART_IRQHandler+0x51e>
    return;
 800b77c:	bf00      	nop
 800b77e:	e002      	b.n	800b786 <HAL_UART_IRQHandler+0x51e>
      return;
 800b780:	bf00      	nop
 800b782:	e000      	b.n	800b786 <HAL_UART_IRQHandler+0x51e>
      return;
 800b784:	bf00      	nop
  }
}
 800b786:	37e8      	adds	r7, #232	; 0xe8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b794:	bf00      	nop
 800b796:	370c      	adds	r7, #12
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr

0800b7a0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b083      	sub	sp, #12
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b7a8:	bf00      	nop
 800b7aa:	370c      	adds	r7, #12
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr

0800b7b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b7bc:	bf00      	nop
 800b7be:	370c      	adds	r7, #12
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b7d0:	bf00      	nop
 800b7d2:	370c      	adds	r7, #12
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr

0800b7dc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b7e4:	bf00      	nop
 800b7e6:	370c      	adds	r7, #12
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr

0800b7f0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b7f8:	bf00      	nop
 800b7fa:	370c      	adds	r7, #12
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b804:	b480      	push	{r7}
 800b806:	b083      	sub	sp, #12
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b80c:	bf00      	nop
 800b80e:	370c      	adds	r7, #12
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr

0800b818 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	460b      	mov	r3, r1
 800b822:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b824:	bf00      	nop
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4a10      	ldr	r2, [pc, #64]	; (800b87c <UART_InitCallbacksToDefault+0x4c>)
 800b83c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4a0f      	ldr	r2, [pc, #60]	; (800b880 <UART_InitCallbacksToDefault+0x50>)
 800b842:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	4a0f      	ldr	r2, [pc, #60]	; (800b884 <UART_InitCallbacksToDefault+0x54>)
 800b848:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4a0e      	ldr	r2, [pc, #56]	; (800b888 <UART_InitCallbacksToDefault+0x58>)
 800b84e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	4a0e      	ldr	r2, [pc, #56]	; (800b88c <UART_InitCallbacksToDefault+0x5c>)
 800b854:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	4a0d      	ldr	r2, [pc, #52]	; (800b890 <UART_InitCallbacksToDefault+0x60>)
 800b85a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	4a0d      	ldr	r2, [pc, #52]	; (800b894 <UART_InitCallbacksToDefault+0x64>)
 800b860:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4a0c      	ldr	r2, [pc, #48]	; (800b898 <UART_InitCallbacksToDefault+0x68>)
 800b866:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	4a0c      	ldr	r2, [pc, #48]	; (800b89c <UART_InitCallbacksToDefault+0x6c>)
 800b86c:	669a      	str	r2, [r3, #104]	; 0x68

}
 800b86e:	bf00      	nop
 800b870:	370c      	adds	r7, #12
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr
 800b87a:	bf00      	nop
 800b87c:	0800b7a1 	.word	0x0800b7a1
 800b880:	0800b78d 	.word	0x0800b78d
 800b884:	0800b7b5 	.word	0x0800b7b5
 800b888:	080031f9 	.word	0x080031f9
 800b88c:	0800b7c9 	.word	0x0800b7c9
 800b890:	0800b7dd 	.word	0x0800b7dd
 800b894:	0800b7f1 	.word	0x0800b7f1
 800b898:	0800b805 	.word	0x0800b805
 800b89c:	0800b819 	.word	0x0800b819

0800b8a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b085      	sub	sp, #20
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	4613      	mov	r3, r2
 800b8ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	68ba      	ldr	r2, [r7, #8]
 800b8b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	88fa      	ldrh	r2, [r7, #6]
 800b8b8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	88fa      	ldrh	r2, [r7, #6]
 800b8be:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2222      	movs	r2, #34	; 0x22
 800b8ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	691b      	ldr	r3, [r3, #16]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d007      	beq.n	800b8ee <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	68da      	ldr	r2, [r3, #12]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8ec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	695a      	ldr	r2, [r3, #20]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f042 0201 	orr.w	r2, r2, #1
 800b8fc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	68da      	ldr	r2, [r3, #12]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f042 0220 	orr.w	r2, r2, #32
 800b90c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b90e:	2300      	movs	r3, #0
}
 800b910:	4618      	mov	r0, r3
 800b912:	3714      	adds	r7, #20
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b095      	sub	sp, #84	; 0x54
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	330c      	adds	r3, #12
 800b92a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b92e:	e853 3f00 	ldrex	r3, [r3]
 800b932:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b936:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b93a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	330c      	adds	r3, #12
 800b942:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b944:	643a      	str	r2, [r7, #64]	; 0x40
 800b946:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b948:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b94a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b94c:	e841 2300 	strex	r3, r2, [r1]
 800b950:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b954:	2b00      	cmp	r3, #0
 800b956:	d1e5      	bne.n	800b924 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	3314      	adds	r3, #20
 800b95e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b960:	6a3b      	ldr	r3, [r7, #32]
 800b962:	e853 3f00 	ldrex	r3, [r3]
 800b966:	61fb      	str	r3, [r7, #28]
   return(result);
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	f023 0301 	bic.w	r3, r3, #1
 800b96e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	3314      	adds	r3, #20
 800b976:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b978:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b97a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b97c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b97e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b980:	e841 2300 	strex	r3, r2, [r1]
 800b984:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d1e5      	bne.n	800b958 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b990:	2b01      	cmp	r3, #1
 800b992:	d119      	bne.n	800b9c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	330c      	adds	r3, #12
 800b99a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	e853 3f00 	ldrex	r3, [r3]
 800b9a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	f023 0310 	bic.w	r3, r3, #16
 800b9aa:	647b      	str	r3, [r7, #68]	; 0x44
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	330c      	adds	r3, #12
 800b9b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9b4:	61ba      	str	r2, [r7, #24]
 800b9b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b8:	6979      	ldr	r1, [r7, #20]
 800b9ba:	69ba      	ldr	r2, [r7, #24]
 800b9bc:	e841 2300 	strex	r3, r2, [r1]
 800b9c0:	613b      	str	r3, [r7, #16]
   return(result);
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d1e5      	bne.n	800b994 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2220      	movs	r2, #32
 800b9cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b9d6:	bf00      	nop
 800b9d8:	3754      	adds	r7, #84	; 0x54
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr

0800b9e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b084      	sub	sp, #16
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba00:	68f8      	ldr	r0, [r7, #12]
 800ba02:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba04:	bf00      	nop
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b085      	sub	sp, #20
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	2b21      	cmp	r3, #33	; 0x21
 800ba1e:	d13e      	bne.n	800ba9e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	689b      	ldr	r3, [r3, #8]
 800ba24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba28:	d114      	bne.n	800ba54 <UART_Transmit_IT+0x48>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	691b      	ldr	r3, [r3, #16]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d110      	bne.n	800ba54 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6a1b      	ldr	r3, [r3, #32]
 800ba36:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	881b      	ldrh	r3, [r3, #0]
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ba46:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6a1b      	ldr	r3, [r3, #32]
 800ba4c:	1c9a      	adds	r2, r3, #2
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	621a      	str	r2, [r3, #32]
 800ba52:	e008      	b.n	800ba66 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6a1b      	ldr	r3, [r3, #32]
 800ba58:	1c59      	adds	r1, r3, #1
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	6211      	str	r1, [r2, #32]
 800ba5e:	781a      	ldrb	r2, [r3, #0]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	4619      	mov	r1, r3
 800ba74:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d10f      	bne.n	800ba9a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	68da      	ldr	r2, [r3, #12]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba88:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	68da      	ldr	r2, [r3, #12]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba98:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	e000      	b.n	800baa0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ba9e:	2302      	movs	r3, #2
  }
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3714      	adds	r7, #20
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr

0800baac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b082      	sub	sp, #8
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	68da      	ldr	r2, [r3, #12]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bac2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2220      	movs	r2, #32
 800bac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3708      	adds	r7, #8
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b08c      	sub	sp, #48	; 0x30
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800baec:	b2db      	uxtb	r3, r3
 800baee:	2b22      	cmp	r3, #34	; 0x22
 800baf0:	f040 80ad 	bne.w	800bc4e <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bafc:	d117      	bne.n	800bb2e <UART_Receive_IT+0x50>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	691b      	ldr	r3, [r3, #16]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d113      	bne.n	800bb2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bb06:	2300      	movs	r3, #0
 800bb08:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb0e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb1c:	b29a      	uxth	r2, r3
 800bb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb26:	1c9a      	adds	r2, r3, #2
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	629a      	str	r2, [r3, #40]	; 0x28
 800bb2c:	e026      	b.n	800bb7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb32:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bb34:	2300      	movs	r3, #0
 800bb36:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb40:	d007      	beq.n	800bb52 <UART_Receive_IT+0x74>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	689b      	ldr	r3, [r3, #8]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d10a      	bne.n	800bb60 <UART_Receive_IT+0x82>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	691b      	ldr	r3, [r3, #16]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d106      	bne.n	800bb60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	b2da      	uxtb	r2, r3
 800bb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5c:	701a      	strb	r2, [r3, #0]
 800bb5e:	e008      	b.n	800bb72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb6c:	b2da      	uxtb	r2, r3
 800bb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb76:	1c5a      	adds	r2, r3, #1
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	3b01      	subs	r3, #1
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	4619      	mov	r1, r3
 800bb8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d15c      	bne.n	800bc4a <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	68da      	ldr	r2, [r3, #12]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f022 0220 	bic.w	r2, r2, #32
 800bb9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	68da      	ldr	r2, [r3, #12]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bbae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	695a      	ldr	r2, [r3, #20]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f022 0201 	bic.w	r2, r2, #1
 800bbbe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2220      	movs	r2, #32
 800bbc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	d136      	bne.n	800bc3e <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	330c      	adds	r3, #12
 800bbdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	e853 3f00 	ldrex	r3, [r3]
 800bbe4:	613b      	str	r3, [r7, #16]
   return(result);
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	f023 0310 	bic.w	r3, r3, #16
 800bbec:	627b      	str	r3, [r7, #36]	; 0x24
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	330c      	adds	r3, #12
 800bbf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbf6:	623a      	str	r2, [r7, #32]
 800bbf8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbfa:	69f9      	ldr	r1, [r7, #28]
 800bbfc:	6a3a      	ldr	r2, [r7, #32]
 800bbfe:	e841 2300 	strex	r3, r2, [r1]
 800bc02:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc04:	69bb      	ldr	r3, [r7, #24]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d1e5      	bne.n	800bbd6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f003 0310 	and.w	r3, r3, #16
 800bc14:	2b10      	cmp	r3, #16
 800bc16:	d10a      	bne.n	800bc2e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc18:	2300      	movs	r3, #0
 800bc1a:	60fb      	str	r3, [r7, #12]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	60fb      	str	r3, [r7, #12]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	60fb      	str	r3, [r7, #12]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800bc36:	4611      	mov	r1, r2
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	4798      	blx	r3
 800bc3c:	e003      	b.n	800bc46 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bc46:	2300      	movs	r3, #0
 800bc48:	e002      	b.n	800bc50 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	e000      	b.n	800bc50 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800bc4e:	2302      	movs	r3, #2
  }
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3730      	adds	r7, #48	; 0x30
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc5c:	b0c0      	sub	sp, #256	; 0x100
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800bc64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc68:	685a      	ldr	r2, [r3, #4]
 800bc6a:	4bcf      	ldr	r3, [pc, #828]	; (800bfa8 <UART_SetConfig+0x350>)
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d904      	bls.n	800bc7a <UART_SetConfig+0x22>
 800bc70:	f640 6161 	movw	r1, #3681	; 0xe61
 800bc74:	48cd      	ldr	r0, [pc, #820]	; (800bfac <UART_SetConfig+0x354>)
 800bc76:	f7f6 fcf6 	bl	8002666 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800bc7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d00a      	beq.n	800bc9a <UART_SetConfig+0x42>
 800bc84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc88:	68db      	ldr	r3, [r3, #12]
 800bc8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc8e:	d004      	beq.n	800bc9a <UART_SetConfig+0x42>
 800bc90:	f640 6162 	movw	r1, #3682	; 0xe62
 800bc94:	48c5      	ldr	r0, [pc, #788]	; (800bfac <UART_SetConfig+0x354>)
 800bc96:	f7f6 fce6 	bl	8002666 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800bc9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc9e:	691b      	ldr	r3, [r3, #16]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d010      	beq.n	800bcc6 <UART_SetConfig+0x6e>
 800bca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bca8:	691b      	ldr	r3, [r3, #16]
 800bcaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcae:	d00a      	beq.n	800bcc6 <UART_SetConfig+0x6e>
 800bcb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcb4:	691b      	ldr	r3, [r3, #16]
 800bcb6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bcba:	d004      	beq.n	800bcc6 <UART_SetConfig+0x6e>
 800bcbc:	f640 6163 	movw	r1, #3683	; 0xe63
 800bcc0:	48ba      	ldr	r0, [pc, #744]	; (800bfac <UART_SetConfig+0x354>)
 800bcc2:	f7f6 fcd0 	bl	8002666 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800bcc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcca:	695a      	ldr	r2, [r3, #20]
 800bccc:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800bcd0:	4013      	ands	r3, r2
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d104      	bne.n	800bce0 <UART_SetConfig+0x88>
 800bcd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcda:	695b      	ldr	r3, [r3, #20]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d104      	bne.n	800bcea <UART_SetConfig+0x92>
 800bce0:	f640 6164 	movw	r1, #3684	; 0xe64
 800bce4:	48b1      	ldr	r0, [pc, #708]	; (800bfac <UART_SetConfig+0x354>)
 800bce6:	f7f6 fcbe 	bl	8002666 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bcea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	691b      	ldr	r3, [r3, #16]
 800bcf2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bcf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcfa:	68d9      	ldr	r1, [r3, #12]
 800bcfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd00:	681a      	ldr	r2, [r3, #0]
 800bd02:	ea40 0301 	orr.w	r3, r0, r1
 800bd06:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bd08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd0c:	689a      	ldr	r2, [r3, #8]
 800bd0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd12:	691b      	ldr	r3, [r3, #16]
 800bd14:	431a      	orrs	r2, r3
 800bd16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd1a:	695b      	ldr	r3, [r3, #20]
 800bd1c:	431a      	orrs	r2, r3
 800bd1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd22:	69db      	ldr	r3, [r3, #28]
 800bd24:	4313      	orrs	r3, r2
 800bd26:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bd2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bd36:	f021 010c 	bic.w	r1, r1, #12
 800bd3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd3e:	681a      	ldr	r2, [r3, #0]
 800bd40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bd44:	430b      	orrs	r3, r1
 800bd46:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bd48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	695b      	ldr	r3, [r3, #20]
 800bd50:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bd54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd58:	6999      	ldr	r1, [r3, #24]
 800bd5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	ea40 0301 	orr.w	r3, r0, r1
 800bd64:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bd66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	4b90      	ldr	r3, [pc, #576]	; (800bfb0 <UART_SetConfig+0x358>)
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d005      	beq.n	800bd7e <UART_SetConfig+0x126>
 800bd72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	4b8e      	ldr	r3, [pc, #568]	; (800bfb4 <UART_SetConfig+0x35c>)
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d104      	bne.n	800bd88 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bd7e:	f7fc fad9 	bl	8008334 <HAL_RCC_GetPCLK2Freq>
 800bd82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bd86:	e003      	b.n	800bd90 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bd88:	f7fc fac0 	bl	800830c <HAL_RCC_GetPCLK1Freq>
 800bd8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd94:	69db      	ldr	r3, [r3, #28]
 800bd96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd9a:	f040 810f 	bne.w	800bfbc <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bd9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bda2:	2200      	movs	r2, #0
 800bda4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bda8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bdac:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bdb0:	4622      	mov	r2, r4
 800bdb2:	462b      	mov	r3, r5
 800bdb4:	1891      	adds	r1, r2, r2
 800bdb6:	65b9      	str	r1, [r7, #88]	; 0x58
 800bdb8:	415b      	adcs	r3, r3
 800bdba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdbc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bdc0:	4621      	mov	r1, r4
 800bdc2:	eb12 0801 	adds.w	r8, r2, r1
 800bdc6:	4629      	mov	r1, r5
 800bdc8:	eb43 0901 	adc.w	r9, r3, r1
 800bdcc:	f04f 0200 	mov.w	r2, #0
 800bdd0:	f04f 0300 	mov.w	r3, #0
 800bdd4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bdd8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bddc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bde0:	4690      	mov	r8, r2
 800bde2:	4699      	mov	r9, r3
 800bde4:	4623      	mov	r3, r4
 800bde6:	eb18 0303 	adds.w	r3, r8, r3
 800bdea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bdee:	462b      	mov	r3, r5
 800bdf0:	eb49 0303 	adc.w	r3, r9, r3
 800bdf4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bdf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	2200      	movs	r2, #0
 800be00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800be04:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800be08:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800be0c:	460b      	mov	r3, r1
 800be0e:	18db      	adds	r3, r3, r3
 800be10:	653b      	str	r3, [r7, #80]	; 0x50
 800be12:	4613      	mov	r3, r2
 800be14:	eb42 0303 	adc.w	r3, r2, r3
 800be18:	657b      	str	r3, [r7, #84]	; 0x54
 800be1a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800be1e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800be22:	f7f4 f9dd 	bl	80001e0 <__aeabi_uldivmod>
 800be26:	4602      	mov	r2, r0
 800be28:	460b      	mov	r3, r1
 800be2a:	4b63      	ldr	r3, [pc, #396]	; (800bfb8 <UART_SetConfig+0x360>)
 800be2c:	fba3 2302 	umull	r2, r3, r3, r2
 800be30:	095b      	lsrs	r3, r3, #5
 800be32:	011c      	lsls	r4, r3, #4
 800be34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be38:	2200      	movs	r2, #0
 800be3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800be3e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800be42:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800be46:	4642      	mov	r2, r8
 800be48:	464b      	mov	r3, r9
 800be4a:	1891      	adds	r1, r2, r2
 800be4c:	64b9      	str	r1, [r7, #72]	; 0x48
 800be4e:	415b      	adcs	r3, r3
 800be50:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be52:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800be56:	4641      	mov	r1, r8
 800be58:	eb12 0a01 	adds.w	sl, r2, r1
 800be5c:	4649      	mov	r1, r9
 800be5e:	eb43 0b01 	adc.w	fp, r3, r1
 800be62:	f04f 0200 	mov.w	r2, #0
 800be66:	f04f 0300 	mov.w	r3, #0
 800be6a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800be6e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800be72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800be76:	4692      	mov	sl, r2
 800be78:	469b      	mov	fp, r3
 800be7a:	4643      	mov	r3, r8
 800be7c:	eb1a 0303 	adds.w	r3, sl, r3
 800be80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be84:	464b      	mov	r3, r9
 800be86:	eb4b 0303 	adc.w	r3, fp, r3
 800be8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800be8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	2200      	movs	r2, #0
 800be96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be9a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800be9e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bea2:	460b      	mov	r3, r1
 800bea4:	18db      	adds	r3, r3, r3
 800bea6:	643b      	str	r3, [r7, #64]	; 0x40
 800bea8:	4613      	mov	r3, r2
 800beaa:	eb42 0303 	adc.w	r3, r2, r3
 800beae:	647b      	str	r3, [r7, #68]	; 0x44
 800beb0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800beb4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800beb8:	f7f4 f992 	bl	80001e0 <__aeabi_uldivmod>
 800bebc:	4602      	mov	r2, r0
 800bebe:	460b      	mov	r3, r1
 800bec0:	4611      	mov	r1, r2
 800bec2:	4b3d      	ldr	r3, [pc, #244]	; (800bfb8 <UART_SetConfig+0x360>)
 800bec4:	fba3 2301 	umull	r2, r3, r3, r1
 800bec8:	095b      	lsrs	r3, r3, #5
 800beca:	2264      	movs	r2, #100	; 0x64
 800becc:	fb02 f303 	mul.w	r3, r2, r3
 800bed0:	1acb      	subs	r3, r1, r3
 800bed2:	00db      	lsls	r3, r3, #3
 800bed4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bed8:	4b37      	ldr	r3, [pc, #220]	; (800bfb8 <UART_SetConfig+0x360>)
 800beda:	fba3 2302 	umull	r2, r3, r3, r2
 800bede:	095b      	lsrs	r3, r3, #5
 800bee0:	005b      	lsls	r3, r3, #1
 800bee2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bee6:	441c      	add	r4, r3
 800bee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800beec:	2200      	movs	r2, #0
 800beee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bef2:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bef6:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800befa:	4642      	mov	r2, r8
 800befc:	464b      	mov	r3, r9
 800befe:	1891      	adds	r1, r2, r2
 800bf00:	63b9      	str	r1, [r7, #56]	; 0x38
 800bf02:	415b      	adcs	r3, r3
 800bf04:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf06:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bf0a:	4641      	mov	r1, r8
 800bf0c:	1851      	adds	r1, r2, r1
 800bf0e:	6339      	str	r1, [r7, #48]	; 0x30
 800bf10:	4649      	mov	r1, r9
 800bf12:	414b      	adcs	r3, r1
 800bf14:	637b      	str	r3, [r7, #52]	; 0x34
 800bf16:	f04f 0200 	mov.w	r2, #0
 800bf1a:	f04f 0300 	mov.w	r3, #0
 800bf1e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bf22:	4659      	mov	r1, fp
 800bf24:	00cb      	lsls	r3, r1, #3
 800bf26:	4651      	mov	r1, sl
 800bf28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf2c:	4651      	mov	r1, sl
 800bf2e:	00ca      	lsls	r2, r1, #3
 800bf30:	4610      	mov	r0, r2
 800bf32:	4619      	mov	r1, r3
 800bf34:	4603      	mov	r3, r0
 800bf36:	4642      	mov	r2, r8
 800bf38:	189b      	adds	r3, r3, r2
 800bf3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf3e:	464b      	mov	r3, r9
 800bf40:	460a      	mov	r2, r1
 800bf42:	eb42 0303 	adc.w	r3, r2, r3
 800bf46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	2200      	movs	r2, #0
 800bf52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bf56:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bf5a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bf5e:	460b      	mov	r3, r1
 800bf60:	18db      	adds	r3, r3, r3
 800bf62:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf64:	4613      	mov	r3, r2
 800bf66:	eb42 0303 	adc.w	r3, r2, r3
 800bf6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bf70:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bf74:	f7f4 f934 	bl	80001e0 <__aeabi_uldivmod>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	4b0e      	ldr	r3, [pc, #56]	; (800bfb8 <UART_SetConfig+0x360>)
 800bf7e:	fba3 1302 	umull	r1, r3, r3, r2
 800bf82:	095b      	lsrs	r3, r3, #5
 800bf84:	2164      	movs	r1, #100	; 0x64
 800bf86:	fb01 f303 	mul.w	r3, r1, r3
 800bf8a:	1ad3      	subs	r3, r2, r3
 800bf8c:	00db      	lsls	r3, r3, #3
 800bf8e:	3332      	adds	r3, #50	; 0x32
 800bf90:	4a09      	ldr	r2, [pc, #36]	; (800bfb8 <UART_SetConfig+0x360>)
 800bf92:	fba2 2303 	umull	r2, r3, r2, r3
 800bf96:	095b      	lsrs	r3, r3, #5
 800bf98:	f003 0207 	and.w	r2, r3, #7
 800bf9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	4422      	add	r2, r4
 800bfa4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bfa6:	e108      	b.n	800c1ba <UART_SetConfig+0x562>
 800bfa8:	00a037a0 	.word	0x00a037a0
 800bfac:	0800f5f0 	.word	0x0800f5f0
 800bfb0:	40011000 	.word	0x40011000
 800bfb4:	40011400 	.word	0x40011400
 800bfb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bfbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bfc6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bfca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bfce:	4642      	mov	r2, r8
 800bfd0:	464b      	mov	r3, r9
 800bfd2:	1891      	adds	r1, r2, r2
 800bfd4:	6239      	str	r1, [r7, #32]
 800bfd6:	415b      	adcs	r3, r3
 800bfd8:	627b      	str	r3, [r7, #36]	; 0x24
 800bfda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bfde:	4641      	mov	r1, r8
 800bfe0:	1854      	adds	r4, r2, r1
 800bfe2:	4649      	mov	r1, r9
 800bfe4:	eb43 0501 	adc.w	r5, r3, r1
 800bfe8:	f04f 0200 	mov.w	r2, #0
 800bfec:	f04f 0300 	mov.w	r3, #0
 800bff0:	00eb      	lsls	r3, r5, #3
 800bff2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bff6:	00e2      	lsls	r2, r4, #3
 800bff8:	4614      	mov	r4, r2
 800bffa:	461d      	mov	r5, r3
 800bffc:	4643      	mov	r3, r8
 800bffe:	18e3      	adds	r3, r4, r3
 800c000:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c004:	464b      	mov	r3, r9
 800c006:	eb45 0303 	adc.w	r3, r5, r3
 800c00a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c00e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	2200      	movs	r2, #0
 800c016:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c01a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c01e:	f04f 0200 	mov.w	r2, #0
 800c022:	f04f 0300 	mov.w	r3, #0
 800c026:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c02a:	4629      	mov	r1, r5
 800c02c:	008b      	lsls	r3, r1, #2
 800c02e:	4621      	mov	r1, r4
 800c030:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c034:	4621      	mov	r1, r4
 800c036:	008a      	lsls	r2, r1, #2
 800c038:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c03c:	f7f4 f8d0 	bl	80001e0 <__aeabi_uldivmod>
 800c040:	4602      	mov	r2, r0
 800c042:	460b      	mov	r3, r1
 800c044:	4b60      	ldr	r3, [pc, #384]	; (800c1c8 <UART_SetConfig+0x570>)
 800c046:	fba3 2302 	umull	r2, r3, r3, r2
 800c04a:	095b      	lsrs	r3, r3, #5
 800c04c:	011c      	lsls	r4, r3, #4
 800c04e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c052:	2200      	movs	r2, #0
 800c054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c058:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c05c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c060:	4642      	mov	r2, r8
 800c062:	464b      	mov	r3, r9
 800c064:	1891      	adds	r1, r2, r2
 800c066:	61b9      	str	r1, [r7, #24]
 800c068:	415b      	adcs	r3, r3
 800c06a:	61fb      	str	r3, [r7, #28]
 800c06c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c070:	4641      	mov	r1, r8
 800c072:	1851      	adds	r1, r2, r1
 800c074:	6139      	str	r1, [r7, #16]
 800c076:	4649      	mov	r1, r9
 800c078:	414b      	adcs	r3, r1
 800c07a:	617b      	str	r3, [r7, #20]
 800c07c:	f04f 0200 	mov.w	r2, #0
 800c080:	f04f 0300 	mov.w	r3, #0
 800c084:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c088:	4659      	mov	r1, fp
 800c08a:	00cb      	lsls	r3, r1, #3
 800c08c:	4651      	mov	r1, sl
 800c08e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c092:	4651      	mov	r1, sl
 800c094:	00ca      	lsls	r2, r1, #3
 800c096:	4610      	mov	r0, r2
 800c098:	4619      	mov	r1, r3
 800c09a:	4603      	mov	r3, r0
 800c09c:	4642      	mov	r2, r8
 800c09e:	189b      	adds	r3, r3, r2
 800c0a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c0a4:	464b      	mov	r3, r9
 800c0a6:	460a      	mov	r2, r1
 800c0a8:	eb42 0303 	adc.w	r3, r2, r3
 800c0ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c0b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	67bb      	str	r3, [r7, #120]	; 0x78
 800c0ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c0bc:	f04f 0200 	mov.w	r2, #0
 800c0c0:	f04f 0300 	mov.w	r3, #0
 800c0c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c0c8:	4649      	mov	r1, r9
 800c0ca:	008b      	lsls	r3, r1, #2
 800c0cc:	4641      	mov	r1, r8
 800c0ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c0d2:	4641      	mov	r1, r8
 800c0d4:	008a      	lsls	r2, r1, #2
 800c0d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c0da:	f7f4 f881 	bl	80001e0 <__aeabi_uldivmod>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	4b39      	ldr	r3, [pc, #228]	; (800c1c8 <UART_SetConfig+0x570>)
 800c0e4:	fba3 1302 	umull	r1, r3, r3, r2
 800c0e8:	095b      	lsrs	r3, r3, #5
 800c0ea:	2164      	movs	r1, #100	; 0x64
 800c0ec:	fb01 f303 	mul.w	r3, r1, r3
 800c0f0:	1ad3      	subs	r3, r2, r3
 800c0f2:	011b      	lsls	r3, r3, #4
 800c0f4:	3332      	adds	r3, #50	; 0x32
 800c0f6:	4a34      	ldr	r2, [pc, #208]	; (800c1c8 <UART_SetConfig+0x570>)
 800c0f8:	fba2 2303 	umull	r2, r3, r2, r3
 800c0fc:	095b      	lsrs	r3, r3, #5
 800c0fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c102:	441c      	add	r4, r3
 800c104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c108:	2200      	movs	r2, #0
 800c10a:	673b      	str	r3, [r7, #112]	; 0x70
 800c10c:	677a      	str	r2, [r7, #116]	; 0x74
 800c10e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c112:	4642      	mov	r2, r8
 800c114:	464b      	mov	r3, r9
 800c116:	1891      	adds	r1, r2, r2
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	415b      	adcs	r3, r3
 800c11c:	60fb      	str	r3, [r7, #12]
 800c11e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c122:	4641      	mov	r1, r8
 800c124:	1851      	adds	r1, r2, r1
 800c126:	6039      	str	r1, [r7, #0]
 800c128:	4649      	mov	r1, r9
 800c12a:	414b      	adcs	r3, r1
 800c12c:	607b      	str	r3, [r7, #4]
 800c12e:	f04f 0200 	mov.w	r2, #0
 800c132:	f04f 0300 	mov.w	r3, #0
 800c136:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c13a:	4659      	mov	r1, fp
 800c13c:	00cb      	lsls	r3, r1, #3
 800c13e:	4651      	mov	r1, sl
 800c140:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c144:	4651      	mov	r1, sl
 800c146:	00ca      	lsls	r2, r1, #3
 800c148:	4610      	mov	r0, r2
 800c14a:	4619      	mov	r1, r3
 800c14c:	4603      	mov	r3, r0
 800c14e:	4642      	mov	r2, r8
 800c150:	189b      	adds	r3, r3, r2
 800c152:	66bb      	str	r3, [r7, #104]	; 0x68
 800c154:	464b      	mov	r3, r9
 800c156:	460a      	mov	r2, r1
 800c158:	eb42 0303 	adc.w	r3, r2, r3
 800c15c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c15e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	2200      	movs	r2, #0
 800c166:	663b      	str	r3, [r7, #96]	; 0x60
 800c168:	667a      	str	r2, [r7, #100]	; 0x64
 800c16a:	f04f 0200 	mov.w	r2, #0
 800c16e:	f04f 0300 	mov.w	r3, #0
 800c172:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c176:	4649      	mov	r1, r9
 800c178:	008b      	lsls	r3, r1, #2
 800c17a:	4641      	mov	r1, r8
 800c17c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c180:	4641      	mov	r1, r8
 800c182:	008a      	lsls	r2, r1, #2
 800c184:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c188:	f7f4 f82a 	bl	80001e0 <__aeabi_uldivmod>
 800c18c:	4602      	mov	r2, r0
 800c18e:	460b      	mov	r3, r1
 800c190:	4b0d      	ldr	r3, [pc, #52]	; (800c1c8 <UART_SetConfig+0x570>)
 800c192:	fba3 1302 	umull	r1, r3, r3, r2
 800c196:	095b      	lsrs	r3, r3, #5
 800c198:	2164      	movs	r1, #100	; 0x64
 800c19a:	fb01 f303 	mul.w	r3, r1, r3
 800c19e:	1ad3      	subs	r3, r2, r3
 800c1a0:	011b      	lsls	r3, r3, #4
 800c1a2:	3332      	adds	r3, #50	; 0x32
 800c1a4:	4a08      	ldr	r2, [pc, #32]	; (800c1c8 <UART_SetConfig+0x570>)
 800c1a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c1aa:	095b      	lsrs	r3, r3, #5
 800c1ac:	f003 020f 	and.w	r2, r3, #15
 800c1b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4422      	add	r2, r4
 800c1b8:	609a      	str	r2, [r3, #8]
}
 800c1ba:	bf00      	nop
 800c1bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c1c6:	bf00      	nop
 800c1c8:	51eb851f 	.word	0x51eb851f

0800c1cc <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 800c1d0:	bf00      	nop
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d8:	4770      	bx	lr
	...

0800c1dc <__NVIC_SetPriority>:
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	6039      	str	r1, [r7, #0]
 800c1e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c1e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	db0a      	blt.n	800c206 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	b2da      	uxtb	r2, r3
 800c1f4:	490c      	ldr	r1, [pc, #48]	; (800c228 <__NVIC_SetPriority+0x4c>)
 800c1f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1fa:	0112      	lsls	r2, r2, #4
 800c1fc:	b2d2      	uxtb	r2, r2
 800c1fe:	440b      	add	r3, r1
 800c200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c204:	e00a      	b.n	800c21c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	b2da      	uxtb	r2, r3
 800c20a:	4908      	ldr	r1, [pc, #32]	; (800c22c <__NVIC_SetPriority+0x50>)
 800c20c:	79fb      	ldrb	r3, [r7, #7]
 800c20e:	f003 030f 	and.w	r3, r3, #15
 800c212:	3b04      	subs	r3, #4
 800c214:	0112      	lsls	r2, r2, #4
 800c216:	b2d2      	uxtb	r2, r2
 800c218:	440b      	add	r3, r1
 800c21a:	761a      	strb	r2, [r3, #24]
}
 800c21c:	bf00      	nop
 800c21e:	370c      	adds	r7, #12
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr
 800c228:	e000e100 	.word	0xe000e100
 800c22c:	e000ed00 	.word	0xe000ed00

0800c230 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c230:	b580      	push	{r7, lr}
 800c232:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c234:	4b05      	ldr	r3, [pc, #20]	; (800c24c <SysTick_Handler+0x1c>)
 800c236:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c238:	f002 f962 	bl	800e500 <xTaskGetSchedulerState>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b01      	cmp	r3, #1
 800c240:	d001      	beq.n	800c246 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c242:	f000 fd99 	bl	800cd78 <xPortSysTickHandler>
  }
}
 800c246:	bf00      	nop
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	e000e010 	.word	0xe000e010

0800c250 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c250:	b580      	push	{r7, lr}
 800c252:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c254:	2100      	movs	r1, #0
 800c256:	f06f 0004 	mvn.w	r0, #4
 800c25a:	f7ff ffbf 	bl	800c1dc <__NVIC_SetPriority>
#endif
}
 800c25e:	bf00      	nop
 800c260:	bd80      	pop	{r7, pc}
	...

0800c264 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c26a:	f3ef 8305 	mrs	r3, IPSR
 800c26e:	603b      	str	r3, [r7, #0]
  return(result);
 800c270:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c272:	2b00      	cmp	r3, #0
 800c274:	d003      	beq.n	800c27e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c276:	f06f 0305 	mvn.w	r3, #5
 800c27a:	607b      	str	r3, [r7, #4]
 800c27c:	e00c      	b.n	800c298 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c27e:	4b0a      	ldr	r3, [pc, #40]	; (800c2a8 <osKernelInitialize+0x44>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d105      	bne.n	800c292 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c286:	4b08      	ldr	r3, [pc, #32]	; (800c2a8 <osKernelInitialize+0x44>)
 800c288:	2201      	movs	r2, #1
 800c28a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c28c:	2300      	movs	r3, #0
 800c28e:	607b      	str	r3, [r7, #4]
 800c290:	e002      	b.n	800c298 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c292:	f04f 33ff 	mov.w	r3, #4294967295
 800c296:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c298:	687b      	ldr	r3, [r7, #4]
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	370c      	adds	r7, #12
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a4:	4770      	bx	lr
 800c2a6:	bf00      	nop
 800c2a8:	20000934 	.word	0x20000934

0800c2ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2b2:	f3ef 8305 	mrs	r3, IPSR
 800c2b6:	603b      	str	r3, [r7, #0]
  return(result);
 800c2b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d003      	beq.n	800c2c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c2be:	f06f 0305 	mvn.w	r3, #5
 800c2c2:	607b      	str	r3, [r7, #4]
 800c2c4:	e010      	b.n	800c2e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c2c6:	4b0b      	ldr	r3, [pc, #44]	; (800c2f4 <osKernelStart+0x48>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d109      	bne.n	800c2e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c2ce:	f7ff ffbf 	bl	800c250 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c2d2:	4b08      	ldr	r3, [pc, #32]	; (800c2f4 <osKernelStart+0x48>)
 800c2d4:	2202      	movs	r2, #2
 800c2d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c2d8:	f001 fcb6 	bl	800dc48 <vTaskStartScheduler>
      stat = osOK;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	607b      	str	r3, [r7, #4]
 800c2e0:	e002      	b.n	800c2e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c2e2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c2e8:	687b      	ldr	r3, [r7, #4]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	20000934 	.word	0x20000934

0800c2f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b08e      	sub	sp, #56	; 0x38
 800c2fc:	af04      	add	r7, sp, #16
 800c2fe:	60f8      	str	r0, [r7, #12]
 800c300:	60b9      	str	r1, [r7, #8]
 800c302:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c304:	2300      	movs	r3, #0
 800c306:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c308:	f3ef 8305 	mrs	r3, IPSR
 800c30c:	617b      	str	r3, [r7, #20]
  return(result);
 800c30e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c310:	2b00      	cmp	r3, #0
 800c312:	d17e      	bne.n	800c412 <osThreadNew+0x11a>
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d07b      	beq.n	800c412 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c31a:	2380      	movs	r3, #128	; 0x80
 800c31c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c31e:	2318      	movs	r3, #24
 800c320:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c322:	2300      	movs	r3, #0
 800c324:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c326:	f04f 33ff 	mov.w	r3, #4294967295
 800c32a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d045      	beq.n	800c3be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d002      	beq.n	800c340 <osThreadNew+0x48>
        name = attr->name;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	699b      	ldr	r3, [r3, #24]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d002      	beq.n	800c34e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	699b      	ldr	r3, [r3, #24]
 800c34c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c34e:	69fb      	ldr	r3, [r7, #28]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d008      	beq.n	800c366 <osThreadNew+0x6e>
 800c354:	69fb      	ldr	r3, [r7, #28]
 800c356:	2b38      	cmp	r3, #56	; 0x38
 800c358:	d805      	bhi.n	800c366 <osThreadNew+0x6e>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	f003 0301 	and.w	r3, r3, #1
 800c362:	2b00      	cmp	r3, #0
 800c364:	d001      	beq.n	800c36a <osThreadNew+0x72>
        return (NULL);
 800c366:	2300      	movs	r3, #0
 800c368:	e054      	b.n	800c414 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	695b      	ldr	r3, [r3, #20]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d003      	beq.n	800c37a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	695b      	ldr	r3, [r3, #20]
 800c376:	089b      	lsrs	r3, r3, #2
 800c378:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	689b      	ldr	r3, [r3, #8]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d00e      	beq.n	800c3a0 <osThreadNew+0xa8>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	68db      	ldr	r3, [r3, #12]
 800c386:	2bbb      	cmp	r3, #187	; 0xbb
 800c388:	d90a      	bls.n	800c3a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d006      	beq.n	800c3a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	695b      	ldr	r3, [r3, #20]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d002      	beq.n	800c3a0 <osThreadNew+0xa8>
        mem = 1;
 800c39a:	2301      	movs	r3, #1
 800c39c:	61bb      	str	r3, [r7, #24]
 800c39e:	e010      	b.n	800c3c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d10c      	bne.n	800c3c2 <osThreadNew+0xca>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	68db      	ldr	r3, [r3, #12]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d108      	bne.n	800c3c2 <osThreadNew+0xca>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	691b      	ldr	r3, [r3, #16]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d104      	bne.n	800c3c2 <osThreadNew+0xca>
          mem = 0;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	61bb      	str	r3, [r7, #24]
 800c3bc:	e001      	b.n	800c3c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d110      	bne.n	800c3ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c3d0:	9202      	str	r2, [sp, #8]
 800c3d2:	9301      	str	r3, [sp, #4]
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	9300      	str	r3, [sp, #0]
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	6a3a      	ldr	r2, [r7, #32]
 800c3dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c3de:	68f8      	ldr	r0, [r7, #12]
 800c3e0:	f001 fa46 	bl	800d870 <xTaskCreateStatic>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	613b      	str	r3, [r7, #16]
 800c3e8:	e013      	b.n	800c412 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c3ea:	69bb      	ldr	r3, [r7, #24]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d110      	bne.n	800c412 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c3f0:	6a3b      	ldr	r3, [r7, #32]
 800c3f2:	b29a      	uxth	r2, r3
 800c3f4:	f107 0310 	add.w	r3, r7, #16
 800c3f8:	9301      	str	r3, [sp, #4]
 800c3fa:	69fb      	ldr	r3, [r7, #28]
 800c3fc:	9300      	str	r3, [sp, #0]
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c402:	68f8      	ldr	r0, [r7, #12]
 800c404:	f001 fa91 	bl	800d92a <xTaskCreate>
 800c408:	4603      	mov	r3, r0
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d001      	beq.n	800c412 <osThreadNew+0x11a>
            hTask = NULL;
 800c40e:	2300      	movs	r3, #0
 800c410:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c412:	693b      	ldr	r3, [r7, #16]
}
 800c414:	4618      	mov	r0, r3
 800c416:	3728      	adds	r7, #40	; 0x28
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c424:	f3ef 8305 	mrs	r3, IPSR
 800c428:	60bb      	str	r3, [r7, #8]
  return(result);
 800c42a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d003      	beq.n	800c438 <osDelay+0x1c>
    stat = osErrorISR;
 800c430:	f06f 0305 	mvn.w	r3, #5
 800c434:	60fb      	str	r3, [r7, #12]
 800c436:	e007      	b.n	800c448 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c438:	2300      	movs	r3, #0
 800c43a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d002      	beq.n	800c448 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f001 fbcc 	bl	800dbe0 <vTaskDelay>
    }
  }

  return (stat);
 800c448:	68fb      	ldr	r3, [r7, #12]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3710      	adds	r7, #16
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
	...

0800c454 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c454:	b480      	push	{r7}
 800c456:	b085      	sub	sp, #20
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	4a07      	ldr	r2, [pc, #28]	; (800c480 <vApplicationGetIdleTaskMemory+0x2c>)
 800c464:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	4a06      	ldr	r2, [pc, #24]	; (800c484 <vApplicationGetIdleTaskMemory+0x30>)
 800c46a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2280      	movs	r2, #128	; 0x80
 800c470:	601a      	str	r2, [r3, #0]
}
 800c472:	bf00      	nop
 800c474:	3714      	adds	r7, #20
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr
 800c47e:	bf00      	nop
 800c480:	20000938 	.word	0x20000938
 800c484:	200009f4 	.word	0x200009f4

0800c488 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c488:	b480      	push	{r7}
 800c48a:	b085      	sub	sp, #20
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	60f8      	str	r0, [r7, #12]
 800c490:	60b9      	str	r1, [r7, #8]
 800c492:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	4a07      	ldr	r2, [pc, #28]	; (800c4b4 <vApplicationGetTimerTaskMemory+0x2c>)
 800c498:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	4a06      	ldr	r2, [pc, #24]	; (800c4b8 <vApplicationGetTimerTaskMemory+0x30>)
 800c49e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c4a6:	601a      	str	r2, [r3, #0]
}
 800c4a8:	bf00      	nop
 800c4aa:	3714      	adds	r7, #20
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr
 800c4b4:	20000bf4 	.word	0x20000bf4
 800c4b8:	20000cb0 	.word	0x20000cb0

0800c4bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b08a      	sub	sp, #40	; 0x28
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c4c8:	f001 fc2e 	bl	800dd28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c4cc:	4b5b      	ldr	r3, [pc, #364]	; (800c63c <pvPortMalloc+0x180>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d101      	bne.n	800c4d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c4d4:	f000 f920 	bl	800c718 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c4d8:	4b59      	ldr	r3, [pc, #356]	; (800c640 <pvPortMalloc+0x184>)
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	4013      	ands	r3, r2
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	f040 8093 	bne.w	800c60c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d01d      	beq.n	800c528 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c4ec:	2208      	movs	r2, #8
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f003 0307 	and.w	r3, r3, #7
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d014      	beq.n	800c528 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f023 0307 	bic.w	r3, r3, #7
 800c504:	3308      	adds	r3, #8
 800c506:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f003 0307 	and.w	r3, r3, #7
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d00a      	beq.n	800c528 <pvPortMalloc+0x6c>
	__asm volatile
 800c512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c516:	f383 8811 	msr	BASEPRI, r3
 800c51a:	f3bf 8f6f 	isb	sy
 800c51e:	f3bf 8f4f 	dsb	sy
 800c522:	617b      	str	r3, [r7, #20]
}
 800c524:	bf00      	nop
 800c526:	e7fe      	b.n	800c526 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d06e      	beq.n	800c60c <pvPortMalloc+0x150>
 800c52e:	4b45      	ldr	r3, [pc, #276]	; (800c644 <pvPortMalloc+0x188>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	429a      	cmp	r2, r3
 800c536:	d869      	bhi.n	800c60c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c538:	4b43      	ldr	r3, [pc, #268]	; (800c648 <pvPortMalloc+0x18c>)
 800c53a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c53c:	4b42      	ldr	r3, [pc, #264]	; (800c648 <pvPortMalloc+0x18c>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c542:	e004      	b.n	800c54e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c546:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	429a      	cmp	r2, r3
 800c556:	d903      	bls.n	800c560 <pvPortMalloc+0xa4>
 800c558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d1f1      	bne.n	800c544 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c560:	4b36      	ldr	r3, [pc, #216]	; (800c63c <pvPortMalloc+0x180>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c566:	429a      	cmp	r2, r3
 800c568:	d050      	beq.n	800c60c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c56a:	6a3b      	ldr	r3, [r7, #32]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	2208      	movs	r2, #8
 800c570:	4413      	add	r3, r2
 800c572:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c576:	681a      	ldr	r2, [r3, #0]
 800c578:	6a3b      	ldr	r3, [r7, #32]
 800c57a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c57e:	685a      	ldr	r2, [r3, #4]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	1ad2      	subs	r2, r2, r3
 800c584:	2308      	movs	r3, #8
 800c586:	005b      	lsls	r3, r3, #1
 800c588:	429a      	cmp	r2, r3
 800c58a:	d91f      	bls.n	800c5cc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c58c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	4413      	add	r3, r2
 800c592:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c594:	69bb      	ldr	r3, [r7, #24]
 800c596:	f003 0307 	and.w	r3, r3, #7
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00a      	beq.n	800c5b4 <pvPortMalloc+0xf8>
	__asm volatile
 800c59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a2:	f383 8811 	msr	BASEPRI, r3
 800c5a6:	f3bf 8f6f 	isb	sy
 800c5aa:	f3bf 8f4f 	dsb	sy
 800c5ae:	613b      	str	r3, [r7, #16]
}
 800c5b0:	bf00      	nop
 800c5b2:	e7fe      	b.n	800c5b2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b6:	685a      	ldr	r2, [r3, #4]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	1ad2      	subs	r2, r2, r3
 800c5bc:	69bb      	ldr	r3, [r7, #24]
 800c5be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c2:	687a      	ldr	r2, [r7, #4]
 800c5c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c5c6:	69b8      	ldr	r0, [r7, #24]
 800c5c8:	f000 f908 	bl	800c7dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c5cc:	4b1d      	ldr	r3, [pc, #116]	; (800c644 <pvPortMalloc+0x188>)
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	1ad3      	subs	r3, r2, r3
 800c5d6:	4a1b      	ldr	r2, [pc, #108]	; (800c644 <pvPortMalloc+0x188>)
 800c5d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c5da:	4b1a      	ldr	r3, [pc, #104]	; (800c644 <pvPortMalloc+0x188>)
 800c5dc:	681a      	ldr	r2, [r3, #0]
 800c5de:	4b1b      	ldr	r3, [pc, #108]	; (800c64c <pvPortMalloc+0x190>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d203      	bcs.n	800c5ee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c5e6:	4b17      	ldr	r3, [pc, #92]	; (800c644 <pvPortMalloc+0x188>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4a18      	ldr	r2, [pc, #96]	; (800c64c <pvPortMalloc+0x190>)
 800c5ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f0:	685a      	ldr	r2, [r3, #4]
 800c5f2:	4b13      	ldr	r3, [pc, #76]	; (800c640 <pvPortMalloc+0x184>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	431a      	orrs	r2, r3
 800c5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fe:	2200      	movs	r2, #0
 800c600:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c602:	4b13      	ldr	r3, [pc, #76]	; (800c650 <pvPortMalloc+0x194>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	3301      	adds	r3, #1
 800c608:	4a11      	ldr	r2, [pc, #68]	; (800c650 <pvPortMalloc+0x194>)
 800c60a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c60c:	f001 fb9a 	bl	800dd44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	f003 0307 	and.w	r3, r3, #7
 800c616:	2b00      	cmp	r3, #0
 800c618:	d00a      	beq.n	800c630 <pvPortMalloc+0x174>
	__asm volatile
 800c61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61e:	f383 8811 	msr	BASEPRI, r3
 800c622:	f3bf 8f6f 	isb	sy
 800c626:	f3bf 8f4f 	dsb	sy
 800c62a:	60fb      	str	r3, [r7, #12]
}
 800c62c:	bf00      	nop
 800c62e:	e7fe      	b.n	800c62e <pvPortMalloc+0x172>
	return pvReturn;
 800c630:	69fb      	ldr	r3, [r7, #28]
}
 800c632:	4618      	mov	r0, r3
 800c634:	3728      	adds	r7, #40	; 0x28
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	20004cb8 	.word	0x20004cb8
 800c640:	20004ccc 	.word	0x20004ccc
 800c644:	20004cbc 	.word	0x20004cbc
 800c648:	20004cb0 	.word	0x20004cb0
 800c64c:	20004cc0 	.word	0x20004cc0
 800c650:	20004cc4 	.word	0x20004cc4

0800c654 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b086      	sub	sp, #24
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d04d      	beq.n	800c702 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c666:	2308      	movs	r3, #8
 800c668:	425b      	negs	r3, r3
 800c66a:	697a      	ldr	r2, [r7, #20]
 800c66c:	4413      	add	r3, r2
 800c66e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	685a      	ldr	r2, [r3, #4]
 800c678:	4b24      	ldr	r3, [pc, #144]	; (800c70c <vPortFree+0xb8>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4013      	ands	r3, r2
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d10a      	bne.n	800c698 <vPortFree+0x44>
	__asm volatile
 800c682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c686:	f383 8811 	msr	BASEPRI, r3
 800c68a:	f3bf 8f6f 	isb	sy
 800c68e:	f3bf 8f4f 	dsb	sy
 800c692:	60fb      	str	r3, [r7, #12]
}
 800c694:	bf00      	nop
 800c696:	e7fe      	b.n	800c696 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d00a      	beq.n	800c6b6 <vPortFree+0x62>
	__asm volatile
 800c6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a4:	f383 8811 	msr	BASEPRI, r3
 800c6a8:	f3bf 8f6f 	isb	sy
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	60bb      	str	r3, [r7, #8]
}
 800c6b2:	bf00      	nop
 800c6b4:	e7fe      	b.n	800c6b4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	685a      	ldr	r2, [r3, #4]
 800c6ba:	4b14      	ldr	r3, [pc, #80]	; (800c70c <vPortFree+0xb8>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	4013      	ands	r3, r2
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d01e      	beq.n	800c702 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d11a      	bne.n	800c702 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	685a      	ldr	r2, [r3, #4]
 800c6d0:	4b0e      	ldr	r3, [pc, #56]	; (800c70c <vPortFree+0xb8>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	43db      	mvns	r3, r3
 800c6d6:	401a      	ands	r2, r3
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c6dc:	f001 fb24 	bl	800dd28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	685a      	ldr	r2, [r3, #4]
 800c6e4:	4b0a      	ldr	r3, [pc, #40]	; (800c710 <vPortFree+0xbc>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	4a09      	ldr	r2, [pc, #36]	; (800c710 <vPortFree+0xbc>)
 800c6ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c6ee:	6938      	ldr	r0, [r7, #16]
 800c6f0:	f000 f874 	bl	800c7dc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c6f4:	4b07      	ldr	r3, [pc, #28]	; (800c714 <vPortFree+0xc0>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	4a06      	ldr	r2, [pc, #24]	; (800c714 <vPortFree+0xc0>)
 800c6fc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c6fe:	f001 fb21 	bl	800dd44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c702:	bf00      	nop
 800c704:	3718      	adds	r7, #24
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	20004ccc 	.word	0x20004ccc
 800c710:	20004cbc 	.word	0x20004cbc
 800c714:	20004cc8 	.word	0x20004cc8

0800c718 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c718:	b480      	push	{r7}
 800c71a:	b085      	sub	sp, #20
 800c71c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c71e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c722:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c724:	4b27      	ldr	r3, [pc, #156]	; (800c7c4 <prvHeapInit+0xac>)
 800c726:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f003 0307 	and.w	r3, r3, #7
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d00c      	beq.n	800c74c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	3307      	adds	r3, #7
 800c736:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f023 0307 	bic.w	r3, r3, #7
 800c73e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c740:	68ba      	ldr	r2, [r7, #8]
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	1ad3      	subs	r3, r2, r3
 800c746:	4a1f      	ldr	r2, [pc, #124]	; (800c7c4 <prvHeapInit+0xac>)
 800c748:	4413      	add	r3, r2
 800c74a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c750:	4a1d      	ldr	r2, [pc, #116]	; (800c7c8 <prvHeapInit+0xb0>)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c756:	4b1c      	ldr	r3, [pc, #112]	; (800c7c8 <prvHeapInit+0xb0>)
 800c758:	2200      	movs	r2, #0
 800c75a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	68ba      	ldr	r2, [r7, #8]
 800c760:	4413      	add	r3, r2
 800c762:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c764:	2208      	movs	r2, #8
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	1a9b      	subs	r3, r3, r2
 800c76a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f023 0307 	bic.w	r3, r3, #7
 800c772:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	4a15      	ldr	r2, [pc, #84]	; (800c7cc <prvHeapInit+0xb4>)
 800c778:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c77a:	4b14      	ldr	r3, [pc, #80]	; (800c7cc <prvHeapInit+0xb4>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2200      	movs	r2, #0
 800c780:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c782:	4b12      	ldr	r3, [pc, #72]	; (800c7cc <prvHeapInit+0xb4>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	2200      	movs	r2, #0
 800c788:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	68fa      	ldr	r2, [r7, #12]
 800c792:	1ad2      	subs	r2, r2, r3
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c798:	4b0c      	ldr	r3, [pc, #48]	; (800c7cc <prvHeapInit+0xb4>)
 800c79a:	681a      	ldr	r2, [r3, #0]
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	4a0a      	ldr	r2, [pc, #40]	; (800c7d0 <prvHeapInit+0xb8>)
 800c7a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	4a09      	ldr	r2, [pc, #36]	; (800c7d4 <prvHeapInit+0xbc>)
 800c7ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c7b0:	4b09      	ldr	r3, [pc, #36]	; (800c7d8 <prvHeapInit+0xc0>)
 800c7b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c7b6:	601a      	str	r2, [r3, #0]
}
 800c7b8:	bf00      	nop
 800c7ba:	3714      	adds	r7, #20
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr
 800c7c4:	200010b0 	.word	0x200010b0
 800c7c8:	20004cb0 	.word	0x20004cb0
 800c7cc:	20004cb8 	.word	0x20004cb8
 800c7d0:	20004cc0 	.word	0x20004cc0
 800c7d4:	20004cbc 	.word	0x20004cbc
 800c7d8:	20004ccc 	.word	0x20004ccc

0800c7dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b085      	sub	sp, #20
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c7e4:	4b28      	ldr	r3, [pc, #160]	; (800c888 <prvInsertBlockIntoFreeList+0xac>)
 800c7e6:	60fb      	str	r3, [r7, #12]
 800c7e8:	e002      	b.n	800c7f0 <prvInsertBlockIntoFreeList+0x14>
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	60fb      	str	r3, [r7, #12]
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	687a      	ldr	r2, [r7, #4]
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d8f7      	bhi.n	800c7ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	68ba      	ldr	r2, [r7, #8]
 800c804:	4413      	add	r3, r2
 800c806:	687a      	ldr	r2, [r7, #4]
 800c808:	429a      	cmp	r2, r3
 800c80a:	d108      	bne.n	800c81e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	685a      	ldr	r2, [r3, #4]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	685b      	ldr	r3, [r3, #4]
 800c814:	441a      	add	r2, r3
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	68ba      	ldr	r2, [r7, #8]
 800c828:	441a      	add	r2, r3
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	429a      	cmp	r2, r3
 800c830:	d118      	bne.n	800c864 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	4b15      	ldr	r3, [pc, #84]	; (800c88c <prvInsertBlockIntoFreeList+0xb0>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d00d      	beq.n	800c85a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	685a      	ldr	r2, [r3, #4]
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	441a      	add	r2, r3
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	681a      	ldr	r2, [r3, #0]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	601a      	str	r2, [r3, #0]
 800c858:	e008      	b.n	800c86c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c85a:	4b0c      	ldr	r3, [pc, #48]	; (800c88c <prvInsertBlockIntoFreeList+0xb0>)
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	601a      	str	r2, [r3, #0]
 800c862:	e003      	b.n	800c86c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681a      	ldr	r2, [r3, #0]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c86c:	68fa      	ldr	r2, [r7, #12]
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	429a      	cmp	r2, r3
 800c872:	d002      	beq.n	800c87a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c87a:	bf00      	nop
 800c87c:	3714      	adds	r7, #20
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr
 800c886:	bf00      	nop
 800c888:	20004cb0 	.word	0x20004cb0
 800c88c:	20004cb8 	.word	0x20004cb8

0800c890 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f103 0208 	add.w	r2, r3, #8
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f103 0208 	add.w	r2, r3, #8
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f103 0208 	add.w	r2, r3, #8
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c8c4:	bf00      	nop
 800c8c6:	370c      	adds	r7, #12
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr

0800c8d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b083      	sub	sp, #12
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c8de:	bf00      	nop
 800c8e0:	370c      	adds	r7, #12
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr

0800c8ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c8ea:	b480      	push	{r7}
 800c8ec:	b085      	sub	sp, #20
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
 800c8f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	68fa      	ldr	r2, [r7, #12]
 800c8fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	689a      	ldr	r2, [r3, #8]
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	689b      	ldr	r3, [r3, #8]
 800c90c:	683a      	ldr	r2, [r7, #0]
 800c90e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	683a      	ldr	r2, [r7, #0]
 800c914:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	1c5a      	adds	r2, r3, #1
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	601a      	str	r2, [r3, #0]
}
 800c926:	bf00      	nop
 800c928:	3714      	adds	r7, #20
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr

0800c932 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c932:	b480      	push	{r7}
 800c934:	b085      	sub	sp, #20
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
 800c93a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c948:	d103      	bne.n	800c952 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	691b      	ldr	r3, [r3, #16]
 800c94e:	60fb      	str	r3, [r7, #12]
 800c950:	e00c      	b.n	800c96c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	3308      	adds	r3, #8
 800c956:	60fb      	str	r3, [r7, #12]
 800c958:	e002      	b.n	800c960 <vListInsert+0x2e>
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	60fb      	str	r3, [r7, #12]
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	68ba      	ldr	r2, [r7, #8]
 800c968:	429a      	cmp	r2, r3
 800c96a:	d2f6      	bcs.n	800c95a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	685a      	ldr	r2, [r3, #4]
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	683a      	ldr	r2, [r7, #0]
 800c97a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	68fa      	ldr	r2, [r7, #12]
 800c980:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	683a      	ldr	r2, [r7, #0]
 800c986:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	1c5a      	adds	r2, r3, #1
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	601a      	str	r2, [r3, #0]
}
 800c998:	bf00      	nop
 800c99a:	3714      	adds	r7, #20
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr

0800c9a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	691b      	ldr	r3, [r3, #16]
 800c9b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	685b      	ldr	r3, [r3, #4]
 800c9b6:	687a      	ldr	r2, [r7, #4]
 800c9b8:	6892      	ldr	r2, [r2, #8]
 800c9ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	689b      	ldr	r3, [r3, #8]
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	6852      	ldr	r2, [r2, #4]
 800c9c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d103      	bne.n	800c9d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	689a      	ldr	r2, [r3, #8]
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	1e5a      	subs	r2, r3, #1
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3714      	adds	r7, #20
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr

0800c9f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b085      	sub	sp, #20
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	60f8      	str	r0, [r7, #12]
 800ca00:	60b9      	str	r1, [r7, #8]
 800ca02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	3b04      	subs	r3, #4
 800ca08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ca10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	3b04      	subs	r3, #4
 800ca16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	f023 0201 	bic.w	r2, r3, #1
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	3b04      	subs	r3, #4
 800ca26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ca28:	4a0c      	ldr	r2, [pc, #48]	; (800ca5c <pxPortInitialiseStack+0x64>)
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	3b14      	subs	r3, #20
 800ca32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ca34:	687a      	ldr	r2, [r7, #4]
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	3b04      	subs	r3, #4
 800ca3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f06f 0202 	mvn.w	r2, #2
 800ca46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	3b20      	subs	r3, #32
 800ca4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3714      	adds	r7, #20
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr
 800ca5c:	0800ca61 	.word	0x0800ca61

0800ca60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ca60:	b480      	push	{r7}
 800ca62:	b085      	sub	sp, #20
 800ca64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ca66:	2300      	movs	r3, #0
 800ca68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ca6a:	4b12      	ldr	r3, [pc, #72]	; (800cab4 <prvTaskExitError+0x54>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca72:	d00a      	beq.n	800ca8a <prvTaskExitError+0x2a>
	__asm volatile
 800ca74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca78:	f383 8811 	msr	BASEPRI, r3
 800ca7c:	f3bf 8f6f 	isb	sy
 800ca80:	f3bf 8f4f 	dsb	sy
 800ca84:	60fb      	str	r3, [r7, #12]
}
 800ca86:	bf00      	nop
 800ca88:	e7fe      	b.n	800ca88 <prvTaskExitError+0x28>
	__asm volatile
 800ca8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca8e:	f383 8811 	msr	BASEPRI, r3
 800ca92:	f3bf 8f6f 	isb	sy
 800ca96:	f3bf 8f4f 	dsb	sy
 800ca9a:	60bb      	str	r3, [r7, #8]
}
 800ca9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ca9e:	bf00      	nop
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d0fc      	beq.n	800caa0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800caa6:	bf00      	nop
 800caa8:	bf00      	nop
 800caaa:	3714      	adds	r7, #20
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr
 800cab4:	20000010 	.word	0x20000010
	...

0800cac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cac0:	4b07      	ldr	r3, [pc, #28]	; (800cae0 <pxCurrentTCBConst2>)
 800cac2:	6819      	ldr	r1, [r3, #0]
 800cac4:	6808      	ldr	r0, [r1, #0]
 800cac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caca:	f380 8809 	msr	PSP, r0
 800cace:	f3bf 8f6f 	isb	sy
 800cad2:	f04f 0000 	mov.w	r0, #0
 800cad6:	f380 8811 	msr	BASEPRI, r0
 800cada:	4770      	bx	lr
 800cadc:	f3af 8000 	nop.w

0800cae0 <pxCurrentTCBConst2>:
 800cae0:	20004d18 	.word	0x20004d18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cae4:	bf00      	nop
 800cae6:	bf00      	nop

0800cae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cae8:	4808      	ldr	r0, [pc, #32]	; (800cb0c <prvPortStartFirstTask+0x24>)
 800caea:	6800      	ldr	r0, [r0, #0]
 800caec:	6800      	ldr	r0, [r0, #0]
 800caee:	f380 8808 	msr	MSP, r0
 800caf2:	f04f 0000 	mov.w	r0, #0
 800caf6:	f380 8814 	msr	CONTROL, r0
 800cafa:	b662      	cpsie	i
 800cafc:	b661      	cpsie	f
 800cafe:	f3bf 8f4f 	dsb	sy
 800cb02:	f3bf 8f6f 	isb	sy
 800cb06:	df00      	svc	0
 800cb08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cb0a:	bf00      	nop
 800cb0c:	e000ed08 	.word	0xe000ed08

0800cb10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b086      	sub	sp, #24
 800cb14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cb16:	4b46      	ldr	r3, [pc, #280]	; (800cc30 <xPortStartScheduler+0x120>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4a46      	ldr	r2, [pc, #280]	; (800cc34 <xPortStartScheduler+0x124>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d10a      	bne.n	800cb36 <xPortStartScheduler+0x26>
	__asm volatile
 800cb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb24:	f383 8811 	msr	BASEPRI, r3
 800cb28:	f3bf 8f6f 	isb	sy
 800cb2c:	f3bf 8f4f 	dsb	sy
 800cb30:	613b      	str	r3, [r7, #16]
}
 800cb32:	bf00      	nop
 800cb34:	e7fe      	b.n	800cb34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cb36:	4b3e      	ldr	r3, [pc, #248]	; (800cc30 <xPortStartScheduler+0x120>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4a3f      	ldr	r2, [pc, #252]	; (800cc38 <xPortStartScheduler+0x128>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d10a      	bne.n	800cb56 <xPortStartScheduler+0x46>
	__asm volatile
 800cb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb44:	f383 8811 	msr	BASEPRI, r3
 800cb48:	f3bf 8f6f 	isb	sy
 800cb4c:	f3bf 8f4f 	dsb	sy
 800cb50:	60fb      	str	r3, [r7, #12]
}
 800cb52:	bf00      	nop
 800cb54:	e7fe      	b.n	800cb54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cb56:	4b39      	ldr	r3, [pc, #228]	; (800cc3c <xPortStartScheduler+0x12c>)
 800cb58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	22ff      	movs	r2, #255	; 0xff
 800cb66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	b2db      	uxtb	r3, r3
 800cb6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cb70:	78fb      	ldrb	r3, [r7, #3]
 800cb72:	b2db      	uxtb	r3, r3
 800cb74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cb78:	b2da      	uxtb	r2, r3
 800cb7a:	4b31      	ldr	r3, [pc, #196]	; (800cc40 <xPortStartScheduler+0x130>)
 800cb7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cb7e:	4b31      	ldr	r3, [pc, #196]	; (800cc44 <xPortStartScheduler+0x134>)
 800cb80:	2207      	movs	r2, #7
 800cb82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb84:	e009      	b.n	800cb9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cb86:	4b2f      	ldr	r3, [pc, #188]	; (800cc44 <xPortStartScheduler+0x134>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	3b01      	subs	r3, #1
 800cb8c:	4a2d      	ldr	r2, [pc, #180]	; (800cc44 <xPortStartScheduler+0x134>)
 800cb8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cb90:	78fb      	ldrb	r3, [r7, #3]
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	005b      	lsls	r3, r3, #1
 800cb96:	b2db      	uxtb	r3, r3
 800cb98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb9a:	78fb      	ldrb	r3, [r7, #3]
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cba2:	2b80      	cmp	r3, #128	; 0x80
 800cba4:	d0ef      	beq.n	800cb86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cba6:	4b27      	ldr	r3, [pc, #156]	; (800cc44 <xPortStartScheduler+0x134>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f1c3 0307 	rsb	r3, r3, #7
 800cbae:	2b04      	cmp	r3, #4
 800cbb0:	d00a      	beq.n	800cbc8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb6:	f383 8811 	msr	BASEPRI, r3
 800cbba:	f3bf 8f6f 	isb	sy
 800cbbe:	f3bf 8f4f 	dsb	sy
 800cbc2:	60bb      	str	r3, [r7, #8]
}
 800cbc4:	bf00      	nop
 800cbc6:	e7fe      	b.n	800cbc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cbc8:	4b1e      	ldr	r3, [pc, #120]	; (800cc44 <xPortStartScheduler+0x134>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	021b      	lsls	r3, r3, #8
 800cbce:	4a1d      	ldr	r2, [pc, #116]	; (800cc44 <xPortStartScheduler+0x134>)
 800cbd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cbd2:	4b1c      	ldr	r3, [pc, #112]	; (800cc44 <xPortStartScheduler+0x134>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cbda:	4a1a      	ldr	r2, [pc, #104]	; (800cc44 <xPortStartScheduler+0x134>)
 800cbdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	b2da      	uxtb	r2, r3
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cbe6:	4b18      	ldr	r3, [pc, #96]	; (800cc48 <xPortStartScheduler+0x138>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4a17      	ldr	r2, [pc, #92]	; (800cc48 <xPortStartScheduler+0x138>)
 800cbec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cbf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cbf2:	4b15      	ldr	r3, [pc, #84]	; (800cc48 <xPortStartScheduler+0x138>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a14      	ldr	r2, [pc, #80]	; (800cc48 <xPortStartScheduler+0x138>)
 800cbf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cbfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cbfe:	f000 f8dd 	bl	800cdbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cc02:	4b12      	ldr	r3, [pc, #72]	; (800cc4c <xPortStartScheduler+0x13c>)
 800cc04:	2200      	movs	r2, #0
 800cc06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cc08:	f000 f8fc 	bl	800ce04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cc0c:	4b10      	ldr	r3, [pc, #64]	; (800cc50 <xPortStartScheduler+0x140>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4a0f      	ldr	r2, [pc, #60]	; (800cc50 <xPortStartScheduler+0x140>)
 800cc12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cc16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cc18:	f7ff ff66 	bl	800cae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cc1c:	f001 f9fa 	bl	800e014 <vTaskSwitchContext>
	prvTaskExitError();
 800cc20:	f7ff ff1e 	bl	800ca60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cc24:	2300      	movs	r3, #0
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3718      	adds	r7, #24
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	bf00      	nop
 800cc30:	e000ed00 	.word	0xe000ed00
 800cc34:	410fc271 	.word	0x410fc271
 800cc38:	410fc270 	.word	0x410fc270
 800cc3c:	e000e400 	.word	0xe000e400
 800cc40:	20004cd0 	.word	0x20004cd0
 800cc44:	20004cd4 	.word	0x20004cd4
 800cc48:	e000ed20 	.word	0xe000ed20
 800cc4c:	20000010 	.word	0x20000010
 800cc50:	e000ef34 	.word	0xe000ef34

0800cc54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cc54:	b480      	push	{r7}
 800cc56:	b083      	sub	sp, #12
 800cc58:	af00      	add	r7, sp, #0
	__asm volatile
 800cc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc5e:	f383 8811 	msr	BASEPRI, r3
 800cc62:	f3bf 8f6f 	isb	sy
 800cc66:	f3bf 8f4f 	dsb	sy
 800cc6a:	607b      	str	r3, [r7, #4]
}
 800cc6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cc6e:	4b0f      	ldr	r3, [pc, #60]	; (800ccac <vPortEnterCritical+0x58>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	3301      	adds	r3, #1
 800cc74:	4a0d      	ldr	r2, [pc, #52]	; (800ccac <vPortEnterCritical+0x58>)
 800cc76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cc78:	4b0c      	ldr	r3, [pc, #48]	; (800ccac <vPortEnterCritical+0x58>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d10f      	bne.n	800cca0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cc80:	4b0b      	ldr	r3, [pc, #44]	; (800ccb0 <vPortEnterCritical+0x5c>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d00a      	beq.n	800cca0 <vPortEnterCritical+0x4c>
	__asm volatile
 800cc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8e:	f383 8811 	msr	BASEPRI, r3
 800cc92:	f3bf 8f6f 	isb	sy
 800cc96:	f3bf 8f4f 	dsb	sy
 800cc9a:	603b      	str	r3, [r7, #0]
}
 800cc9c:	bf00      	nop
 800cc9e:	e7fe      	b.n	800cc9e <vPortEnterCritical+0x4a>
	}
}
 800cca0:	bf00      	nop
 800cca2:	370c      	adds	r7, #12
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr
 800ccac:	20000010 	.word	0x20000010
 800ccb0:	e000ed04 	.word	0xe000ed04

0800ccb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b083      	sub	sp, #12
 800ccb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ccba:	4b12      	ldr	r3, [pc, #72]	; (800cd04 <vPortExitCritical+0x50>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d10a      	bne.n	800ccd8 <vPortExitCritical+0x24>
	__asm volatile
 800ccc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc6:	f383 8811 	msr	BASEPRI, r3
 800ccca:	f3bf 8f6f 	isb	sy
 800ccce:	f3bf 8f4f 	dsb	sy
 800ccd2:	607b      	str	r3, [r7, #4]
}
 800ccd4:	bf00      	nop
 800ccd6:	e7fe      	b.n	800ccd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ccd8:	4b0a      	ldr	r3, [pc, #40]	; (800cd04 <vPortExitCritical+0x50>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	3b01      	subs	r3, #1
 800ccde:	4a09      	ldr	r2, [pc, #36]	; (800cd04 <vPortExitCritical+0x50>)
 800cce0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cce2:	4b08      	ldr	r3, [pc, #32]	; (800cd04 <vPortExitCritical+0x50>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d105      	bne.n	800ccf6 <vPortExitCritical+0x42>
 800ccea:	2300      	movs	r3, #0
 800ccec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	f383 8811 	msr	BASEPRI, r3
}
 800ccf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ccf6:	bf00      	nop
 800ccf8:	370c      	adds	r7, #12
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr
 800cd02:	bf00      	nop
 800cd04:	20000010 	.word	0x20000010
	...

0800cd10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cd10:	f3ef 8009 	mrs	r0, PSP
 800cd14:	f3bf 8f6f 	isb	sy
 800cd18:	4b15      	ldr	r3, [pc, #84]	; (800cd70 <pxCurrentTCBConst>)
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	f01e 0f10 	tst.w	lr, #16
 800cd20:	bf08      	it	eq
 800cd22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd2a:	6010      	str	r0, [r2, #0]
 800cd2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cd30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cd34:	f380 8811 	msr	BASEPRI, r0
 800cd38:	f3bf 8f4f 	dsb	sy
 800cd3c:	f3bf 8f6f 	isb	sy
 800cd40:	f001 f968 	bl	800e014 <vTaskSwitchContext>
 800cd44:	f04f 0000 	mov.w	r0, #0
 800cd48:	f380 8811 	msr	BASEPRI, r0
 800cd4c:	bc09      	pop	{r0, r3}
 800cd4e:	6819      	ldr	r1, [r3, #0]
 800cd50:	6808      	ldr	r0, [r1, #0]
 800cd52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd56:	f01e 0f10 	tst.w	lr, #16
 800cd5a:	bf08      	it	eq
 800cd5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cd60:	f380 8809 	msr	PSP, r0
 800cd64:	f3bf 8f6f 	isb	sy
 800cd68:	4770      	bx	lr
 800cd6a:	bf00      	nop
 800cd6c:	f3af 8000 	nop.w

0800cd70 <pxCurrentTCBConst>:
 800cd70:	20004d18 	.word	0x20004d18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cd74:	bf00      	nop
 800cd76:	bf00      	nop

0800cd78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd82:	f383 8811 	msr	BASEPRI, r3
 800cd86:	f3bf 8f6f 	isb	sy
 800cd8a:	f3bf 8f4f 	dsb	sy
 800cd8e:	607b      	str	r3, [r7, #4]
}
 800cd90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cd92:	f001 f885 	bl	800dea0 <xTaskIncrementTick>
 800cd96:	4603      	mov	r3, r0
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d003      	beq.n	800cda4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cd9c:	4b06      	ldr	r3, [pc, #24]	; (800cdb8 <xPortSysTickHandler+0x40>)
 800cd9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cda2:	601a      	str	r2, [r3, #0]
 800cda4:	2300      	movs	r3, #0
 800cda6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	f383 8811 	msr	BASEPRI, r3
}
 800cdae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cdb0:	bf00      	nop
 800cdb2:	3708      	adds	r7, #8
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	e000ed04 	.word	0xe000ed04

0800cdbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cdc0:	4b0b      	ldr	r3, [pc, #44]	; (800cdf0 <vPortSetupTimerInterrupt+0x34>)
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cdc6:	4b0b      	ldr	r3, [pc, #44]	; (800cdf4 <vPortSetupTimerInterrupt+0x38>)
 800cdc8:	2200      	movs	r2, #0
 800cdca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cdcc:	4b0a      	ldr	r3, [pc, #40]	; (800cdf8 <vPortSetupTimerInterrupt+0x3c>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4a0a      	ldr	r2, [pc, #40]	; (800cdfc <vPortSetupTimerInterrupt+0x40>)
 800cdd2:	fba2 2303 	umull	r2, r3, r2, r3
 800cdd6:	099b      	lsrs	r3, r3, #6
 800cdd8:	4a09      	ldr	r2, [pc, #36]	; (800ce00 <vPortSetupTimerInterrupt+0x44>)
 800cdda:	3b01      	subs	r3, #1
 800cddc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cdde:	4b04      	ldr	r3, [pc, #16]	; (800cdf0 <vPortSetupTimerInterrupt+0x34>)
 800cde0:	2207      	movs	r2, #7
 800cde2:	601a      	str	r2, [r3, #0]
}
 800cde4:	bf00      	nop
 800cde6:	46bd      	mov	sp, r7
 800cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdec:	4770      	bx	lr
 800cdee:	bf00      	nop
 800cdf0:	e000e010 	.word	0xe000e010
 800cdf4:	e000e018 	.word	0xe000e018
 800cdf8:	20000004 	.word	0x20000004
 800cdfc:	10624dd3 	.word	0x10624dd3
 800ce00:	e000e014 	.word	0xe000e014

0800ce04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ce04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ce14 <vPortEnableVFP+0x10>
 800ce08:	6801      	ldr	r1, [r0, #0]
 800ce0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ce0e:	6001      	str	r1, [r0, #0]
 800ce10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ce12:	bf00      	nop
 800ce14:	e000ed88 	.word	0xe000ed88

0800ce18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ce18:	b480      	push	{r7}
 800ce1a:	b085      	sub	sp, #20
 800ce1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ce1e:	f3ef 8305 	mrs	r3, IPSR
 800ce22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	2b0f      	cmp	r3, #15
 800ce28:	d914      	bls.n	800ce54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ce2a:	4a17      	ldr	r2, [pc, #92]	; (800ce88 <vPortValidateInterruptPriority+0x70>)
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	4413      	add	r3, r2
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ce34:	4b15      	ldr	r3, [pc, #84]	; (800ce8c <vPortValidateInterruptPriority+0x74>)
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	7afa      	ldrb	r2, [r7, #11]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d20a      	bcs.n	800ce54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ce3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce42:	f383 8811 	msr	BASEPRI, r3
 800ce46:	f3bf 8f6f 	isb	sy
 800ce4a:	f3bf 8f4f 	dsb	sy
 800ce4e:	607b      	str	r3, [r7, #4]
}
 800ce50:	bf00      	nop
 800ce52:	e7fe      	b.n	800ce52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ce54:	4b0e      	ldr	r3, [pc, #56]	; (800ce90 <vPortValidateInterruptPriority+0x78>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ce5c:	4b0d      	ldr	r3, [pc, #52]	; (800ce94 <vPortValidateInterruptPriority+0x7c>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d90a      	bls.n	800ce7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ce64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce68:	f383 8811 	msr	BASEPRI, r3
 800ce6c:	f3bf 8f6f 	isb	sy
 800ce70:	f3bf 8f4f 	dsb	sy
 800ce74:	603b      	str	r3, [r7, #0]
}
 800ce76:	bf00      	nop
 800ce78:	e7fe      	b.n	800ce78 <vPortValidateInterruptPriority+0x60>
	}
 800ce7a:	bf00      	nop
 800ce7c:	3714      	adds	r7, #20
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce84:	4770      	bx	lr
 800ce86:	bf00      	nop
 800ce88:	e000e3f0 	.word	0xe000e3f0
 800ce8c:	20004cd0 	.word	0x20004cd0
 800ce90:	e000ed0c 	.word	0xe000ed0c
 800ce94:	20004cd4 	.word	0x20004cd4

0800ce98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b084      	sub	sp, #16
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d10a      	bne.n	800cec2 <xQueueGenericReset+0x2a>
	__asm volatile
 800ceac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb0:	f383 8811 	msr	BASEPRI, r3
 800ceb4:	f3bf 8f6f 	isb	sy
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	60bb      	str	r3, [r7, #8]
}
 800cebe:	bf00      	nop
 800cec0:	e7fe      	b.n	800cec0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cec2:	f7ff fec7 	bl	800cc54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681a      	ldr	r2, [r3, #0]
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cece:	68f9      	ldr	r1, [r7, #12]
 800ced0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ced2:	fb01 f303 	mul.w	r3, r1, r3
 800ced6:	441a      	add	r2, r3
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2200      	movs	r2, #0
 800cee0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cef2:	3b01      	subs	r3, #1
 800cef4:	68f9      	ldr	r1, [r7, #12]
 800cef6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cef8:	fb01 f303 	mul.w	r3, r1, r3
 800cefc:	441a      	add	r2, r3
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	22ff      	movs	r2, #255	; 0xff
 800cf06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	22ff      	movs	r2, #255	; 0xff
 800cf0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d114      	bne.n	800cf42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	691b      	ldr	r3, [r3, #16]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d01a      	beq.n	800cf56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	3310      	adds	r3, #16
 800cf24:	4618      	mov	r0, r3
 800cf26:	f001 f929 	bl	800e17c <xTaskRemoveFromEventList>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d012      	beq.n	800cf56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cf30:	4b0c      	ldr	r3, [pc, #48]	; (800cf64 <xQueueGenericReset+0xcc>)
 800cf32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf36:	601a      	str	r2, [r3, #0]
 800cf38:	f3bf 8f4f 	dsb	sy
 800cf3c:	f3bf 8f6f 	isb	sy
 800cf40:	e009      	b.n	800cf56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	3310      	adds	r3, #16
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7ff fca2 	bl	800c890 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	3324      	adds	r3, #36	; 0x24
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7ff fc9d 	bl	800c890 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cf56:	f7ff fead 	bl	800ccb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cf5a:	2301      	movs	r3, #1
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3710      	adds	r7, #16
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}
 800cf64:	e000ed04 	.word	0xe000ed04

0800cf68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b08e      	sub	sp, #56	; 0x38
 800cf6c:	af02      	add	r7, sp, #8
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	60b9      	str	r1, [r7, #8]
 800cf72:	607a      	str	r2, [r7, #4]
 800cf74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d10a      	bne.n	800cf92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cf7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf80:	f383 8811 	msr	BASEPRI, r3
 800cf84:	f3bf 8f6f 	isb	sy
 800cf88:	f3bf 8f4f 	dsb	sy
 800cf8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf8e:	bf00      	nop
 800cf90:	e7fe      	b.n	800cf90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d10a      	bne.n	800cfae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cf98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9c:	f383 8811 	msr	BASEPRI, r3
 800cfa0:	f3bf 8f6f 	isb	sy
 800cfa4:	f3bf 8f4f 	dsb	sy
 800cfa8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cfaa:	bf00      	nop
 800cfac:	e7fe      	b.n	800cfac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d002      	beq.n	800cfba <xQueueGenericCreateStatic+0x52>
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d001      	beq.n	800cfbe <xQueueGenericCreateStatic+0x56>
 800cfba:	2301      	movs	r3, #1
 800cfbc:	e000      	b.n	800cfc0 <xQueueGenericCreateStatic+0x58>
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d10a      	bne.n	800cfda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cfc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc8:	f383 8811 	msr	BASEPRI, r3
 800cfcc:	f3bf 8f6f 	isb	sy
 800cfd0:	f3bf 8f4f 	dsb	sy
 800cfd4:	623b      	str	r3, [r7, #32]
}
 800cfd6:	bf00      	nop
 800cfd8:	e7fe      	b.n	800cfd8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d102      	bne.n	800cfe6 <xQueueGenericCreateStatic+0x7e>
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d101      	bne.n	800cfea <xQueueGenericCreateStatic+0x82>
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	e000      	b.n	800cfec <xQueueGenericCreateStatic+0x84>
 800cfea:	2300      	movs	r3, #0
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d10a      	bne.n	800d006 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff4:	f383 8811 	msr	BASEPRI, r3
 800cff8:	f3bf 8f6f 	isb	sy
 800cffc:	f3bf 8f4f 	dsb	sy
 800d000:	61fb      	str	r3, [r7, #28]
}
 800d002:	bf00      	nop
 800d004:	e7fe      	b.n	800d004 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d006:	2350      	movs	r3, #80	; 0x50
 800d008:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	2b50      	cmp	r3, #80	; 0x50
 800d00e:	d00a      	beq.n	800d026 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d014:	f383 8811 	msr	BASEPRI, r3
 800d018:	f3bf 8f6f 	isb	sy
 800d01c:	f3bf 8f4f 	dsb	sy
 800d020:	61bb      	str	r3, [r7, #24]
}
 800d022:	bf00      	nop
 800d024:	e7fe      	b.n	800d024 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d026:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d00d      	beq.n	800d04e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d034:	2201      	movs	r2, #1
 800d036:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d03a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d040:	9300      	str	r3, [sp, #0]
 800d042:	4613      	mov	r3, r2
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	68b9      	ldr	r1, [r7, #8]
 800d048:	68f8      	ldr	r0, [r7, #12]
 800d04a:	f000 f805 	bl	800d058 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d050:	4618      	mov	r0, r3
 800d052:	3730      	adds	r7, #48	; 0x30
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	607a      	str	r2, [r7, #4]
 800d064:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d103      	bne.n	800d074 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d06c:	69bb      	ldr	r3, [r7, #24]
 800d06e:	69ba      	ldr	r2, [r7, #24]
 800d070:	601a      	str	r2, [r3, #0]
 800d072:	e002      	b.n	800d07a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d074:	69bb      	ldr	r3, [r7, #24]
 800d076:	687a      	ldr	r2, [r7, #4]
 800d078:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d07a:	69bb      	ldr	r3, [r7, #24]
 800d07c:	68fa      	ldr	r2, [r7, #12]
 800d07e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d080:	69bb      	ldr	r3, [r7, #24]
 800d082:	68ba      	ldr	r2, [r7, #8]
 800d084:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d086:	2101      	movs	r1, #1
 800d088:	69b8      	ldr	r0, [r7, #24]
 800d08a:	f7ff ff05 	bl	800ce98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d08e:	69bb      	ldr	r3, [r7, #24]
 800d090:	78fa      	ldrb	r2, [r7, #3]
 800d092:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d096:	bf00      	nop
 800d098:	3710      	adds	r7, #16
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
	...

0800d0a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b08e      	sub	sp, #56	; 0x38
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	60f8      	str	r0, [r7, #12]
 800d0a8:	60b9      	str	r1, [r7, #8]
 800d0aa:	607a      	str	r2, [r7, #4]
 800d0ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d10a      	bne.n	800d0d2 <xQueueGenericSend+0x32>
	__asm volatile
 800d0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c0:	f383 8811 	msr	BASEPRI, r3
 800d0c4:	f3bf 8f6f 	isb	sy
 800d0c8:	f3bf 8f4f 	dsb	sy
 800d0cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d0ce:	bf00      	nop
 800d0d0:	e7fe      	b.n	800d0d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d103      	bne.n	800d0e0 <xQueueGenericSend+0x40>
 800d0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d101      	bne.n	800d0e4 <xQueueGenericSend+0x44>
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	e000      	b.n	800d0e6 <xQueueGenericSend+0x46>
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d10a      	bne.n	800d100 <xQueueGenericSend+0x60>
	__asm volatile
 800d0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ee:	f383 8811 	msr	BASEPRI, r3
 800d0f2:	f3bf 8f6f 	isb	sy
 800d0f6:	f3bf 8f4f 	dsb	sy
 800d0fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d0fc:	bf00      	nop
 800d0fe:	e7fe      	b.n	800d0fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	2b02      	cmp	r3, #2
 800d104:	d103      	bne.n	800d10e <xQueueGenericSend+0x6e>
 800d106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d10a:	2b01      	cmp	r3, #1
 800d10c:	d101      	bne.n	800d112 <xQueueGenericSend+0x72>
 800d10e:	2301      	movs	r3, #1
 800d110:	e000      	b.n	800d114 <xQueueGenericSend+0x74>
 800d112:	2300      	movs	r3, #0
 800d114:	2b00      	cmp	r3, #0
 800d116:	d10a      	bne.n	800d12e <xQueueGenericSend+0x8e>
	__asm volatile
 800d118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11c:	f383 8811 	msr	BASEPRI, r3
 800d120:	f3bf 8f6f 	isb	sy
 800d124:	f3bf 8f4f 	dsb	sy
 800d128:	623b      	str	r3, [r7, #32]
}
 800d12a:	bf00      	nop
 800d12c:	e7fe      	b.n	800d12c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d12e:	f001 f9e7 	bl	800e500 <xTaskGetSchedulerState>
 800d132:	4603      	mov	r3, r0
 800d134:	2b00      	cmp	r3, #0
 800d136:	d102      	bne.n	800d13e <xQueueGenericSend+0x9e>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d101      	bne.n	800d142 <xQueueGenericSend+0xa2>
 800d13e:	2301      	movs	r3, #1
 800d140:	e000      	b.n	800d144 <xQueueGenericSend+0xa4>
 800d142:	2300      	movs	r3, #0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d10a      	bne.n	800d15e <xQueueGenericSend+0xbe>
	__asm volatile
 800d148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d14c:	f383 8811 	msr	BASEPRI, r3
 800d150:	f3bf 8f6f 	isb	sy
 800d154:	f3bf 8f4f 	dsb	sy
 800d158:	61fb      	str	r3, [r7, #28]
}
 800d15a:	bf00      	nop
 800d15c:	e7fe      	b.n	800d15c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d15e:	f7ff fd79 	bl	800cc54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d302      	bcc.n	800d174 <xQueueGenericSend+0xd4>
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	2b02      	cmp	r3, #2
 800d172:	d129      	bne.n	800d1c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d174:	683a      	ldr	r2, [r7, #0]
 800d176:	68b9      	ldr	r1, [r7, #8]
 800d178:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d17a:	f000 fa0b 	bl	800d594 <prvCopyDataToQueue>
 800d17e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d184:	2b00      	cmp	r3, #0
 800d186:	d010      	beq.n	800d1aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d18a:	3324      	adds	r3, #36	; 0x24
 800d18c:	4618      	mov	r0, r3
 800d18e:	f000 fff5 	bl	800e17c <xTaskRemoveFromEventList>
 800d192:	4603      	mov	r3, r0
 800d194:	2b00      	cmp	r3, #0
 800d196:	d013      	beq.n	800d1c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d198:	4b3f      	ldr	r3, [pc, #252]	; (800d298 <xQueueGenericSend+0x1f8>)
 800d19a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d19e:	601a      	str	r2, [r3, #0]
 800d1a0:	f3bf 8f4f 	dsb	sy
 800d1a4:	f3bf 8f6f 	isb	sy
 800d1a8:	e00a      	b.n	800d1c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d007      	beq.n	800d1c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d1b0:	4b39      	ldr	r3, [pc, #228]	; (800d298 <xQueueGenericSend+0x1f8>)
 800d1b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1b6:	601a      	str	r2, [r3, #0]
 800d1b8:	f3bf 8f4f 	dsb	sy
 800d1bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d1c0:	f7ff fd78 	bl	800ccb4 <vPortExitCritical>
				return pdPASS;
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	e063      	b.n	800d290 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d103      	bne.n	800d1d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d1ce:	f7ff fd71 	bl	800ccb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	e05c      	b.n	800d290 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d1d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d106      	bne.n	800d1ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d1dc:	f107 0314 	add.w	r3, r7, #20
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f001 f82f 	bl	800e244 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1ea:	f7ff fd63 	bl	800ccb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d1ee:	f000 fd9b 	bl	800dd28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d1f2:	f7ff fd2f 	bl	800cc54 <vPortEnterCritical>
 800d1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1fc:	b25b      	sxtb	r3, r3
 800d1fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d202:	d103      	bne.n	800d20c <xQueueGenericSend+0x16c>
 800d204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d206:	2200      	movs	r2, #0
 800d208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d20e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d212:	b25b      	sxtb	r3, r3
 800d214:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d218:	d103      	bne.n	800d222 <xQueueGenericSend+0x182>
 800d21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d21c:	2200      	movs	r2, #0
 800d21e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d222:	f7ff fd47 	bl	800ccb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d226:	1d3a      	adds	r2, r7, #4
 800d228:	f107 0314 	add.w	r3, r7, #20
 800d22c:	4611      	mov	r1, r2
 800d22e:	4618      	mov	r0, r3
 800d230:	f001 f81e 	bl	800e270 <xTaskCheckForTimeOut>
 800d234:	4603      	mov	r3, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	d124      	bne.n	800d284 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d23a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d23c:	f000 faa2 	bl	800d784 <prvIsQueueFull>
 800d240:	4603      	mov	r3, r0
 800d242:	2b00      	cmp	r3, #0
 800d244:	d018      	beq.n	800d278 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d248:	3310      	adds	r3, #16
 800d24a:	687a      	ldr	r2, [r7, #4]
 800d24c:	4611      	mov	r1, r2
 800d24e:	4618      	mov	r0, r3
 800d250:	f000 ff44 	bl	800e0dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d256:	f000 fa2d 	bl	800d6b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d25a:	f000 fd73 	bl	800dd44 <xTaskResumeAll>
 800d25e:	4603      	mov	r3, r0
 800d260:	2b00      	cmp	r3, #0
 800d262:	f47f af7c 	bne.w	800d15e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d266:	4b0c      	ldr	r3, [pc, #48]	; (800d298 <xQueueGenericSend+0x1f8>)
 800d268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d26c:	601a      	str	r2, [r3, #0]
 800d26e:	f3bf 8f4f 	dsb	sy
 800d272:	f3bf 8f6f 	isb	sy
 800d276:	e772      	b.n	800d15e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d27a:	f000 fa1b 	bl	800d6b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d27e:	f000 fd61 	bl	800dd44 <xTaskResumeAll>
 800d282:	e76c      	b.n	800d15e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d284:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d286:	f000 fa15 	bl	800d6b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d28a:	f000 fd5b 	bl	800dd44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d28e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d290:	4618      	mov	r0, r3
 800d292:	3738      	adds	r7, #56	; 0x38
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	e000ed04 	.word	0xe000ed04

0800d29c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b090      	sub	sp, #64	; 0x40
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	60f8      	str	r0, [r7, #12]
 800d2a4:	60b9      	str	r1, [r7, #8]
 800d2a6:	607a      	str	r2, [r7, #4]
 800d2a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d10a      	bne.n	800d2ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b8:	f383 8811 	msr	BASEPRI, r3
 800d2bc:	f3bf 8f6f 	isb	sy
 800d2c0:	f3bf 8f4f 	dsb	sy
 800d2c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d2c6:	bf00      	nop
 800d2c8:	e7fe      	b.n	800d2c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d103      	bne.n	800d2d8 <xQueueGenericSendFromISR+0x3c>
 800d2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d101      	bne.n	800d2dc <xQueueGenericSendFromISR+0x40>
 800d2d8:	2301      	movs	r3, #1
 800d2da:	e000      	b.n	800d2de <xQueueGenericSendFromISR+0x42>
 800d2dc:	2300      	movs	r3, #0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d10a      	bne.n	800d2f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e6:	f383 8811 	msr	BASEPRI, r3
 800d2ea:	f3bf 8f6f 	isb	sy
 800d2ee:	f3bf 8f4f 	dsb	sy
 800d2f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d2f4:	bf00      	nop
 800d2f6:	e7fe      	b.n	800d2f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	2b02      	cmp	r3, #2
 800d2fc:	d103      	bne.n	800d306 <xQueueGenericSendFromISR+0x6a>
 800d2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d302:	2b01      	cmp	r3, #1
 800d304:	d101      	bne.n	800d30a <xQueueGenericSendFromISR+0x6e>
 800d306:	2301      	movs	r3, #1
 800d308:	e000      	b.n	800d30c <xQueueGenericSendFromISR+0x70>
 800d30a:	2300      	movs	r3, #0
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d10a      	bne.n	800d326 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d314:	f383 8811 	msr	BASEPRI, r3
 800d318:	f3bf 8f6f 	isb	sy
 800d31c:	f3bf 8f4f 	dsb	sy
 800d320:	623b      	str	r3, [r7, #32]
}
 800d322:	bf00      	nop
 800d324:	e7fe      	b.n	800d324 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d326:	f7ff fd77 	bl	800ce18 <vPortValidateInterruptPriority>
	__asm volatile
 800d32a:	f3ef 8211 	mrs	r2, BASEPRI
 800d32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d332:	f383 8811 	msr	BASEPRI, r3
 800d336:	f3bf 8f6f 	isb	sy
 800d33a:	f3bf 8f4f 	dsb	sy
 800d33e:	61fa      	str	r2, [r7, #28]
 800d340:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d342:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d344:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d34c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d34e:	429a      	cmp	r2, r3
 800d350:	d302      	bcc.n	800d358 <xQueueGenericSendFromISR+0xbc>
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	2b02      	cmp	r3, #2
 800d356:	d12f      	bne.n	800d3b8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d35a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d35e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d366:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d368:	683a      	ldr	r2, [r7, #0]
 800d36a:	68b9      	ldr	r1, [r7, #8]
 800d36c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d36e:	f000 f911 	bl	800d594 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d372:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d37a:	d112      	bne.n	800d3a2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d380:	2b00      	cmp	r3, #0
 800d382:	d016      	beq.n	800d3b2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d386:	3324      	adds	r3, #36	; 0x24
 800d388:	4618      	mov	r0, r3
 800d38a:	f000 fef7 	bl	800e17c <xTaskRemoveFromEventList>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d00e      	beq.n	800d3b2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d00b      	beq.n	800d3b2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2201      	movs	r2, #1
 800d39e:	601a      	str	r2, [r3, #0]
 800d3a0:	e007      	b.n	800d3b2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d3a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	b2db      	uxtb	r3, r3
 800d3aa:	b25a      	sxtb	r2, r3
 800d3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d3b6:	e001      	b.n	800d3bc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d3bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3be:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	f383 8811 	msr	BASEPRI, r3
}
 800d3c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d3c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3740      	adds	r7, #64	; 0x40
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}
	...

0800d3d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b08c      	sub	sp, #48	; 0x30
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d10a      	bne.n	800d404 <xQueueReceive+0x30>
	__asm volatile
 800d3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f2:	f383 8811 	msr	BASEPRI, r3
 800d3f6:	f3bf 8f6f 	isb	sy
 800d3fa:	f3bf 8f4f 	dsb	sy
 800d3fe:	623b      	str	r3, [r7, #32]
}
 800d400:	bf00      	nop
 800d402:	e7fe      	b.n	800d402 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d103      	bne.n	800d412 <xQueueReceive+0x3e>
 800d40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d101      	bne.n	800d416 <xQueueReceive+0x42>
 800d412:	2301      	movs	r3, #1
 800d414:	e000      	b.n	800d418 <xQueueReceive+0x44>
 800d416:	2300      	movs	r3, #0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d10a      	bne.n	800d432 <xQueueReceive+0x5e>
	__asm volatile
 800d41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d420:	f383 8811 	msr	BASEPRI, r3
 800d424:	f3bf 8f6f 	isb	sy
 800d428:	f3bf 8f4f 	dsb	sy
 800d42c:	61fb      	str	r3, [r7, #28]
}
 800d42e:	bf00      	nop
 800d430:	e7fe      	b.n	800d430 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d432:	f001 f865 	bl	800e500 <xTaskGetSchedulerState>
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d102      	bne.n	800d442 <xQueueReceive+0x6e>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d101      	bne.n	800d446 <xQueueReceive+0x72>
 800d442:	2301      	movs	r3, #1
 800d444:	e000      	b.n	800d448 <xQueueReceive+0x74>
 800d446:	2300      	movs	r3, #0
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d10a      	bne.n	800d462 <xQueueReceive+0x8e>
	__asm volatile
 800d44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d450:	f383 8811 	msr	BASEPRI, r3
 800d454:	f3bf 8f6f 	isb	sy
 800d458:	f3bf 8f4f 	dsb	sy
 800d45c:	61bb      	str	r3, [r7, #24]
}
 800d45e:	bf00      	nop
 800d460:	e7fe      	b.n	800d460 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d462:	f7ff fbf7 	bl	800cc54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d46a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d01f      	beq.n	800d4b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d472:	68b9      	ldr	r1, [r7, #8]
 800d474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d476:	f000 f8f7 	bl	800d668 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47c:	1e5a      	subs	r2, r3, #1
 800d47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d480:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d484:	691b      	ldr	r3, [r3, #16]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d00f      	beq.n	800d4aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48c:	3310      	adds	r3, #16
 800d48e:	4618      	mov	r0, r3
 800d490:	f000 fe74 	bl	800e17c <xTaskRemoveFromEventList>
 800d494:	4603      	mov	r3, r0
 800d496:	2b00      	cmp	r3, #0
 800d498:	d007      	beq.n	800d4aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d49a:	4b3d      	ldr	r3, [pc, #244]	; (800d590 <xQueueReceive+0x1bc>)
 800d49c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4a0:	601a      	str	r2, [r3, #0]
 800d4a2:	f3bf 8f4f 	dsb	sy
 800d4a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d4aa:	f7ff fc03 	bl	800ccb4 <vPortExitCritical>
				return pdPASS;
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	e069      	b.n	800d586 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d103      	bne.n	800d4c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d4b8:	f7ff fbfc 	bl	800ccb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	e062      	b.n	800d586 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d106      	bne.n	800d4d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d4c6:	f107 0310 	add.w	r3, r7, #16
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f000 feba 	bl	800e244 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d4d4:	f7ff fbee 	bl	800ccb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d4d8:	f000 fc26 	bl	800dd28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d4dc:	f7ff fbba 	bl	800cc54 <vPortEnterCritical>
 800d4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4e6:	b25b      	sxtb	r3, r3
 800d4e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ec:	d103      	bne.n	800d4f6 <xQueueReceive+0x122>
 800d4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4fc:	b25b      	sxtb	r3, r3
 800d4fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d502:	d103      	bne.n	800d50c <xQueueReceive+0x138>
 800d504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d506:	2200      	movs	r2, #0
 800d508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d50c:	f7ff fbd2 	bl	800ccb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d510:	1d3a      	adds	r2, r7, #4
 800d512:	f107 0310 	add.w	r3, r7, #16
 800d516:	4611      	mov	r1, r2
 800d518:	4618      	mov	r0, r3
 800d51a:	f000 fea9 	bl	800e270 <xTaskCheckForTimeOut>
 800d51e:	4603      	mov	r3, r0
 800d520:	2b00      	cmp	r3, #0
 800d522:	d123      	bne.n	800d56c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d526:	f000 f917 	bl	800d758 <prvIsQueueEmpty>
 800d52a:	4603      	mov	r3, r0
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d017      	beq.n	800d560 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d532:	3324      	adds	r3, #36	; 0x24
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	4611      	mov	r1, r2
 800d538:	4618      	mov	r0, r3
 800d53a:	f000 fdcf 	bl	800e0dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d53e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d540:	f000 f8b8 	bl	800d6b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d544:	f000 fbfe 	bl	800dd44 <xTaskResumeAll>
 800d548:	4603      	mov	r3, r0
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d189      	bne.n	800d462 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d54e:	4b10      	ldr	r3, [pc, #64]	; (800d590 <xQueueReceive+0x1bc>)
 800d550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d554:	601a      	str	r2, [r3, #0]
 800d556:	f3bf 8f4f 	dsb	sy
 800d55a:	f3bf 8f6f 	isb	sy
 800d55e:	e780      	b.n	800d462 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d562:	f000 f8a7 	bl	800d6b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d566:	f000 fbed 	bl	800dd44 <xTaskResumeAll>
 800d56a:	e77a      	b.n	800d462 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d56c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d56e:	f000 f8a1 	bl	800d6b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d572:	f000 fbe7 	bl	800dd44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d578:	f000 f8ee 	bl	800d758 <prvIsQueueEmpty>
 800d57c:	4603      	mov	r3, r0
 800d57e:	2b00      	cmp	r3, #0
 800d580:	f43f af6f 	beq.w	800d462 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d584:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d586:	4618      	mov	r0, r3
 800d588:	3730      	adds	r7, #48	; 0x30
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	e000ed04 	.word	0xe000ed04

0800d594 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b086      	sub	sp, #24
 800d598:	af00      	add	r7, sp, #0
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	60b9      	str	r1, [r7, #8]
 800d59e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d10d      	bne.n	800d5ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d14d      	bne.n	800d656 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	689b      	ldr	r3, [r3, #8]
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f000 ffbc 	bl	800e53c <xTaskPriorityDisinherit>
 800d5c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	609a      	str	r2, [r3, #8]
 800d5cc:	e043      	b.n	800d656 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d119      	bne.n	800d608 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	6858      	ldr	r0, [r3, #4]
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5dc:	461a      	mov	r2, r3
 800d5de:	68b9      	ldr	r1, [r7, #8]
 800d5e0:	f001 fbe0 	bl	800eda4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	685a      	ldr	r2, [r3, #4]
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ec:	441a      	add	r2, r3
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	685a      	ldr	r2, [r3, #4]
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	689b      	ldr	r3, [r3, #8]
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d32b      	bcc.n	800d656 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	605a      	str	r2, [r3, #4]
 800d606:	e026      	b.n	800d656 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	68d8      	ldr	r0, [r3, #12]
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d610:	461a      	mov	r2, r3
 800d612:	68b9      	ldr	r1, [r7, #8]
 800d614:	f001 fbc6 	bl	800eda4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	68da      	ldr	r2, [r3, #12]
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d620:	425b      	negs	r3, r3
 800d622:	441a      	add	r2, r3
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	68da      	ldr	r2, [r3, #12]
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	429a      	cmp	r2, r3
 800d632:	d207      	bcs.n	800d644 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	689a      	ldr	r2, [r3, #8]
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d63c:	425b      	negs	r3, r3
 800d63e:	441a      	add	r2, r3
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2b02      	cmp	r3, #2
 800d648:	d105      	bne.n	800d656 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d002      	beq.n	800d656 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	3b01      	subs	r3, #1
 800d654:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	1c5a      	adds	r2, r3, #1
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d65e:	697b      	ldr	r3, [r7, #20]
}
 800d660:	4618      	mov	r0, r3
 800d662:	3718      	adds	r7, #24
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d676:	2b00      	cmp	r3, #0
 800d678:	d018      	beq.n	800d6ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	68da      	ldr	r2, [r3, #12]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d682:	441a      	add	r2, r3
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	68da      	ldr	r2, [r3, #12]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	689b      	ldr	r3, [r3, #8]
 800d690:	429a      	cmp	r2, r3
 800d692:	d303      	bcc.n	800d69c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681a      	ldr	r2, [r3, #0]
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	68d9      	ldr	r1, [r3, #12]
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a4:	461a      	mov	r2, r3
 800d6a6:	6838      	ldr	r0, [r7, #0]
 800d6a8:	f001 fb7c 	bl	800eda4 <memcpy>
	}
}
 800d6ac:	bf00      	nop
 800d6ae:	3708      	adds	r7, #8
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b084      	sub	sp, #16
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d6bc:	f7ff faca 	bl	800cc54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6c8:	e011      	b.n	800d6ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d012      	beq.n	800d6f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	3324      	adds	r3, #36	; 0x24
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f000 fd50 	bl	800e17c <xTaskRemoveFromEventList>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d001      	beq.n	800d6e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d6e2:	f000 fe27 	bl	800e334 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d6e6:	7bfb      	ldrb	r3, [r7, #15]
 800d6e8:	3b01      	subs	r3, #1
 800d6ea:	b2db      	uxtb	r3, r3
 800d6ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	dce9      	bgt.n	800d6ca <prvUnlockQueue+0x16>
 800d6f6:	e000      	b.n	800d6fa <prvUnlockQueue+0x46>
					break;
 800d6f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	22ff      	movs	r2, #255	; 0xff
 800d6fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d702:	f7ff fad7 	bl	800ccb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d706:	f7ff faa5 	bl	800cc54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d710:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d712:	e011      	b.n	800d738 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	691b      	ldr	r3, [r3, #16]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d012      	beq.n	800d742 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	3310      	adds	r3, #16
 800d720:	4618      	mov	r0, r3
 800d722:	f000 fd2b 	bl	800e17c <xTaskRemoveFromEventList>
 800d726:	4603      	mov	r3, r0
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d001      	beq.n	800d730 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d72c:	f000 fe02 	bl	800e334 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d730:	7bbb      	ldrb	r3, [r7, #14]
 800d732:	3b01      	subs	r3, #1
 800d734:	b2db      	uxtb	r3, r3
 800d736:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d738:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	dce9      	bgt.n	800d714 <prvUnlockQueue+0x60>
 800d740:	e000      	b.n	800d744 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d742:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	22ff      	movs	r2, #255	; 0xff
 800d748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d74c:	f7ff fab2 	bl	800ccb4 <vPortExitCritical>
}
 800d750:	bf00      	nop
 800d752:	3710      	adds	r7, #16
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d760:	f7ff fa78 	bl	800cc54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d102      	bne.n	800d772 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d76c:	2301      	movs	r3, #1
 800d76e:	60fb      	str	r3, [r7, #12]
 800d770:	e001      	b.n	800d776 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d772:	2300      	movs	r3, #0
 800d774:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d776:	f7ff fa9d 	bl	800ccb4 <vPortExitCritical>

	return xReturn;
 800d77a:	68fb      	ldr	r3, [r7, #12]
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3710      	adds	r7, #16
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b084      	sub	sp, #16
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d78c:	f7ff fa62 	bl	800cc54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d798:	429a      	cmp	r2, r3
 800d79a:	d102      	bne.n	800d7a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d79c:	2301      	movs	r3, #1
 800d79e:	60fb      	str	r3, [r7, #12]
 800d7a0:	e001      	b.n	800d7a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d7a6:	f7ff fa85 	bl	800ccb4 <vPortExitCritical>

	return xReturn;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3710      	adds	r7, #16
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b085      	sub	sp, #20
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d7be:	2300      	movs	r3, #0
 800d7c0:	60fb      	str	r3, [r7, #12]
 800d7c2:	e014      	b.n	800d7ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d7c4:	4a0f      	ldr	r2, [pc, #60]	; (800d804 <vQueueAddToRegistry+0x50>)
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d10b      	bne.n	800d7e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d7d0:	490c      	ldr	r1, [pc, #48]	; (800d804 <vQueueAddToRegistry+0x50>)
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	683a      	ldr	r2, [r7, #0]
 800d7d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d7da:	4a0a      	ldr	r2, [pc, #40]	; (800d804 <vQueueAddToRegistry+0x50>)
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	00db      	lsls	r3, r3, #3
 800d7e0:	4413      	add	r3, r2
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d7e6:	e006      	b.n	800d7f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	60fb      	str	r3, [r7, #12]
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	2b07      	cmp	r3, #7
 800d7f2:	d9e7      	bls.n	800d7c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d7f4:	bf00      	nop
 800d7f6:	bf00      	nop
 800d7f8:	3714      	adds	r7, #20
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d800:	4770      	bx	lr
 800d802:	bf00      	nop
 800d804:	20004cd8 	.word	0x20004cd8

0800d808 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b086      	sub	sp, #24
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	60f8      	str	r0, [r7, #12]
 800d810:	60b9      	str	r1, [r7, #8]
 800d812:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d818:	f7ff fa1c 	bl	800cc54 <vPortEnterCritical>
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d822:	b25b      	sxtb	r3, r3
 800d824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d828:	d103      	bne.n	800d832 <vQueueWaitForMessageRestricted+0x2a>
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	2200      	movs	r2, #0
 800d82e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d838:	b25b      	sxtb	r3, r3
 800d83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d83e:	d103      	bne.n	800d848 <vQueueWaitForMessageRestricted+0x40>
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	2200      	movs	r2, #0
 800d844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d848:	f7ff fa34 	bl	800ccb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d850:	2b00      	cmp	r3, #0
 800d852:	d106      	bne.n	800d862 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	3324      	adds	r3, #36	; 0x24
 800d858:	687a      	ldr	r2, [r7, #4]
 800d85a:	68b9      	ldr	r1, [r7, #8]
 800d85c:	4618      	mov	r0, r3
 800d85e:	f000 fc61 	bl	800e124 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d862:	6978      	ldr	r0, [r7, #20]
 800d864:	f7ff ff26 	bl	800d6b4 <prvUnlockQueue>
	}
 800d868:	bf00      	nop
 800d86a:	3718      	adds	r7, #24
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}

0800d870 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d870:	b580      	push	{r7, lr}
 800d872:	b08e      	sub	sp, #56	; 0x38
 800d874:	af04      	add	r7, sp, #16
 800d876:	60f8      	str	r0, [r7, #12]
 800d878:	60b9      	str	r1, [r7, #8]
 800d87a:	607a      	str	r2, [r7, #4]
 800d87c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d880:	2b00      	cmp	r3, #0
 800d882:	d10a      	bne.n	800d89a <xTaskCreateStatic+0x2a>
	__asm volatile
 800d884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d888:	f383 8811 	msr	BASEPRI, r3
 800d88c:	f3bf 8f6f 	isb	sy
 800d890:	f3bf 8f4f 	dsb	sy
 800d894:	623b      	str	r3, [r7, #32]
}
 800d896:	bf00      	nop
 800d898:	e7fe      	b.n	800d898 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d10a      	bne.n	800d8b6 <xTaskCreateStatic+0x46>
	__asm volatile
 800d8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a4:	f383 8811 	msr	BASEPRI, r3
 800d8a8:	f3bf 8f6f 	isb	sy
 800d8ac:	f3bf 8f4f 	dsb	sy
 800d8b0:	61fb      	str	r3, [r7, #28]
}
 800d8b2:	bf00      	nop
 800d8b4:	e7fe      	b.n	800d8b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d8b6:	23bc      	movs	r3, #188	; 0xbc
 800d8b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	2bbc      	cmp	r3, #188	; 0xbc
 800d8be:	d00a      	beq.n	800d8d6 <xTaskCreateStatic+0x66>
	__asm volatile
 800d8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c4:	f383 8811 	msr	BASEPRI, r3
 800d8c8:	f3bf 8f6f 	isb	sy
 800d8cc:	f3bf 8f4f 	dsb	sy
 800d8d0:	61bb      	str	r3, [r7, #24]
}
 800d8d2:	bf00      	nop
 800d8d4:	e7fe      	b.n	800d8d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d8d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d01e      	beq.n	800d91c <xTaskCreateStatic+0xac>
 800d8de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d01b      	beq.n	800d91c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f0:	2202      	movs	r2, #2
 800d8f2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	9303      	str	r3, [sp, #12]
 800d8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fc:	9302      	str	r3, [sp, #8]
 800d8fe:	f107 0314 	add.w	r3, r7, #20
 800d902:	9301      	str	r3, [sp, #4]
 800d904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d906:	9300      	str	r3, [sp, #0]
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	687a      	ldr	r2, [r7, #4]
 800d90c:	68b9      	ldr	r1, [r7, #8]
 800d90e:	68f8      	ldr	r0, [r7, #12]
 800d910:	f000 f850 	bl	800d9b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d914:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d916:	f000 f8f3 	bl	800db00 <prvAddNewTaskToReadyList>
 800d91a:	e001      	b.n	800d920 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d91c:	2300      	movs	r3, #0
 800d91e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d920:	697b      	ldr	r3, [r7, #20]
	}
 800d922:	4618      	mov	r0, r3
 800d924:	3728      	adds	r7, #40	; 0x28
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}

0800d92a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d92a:	b580      	push	{r7, lr}
 800d92c:	b08c      	sub	sp, #48	; 0x30
 800d92e:	af04      	add	r7, sp, #16
 800d930:	60f8      	str	r0, [r7, #12]
 800d932:	60b9      	str	r1, [r7, #8]
 800d934:	603b      	str	r3, [r7, #0]
 800d936:	4613      	mov	r3, r2
 800d938:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d93a:	88fb      	ldrh	r3, [r7, #6]
 800d93c:	009b      	lsls	r3, r3, #2
 800d93e:	4618      	mov	r0, r3
 800d940:	f7fe fdbc 	bl	800c4bc <pvPortMalloc>
 800d944:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d00e      	beq.n	800d96a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d94c:	20bc      	movs	r0, #188	; 0xbc
 800d94e:	f7fe fdb5 	bl	800c4bc <pvPortMalloc>
 800d952:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d954:	69fb      	ldr	r3, [r7, #28]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d003      	beq.n	800d962 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d95a:	69fb      	ldr	r3, [r7, #28]
 800d95c:	697a      	ldr	r2, [r7, #20]
 800d95e:	631a      	str	r2, [r3, #48]	; 0x30
 800d960:	e005      	b.n	800d96e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d962:	6978      	ldr	r0, [r7, #20]
 800d964:	f7fe fe76 	bl	800c654 <vPortFree>
 800d968:	e001      	b.n	800d96e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d96a:	2300      	movs	r3, #0
 800d96c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d96e:	69fb      	ldr	r3, [r7, #28]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d017      	beq.n	800d9a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d974:	69fb      	ldr	r3, [r7, #28]
 800d976:	2200      	movs	r2, #0
 800d978:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d97c:	88fa      	ldrh	r2, [r7, #6]
 800d97e:	2300      	movs	r3, #0
 800d980:	9303      	str	r3, [sp, #12]
 800d982:	69fb      	ldr	r3, [r7, #28]
 800d984:	9302      	str	r3, [sp, #8]
 800d986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d988:	9301      	str	r3, [sp, #4]
 800d98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98c:	9300      	str	r3, [sp, #0]
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	68b9      	ldr	r1, [r7, #8]
 800d992:	68f8      	ldr	r0, [r7, #12]
 800d994:	f000 f80e 	bl	800d9b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d998:	69f8      	ldr	r0, [r7, #28]
 800d99a:	f000 f8b1 	bl	800db00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d99e:	2301      	movs	r3, #1
 800d9a0:	61bb      	str	r3, [r7, #24]
 800d9a2:	e002      	b.n	800d9aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d9a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d9a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d9aa:	69bb      	ldr	r3, [r7, #24]
	}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3720      	adds	r7, #32
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b088      	sub	sp, #32
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	60f8      	str	r0, [r7, #12]
 800d9bc:	60b9      	str	r1, [r7, #8]
 800d9be:	607a      	str	r2, [r7, #4]
 800d9c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	009b      	lsls	r3, r3, #2
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	21a5      	movs	r1, #165	; 0xa5
 800d9ce:	f001 f9f7 	bl	800edc0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d9dc:	3b01      	subs	r3, #1
 800d9de:	009b      	lsls	r3, r3, #2
 800d9e0:	4413      	add	r3, r2
 800d9e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d9e4:	69bb      	ldr	r3, [r7, #24]
 800d9e6:	f023 0307 	bic.w	r3, r3, #7
 800d9ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d9ec:	69bb      	ldr	r3, [r7, #24]
 800d9ee:	f003 0307 	and.w	r3, r3, #7
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d00a      	beq.n	800da0c <prvInitialiseNewTask+0x58>
	__asm volatile
 800d9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9fa:	f383 8811 	msr	BASEPRI, r3
 800d9fe:	f3bf 8f6f 	isb	sy
 800da02:	f3bf 8f4f 	dsb	sy
 800da06:	617b      	str	r3, [r7, #20]
}
 800da08:	bf00      	nop
 800da0a:	e7fe      	b.n	800da0a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d01f      	beq.n	800da52 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da12:	2300      	movs	r3, #0
 800da14:	61fb      	str	r3, [r7, #28]
 800da16:	e012      	b.n	800da3e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800da18:	68ba      	ldr	r2, [r7, #8]
 800da1a:	69fb      	ldr	r3, [r7, #28]
 800da1c:	4413      	add	r3, r2
 800da1e:	7819      	ldrb	r1, [r3, #0]
 800da20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da22:	69fb      	ldr	r3, [r7, #28]
 800da24:	4413      	add	r3, r2
 800da26:	3334      	adds	r3, #52	; 0x34
 800da28:	460a      	mov	r2, r1
 800da2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800da2c:	68ba      	ldr	r2, [r7, #8]
 800da2e:	69fb      	ldr	r3, [r7, #28]
 800da30:	4413      	add	r3, r2
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d006      	beq.n	800da46 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da38:	69fb      	ldr	r3, [r7, #28]
 800da3a:	3301      	adds	r3, #1
 800da3c:	61fb      	str	r3, [r7, #28]
 800da3e:	69fb      	ldr	r3, [r7, #28]
 800da40:	2b0f      	cmp	r3, #15
 800da42:	d9e9      	bls.n	800da18 <prvInitialiseNewTask+0x64>
 800da44:	e000      	b.n	800da48 <prvInitialiseNewTask+0x94>
			{
				break;
 800da46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800da48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da4a:	2200      	movs	r2, #0
 800da4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800da50:	e003      	b.n	800da5a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800da52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da54:	2200      	movs	r2, #0
 800da56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800da5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da5c:	2b37      	cmp	r3, #55	; 0x37
 800da5e:	d901      	bls.n	800da64 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800da60:	2337      	movs	r3, #55	; 0x37
 800da62:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800da64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da68:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800da6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da6e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800da70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da72:	2200      	movs	r2, #0
 800da74:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800da76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da78:	3304      	adds	r3, #4
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7fe ff28 	bl	800c8d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800da80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da82:	3318      	adds	r3, #24
 800da84:	4618      	mov	r0, r3
 800da86:	f7fe ff23 	bl	800c8d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800da8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800da96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800da9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da9e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800daa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa2:	2200      	movs	r2, #0
 800daa4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800daa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daaa:	2200      	movs	r2, #0
 800daac:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab2:	3354      	adds	r3, #84	; 0x54
 800dab4:	2260      	movs	r2, #96	; 0x60
 800dab6:	2100      	movs	r1, #0
 800dab8:	4618      	mov	r0, r3
 800daba:	f001 f981 	bl	800edc0 <memset>
 800dabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac0:	4a0c      	ldr	r2, [pc, #48]	; (800daf4 <prvInitialiseNewTask+0x140>)
 800dac2:	659a      	str	r2, [r3, #88]	; 0x58
 800dac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac6:	4a0c      	ldr	r2, [pc, #48]	; (800daf8 <prvInitialiseNewTask+0x144>)
 800dac8:	65da      	str	r2, [r3, #92]	; 0x5c
 800daca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dacc:	4a0b      	ldr	r2, [pc, #44]	; (800dafc <prvInitialiseNewTask+0x148>)
 800dace:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dad0:	683a      	ldr	r2, [r7, #0]
 800dad2:	68f9      	ldr	r1, [r7, #12]
 800dad4:	69b8      	ldr	r0, [r7, #24]
 800dad6:	f7fe ff8f 	bl	800c9f8 <pxPortInitialiseStack>
 800dada:	4602      	mov	r2, r0
 800dadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dade:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d002      	beq.n	800daec <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800daec:	bf00      	nop
 800daee:	3720      	adds	r7, #32
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}
 800daf4:	0800f704 	.word	0x0800f704
 800daf8:	0800f724 	.word	0x0800f724
 800dafc:	0800f6e4 	.word	0x0800f6e4

0800db00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b082      	sub	sp, #8
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800db08:	f7ff f8a4 	bl	800cc54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800db0c:	4b2d      	ldr	r3, [pc, #180]	; (800dbc4 <prvAddNewTaskToReadyList+0xc4>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	3301      	adds	r3, #1
 800db12:	4a2c      	ldr	r2, [pc, #176]	; (800dbc4 <prvAddNewTaskToReadyList+0xc4>)
 800db14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800db16:	4b2c      	ldr	r3, [pc, #176]	; (800dbc8 <prvAddNewTaskToReadyList+0xc8>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d109      	bne.n	800db32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800db1e:	4a2a      	ldr	r2, [pc, #168]	; (800dbc8 <prvAddNewTaskToReadyList+0xc8>)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800db24:	4b27      	ldr	r3, [pc, #156]	; (800dbc4 <prvAddNewTaskToReadyList+0xc4>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d110      	bne.n	800db4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800db2c:	f000 fc26 	bl	800e37c <prvInitialiseTaskLists>
 800db30:	e00d      	b.n	800db4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800db32:	4b26      	ldr	r3, [pc, #152]	; (800dbcc <prvAddNewTaskToReadyList+0xcc>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d109      	bne.n	800db4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800db3a:	4b23      	ldr	r3, [pc, #140]	; (800dbc8 <prvAddNewTaskToReadyList+0xc8>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db44:	429a      	cmp	r2, r3
 800db46:	d802      	bhi.n	800db4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800db48:	4a1f      	ldr	r2, [pc, #124]	; (800dbc8 <prvAddNewTaskToReadyList+0xc8>)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800db4e:	4b20      	ldr	r3, [pc, #128]	; (800dbd0 <prvAddNewTaskToReadyList+0xd0>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	3301      	adds	r3, #1
 800db54:	4a1e      	ldr	r2, [pc, #120]	; (800dbd0 <prvAddNewTaskToReadyList+0xd0>)
 800db56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800db58:	4b1d      	ldr	r3, [pc, #116]	; (800dbd0 <prvAddNewTaskToReadyList+0xd0>)
 800db5a:	681a      	ldr	r2, [r3, #0]
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db64:	4b1b      	ldr	r3, [pc, #108]	; (800dbd4 <prvAddNewTaskToReadyList+0xd4>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	429a      	cmp	r2, r3
 800db6a:	d903      	bls.n	800db74 <prvAddNewTaskToReadyList+0x74>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db70:	4a18      	ldr	r2, [pc, #96]	; (800dbd4 <prvAddNewTaskToReadyList+0xd4>)
 800db72:	6013      	str	r3, [r2, #0]
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db78:	4613      	mov	r3, r2
 800db7a:	009b      	lsls	r3, r3, #2
 800db7c:	4413      	add	r3, r2
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	4a15      	ldr	r2, [pc, #84]	; (800dbd8 <prvAddNewTaskToReadyList+0xd8>)
 800db82:	441a      	add	r2, r3
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	3304      	adds	r3, #4
 800db88:	4619      	mov	r1, r3
 800db8a:	4610      	mov	r0, r2
 800db8c:	f7fe fead 	bl	800c8ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800db90:	f7ff f890 	bl	800ccb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800db94:	4b0d      	ldr	r3, [pc, #52]	; (800dbcc <prvAddNewTaskToReadyList+0xcc>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d00e      	beq.n	800dbba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800db9c:	4b0a      	ldr	r3, [pc, #40]	; (800dbc8 <prvAddNewTaskToReadyList+0xc8>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d207      	bcs.n	800dbba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dbaa:	4b0c      	ldr	r3, [pc, #48]	; (800dbdc <prvAddNewTaskToReadyList+0xdc>)
 800dbac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbb0:	601a      	str	r2, [r3, #0]
 800dbb2:	f3bf 8f4f 	dsb	sy
 800dbb6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbba:	bf00      	nop
 800dbbc:	3708      	adds	r7, #8
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	200051ec 	.word	0x200051ec
 800dbc8:	20004d18 	.word	0x20004d18
 800dbcc:	200051f8 	.word	0x200051f8
 800dbd0:	20005208 	.word	0x20005208
 800dbd4:	200051f4 	.word	0x200051f4
 800dbd8:	20004d1c 	.word	0x20004d1c
 800dbdc:	e000ed04 	.word	0xe000ed04

0800dbe0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b084      	sub	sp, #16
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d017      	beq.n	800dc22 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dbf2:	4b13      	ldr	r3, [pc, #76]	; (800dc40 <vTaskDelay+0x60>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d00a      	beq.n	800dc10 <vTaskDelay+0x30>
	__asm volatile
 800dbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbfe:	f383 8811 	msr	BASEPRI, r3
 800dc02:	f3bf 8f6f 	isb	sy
 800dc06:	f3bf 8f4f 	dsb	sy
 800dc0a:	60bb      	str	r3, [r7, #8]
}
 800dc0c:	bf00      	nop
 800dc0e:	e7fe      	b.n	800dc0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dc10:	f000 f88a 	bl	800dd28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dc14:	2100      	movs	r1, #0
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f000 fcfe 	bl	800e618 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dc1c:	f000 f892 	bl	800dd44 <xTaskResumeAll>
 800dc20:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d107      	bne.n	800dc38 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dc28:	4b06      	ldr	r3, [pc, #24]	; (800dc44 <vTaskDelay+0x64>)
 800dc2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc2e:	601a      	str	r2, [r3, #0]
 800dc30:	f3bf 8f4f 	dsb	sy
 800dc34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc38:	bf00      	nop
 800dc3a:	3710      	adds	r7, #16
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	20005214 	.word	0x20005214
 800dc44:	e000ed04 	.word	0xe000ed04

0800dc48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b08a      	sub	sp, #40	; 0x28
 800dc4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dc52:	2300      	movs	r3, #0
 800dc54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dc56:	463a      	mov	r2, r7
 800dc58:	1d39      	adds	r1, r7, #4
 800dc5a:	f107 0308 	add.w	r3, r7, #8
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f7fe fbf8 	bl	800c454 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dc64:	6839      	ldr	r1, [r7, #0]
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	68ba      	ldr	r2, [r7, #8]
 800dc6a:	9202      	str	r2, [sp, #8]
 800dc6c:	9301      	str	r3, [sp, #4]
 800dc6e:	2300      	movs	r3, #0
 800dc70:	9300      	str	r3, [sp, #0]
 800dc72:	2300      	movs	r3, #0
 800dc74:	460a      	mov	r2, r1
 800dc76:	4924      	ldr	r1, [pc, #144]	; (800dd08 <vTaskStartScheduler+0xc0>)
 800dc78:	4824      	ldr	r0, [pc, #144]	; (800dd0c <vTaskStartScheduler+0xc4>)
 800dc7a:	f7ff fdf9 	bl	800d870 <xTaskCreateStatic>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	4a23      	ldr	r2, [pc, #140]	; (800dd10 <vTaskStartScheduler+0xc8>)
 800dc82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dc84:	4b22      	ldr	r3, [pc, #136]	; (800dd10 <vTaskStartScheduler+0xc8>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d002      	beq.n	800dc92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	617b      	str	r3, [r7, #20]
 800dc90:	e001      	b.n	800dc96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dc92:	2300      	movs	r3, #0
 800dc94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	2b01      	cmp	r3, #1
 800dc9a:	d102      	bne.n	800dca2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dc9c:	f000 fd10 	bl	800e6c0 <xTimerCreateTimerTask>
 800dca0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	2b01      	cmp	r3, #1
 800dca6:	d11b      	bne.n	800dce0 <vTaskStartScheduler+0x98>
	__asm volatile
 800dca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcac:	f383 8811 	msr	BASEPRI, r3
 800dcb0:	f3bf 8f6f 	isb	sy
 800dcb4:	f3bf 8f4f 	dsb	sy
 800dcb8:	613b      	str	r3, [r7, #16]
}
 800dcba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dcbc:	4b15      	ldr	r3, [pc, #84]	; (800dd14 <vTaskStartScheduler+0xcc>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	3354      	adds	r3, #84	; 0x54
 800dcc2:	4a15      	ldr	r2, [pc, #84]	; (800dd18 <vTaskStartScheduler+0xd0>)
 800dcc4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dcc6:	4b15      	ldr	r3, [pc, #84]	; (800dd1c <vTaskStartScheduler+0xd4>)
 800dcc8:	f04f 32ff 	mov.w	r2, #4294967295
 800dccc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dcce:	4b14      	ldr	r3, [pc, #80]	; (800dd20 <vTaskStartScheduler+0xd8>)
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dcd4:	4b13      	ldr	r3, [pc, #76]	; (800dd24 <vTaskStartScheduler+0xdc>)
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dcda:	f7fe ff19 	bl	800cb10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dcde:	e00e      	b.n	800dcfe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dce6:	d10a      	bne.n	800dcfe <vTaskStartScheduler+0xb6>
	__asm volatile
 800dce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcec:	f383 8811 	msr	BASEPRI, r3
 800dcf0:	f3bf 8f6f 	isb	sy
 800dcf4:	f3bf 8f4f 	dsb	sy
 800dcf8:	60fb      	str	r3, [r7, #12]
}
 800dcfa:	bf00      	nop
 800dcfc:	e7fe      	b.n	800dcfc <vTaskStartScheduler+0xb4>
}
 800dcfe:	bf00      	nop
 800dd00:	3718      	adds	r7, #24
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	bf00      	nop
 800dd08:	0800f664 	.word	0x0800f664
 800dd0c:	0800e34d 	.word	0x0800e34d
 800dd10:	20005210 	.word	0x20005210
 800dd14:	20004d18 	.word	0x20004d18
 800dd18:	20000014 	.word	0x20000014
 800dd1c:	2000520c 	.word	0x2000520c
 800dd20:	200051f8 	.word	0x200051f8
 800dd24:	200051f0 	.word	0x200051f0

0800dd28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dd28:	b480      	push	{r7}
 800dd2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dd2c:	4b04      	ldr	r3, [pc, #16]	; (800dd40 <vTaskSuspendAll+0x18>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	3301      	adds	r3, #1
 800dd32:	4a03      	ldr	r2, [pc, #12]	; (800dd40 <vTaskSuspendAll+0x18>)
 800dd34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dd36:	bf00      	nop
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr
 800dd40:	20005214 	.word	0x20005214

0800dd44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dd52:	4b42      	ldr	r3, [pc, #264]	; (800de5c <xTaskResumeAll+0x118>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d10a      	bne.n	800dd70 <xTaskResumeAll+0x2c>
	__asm volatile
 800dd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd5e:	f383 8811 	msr	BASEPRI, r3
 800dd62:	f3bf 8f6f 	isb	sy
 800dd66:	f3bf 8f4f 	dsb	sy
 800dd6a:	603b      	str	r3, [r7, #0]
}
 800dd6c:	bf00      	nop
 800dd6e:	e7fe      	b.n	800dd6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dd70:	f7fe ff70 	bl	800cc54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dd74:	4b39      	ldr	r3, [pc, #228]	; (800de5c <xTaskResumeAll+0x118>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	3b01      	subs	r3, #1
 800dd7a:	4a38      	ldr	r2, [pc, #224]	; (800de5c <xTaskResumeAll+0x118>)
 800dd7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd7e:	4b37      	ldr	r3, [pc, #220]	; (800de5c <xTaskResumeAll+0x118>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d162      	bne.n	800de4c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dd86:	4b36      	ldr	r3, [pc, #216]	; (800de60 <xTaskResumeAll+0x11c>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d05e      	beq.n	800de4c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd8e:	e02f      	b.n	800ddf0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd90:	4b34      	ldr	r3, [pc, #208]	; (800de64 <xTaskResumeAll+0x120>)
 800dd92:	68db      	ldr	r3, [r3, #12]
 800dd94:	68db      	ldr	r3, [r3, #12]
 800dd96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	3318      	adds	r3, #24
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f7fe fe01 	bl	800c9a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	3304      	adds	r3, #4
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7fe fdfc 	bl	800c9a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddb0:	4b2d      	ldr	r3, [pc, #180]	; (800de68 <xTaskResumeAll+0x124>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d903      	bls.n	800ddc0 <xTaskResumeAll+0x7c>
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddbc:	4a2a      	ldr	r2, [pc, #168]	; (800de68 <xTaskResumeAll+0x124>)
 800ddbe:	6013      	str	r3, [r2, #0]
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddc4:	4613      	mov	r3, r2
 800ddc6:	009b      	lsls	r3, r3, #2
 800ddc8:	4413      	add	r3, r2
 800ddca:	009b      	lsls	r3, r3, #2
 800ddcc:	4a27      	ldr	r2, [pc, #156]	; (800de6c <xTaskResumeAll+0x128>)
 800ddce:	441a      	add	r2, r3
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	3304      	adds	r3, #4
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	4610      	mov	r0, r2
 800ddd8:	f7fe fd87 	bl	800c8ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dde0:	4b23      	ldr	r3, [pc, #140]	; (800de70 <xTaskResumeAll+0x12c>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d302      	bcc.n	800ddf0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ddea:	4b22      	ldr	r3, [pc, #136]	; (800de74 <xTaskResumeAll+0x130>)
 800ddec:	2201      	movs	r2, #1
 800ddee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ddf0:	4b1c      	ldr	r3, [pc, #112]	; (800de64 <xTaskResumeAll+0x120>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d1cb      	bne.n	800dd90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d001      	beq.n	800de02 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ddfe:	f000 fb5f 	bl	800e4c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800de02:	4b1d      	ldr	r3, [pc, #116]	; (800de78 <xTaskResumeAll+0x134>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d010      	beq.n	800de30 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800de0e:	f000 f847 	bl	800dea0 <xTaskIncrementTick>
 800de12:	4603      	mov	r3, r0
 800de14:	2b00      	cmp	r3, #0
 800de16:	d002      	beq.n	800de1e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800de18:	4b16      	ldr	r3, [pc, #88]	; (800de74 <xTaskResumeAll+0x130>)
 800de1a:	2201      	movs	r2, #1
 800de1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	3b01      	subs	r3, #1
 800de22:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d1f1      	bne.n	800de0e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800de2a:	4b13      	ldr	r3, [pc, #76]	; (800de78 <xTaskResumeAll+0x134>)
 800de2c:	2200      	movs	r2, #0
 800de2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800de30:	4b10      	ldr	r3, [pc, #64]	; (800de74 <xTaskResumeAll+0x130>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d009      	beq.n	800de4c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800de38:	2301      	movs	r3, #1
 800de3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800de3c:	4b0f      	ldr	r3, [pc, #60]	; (800de7c <xTaskResumeAll+0x138>)
 800de3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de42:	601a      	str	r2, [r3, #0]
 800de44:	f3bf 8f4f 	dsb	sy
 800de48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de4c:	f7fe ff32 	bl	800ccb4 <vPortExitCritical>

	return xAlreadyYielded;
 800de50:	68bb      	ldr	r3, [r7, #8]
}
 800de52:	4618      	mov	r0, r3
 800de54:	3710      	adds	r7, #16
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	20005214 	.word	0x20005214
 800de60:	200051ec 	.word	0x200051ec
 800de64:	200051ac 	.word	0x200051ac
 800de68:	200051f4 	.word	0x200051f4
 800de6c:	20004d1c 	.word	0x20004d1c
 800de70:	20004d18 	.word	0x20004d18
 800de74:	20005200 	.word	0x20005200
 800de78:	200051fc 	.word	0x200051fc
 800de7c:	e000ed04 	.word	0xe000ed04

0800de80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800de80:	b480      	push	{r7}
 800de82:	b083      	sub	sp, #12
 800de84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800de86:	4b05      	ldr	r3, [pc, #20]	; (800de9c <xTaskGetTickCount+0x1c>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800de8c:	687b      	ldr	r3, [r7, #4]
}
 800de8e:	4618      	mov	r0, r3
 800de90:	370c      	adds	r7, #12
 800de92:	46bd      	mov	sp, r7
 800de94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de98:	4770      	bx	lr
 800de9a:	bf00      	nop
 800de9c:	200051f0 	.word	0x200051f0

0800dea0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b086      	sub	sp, #24
 800dea4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dea6:	2300      	movs	r3, #0
 800dea8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800deaa:	4b4f      	ldr	r3, [pc, #316]	; (800dfe8 <xTaskIncrementTick+0x148>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	f040 808f 	bne.w	800dfd2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800deb4:	4b4d      	ldr	r3, [pc, #308]	; (800dfec <xTaskIncrementTick+0x14c>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	3301      	adds	r3, #1
 800deba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800debc:	4a4b      	ldr	r2, [pc, #300]	; (800dfec <xTaskIncrementTick+0x14c>)
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d120      	bne.n	800df0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dec8:	4b49      	ldr	r3, [pc, #292]	; (800dff0 <xTaskIncrementTick+0x150>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d00a      	beq.n	800dee8 <xTaskIncrementTick+0x48>
	__asm volatile
 800ded2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded6:	f383 8811 	msr	BASEPRI, r3
 800deda:	f3bf 8f6f 	isb	sy
 800dede:	f3bf 8f4f 	dsb	sy
 800dee2:	603b      	str	r3, [r7, #0]
}
 800dee4:	bf00      	nop
 800dee6:	e7fe      	b.n	800dee6 <xTaskIncrementTick+0x46>
 800dee8:	4b41      	ldr	r3, [pc, #260]	; (800dff0 <xTaskIncrementTick+0x150>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	60fb      	str	r3, [r7, #12]
 800deee:	4b41      	ldr	r3, [pc, #260]	; (800dff4 <xTaskIncrementTick+0x154>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	4a3f      	ldr	r2, [pc, #252]	; (800dff0 <xTaskIncrementTick+0x150>)
 800def4:	6013      	str	r3, [r2, #0]
 800def6:	4a3f      	ldr	r2, [pc, #252]	; (800dff4 <xTaskIncrementTick+0x154>)
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	6013      	str	r3, [r2, #0]
 800defc:	4b3e      	ldr	r3, [pc, #248]	; (800dff8 <xTaskIncrementTick+0x158>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	3301      	adds	r3, #1
 800df02:	4a3d      	ldr	r2, [pc, #244]	; (800dff8 <xTaskIncrementTick+0x158>)
 800df04:	6013      	str	r3, [r2, #0]
 800df06:	f000 fadb 	bl	800e4c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800df0a:	4b3c      	ldr	r3, [pc, #240]	; (800dffc <xTaskIncrementTick+0x15c>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	693a      	ldr	r2, [r7, #16]
 800df10:	429a      	cmp	r2, r3
 800df12:	d349      	bcc.n	800dfa8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df14:	4b36      	ldr	r3, [pc, #216]	; (800dff0 <xTaskIncrementTick+0x150>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d104      	bne.n	800df28 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df1e:	4b37      	ldr	r3, [pc, #220]	; (800dffc <xTaskIncrementTick+0x15c>)
 800df20:	f04f 32ff 	mov.w	r2, #4294967295
 800df24:	601a      	str	r2, [r3, #0]
					break;
 800df26:	e03f      	b.n	800dfa8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df28:	4b31      	ldr	r3, [pc, #196]	; (800dff0 <xTaskIncrementTick+0x150>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	68db      	ldr	r3, [r3, #12]
 800df2e:	68db      	ldr	r3, [r3, #12]
 800df30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800df38:	693a      	ldr	r2, [r7, #16]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d203      	bcs.n	800df48 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800df40:	4a2e      	ldr	r2, [pc, #184]	; (800dffc <xTaskIncrementTick+0x15c>)
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800df46:	e02f      	b.n	800dfa8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	3304      	adds	r3, #4
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7fe fd29 	bl	800c9a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df56:	2b00      	cmp	r3, #0
 800df58:	d004      	beq.n	800df64 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	3318      	adds	r3, #24
 800df5e:	4618      	mov	r0, r3
 800df60:	f7fe fd20 	bl	800c9a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df68:	4b25      	ldr	r3, [pc, #148]	; (800e000 <xTaskIncrementTick+0x160>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d903      	bls.n	800df78 <xTaskIncrementTick+0xd8>
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df74:	4a22      	ldr	r2, [pc, #136]	; (800e000 <xTaskIncrementTick+0x160>)
 800df76:	6013      	str	r3, [r2, #0]
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df7c:	4613      	mov	r3, r2
 800df7e:	009b      	lsls	r3, r3, #2
 800df80:	4413      	add	r3, r2
 800df82:	009b      	lsls	r3, r3, #2
 800df84:	4a1f      	ldr	r2, [pc, #124]	; (800e004 <xTaskIncrementTick+0x164>)
 800df86:	441a      	add	r2, r3
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	3304      	adds	r3, #4
 800df8c:	4619      	mov	r1, r3
 800df8e:	4610      	mov	r0, r2
 800df90:	f7fe fcab 	bl	800c8ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df98:	4b1b      	ldr	r3, [pc, #108]	; (800e008 <xTaskIncrementTick+0x168>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d3b8      	bcc.n	800df14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfa6:	e7b5      	b.n	800df14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dfa8:	4b17      	ldr	r3, [pc, #92]	; (800e008 <xTaskIncrementTick+0x168>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfae:	4915      	ldr	r1, [pc, #84]	; (800e004 <xTaskIncrementTick+0x164>)
 800dfb0:	4613      	mov	r3, r2
 800dfb2:	009b      	lsls	r3, r3, #2
 800dfb4:	4413      	add	r3, r2
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	440b      	add	r3, r1
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	2b01      	cmp	r3, #1
 800dfbe:	d901      	bls.n	800dfc4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dfc4:	4b11      	ldr	r3, [pc, #68]	; (800e00c <xTaskIncrementTick+0x16c>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d007      	beq.n	800dfdc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800dfcc:	2301      	movs	r3, #1
 800dfce:	617b      	str	r3, [r7, #20]
 800dfd0:	e004      	b.n	800dfdc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dfd2:	4b0f      	ldr	r3, [pc, #60]	; (800e010 <xTaskIncrementTick+0x170>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	4a0d      	ldr	r2, [pc, #52]	; (800e010 <xTaskIncrementTick+0x170>)
 800dfda:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dfdc:	697b      	ldr	r3, [r7, #20]
}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3718      	adds	r7, #24
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	20005214 	.word	0x20005214
 800dfec:	200051f0 	.word	0x200051f0
 800dff0:	200051a4 	.word	0x200051a4
 800dff4:	200051a8 	.word	0x200051a8
 800dff8:	20005204 	.word	0x20005204
 800dffc:	2000520c 	.word	0x2000520c
 800e000:	200051f4 	.word	0x200051f4
 800e004:	20004d1c 	.word	0x20004d1c
 800e008:	20004d18 	.word	0x20004d18
 800e00c:	20005200 	.word	0x20005200
 800e010:	200051fc 	.word	0x200051fc

0800e014 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e014:	b480      	push	{r7}
 800e016:	b085      	sub	sp, #20
 800e018:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e01a:	4b2a      	ldr	r3, [pc, #168]	; (800e0c4 <vTaskSwitchContext+0xb0>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d003      	beq.n	800e02a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e022:	4b29      	ldr	r3, [pc, #164]	; (800e0c8 <vTaskSwitchContext+0xb4>)
 800e024:	2201      	movs	r2, #1
 800e026:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e028:	e046      	b.n	800e0b8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e02a:	4b27      	ldr	r3, [pc, #156]	; (800e0c8 <vTaskSwitchContext+0xb4>)
 800e02c:	2200      	movs	r2, #0
 800e02e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e030:	4b26      	ldr	r3, [pc, #152]	; (800e0cc <vTaskSwitchContext+0xb8>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	60fb      	str	r3, [r7, #12]
 800e036:	e010      	b.n	800e05a <vTaskSwitchContext+0x46>
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d10a      	bne.n	800e054 <vTaskSwitchContext+0x40>
	__asm volatile
 800e03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e042:	f383 8811 	msr	BASEPRI, r3
 800e046:	f3bf 8f6f 	isb	sy
 800e04a:	f3bf 8f4f 	dsb	sy
 800e04e:	607b      	str	r3, [r7, #4]
}
 800e050:	bf00      	nop
 800e052:	e7fe      	b.n	800e052 <vTaskSwitchContext+0x3e>
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	3b01      	subs	r3, #1
 800e058:	60fb      	str	r3, [r7, #12]
 800e05a:	491d      	ldr	r1, [pc, #116]	; (800e0d0 <vTaskSwitchContext+0xbc>)
 800e05c:	68fa      	ldr	r2, [r7, #12]
 800e05e:	4613      	mov	r3, r2
 800e060:	009b      	lsls	r3, r3, #2
 800e062:	4413      	add	r3, r2
 800e064:	009b      	lsls	r3, r3, #2
 800e066:	440b      	add	r3, r1
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d0e4      	beq.n	800e038 <vTaskSwitchContext+0x24>
 800e06e:	68fa      	ldr	r2, [r7, #12]
 800e070:	4613      	mov	r3, r2
 800e072:	009b      	lsls	r3, r3, #2
 800e074:	4413      	add	r3, r2
 800e076:	009b      	lsls	r3, r3, #2
 800e078:	4a15      	ldr	r2, [pc, #84]	; (800e0d0 <vTaskSwitchContext+0xbc>)
 800e07a:	4413      	add	r3, r2
 800e07c:	60bb      	str	r3, [r7, #8]
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	685b      	ldr	r3, [r3, #4]
 800e082:	685a      	ldr	r2, [r3, #4]
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	605a      	str	r2, [r3, #4]
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	685a      	ldr	r2, [r3, #4]
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	3308      	adds	r3, #8
 800e090:	429a      	cmp	r2, r3
 800e092:	d104      	bne.n	800e09e <vTaskSwitchContext+0x8a>
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	685b      	ldr	r3, [r3, #4]
 800e098:	685a      	ldr	r2, [r3, #4]
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	605a      	str	r2, [r3, #4]
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	685b      	ldr	r3, [r3, #4]
 800e0a2:	68db      	ldr	r3, [r3, #12]
 800e0a4:	4a0b      	ldr	r2, [pc, #44]	; (800e0d4 <vTaskSwitchContext+0xc0>)
 800e0a6:	6013      	str	r3, [r2, #0]
 800e0a8:	4a08      	ldr	r2, [pc, #32]	; (800e0cc <vTaskSwitchContext+0xb8>)
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e0ae:	4b09      	ldr	r3, [pc, #36]	; (800e0d4 <vTaskSwitchContext+0xc0>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	3354      	adds	r3, #84	; 0x54
 800e0b4:	4a08      	ldr	r2, [pc, #32]	; (800e0d8 <vTaskSwitchContext+0xc4>)
 800e0b6:	6013      	str	r3, [r2, #0]
}
 800e0b8:	bf00      	nop
 800e0ba:	3714      	adds	r7, #20
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c2:	4770      	bx	lr
 800e0c4:	20005214 	.word	0x20005214
 800e0c8:	20005200 	.word	0x20005200
 800e0cc:	200051f4 	.word	0x200051f4
 800e0d0:	20004d1c 	.word	0x20004d1c
 800e0d4:	20004d18 	.word	0x20004d18
 800e0d8:	20000014 	.word	0x20000014

0800e0dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d10a      	bne.n	800e102 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f0:	f383 8811 	msr	BASEPRI, r3
 800e0f4:	f3bf 8f6f 	isb	sy
 800e0f8:	f3bf 8f4f 	dsb	sy
 800e0fc:	60fb      	str	r3, [r7, #12]
}
 800e0fe:	bf00      	nop
 800e100:	e7fe      	b.n	800e100 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e102:	4b07      	ldr	r3, [pc, #28]	; (800e120 <vTaskPlaceOnEventList+0x44>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	3318      	adds	r3, #24
 800e108:	4619      	mov	r1, r3
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f7fe fc11 	bl	800c932 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e110:	2101      	movs	r1, #1
 800e112:	6838      	ldr	r0, [r7, #0]
 800e114:	f000 fa80 	bl	800e618 <prvAddCurrentTaskToDelayedList>
}
 800e118:	bf00      	nop
 800e11a:	3710      	adds	r7, #16
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	20004d18 	.word	0x20004d18

0800e124 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e124:	b580      	push	{r7, lr}
 800e126:	b086      	sub	sp, #24
 800e128:	af00      	add	r7, sp, #0
 800e12a:	60f8      	str	r0, [r7, #12]
 800e12c:	60b9      	str	r1, [r7, #8]
 800e12e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d10a      	bne.n	800e14c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e13a:	f383 8811 	msr	BASEPRI, r3
 800e13e:	f3bf 8f6f 	isb	sy
 800e142:	f3bf 8f4f 	dsb	sy
 800e146:	617b      	str	r3, [r7, #20]
}
 800e148:	bf00      	nop
 800e14a:	e7fe      	b.n	800e14a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e14c:	4b0a      	ldr	r3, [pc, #40]	; (800e178 <vTaskPlaceOnEventListRestricted+0x54>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	3318      	adds	r3, #24
 800e152:	4619      	mov	r1, r3
 800e154:	68f8      	ldr	r0, [r7, #12]
 800e156:	f7fe fbc8 	bl	800c8ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d002      	beq.n	800e166 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e160:	f04f 33ff 	mov.w	r3, #4294967295
 800e164:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e166:	6879      	ldr	r1, [r7, #4]
 800e168:	68b8      	ldr	r0, [r7, #8]
 800e16a:	f000 fa55 	bl	800e618 <prvAddCurrentTaskToDelayedList>
	}
 800e16e:	bf00      	nop
 800e170:	3718      	adds	r7, #24
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	20004d18 	.word	0x20004d18

0800e17c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b086      	sub	sp, #24
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	68db      	ldr	r3, [r3, #12]
 800e188:	68db      	ldr	r3, [r3, #12]
 800e18a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d10a      	bne.n	800e1a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e196:	f383 8811 	msr	BASEPRI, r3
 800e19a:	f3bf 8f6f 	isb	sy
 800e19e:	f3bf 8f4f 	dsb	sy
 800e1a2:	60fb      	str	r3, [r7, #12]
}
 800e1a4:	bf00      	nop
 800e1a6:	e7fe      	b.n	800e1a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	3318      	adds	r3, #24
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f7fe fbf9 	bl	800c9a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1b2:	4b1e      	ldr	r3, [pc, #120]	; (800e22c <xTaskRemoveFromEventList+0xb0>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d11d      	bne.n	800e1f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	3304      	adds	r3, #4
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7fe fbf0 	bl	800c9a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1c8:	4b19      	ldr	r3, [pc, #100]	; (800e230 <xTaskRemoveFromEventList+0xb4>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d903      	bls.n	800e1d8 <xTaskRemoveFromEventList+0x5c>
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1d4:	4a16      	ldr	r2, [pc, #88]	; (800e230 <xTaskRemoveFromEventList+0xb4>)
 800e1d6:	6013      	str	r3, [r2, #0]
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1dc:	4613      	mov	r3, r2
 800e1de:	009b      	lsls	r3, r3, #2
 800e1e0:	4413      	add	r3, r2
 800e1e2:	009b      	lsls	r3, r3, #2
 800e1e4:	4a13      	ldr	r2, [pc, #76]	; (800e234 <xTaskRemoveFromEventList+0xb8>)
 800e1e6:	441a      	add	r2, r3
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	3304      	adds	r3, #4
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	4610      	mov	r0, r2
 800e1f0:	f7fe fb7b 	bl	800c8ea <vListInsertEnd>
 800e1f4:	e005      	b.n	800e202 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	3318      	adds	r3, #24
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	480e      	ldr	r0, [pc, #56]	; (800e238 <xTaskRemoveFromEventList+0xbc>)
 800e1fe:	f7fe fb74 	bl	800c8ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e202:	693b      	ldr	r3, [r7, #16]
 800e204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e206:	4b0d      	ldr	r3, [pc, #52]	; (800e23c <xTaskRemoveFromEventList+0xc0>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d905      	bls.n	800e21c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e210:	2301      	movs	r3, #1
 800e212:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e214:	4b0a      	ldr	r3, [pc, #40]	; (800e240 <xTaskRemoveFromEventList+0xc4>)
 800e216:	2201      	movs	r2, #1
 800e218:	601a      	str	r2, [r3, #0]
 800e21a:	e001      	b.n	800e220 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e21c:	2300      	movs	r3, #0
 800e21e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e220:	697b      	ldr	r3, [r7, #20]
}
 800e222:	4618      	mov	r0, r3
 800e224:	3718      	adds	r7, #24
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
 800e22a:	bf00      	nop
 800e22c:	20005214 	.word	0x20005214
 800e230:	200051f4 	.word	0x200051f4
 800e234:	20004d1c 	.word	0x20004d1c
 800e238:	200051ac 	.word	0x200051ac
 800e23c:	20004d18 	.word	0x20004d18
 800e240:	20005200 	.word	0x20005200

0800e244 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e244:	b480      	push	{r7}
 800e246:	b083      	sub	sp, #12
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e24c:	4b06      	ldr	r3, [pc, #24]	; (800e268 <vTaskInternalSetTimeOutState+0x24>)
 800e24e:	681a      	ldr	r2, [r3, #0]
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e254:	4b05      	ldr	r3, [pc, #20]	; (800e26c <vTaskInternalSetTimeOutState+0x28>)
 800e256:	681a      	ldr	r2, [r3, #0]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	605a      	str	r2, [r3, #4]
}
 800e25c:	bf00      	nop
 800e25e:	370c      	adds	r7, #12
 800e260:	46bd      	mov	sp, r7
 800e262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e266:	4770      	bx	lr
 800e268:	20005204 	.word	0x20005204
 800e26c:	200051f0 	.word	0x200051f0

0800e270 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b088      	sub	sp, #32
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
 800e278:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d10a      	bne.n	800e296 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e284:	f383 8811 	msr	BASEPRI, r3
 800e288:	f3bf 8f6f 	isb	sy
 800e28c:	f3bf 8f4f 	dsb	sy
 800e290:	613b      	str	r3, [r7, #16]
}
 800e292:	bf00      	nop
 800e294:	e7fe      	b.n	800e294 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d10a      	bne.n	800e2b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a0:	f383 8811 	msr	BASEPRI, r3
 800e2a4:	f3bf 8f6f 	isb	sy
 800e2a8:	f3bf 8f4f 	dsb	sy
 800e2ac:	60fb      	str	r3, [r7, #12]
}
 800e2ae:	bf00      	nop
 800e2b0:	e7fe      	b.n	800e2b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e2b2:	f7fe fccf 	bl	800cc54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e2b6:	4b1d      	ldr	r3, [pc, #116]	; (800e32c <xTaskCheckForTimeOut+0xbc>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	685b      	ldr	r3, [r3, #4]
 800e2c0:	69ba      	ldr	r2, [r7, #24]
 800e2c2:	1ad3      	subs	r3, r2, r3
 800e2c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ce:	d102      	bne.n	800e2d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	61fb      	str	r3, [r7, #28]
 800e2d4:	e023      	b.n	800e31e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	4b15      	ldr	r3, [pc, #84]	; (800e330 <xTaskCheckForTimeOut+0xc0>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	429a      	cmp	r2, r3
 800e2e0:	d007      	beq.n	800e2f2 <xTaskCheckForTimeOut+0x82>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	685b      	ldr	r3, [r3, #4]
 800e2e6:	69ba      	ldr	r2, [r7, #24]
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d302      	bcc.n	800e2f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	61fb      	str	r3, [r7, #28]
 800e2f0:	e015      	b.n	800e31e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	697a      	ldr	r2, [r7, #20]
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d20b      	bcs.n	800e314 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	681a      	ldr	r2, [r3, #0]
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	1ad2      	subs	r2, r2, r3
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f7ff ff9b 	bl	800e244 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e30e:	2300      	movs	r3, #0
 800e310:	61fb      	str	r3, [r7, #28]
 800e312:	e004      	b.n	800e31e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	2200      	movs	r2, #0
 800e318:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e31a:	2301      	movs	r3, #1
 800e31c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e31e:	f7fe fcc9 	bl	800ccb4 <vPortExitCritical>

	return xReturn;
 800e322:	69fb      	ldr	r3, [r7, #28]
}
 800e324:	4618      	mov	r0, r3
 800e326:	3720      	adds	r7, #32
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}
 800e32c:	200051f0 	.word	0x200051f0
 800e330:	20005204 	.word	0x20005204

0800e334 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e334:	b480      	push	{r7}
 800e336:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e338:	4b03      	ldr	r3, [pc, #12]	; (800e348 <vTaskMissedYield+0x14>)
 800e33a:	2201      	movs	r2, #1
 800e33c:	601a      	str	r2, [r3, #0]
}
 800e33e:	bf00      	nop
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr
 800e348:	20005200 	.word	0x20005200

0800e34c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b082      	sub	sp, #8
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e354:	f000 f852 	bl	800e3fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e358:	4b06      	ldr	r3, [pc, #24]	; (800e374 <prvIdleTask+0x28>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d9f9      	bls.n	800e354 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e360:	4b05      	ldr	r3, [pc, #20]	; (800e378 <prvIdleTask+0x2c>)
 800e362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e366:	601a      	str	r2, [r3, #0]
 800e368:	f3bf 8f4f 	dsb	sy
 800e36c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e370:	e7f0      	b.n	800e354 <prvIdleTask+0x8>
 800e372:	bf00      	nop
 800e374:	20004d1c 	.word	0x20004d1c
 800e378:	e000ed04 	.word	0xe000ed04

0800e37c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b082      	sub	sp, #8
 800e380:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e382:	2300      	movs	r3, #0
 800e384:	607b      	str	r3, [r7, #4]
 800e386:	e00c      	b.n	800e3a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e388:	687a      	ldr	r2, [r7, #4]
 800e38a:	4613      	mov	r3, r2
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	4413      	add	r3, r2
 800e390:	009b      	lsls	r3, r3, #2
 800e392:	4a12      	ldr	r2, [pc, #72]	; (800e3dc <prvInitialiseTaskLists+0x60>)
 800e394:	4413      	add	r3, r2
 800e396:	4618      	mov	r0, r3
 800e398:	f7fe fa7a 	bl	800c890 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	3301      	adds	r3, #1
 800e3a0:	607b      	str	r3, [r7, #4]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2b37      	cmp	r3, #55	; 0x37
 800e3a6:	d9ef      	bls.n	800e388 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e3a8:	480d      	ldr	r0, [pc, #52]	; (800e3e0 <prvInitialiseTaskLists+0x64>)
 800e3aa:	f7fe fa71 	bl	800c890 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e3ae:	480d      	ldr	r0, [pc, #52]	; (800e3e4 <prvInitialiseTaskLists+0x68>)
 800e3b0:	f7fe fa6e 	bl	800c890 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e3b4:	480c      	ldr	r0, [pc, #48]	; (800e3e8 <prvInitialiseTaskLists+0x6c>)
 800e3b6:	f7fe fa6b 	bl	800c890 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e3ba:	480c      	ldr	r0, [pc, #48]	; (800e3ec <prvInitialiseTaskLists+0x70>)
 800e3bc:	f7fe fa68 	bl	800c890 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e3c0:	480b      	ldr	r0, [pc, #44]	; (800e3f0 <prvInitialiseTaskLists+0x74>)
 800e3c2:	f7fe fa65 	bl	800c890 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e3c6:	4b0b      	ldr	r3, [pc, #44]	; (800e3f4 <prvInitialiseTaskLists+0x78>)
 800e3c8:	4a05      	ldr	r2, [pc, #20]	; (800e3e0 <prvInitialiseTaskLists+0x64>)
 800e3ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e3cc:	4b0a      	ldr	r3, [pc, #40]	; (800e3f8 <prvInitialiseTaskLists+0x7c>)
 800e3ce:	4a05      	ldr	r2, [pc, #20]	; (800e3e4 <prvInitialiseTaskLists+0x68>)
 800e3d0:	601a      	str	r2, [r3, #0]
}
 800e3d2:	bf00      	nop
 800e3d4:	3708      	adds	r7, #8
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
 800e3da:	bf00      	nop
 800e3dc:	20004d1c 	.word	0x20004d1c
 800e3e0:	2000517c 	.word	0x2000517c
 800e3e4:	20005190 	.word	0x20005190
 800e3e8:	200051ac 	.word	0x200051ac
 800e3ec:	200051c0 	.word	0x200051c0
 800e3f0:	200051d8 	.word	0x200051d8
 800e3f4:	200051a4 	.word	0x200051a4
 800e3f8:	200051a8 	.word	0x200051a8

0800e3fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e402:	e019      	b.n	800e438 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e404:	f7fe fc26 	bl	800cc54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e408:	4b10      	ldr	r3, [pc, #64]	; (800e44c <prvCheckTasksWaitingTermination+0x50>)
 800e40a:	68db      	ldr	r3, [r3, #12]
 800e40c:	68db      	ldr	r3, [r3, #12]
 800e40e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	3304      	adds	r3, #4
 800e414:	4618      	mov	r0, r3
 800e416:	f7fe fac5 	bl	800c9a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e41a:	4b0d      	ldr	r3, [pc, #52]	; (800e450 <prvCheckTasksWaitingTermination+0x54>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	3b01      	subs	r3, #1
 800e420:	4a0b      	ldr	r2, [pc, #44]	; (800e450 <prvCheckTasksWaitingTermination+0x54>)
 800e422:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e424:	4b0b      	ldr	r3, [pc, #44]	; (800e454 <prvCheckTasksWaitingTermination+0x58>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	3b01      	subs	r3, #1
 800e42a:	4a0a      	ldr	r2, [pc, #40]	; (800e454 <prvCheckTasksWaitingTermination+0x58>)
 800e42c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e42e:	f7fe fc41 	bl	800ccb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f000 f810 	bl	800e458 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e438:	4b06      	ldr	r3, [pc, #24]	; (800e454 <prvCheckTasksWaitingTermination+0x58>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d1e1      	bne.n	800e404 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e440:	bf00      	nop
 800e442:	bf00      	nop
 800e444:	3708      	adds	r7, #8
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	bf00      	nop
 800e44c:	200051c0 	.word	0x200051c0
 800e450:	200051ec 	.word	0x200051ec
 800e454:	200051d4 	.word	0x200051d4

0800e458 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	3354      	adds	r3, #84	; 0x54
 800e464:	4618      	mov	r0, r3
 800e466:	f000 fd0d 	bl	800ee84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e470:	2b00      	cmp	r3, #0
 800e472:	d108      	bne.n	800e486 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e478:	4618      	mov	r0, r3
 800e47a:	f7fe f8eb 	bl	800c654 <vPortFree>
				vPortFree( pxTCB );
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f7fe f8e8 	bl	800c654 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e484:	e018      	b.n	800e4b8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e48c:	2b01      	cmp	r3, #1
 800e48e:	d103      	bne.n	800e498 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f7fe f8df 	bl	800c654 <vPortFree>
	}
 800e496:	e00f      	b.n	800e4b8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e49e:	2b02      	cmp	r3, #2
 800e4a0:	d00a      	beq.n	800e4b8 <prvDeleteTCB+0x60>
	__asm volatile
 800e4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a6:	f383 8811 	msr	BASEPRI, r3
 800e4aa:	f3bf 8f6f 	isb	sy
 800e4ae:	f3bf 8f4f 	dsb	sy
 800e4b2:	60fb      	str	r3, [r7, #12]
}
 800e4b4:	bf00      	nop
 800e4b6:	e7fe      	b.n	800e4b6 <prvDeleteTCB+0x5e>
	}
 800e4b8:	bf00      	nop
 800e4ba:	3710      	adds	r7, #16
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}

0800e4c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e4c0:	b480      	push	{r7}
 800e4c2:	b083      	sub	sp, #12
 800e4c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4c6:	4b0c      	ldr	r3, [pc, #48]	; (800e4f8 <prvResetNextTaskUnblockTime+0x38>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d104      	bne.n	800e4da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e4d0:	4b0a      	ldr	r3, [pc, #40]	; (800e4fc <prvResetNextTaskUnblockTime+0x3c>)
 800e4d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e4d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e4d8:	e008      	b.n	800e4ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4da:	4b07      	ldr	r3, [pc, #28]	; (800e4f8 <prvResetNextTaskUnblockTime+0x38>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	68db      	ldr	r3, [r3, #12]
 800e4e0:	68db      	ldr	r3, [r3, #12]
 800e4e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	4a04      	ldr	r2, [pc, #16]	; (800e4fc <prvResetNextTaskUnblockTime+0x3c>)
 800e4ea:	6013      	str	r3, [r2, #0]
}
 800e4ec:	bf00      	nop
 800e4ee:	370c      	adds	r7, #12
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f6:	4770      	bx	lr
 800e4f8:	200051a4 	.word	0x200051a4
 800e4fc:	2000520c 	.word	0x2000520c

0800e500 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e500:	b480      	push	{r7}
 800e502:	b083      	sub	sp, #12
 800e504:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e506:	4b0b      	ldr	r3, [pc, #44]	; (800e534 <xTaskGetSchedulerState+0x34>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d102      	bne.n	800e514 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e50e:	2301      	movs	r3, #1
 800e510:	607b      	str	r3, [r7, #4]
 800e512:	e008      	b.n	800e526 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e514:	4b08      	ldr	r3, [pc, #32]	; (800e538 <xTaskGetSchedulerState+0x38>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d102      	bne.n	800e522 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e51c:	2302      	movs	r3, #2
 800e51e:	607b      	str	r3, [r7, #4]
 800e520:	e001      	b.n	800e526 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e522:	2300      	movs	r3, #0
 800e524:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e526:	687b      	ldr	r3, [r7, #4]
	}
 800e528:	4618      	mov	r0, r3
 800e52a:	370c      	adds	r7, #12
 800e52c:	46bd      	mov	sp, r7
 800e52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e532:	4770      	bx	lr
 800e534:	200051f8 	.word	0x200051f8
 800e538:	20005214 	.word	0x20005214

0800e53c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b086      	sub	sp, #24
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e548:	2300      	movs	r3, #0
 800e54a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d056      	beq.n	800e600 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e552:	4b2e      	ldr	r3, [pc, #184]	; (800e60c <xTaskPriorityDisinherit+0xd0>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	693a      	ldr	r2, [r7, #16]
 800e558:	429a      	cmp	r2, r3
 800e55a:	d00a      	beq.n	800e572 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e560:	f383 8811 	msr	BASEPRI, r3
 800e564:	f3bf 8f6f 	isb	sy
 800e568:	f3bf 8f4f 	dsb	sy
 800e56c:	60fb      	str	r3, [r7, #12]
}
 800e56e:	bf00      	nop
 800e570:	e7fe      	b.n	800e570 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e576:	2b00      	cmp	r3, #0
 800e578:	d10a      	bne.n	800e590 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e57e:	f383 8811 	msr	BASEPRI, r3
 800e582:	f3bf 8f6f 	isb	sy
 800e586:	f3bf 8f4f 	dsb	sy
 800e58a:	60bb      	str	r3, [r7, #8]
}
 800e58c:	bf00      	nop
 800e58e:	e7fe      	b.n	800e58e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e594:	1e5a      	subs	r2, r3, #1
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e59a:	693b      	ldr	r3, [r7, #16]
 800e59c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d02c      	beq.n	800e600 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e5a6:	693b      	ldr	r3, [r7, #16]
 800e5a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d128      	bne.n	800e600 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	3304      	adds	r3, #4
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7fe f9f6 	bl	800c9a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5d0:	4b0f      	ldr	r3, [pc, #60]	; (800e610 <xTaskPriorityDisinherit+0xd4>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d903      	bls.n	800e5e0 <xTaskPriorityDisinherit+0xa4>
 800e5d8:	693b      	ldr	r3, [r7, #16]
 800e5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5dc:	4a0c      	ldr	r2, [pc, #48]	; (800e610 <xTaskPriorityDisinherit+0xd4>)
 800e5de:	6013      	str	r3, [r2, #0]
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5e4:	4613      	mov	r3, r2
 800e5e6:	009b      	lsls	r3, r3, #2
 800e5e8:	4413      	add	r3, r2
 800e5ea:	009b      	lsls	r3, r3, #2
 800e5ec:	4a09      	ldr	r2, [pc, #36]	; (800e614 <xTaskPriorityDisinherit+0xd8>)
 800e5ee:	441a      	add	r2, r3
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	3304      	adds	r3, #4
 800e5f4:	4619      	mov	r1, r3
 800e5f6:	4610      	mov	r0, r2
 800e5f8:	f7fe f977 	bl	800c8ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e600:	697b      	ldr	r3, [r7, #20]
	}
 800e602:	4618      	mov	r0, r3
 800e604:	3718      	adds	r7, #24
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
 800e60a:	bf00      	nop
 800e60c:	20004d18 	.word	0x20004d18
 800e610:	200051f4 	.word	0x200051f4
 800e614:	20004d1c 	.word	0x20004d1c

0800e618 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b084      	sub	sp, #16
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e622:	4b21      	ldr	r3, [pc, #132]	; (800e6a8 <prvAddCurrentTaskToDelayedList+0x90>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e628:	4b20      	ldr	r3, [pc, #128]	; (800e6ac <prvAddCurrentTaskToDelayedList+0x94>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	3304      	adds	r3, #4
 800e62e:	4618      	mov	r0, r3
 800e630:	f7fe f9b8 	bl	800c9a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e63a:	d10a      	bne.n	800e652 <prvAddCurrentTaskToDelayedList+0x3a>
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d007      	beq.n	800e652 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e642:	4b1a      	ldr	r3, [pc, #104]	; (800e6ac <prvAddCurrentTaskToDelayedList+0x94>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	3304      	adds	r3, #4
 800e648:	4619      	mov	r1, r3
 800e64a:	4819      	ldr	r0, [pc, #100]	; (800e6b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800e64c:	f7fe f94d 	bl	800c8ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e650:	e026      	b.n	800e6a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e652:	68fa      	ldr	r2, [r7, #12]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	4413      	add	r3, r2
 800e658:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e65a:	4b14      	ldr	r3, [pc, #80]	; (800e6ac <prvAddCurrentTaskToDelayedList+0x94>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	68ba      	ldr	r2, [r7, #8]
 800e660:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e662:	68ba      	ldr	r2, [r7, #8]
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	429a      	cmp	r2, r3
 800e668:	d209      	bcs.n	800e67e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e66a:	4b12      	ldr	r3, [pc, #72]	; (800e6b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e66c:	681a      	ldr	r2, [r3, #0]
 800e66e:	4b0f      	ldr	r3, [pc, #60]	; (800e6ac <prvAddCurrentTaskToDelayedList+0x94>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	3304      	adds	r3, #4
 800e674:	4619      	mov	r1, r3
 800e676:	4610      	mov	r0, r2
 800e678:	f7fe f95b 	bl	800c932 <vListInsert>
}
 800e67c:	e010      	b.n	800e6a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e67e:	4b0e      	ldr	r3, [pc, #56]	; (800e6b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e680:	681a      	ldr	r2, [r3, #0]
 800e682:	4b0a      	ldr	r3, [pc, #40]	; (800e6ac <prvAddCurrentTaskToDelayedList+0x94>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	3304      	adds	r3, #4
 800e688:	4619      	mov	r1, r3
 800e68a:	4610      	mov	r0, r2
 800e68c:	f7fe f951 	bl	800c932 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e690:	4b0a      	ldr	r3, [pc, #40]	; (800e6bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	68ba      	ldr	r2, [r7, #8]
 800e696:	429a      	cmp	r2, r3
 800e698:	d202      	bcs.n	800e6a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e69a:	4a08      	ldr	r2, [pc, #32]	; (800e6bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	6013      	str	r3, [r2, #0]
}
 800e6a0:	bf00      	nop
 800e6a2:	3710      	adds	r7, #16
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}
 800e6a8:	200051f0 	.word	0x200051f0
 800e6ac:	20004d18 	.word	0x20004d18
 800e6b0:	200051d8 	.word	0x200051d8
 800e6b4:	200051a8 	.word	0x200051a8
 800e6b8:	200051a4 	.word	0x200051a4
 800e6bc:	2000520c 	.word	0x2000520c

0800e6c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b08a      	sub	sp, #40	; 0x28
 800e6c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e6ca:	f000 fb07 	bl	800ecdc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e6ce:	4b1c      	ldr	r3, [pc, #112]	; (800e740 <xTimerCreateTimerTask+0x80>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d021      	beq.n	800e71a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e6de:	1d3a      	adds	r2, r7, #4
 800e6e0:	f107 0108 	add.w	r1, r7, #8
 800e6e4:	f107 030c 	add.w	r3, r7, #12
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7fd fecd 	bl	800c488 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e6ee:	6879      	ldr	r1, [r7, #4]
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	68fa      	ldr	r2, [r7, #12]
 800e6f4:	9202      	str	r2, [sp, #8]
 800e6f6:	9301      	str	r3, [sp, #4]
 800e6f8:	2302      	movs	r3, #2
 800e6fa:	9300      	str	r3, [sp, #0]
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	460a      	mov	r2, r1
 800e700:	4910      	ldr	r1, [pc, #64]	; (800e744 <xTimerCreateTimerTask+0x84>)
 800e702:	4811      	ldr	r0, [pc, #68]	; (800e748 <xTimerCreateTimerTask+0x88>)
 800e704:	f7ff f8b4 	bl	800d870 <xTaskCreateStatic>
 800e708:	4603      	mov	r3, r0
 800e70a:	4a10      	ldr	r2, [pc, #64]	; (800e74c <xTimerCreateTimerTask+0x8c>)
 800e70c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e70e:	4b0f      	ldr	r3, [pc, #60]	; (800e74c <xTimerCreateTimerTask+0x8c>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d001      	beq.n	800e71a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e716:	2301      	movs	r3, #1
 800e718:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d10a      	bne.n	800e736 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e724:	f383 8811 	msr	BASEPRI, r3
 800e728:	f3bf 8f6f 	isb	sy
 800e72c:	f3bf 8f4f 	dsb	sy
 800e730:	613b      	str	r3, [r7, #16]
}
 800e732:	bf00      	nop
 800e734:	e7fe      	b.n	800e734 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e736:	697b      	ldr	r3, [r7, #20]
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3718      	adds	r7, #24
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	20005248 	.word	0x20005248
 800e744:	0800f66c 	.word	0x0800f66c
 800e748:	0800e885 	.word	0x0800e885
 800e74c:	2000524c 	.word	0x2000524c

0800e750 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b08a      	sub	sp, #40	; 0x28
 800e754:	af00      	add	r7, sp, #0
 800e756:	60f8      	str	r0, [r7, #12]
 800e758:	60b9      	str	r1, [r7, #8]
 800e75a:	607a      	str	r2, [r7, #4]
 800e75c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e75e:	2300      	movs	r3, #0
 800e760:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d10a      	bne.n	800e77e <xTimerGenericCommand+0x2e>
	__asm volatile
 800e768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e76c:	f383 8811 	msr	BASEPRI, r3
 800e770:	f3bf 8f6f 	isb	sy
 800e774:	f3bf 8f4f 	dsb	sy
 800e778:	623b      	str	r3, [r7, #32]
}
 800e77a:	bf00      	nop
 800e77c:	e7fe      	b.n	800e77c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e77e:	4b1a      	ldr	r3, [pc, #104]	; (800e7e8 <xTimerGenericCommand+0x98>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d02a      	beq.n	800e7dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	2b05      	cmp	r3, #5
 800e796:	dc18      	bgt.n	800e7ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e798:	f7ff feb2 	bl	800e500 <xTaskGetSchedulerState>
 800e79c:	4603      	mov	r3, r0
 800e79e:	2b02      	cmp	r3, #2
 800e7a0:	d109      	bne.n	800e7b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e7a2:	4b11      	ldr	r3, [pc, #68]	; (800e7e8 <xTimerGenericCommand+0x98>)
 800e7a4:	6818      	ldr	r0, [r3, #0]
 800e7a6:	f107 0110 	add.w	r1, r7, #16
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7ae:	f7fe fc77 	bl	800d0a0 <xQueueGenericSend>
 800e7b2:	6278      	str	r0, [r7, #36]	; 0x24
 800e7b4:	e012      	b.n	800e7dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e7b6:	4b0c      	ldr	r3, [pc, #48]	; (800e7e8 <xTimerGenericCommand+0x98>)
 800e7b8:	6818      	ldr	r0, [r3, #0]
 800e7ba:	f107 0110 	add.w	r1, r7, #16
 800e7be:	2300      	movs	r3, #0
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	f7fe fc6d 	bl	800d0a0 <xQueueGenericSend>
 800e7c6:	6278      	str	r0, [r7, #36]	; 0x24
 800e7c8:	e008      	b.n	800e7dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e7ca:	4b07      	ldr	r3, [pc, #28]	; (800e7e8 <xTimerGenericCommand+0x98>)
 800e7cc:	6818      	ldr	r0, [r3, #0]
 800e7ce:	f107 0110 	add.w	r1, r7, #16
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	683a      	ldr	r2, [r7, #0]
 800e7d6:	f7fe fd61 	bl	800d29c <xQueueGenericSendFromISR>
 800e7da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3728      	adds	r7, #40	; 0x28
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	20005248 	.word	0x20005248

0800e7ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b088      	sub	sp, #32
 800e7f0:	af02      	add	r7, sp, #8
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7f6:	4b22      	ldr	r3, [pc, #136]	; (800e880 <prvProcessExpiredTimer+0x94>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	68db      	ldr	r3, [r3, #12]
 800e7fc:	68db      	ldr	r3, [r3, #12]
 800e7fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	3304      	adds	r3, #4
 800e804:	4618      	mov	r0, r3
 800e806:	f7fe f8cd 	bl	800c9a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e810:	f003 0304 	and.w	r3, r3, #4
 800e814:	2b00      	cmp	r3, #0
 800e816:	d022      	beq.n	800e85e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	699a      	ldr	r2, [r3, #24]
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	18d1      	adds	r1, r2, r3
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	683a      	ldr	r2, [r7, #0]
 800e824:	6978      	ldr	r0, [r7, #20]
 800e826:	f000 f8d1 	bl	800e9cc <prvInsertTimerInActiveList>
 800e82a:	4603      	mov	r3, r0
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d01f      	beq.n	800e870 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e830:	2300      	movs	r3, #0
 800e832:	9300      	str	r3, [sp, #0]
 800e834:	2300      	movs	r3, #0
 800e836:	687a      	ldr	r2, [r7, #4]
 800e838:	2100      	movs	r1, #0
 800e83a:	6978      	ldr	r0, [r7, #20]
 800e83c:	f7ff ff88 	bl	800e750 <xTimerGenericCommand>
 800e840:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d113      	bne.n	800e870 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e84c:	f383 8811 	msr	BASEPRI, r3
 800e850:	f3bf 8f6f 	isb	sy
 800e854:	f3bf 8f4f 	dsb	sy
 800e858:	60fb      	str	r3, [r7, #12]
}
 800e85a:	bf00      	nop
 800e85c:	e7fe      	b.n	800e85c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e864:	f023 0301 	bic.w	r3, r3, #1
 800e868:	b2da      	uxtb	r2, r3
 800e86a:	697b      	ldr	r3, [r7, #20]
 800e86c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	6a1b      	ldr	r3, [r3, #32]
 800e874:	6978      	ldr	r0, [r7, #20]
 800e876:	4798      	blx	r3
}
 800e878:	bf00      	nop
 800e87a:	3718      	adds	r7, #24
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}
 800e880:	20005240 	.word	0x20005240

0800e884 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e88c:	f107 0308 	add.w	r3, r7, #8
 800e890:	4618      	mov	r0, r3
 800e892:	f000 f857 	bl	800e944 <prvGetNextExpireTime>
 800e896:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	4619      	mov	r1, r3
 800e89c:	68f8      	ldr	r0, [r7, #12]
 800e89e:	f000 f803 	bl	800e8a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e8a2:	f000 f8d5 	bl	800ea50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e8a6:	e7f1      	b.n	800e88c <prvTimerTask+0x8>

0800e8a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b084      	sub	sp, #16
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
 800e8b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e8b2:	f7ff fa39 	bl	800dd28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e8b6:	f107 0308 	add.w	r3, r7, #8
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f000 f866 	bl	800e98c <prvSampleTimeNow>
 800e8c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d130      	bne.n	800e92a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d10a      	bne.n	800e8e4 <prvProcessTimerOrBlockTask+0x3c>
 800e8ce:	687a      	ldr	r2, [r7, #4]
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d806      	bhi.n	800e8e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e8d6:	f7ff fa35 	bl	800dd44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e8da:	68f9      	ldr	r1, [r7, #12]
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f7ff ff85 	bl	800e7ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e8e2:	e024      	b.n	800e92e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d008      	beq.n	800e8fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e8ea:	4b13      	ldr	r3, [pc, #76]	; (800e938 <prvProcessTimerOrBlockTask+0x90>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d101      	bne.n	800e8f8 <prvProcessTimerOrBlockTask+0x50>
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	e000      	b.n	800e8fa <prvProcessTimerOrBlockTask+0x52>
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e8fc:	4b0f      	ldr	r3, [pc, #60]	; (800e93c <prvProcessTimerOrBlockTask+0x94>)
 800e8fe:	6818      	ldr	r0, [r3, #0]
 800e900:	687a      	ldr	r2, [r7, #4]
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	1ad3      	subs	r3, r2, r3
 800e906:	683a      	ldr	r2, [r7, #0]
 800e908:	4619      	mov	r1, r3
 800e90a:	f7fe ff7d 	bl	800d808 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e90e:	f7ff fa19 	bl	800dd44 <xTaskResumeAll>
 800e912:	4603      	mov	r3, r0
 800e914:	2b00      	cmp	r3, #0
 800e916:	d10a      	bne.n	800e92e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e918:	4b09      	ldr	r3, [pc, #36]	; (800e940 <prvProcessTimerOrBlockTask+0x98>)
 800e91a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e91e:	601a      	str	r2, [r3, #0]
 800e920:	f3bf 8f4f 	dsb	sy
 800e924:	f3bf 8f6f 	isb	sy
}
 800e928:	e001      	b.n	800e92e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e92a:	f7ff fa0b 	bl	800dd44 <xTaskResumeAll>
}
 800e92e:	bf00      	nop
 800e930:	3710      	adds	r7, #16
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}
 800e936:	bf00      	nop
 800e938:	20005244 	.word	0x20005244
 800e93c:	20005248 	.word	0x20005248
 800e940:	e000ed04 	.word	0xe000ed04

0800e944 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e944:	b480      	push	{r7}
 800e946:	b085      	sub	sp, #20
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e94c:	4b0e      	ldr	r3, [pc, #56]	; (800e988 <prvGetNextExpireTime+0x44>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d101      	bne.n	800e95a <prvGetNextExpireTime+0x16>
 800e956:	2201      	movs	r2, #1
 800e958:	e000      	b.n	800e95c <prvGetNextExpireTime+0x18>
 800e95a:	2200      	movs	r2, #0
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d105      	bne.n	800e974 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e968:	4b07      	ldr	r3, [pc, #28]	; (800e988 <prvGetNextExpireTime+0x44>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	68db      	ldr	r3, [r3, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	60fb      	str	r3, [r7, #12]
 800e972:	e001      	b.n	800e978 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e974:	2300      	movs	r3, #0
 800e976:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e978:	68fb      	ldr	r3, [r7, #12]
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	3714      	adds	r7, #20
 800e97e:	46bd      	mov	sp, r7
 800e980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e984:	4770      	bx	lr
 800e986:	bf00      	nop
 800e988:	20005240 	.word	0x20005240

0800e98c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b084      	sub	sp, #16
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e994:	f7ff fa74 	bl	800de80 <xTaskGetTickCount>
 800e998:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e99a:	4b0b      	ldr	r3, [pc, #44]	; (800e9c8 <prvSampleTimeNow+0x3c>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	68fa      	ldr	r2, [r7, #12]
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d205      	bcs.n	800e9b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e9a4:	f000 f936 	bl	800ec14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	601a      	str	r2, [r3, #0]
 800e9ae:	e002      	b.n	800e9b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e9b6:	4a04      	ldr	r2, [pc, #16]	; (800e9c8 <prvSampleTimeNow+0x3c>)
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3710      	adds	r7, #16
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}
 800e9c6:	bf00      	nop
 800e9c8:	20005250 	.word	0x20005250

0800e9cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b086      	sub	sp, #24
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	60f8      	str	r0, [r7, #12]
 800e9d4:	60b9      	str	r1, [r7, #8]
 800e9d6:	607a      	str	r2, [r7, #4]
 800e9d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	68ba      	ldr	r2, [r7, #8]
 800e9e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	68fa      	ldr	r2, [r7, #12]
 800e9e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e9ea:	68ba      	ldr	r2, [r7, #8]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d812      	bhi.n	800ea18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9f2:	687a      	ldr	r2, [r7, #4]
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	1ad2      	subs	r2, r2, r3
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	699b      	ldr	r3, [r3, #24]
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d302      	bcc.n	800ea06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ea00:	2301      	movs	r3, #1
 800ea02:	617b      	str	r3, [r7, #20]
 800ea04:	e01b      	b.n	800ea3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ea06:	4b10      	ldr	r3, [pc, #64]	; (800ea48 <prvInsertTimerInActiveList+0x7c>)
 800ea08:	681a      	ldr	r2, [r3, #0]
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	3304      	adds	r3, #4
 800ea0e:	4619      	mov	r1, r3
 800ea10:	4610      	mov	r0, r2
 800ea12:	f7fd ff8e 	bl	800c932 <vListInsert>
 800ea16:	e012      	b.n	800ea3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ea18:	687a      	ldr	r2, [r7, #4]
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d206      	bcs.n	800ea2e <prvInsertTimerInActiveList+0x62>
 800ea20:	68ba      	ldr	r2, [r7, #8]
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	429a      	cmp	r2, r3
 800ea26:	d302      	bcc.n	800ea2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ea28:	2301      	movs	r3, #1
 800ea2a:	617b      	str	r3, [r7, #20]
 800ea2c:	e007      	b.n	800ea3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ea2e:	4b07      	ldr	r3, [pc, #28]	; (800ea4c <prvInsertTimerInActiveList+0x80>)
 800ea30:	681a      	ldr	r2, [r3, #0]
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	3304      	adds	r3, #4
 800ea36:	4619      	mov	r1, r3
 800ea38:	4610      	mov	r0, r2
 800ea3a:	f7fd ff7a 	bl	800c932 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ea3e:	697b      	ldr	r3, [r7, #20]
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3718      	adds	r7, #24
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}
 800ea48:	20005244 	.word	0x20005244
 800ea4c:	20005240 	.word	0x20005240

0800ea50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b08e      	sub	sp, #56	; 0x38
 800ea54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ea56:	e0ca      	b.n	800ebee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	da18      	bge.n	800ea90 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ea5e:	1d3b      	adds	r3, r7, #4
 800ea60:	3304      	adds	r3, #4
 800ea62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ea64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d10a      	bne.n	800ea80 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ea6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea6e:	f383 8811 	msr	BASEPRI, r3
 800ea72:	f3bf 8f6f 	isb	sy
 800ea76:	f3bf 8f4f 	dsb	sy
 800ea7a:	61fb      	str	r3, [r7, #28]
}
 800ea7c:	bf00      	nop
 800ea7e:	e7fe      	b.n	800ea7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ea80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea86:	6850      	ldr	r0, [r2, #4]
 800ea88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea8a:	6892      	ldr	r2, [r2, #8]
 800ea8c:	4611      	mov	r1, r2
 800ea8e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	f2c0 80aa 	blt.w	800ebec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ea9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9e:	695b      	ldr	r3, [r3, #20]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d004      	beq.n	800eaae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eaa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa6:	3304      	adds	r3, #4
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7fd ff7b 	bl	800c9a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eaae:	463b      	mov	r3, r7
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7ff ff6b 	bl	800e98c <prvSampleTimeNow>
 800eab6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2b09      	cmp	r3, #9
 800eabc:	f200 8097 	bhi.w	800ebee <prvProcessReceivedCommands+0x19e>
 800eac0:	a201      	add	r2, pc, #4	; (adr r2, 800eac8 <prvProcessReceivedCommands+0x78>)
 800eac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eac6:	bf00      	nop
 800eac8:	0800eaf1 	.word	0x0800eaf1
 800eacc:	0800eaf1 	.word	0x0800eaf1
 800ead0:	0800eaf1 	.word	0x0800eaf1
 800ead4:	0800eb65 	.word	0x0800eb65
 800ead8:	0800eb79 	.word	0x0800eb79
 800eadc:	0800ebc3 	.word	0x0800ebc3
 800eae0:	0800eaf1 	.word	0x0800eaf1
 800eae4:	0800eaf1 	.word	0x0800eaf1
 800eae8:	0800eb65 	.word	0x0800eb65
 800eaec:	0800eb79 	.word	0x0800eb79
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eaf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eaf6:	f043 0301 	orr.w	r3, r3, #1
 800eafa:	b2da      	uxtb	r2, r3
 800eafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eafe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800eb02:	68ba      	ldr	r2, [r7, #8]
 800eb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb06:	699b      	ldr	r3, [r3, #24]
 800eb08:	18d1      	adds	r1, r2, r3
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb10:	f7ff ff5c 	bl	800e9cc <prvInsertTimerInActiveList>
 800eb14:	4603      	mov	r3, r0
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d069      	beq.n	800ebee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb1c:	6a1b      	ldr	r3, [r3, #32]
 800eb1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb28:	f003 0304 	and.w	r3, r3, #4
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d05e      	beq.n	800ebee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eb30:	68ba      	ldr	r2, [r7, #8]
 800eb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb34:	699b      	ldr	r3, [r3, #24]
 800eb36:	441a      	add	r2, r3
 800eb38:	2300      	movs	r3, #0
 800eb3a:	9300      	str	r3, [sp, #0]
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	2100      	movs	r1, #0
 800eb40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb42:	f7ff fe05 	bl	800e750 <xTimerGenericCommand>
 800eb46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800eb48:	6a3b      	ldr	r3, [r7, #32]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d14f      	bne.n	800ebee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800eb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb52:	f383 8811 	msr	BASEPRI, r3
 800eb56:	f3bf 8f6f 	isb	sy
 800eb5a:	f3bf 8f4f 	dsb	sy
 800eb5e:	61bb      	str	r3, [r7, #24]
}
 800eb60:	bf00      	nop
 800eb62:	e7fe      	b.n	800eb62 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb6a:	f023 0301 	bic.w	r3, r3, #1
 800eb6e:	b2da      	uxtb	r2, r3
 800eb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800eb76:	e03a      	b.n	800ebee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb7e:	f043 0301 	orr.w	r3, r3, #1
 800eb82:	b2da      	uxtb	r2, r3
 800eb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800eb8a:	68ba      	ldr	r2, [r7, #8]
 800eb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb8e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800eb90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb92:	699b      	ldr	r3, [r3, #24]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d10a      	bne.n	800ebae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800eb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb9c:	f383 8811 	msr	BASEPRI, r3
 800eba0:	f3bf 8f6f 	isb	sy
 800eba4:	f3bf 8f4f 	dsb	sy
 800eba8:	617b      	str	r3, [r7, #20]
}
 800ebaa:	bf00      	nop
 800ebac:	e7fe      	b.n	800ebac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ebae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb0:	699a      	ldr	r2, [r3, #24]
 800ebb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb4:	18d1      	adds	r1, r2, r3
 800ebb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebbc:	f7ff ff06 	bl	800e9cc <prvInsertTimerInActiveList>
					break;
 800ebc0:	e015      	b.n	800ebee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ebc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ebc8:	f003 0302 	and.w	r3, r3, #2
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d103      	bne.n	800ebd8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ebd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebd2:	f7fd fd3f 	bl	800c654 <vPortFree>
 800ebd6:	e00a      	b.n	800ebee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ebd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ebde:	f023 0301 	bic.w	r3, r3, #1
 800ebe2:	b2da      	uxtb	r2, r3
 800ebe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ebea:	e000      	b.n	800ebee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ebec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ebee:	4b08      	ldr	r3, [pc, #32]	; (800ec10 <prvProcessReceivedCommands+0x1c0>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	1d39      	adds	r1, r7, #4
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f7fe fbec 	bl	800d3d4 <xQueueReceive>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	f47f af2a 	bne.w	800ea58 <prvProcessReceivedCommands+0x8>
	}
}
 800ec04:	bf00      	nop
 800ec06:	bf00      	nop
 800ec08:	3730      	adds	r7, #48	; 0x30
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	20005248 	.word	0x20005248

0800ec14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b088      	sub	sp, #32
 800ec18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ec1a:	e048      	b.n	800ecae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ec1c:	4b2d      	ldr	r3, [pc, #180]	; (800ecd4 <prvSwitchTimerLists+0xc0>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	68db      	ldr	r3, [r3, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec26:	4b2b      	ldr	r3, [pc, #172]	; (800ecd4 <prvSwitchTimerLists+0xc0>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	68db      	ldr	r3, [r3, #12]
 800ec2c:	68db      	ldr	r3, [r3, #12]
 800ec2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	3304      	adds	r3, #4
 800ec34:	4618      	mov	r0, r3
 800ec36:	f7fd feb5 	bl	800c9a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	6a1b      	ldr	r3, [r3, #32]
 800ec3e:	68f8      	ldr	r0, [r7, #12]
 800ec40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec48:	f003 0304 	and.w	r3, r3, #4
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d02e      	beq.n	800ecae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	699b      	ldr	r3, [r3, #24]
 800ec54:	693a      	ldr	r2, [r7, #16]
 800ec56:	4413      	add	r3, r2
 800ec58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ec5a:	68ba      	ldr	r2, [r7, #8]
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	429a      	cmp	r2, r3
 800ec60:	d90e      	bls.n	800ec80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	68ba      	ldr	r2, [r7, #8]
 800ec66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	68fa      	ldr	r2, [r7, #12]
 800ec6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec6e:	4b19      	ldr	r3, [pc, #100]	; (800ecd4 <prvSwitchTimerLists+0xc0>)
 800ec70:	681a      	ldr	r2, [r3, #0]
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	3304      	adds	r3, #4
 800ec76:	4619      	mov	r1, r3
 800ec78:	4610      	mov	r0, r2
 800ec7a:	f7fd fe5a 	bl	800c932 <vListInsert>
 800ec7e:	e016      	b.n	800ecae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ec80:	2300      	movs	r3, #0
 800ec82:	9300      	str	r3, [sp, #0]
 800ec84:	2300      	movs	r3, #0
 800ec86:	693a      	ldr	r2, [r7, #16]
 800ec88:	2100      	movs	r1, #0
 800ec8a:	68f8      	ldr	r0, [r7, #12]
 800ec8c:	f7ff fd60 	bl	800e750 <xTimerGenericCommand>
 800ec90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d10a      	bne.n	800ecae <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ec98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec9c:	f383 8811 	msr	BASEPRI, r3
 800eca0:	f3bf 8f6f 	isb	sy
 800eca4:	f3bf 8f4f 	dsb	sy
 800eca8:	603b      	str	r3, [r7, #0]
}
 800ecaa:	bf00      	nop
 800ecac:	e7fe      	b.n	800ecac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ecae:	4b09      	ldr	r3, [pc, #36]	; (800ecd4 <prvSwitchTimerLists+0xc0>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d1b1      	bne.n	800ec1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ecb8:	4b06      	ldr	r3, [pc, #24]	; (800ecd4 <prvSwitchTimerLists+0xc0>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ecbe:	4b06      	ldr	r3, [pc, #24]	; (800ecd8 <prvSwitchTimerLists+0xc4>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	4a04      	ldr	r2, [pc, #16]	; (800ecd4 <prvSwitchTimerLists+0xc0>)
 800ecc4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ecc6:	4a04      	ldr	r2, [pc, #16]	; (800ecd8 <prvSwitchTimerLists+0xc4>)
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	6013      	str	r3, [r2, #0]
}
 800eccc:	bf00      	nop
 800ecce:	3718      	adds	r7, #24
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}
 800ecd4:	20005240 	.word	0x20005240
 800ecd8:	20005244 	.word	0x20005244

0800ecdc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b082      	sub	sp, #8
 800ece0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ece2:	f7fd ffb7 	bl	800cc54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ece6:	4b15      	ldr	r3, [pc, #84]	; (800ed3c <prvCheckForValidListAndQueue+0x60>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d120      	bne.n	800ed30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ecee:	4814      	ldr	r0, [pc, #80]	; (800ed40 <prvCheckForValidListAndQueue+0x64>)
 800ecf0:	f7fd fdce 	bl	800c890 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ecf4:	4813      	ldr	r0, [pc, #76]	; (800ed44 <prvCheckForValidListAndQueue+0x68>)
 800ecf6:	f7fd fdcb 	bl	800c890 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ecfa:	4b13      	ldr	r3, [pc, #76]	; (800ed48 <prvCheckForValidListAndQueue+0x6c>)
 800ecfc:	4a10      	ldr	r2, [pc, #64]	; (800ed40 <prvCheckForValidListAndQueue+0x64>)
 800ecfe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ed00:	4b12      	ldr	r3, [pc, #72]	; (800ed4c <prvCheckForValidListAndQueue+0x70>)
 800ed02:	4a10      	ldr	r2, [pc, #64]	; (800ed44 <prvCheckForValidListAndQueue+0x68>)
 800ed04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ed06:	2300      	movs	r3, #0
 800ed08:	9300      	str	r3, [sp, #0]
 800ed0a:	4b11      	ldr	r3, [pc, #68]	; (800ed50 <prvCheckForValidListAndQueue+0x74>)
 800ed0c:	4a11      	ldr	r2, [pc, #68]	; (800ed54 <prvCheckForValidListAndQueue+0x78>)
 800ed0e:	2110      	movs	r1, #16
 800ed10:	200a      	movs	r0, #10
 800ed12:	f7fe f929 	bl	800cf68 <xQueueGenericCreateStatic>
 800ed16:	4603      	mov	r3, r0
 800ed18:	4a08      	ldr	r2, [pc, #32]	; (800ed3c <prvCheckForValidListAndQueue+0x60>)
 800ed1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ed1c:	4b07      	ldr	r3, [pc, #28]	; (800ed3c <prvCheckForValidListAndQueue+0x60>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d005      	beq.n	800ed30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ed24:	4b05      	ldr	r3, [pc, #20]	; (800ed3c <prvCheckForValidListAndQueue+0x60>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	490b      	ldr	r1, [pc, #44]	; (800ed58 <prvCheckForValidListAndQueue+0x7c>)
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7fe fd42 	bl	800d7b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ed30:	f7fd ffc0 	bl	800ccb4 <vPortExitCritical>
}
 800ed34:	bf00      	nop
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	20005248 	.word	0x20005248
 800ed40:	20005218 	.word	0x20005218
 800ed44:	2000522c 	.word	0x2000522c
 800ed48:	20005240 	.word	0x20005240
 800ed4c:	20005244 	.word	0x20005244
 800ed50:	200052f4 	.word	0x200052f4
 800ed54:	20005254 	.word	0x20005254
 800ed58:	0800f674 	.word	0x0800f674

0800ed5c <__libc_init_array>:
 800ed5c:	b570      	push	{r4, r5, r6, lr}
 800ed5e:	4d0d      	ldr	r5, [pc, #52]	; (800ed94 <__libc_init_array+0x38>)
 800ed60:	4c0d      	ldr	r4, [pc, #52]	; (800ed98 <__libc_init_array+0x3c>)
 800ed62:	1b64      	subs	r4, r4, r5
 800ed64:	10a4      	asrs	r4, r4, #2
 800ed66:	2600      	movs	r6, #0
 800ed68:	42a6      	cmp	r6, r4
 800ed6a:	d109      	bne.n	800ed80 <__libc_init_array+0x24>
 800ed6c:	4d0b      	ldr	r5, [pc, #44]	; (800ed9c <__libc_init_array+0x40>)
 800ed6e:	4c0c      	ldr	r4, [pc, #48]	; (800eda0 <__libc_init_array+0x44>)
 800ed70:	f000 f8f0 	bl	800ef54 <_init>
 800ed74:	1b64      	subs	r4, r4, r5
 800ed76:	10a4      	asrs	r4, r4, #2
 800ed78:	2600      	movs	r6, #0
 800ed7a:	42a6      	cmp	r6, r4
 800ed7c:	d105      	bne.n	800ed8a <__libc_init_array+0x2e>
 800ed7e:	bd70      	pop	{r4, r5, r6, pc}
 800ed80:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed84:	4798      	blx	r3
 800ed86:	3601      	adds	r6, #1
 800ed88:	e7ee      	b.n	800ed68 <__libc_init_array+0xc>
 800ed8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed8e:	4798      	blx	r3
 800ed90:	3601      	adds	r6, #1
 800ed92:	e7f2      	b.n	800ed7a <__libc_init_array+0x1e>
 800ed94:	0800f74c 	.word	0x0800f74c
 800ed98:	0800f74c 	.word	0x0800f74c
 800ed9c:	0800f74c 	.word	0x0800f74c
 800eda0:	0800f750 	.word	0x0800f750

0800eda4 <memcpy>:
 800eda4:	440a      	add	r2, r1
 800eda6:	4291      	cmp	r1, r2
 800eda8:	f100 33ff 	add.w	r3, r0, #4294967295
 800edac:	d100      	bne.n	800edb0 <memcpy+0xc>
 800edae:	4770      	bx	lr
 800edb0:	b510      	push	{r4, lr}
 800edb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800edb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800edba:	4291      	cmp	r1, r2
 800edbc:	d1f9      	bne.n	800edb2 <memcpy+0xe>
 800edbe:	bd10      	pop	{r4, pc}

0800edc0 <memset>:
 800edc0:	4402      	add	r2, r0
 800edc2:	4603      	mov	r3, r0
 800edc4:	4293      	cmp	r3, r2
 800edc6:	d100      	bne.n	800edca <memset+0xa>
 800edc8:	4770      	bx	lr
 800edca:	f803 1b01 	strb.w	r1, [r3], #1
 800edce:	e7f9      	b.n	800edc4 <memset+0x4>

0800edd0 <_free_r>:
 800edd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800edd2:	2900      	cmp	r1, #0
 800edd4:	d044      	beq.n	800ee60 <_free_r+0x90>
 800edd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edda:	9001      	str	r0, [sp, #4]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	f1a1 0404 	sub.w	r4, r1, #4
 800ede2:	bfb8      	it	lt
 800ede4:	18e4      	addlt	r4, r4, r3
 800ede6:	f000 f8a9 	bl	800ef3c <__malloc_lock>
 800edea:	4a1e      	ldr	r2, [pc, #120]	; (800ee64 <_free_r+0x94>)
 800edec:	9801      	ldr	r0, [sp, #4]
 800edee:	6813      	ldr	r3, [r2, #0]
 800edf0:	b933      	cbnz	r3, 800ee00 <_free_r+0x30>
 800edf2:	6063      	str	r3, [r4, #4]
 800edf4:	6014      	str	r4, [r2, #0]
 800edf6:	b003      	add	sp, #12
 800edf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800edfc:	f000 b8a4 	b.w	800ef48 <__malloc_unlock>
 800ee00:	42a3      	cmp	r3, r4
 800ee02:	d908      	bls.n	800ee16 <_free_r+0x46>
 800ee04:	6825      	ldr	r5, [r4, #0]
 800ee06:	1961      	adds	r1, r4, r5
 800ee08:	428b      	cmp	r3, r1
 800ee0a:	bf01      	itttt	eq
 800ee0c:	6819      	ldreq	r1, [r3, #0]
 800ee0e:	685b      	ldreq	r3, [r3, #4]
 800ee10:	1949      	addeq	r1, r1, r5
 800ee12:	6021      	streq	r1, [r4, #0]
 800ee14:	e7ed      	b.n	800edf2 <_free_r+0x22>
 800ee16:	461a      	mov	r2, r3
 800ee18:	685b      	ldr	r3, [r3, #4]
 800ee1a:	b10b      	cbz	r3, 800ee20 <_free_r+0x50>
 800ee1c:	42a3      	cmp	r3, r4
 800ee1e:	d9fa      	bls.n	800ee16 <_free_r+0x46>
 800ee20:	6811      	ldr	r1, [r2, #0]
 800ee22:	1855      	adds	r5, r2, r1
 800ee24:	42a5      	cmp	r5, r4
 800ee26:	d10b      	bne.n	800ee40 <_free_r+0x70>
 800ee28:	6824      	ldr	r4, [r4, #0]
 800ee2a:	4421      	add	r1, r4
 800ee2c:	1854      	adds	r4, r2, r1
 800ee2e:	42a3      	cmp	r3, r4
 800ee30:	6011      	str	r1, [r2, #0]
 800ee32:	d1e0      	bne.n	800edf6 <_free_r+0x26>
 800ee34:	681c      	ldr	r4, [r3, #0]
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	6053      	str	r3, [r2, #4]
 800ee3a:	4421      	add	r1, r4
 800ee3c:	6011      	str	r1, [r2, #0]
 800ee3e:	e7da      	b.n	800edf6 <_free_r+0x26>
 800ee40:	d902      	bls.n	800ee48 <_free_r+0x78>
 800ee42:	230c      	movs	r3, #12
 800ee44:	6003      	str	r3, [r0, #0]
 800ee46:	e7d6      	b.n	800edf6 <_free_r+0x26>
 800ee48:	6825      	ldr	r5, [r4, #0]
 800ee4a:	1961      	adds	r1, r4, r5
 800ee4c:	428b      	cmp	r3, r1
 800ee4e:	bf04      	itt	eq
 800ee50:	6819      	ldreq	r1, [r3, #0]
 800ee52:	685b      	ldreq	r3, [r3, #4]
 800ee54:	6063      	str	r3, [r4, #4]
 800ee56:	bf04      	itt	eq
 800ee58:	1949      	addeq	r1, r1, r5
 800ee5a:	6021      	streq	r1, [r4, #0]
 800ee5c:	6054      	str	r4, [r2, #4]
 800ee5e:	e7ca      	b.n	800edf6 <_free_r+0x26>
 800ee60:	b003      	add	sp, #12
 800ee62:	bd30      	pop	{r4, r5, pc}
 800ee64:	20005344 	.word	0x20005344

0800ee68 <cleanup_glue>:
 800ee68:	b538      	push	{r3, r4, r5, lr}
 800ee6a:	460c      	mov	r4, r1
 800ee6c:	6809      	ldr	r1, [r1, #0]
 800ee6e:	4605      	mov	r5, r0
 800ee70:	b109      	cbz	r1, 800ee76 <cleanup_glue+0xe>
 800ee72:	f7ff fff9 	bl	800ee68 <cleanup_glue>
 800ee76:	4621      	mov	r1, r4
 800ee78:	4628      	mov	r0, r5
 800ee7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee7e:	f7ff bfa7 	b.w	800edd0 <_free_r>
	...

0800ee84 <_reclaim_reent>:
 800ee84:	4b2c      	ldr	r3, [pc, #176]	; (800ef38 <_reclaim_reent+0xb4>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	4283      	cmp	r3, r0
 800ee8a:	b570      	push	{r4, r5, r6, lr}
 800ee8c:	4604      	mov	r4, r0
 800ee8e:	d051      	beq.n	800ef34 <_reclaim_reent+0xb0>
 800ee90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ee92:	b143      	cbz	r3, 800eea6 <_reclaim_reent+0x22>
 800ee94:	68db      	ldr	r3, [r3, #12]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d14a      	bne.n	800ef30 <_reclaim_reent+0xac>
 800ee9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee9c:	6819      	ldr	r1, [r3, #0]
 800ee9e:	b111      	cbz	r1, 800eea6 <_reclaim_reent+0x22>
 800eea0:	4620      	mov	r0, r4
 800eea2:	f7ff ff95 	bl	800edd0 <_free_r>
 800eea6:	6961      	ldr	r1, [r4, #20]
 800eea8:	b111      	cbz	r1, 800eeb0 <_reclaim_reent+0x2c>
 800eeaa:	4620      	mov	r0, r4
 800eeac:	f7ff ff90 	bl	800edd0 <_free_r>
 800eeb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eeb2:	b111      	cbz	r1, 800eeba <_reclaim_reent+0x36>
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	f7ff ff8b 	bl	800edd0 <_free_r>
 800eeba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800eebc:	b111      	cbz	r1, 800eec4 <_reclaim_reent+0x40>
 800eebe:	4620      	mov	r0, r4
 800eec0:	f7ff ff86 	bl	800edd0 <_free_r>
 800eec4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800eec6:	b111      	cbz	r1, 800eece <_reclaim_reent+0x4a>
 800eec8:	4620      	mov	r0, r4
 800eeca:	f7ff ff81 	bl	800edd0 <_free_r>
 800eece:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800eed0:	b111      	cbz	r1, 800eed8 <_reclaim_reent+0x54>
 800eed2:	4620      	mov	r0, r4
 800eed4:	f7ff ff7c 	bl	800edd0 <_free_r>
 800eed8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800eeda:	b111      	cbz	r1, 800eee2 <_reclaim_reent+0x5e>
 800eedc:	4620      	mov	r0, r4
 800eede:	f7ff ff77 	bl	800edd0 <_free_r>
 800eee2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800eee4:	b111      	cbz	r1, 800eeec <_reclaim_reent+0x68>
 800eee6:	4620      	mov	r0, r4
 800eee8:	f7ff ff72 	bl	800edd0 <_free_r>
 800eeec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eeee:	b111      	cbz	r1, 800eef6 <_reclaim_reent+0x72>
 800eef0:	4620      	mov	r0, r4
 800eef2:	f7ff ff6d 	bl	800edd0 <_free_r>
 800eef6:	69a3      	ldr	r3, [r4, #24]
 800eef8:	b1e3      	cbz	r3, 800ef34 <_reclaim_reent+0xb0>
 800eefa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800eefc:	4620      	mov	r0, r4
 800eefe:	4798      	blx	r3
 800ef00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ef02:	b1b9      	cbz	r1, 800ef34 <_reclaim_reent+0xb0>
 800ef04:	4620      	mov	r0, r4
 800ef06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef0a:	f7ff bfad 	b.w	800ee68 <cleanup_glue>
 800ef0e:	5949      	ldr	r1, [r1, r5]
 800ef10:	b941      	cbnz	r1, 800ef24 <_reclaim_reent+0xa0>
 800ef12:	3504      	adds	r5, #4
 800ef14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef16:	2d80      	cmp	r5, #128	; 0x80
 800ef18:	68d9      	ldr	r1, [r3, #12]
 800ef1a:	d1f8      	bne.n	800ef0e <_reclaim_reent+0x8a>
 800ef1c:	4620      	mov	r0, r4
 800ef1e:	f7ff ff57 	bl	800edd0 <_free_r>
 800ef22:	e7ba      	b.n	800ee9a <_reclaim_reent+0x16>
 800ef24:	680e      	ldr	r6, [r1, #0]
 800ef26:	4620      	mov	r0, r4
 800ef28:	f7ff ff52 	bl	800edd0 <_free_r>
 800ef2c:	4631      	mov	r1, r6
 800ef2e:	e7ef      	b.n	800ef10 <_reclaim_reent+0x8c>
 800ef30:	2500      	movs	r5, #0
 800ef32:	e7ef      	b.n	800ef14 <_reclaim_reent+0x90>
 800ef34:	bd70      	pop	{r4, r5, r6, pc}
 800ef36:	bf00      	nop
 800ef38:	20000014 	.word	0x20000014

0800ef3c <__malloc_lock>:
 800ef3c:	4801      	ldr	r0, [pc, #4]	; (800ef44 <__malloc_lock+0x8>)
 800ef3e:	f7f4 b9f6 	b.w	800332e <__retarget_lock_acquire_recursive>
 800ef42:	bf00      	nop
 800ef44:	20000904 	.word	0x20000904

0800ef48 <__malloc_unlock>:
 800ef48:	4801      	ldr	r0, [pc, #4]	; (800ef50 <__malloc_unlock+0x8>)
 800ef4a:	f7f4 ba04 	b.w	8003356 <__retarget_lock_release_recursive>
 800ef4e:	bf00      	nop
 800ef50:	20000904 	.word	0x20000904

0800ef54 <_init>:
 800ef54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef56:	bf00      	nop
 800ef58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef5a:	bc08      	pop	{r3}
 800ef5c:	469e      	mov	lr, r3
 800ef5e:	4770      	bx	lr

0800ef60 <_fini>:
 800ef60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef62:	bf00      	nop
 800ef64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef66:	bc08      	pop	{r3}
 800ef68:	469e      	mov	lr, r3
 800ef6a:	4770      	bx	lr
