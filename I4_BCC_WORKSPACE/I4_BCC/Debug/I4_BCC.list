
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008940  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08008ae0  08008ae0  00018ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ba0  08008ba0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008ba0  08008ba0  00018ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ba8  08008ba8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ba8  08008ba8  00018ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bac  08008bac  00018bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005064  20000074  08008c24  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200050d8  08008c24  000250d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024fc7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000560c  00000000  00000000  0004506b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d08  00000000  00000000  0004a678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ab0  00000000  00000000  0004c380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb44  00000000  00000000  0004de30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027ac0  00000000  00000000  0006a974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a95b0  00000000  00000000  00092434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013b9e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007954  00000000  00000000  0013ba34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008ac8 	.word	0x08008ac8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08008ac8 	.word	0x08008ac8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <CenLoc_MainFunction>:
uint8 PreviousState_CenLoc;
uint8 ExtLights_UnlockedState;
uint8 ExtLights_LockedState;

void CenLoc_MainFunction()
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	if(CurrentState_CenLoc == STD_HIGH)
 80004e8:	4b95      	ldr	r3, [pc, #596]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d102      	bne.n	80004f6 <CenLoc_MainFunction+0x12>
	{
		SecAlmTrigger = STD_LOW;
 80004f0:	4b94      	ldr	r3, [pc, #592]	; (8000744 <CenLoc_MainFunction+0x260>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(PreviousState_CenLoc != CurrentState_CenLoc)
 80004f6:	4b94      	ldr	r3, [pc, #592]	; (8000748 <CenLoc_MainFunction+0x264>)
 80004f8:	781a      	ldrb	r2, [r3, #0]
 80004fa:	4b91      	ldr	r3, [pc, #580]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	429a      	cmp	r2, r3
 8000500:	d027      	beq.n	8000552 <CenLoc_MainFunction+0x6e>
	{
		ExtLights_LockedState = PreviousState_CenLoc;
 8000502:	4b91      	ldr	r3, [pc, #580]	; (8000748 <CenLoc_MainFunction+0x264>)
 8000504:	781a      	ldrb	r2, [r3, #0]
 8000506:	4b91      	ldr	r3, [pc, #580]	; (800074c <CenLoc_MainFunction+0x268>)
 8000508:	701a      	strb	r2, [r3, #0]
		ExtLights_UnlockedState = CurrentState_CenLoc;
 800050a:	4b8d      	ldr	r3, [pc, #564]	; (8000740 <CenLoc_MainFunction+0x25c>)
 800050c:	781a      	ldrb	r2, [r3, #0]
 800050e:	4b90      	ldr	r3, [pc, #576]	; (8000750 <CenLoc_MainFunction+0x26c>)
 8000510:	701a      	strb	r2, [r3, #0]
		PreviousState_CenLoc = CurrentState_CenLoc;
 8000512:	4b8b      	ldr	r3, [pc, #556]	; (8000740 <CenLoc_MainFunction+0x25c>)
 8000514:	781a      	ldrb	r2, [r3, #0]
 8000516:	4b8c      	ldr	r3, [pc, #560]	; (8000748 <CenLoc_MainFunction+0x264>)
 8000518:	701a      	strb	r2, [r3, #0]
		BTCenLoc_LockUnlockFlag = !CurrentState_CenLoc;
 800051a:	4b89      	ldr	r3, [pc, #548]	; (8000740 <CenLoc_MainFunction+0x25c>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	bf0c      	ite	eq
 8000522:	2301      	moveq	r3, #1
 8000524:	2300      	movne	r3, #0
 8000526:	b2db      	uxtb	r3, r3
 8000528:	461a      	mov	r2, r3
 800052a:	4b8a      	ldr	r3, [pc, #552]	; (8000754 <CenLoc_MainFunction+0x270>)
 800052c:	701a      	strb	r2, [r3, #0]
		LockCounter = STD_LOW;
 800052e:	4b8a      	ldr	r3, [pc, #552]	; (8000758 <CenLoc_MainFunction+0x274>)
 8000530:	2200      	movs	r2, #0
 8000532:	701a      	strb	r2, [r3, #0]
		UnlockCounter = STD_LOW;
 8000534:	4b89      	ldr	r3, [pc, #548]	; (800075c <CenLoc_MainFunction+0x278>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
		SecAlmCounter = STD_LOW;
 800053a:	4b89      	ldr	r3, [pc, #548]	; (8000760 <CenLoc_MainFunction+0x27c>)
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]

		HAL_TIM_Base_Init(&htim2);
 8000540:	4888      	ldr	r0, [pc, #544]	; (8000764 <CenLoc_MainFunction+0x280>)
 8000542:	f003 fe79 	bl	8004238 <HAL_TIM_Base_Init>
		HAL_TIM_Base_Init(&htim3);
 8000546:	4888      	ldr	r0, [pc, #544]	; (8000768 <CenLoc_MainFunction+0x284>)
 8000548:	f003 fe76 	bl	8004238 <HAL_TIM_Base_Init>
		HAL_TIM_Base_Init(&htim5);
 800054c:	4887      	ldr	r0, [pc, #540]	; (800076c <CenLoc_MainFunction+0x288>)
 800054e:	f003 fe73 	bl	8004238 <HAL_TIM_Base_Init>
	else
	{
		/* do nothing */
	}

	if(CurrentState_CenLoc == STD_HIGH && SecAlmTrigger == STD_LOW)
 8000552:	4b7b      	ldr	r3, [pc, #492]	; (8000740 <CenLoc_MainFunction+0x25c>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b01      	cmp	r3, #1
 8000558:	f040 810e 	bne.w	8000778 <CenLoc_MainFunction+0x294>
 800055c:	4b79      	ldr	r3, [pc, #484]	; (8000744 <CenLoc_MainFunction+0x260>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	f040 8109 	bne.w	8000778 <CenLoc_MainFunction+0x294>
	{
		HAL_TIM_Base_Stop(&htim3);
 8000566:	4880      	ldr	r0, [pc, #512]	; (8000768 <CenLoc_MainFunction+0x284>)
 8000568:	f003 ff1c 	bl	80043a4 <HAL_TIM_Base_Stop>
		BTCenLoc = STD_HIGH;
 800056c:	4b80      	ldr	r3, [pc, #512]	; (8000770 <CenLoc_MainFunction+0x28c>)
 800056e:	2201      	movs	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]

		IntLights_Toggle_IntLights(CurrentState_CenLoc);
 8000572:	4b73      	ldr	r3, [pc, #460]	; (8000740 <CenLoc_MainFunction+0x25c>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fe24 	bl	80011c4 <IntLights_Toggle_IntLights>
		CenLoc_Toggle_Door_LED(CurrentState_CenLoc);
 800057c:	4b70      	ldr	r3, [pc, #448]	; (8000740 <CenLoc_MainFunction+0x25c>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	4618      	mov	r0, r3
 8000582:	f000 fa4b 	bl	8000a1c <CenLoc_Toggle_Door_LED>
		SecAlm_ToggleAlarmLed(!CurrentState_CenLoc);
 8000586:	4b6e      	ldr	r3, [pc, #440]	; (8000740 <CenLoc_MainFunction+0x25c>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	bf0c      	ite	eq
 800058e:	2301      	moveq	r3, #1
 8000590:	2300      	movne	r3, #0
 8000592:	b2db      	uxtb	r3, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f000 ff1f 	bl	80013d8 <SecAlm_ToggleAlarmLed>

		if(ExtLights_UnlockedState == 1 && ExtLights_LockedState == 0)
 800059a:	4b6d      	ldr	r3, [pc, #436]	; (8000750 <CenLoc_MainFunction+0x26c>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d143      	bne.n	800062a <CenLoc_MainFunction+0x146>
 80005a2:	4b6a      	ldr	r3, [pc, #424]	; (800074c <CenLoc_MainFunction+0x268>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d13f      	bne.n	800062a <CenLoc_MainFunction+0x146>
		{
			HAL_TIM_Base_Start(&htim5);
 80005aa:	4870      	ldr	r0, [pc, #448]	; (800076c <CenLoc_MainFunction+0x288>)
 80005ac:	f003 fea0 	bl	80042f0 <HAL_TIM_Base_Start>
			if(__HAL_TIM_GET_COUNTER(&htim5) < 100000)
 80005b0:	4b6e      	ldr	r3, [pc, #440]	; (800076c <CenLoc_MainFunction+0x288>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005b6:	4a6f      	ldr	r2, [pc, #444]	; (8000774 <CenLoc_MainFunction+0x290>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d80f      	bhi.n	80005dc <CenLoc_MainFunction+0xf8>
			{
				ExtLights_FogLightFront(CurrentState_CenLoc);
 80005bc:	4b60      	ldr	r3, [pc, #384]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fd53 	bl	800106c <ExtLights_FogLightFront>
				ExtLights_LowBeam(CurrentState_CenLoc);
 80005c6:	4b5e      	ldr	r3, [pc, #376]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 fd2a 	bl	8001024 <ExtLights_LowBeam>
				ExtLights_PositionLightRear(CurrentState_CenLoc);
 80005d0:	4b5b      	ldr	r3, [pc, #364]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fd91 	bl	80010fc <ExtLights_PositionLightRear>
 80005da:	e026      	b.n	800062a <CenLoc_MainFunction+0x146>
			}
			else
			{
				ExtLights_FogLightFront(!CurrentState_CenLoc);
 80005dc:	4b58      	ldr	r3, [pc, #352]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	bf0c      	ite	eq
 80005e4:	2301      	moveq	r3, #1
 80005e6:	2300      	movne	r3, #0
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fd3e 	bl	800106c <ExtLights_FogLightFront>
				ExtLights_LowBeam(!CurrentState_CenLoc);
 80005f0:	4b53      	ldr	r3, [pc, #332]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bf0c      	ite	eq
 80005f8:	2301      	moveq	r3, #1
 80005fa:	2300      	movne	r3, #0
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fd10 	bl	8001024 <ExtLights_LowBeam>
				ExtLights_PositionLightRear(!CurrentState_CenLoc);
 8000604:	4b4e      	ldr	r3, [pc, #312]	; (8000740 <CenLoc_MainFunction+0x25c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	bf0c      	ite	eq
 800060c:	2301      	moveq	r3, #1
 800060e:	2300      	movne	r3, #0
 8000610:	b2db      	uxtb	r3, r3
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fd72 	bl	80010fc <ExtLights_PositionLightRear>

				ExtLights_UnlockedState = 0;
 8000618:	4b4d      	ldr	r3, [pc, #308]	; (8000750 <CenLoc_MainFunction+0x26c>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
				ExtLights_LockedState = 1;
 800061e:	4b4b      	ldr	r3, [pc, #300]	; (800074c <CenLoc_MainFunction+0x268>)
 8000620:	2201      	movs	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]

				HAL_TIM_Base_Stop(&htim5);
 8000624:	4851      	ldr	r0, [pc, #324]	; (800076c <CenLoc_MainFunction+0x288>)
 8000626:	f003 febd 	bl	80043a4 <HAL_TIM_Base_Stop>
		else
		{
			/* do nothing */
		}

		if(LockCounter < 4)
 800062a:	4b4b      	ldr	r3, [pc, #300]	; (8000758 <CenLoc_MainFunction+0x274>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b03      	cmp	r3, #3
 8000630:	d87b      	bhi.n	800072a <CenLoc_MainFunction+0x246>
		{
			HAL_TIM_Base_Start(&htim2);
 8000632:	484c      	ldr	r0, [pc, #304]	; (8000764 <CenLoc_MainFunction+0x280>)
 8000634:	f003 fe5c 	bl	80042f0 <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000638:	4b4a      	ldr	r3, [pc, #296]	; (8000764 <CenLoc_MainFunction+0x280>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800063e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000642:	4293      	cmp	r3, r2
 8000644:	d80a      	bhi.n	800065c <CenLoc_MainFunction+0x178>
			{
				ExtLights_TurnSignalLeft(CurrentState_CenLoc);
 8000646:	4b3e      	ldr	r3, [pc, #248]	; (8000740 <CenLoc_MainFunction+0x25c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fd32 	bl	80010b4 <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(CurrentState_CenLoc);
 8000650:	4b3b      	ldr	r3, [pc, #236]	; (8000740 <CenLoc_MainFunction+0x25c>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fd3f 	bl	80010d8 <ExtLights_TurnSignalRight>
		if(LockCounter < 4)
 800065a:	e19c      	b.n	8000996 <CenLoc_MainFunction+0x4b2>
			}
			else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 800065c:	4b41      	ldr	r3, [pc, #260]	; (8000764 <CenLoc_MainFunction+0x280>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000662:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000666:	4293      	cmp	r3, r2
 8000668:	d91b      	bls.n	80006a2 <CenLoc_MainFunction+0x1be>
 800066a:	4b3e      	ldr	r3, [pc, #248]	; (8000764 <CenLoc_MainFunction+0x280>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000670:	f241 3287 	movw	r2, #4999	; 0x1387
 8000674:	4293      	cmp	r3, r2
 8000676:	d814      	bhi.n	80006a2 <CenLoc_MainFunction+0x1be>
			{
				ExtLights_TurnSignalLeft(!CurrentState_CenLoc);
 8000678:	4b31      	ldr	r3, [pc, #196]	; (8000740 <CenLoc_MainFunction+0x25c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	bf0c      	ite	eq
 8000680:	2301      	moveq	r3, #1
 8000682:	2300      	movne	r3, #0
 8000684:	b2db      	uxtb	r3, r3
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fd14 	bl	80010b4 <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(!CurrentState_CenLoc);
 800068c:	4b2c      	ldr	r3, [pc, #176]	; (8000740 <CenLoc_MainFunction+0x25c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	bf0c      	ite	eq
 8000694:	2301      	moveq	r3, #1
 8000696:	2300      	movne	r3, #0
 8000698:	b2db      	uxtb	r3, r3
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fd1c 	bl	80010d8 <ExtLights_TurnSignalRight>
 80006a0:	e04c      	b.n	800073c <CenLoc_MainFunction+0x258>
			}
			else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 80006a2:	4b30      	ldr	r3, [pc, #192]	; (8000764 <CenLoc_MainFunction+0x280>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d911      	bls.n	80006d4 <CenLoc_MainFunction+0x1f0>
 80006b0:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <CenLoc_MainFunction+0x280>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b6:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d80a      	bhi.n	80006d4 <CenLoc_MainFunction+0x1f0>
			{
				ExtLights_TurnSignalLeft(CurrentState_CenLoc);
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fcf6 	bl	80010b4 <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(CurrentState_CenLoc);
 80006c8:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fd03 	bl	80010d8 <ExtLights_TurnSignalRight>
 80006d2:	e033      	b.n	800073c <CenLoc_MainFunction+0x258>
			}
			else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <CenLoc_MainFunction+0x280>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006da:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80006de:	4293      	cmp	r3, r2
 80006e0:	f240 8159 	bls.w	8000996 <CenLoc_MainFunction+0x4b2>
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <CenLoc_MainFunction+0x280>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ea:	f242 720f 	movw	r2, #9999	; 0x270f
 80006ee:	4293      	cmp	r3, r2
 80006f0:	f200 8151 	bhi.w	8000996 <CenLoc_MainFunction+0x4b2>
			{
				ExtLights_TurnSignalLeft(!CurrentState_CenLoc);
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	bf0c      	ite	eq
 80006fc:	2301      	moveq	r3, #1
 80006fe:	2300      	movne	r3, #0
 8000700:	b2db      	uxtb	r3, r3
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fcd6 	bl	80010b4 <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(!CurrentState_CenLoc);
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <CenLoc_MainFunction+0x25c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	bf0c      	ite	eq
 8000710:	2301      	moveq	r3, #1
 8000712:	2300      	movne	r3, #0
 8000714:	b2db      	uxtb	r3, r3
 8000716:	4618      	mov	r0, r3
 8000718:	f000 fcde 	bl	80010d8 <ExtLights_TurnSignalRight>

				LockCounter++;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <CenLoc_MainFunction+0x274>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	3301      	adds	r3, #1
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <CenLoc_MainFunction+0x274>)
 8000726:	701a      	strb	r2, [r3, #0]
		if(LockCounter < 4)
 8000728:	e135      	b.n	8000996 <CenLoc_MainFunction+0x4b2>
			else
			{
				/* do nothing */
			}
		}
		else if(LockCounter >= 4)
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <CenLoc_MainFunction+0x274>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b03      	cmp	r3, #3
 8000730:	f240 8131 	bls.w	8000996 <CenLoc_MainFunction+0x4b2>
		{
			HAL_TIM_Base_Stop(&htim2);
 8000734:	480b      	ldr	r0, [pc, #44]	; (8000764 <CenLoc_MainFunction+0x280>)
 8000736:	f003 fe35 	bl	80043a4 <HAL_TIM_Base_Stop>
		if(LockCounter < 4)
 800073a:	e12c      	b.n	8000996 <CenLoc_MainFunction+0x4b2>
 800073c:	e12b      	b.n	8000996 <CenLoc_MainFunction+0x4b2>
 800073e:	bf00      	nop
 8000740:	20000090 	.word	0x20000090
 8000744:	200000b0 	.word	0x200000b0
 8000748:	20000093 	.word	0x20000093
 800074c:	20000095 	.word	0x20000095
 8000750:	20000094 	.word	0x20000094
 8000754:	20000092 	.word	0x20000092
 8000758:	200000ae 	.word	0x200000ae
 800075c:	200000af 	.word	0x200000af
 8000760:	200000b1 	.word	0x200000b1
 8000764:	200002e4 	.word	0x200002e4
 8000768:	20000398 	.word	0x20000398
 800076c:	20000500 	.word	0x20000500
 8000770:	20000091 	.word	0x20000091
 8000774:	0001869f 	.word	0x0001869f
		else
		{
			/* do nothing */
		}
	}
	else if(CurrentState_CenLoc == STD_LOW && SecAlmTrigger == STD_LOW)
 8000778:	4b89      	ldr	r3, [pc, #548]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	f040 810d 	bne.w	800099c <CenLoc_MainFunction+0x4b8>
 8000782:	4b88      	ldr	r3, [pc, #544]	; (80009a4 <CenLoc_MainFunction+0x4c0>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	f040 8108 	bne.w	800099c <CenLoc_MainFunction+0x4b8>
	{
		BTCenLoc = STD_LOW;
 800078c:	4b86      	ldr	r3, [pc, #536]	; (80009a8 <CenLoc_MainFunction+0x4c4>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
		IntLights_Toggle_IntLights(CurrentState_CenLoc);
 8000792:	4b83      	ldr	r3, [pc, #524]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fd14 	bl	80011c4 <IntLights_Toggle_IntLights>
		CenLoc_Toggle_Door_LED(CurrentState_CenLoc);
 800079c:	4b80      	ldr	r3, [pc, #512]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 f93b 	bl	8000a1c <CenLoc_Toggle_Door_LED>

		HAL_TIM_Base_Start(&htim3);
 80007a6:	4881      	ldr	r0, [pc, #516]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 80007a8:	f003 fda2 	bl	80042f0 <HAL_TIM_Base_Start>

		if(ExtLights_UnlockedState == 0 && ExtLights_LockedState == 1)
 80007ac:	4b80      	ldr	r3, [pc, #512]	; (80009b0 <CenLoc_MainFunction+0x4cc>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d149      	bne.n	8000848 <CenLoc_MainFunction+0x364>
 80007b4:	4b7f      	ldr	r3, [pc, #508]	; (80009b4 <CenLoc_MainFunction+0x4d0>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d145      	bne.n	8000848 <CenLoc_MainFunction+0x364>
		{
			HAL_TIM_Base_Start(&htim5);
 80007bc:	487e      	ldr	r0, [pc, #504]	; (80009b8 <CenLoc_MainFunction+0x4d4>)
 80007be:	f003 fd97 	bl	80042f0 <HAL_TIM_Base_Start>
			if(__HAL_TIM_GET_COUNTER(&htim5) < 100000)
 80007c2:	4b7d      	ldr	r3, [pc, #500]	; (80009b8 <CenLoc_MainFunction+0x4d4>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c8:	4a7c      	ldr	r2, [pc, #496]	; (80009bc <CenLoc_MainFunction+0x4d8>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d81e      	bhi.n	800080c <CenLoc_MainFunction+0x328>
			{
				ExtLights_FogLightFront(!CurrentState_CenLoc);
 80007ce:	4b74      	ldr	r3, [pc, #464]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	bf0c      	ite	eq
 80007d6:	2301      	moveq	r3, #1
 80007d8:	2300      	movne	r3, #0
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fc45 	bl	800106c <ExtLights_FogLightFront>
				ExtLights_LowBeam(!CurrentState_CenLoc);
 80007e2:	4b6f      	ldr	r3, [pc, #444]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	bf0c      	ite	eq
 80007ea:	2301      	moveq	r3, #1
 80007ec:	2300      	movne	r3, #0
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 fc17 	bl	8001024 <ExtLights_LowBeam>
				ExtLights_PositionLightRear(!CurrentState_CenLoc);
 80007f6:	4b6a      	ldr	r3, [pc, #424]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	bf0c      	ite	eq
 80007fe:	2301      	moveq	r3, #1
 8000800:	2300      	movne	r3, #0
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4618      	mov	r0, r3
 8000806:	f000 fc79 	bl	80010fc <ExtLights_PositionLightRear>
 800080a:	e01d      	b.n	8000848 <CenLoc_MainFunction+0x364>
			}
			else if(__HAL_TIM_GET_COUNTER(&htim5) > 100000)
 800080c:	4b6a      	ldr	r3, [pc, #424]	; (80009b8 <CenLoc_MainFunction+0x4d4>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000812:	4a6b      	ldr	r2, [pc, #428]	; (80009c0 <CenLoc_MainFunction+0x4dc>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d917      	bls.n	8000848 <CenLoc_MainFunction+0x364>
			{
				ExtLights_FogLightFront(CurrentState_CenLoc);
 8000818:	4b61      	ldr	r3, [pc, #388]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fc25 	bl	800106c <ExtLights_FogLightFront>
				ExtLights_LowBeam(CurrentState_CenLoc);
 8000822:	4b5f      	ldr	r3, [pc, #380]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fbfc 	bl	8001024 <ExtLights_LowBeam>
				ExtLights_PositionLightRear(CurrentState_CenLoc);
 800082c:	4b5c      	ldr	r3, [pc, #368]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fc63 	bl	80010fc <ExtLights_PositionLightRear>

				ExtLights_UnlockedState = 1;
 8000836:	4b5e      	ldr	r3, [pc, #376]	; (80009b0 <CenLoc_MainFunction+0x4cc>)
 8000838:	2201      	movs	r2, #1
 800083a:	701a      	strb	r2, [r3, #0]
				ExtLights_LockedState = 0;
 800083c:	4b5d      	ldr	r3, [pc, #372]	; (80009b4 <CenLoc_MainFunction+0x4d0>)
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]

				HAL_TIM_Base_Stop(&htim5);
 8000842:	485d      	ldr	r0, [pc, #372]	; (80009b8 <CenLoc_MainFunction+0x4d4>)
 8000844:	f003 fdae 	bl	80043a4 <HAL_TIM_Base_Stop>
		else
		{
			/* do nothing */
		}

		if(40000 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 41250)
 8000848:	4b58      	ldr	r3, [pc, #352]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084e:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000852:	4293      	cmp	r3, r2
 8000854:	d911      	bls.n	800087a <CenLoc_MainFunction+0x396>
 8000856:	4b55      	ldr	r3, [pc, #340]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800085c:	f24a 1221 	movw	r2, #41249	; 0xa121
 8000860:	4293      	cmp	r3, r2
 8000862:	d80a      	bhi.n	800087a <CenLoc_MainFunction+0x396>
		{
			SecAlm_ToggleAlarmLed(!CurrentState_CenLoc);
 8000864:	4b4e      	ldr	r3, [pc, #312]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	bf0c      	ite	eq
 800086c:	2301      	moveq	r3, #1
 800086e:	2300      	movne	r3, #0
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f000 fdb0 	bl	80013d8 <SecAlm_ToggleAlarmLed>
 8000878:	e03f      	b.n	80008fa <CenLoc_MainFunction+0x416>
		}
		else if(41250 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 42500)
 800087a:	4b4c      	ldr	r3, [pc, #304]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000880:	f24a 1222 	movw	r2, #41250	; 0xa122
 8000884:	4293      	cmp	r3, r2
 8000886:	d90c      	bls.n	80008a2 <CenLoc_MainFunction+0x3be>
 8000888:	4b48      	ldr	r3, [pc, #288]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088e:	f24a 6203 	movw	r2, #42499	; 0xa603
 8000892:	4293      	cmp	r3, r2
 8000894:	d805      	bhi.n	80008a2 <CenLoc_MainFunction+0x3be>
		{
			SecAlm_ToggleAlarmLed(CurrentState_CenLoc);
 8000896:	4b42      	ldr	r3, [pc, #264]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f000 fd9c 	bl	80013d8 <SecAlm_ToggleAlarmLed>
 80008a0:	e02b      	b.n	80008fa <CenLoc_MainFunction+0x416>
		}
		else if(42500 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 43750)
 80008a2:	4b42      	ldr	r3, [pc, #264]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a8:	f24a 6204 	movw	r2, #42500	; 0xa604
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d911      	bls.n	80008d4 <CenLoc_MainFunction+0x3f0>
 80008b0:	4b3e      	ldr	r3, [pc, #248]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b6:	f64a 22e5 	movw	r2, #43749	; 0xaae5
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d80a      	bhi.n	80008d4 <CenLoc_MainFunction+0x3f0>
		{
			SecAlm_ToggleAlarmLed(!CurrentState_CenLoc);
 80008be:	4b38      	ldr	r3, [pc, #224]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	bf0c      	ite	eq
 80008c6:	2301      	moveq	r3, #1
 80008c8:	2300      	movne	r3, #0
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 fd83 	bl	80013d8 <SecAlm_ToggleAlarmLed>
 80008d2:	e012      	b.n	80008fa <CenLoc_MainFunction+0x416>
		}
		else if(43750 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 45000)
 80008d4:	4b35      	ldr	r3, [pc, #212]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008da:	f64a 22e6 	movw	r2, #43750	; 0xaae6
 80008de:	4293      	cmp	r3, r2
 80008e0:	d90b      	bls.n	80008fa <CenLoc_MainFunction+0x416>
 80008e2:	4b32      	ldr	r3, [pc, #200]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e8:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d804      	bhi.n	80008fa <CenLoc_MainFunction+0x416>
		{
			SecAlm_ToggleAlarmLed(CurrentState_CenLoc);
 80008f0:	4b2b      	ldr	r3, [pc, #172]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fd6f 	bl	80013d8 <SecAlm_ToggleAlarmLed>
		else
		{
			/* do nothing */
		}

		if(UnlockCounter < 2 && BTCenLoc_LockUnlockFlag == STD_HIGH)
 80008fa:	4b32      	ldr	r3, [pc, #200]	; (80009c4 <CenLoc_MainFunction+0x4e0>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d841      	bhi.n	8000986 <CenLoc_MainFunction+0x4a2>
 8000902:	4b31      	ldr	r3, [pc, #196]	; (80009c8 <CenLoc_MainFunction+0x4e4>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d13d      	bne.n	8000986 <CenLoc_MainFunction+0x4a2>
		{
			HAL_TIM_Base_Start(&htim2);
 800090a:	4830      	ldr	r0, [pc, #192]	; (80009cc <CenLoc_MainFunction+0x4e8>)
 800090c:	f003 fcf0 	bl	80042f0 <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000910:	4b2e      	ldr	r3, [pc, #184]	; (80009cc <CenLoc_MainFunction+0x4e8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000916:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800091a:	4293      	cmp	r3, r2
 800091c:	d814      	bhi.n	8000948 <CenLoc_MainFunction+0x464>
			{
				ExtLights_TurnSignalLeft(!CurrentState_CenLoc);
 800091e:	4b20      	ldr	r3, [pc, #128]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	bf0c      	ite	eq
 8000926:	2301      	moveq	r3, #1
 8000928:	2300      	movne	r3, #0
 800092a:	b2db      	uxtb	r3, r3
 800092c:	4618      	mov	r0, r3
 800092e:	f000 fbc1 	bl	80010b4 <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(!CurrentState_CenLoc);
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	bf0c      	ite	eq
 800093a:	2301      	moveq	r3, #1
 800093c:	2300      	movne	r3, #0
 800093e:	b2db      	uxtb	r3, r3
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fbc9 	bl	80010d8 <ExtLights_TurnSignalRight>
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000946:	e028      	b.n	800099a <CenLoc_MainFunction+0x4b6>
			}
			else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000948:	4b20      	ldr	r3, [pc, #128]	; (80009cc <CenLoc_MainFunction+0x4e8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000952:	4293      	cmp	r3, r2
 8000954:	d921      	bls.n	800099a <CenLoc_MainFunction+0x4b6>
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <CenLoc_MainFunction+0x4e8>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000960:	4293      	cmp	r3, r2
 8000962:	d81a      	bhi.n	800099a <CenLoc_MainFunction+0x4b6>
			{
				ExtLights_TurnSignalLeft(CurrentState_CenLoc);
 8000964:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4618      	mov	r0, r3
 800096a:	f000 fba3 	bl	80010b4 <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(CurrentState_CenLoc);
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fbb0 	bl	80010d8 <ExtLights_TurnSignalRight>

				UnlockCounter++;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <CenLoc_MainFunction+0x4e0>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	3301      	adds	r3, #1
 800097e:	b2da      	uxtb	r2, r3
 8000980:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <CenLoc_MainFunction+0x4e0>)
 8000982:	701a      	strb	r2, [r3, #0]
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000984:	e009      	b.n	800099a <CenLoc_MainFunction+0x4b6>
			else
			{
				/* do nothing */
			}
		}
		else if(UnlockCounter >= 2)
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <CenLoc_MainFunction+0x4e0>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d906      	bls.n	800099c <CenLoc_MainFunction+0x4b8>
		{
			HAL_TIM_Base_Stop(&htim2);
 800098e:	480f      	ldr	r0, [pc, #60]	; (80009cc <CenLoc_MainFunction+0x4e8>)
 8000990:	f003 fd08 	bl	80043a4 <HAL_TIM_Base_Stop>
	}
	else
	{
		/* do nothing */
	}
}
 8000994:	e002      	b.n	800099c <CenLoc_MainFunction+0x4b8>
		if(LockCounter < 4)
 8000996:	bf00      	nop
 8000998:	e000      	b.n	800099c <CenLoc_MainFunction+0x4b8>
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 800099a:	bf00      	nop
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000090 	.word	0x20000090
 80009a4:	200000b0 	.word	0x200000b0
 80009a8:	20000091 	.word	0x20000091
 80009ac:	20000398 	.word	0x20000398
 80009b0:	20000094 	.word	0x20000094
 80009b4:	20000095 	.word	0x20000095
 80009b8:	20000500 	.word	0x20000500
 80009bc:	0001869f 	.word	0x0001869f
 80009c0:	000186a0 	.word	0x000186a0
 80009c4:	200000af 	.word	0x200000af
 80009c8:	20000092 	.word	0x20000092
 80009cc:	200002e4 	.word	0x200002e4

080009d0 <CenLoc_Init>:

StdReturnType CenLoc_Init()
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
	CurrentState_CenLoc = STD_LOW;
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <CenLoc_Init+0x34>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
	BTCenLoc = STD_LOW;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <CenLoc_Init+0x38>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
	BTCenLoc_LockUnlockFlag = STD_LOW;
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <CenLoc_Init+0x3c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
	PreviousState_CenLoc = STD_LOW;
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <CenLoc_Init+0x40>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
	ExtLights_UnlockedState = STD_LOW;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <CenLoc_Init+0x44>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
	ExtLights_LockedState = STD_LOW;
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <CenLoc_Init+0x48>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]

	return E_OK;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	20000090 	.word	0x20000090
 8000a08:	20000091 	.word	0x20000091
 8000a0c:	20000092 	.word	0x20000092
 8000a10:	20000093 	.word	0x20000093
 8000a14:	20000094 	.word	0x20000094
 8000a18:	20000095 	.word	0x20000095

08000a1c <CenLoc_Toggle_Door_LED>:

void CenLoc_Toggle_Door_LED(uint8 PinState)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DOOR_LED_PORT, DOOR_LED_PIN, PinState);
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	2140      	movs	r1, #64	; 0x40
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <CenLoc_Toggle_Door_LED+0x20>)
 8000a2e:	f002 fce1 	bl	80033f4 <HAL_GPIO_WritePin>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40020400 	.word	0x40020400

08000a40 <ExtLights_MainFunction>:
uint8_t BTHazardLight;
uint8_t BTExtLight_IrqFlag;


void ExtLights_MainFunction()
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	if(BTLowBeam == STD_HIGH)
 8000a44:	4b86      	ldr	r3, [pc, #536]	; (8000c60 <ExtLights_MainFunction+0x220>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d104      	bne.n	8000a56 <ExtLights_MainFunction+0x16>
	{
		CurrentState_LowBeam = BTLowBeam;
 8000a4c:	4b84      	ldr	r3, [pc, #528]	; (8000c60 <ExtLights_MainFunction+0x220>)
 8000a4e:	781a      	ldrb	r2, [r3, #0]
 8000a50:	4b84      	ldr	r3, [pc, #528]	; (8000c64 <ExtLights_MainFunction+0x224>)
 8000a52:	701a      	strb	r2, [r3, #0]
 8000a54:	e007      	b.n	8000a66 <ExtLights_MainFunction+0x26>
	}
	else if(BTLowBeam == STD_LOW)
 8000a56:	4b82      	ldr	r3, [pc, #520]	; (8000c60 <ExtLights_MainFunction+0x220>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d103      	bne.n	8000a66 <ExtLights_MainFunction+0x26>
	{
		CurrentState_LowBeam = BTLowBeam;
 8000a5e:	4b80      	ldr	r3, [pc, #512]	; (8000c60 <ExtLights_MainFunction+0x220>)
 8000a60:	781a      	ldrb	r2, [r3, #0]
 8000a62:	4b80      	ldr	r3, [pc, #512]	; (8000c64 <ExtLights_MainFunction+0x224>)
 8000a64:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTHighBeam == STD_HIGH)
 8000a66:	4b80      	ldr	r3, [pc, #512]	; (8000c68 <ExtLights_MainFunction+0x228>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d104      	bne.n	8000a78 <ExtLights_MainFunction+0x38>
	{
		CurrentState_HighBeam = BTLowBeam;
 8000a6e:	4b7c      	ldr	r3, [pc, #496]	; (8000c60 <ExtLights_MainFunction+0x220>)
 8000a70:	781a      	ldrb	r2, [r3, #0]
 8000a72:	4b7e      	ldr	r3, [pc, #504]	; (8000c6c <ExtLights_MainFunction+0x22c>)
 8000a74:	701a      	strb	r2, [r3, #0]
 8000a76:	e007      	b.n	8000a88 <ExtLights_MainFunction+0x48>
	}
	else if(BTHighBeam == STD_LOW)
 8000a78:	4b7b      	ldr	r3, [pc, #492]	; (8000c68 <ExtLights_MainFunction+0x228>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d103      	bne.n	8000a88 <ExtLights_MainFunction+0x48>
	{
		CurrentState_HighBeam = BTLowBeam;
 8000a80:	4b77      	ldr	r3, [pc, #476]	; (8000c60 <ExtLights_MainFunction+0x220>)
 8000a82:	781a      	ldrb	r2, [r3, #0]
 8000a84:	4b79      	ldr	r3, [pc, #484]	; (8000c6c <ExtLights_MainFunction+0x22c>)
 8000a86:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTHighBeam == STD_HIGH)
 8000a88:	4b77      	ldr	r3, [pc, #476]	; (8000c68 <ExtLights_MainFunction+0x228>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d104      	bne.n	8000a9a <ExtLights_MainFunction+0x5a>
	{
		CurrentState_HighBeam = BTHighBeam;
 8000a90:	4b75      	ldr	r3, [pc, #468]	; (8000c68 <ExtLights_MainFunction+0x228>)
 8000a92:	781a      	ldrb	r2, [r3, #0]
 8000a94:	4b75      	ldr	r3, [pc, #468]	; (8000c6c <ExtLights_MainFunction+0x22c>)
 8000a96:	701a      	strb	r2, [r3, #0]
 8000a98:	e007      	b.n	8000aaa <ExtLights_MainFunction+0x6a>
	}
	else if(BTHighBeam == STD_LOW)
 8000a9a:	4b73      	ldr	r3, [pc, #460]	; (8000c68 <ExtLights_MainFunction+0x228>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d103      	bne.n	8000aaa <ExtLights_MainFunction+0x6a>
	{
		CurrentState_HighBeam = BTHighBeam;
 8000aa2:	4b71      	ldr	r3, [pc, #452]	; (8000c68 <ExtLights_MainFunction+0x228>)
 8000aa4:	781a      	ldrb	r2, [r3, #0]
 8000aa6:	4b71      	ldr	r3, [pc, #452]	; (8000c6c <ExtLights_MainFunction+0x22c>)
 8000aa8:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTFogLightFront == STD_HIGH)
 8000aaa:	4b71      	ldr	r3, [pc, #452]	; (8000c70 <ExtLights_MainFunction+0x230>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d104      	bne.n	8000abc <ExtLights_MainFunction+0x7c>
	{
		CurrentState_FogLightFront = BTFogLightFront;
 8000ab2:	4b6f      	ldr	r3, [pc, #444]	; (8000c70 <ExtLights_MainFunction+0x230>)
 8000ab4:	781a      	ldrb	r2, [r3, #0]
 8000ab6:	4b6f      	ldr	r3, [pc, #444]	; (8000c74 <ExtLights_MainFunction+0x234>)
 8000ab8:	701a      	strb	r2, [r3, #0]
 8000aba:	e007      	b.n	8000acc <ExtLights_MainFunction+0x8c>
	}
	else if(BTFogLightFront == STD_LOW)
 8000abc:	4b6c      	ldr	r3, [pc, #432]	; (8000c70 <ExtLights_MainFunction+0x230>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d103      	bne.n	8000acc <ExtLights_MainFunction+0x8c>
	{
		CurrentState_FogLightFront = BTFogLightFront;
 8000ac4:	4b6a      	ldr	r3, [pc, #424]	; (8000c70 <ExtLights_MainFunction+0x230>)
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	4b6a      	ldr	r3, [pc, #424]	; (8000c74 <ExtLights_MainFunction+0x234>)
 8000aca:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTFogLightRear == STD_HIGH)
 8000acc:	4b6a      	ldr	r3, [pc, #424]	; (8000c78 <ExtLights_MainFunction+0x238>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d104      	bne.n	8000ade <ExtLights_MainFunction+0x9e>
	{
		CurrentState_FogLightRear = BTFogLightRear;
 8000ad4:	4b68      	ldr	r3, [pc, #416]	; (8000c78 <ExtLights_MainFunction+0x238>)
 8000ad6:	781a      	ldrb	r2, [r3, #0]
 8000ad8:	4b68      	ldr	r3, [pc, #416]	; (8000c7c <ExtLights_MainFunction+0x23c>)
 8000ada:	701a      	strb	r2, [r3, #0]
 8000adc:	e007      	b.n	8000aee <ExtLights_MainFunction+0xae>
	}
	else if(BTFogLightRear == STD_LOW)
 8000ade:	4b66      	ldr	r3, [pc, #408]	; (8000c78 <ExtLights_MainFunction+0x238>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <ExtLights_MainFunction+0xae>
	{
		CurrentState_FogLightRear = BTFogLightRear;
 8000ae6:	4b64      	ldr	r3, [pc, #400]	; (8000c78 <ExtLights_MainFunction+0x238>)
 8000ae8:	781a      	ldrb	r2, [r3, #0]
 8000aea:	4b64      	ldr	r3, [pc, #400]	; (8000c7c <ExtLights_MainFunction+0x23c>)
 8000aec:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTPositionLightRear == STD_HIGH)
 8000aee:	4b64      	ldr	r3, [pc, #400]	; (8000c80 <ExtLights_MainFunction+0x240>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d104      	bne.n	8000b00 <ExtLights_MainFunction+0xc0>
	{
		CurrentState_PositionLightRear = BTPositionLightRear;
 8000af6:	4b62      	ldr	r3, [pc, #392]	; (8000c80 <ExtLights_MainFunction+0x240>)
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	4b62      	ldr	r3, [pc, #392]	; (8000c84 <ExtLights_MainFunction+0x244>)
 8000afc:	701a      	strb	r2, [r3, #0]
 8000afe:	e007      	b.n	8000b10 <ExtLights_MainFunction+0xd0>
	}
	else if(BTPositionLightRear == STD_LOW)
 8000b00:	4b5f      	ldr	r3, [pc, #380]	; (8000c80 <ExtLights_MainFunction+0x240>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d103      	bne.n	8000b10 <ExtLights_MainFunction+0xd0>
	{
		CurrentState_PositionLightRear = BTPositionLightRear;
 8000b08:	4b5d      	ldr	r3, [pc, #372]	; (8000c80 <ExtLights_MainFunction+0x240>)
 8000b0a:	781a      	ldrb	r2, [r3, #0]
 8000b0c:	4b5d      	ldr	r3, [pc, #372]	; (8000c84 <ExtLights_MainFunction+0x244>)
 8000b0e:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTPositionLightRear == STD_HIGH)
 8000b10:	4b5b      	ldr	r3, [pc, #364]	; (8000c80 <ExtLights_MainFunction+0x240>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d104      	bne.n	8000b22 <ExtLights_MainFunction+0xe2>
	{
		CurrentState_PositionLightRear = BTPositionLightRear;
 8000b18:	4b59      	ldr	r3, [pc, #356]	; (8000c80 <ExtLights_MainFunction+0x240>)
 8000b1a:	781a      	ldrb	r2, [r3, #0]
 8000b1c:	4b59      	ldr	r3, [pc, #356]	; (8000c84 <ExtLights_MainFunction+0x244>)
 8000b1e:	701a      	strb	r2, [r3, #0]
 8000b20:	e007      	b.n	8000b32 <ExtLights_MainFunction+0xf2>
	}
	else if(BTPositionLightRear == STD_LOW)
 8000b22:	4b57      	ldr	r3, [pc, #348]	; (8000c80 <ExtLights_MainFunction+0x240>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d103      	bne.n	8000b32 <ExtLights_MainFunction+0xf2>
	{
		CurrentState_PositionLightRear = BTPositionLightRear;
 8000b2a:	4b55      	ldr	r3, [pc, #340]	; (8000c80 <ExtLights_MainFunction+0x240>)
 8000b2c:	781a      	ldrb	r2, [r3, #0]
 8000b2e:	4b55      	ldr	r3, [pc, #340]	; (8000c84 <ExtLights_MainFunction+0x244>)
 8000b30:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTBrakeLight == STD_HIGH)
 8000b32:	4b55      	ldr	r3, [pc, #340]	; (8000c88 <ExtLights_MainFunction+0x248>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d104      	bne.n	8000b44 <ExtLights_MainFunction+0x104>
	{
		CurrentState_BrakeLight = BTBrakeLight;
 8000b3a:	4b53      	ldr	r3, [pc, #332]	; (8000c88 <ExtLights_MainFunction+0x248>)
 8000b3c:	781a      	ldrb	r2, [r3, #0]
 8000b3e:	4b53      	ldr	r3, [pc, #332]	; (8000c8c <ExtLights_MainFunction+0x24c>)
 8000b40:	701a      	strb	r2, [r3, #0]
 8000b42:	e007      	b.n	8000b54 <ExtLights_MainFunction+0x114>
	}
	else if(BTBrakeLight == STD_LOW)
 8000b44:	4b50      	ldr	r3, [pc, #320]	; (8000c88 <ExtLights_MainFunction+0x248>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d103      	bne.n	8000b54 <ExtLights_MainFunction+0x114>
	{
		CurrentState_BrakeLight = BTBrakeLight;
 8000b4c:	4b4e      	ldr	r3, [pc, #312]	; (8000c88 <ExtLights_MainFunction+0x248>)
 8000b4e:	781a      	ldrb	r2, [r3, #0]
 8000b50:	4b4e      	ldr	r3, [pc, #312]	; (8000c8c <ExtLights_MainFunction+0x24c>)
 8000b52:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTReverseLight == STD_HIGH)
 8000b54:	4b4e      	ldr	r3, [pc, #312]	; (8000c90 <ExtLights_MainFunction+0x250>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d104      	bne.n	8000b66 <ExtLights_MainFunction+0x126>
	{
		CurrentState_ReverseLight = BTReverseLight;
 8000b5c:	4b4c      	ldr	r3, [pc, #304]	; (8000c90 <ExtLights_MainFunction+0x250>)
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	4b4c      	ldr	r3, [pc, #304]	; (8000c94 <ExtLights_MainFunction+0x254>)
 8000b62:	701a      	strb	r2, [r3, #0]
 8000b64:	e007      	b.n	8000b76 <ExtLights_MainFunction+0x136>
	}
	else if(BTReverseLight == STD_LOW)
 8000b66:	4b4a      	ldr	r3, [pc, #296]	; (8000c90 <ExtLights_MainFunction+0x250>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d103      	bne.n	8000b76 <ExtLights_MainFunction+0x136>
	{
		CurrentState_ReverseLight = BTReverseLight;
 8000b6e:	4b48      	ldr	r3, [pc, #288]	; (8000c90 <ExtLights_MainFunction+0x250>)
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	4b48      	ldr	r3, [pc, #288]	; (8000c94 <ExtLights_MainFunction+0x254>)
 8000b74:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTTurnSignalLeft == STD_HIGH)
 8000b76:	4b48      	ldr	r3, [pc, #288]	; (8000c98 <ExtLights_MainFunction+0x258>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d104      	bne.n	8000b88 <ExtLights_MainFunction+0x148>
	{
		CurrentState_TurnSignalLeft = BTTurnSignalLeft;
 8000b7e:	4b46      	ldr	r3, [pc, #280]	; (8000c98 <ExtLights_MainFunction+0x258>)
 8000b80:	781a      	ldrb	r2, [r3, #0]
 8000b82:	4b46      	ldr	r3, [pc, #280]	; (8000c9c <ExtLights_MainFunction+0x25c>)
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	e007      	b.n	8000b98 <ExtLights_MainFunction+0x158>
	}
	else if(BTTurnSignalLeft == STD_LOW)
 8000b88:	4b43      	ldr	r3, [pc, #268]	; (8000c98 <ExtLights_MainFunction+0x258>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d103      	bne.n	8000b98 <ExtLights_MainFunction+0x158>
	{
		CurrentState_TurnSignalLeft = BTTurnSignalLeft;
 8000b90:	4b41      	ldr	r3, [pc, #260]	; (8000c98 <ExtLights_MainFunction+0x258>)
 8000b92:	781a      	ldrb	r2, [r3, #0]
 8000b94:	4b41      	ldr	r3, [pc, #260]	; (8000c9c <ExtLights_MainFunction+0x25c>)
 8000b96:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTTurnSignalRight == STD_HIGH)
 8000b98:	4b41      	ldr	r3, [pc, #260]	; (8000ca0 <ExtLights_MainFunction+0x260>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d104      	bne.n	8000baa <ExtLights_MainFunction+0x16a>
	{
		CurrentState_TurnSignalRight = BTTurnSignalRight;
 8000ba0:	4b3f      	ldr	r3, [pc, #252]	; (8000ca0 <ExtLights_MainFunction+0x260>)
 8000ba2:	781a      	ldrb	r2, [r3, #0]
 8000ba4:	4b3f      	ldr	r3, [pc, #252]	; (8000ca4 <ExtLights_MainFunction+0x264>)
 8000ba6:	701a      	strb	r2, [r3, #0]
 8000ba8:	e007      	b.n	8000bba <ExtLights_MainFunction+0x17a>
	}
	else if(BTTurnSignalRight == STD_LOW)
 8000baa:	4b3d      	ldr	r3, [pc, #244]	; (8000ca0 <ExtLights_MainFunction+0x260>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d103      	bne.n	8000bba <ExtLights_MainFunction+0x17a>
	{
		CurrentState_TurnSignalRight = BTTurnSignalRight;
 8000bb2:	4b3b      	ldr	r3, [pc, #236]	; (8000ca0 <ExtLights_MainFunction+0x260>)
 8000bb4:	781a      	ldrb	r2, [r3, #0]
 8000bb6:	4b3b      	ldr	r3, [pc, #236]	; (8000ca4 <ExtLights_MainFunction+0x264>)
 8000bb8:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTHazardLight == STD_HIGH)
 8000bba:	4b3b      	ldr	r3, [pc, #236]	; (8000ca8 <ExtLights_MainFunction+0x268>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d104      	bne.n	8000bcc <ExtLights_MainFunction+0x18c>
	{
		CurrentState_HazardLight = BTHazardLight;
 8000bc2:	4b39      	ldr	r3, [pc, #228]	; (8000ca8 <ExtLights_MainFunction+0x268>)
 8000bc4:	781a      	ldrb	r2, [r3, #0]
 8000bc6:	4b39      	ldr	r3, [pc, #228]	; (8000cac <ExtLights_MainFunction+0x26c>)
 8000bc8:	701a      	strb	r2, [r3, #0]
 8000bca:	e007      	b.n	8000bdc <ExtLights_MainFunction+0x19c>
	}
	else if(BTHazardLight == STD_LOW)
 8000bcc:	4b36      	ldr	r3, [pc, #216]	; (8000ca8 <ExtLights_MainFunction+0x268>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d103      	bne.n	8000bdc <ExtLights_MainFunction+0x19c>
	{
		CurrentState_HazardLight = BTHazardLight;
 8000bd4:	4b34      	ldr	r3, [pc, #208]	; (8000ca8 <ExtLights_MainFunction+0x268>)
 8000bd6:	781a      	ldrb	r2, [r3, #0]
 8000bd8:	4b34      	ldr	r3, [pc, #208]	; (8000cac <ExtLights_MainFunction+0x26c>)
 8000bda:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(CurrentState_TurnSignalLeft == STD_HIGH)
 8000bdc:	4b2f      	ldr	r3, [pc, #188]	; (8000c9c <ExtLights_MainFunction+0x25c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	f040 8080 	bne.w	8000ce6 <ExtLights_MainFunction+0x2a6>
	{
		HAL_TIM_Base_Start(&htim2);
 8000be6:	4832      	ldr	r0, [pc, #200]	; (8000cb0 <ExtLights_MainFunction+0x270>)
 8000be8:	f003 fb82 	bl	80042f0 <HAL_TIM_Base_Start>
		if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000bec:	4b30      	ldr	r3, [pc, #192]	; (8000cb0 <ExtLights_MainFunction+0x270>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d805      	bhi.n	8000c06 <ExtLights_MainFunction+0x1c6>
		{
			ExtLights_TurnSignalLeft(CurrentState_TurnSignalLeft);
 8000bfa:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <ExtLights_MainFunction+0x25c>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 fa58 	bl	80010b4 <ExtLights_TurnSignalLeft>
 8000c04:	e078      	b.n	8000cf8 <ExtLights_MainFunction+0x2b8>
		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2)  && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000c06:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <ExtLights_MainFunction+0x270>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d911      	bls.n	8000c38 <ExtLights_MainFunction+0x1f8>
 8000c14:	4b26      	ldr	r3, [pc, #152]	; (8000cb0 <ExtLights_MainFunction+0x270>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1a:	f241 3287 	movw	r2, #4999	; 0x1387
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d80a      	bhi.n	8000c38 <ExtLights_MainFunction+0x1f8>
		{
			ExtLights_TurnSignalLeft(!CurrentState_TurnSignalLeft);
 8000c22:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <ExtLights_MainFunction+0x25c>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	bf0c      	ite	eq
 8000c2a:	2301      	moveq	r3, #1
 8000c2c:	2300      	movne	r3, #0
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	4618      	mov	r0, r3
 8000c32:	f000 fa3f 	bl	80010b4 <ExtLights_TurnSignalLeft>
 8000c36:	e05f      	b.n	8000cf8 <ExtLights_MainFunction+0x2b8>
		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <ExtLights_MainFunction+0x270>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d936      	bls.n	8000cb4 <ExtLights_MainFunction+0x274>
 8000c46:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <ExtLights_MainFunction+0x270>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4c:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d82f      	bhi.n	8000cb4 <ExtLights_MainFunction+0x274>
		{
			ExtLights_TurnSignalLeft(CurrentState_TurnSignalLeft);
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <ExtLights_MainFunction+0x25c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 fa2b 	bl	80010b4 <ExtLights_TurnSignalLeft>
 8000c5e:	e04b      	b.n	8000cf8 <ExtLights_MainFunction+0x2b8>
 8000c60:	200000a0 	.word	0x200000a0
 8000c64:	20000096 	.word	0x20000096
 8000c68:	200000a1 	.word	0x200000a1
 8000c6c:	20000097 	.word	0x20000097
 8000c70:	200000a2 	.word	0x200000a2
 8000c74:	20000098 	.word	0x20000098
 8000c78:	200000a3 	.word	0x200000a3
 8000c7c:	20000099 	.word	0x20000099
 8000c80:	200000a4 	.word	0x200000a4
 8000c84:	2000009c 	.word	0x2000009c
 8000c88:	200000a5 	.word	0x200000a5
 8000c8c:	2000009d 	.word	0x2000009d
 8000c90:	200000a6 	.word	0x200000a6
 8000c94:	2000009e 	.word	0x2000009e
 8000c98:	200000a8 	.word	0x200000a8
 8000c9c:	2000009b 	.word	0x2000009b
 8000ca0:	200000a7 	.word	0x200000a7
 8000ca4:	2000009a 	.word	0x2000009a
 8000ca8:	200000a9 	.word	0x200000a9
 8000cac:	2000009f 	.word	0x2000009f
 8000cb0:	200002e4 	.word	0x200002e4
		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8000cb4:	4b97      	ldr	r3, [pc, #604]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cba:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d91a      	bls.n	8000cf8 <ExtLights_MainFunction+0x2b8>
 8000cc2:	4b94      	ldr	r3, [pc, #592]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d813      	bhi.n	8000cf8 <ExtLights_MainFunction+0x2b8>
		{
			ExtLights_TurnSignalLeft(!CurrentState_TurnSignalLeft);
 8000cd0:	4b91      	ldr	r3, [pc, #580]	; (8000f18 <ExtLights_MainFunction+0x4d8>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	bf0c      	ite	eq
 8000cd8:	2301      	moveq	r3, #1
 8000cda:	2300      	movne	r3, #0
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f9e8 	bl	80010b4 <ExtLights_TurnSignalLeft>
 8000ce4:	e008      	b.n	8000cf8 <ExtLights_MainFunction+0x2b8>
		else
		{
			/* do nothing */
		}
	}
	else if(CurrentState_TurnSignalLeft == STD_LOW)
 8000ce6:	4b8c      	ldr	r3, [pc, #560]	; (8000f18 <ExtLights_MainFunction+0x4d8>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d104      	bne.n	8000cf8 <ExtLights_MainFunction+0x2b8>
	{
		ExtLights_TurnSignalLeft(CurrentState_TurnSignalLeft);
 8000cee:	4b8a      	ldr	r3, [pc, #552]	; (8000f18 <ExtLights_MainFunction+0x4d8>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f9de 	bl	80010b4 <ExtLights_TurnSignalLeft>
	else
	{
		/* do nothing */
	}

	if(CurrentState_TurnSignalRight == STD_HIGH)
 8000cf8:	4b88      	ldr	r3, [pc, #544]	; (8000f1c <ExtLights_MainFunction+0x4dc>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d155      	bne.n	8000dac <ExtLights_MainFunction+0x36c>
	{
		HAL_TIM_Base_Start(&htim2);
 8000d00:	4884      	ldr	r0, [pc, #528]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000d02:	f003 faf5 	bl	80042f0 <HAL_TIM_Base_Start>
		if(__HAL_TIM_GET_COUNTER(&htim2)< 2500)
 8000d06:	4b83      	ldr	r3, [pc, #524]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d805      	bhi.n	8000d20 <ExtLights_MainFunction+0x2e0>
		{
			ExtLights_TurnSignalRight(CurrentState_TurnSignalRight);
 8000d14:	4b81      	ldr	r3, [pc, #516]	; (8000f1c <ExtLights_MainFunction+0x4dc>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 f9dd 	bl	80010d8 <ExtLights_TurnSignalRight>
 8000d1e:	e04e      	b.n	8000dbe <ExtLights_MainFunction+0x37e>
		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000d20:	4b7c      	ldr	r3, [pc, #496]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d26:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d911      	bls.n	8000d52 <ExtLights_MainFunction+0x312>
 8000d2e:	4b79      	ldr	r3, [pc, #484]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d34:	f241 3287 	movw	r2, #4999	; 0x1387
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d80a      	bhi.n	8000d52 <ExtLights_MainFunction+0x312>
		{
			ExtLights_TurnSignalRight(!CurrentState_TurnSignalRight);
 8000d3c:	4b77      	ldr	r3, [pc, #476]	; (8000f1c <ExtLights_MainFunction+0x4dc>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	bf0c      	ite	eq
 8000d44:	2301      	moveq	r3, #1
 8000d46:	2300      	movne	r3, #0
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f9c4 	bl	80010d8 <ExtLights_TurnSignalRight>
 8000d50:	e035      	b.n	8000dbe <ExtLights_MainFunction+0x37e>
		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 8000d52:	4b70      	ldr	r3, [pc, #448]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d90c      	bls.n	8000d7a <ExtLights_MainFunction+0x33a>
 8000d60:	4b6c      	ldr	r3, [pc, #432]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d66:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d805      	bhi.n	8000d7a <ExtLights_MainFunction+0x33a>
		{
			ExtLights_TurnSignalRight(CurrentState_TurnSignalRight);
 8000d6e:	4b6b      	ldr	r3, [pc, #428]	; (8000f1c <ExtLights_MainFunction+0x4dc>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f9b0 	bl	80010d8 <ExtLights_TurnSignalRight>
 8000d78:	e021      	b.n	8000dbe <ExtLights_MainFunction+0x37e>
		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8000d7a:	4b66      	ldr	r3, [pc, #408]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d80:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d91a      	bls.n	8000dbe <ExtLights_MainFunction+0x37e>
 8000d88:	4b62      	ldr	r3, [pc, #392]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d813      	bhi.n	8000dbe <ExtLights_MainFunction+0x37e>
		{
			ExtLights_TurnSignalRight(!CurrentState_TurnSignalRight);
 8000d96:	4b61      	ldr	r3, [pc, #388]	; (8000f1c <ExtLights_MainFunction+0x4dc>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	bf0c      	ite	eq
 8000d9e:	2301      	moveq	r3, #1
 8000da0:	2300      	movne	r3, #0
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 f997 	bl	80010d8 <ExtLights_TurnSignalRight>
 8000daa:	e008      	b.n	8000dbe <ExtLights_MainFunction+0x37e>
		else
		{
			/* do nothing */
		}
	}
	else if(CurrentState_TurnSignalRight == STD_LOW)
 8000dac:	4b5b      	ldr	r3, [pc, #364]	; (8000f1c <ExtLights_MainFunction+0x4dc>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d104      	bne.n	8000dbe <ExtLights_MainFunction+0x37e>
	{
		ExtLights_TurnSignalRight(CurrentState_TurnSignalRight);
 8000db4:	4b59      	ldr	r3, [pc, #356]	; (8000f1c <ExtLights_MainFunction+0x4dc>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 f98d 	bl	80010d8 <ExtLights_TurnSignalRight>
	else
	{
		/* do nothing */
	}

	if(CurrentState_HazardLight == STD_HIGH)
 8000dbe:	4b58      	ldr	r3, [pc, #352]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d173      	bne.n	8000eae <ExtLights_MainFunction+0x46e>
	{
		HAL_TIM_Base_Start(&htim2);
 8000dc6:	4853      	ldr	r0, [pc, #332]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000dc8:	f003 fa92 	bl	80042f0 <HAL_TIM_Base_Start>
		if(__HAL_TIM_GET_COUNTER(&htim2)< 2500)
 8000dcc:	4b51      	ldr	r3, [pc, #324]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d80a      	bhi.n	8000df0 <ExtLights_MainFunction+0x3b0>
		{
			ExtLights_TurnSignalRight(CurrentState_HazardLight);
 8000dda:	4b51      	ldr	r3, [pc, #324]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f97a 	bl	80010d8 <ExtLights_TurnSignalRight>
			ExtLights_TurnSignalLeft(CurrentState_HazardLight);
 8000de4:	4b4e      	ldr	r3, [pc, #312]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 f963 	bl	80010b4 <ExtLights_TurnSignalLeft>
 8000dee:	e06c      	b.n	8000eca <ExtLights_MainFunction+0x48a>
		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000df0:	4b48      	ldr	r3, [pc, #288]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d91b      	bls.n	8000e36 <ExtLights_MainFunction+0x3f6>
 8000dfe:	4b45      	ldr	r3, [pc, #276]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e04:	f241 3287 	movw	r2, #4999	; 0x1387
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d814      	bhi.n	8000e36 <ExtLights_MainFunction+0x3f6>
		{
			ExtLights_TurnSignalRight(!CurrentState_HazardLight);
 8000e0c:	4b44      	ldr	r3, [pc, #272]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	bf0c      	ite	eq
 8000e14:	2301      	moveq	r3, #1
 8000e16:	2300      	movne	r3, #0
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f95c 	bl	80010d8 <ExtLights_TurnSignalRight>
			ExtLights_TurnSignalLeft(!CurrentState_HazardLight);
 8000e20:	4b3f      	ldr	r3, [pc, #252]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	bf0c      	ite	eq
 8000e28:	2301      	moveq	r3, #1
 8000e2a:	2300      	movne	r3, #0
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f940 	bl	80010b4 <ExtLights_TurnSignalLeft>
 8000e34:	e049      	b.n	8000eca <ExtLights_MainFunction+0x48a>
		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2)&& __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 8000e36:	4b37      	ldr	r3, [pc, #220]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d911      	bls.n	8000e68 <ExtLights_MainFunction+0x428>
 8000e44:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4a:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d80a      	bhi.n	8000e68 <ExtLights_MainFunction+0x428>
		{
			ExtLights_TurnSignalRight(CurrentState_HazardLight);
 8000e52:	4b33      	ldr	r3, [pc, #204]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f93e 	bl	80010d8 <ExtLights_TurnSignalRight>
			ExtLights_TurnSignalLeft(CurrentState_HazardLight);
 8000e5c:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 f927 	bl	80010b4 <ExtLights_TurnSignalLeft>
 8000e66:	e030      	b.n	8000eca <ExtLights_MainFunction+0x48a>
		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8000e68:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6e:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d929      	bls.n	8000eca <ExtLights_MainFunction+0x48a>
 8000e76:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d822      	bhi.n	8000eca <ExtLights_MainFunction+0x48a>
		{
			ExtLights_TurnSignalRight(!CurrentState_HazardLight);
 8000e84:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	bf0c      	ite	eq
 8000e8c:	2301      	moveq	r3, #1
 8000e8e:	2300      	movne	r3, #0
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f920 	bl	80010d8 <ExtLights_TurnSignalRight>
			ExtLights_TurnSignalLeft(!CurrentState_HazardLight);
 8000e98:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	bf0c      	ite	eq
 8000ea0:	2301      	moveq	r3, #1
 8000ea2:	2300      	movne	r3, #0
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f904 	bl	80010b4 <ExtLights_TurnSignalLeft>
 8000eac:	e00d      	b.n	8000eca <ExtLights_MainFunction+0x48a>
		else
		{
			/* do nothing */
		}
	}
	else if(CurrentState_HazardLight == STD_LOW)
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d109      	bne.n	8000eca <ExtLights_MainFunction+0x48a>
	{
		ExtLights_TurnSignalRight(CurrentState_HazardLight);
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f90c 	bl	80010d8 <ExtLights_TurnSignalRight>
		ExtLights_TurnSignalLeft(CurrentState_HazardLight);
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 f8f5 	bl	80010b4 <ExtLights_TurnSignalLeft>
	else
	{
		/* do nothing */
	}

	ExtLights_LowBeam(CurrentState_LowBeam);
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <ExtLights_MainFunction+0x4e4>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f8a8 	bl	8001024 <ExtLights_LowBeam>
	ExtLights_HighBeam(CurrentState_HighBeam);
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <ExtLights_MainFunction+0x4e8>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 f8b5 	bl	8001048 <ExtLights_HighBeam>
	ExtLights_FogLightFront(CurrentState_FogLightFront);
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <ExtLights_MainFunction+0x4ec>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f8c2 	bl	800106c <ExtLights_FogLightFront>
	ExtLights_FogLightRear(CurrentState_FogLightRear);
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <ExtLights_MainFunction+0x4f0>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 f8cf 	bl	8001090 <ExtLights_FogLightRear>
	ExtLights_PositionLightRear(CurrentState_PositionLightRear);
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <ExtLights_MainFunction+0x4f4>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f900 	bl	80010fc <ExtLights_PositionLightRear>
	ExtLights_BrakeLight(CurrentState_BrakeLight);
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <ExtLights_MainFunction+0x4f8>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 f90d 	bl	8001120 <ExtLights_BrakeLight>
	ExtLights_ReverseLight(CurrentState_ReverseLight);
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <ExtLights_MainFunction+0x4fc>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f91a 	bl	8001144 <ExtLights_ReverseLight>
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200002e4 	.word	0x200002e4
 8000f18:	2000009b 	.word	0x2000009b
 8000f1c:	2000009a 	.word	0x2000009a
 8000f20:	2000009f 	.word	0x2000009f
 8000f24:	20000096 	.word	0x20000096
 8000f28:	20000097 	.word	0x20000097
 8000f2c:	20000098 	.word	0x20000098
 8000f30:	20000099 	.word	0x20000099
 8000f34:	2000009c 	.word	0x2000009c
 8000f38:	2000009d 	.word	0x2000009d
 8000f3c:	2000009e 	.word	0x2000009e

08000f40 <ExtLights_Init>:

StdReturnType ExtLights_Init()
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
	CurrentState_LowBeam = STD_LOW;
 8000f44:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <ExtLights_Init+0x90>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
	CurrentState_HighBeam = STD_LOW;
 8000f4a:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <ExtLights_Init+0x94>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
	CurrentState_FogLightFront = STD_LOW;
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <ExtLights_Init+0x98>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
	CurrentState_FogLightRear = STD_LOW;
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <ExtLights_Init+0x9c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
	CurrentState_TurnSignalLeft = STD_LOW;
 8000f5c:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <ExtLights_Init+0xa0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
	CurrentState_TurnSignalRight = STD_LOW;
 8000f62:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <ExtLights_Init+0xa4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
	CurrentState_PositionLightRear = STD_LOW;
 8000f68:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <ExtLights_Init+0xa8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
	CurrentState_BrakeLight = STD_LOW;
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <ExtLights_Init+0xac>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
	CurrentState_ReverseLight = STD_LOW;
 8000f74:	4b1e      	ldr	r3, [pc, #120]	; (8000ff0 <ExtLights_Init+0xb0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
	CurrentState_HazardLight = STD_LOW;
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <ExtLights_Init+0xb4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
	BTLowBeam = STD_LOW;
 8000f80:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <ExtLights_Init+0xb8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
	BTHighBeam = STD_LOW;
 8000f86:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <ExtLights_Init+0xbc>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
	BTFogLightFront = STD_LOW;
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <ExtLights_Init+0xc0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
	BTFogLightRear = STD_LOW;
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <ExtLights_Init+0xc4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
	BTPositionLightRear = STD_LOW;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <ExtLights_Init+0xc8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
	BTBrakeLight = STD_LOW;
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <ExtLights_Init+0xcc>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
	BTReverseLight = STD_LOW;
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <ExtLights_Init+0xd0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
	BTTurnSignalRight = STD_LOW;
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <ExtLights_Init+0xd4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
	BTTurnSignalLeft = STD_LOW;
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <ExtLights_Init+0xd8>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
	BTHazardLight = STD_LOW;
 8000fb6:	4b19      	ldr	r3, [pc, #100]	; (800101c <ExtLights_Init+0xdc>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
	BTExtLight_IrqFlag = STD_LOW;
 8000fbc:	4b18      	ldr	r3, [pc, #96]	; (8001020 <ExtLights_Init+0xe0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]

	return E_OK;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000096 	.word	0x20000096
 8000fd4:	20000097 	.word	0x20000097
 8000fd8:	20000098 	.word	0x20000098
 8000fdc:	20000099 	.word	0x20000099
 8000fe0:	2000009b 	.word	0x2000009b
 8000fe4:	2000009a 	.word	0x2000009a
 8000fe8:	2000009c 	.word	0x2000009c
 8000fec:	2000009d 	.word	0x2000009d
 8000ff0:	2000009e 	.word	0x2000009e
 8000ff4:	2000009f 	.word	0x2000009f
 8000ff8:	200000a0 	.word	0x200000a0
 8000ffc:	200000a1 	.word	0x200000a1
 8001000:	200000a2 	.word	0x200000a2
 8001004:	200000a3 	.word	0x200000a3
 8001008:	200000a4 	.word	0x200000a4
 800100c:	200000a5 	.word	0x200000a5
 8001010:	200000a6 	.word	0x200000a6
 8001014:	200000a7 	.word	0x200000a7
 8001018:	200000a8 	.word	0x200000a8
 800101c:	200000a9 	.word	0x200000a9
 8001020:	200000aa 	.word	0x200000aa

08001024 <ExtLights_LowBeam>:


void ExtLights_LowBeam(uint8 PinState)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LOW_BEAM_PORT, LOW_BEAM_PIN, PinState);
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	461a      	mov	r2, r3
 8001032:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001036:	4803      	ldr	r0, [pc, #12]	; (8001044 <ExtLights_LowBeam+0x20>)
 8001038:	f002 f9dc 	bl	80033f4 <HAL_GPIO_WritePin>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40020000 	.word	0x40020000

08001048 <ExtLights_HighBeam>:

void ExtLights_HighBeam(uint8 PinState)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(HIGH_BEAM_PORT, HIGH_BEAM_PIN, PinState);
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	461a      	mov	r2, r3
 8001056:	2120      	movs	r1, #32
 8001058:	4803      	ldr	r0, [pc, #12]	; (8001068 <ExtLights_HighBeam+0x20>)
 800105a:	f002 f9cb 	bl	80033f4 <HAL_GPIO_WritePin>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40020400 	.word	0x40020400

0800106c <ExtLights_FogLightFront>:

void ExtLights_FogLightFront(uint8 PinState)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(FRONT_FOG_LIGHT_PORT, FRONT_FOG_LIGHT_PIN, PinState);
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	461a      	mov	r2, r3
 800107a:	2110      	movs	r1, #16
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <ExtLights_FogLightFront+0x20>)
 800107e:	f002 f9b9 	bl	80033f4 <HAL_GPIO_WritePin>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40020400 	.word	0x40020400

08001090 <ExtLights_FogLightRear>:

void ExtLights_FogLightRear(uint8 PinState)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(REAR_FOG_LIGHT_PORT, REAR_FOG_LIGHT_PIN, PinState);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	461a      	mov	r2, r3
 800109e:	2140      	movs	r1, #64	; 0x40
 80010a0:	4803      	ldr	r0, [pc, #12]	; (80010b0 <ExtLights_FogLightRear+0x20>)
 80010a2:	f002 f9a7 	bl	80033f4 <HAL_GPIO_WritePin>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40020000 	.word	0x40020000

080010b4 <ExtLights_TurnSignalLeft>:

void ExtLights_TurnSignalLeft(uint8 PinState)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LEFT_TURN_SIGNAL_PORT, LEFT_TURN_SIGNAL_PIN, PinState);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	461a      	mov	r2, r3
 80010c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c6:	4803      	ldr	r0, [pc, #12]	; (80010d4 <ExtLights_TurnSignalLeft+0x20>)
 80010c8:	f002 f994 	bl	80033f4 <HAL_GPIO_WritePin>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40020000 	.word	0x40020000

080010d8 <ExtLights_TurnSignalRight>:

void ExtLights_TurnSignalRight(uint8 PinState)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RIGHT_TURN_SIGNAL_PORT, RIGHT_TURN_SIGNAL_PIN, PinState);
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	461a      	mov	r2, r3
 80010e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <ExtLights_TurnSignalRight+0x20>)
 80010ec:	f002 f982 	bl	80033f4 <HAL_GPIO_WritePin>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40020000 	.word	0x40020000

080010fc <ExtLights_PositionLightRear>:

void ExtLights_PositionLightRear(uint8 PinState)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(REAR_POSITION_LIGHT_PORT, REAR_POSITION_LIGHT_PIN, PinState);
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	461a      	mov	r2, r3
 800110a:	2120      	movs	r1, #32
 800110c:	4803      	ldr	r0, [pc, #12]	; (800111c <ExtLights_PositionLightRear+0x20>)
 800110e:	f002 f971 	bl	80033f4 <HAL_GPIO_WritePin>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40020000 	.word	0x40020000

08001120 <ExtLights_BrakeLight>:

void ExtLights_BrakeLight(uint8 PinState)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(BRAKE_LIGHT_PORT, BRAKE_LIGHT_PIN, PinState);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	461a      	mov	r2, r3
 800112e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001132:	4803      	ldr	r0, [pc, #12]	; (8001140 <ExtLights_BrakeLight+0x20>)
 8001134:	f002 f95e 	bl	80033f4 <HAL_GPIO_WritePin>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40020400 	.word	0x40020400

08001144 <ExtLights_ReverseLight>:

void ExtLights_ReverseLight(uint8 PinState)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(REVERSE_LIGHT_PORT, REVERSE_LIGHT_PIN, PinState);
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	461a      	mov	r2, r3
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	4803      	ldr	r0, [pc, #12]	; (8001164 <ExtLights_ReverseLight+0x20>)
 8001156:	f002 f94d 	bl	80033f4 <HAL_GPIO_WritePin>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40020800 	.word	0x40020800

08001168 <IntLights_MainFunction>:

uint8 CurrentState_IntLights;
uint8 BTIntLights;

void IntLights_MainFunction()
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	if(BTIntLights == STD_HIGH)
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <IntLights_MainFunction+0x30>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d103      	bne.n	800117c <IntLights_MainFunction+0x14>
	{
		CurrentState_IntLights = STD_HIGH;
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <IntLights_MainFunction+0x34>)
 8001176:	2201      	movs	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]
 800117a:	e006      	b.n	800118a <IntLights_MainFunction+0x22>
	}
	else if(BTIntLights == STD_LOW)
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <IntLights_MainFunction+0x30>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d102      	bne.n	800118a <IntLights_MainFunction+0x22>
	{
		CurrentState_IntLights = STD_LOW;
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <IntLights_MainFunction+0x34>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	IntLights_Toggle_IntLights(CurrentState_IntLights);
 800118a:	4b04      	ldr	r3, [pc, #16]	; (800119c <IntLights_MainFunction+0x34>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f818 	bl	80011c4 <IntLights_Toggle_IntLights>
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	200000ac 	.word	0x200000ac
 800119c:	200000ab 	.word	0x200000ab

080011a0 <IntLights_Init>:

StdReturnType IntLights_Init()
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
	CurrentState_IntLights = STD_LOW;
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <IntLights_Init+0x1c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
	BTIntLights = STD_LOW;
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <IntLights_Init+0x20>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]

	return E_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	200000ab 	.word	0x200000ab
 80011c0:	200000ac 	.word	0x200000ac

080011c4 <IntLights_Toggle_IntLights>:

void IntLights_Toggle_IntLights(uint8 PinState)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(INTERIOR_LIGHT_PORT, INTERIOR_LIGHT_PIN, PinState);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	461a      	mov	r2, r3
 80011d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d6:	4803      	ldr	r0, [pc, #12]	; (80011e4 <IntLights_Toggle_IntLights+0x20>)
 80011d8:	f002 f90c 	bl	80033f4 <HAL_GPIO_WritePin>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40020400 	.word	0x40020400

080011e8 <SecAlm_MainFunction>:
uint8 SecAlmTrigger;
uint8 SecAlmCounter;
uint8 PreviousState_SecAlm;

void SecAlm_MainFunction()
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	if(PreviousState_SecAlm != SecAlmTrigger)
 80011ec:	4b61      	ldr	r3, [pc, #388]	; (8001374 <SecAlm_MainFunction+0x18c>)
 80011ee:	781a      	ldrb	r2, [r3, #0]
 80011f0:	4b61      	ldr	r3, [pc, #388]	; (8001378 <SecAlm_MainFunction+0x190>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d006      	beq.n	8001206 <SecAlm_MainFunction+0x1e>
	{
		HAL_TIM_Base_Init(&htim5);
 80011f8:	4860      	ldr	r0, [pc, #384]	; (800137c <SecAlm_MainFunction+0x194>)
 80011fa:	f003 f81d 	bl	8004238 <HAL_TIM_Base_Init>
		PreviousState_SecAlm = SecAlmTrigger;
 80011fe:	4b5e      	ldr	r3, [pc, #376]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001200:	781a      	ldrb	r2, [r3, #0]
 8001202:	4b5c      	ldr	r3, [pc, #368]	; (8001374 <SecAlm_MainFunction+0x18c>)
 8001204:	701a      	strb	r2, [r3, #0]
	}

	if(SecAlmTrigger == STD_HIGH)
 8001206:	4b5c      	ldr	r3, [pc, #368]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b01      	cmp	r3, #1
 800120c:	f040 808a 	bne.w	8001324 <SecAlm_MainFunction+0x13c>
	{
		HAL_TIM_Base_Start(&htim5);
 8001210:	485a      	ldr	r0, [pc, #360]	; (800137c <SecAlm_MainFunction+0x194>)
 8001212:	f003 f86d 	bl	80042f0 <HAL_TIM_Base_Start>
		if(__HAL_TIM_GET_COUNTER(&htim5) < 100000)
 8001216:	4b59      	ldr	r3, [pc, #356]	; (800137c <SecAlm_MainFunction+0x194>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	4a58      	ldr	r2, [pc, #352]	; (8001380 <SecAlm_MainFunction+0x198>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d873      	bhi.n	800130a <SecAlm_MainFunction+0x122>
		{
			HAL_TIM_Base_Start(&htim4);
 8001222:	4858      	ldr	r0, [pc, #352]	; (8001384 <SecAlm_MainFunction+0x19c>)
 8001224:	f003 f864 	bl	80042f0 <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim4) < 5000)
 8001228:	4b56      	ldr	r3, [pc, #344]	; (8001384 <SecAlm_MainFunction+0x19c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001232:	4293      	cmp	r3, r2
 8001234:	d81e      	bhi.n	8001274 <SecAlm_MainFunction+0x8c>
			{
				ExtLights_LowBeam(SecAlmTrigger);
 8001236:	4b50      	ldr	r3, [pc, #320]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fef2 	bl	8001024 <ExtLights_LowBeam>
				ExtLights_PositionLightRear(SecAlmTrigger);
 8001240:	4b4d      	ldr	r3, [pc, #308]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff59 	bl	80010fc <ExtLights_PositionLightRear>
				ExtLights_FogLightFront(SecAlmTrigger);
 800124a:	4b4b      	ldr	r3, [pc, #300]	; (8001378 <SecAlm_MainFunction+0x190>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff0c 	bl	800106c <ExtLights_FogLightFront>
				ExtLights_FogLightRear(SecAlmTrigger);
 8001254:	4b48      	ldr	r3, [pc, #288]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff19 	bl	8001090 <ExtLights_FogLightRear>
				ExtLights_TurnSignalRight(SecAlmTrigger);
 800125e:	4b46      	ldr	r3, [pc, #280]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff38 	bl	80010d8 <ExtLights_TurnSignalRight>
				ExtLights_TurnSignalLeft(SecAlmTrigger);
 8001268:	4b43      	ldr	r3, [pc, #268]	; (8001378 <SecAlm_MainFunction+0x190>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff21 	bl	80010b4 <ExtLights_TurnSignalLeft>
	}
	else
	{
		/* do nothing */
	}
}
 8001272:	e07c      	b.n	800136e <SecAlm_MainFunction+0x186>
			else if(5000 < __HAL_TIM_GET_COUNTER(&htim4) && __HAL_TIM_GET_COUNTER(&htim4) < 10000)
 8001274:	4b43      	ldr	r3, [pc, #268]	; (8001384 <SecAlm_MainFunction+0x19c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	f241 3288 	movw	r2, #5000	; 0x1388
 800127e:	4293      	cmp	r3, r2
 8001280:	d975      	bls.n	800136e <SecAlm_MainFunction+0x186>
 8001282:	4b40      	ldr	r3, [pc, #256]	; (8001384 <SecAlm_MainFunction+0x19c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	f242 720f 	movw	r2, #9999	; 0x270f
 800128c:	4293      	cmp	r3, r2
 800128e:	d86e      	bhi.n	800136e <SecAlm_MainFunction+0x186>
				ExtLights_LowBeam(!SecAlmTrigger);
 8001290:	4b39      	ldr	r3, [pc, #228]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	bf0c      	ite	eq
 8001298:	2301      	moveq	r3, #1
 800129a:	2300      	movne	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fec0 	bl	8001024 <ExtLights_LowBeam>
				ExtLights_PositionLightRear(!SecAlmTrigger);
 80012a4:	4b34      	ldr	r3, [pc, #208]	; (8001378 <SecAlm_MainFunction+0x190>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bf0c      	ite	eq
 80012ac:	2301      	moveq	r3, #1
 80012ae:	2300      	movne	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ff22 	bl	80010fc <ExtLights_PositionLightRear>
				ExtLights_FogLightFront(!SecAlmTrigger);
 80012b8:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <SecAlm_MainFunction+0x190>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	bf0c      	ite	eq
 80012c0:	2301      	moveq	r3, #1
 80012c2:	2300      	movne	r3, #0
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fed0 	bl	800106c <ExtLights_FogLightFront>
				ExtLights_FogLightRear(!SecAlmTrigger);
 80012cc:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <SecAlm_MainFunction+0x190>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	bf0c      	ite	eq
 80012d4:	2301      	moveq	r3, #1
 80012d6:	2300      	movne	r3, #0
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fed8 	bl	8001090 <ExtLights_FogLightRear>
				ExtLights_TurnSignalRight(!SecAlmTrigger);
 80012e0:	4b25      	ldr	r3, [pc, #148]	; (8001378 <SecAlm_MainFunction+0x190>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	bf0c      	ite	eq
 80012e8:	2301      	moveq	r3, #1
 80012ea:	2300      	movne	r3, #0
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fef2 	bl	80010d8 <ExtLights_TurnSignalRight>
				ExtLights_TurnSignalLeft(!SecAlmTrigger);
 80012f4:	4b20      	ldr	r3, [pc, #128]	; (8001378 <SecAlm_MainFunction+0x190>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bf0c      	ite	eq
 80012fc:	2301      	moveq	r3, #1
 80012fe:	2300      	movne	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fed6 	bl	80010b4 <ExtLights_TurnSignalLeft>
}
 8001308:	e031      	b.n	800136e <SecAlm_MainFunction+0x186>
		else if(__HAL_TIM_GET_COUNTER(&htim5) > 100000)
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <SecAlm_MainFunction+0x194>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	4a1d      	ldr	r2, [pc, #116]	; (8001388 <SecAlm_MainFunction+0x1a0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d92b      	bls.n	800136e <SecAlm_MainFunction+0x186>
			SecAlmTrigger = STD_LOW;
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim5);
 800131c:	4817      	ldr	r0, [pc, #92]	; (800137c <SecAlm_MainFunction+0x194>)
 800131e:	f003 f841 	bl	80043a4 <HAL_TIM_Base_Stop>
}
 8001322:	e024      	b.n	800136e <SecAlm_MainFunction+0x186>
	else if(SecAlmTrigger == STD_LOW)
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d120      	bne.n	800136e <SecAlm_MainFunction+0x186>
		HAL_TIM_Base_Stop(&htim4);
 800132c:	4815      	ldr	r0, [pc, #84]	; (8001384 <SecAlm_MainFunction+0x19c>)
 800132e:	f003 f839 	bl	80043a4 <HAL_TIM_Base_Stop>
		ExtLights_LowBeam(SecAlmTrigger);
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fe74 	bl	8001024 <ExtLights_LowBeam>
		ExtLights_PositionLightRear(SecAlmTrigger);
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <SecAlm_MainFunction+0x190>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fedb 	bl	80010fc <ExtLights_PositionLightRear>
		ExtLights_FogLightFront(SecAlmTrigger);
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fe8e 	bl	800106c <ExtLights_FogLightFront>
		ExtLights_FogLightRear(SecAlmTrigger);
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fe9b 	bl	8001090 <ExtLights_FogLightRear>
		ExtLights_TurnSignalRight(SecAlmTrigger);
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <SecAlm_MainFunction+0x190>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff feba 	bl	80010d8 <ExtLights_TurnSignalRight>
		ExtLights_TurnSignalLeft(SecAlmTrigger);
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fea3 	bl	80010b4 <ExtLights_TurnSignalLeft>
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200000b2 	.word	0x200000b2
 8001378:	200000b0 	.word	0x200000b0
 800137c:	20000500 	.word	0x20000500
 8001380:	0001869f 	.word	0x0001869f
 8001384:	2000044c 	.word	0x2000044c
 8001388:	000186a0 	.word	0x000186a0

0800138c <SecAlm_Init>:

StdReturnType SecAlm_Init()
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
	CurrentState_Alarm_LED = STD_LOW;
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <SecAlm_Init+0x34>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
	LockCounter = STD_LOW;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <SecAlm_Init+0x38>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
	UnlockCounter = STD_LOW;
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <SecAlm_Init+0x3c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
	SecAlmTrigger = STD_LOW;
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <SecAlm_Init+0x40>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
	SecAlmCounter = STD_LOW;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <SecAlm_Init+0x44>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
	PreviousState_SecAlm = STD_LOW;
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <SecAlm_Init+0x48>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]

	return E_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	200000ad 	.word	0x200000ad
 80013c4:	200000ae 	.word	0x200000ae
 80013c8:	200000af 	.word	0x200000af
 80013cc:	200000b0 	.word	0x200000b0
 80013d0:	200000b1 	.word	0x200000b1
 80013d4:	200000b2 	.word	0x200000b2

080013d8 <SecAlm_ToggleAlarmLed>:
{
	HAL_GPIO_WritePin(ALARM_BUZZER_PORT, ALARM_BUZZER_PIN, PinState);
}

void SecAlm_ToggleAlarmLed(uint8 PinState)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ALARM_LED_PORT, ALARM_LED_PIN, PinState);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	461a      	mov	r2, r3
 80013e6:	2180      	movs	r1, #128	; 0x80
 80013e8:	4803      	ldr	r0, [pc, #12]	; (80013f8 <SecAlm_ToggleAlarmLed+0x20>)
 80013ea:	f002 f803 	bl	80033f4 <HAL_GPIO_WritePin>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40020000 	.word	0x40020000

080013fc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001402:	463b      	mov	r3, r7
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <MX_ADC1_Init+0x98>)
 8001410:	4a21      	ldr	r2, [pc, #132]	; (8001498 <MX_ADC1_Init+0x9c>)
 8001412:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001414:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <MX_ADC1_Init+0x98>)
 8001416:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800141a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <MX_ADC1_Init+0x98>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <MX_ADC1_Init+0x98>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001428:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_ADC1_Init+0x98>)
 800142a:	2200      	movs	r2, #0
 800142c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <MX_ADC1_Init+0x98>)
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_ADC1_Init+0x98>)
 8001438:	2200      	movs	r2, #0
 800143a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MX_ADC1_Init+0x98>)
 800143e:	4a17      	ldr	r2, [pc, #92]	; (800149c <MX_ADC1_Init+0xa0>)
 8001440:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_ADC1_Init+0x98>)
 8001444:	2200      	movs	r2, #0
 8001446:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_ADC1_Init+0x98>)
 800144a:	2201      	movs	r2, #1
 800144c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_ADC1_Init+0x98>)
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001456:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_ADC1_Init+0x98>)
 8001458:	2201      	movs	r2, #1
 800145a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <MX_ADC1_Init+0x98>)
 800145e:	f001 f847 	bl	80024f0 <HAL_ADC_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001468:	f000 fa90 	bl	800198c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800146c:	2301      	movs	r3, #1
 800146e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001470:	2301      	movs	r3, #1
 8001472:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001478:	463b      	mov	r3, r7
 800147a:	4619      	mov	r1, r3
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_ADC1_Init+0x98>)
 800147e:	f001 f8c5 	bl	800260c <HAL_ADC_ConfigChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001488:	f000 fa80 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200000b4 	.word	0x200000b4
 8001498:	40012000 	.word	0x40012000
 800149c:	0f000001 	.word	0x0f000001

080014a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	; 0x30
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a31      	ldr	r2, [pc, #196]	; (8001584 <HAL_ADC_MspInit+0xe4>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d15b      	bne.n	800157a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
 80014c6:	4b30      	ldr	r3, [pc, #192]	; (8001588 <HAL_ADC_MspInit+0xe8>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	4a2f      	ldr	r2, [pc, #188]	; (8001588 <HAL_ADC_MspInit+0xe8>)
 80014cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d0:	6453      	str	r3, [r2, #68]	; 0x44
 80014d2:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <HAL_ADC_MspInit+0xe8>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014da:	61bb      	str	r3, [r7, #24]
 80014dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	4b29      	ldr	r3, [pc, #164]	; (8001588 <HAL_ADC_MspInit+0xe8>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a28      	ldr	r2, [pc, #160]	; (8001588 <HAL_ADC_MspInit+0xe8>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b26      	ldr	r3, [pc, #152]	; (8001588 <HAL_ADC_MspInit+0xe8>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	4b22      	ldr	r3, [pc, #136]	; (8001588 <HAL_ADC_MspInit+0xe8>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a21      	ldr	r2, [pc, #132]	; (8001588 <HAL_ADC_MspInit+0xe8>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <HAL_ADC_MspInit+0xe8>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <HAL_ADC_MspInit+0xe8>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a1a      	ldr	r2, [pc, #104]	; (8001588 <HAL_ADC_MspInit+0xe8>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_ADC_MspInit+0xe8>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001532:	2307      	movs	r3, #7
 8001534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001536:	2303      	movs	r3, #3
 8001538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153e:	f107 031c 	add.w	r3, r7, #28
 8001542:	4619      	mov	r1, r3
 8001544:	4811      	ldr	r0, [pc, #68]	; (800158c <HAL_ADC_MspInit+0xec>)
 8001546:	f001 fdd1 	bl	80030ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800154a:	230e      	movs	r3, #14
 800154c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800154e:	2303      	movs	r3, #3
 8001550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 031c 	add.w	r3, r7, #28
 800155a:	4619      	mov	r1, r3
 800155c:	480c      	ldr	r0, [pc, #48]	; (8001590 <HAL_ADC_MspInit+0xf0>)
 800155e:	f001 fdc5 	bl	80030ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001562:	2302      	movs	r3, #2
 8001564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001566:	2303      	movs	r3, #3
 8001568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4619      	mov	r1, r3
 8001574:	4807      	ldr	r0, [pc, #28]	; (8001594 <HAL_ADC_MspInit+0xf4>)
 8001576:	f001 fdb9 	bl	80030ec <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800157a:	bf00      	nop
 800157c:	3730      	adds	r7, #48	; 0x30
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40012000 	.word	0x40012000
 8001588:	40023800 	.word	0x40023800
 800158c:	40020800 	.word	0x40020800
 8001590:	40020000 	.word	0x40020000
 8001594:	40020400 	.word	0x40020400

08001598 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_CRC_Init+0x20>)
 800159e:	4a07      	ldr	r2, [pc, #28]	; (80015bc <MX_CRC_Init+0x24>)
 80015a0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_CRC_Init+0x20>)
 80015a4:	f001 fb4c 	bl	8002c40 <HAL_CRC_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80015ae:	f000 f9ed 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000118 	.word	0x20000118
 80015bc:	40023000 	.word	0x40023000

080015c0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0b      	ldr	r2, [pc, #44]	; (80015fc <HAL_CRC_MspInit+0x3c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d10d      	bne.n	80015ee <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_CRC_MspInit+0x40>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a09      	ldr	r2, [pc, #36]	; (8001600 <HAL_CRC_MspInit+0x40>)
 80015dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <HAL_CRC_MspInit+0x40>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40023000 	.word	0x40023000
 8001600:	40023800 	.word	0x40023800

08001604 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001608:	4a04      	ldr	r2, [pc, #16]	; (800161c <MX_FREERTOS_Init+0x18>)
 800160a:	2100      	movs	r1, #0
 800160c:	4804      	ldr	r0, [pc, #16]	; (8001620 <MX_FREERTOS_Init+0x1c>)
 800160e:	f004 fc2f 	bl	8005e70 <osThreadNew>
 8001612:	4603      	mov	r3, r0
 8001614:	4a03      	ldr	r2, [pc, #12]	; (8001624 <MX_FREERTOS_Init+0x20>)
 8001616:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	08008b04 	.word	0x08008b04
 8001620:	08001629 	.word	0x08001629
 8001624:	20000120 	.word	0x20000120

08001628 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001630:	2001      	movs	r0, #1
 8001632:	f004 fcaf 	bl	8005f94 <osDelay>
 8001636:	e7fb      	b.n	8001630 <StartDefaultTask+0x8>

08001638 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	4b49      	ldr	r3, [pc, #292]	; (8001778 <MX_GPIO_Init+0x140>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a48      	ldr	r2, [pc, #288]	; (8001778 <MX_GPIO_Init+0x140>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b46      	ldr	r3, [pc, #280]	; (8001778 <MX_GPIO_Init+0x140>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b42      	ldr	r3, [pc, #264]	; (8001778 <MX_GPIO_Init+0x140>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a41      	ldr	r2, [pc, #260]	; (8001778 <MX_GPIO_Init+0x140>)
 8001674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b3f      	ldr	r3, [pc, #252]	; (8001778 <MX_GPIO_Init+0x140>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <MX_GPIO_Init+0x140>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a3a      	ldr	r2, [pc, #232]	; (8001778 <MX_GPIO_Init+0x140>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b38      	ldr	r3, [pc, #224]	; (8001778 <MX_GPIO_Init+0x140>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	4b34      	ldr	r3, [pc, #208]	; (8001778 <MX_GPIO_Init+0x140>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a33      	ldr	r2, [pc, #204]	; (8001778 <MX_GPIO_Init+0x140>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b31      	ldr	r3, [pc, #196]	; (8001778 <MX_GPIO_Init+0x140>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|GPIO_PIN_6|GPIO_PIN_7
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 80016c4:	482d      	ldr	r0, [pc, #180]	; (800177c <MX_GPIO_Init+0x144>)
 80016c6:	f001 fe95 	bl	80033f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5
 80016ca:	2200      	movs	r2, #0
 80016cc:	f240 7171 	movw	r1, #1905	; 0x771
 80016d0:	482b      	ldr	r0, [pc, #172]	; (8001780 <MX_GPIO_Init+0x148>)
 80016d2:	f001 fe8f 	bl	80033f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2180      	movs	r1, #128	; 0x80
 80016da:	482a      	ldr	r0, [pc, #168]	; (8001784 <MX_GPIO_Init+0x14c>)
 80016dc:	f001 fe8a 	bl	80033f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016e6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80016ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	4823      	ldr	r0, [pc, #140]	; (8001784 <MX_GPIO_Init+0x14c>)
 80016f8:	f001 fcf8 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001702:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4619      	mov	r1, r3
 8001712:	481c      	ldr	r0, [pc, #112]	; (8001784 <MX_GPIO_Init+0x14c>)
 8001714:	f001 fcea 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PAPin PA6 PA7
                           PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|GPIO_PIN_6|GPIO_PIN_7
 8001718:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 800171c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171e:	2301      	movs	r3, #1
 8001720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	4812      	ldr	r0, [pc, #72]	; (800177c <MX_GPIO_Init+0x144>)
 8001732:	f001 fcdb 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 PB5
                           PB6 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5
 8001736:	f240 7371 	movw	r3, #1905	; 0x771
 800173a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	4619      	mov	r1, r3
 800174e:	480c      	ldr	r0, [pc, #48]	; (8001780 <MX_GPIO_Init+0x148>)
 8001750:	f001 fccc 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001758:	2301      	movs	r3, #1
 800175a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4619      	mov	r1, r3
 800176a:	4806      	ldr	r0, [pc, #24]	; (8001784 <MX_GPIO_Init+0x14c>)
 800176c:	f001 fcbe 	bl	80030ec <HAL_GPIO_Init>

}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	; 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40023800 	.word	0x40023800
 800177c:	40020000 	.word	0x40020000
 8001780:	40020400 	.word	0x40020400
 8001784:	40020800 	.word	0x40020800

08001788 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_IWDG_Init+0x2c>)
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <MX_IWDG_Init+0x30>)
 8001790:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_IWDG_Init+0x2c>)
 8001794:	2201      	movs	r2, #1
 8001796:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_IWDG_Init+0x2c>)
 800179a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800179e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80017a0:	4804      	ldr	r0, [pc, #16]	; (80017b4 <MX_IWDG_Init+0x2c>)
 80017a2:	f001 fe40 	bl	8003426 <HAL_IWDG_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80017ac:	f000 f8ee 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000124 	.word	0x20000124
 80017b8:	40003000 	.word	0x40003000

080017bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c0:	f000 fe54 	bl	800246c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c4:	f000 f832 	bl	800182c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c8:	f7ff ff36 	bl	8001638 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80017cc:	f000 fd0a 	bl	80021e4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80017d0:	f000 fb66 	bl	8001ea0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80017d4:	f000 fbb2 	bl	8001f3c <MX_TIM3_Init>
  MX_TIM5_Init();
 80017d8:	f000 fc4c 	bl	8002074 <MX_TIM5_Init>
  MX_TIM4_Init();
 80017dc:	f000 fbfc 	bl	8001fd8 <MX_TIM4_Init>
  MX_IWDG_Init();
 80017e0:	f7ff ffd2 	bl	8001788 <MX_IWDG_Init>
  MX_SPI2_Init();
 80017e4:	f000 f8d8 	bl	8001998 <MX_SPI2_Init>
  MX_SPI3_Init();
 80017e8:	f000 f90c 	bl	8001a04 <MX_SPI3_Init>
  MX_USART6_UART_Init();
 80017ec:	f000 fd24 	bl	8002238 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80017f0:	f7ff fe04 	bl	80013fc <MX_ADC1_Init>
  MX_CRC_Init();
 80017f4:	f7ff fed0 	bl	8001598 <MX_CRC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80017f8:	f000 f882 	bl	8001900 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  CenLoc_Init();
 80017fc:	f7ff f8e8 	bl	80009d0 <CenLoc_Init>
  SecAlm_Init();
 8001800:	f7ff fdc4 	bl	800138c <SecAlm_Init>
  ExtLights_Init();
 8001804:	f7ff fb9c 	bl	8000f40 <ExtLights_Init>
  IntLights_Init();
 8001808:	f7ff fcca 	bl	80011a0 <IntLights_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800180c:	f004 fae6 	bl	8005ddc <osKernelInitialize>
  MX_FREERTOS_Init();
 8001810:	f7ff fef8 	bl	8001604 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001814:	f004 fb06 	bl	8005e24 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	CenLoc_MainFunction();
 8001818:	f7fe fe64 	bl	80004e4 <CenLoc_MainFunction>
	SecAlm_MainFunction();
 800181c:	f7ff fce4 	bl	80011e8 <SecAlm_MainFunction>
	ExtLights_MainFunction();
 8001820:	f7ff f90e 	bl	8000a40 <ExtLights_MainFunction>
	IntLights_MainFunction();
 8001824:	f7ff fca0 	bl	8001168 <IntLights_MainFunction>
	CenLoc_MainFunction();
 8001828:	e7f6      	b.n	8001818 <main+0x5c>
	...

0800182c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b094      	sub	sp, #80	; 0x50
 8001830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001832:	f107 0320 	add.w	r3, r7, #32
 8001836:	2230      	movs	r2, #48	; 0x30
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f007 f87a 	bl	8008934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	4b28      	ldr	r3, [pc, #160]	; (80018f8 <SystemClock_Config+0xcc>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	4a27      	ldr	r2, [pc, #156]	; (80018f8 <SystemClock_Config+0xcc>)
 800185a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185e:	6413      	str	r3, [r2, #64]	; 0x40
 8001860:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <SystemClock_Config+0xcc>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800186c:	2300      	movs	r3, #0
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	4b22      	ldr	r3, [pc, #136]	; (80018fc <SystemClock_Config+0xd0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a21      	ldr	r2, [pc, #132]	; (80018fc <SystemClock_Config+0xd0>)
 8001876:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <SystemClock_Config+0xd0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001888:	2309      	movs	r3, #9
 800188a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800188c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001892:	2301      	movs	r3, #1
 8001894:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001896:	2302      	movs	r3, #2
 8001898:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800189a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800189e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80018a0:	230c      	movs	r3, #12
 80018a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80018a4:	2360      	movs	r3, #96	; 0x60
 80018a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018a8:	2302      	movs	r3, #2
 80018aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018ac:	2304      	movs	r3, #4
 80018ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b0:	f107 0320 	add.w	r3, r7, #32
 80018b4:	4618      	mov	r0, r3
 80018b6:	f001 fe13 	bl	80034e0 <HAL_RCC_OscConfig>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80018c0:	f000 f864 	bl	800198c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c4:	230f      	movs	r3, #15
 80018c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018c8:	2302      	movs	r3, #2
 80018ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	2103      	movs	r1, #3
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 f875 	bl	80039d0 <HAL_RCC_ClockConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80018ec:	f000 f84e 	bl	800198c <Error_Handler>
  }
}
 80018f0:	bf00      	nop
 80018f2:	3750      	adds	r7, #80	; 0x50
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40007000 	.word	0x40007000

08001900 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001904:	2200      	movs	r2, #0
 8001906:	2105      	movs	r1, #5
 8001908:	2025      	movs	r0, #37	; 0x25
 800190a:	f001 f96f 	bl	8002bec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800190e:	2025      	movs	r0, #37	; 0x25
 8001910:	f001 f988 	bl	8002c24 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8001914:	2200      	movs	r2, #0
 8001916:	2105      	movs	r1, #5
 8001918:	2004      	movs	r0, #4
 800191a:	f001 f967 	bl	8002bec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800191e:	2004      	movs	r0, #4
 8001920:	f001 f980 	bl	8002c24 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2105      	movs	r1, #5
 8001928:	201c      	movs	r0, #28
 800192a:	f001 f95f 	bl	8002bec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800192e:	201c      	movs	r0, #28
 8001930:	f001 f978 	bl	8002c24 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2105      	movs	r1, #5
 8001938:	201d      	movs	r0, #29
 800193a:	f001 f957 	bl	8002bec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800193e:	201d      	movs	r0, #29
 8001940:	f001 f970 	bl	8002c24 <HAL_NVIC_EnableIRQ>
  /* TIM5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	2105      	movs	r1, #5
 8001948:	2032      	movs	r0, #50	; 0x32
 800194a:	f001 f94f 	bl	8002bec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800194e:	2032      	movs	r0, #50	; 0x32
 8001950:	f001 f968 	bl	8002c24 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 8001954:	2200      	movs	r2, #0
 8001956:	2105      	movs	r1, #5
 8001958:	2051      	movs	r0, #81	; 0x51
 800195a:	f001 f947 	bl	8002bec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 800195e:	2051      	movs	r0, #81	; 0x51
 8001960:	f001 f960 	bl	8002c24 <HAL_NVIC_EnableIRQ>
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d101      	bne.n	800197e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800197a:	f000 fd99 	bl	80024b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40010000 	.word	0x40010000

0800198c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001990:	b672      	cpsid	i
}
 8001992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001994:	e7fe      	b.n	8001994 <Error_Handler+0x8>
	...

08001998 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800199c:	4b17      	ldr	r3, [pc, #92]	; (80019fc <MX_SPI2_Init+0x64>)
 800199e:	4a18      	ldr	r2, [pc, #96]	; (8001a00 <MX_SPI2_Init+0x68>)
 80019a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <MX_SPI2_Init+0x64>)
 80019a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <MX_SPI2_Init+0x64>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <MX_SPI2_Init+0x64>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <MX_SPI2_Init+0x64>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <MX_SPI2_Init+0x64>)
 80019be:	2200      	movs	r2, #0
 80019c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019c2:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <MX_SPI2_Init+0x64>)
 80019c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019ca:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <MX_SPI2_Init+0x64>)
 80019cc:	2218      	movs	r2, #24
 80019ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019d0:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <MX_SPI2_Init+0x64>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <MX_SPI2_Init+0x64>)
 80019d8:	2200      	movs	r2, #0
 80019da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <MX_SPI2_Init+0x64>)
 80019de:	2200      	movs	r2, #0
 80019e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <MX_SPI2_Init+0x64>)
 80019e4:	220a      	movs	r2, #10
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019e8:	4804      	ldr	r0, [pc, #16]	; (80019fc <MX_SPI2_Init+0x64>)
 80019ea:	f002 fa03 	bl	8003df4 <HAL_SPI_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80019f4:	f7ff ffca 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000130 	.word	0x20000130
 8001a00:	40003800 	.word	0x40003800

08001a04 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001a08:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <MX_SPI3_Init+0x64>)
 8001a0a:	4a18      	ldr	r2, [pc, #96]	; (8001a6c <MX_SPI3_Init+0x68>)
 8001a0c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a0e:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <MX_SPI3_Init+0x64>)
 8001a10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a14:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <MX_SPI3_Init+0x64>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <MX_SPI3_Init+0x64>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_SPI3_Init+0x64>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <MX_SPI3_Init+0x64>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_SPI3_Init+0x64>)
 8001a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a34:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_SPI3_Init+0x64>)
 8001a38:	2218      	movs	r2, #24
 8001a3a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <MX_SPI3_Init+0x64>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_SPI3_Init+0x64>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <MX_SPI3_Init+0x64>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_SPI3_Init+0x64>)
 8001a50:	220a      	movs	r2, #10
 8001a52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a54:	4804      	ldr	r0, [pc, #16]	; (8001a68 <MX_SPI3_Init+0x64>)
 8001a56:	f002 f9cd 	bl	8003df4 <HAL_SPI_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001a60:	f7ff ff94 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	200001b0 	.word	0x200001b0
 8001a6c:	40003c00 	.word	0x40003c00

08001a70 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08e      	sub	sp, #56	; 0x38
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a59      	ldr	r2, [pc, #356]	; (8001bf4 <HAL_SPI_MspInit+0x184>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d153      	bne.n	8001b3a <HAL_SPI_MspInit+0xca>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
 8001a96:	4b58      	ldr	r3, [pc, #352]	; (8001bf8 <HAL_SPI_MspInit+0x188>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	4a57      	ldr	r2, [pc, #348]	; (8001bf8 <HAL_SPI_MspInit+0x188>)
 8001a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa2:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_SPI_MspInit+0x188>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aaa:	623b      	str	r3, [r7, #32]
 8001aac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	4b51      	ldr	r3, [pc, #324]	; (8001bf8 <HAL_SPI_MspInit+0x188>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a50      	ldr	r2, [pc, #320]	; (8001bf8 <HAL_SPI_MspInit+0x188>)
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b4e      	ldr	r3, [pc, #312]	; (8001bf8 <HAL_SPI_MspInit+0x188>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	61fb      	str	r3, [r7, #28]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	4b4a      	ldr	r3, [pc, #296]	; (8001bf8 <HAL_SPI_MspInit+0x188>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a49      	ldr	r2, [pc, #292]	; (8001bf8 <HAL_SPI_MspInit+0x188>)
 8001ad4:	f043 0302 	orr.w	r3, r3, #2
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <HAL_SPI_MspInit+0x188>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	61bb      	str	r3, [r7, #24]
 8001ae4:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ae6:	2308      	movs	r3, #8
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af2:	2303      	movs	r3, #3
 8001af4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001af6:	2305      	movs	r3, #5
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001afe:	4619      	mov	r1, r3
 8001b00:	483e      	ldr	r0, [pc, #248]	; (8001bfc <HAL_SPI_MspInit+0x18c>)
 8001b02:	f001 faf3 	bl	80030ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001b06:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b18:	2305      	movs	r3, #5
 8001b1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b20:	4619      	mov	r1, r3
 8001b22:	4837      	ldr	r0, [pc, #220]	; (8001c00 <HAL_SPI_MspInit+0x190>)
 8001b24:	f001 fae2 	bl	80030ec <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2105      	movs	r1, #5
 8001b2c:	2024      	movs	r0, #36	; 0x24
 8001b2e:	f001 f85d 	bl	8002bec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001b32:	2024      	movs	r0, #36	; 0x24
 8001b34:	f001 f876 	bl	8002c24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001b38:	e058      	b.n	8001bec <HAL_SPI_MspInit+0x17c>
  else if(spiHandle->Instance==SPI3)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a31      	ldr	r2, [pc, #196]	; (8001c04 <HAL_SPI_MspInit+0x194>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d153      	bne.n	8001bec <HAL_SPI_MspInit+0x17c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <HAL_SPI_MspInit+0x188>)
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	4a2a      	ldr	r2, [pc, #168]	; (8001bf8 <HAL_SPI_MspInit+0x188>)
 8001b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b52:	6413      	str	r3, [r2, #64]	; 0x40
 8001b54:	4b28      	ldr	r3, [pc, #160]	; (8001bf8 <HAL_SPI_MspInit+0x188>)
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b60:	2300      	movs	r3, #0
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <HAL_SPI_MspInit+0x188>)
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_SPI_MspInit+0x188>)
 8001b6a:	f043 0302 	orr.w	r3, r3, #2
 8001b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b70:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <HAL_SPI_MspInit+0x188>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <HAL_SPI_MspInit+0x188>)
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b84:	4a1c      	ldr	r2, [pc, #112]	; (8001bf8 <HAL_SPI_MspInit+0x188>)
 8001b86:	f043 0304 	orr.w	r3, r3, #4
 8001b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_SPI_MspInit+0x188>)
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001baa:	2307      	movs	r3, #7
 8001bac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4812      	ldr	r0, [pc, #72]	; (8001c00 <HAL_SPI_MspInit+0x190>)
 8001bb6:	f001 fa99 	bl	80030ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001bba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bcc:	2306      	movs	r3, #6
 8001bce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4809      	ldr	r0, [pc, #36]	; (8001bfc <HAL_SPI_MspInit+0x18c>)
 8001bd8:	f001 fa88 	bl	80030ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2105      	movs	r1, #5
 8001be0:	2033      	movs	r0, #51	; 0x33
 8001be2:	f001 f803 	bl	8002bec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001be6:	2033      	movs	r0, #51	; 0x33
 8001be8:	f001 f81c 	bl	8002c24 <HAL_NVIC_EnableIRQ>
}
 8001bec:	bf00      	nop
 8001bee:	3738      	adds	r7, #56	; 0x38
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40003800 	.word	0x40003800
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	40020400 	.word	0x40020400
 8001c04:	40003c00 	.word	0x40003c00

08001c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_MspInit+0x74>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	4a19      	ldr	r2, [pc, #100]	; (8001c7c <HAL_MspInit+0x74>)
 8001c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1e:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <HAL_MspInit+0x74>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	603b      	str	r3, [r7, #0]
 8001c2e:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <HAL_MspInit+0x74>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	4a12      	ldr	r2, [pc, #72]	; (8001c7c <HAL_MspInit+0x74>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <HAL_MspInit+0x74>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	210f      	movs	r1, #15
 8001c4a:	f06f 0001 	mvn.w	r0, #1
 8001c4e:	f000 ffcd 	bl	8002bec <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2105      	movs	r1, #5
 8001c56:	2001      	movs	r0, #1
 8001c58:	f000 ffc8 	bl	8002bec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f000 ffe1 	bl	8002c24 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2105      	movs	r1, #5
 8001c66:	2005      	movs	r0, #5
 8001c68:	f000 ffc0 	bl	8002bec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001c6c:	2005      	movs	r0, #5
 8001c6e:	f000 ffd9 	bl	8002c24 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800

08001c80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08c      	sub	sp, #48	; 0x30
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	4b2e      	ldr	r3, [pc, #184]	; (8001d50 <HAL_InitTick+0xd0>)
 8001c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c98:	4a2d      	ldr	r2, [pc, #180]	; (8001d50 <HAL_InitTick+0xd0>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca0:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <HAL_InitTick+0xd0>)
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cac:	f107 020c 	add.w	r2, r7, #12
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f002 f86a 	bl	8003d90 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001cbc:	f002 f854 	bl	8003d68 <HAL_RCC_GetPCLK2Freq>
 8001cc0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc4:	4a23      	ldr	r2, [pc, #140]	; (8001d54 <HAL_InitTick+0xd4>)
 8001cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cca:	0c9b      	lsrs	r3, r3, #18
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001cd0:	4b21      	ldr	r3, [pc, #132]	; (8001d58 <HAL_InitTick+0xd8>)
 8001cd2:	4a22      	ldr	r2, [pc, #136]	; (8001d5c <HAL_InitTick+0xdc>)
 8001cd4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001cd6:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <HAL_InitTick+0xd8>)
 8001cd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cdc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001cde:	4a1e      	ldr	r2, [pc, #120]	; (8001d58 <HAL_InitTick+0xd8>)
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ce4:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <HAL_InitTick+0xd8>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cea:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <HAL_InitTick+0xd8>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_InitTick+0xd8>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001cf6:	4818      	ldr	r0, [pc, #96]	; (8001d58 <HAL_InitTick+0xd8>)
 8001cf8:	f002 fa9e 	bl	8004238 <HAL_TIM_Base_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001d02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d11b      	bne.n	8001d42 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d0a:	4813      	ldr	r0, [pc, #76]	; (8001d58 <HAL_InitTick+0xd8>)
 8001d0c:	f002 fb72 	bl	80043f4 <HAL_TIM_Base_Start_IT>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001d16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d111      	bne.n	8001d42 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d1e:	2019      	movs	r0, #25
 8001d20:	f000 ff80 	bl	8002c24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b0f      	cmp	r3, #15
 8001d28:	d808      	bhi.n	8001d3c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	2019      	movs	r0, #25
 8001d30:	f000 ff5c 	bl	8002bec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d34:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <HAL_InitTick+0xe0>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	e002      	b.n	8001d42 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001d42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3730      	adds	r7, #48	; 0x30
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800
 8001d54:	431bde83 	.word	0x431bde83
 8001d58:	20000230 	.word	0x20000230
 8001d5c:	40010000 	.word	0x40010000
 8001d60:	20000004 	.word	0x20000004

08001d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <NMI_Handler+0x4>

08001d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <HardFault_Handler+0x4>

08001d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <MemManage_Handler+0x4>

08001d76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <BusFault_Handler+0x4>

08001d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <UsageFault_Handler+0x4>

08001d82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001d94:	f001 fb8a 	bl	80034ac <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001da0:	f000 fffc 	bl	8002d9c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001dbe:	f002 fb7b 	bl	80044b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000230 	.word	0x20000230

08001dcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <TIM2_IRQHandler+0x10>)
 8001dd2:	f002 fb71 	bl	80044b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200002e4 	.word	0x200002e4

08001de0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <TIM3_IRQHandler+0x10>)
 8001de6:	f002 fb67 	bl	80044b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000398 	.word	0x20000398

08001df4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <TIM4_IRQHandler+0x10>)
 8001dfa:	f002 fb5d 	bl	80044b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	2000044c 	.word	0x2000044c

08001e08 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <SPI2_IRQHandler+0x10>)
 8001e0e:	f002 f8ad 	bl	8003f6c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000130 	.word	0x20000130

08001e1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <USART1_IRQHandler+0x10>)
 8001e22:	f003 f85f 	bl	8004ee4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200005b4 	.word	0x200005b4

08001e30 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <TIM5_IRQHandler+0x10>)
 8001e36:	f002 fb3f 	bl	80044b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000500 	.word	0x20000500

08001e44 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <SPI3_IRQHandler+0x10>)
 8001e4a:	f002 f88f 	bl	8003f6c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200001b0 	.word	0x200001b0

08001e58 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001e5c:	4802      	ldr	r0, [pc, #8]	; (8001e68 <USART6_IRQHandler+0x10>)
 8001e5e:	f003 f841 	bl	8004ee4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000628 	.word	0x20000628

08001e6c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <SystemInit+0x20>)
 8001e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e86:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <SystemInit+0x20>)
 8001e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ea6:	f107 0308 	add.w	r3, r7, #8
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb4:	463b      	mov	r3, r7
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <MX_TIM2_Init+0x98>)
 8001ebe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ec2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8001ec4:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <MX_TIM2_Init+0x98>)
 8001ec6:	f242 720f 	movw	r2, #9999	; 0x270f
 8001eca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <MX_TIM2_Init+0x98>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001ed2:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <MX_TIM2_Init+0x98>)
 8001ed4:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ed8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <MX_TIM2_Init+0x98>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee0:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <MX_TIM2_Init+0x98>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ee6:	4814      	ldr	r0, [pc, #80]	; (8001f38 <MX_TIM2_Init+0x98>)
 8001ee8:	f002 f9a6 	bl	8004238 <HAL_TIM_Base_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001ef2:	f7ff fd4b 	bl	800198c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001efa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001efc:	f107 0308 	add.w	r3, r7, #8
 8001f00:	4619      	mov	r1, r3
 8001f02:	480d      	ldr	r0, [pc, #52]	; (8001f38 <MX_TIM2_Init+0x98>)
 8001f04:	f002 fc00 	bl	8004708 <HAL_TIM_ConfigClockSource>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001f0e:	f7ff fd3d 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f1a:	463b      	mov	r3, r7
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4806      	ldr	r0, [pc, #24]	; (8001f38 <MX_TIM2_Init+0x98>)
 8001f20:	f002 fe86 	bl	8004c30 <HAL_TIMEx_MasterConfigSynchronization>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001f2a:	f7ff fd2f 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f2e:	bf00      	nop
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	200002e4 	.word	0x200002e4

08001f3c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f42:	f107 0308 	add.w	r3, r7, #8
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f50:	463b      	mov	r3, r7
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f58:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001f5a:	4a1e      	ldr	r2, [pc, #120]	; (8001fd4 <MX_TIM3_Init+0x98>)
 8001f5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001f60:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f66:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001f6c:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001f6e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001f72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f74:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f80:	4813      	ldr	r0, [pc, #76]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001f82:	f002 f959 	bl	8004238 <HAL_TIM_Base_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001f8c:	f7ff fcfe 	bl	800198c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f96:	f107 0308 	add.w	r3, r7, #8
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	480c      	ldr	r0, [pc, #48]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001f9e:	f002 fbb3 	bl	8004708 <HAL_TIM_ConfigClockSource>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001fa8:	f7ff fcf0 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fac:	2300      	movs	r3, #0
 8001fae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001fba:	f002 fe39 	bl	8004c30 <HAL_TIMEx_MasterConfigSynchronization>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001fc4:	f7ff fce2 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001fc8:	bf00      	nop
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000398 	.word	0x20000398
 8001fd4:	40000400 	.word	0x40000400

08001fd8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fde:	f107 0308 	add.w	r3, r7, #8
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
 8001fea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fec:	463b      	mov	r3, r7
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	; (800206c <MX_TIM4_Init+0x94>)
 8001ff6:	4a1e      	ldr	r2, [pc, #120]	; (8002070 <MX_TIM4_Init+0x98>)
 8001ff8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 8001ffa:	4b1c      	ldr	r3, [pc, #112]	; (800206c <MX_TIM4_Init+0x94>)
 8001ffc:	f242 720f 	movw	r2, #9999	; 0x270f
 8002000:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002002:	4b1a      	ldr	r3, [pc, #104]	; (800206c <MX_TIM4_Init+0x94>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8002008:	4b18      	ldr	r3, [pc, #96]	; (800206c <MX_TIM4_Init+0x94>)
 800200a:	f242 720f 	movw	r2, #9999	; 0x270f
 800200e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002010:	4b16      	ldr	r3, [pc, #88]	; (800206c <MX_TIM4_Init+0x94>)
 8002012:	2200      	movs	r2, #0
 8002014:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <MX_TIM4_Init+0x94>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800201c:	4813      	ldr	r0, [pc, #76]	; (800206c <MX_TIM4_Init+0x94>)
 800201e:	f002 f90b 	bl	8004238 <HAL_TIM_Base_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002028:	f7ff fcb0 	bl	800198c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800202c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002030:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002032:	f107 0308 	add.w	r3, r7, #8
 8002036:	4619      	mov	r1, r3
 8002038:	480c      	ldr	r0, [pc, #48]	; (800206c <MX_TIM4_Init+0x94>)
 800203a:	f002 fb65 	bl	8004708 <HAL_TIM_ConfigClockSource>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002044:	f7ff fca2 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002048:	2300      	movs	r3, #0
 800204a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002050:	463b      	mov	r3, r7
 8002052:	4619      	mov	r1, r3
 8002054:	4805      	ldr	r0, [pc, #20]	; (800206c <MX_TIM4_Init+0x94>)
 8002056:	f002 fdeb 	bl	8004c30 <HAL_TIMEx_MasterConfigSynchronization>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002060:	f7ff fc94 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002064:	bf00      	nop
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	2000044c 	.word	0x2000044c
 8002070:	40000800 	.word	0x40000800

08002074 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800207a:	f107 0308 	add.w	r3, r7, #8
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	609a      	str	r2, [r3, #8]
 8002086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002088:	463b      	mov	r3, r7
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002090:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <MX_TIM5_Init+0x94>)
 8002092:	4a1e      	ldr	r2, [pc, #120]	; (800210c <MX_TIM5_Init+0x98>)
 8002094:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10000-1;
 8002096:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <MX_TIM5_Init+0x94>)
 8002098:	f242 720f 	movw	r2, #9999	; 0x270f
 800209c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <MX_TIM5_Init+0x94>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 110000-1;
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <MX_TIM5_Init+0x94>)
 80020a6:	4a1a      	ldr	r2, [pc, #104]	; (8002110 <MX_TIM5_Init+0x9c>)
 80020a8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <MX_TIM5_Init+0x94>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b0:	4b15      	ldr	r3, [pc, #84]	; (8002108 <MX_TIM5_Init+0x94>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80020b6:	4814      	ldr	r0, [pc, #80]	; (8002108 <MX_TIM5_Init+0x94>)
 80020b8:	f002 f8be 	bl	8004238 <HAL_TIM_Base_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80020c2:	f7ff fc63 	bl	800198c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80020cc:	f107 0308 	add.w	r3, r7, #8
 80020d0:	4619      	mov	r1, r3
 80020d2:	480d      	ldr	r0, [pc, #52]	; (8002108 <MX_TIM5_Init+0x94>)
 80020d4:	f002 fb18 	bl	8004708 <HAL_TIM_ConfigClockSource>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80020de:	f7ff fc55 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020ea:	463b      	mov	r3, r7
 80020ec:	4619      	mov	r1, r3
 80020ee:	4806      	ldr	r0, [pc, #24]	; (8002108 <MX_TIM5_Init+0x94>)
 80020f0:	f002 fd9e 	bl	8004c30 <HAL_TIMEx_MasterConfigSynchronization>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80020fa:	f7ff fc47 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80020fe:	bf00      	nop
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000500 	.word	0x20000500
 800210c:	40000c00 	.word	0x40000c00
 8002110:	0001adaf 	.word	0x0001adaf

08002114 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002124:	d10e      	bne.n	8002144 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <HAL_TIM_Base_MspInit+0xc0>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	4a29      	ldr	r2, [pc, #164]	; (80021d4 <HAL_TIM_Base_MspInit+0xc0>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6413      	str	r3, [r2, #64]	; 0x40
 8002136:	4b27      	ldr	r3, [pc, #156]	; (80021d4 <HAL_TIM_Base_MspInit+0xc0>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002142:	e042      	b.n	80021ca <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a23      	ldr	r2, [pc, #140]	; (80021d8 <HAL_TIM_Base_MspInit+0xc4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d10e      	bne.n	800216c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <HAL_TIM_Base_MspInit+0xc0>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	4a1f      	ldr	r2, [pc, #124]	; (80021d4 <HAL_TIM_Base_MspInit+0xc0>)
 8002158:	f043 0302 	orr.w	r3, r3, #2
 800215c:	6413      	str	r3, [r2, #64]	; 0x40
 800215e:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <HAL_TIM_Base_MspInit+0xc0>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]
}
 800216a:	e02e      	b.n	80021ca <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1a      	ldr	r2, [pc, #104]	; (80021dc <HAL_TIM_Base_MspInit+0xc8>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d116      	bne.n	80021a4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <HAL_TIM_Base_MspInit+0xc0>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	4a15      	ldr	r2, [pc, #84]	; (80021d4 <HAL_TIM_Base_MspInit+0xc0>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	6413      	str	r3, [r2, #64]	; 0x40
 8002186:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <HAL_TIM_Base_MspInit+0xc0>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002192:	2200      	movs	r2, #0
 8002194:	2105      	movs	r1, #5
 8002196:	201e      	movs	r0, #30
 8002198:	f000 fd28 	bl	8002bec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800219c:	201e      	movs	r0, #30
 800219e:	f000 fd41 	bl	8002c24 <HAL_NVIC_EnableIRQ>
}
 80021a2:	e012      	b.n	80021ca <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0d      	ldr	r2, [pc, #52]	; (80021e0 <HAL_TIM_Base_MspInit+0xcc>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d10d      	bne.n	80021ca <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <HAL_TIM_Base_MspInit+0xc0>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	4a07      	ldr	r2, [pc, #28]	; (80021d4 <HAL_TIM_Base_MspInit+0xc0>)
 80021b8:	f043 0308 	orr.w	r3, r3, #8
 80021bc:	6413      	str	r3, [r2, #64]	; 0x40
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_TIM_Base_MspInit+0xc0>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
}
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40000400 	.word	0x40000400
 80021dc:	40000800 	.word	0x40000800
 80021e0:	40000c00 	.word	0x40000c00

080021e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <MX_USART1_UART_Init+0x4c>)
 80021ea:	4a12      	ldr	r2, [pc, #72]	; (8002234 <MX_USART1_UART_Init+0x50>)
 80021ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <MX_USART1_UART_Init+0x4c>)
 80021f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021f6:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <MX_USART1_UART_Init+0x4c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <MX_USART1_UART_Init+0x4c>)
 80021fe:	2200      	movs	r2, #0
 8002200:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <MX_USART1_UART_Init+0x4c>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <MX_USART1_UART_Init+0x4c>)
 800220a:	220c      	movs	r2, #12
 800220c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <MX_USART1_UART_Init+0x4c>)
 8002210:	2200      	movs	r2, #0
 8002212:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <MX_USART1_UART_Init+0x4c>)
 8002216:	2200      	movs	r2, #0
 8002218:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800221a:	4805      	ldr	r0, [pc, #20]	; (8002230 <MX_USART1_UART_Init+0x4c>)
 800221c:	f002 fd94 	bl	8004d48 <HAL_UART_Init>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002226:	f7ff fbb1 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200005b4 	.word	0x200005b4
 8002234:	40011000 	.word	0x40011000

08002238 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <MX_USART6_UART_Init+0x4c>)
 800223e:	4a12      	ldr	r2, [pc, #72]	; (8002288 <MX_USART6_UART_Init+0x50>)
 8002240:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <MX_USART6_UART_Init+0x4c>)
 8002244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002248:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800224a:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <MX_USART6_UART_Init+0x4c>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002250:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <MX_USART6_UART_Init+0x4c>)
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002256:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <MX_USART6_UART_Init+0x4c>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800225c:	4b09      	ldr	r3, [pc, #36]	; (8002284 <MX_USART6_UART_Init+0x4c>)
 800225e:	220c      	movs	r2, #12
 8002260:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002262:	4b08      	ldr	r3, [pc, #32]	; (8002284 <MX_USART6_UART_Init+0x4c>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <MX_USART6_UART_Init+0x4c>)
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
  if (HAL_LIN_Init(&huart6, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK)
 800226e:	2100      	movs	r1, #0
 8002270:	4804      	ldr	r0, [pc, #16]	; (8002284 <MX_USART6_UART_Init+0x4c>)
 8002272:	f002 fdc3 	bl	8004dfc <HAL_LIN_Init>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_USART6_UART_Init+0x48>
  {
    Error_Handler();
 800227c:	f7ff fb86 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000628 	.word	0x20000628
 8002288:	40011400 	.word	0x40011400

0800228c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08e      	sub	sp, #56	; 0x38
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a55      	ldr	r2, [pc, #340]	; (8002400 <HAL_UART_MspInit+0x174>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d14b      	bne.n	8002346 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	623b      	str	r3, [r7, #32]
 80022b2:	4b54      	ldr	r3, [pc, #336]	; (8002404 <HAL_UART_MspInit+0x178>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	4a53      	ldr	r2, [pc, #332]	; (8002404 <HAL_UART_MspInit+0x178>)
 80022b8:	f043 0310 	orr.w	r3, r3, #16
 80022bc:	6453      	str	r3, [r2, #68]	; 0x44
 80022be:	4b51      	ldr	r3, [pc, #324]	; (8002404 <HAL_UART_MspInit+0x178>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	623b      	str	r3, [r7, #32]
 80022c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	4b4d      	ldr	r3, [pc, #308]	; (8002404 <HAL_UART_MspInit+0x178>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a4c      	ldr	r2, [pc, #304]	; (8002404 <HAL_UART_MspInit+0x178>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	4b4a      	ldr	r3, [pc, #296]	; (8002404 <HAL_UART_MspInit+0x178>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	61fb      	str	r3, [r7, #28]
 80022e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
 80022ea:	4b46      	ldr	r3, [pc, #280]	; (8002404 <HAL_UART_MspInit+0x178>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a45      	ldr	r2, [pc, #276]	; (8002404 <HAL_UART_MspInit+0x178>)
 80022f0:	f043 0302 	orr.w	r3, r3, #2
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b43      	ldr	r3, [pc, #268]	; (8002404 <HAL_UART_MspInit+0x178>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	61bb      	str	r3, [r7, #24]
 8002300:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002308:	2302      	movs	r3, #2
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002310:	2303      	movs	r3, #3
 8002312:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002314:	2307      	movs	r3, #7
 8002316:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231c:	4619      	mov	r1, r3
 800231e:	483a      	ldr	r0, [pc, #232]	; (8002408 <HAL_UART_MspInit+0x17c>)
 8002320:	f000 fee4 	bl	80030ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	2302      	movs	r3, #2
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002330:	2303      	movs	r3, #3
 8002332:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002334:	2307      	movs	r3, #7
 8002336:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233c:	4619      	mov	r1, r3
 800233e:	4833      	ldr	r0, [pc, #204]	; (800240c <HAL_UART_MspInit+0x180>)
 8002340:	f000 fed4 	bl	80030ec <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002344:	e057      	b.n	80023f6 <HAL_UART_MspInit+0x16a>
  else if(uartHandle->Instance==USART6)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a31      	ldr	r2, [pc, #196]	; (8002410 <HAL_UART_MspInit+0x184>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d152      	bne.n	80023f6 <HAL_UART_MspInit+0x16a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <HAL_UART_MspInit+0x178>)
 8002356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002358:	4a2a      	ldr	r2, [pc, #168]	; (8002404 <HAL_UART_MspInit+0x178>)
 800235a:	f043 0320 	orr.w	r3, r3, #32
 800235e:	6453      	str	r3, [r2, #68]	; 0x44
 8002360:	4b28      	ldr	r3, [pc, #160]	; (8002404 <HAL_UART_MspInit+0x178>)
 8002362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002364:	f003 0320 	and.w	r3, r3, #32
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800236c:	2300      	movs	r3, #0
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	4b24      	ldr	r3, [pc, #144]	; (8002404 <HAL_UART_MspInit+0x178>)
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	4a23      	ldr	r2, [pc, #140]	; (8002404 <HAL_UART_MspInit+0x178>)
 8002376:	f043 0304 	orr.w	r3, r3, #4
 800237a:	6313      	str	r3, [r2, #48]	; 0x30
 800237c:	4b21      	ldr	r3, [pc, #132]	; (8002404 <HAL_UART_MspInit+0x178>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <HAL_UART_MspInit+0x178>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	4a1c      	ldr	r2, [pc, #112]	; (8002404 <HAL_UART_MspInit+0x178>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6313      	str	r3, [r2, #48]	; 0x30
 8002398:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <HAL_UART_MspInit+0x178>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023a4:	2340      	movs	r3, #64	; 0x40
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b0:	2303      	movs	r3, #3
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80023b4:	2308      	movs	r3, #8
 80023b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023bc:	4619      	mov	r1, r3
 80023be:	4815      	ldr	r0, [pc, #84]	; (8002414 <HAL_UART_MspInit+0x188>)
 80023c0:	f000 fe94 	bl	80030ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80023c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d2:	2303      	movs	r3, #3
 80023d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80023d6:	2308      	movs	r3, #8
 80023d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023de:	4619      	mov	r1, r3
 80023e0:	4809      	ldr	r0, [pc, #36]	; (8002408 <HAL_UART_MspInit+0x17c>)
 80023e2:	f000 fe83 	bl	80030ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2105      	movs	r1, #5
 80023ea:	2047      	movs	r0, #71	; 0x47
 80023ec:	f000 fbfe 	bl	8002bec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80023f0:	2047      	movs	r0, #71	; 0x47
 80023f2:	f000 fc17 	bl	8002c24 <HAL_NVIC_EnableIRQ>
}
 80023f6:	bf00      	nop
 80023f8:	3738      	adds	r7, #56	; 0x38
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40011000 	.word	0x40011000
 8002404:	40023800 	.word	0x40023800
 8002408:	40020000 	.word	0x40020000
 800240c:	40020400 	.word	0x40020400
 8002410:	40011400 	.word	0x40011400
 8002414:	40020800 	.word	0x40020800

08002418 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002450 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800241c:	480d      	ldr	r0, [pc, #52]	; (8002454 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800241e:	490e      	ldr	r1, [pc, #56]	; (8002458 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002420:	4a0e      	ldr	r2, [pc, #56]	; (800245c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002424:	e002      	b.n	800242c <LoopCopyDataInit>

08002426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242a:	3304      	adds	r3, #4

0800242c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800242c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002430:	d3f9      	bcc.n	8002426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002432:	4a0b      	ldr	r2, [pc, #44]	; (8002460 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002434:	4c0b      	ldr	r4, [pc, #44]	; (8002464 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002438:	e001      	b.n	800243e <LoopFillZerobss>

0800243a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800243c:	3204      	adds	r2, #4

0800243e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002440:	d3fb      	bcc.n	800243a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002442:	f7ff fd1b 	bl	8001e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002446:	f006 fa41 	bl	80088cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800244a:	f7ff f9b7 	bl	80017bc <main>
  bx  lr    
 800244e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002450:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002458:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800245c:	08008bb0 	.word	0x08008bb0
  ldr r2, =_sbss
 8002460:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002464:	200050d8 	.word	0x200050d8

08002468 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002468:	e7fe      	b.n	8002468 <ADC_IRQHandler>
	...

0800246c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <HAL_Init+0x40>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a0d      	ldr	r2, [pc, #52]	; (80024ac <HAL_Init+0x40>)
 8002476:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800247a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_Init+0x40>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <HAL_Init+0x40>)
 8002482:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002486:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <HAL_Init+0x40>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a07      	ldr	r2, [pc, #28]	; (80024ac <HAL_Init+0x40>)
 800248e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002492:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002494:	2003      	movs	r0, #3
 8002496:	f000 fb9e 	bl	8002bd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800249a:	200f      	movs	r0, #15
 800249c:	f7ff fbf0 	bl	8001c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024a0:	f7ff fbb2 	bl	8001c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40023c00 	.word	0x40023c00

080024b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_IncTick+0x20>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_IncTick+0x24>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4413      	add	r3, r2
 80024c0:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <HAL_IncTick+0x24>)
 80024c2:	6013      	str	r3, [r2, #0]
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000008 	.word	0x20000008
 80024d4:	2000069c 	.word	0x2000069c

080024d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return uwTick;
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <HAL_GetTick+0x14>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	2000069c 	.word	0x2000069c

080024f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e04a      	b.n	800259c <HAL_ADC_Init+0xac>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	d120      	bne.n	8002550 <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a24      	ldr	r2, [pc, #144]	; (80025a4 <HAL_ADC_Init+0xb4>)
 8002512:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a24      	ldr	r2, [pc, #144]	; (80025a8 <HAL_ADC_Init+0xb8>)
 8002518:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a23      	ldr	r2, [pc, #140]	; (80025ac <HAL_ADC_Init+0xbc>)
 800251e:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a23      	ldr	r2, [pc, #140]	; (80025b0 <HAL_ADC_Init+0xc0>)
 8002524:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a22      	ldr	r2, [pc, #136]	; (80025b4 <HAL_ADC_Init+0xc4>)
 800252a:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a20      	ldr	r2, [pc, #128]	; (80025b8 <HAL_ADC_Init+0xc8>)
 8002538:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	2b00      	cmp	r3, #0
 800255a:	d118      	bne.n	800258e <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002564:	f023 0302 	bic.w	r3, r3, #2
 8002568:	f043 0202 	orr.w	r2, r3, #2
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f97d 	bl	8002870 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f023 0303 	bic.w	r3, r3, #3
 8002584:	f043 0201 	orr.w	r2, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	641a      	str	r2, [r3, #64]	; 0x40
 800258c:	e001      	b.n	8002592 <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800259a:	7bfb      	ldrb	r3, [r7, #15]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	080025bd 	.word	0x080025bd
 80025a8:	080025d1 	.word	0x080025d1
 80025ac:	080025e5 	.word	0x080025e5
 80025b0:	080025f9 	.word	0x080025f9
 80025b4:	08002a69 	.word	0x08002a69
 80025b8:	080014a1 	.word	0x080014a1

080025bc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002620:	2b01      	cmp	r3, #1
 8002622:	d101      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x1c>
 8002624:	2302      	movs	r3, #2
 8002626:	e113      	b.n	8002850 <HAL_ADC_ConfigChannel+0x244>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b09      	cmp	r3, #9
 8002636:	d925      	bls.n	8002684 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68d9      	ldr	r1, [r3, #12]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	461a      	mov	r2, r3
 8002646:	4613      	mov	r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4413      	add	r3, r2
 800264c:	3b1e      	subs	r3, #30
 800264e:	2207      	movs	r2, #7
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43da      	mvns	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	400a      	ands	r2, r1
 800265c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68d9      	ldr	r1, [r3, #12]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	b29b      	uxth	r3, r3
 800266e:	4618      	mov	r0, r3
 8002670:	4603      	mov	r3, r0
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4403      	add	r3, r0
 8002676:	3b1e      	subs	r3, #30
 8002678:	409a      	lsls	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	e022      	b.n	80026ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6919      	ldr	r1, [r3, #16]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	b29b      	uxth	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	4613      	mov	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	4413      	add	r3, r2
 8002698:	2207      	movs	r2, #7
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43da      	mvns	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	400a      	ands	r2, r1
 80026a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6919      	ldr	r1, [r3, #16]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	4618      	mov	r0, r3
 80026ba:	4603      	mov	r3, r0
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4403      	add	r3, r0
 80026c0:	409a      	lsls	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b06      	cmp	r3, #6
 80026d0:	d824      	bhi.n	800271c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	3b05      	subs	r3, #5
 80026e4:	221f      	movs	r2, #31
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43da      	mvns	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	400a      	ands	r2, r1
 80026f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	4618      	mov	r0, r3
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	3b05      	subs	r3, #5
 800270e:	fa00 f203 	lsl.w	r2, r0, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	635a      	str	r2, [r3, #52]	; 0x34
 800271a:	e04c      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b0c      	cmp	r3, #12
 8002722:	d824      	bhi.n	800276e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	3b23      	subs	r3, #35	; 0x23
 8002736:	221f      	movs	r2, #31
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43da      	mvns	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	400a      	ands	r2, r1
 8002744:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	b29b      	uxth	r3, r3
 8002752:	4618      	mov	r0, r3
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	3b23      	subs	r3, #35	; 0x23
 8002760:	fa00 f203 	lsl.w	r2, r0, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
 800276c:	e023      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	3b41      	subs	r3, #65	; 0x41
 8002780:	221f      	movs	r2, #31
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43da      	mvns	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	400a      	ands	r2, r1
 800278e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	4618      	mov	r0, r3
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	3b41      	subs	r3, #65	; 0x41
 80027aa:	fa00 f203 	lsl.w	r2, r0, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027b6:	4b29      	ldr	r3, [pc, #164]	; (800285c <HAL_ADC_ConfigChannel+0x250>)
 80027b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a28      	ldr	r2, [pc, #160]	; (8002860 <HAL_ADC_ConfigChannel+0x254>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d10f      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x1d8>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b12      	cmp	r3, #18
 80027ca:	d10b      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1d      	ldr	r2, [pc, #116]	; (8002860 <HAL_ADC_ConfigChannel+0x254>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d12b      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x23a>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a1c      	ldr	r2, [pc, #112]	; (8002864 <HAL_ADC_ConfigChannel+0x258>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d003      	beq.n	8002800 <HAL_ADC_ConfigChannel+0x1f4>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b11      	cmp	r3, #17
 80027fe:	d122      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a11      	ldr	r2, [pc, #68]	; (8002864 <HAL_ADC_ConfigChannel+0x258>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d111      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_ADC_ConfigChannel+0x25c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a11      	ldr	r2, [pc, #68]	; (800286c <HAL_ADC_ConfigChannel+0x260>)
 8002828:	fba2 2303 	umull	r2, r3, r2, r3
 800282c:	0c9a      	lsrs	r2, r3, #18
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002838:	e002      	b.n	8002840 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	3b01      	subs	r3, #1
 800283e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f9      	bne.n	800283a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	40012300 	.word	0x40012300
 8002860:	40012000 	.word	0x40012000
 8002864:	10000012 	.word	0x10000012
 8002868:	20000000 	.word	0x20000000
 800286c:	431bde83 	.word	0x431bde83

08002870 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002878:	4b79      	ldr	r3, [pc, #484]	; (8002a60 <ADC_Init+0x1f0>)
 800287a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	431a      	orrs	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6859      	ldr	r1, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	021a      	lsls	r2, r3, #8
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6859      	ldr	r1, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6899      	ldr	r1, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002902:	4a58      	ldr	r2, [pc, #352]	; (8002a64 <ADC_Init+0x1f4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d022      	beq.n	800294e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002916:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6899      	ldr	r1, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002938:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6899      	ldr	r1, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	e00f      	b.n	800296e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800295c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800296c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0202 	bic.w	r2, r2, #2
 800297c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6899      	ldr	r1, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	7e1b      	ldrb	r3, [r3, #24]
 8002988:	005a      	lsls	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01b      	beq.n	80029d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6859      	ldr	r1, [r3, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	3b01      	subs	r3, #1
 80029c8:	035a      	lsls	r2, r3, #13
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	e007      	b.n	80029e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	051a      	lsls	r2, r3, #20
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6899      	ldr	r1, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a26:	025a      	lsls	r2, r3, #9
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6899      	ldr	r1, [r3, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	029a      	lsls	r2, r3, #10
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	609a      	str	r2, [r3, #8]
}
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	40012300 	.word	0x40012300
 8002a64:	0f000001 	.word	0x0f000001

08002a68 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a98:	4013      	ands	r3, r2
 8002a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aae:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	60d3      	str	r3, [r2, #12]
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <__NVIC_GetPriorityGrouping+0x18>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	0a1b      	lsrs	r3, r3, #8
 8002ace:	f003 0307 	and.w	r3, r3, #7
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	db0b      	blt.n	8002b0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	f003 021f 	and.w	r2, r3, #31
 8002af8:	4907      	ldr	r1, [pc, #28]	; (8002b18 <__NVIC_EnableIRQ+0x38>)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	2001      	movs	r0, #1
 8002b02:	fa00 f202 	lsl.w	r2, r0, r2
 8002b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	e000e100 	.word	0xe000e100

08002b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	6039      	str	r1, [r7, #0]
 8002b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	db0a      	blt.n	8002b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	490c      	ldr	r1, [pc, #48]	; (8002b68 <__NVIC_SetPriority+0x4c>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	0112      	lsls	r2, r2, #4
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	440b      	add	r3, r1
 8002b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b44:	e00a      	b.n	8002b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4908      	ldr	r1, [pc, #32]	; (8002b6c <__NVIC_SetPriority+0x50>)
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	3b04      	subs	r3, #4
 8002b54:	0112      	lsls	r2, r2, #4
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	440b      	add	r3, r1
 8002b5a:	761a      	strb	r2, [r3, #24]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000e100 	.word	0xe000e100
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b089      	sub	sp, #36	; 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f1c3 0307 	rsb	r3, r3, #7
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	bf28      	it	cs
 8002b8e:	2304      	movcs	r3, #4
 8002b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3304      	adds	r3, #4
 8002b96:	2b06      	cmp	r3, #6
 8002b98:	d902      	bls.n	8002ba0 <NVIC_EncodePriority+0x30>
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3b03      	subs	r3, #3
 8002b9e:	e000      	b.n	8002ba2 <NVIC_EncodePriority+0x32>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc2:	43d9      	mvns	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc8:	4313      	orrs	r3, r2
         );
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3724      	adds	r7, #36	; 0x24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff ff4c 	bl	8002a7c <__NVIC_SetPriorityGrouping>
}
 8002be4:	bf00      	nop
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bfe:	f7ff ff61 	bl	8002ac4 <__NVIC_GetPriorityGrouping>
 8002c02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	68b9      	ldr	r1, [r7, #8]
 8002c08:	6978      	ldr	r0, [r7, #20]
 8002c0a:	f7ff ffb1 	bl	8002b70 <NVIC_EncodePriority>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c14:	4611      	mov	r1, r2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff ff80 	bl	8002b1c <__NVIC_SetPriority>
}
 8002c1c:	bf00      	nop
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff ff54 	bl	8002ae0 <__NVIC_EnableIRQ>
}
 8002c38:	bf00      	nop
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e00e      	b.n	8002c70 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	795b      	ldrb	r3, [r3, #5]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d105      	bne.n	8002c68 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fe fcac 	bl	80015c0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c86:	f7ff fc27 	bl	80024d8 <HAL_GetTick>
 8002c8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d008      	beq.n	8002caa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2280      	movs	r2, #128	; 0x80
 8002c9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e052      	b.n	8002d50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0216 	bic.w	r2, r2, #22
 8002cb8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695a      	ldr	r2, [r3, #20]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cc8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d103      	bne.n	8002cda <HAL_DMA_Abort+0x62>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0208 	bic.w	r2, r2, #8
 8002ce8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0201 	bic.w	r2, r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cfa:	e013      	b.n	8002d24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cfc:	f7ff fbec 	bl	80024d8 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b05      	cmp	r3, #5
 8002d08:	d90c      	bls.n	8002d24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2203      	movs	r2, #3
 8002d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e015      	b.n	8002d50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1e4      	bne.n	8002cfc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d36:	223f      	movs	r2, #63	; 0x3f
 8002d38:	409a      	lsls	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d004      	beq.n	8002d76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2280      	movs	r2, #128	; 0x80
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e00c      	b.n	8002d90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2205      	movs	r2, #5
 8002d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0201 	bic.w	r2, r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002da6:	4b4b      	ldr	r3, [pc, #300]	; (8002ed4 <HAL_FLASH_IRQHandler+0x138>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d020      	beq.n	8002df4 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002db2:	4b49      	ldr	r3, [pc, #292]	; (8002ed8 <HAL_FLASH_IRQHandler+0x13c>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d107      	bne.n	8002dcc <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8002dbc:	4b46      	ldr	r3, [pc, #280]	; (8002ed8 <HAL_FLASH_IRQHandler+0x13c>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8002dc2:	4b45      	ldr	r3, [pc, #276]	; (8002ed8 <HAL_FLASH_IRQHandler+0x13c>)
 8002dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc8:	60da      	str	r2, [r3, #12]
 8002dca:	e00b      	b.n	8002de4 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002dcc:	4b42      	ldr	r3, [pc, #264]	; (8002ed8 <HAL_FLASH_IRQHandler+0x13c>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d103      	bne.n	8002dde <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8002dd6:	4b40      	ldr	r3, [pc, #256]	; (8002ed8 <HAL_FLASH_IRQHandler+0x13c>)
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	607b      	str	r3, [r7, #4]
 8002ddc:	e002      	b.n	8002de4 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8002dde:	4b3e      	ldr	r3, [pc, #248]	; (8002ed8 <HAL_FLASH_IRQHandler+0x13c>)
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8002de4:	f000 f88e 	bl	8002f04 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f881 	bl	8002ef0 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002dee:	4b3a      	ldr	r3, [pc, #232]	; (8002ed8 <HAL_FLASH_IRQHandler+0x13c>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002df4:	4b37      	ldr	r3, [pc, #220]	; (8002ed4 <HAL_FLASH_IRQHandler+0x138>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d04a      	beq.n	8002e96 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002e00:	4b34      	ldr	r3, [pc, #208]	; (8002ed4 <HAL_FLASH_IRQHandler+0x138>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002e06:	4b34      	ldr	r3, [pc, #208]	; (8002ed8 <HAL_FLASH_IRQHandler+0x13c>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d12d      	bne.n	8002e6c <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8002e10:	4b31      	ldr	r3, [pc, #196]	; (8002ed8 <HAL_FLASH_IRQHandler+0x13c>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	3b01      	subs	r3, #1
 8002e16:	4a30      	ldr	r2, [pc, #192]	; (8002ed8 <HAL_FLASH_IRQHandler+0x13c>)
 8002e18:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8002e1a:	4b2f      	ldr	r3, [pc, #188]	; (8002ed8 <HAL_FLASH_IRQHandler+0x13c>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d015      	beq.n	8002e4e <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8002e22:	4b2d      	ldr	r3, [pc, #180]	; (8002ed8 <HAL_FLASH_IRQHandler+0x13c>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f857 	bl	8002edc <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8002e2e:	4b2a      	ldr	r3, [pc, #168]	; (8002ed8 <HAL_FLASH_IRQHandler+0x13c>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	3301      	adds	r3, #1
 8002e34:	4a28      	ldr	r2, [pc, #160]	; (8002ed8 <HAL_FLASH_IRQHandler+0x13c>)
 8002e36:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8002e38:	4b27      	ldr	r3, [pc, #156]	; (8002ed8 <HAL_FLASH_IRQHandler+0x13c>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8002e3e:	4b26      	ldr	r3, [pc, #152]	; (8002ed8 <HAL_FLASH_IRQHandler+0x13c>)
 8002e40:	7a1b      	ldrb	r3, [r3, #8]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	4619      	mov	r1, r3
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f8c2 	bl	8002fd0 <FLASH_Erase_Sector>
 8002e4c:	e023      	b.n	8002e96 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8002e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e52:	607b      	str	r3, [r7, #4]
 8002e54:	4a20      	ldr	r2, [pc, #128]	; (8002ed8 <HAL_FLASH_IRQHandler+0x13c>)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002e5a:	4b1f      	ldr	r3, [pc, #124]	; (8002ed8 <HAL_FLASH_IRQHandler+0x13c>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8002e60:	f000 f8fe 	bl	8003060 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f839 	bl	8002edc <HAL_FLASH_EndOfOperationCallback>
 8002e6a:	e014      	b.n	8002e96 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8002e6c:	4b1a      	ldr	r3, [pc, #104]	; (8002ed8 <HAL_FLASH_IRQHandler+0x13c>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d107      	bne.n	8002e86 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8002e76:	f000 f8f3 	bl	8003060 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8002e7a:	4b17      	ldr	r3, [pc, #92]	; (8002ed8 <HAL_FLASH_IRQHandler+0x13c>)
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 f82c 	bl	8002edc <HAL_FLASH_EndOfOperationCallback>
 8002e84:	e004      	b.n	8002e90 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002e86:	4b14      	ldr	r3, [pc, #80]	; (8002ed8 <HAL_FLASH_IRQHandler+0x13c>)
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 f826 	bl	8002edc <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002e90:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <HAL_FLASH_IRQHandler+0x13c>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002e96:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <HAL_FLASH_IRQHandler+0x13c>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d114      	bne.n	8002eca <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <HAL_FLASH_IRQHandler+0x138>)
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	4a0b      	ldr	r2, [pc, #44]	; (8002ed4 <HAL_FLASH_IRQHandler+0x138>)
 8002ea6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002eaa:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8002eac:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <HAL_FLASH_IRQHandler+0x138>)
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	4a08      	ldr	r2, [pc, #32]	; (8002ed4 <HAL_FLASH_IRQHandler+0x138>)
 8002eb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eb6:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_FLASH_IRQHandler+0x138>)
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	4a05      	ldr	r2, [pc, #20]	; (8002ed4 <HAL_FLASH_IRQHandler+0x138>)
 8002ebe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002ec2:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8002ec4:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <HAL_FLASH_IRQHandler+0x13c>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	761a      	strb	r2, [r3, #24]
  }
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023c00 	.word	0x40023c00
 8002ed8:	200006a0 	.word	0x200006a0

08002edc <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002f08:	4b2f      	ldr	r3, [pc, #188]	; (8002fc8 <FLASH_SetErrorCode+0xc4>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002f14:	4b2d      	ldr	r3, [pc, #180]	; (8002fcc <FLASH_SetErrorCode+0xc8>)
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	f043 0310 	orr.w	r3, r3, #16
 8002f1c:	4a2b      	ldr	r2, [pc, #172]	; (8002fcc <FLASH_SetErrorCode+0xc8>)
 8002f1e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002f20:	4b29      	ldr	r3, [pc, #164]	; (8002fc8 <FLASH_SetErrorCode+0xc4>)
 8002f22:	2210      	movs	r2, #16
 8002f24:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002f26:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <FLASH_SetErrorCode+0xc4>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f003 0320 	and.w	r3, r3, #32
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d008      	beq.n	8002f44 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002f32:	4b26      	ldr	r3, [pc, #152]	; (8002fcc <FLASH_SetErrorCode+0xc8>)
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f043 0308 	orr.w	r3, r3, #8
 8002f3a:	4a24      	ldr	r2, [pc, #144]	; (8002fcc <FLASH_SetErrorCode+0xc8>)
 8002f3c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002f3e:	4b22      	ldr	r3, [pc, #136]	; (8002fc8 <FLASH_SetErrorCode+0xc4>)
 8002f40:	2220      	movs	r2, #32
 8002f42:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002f44:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <FLASH_SetErrorCode+0xc4>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d008      	beq.n	8002f62 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002f50:	4b1e      	ldr	r3, [pc, #120]	; (8002fcc <FLASH_SetErrorCode+0xc8>)
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	f043 0304 	orr.w	r3, r3, #4
 8002f58:	4a1c      	ldr	r2, [pc, #112]	; (8002fcc <FLASH_SetErrorCode+0xc8>)
 8002f5a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002f5c:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <FLASH_SetErrorCode+0xc4>)
 8002f5e:	2240      	movs	r2, #64	; 0x40
 8002f60:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002f62:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <FLASH_SetErrorCode+0xc4>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002f6e:	4b17      	ldr	r3, [pc, #92]	; (8002fcc <FLASH_SetErrorCode+0xc8>)
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f043 0302 	orr.w	r3, r3, #2
 8002f76:	4a15      	ldr	r2, [pc, #84]	; (8002fcc <FLASH_SetErrorCode+0xc8>)
 8002f78:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002f7a:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <FLASH_SetErrorCode+0xc4>)
 8002f7c:	2280      	movs	r2, #128	; 0x80
 8002f7e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002f80:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <FLASH_SetErrorCode+0xc4>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d009      	beq.n	8002fa0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002f8c:	4b0f      	ldr	r3, [pc, #60]	; (8002fcc <FLASH_SetErrorCode+0xc8>)
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	4a0d      	ldr	r2, [pc, #52]	; (8002fcc <FLASH_SetErrorCode+0xc8>)
 8002f96:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <FLASH_SetErrorCode+0xc4>)
 8002f9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f9e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <FLASH_SetErrorCode+0xc4>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002fac:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <FLASH_SetErrorCode+0xc8>)
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	f043 0320 	orr.w	r3, r3, #32
 8002fb4:	4a05      	ldr	r2, [pc, #20]	; (8002fcc <FLASH_SetErrorCode+0xc8>)
 8002fb6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002fb8:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <FLASH_SetErrorCode+0xc4>)
 8002fba:	2202      	movs	r2, #2
 8002fbc:	60da      	str	r2, [r3, #12]
  }
}
 8002fbe:	bf00      	nop
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	40023c00 	.word	0x40023c00
 8002fcc:	200006a0 	.word	0x200006a0

08002fd0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d102      	bne.n	8002fec <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	e010      	b.n	800300e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d103      	bne.n	8002ffa <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	e009      	b.n	800300e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d103      	bne.n	8003008 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	e002      	b.n	800300e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003008:	f44f 7340 	mov.w	r3, #768	; 0x300
 800300c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800300e:	4b13      	ldr	r3, [pc, #76]	; (800305c <FLASH_Erase_Sector+0x8c>)
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	4a12      	ldr	r2, [pc, #72]	; (800305c <FLASH_Erase_Sector+0x8c>)
 8003014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003018:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800301a:	4b10      	ldr	r3, [pc, #64]	; (800305c <FLASH_Erase_Sector+0x8c>)
 800301c:	691a      	ldr	r2, [r3, #16]
 800301e:	490f      	ldr	r1, [pc, #60]	; (800305c <FLASH_Erase_Sector+0x8c>)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003026:	4b0d      	ldr	r3, [pc, #52]	; (800305c <FLASH_Erase_Sector+0x8c>)
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	4a0c      	ldr	r2, [pc, #48]	; (800305c <FLASH_Erase_Sector+0x8c>)
 800302c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003030:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <FLASH_Erase_Sector+0x8c>)
 8003034:	691a      	ldr	r2, [r3, #16]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4313      	orrs	r3, r2
 800303c:	4a07      	ldr	r2, [pc, #28]	; (800305c <FLASH_Erase_Sector+0x8c>)
 800303e:	f043 0302 	orr.w	r3, r3, #2
 8003042:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003044:	4b05      	ldr	r3, [pc, #20]	; (800305c <FLASH_Erase_Sector+0x8c>)
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	4a04      	ldr	r2, [pc, #16]	; (800305c <FLASH_Erase_Sector+0x8c>)
 800304a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304e:	6113      	str	r3, [r2, #16]
}
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	40023c00 	.word	0x40023c00

08003060 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003064:	4b20      	ldr	r3, [pc, #128]	; (80030e8 <FLASH_FlushCaches+0x88>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800306c:	2b00      	cmp	r3, #0
 800306e:	d017      	beq.n	80030a0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003070:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <FLASH_FlushCaches+0x88>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a1c      	ldr	r2, [pc, #112]	; (80030e8 <FLASH_FlushCaches+0x88>)
 8003076:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800307a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800307c:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <FLASH_FlushCaches+0x88>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a19      	ldr	r2, [pc, #100]	; (80030e8 <FLASH_FlushCaches+0x88>)
 8003082:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	4b17      	ldr	r3, [pc, #92]	; (80030e8 <FLASH_FlushCaches+0x88>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a16      	ldr	r2, [pc, #88]	; (80030e8 <FLASH_FlushCaches+0x88>)
 800308e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003092:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003094:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <FLASH_FlushCaches+0x88>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a13      	ldr	r2, [pc, #76]	; (80030e8 <FLASH_FlushCaches+0x88>)
 800309a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800309e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80030a0:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <FLASH_FlushCaches+0x88>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d017      	beq.n	80030dc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80030ac:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <FLASH_FlushCaches+0x88>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a0d      	ldr	r2, [pc, #52]	; (80030e8 <FLASH_FlushCaches+0x88>)
 80030b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030b6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <FLASH_FlushCaches+0x88>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a0a      	ldr	r2, [pc, #40]	; (80030e8 <FLASH_FlushCaches+0x88>)
 80030be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <FLASH_FlushCaches+0x88>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a07      	ldr	r2, [pc, #28]	; (80030e8 <FLASH_FlushCaches+0x88>)
 80030ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030ce:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <FLASH_FlushCaches+0x88>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <FLASH_FlushCaches+0x88>)
 80030d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030da:	6013      	str	r3, [r2, #0]
  }
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40023c00 	.word	0x40023c00

080030ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b089      	sub	sp, #36	; 0x24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030fe:	2300      	movs	r3, #0
 8003100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	e159      	b.n	80033bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003108:	2201      	movs	r2, #1
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	429a      	cmp	r2, r3
 8003122:	f040 8148 	bne.w	80033b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d005      	beq.n	800313e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800313a:	2b02      	cmp	r3, #2
 800313c:	d130      	bne.n	80031a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	2203      	movs	r2, #3
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003174:	2201      	movs	r2, #1
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	f003 0201 	and.w	r2, r3, #1
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d017      	beq.n	80031dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	2203      	movs	r2, #3
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d123      	bne.n	8003230 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	08da      	lsrs	r2, r3, #3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3208      	adds	r2, #8
 80031f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	220f      	movs	r2, #15
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	08da      	lsrs	r2, r3, #3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3208      	adds	r2, #8
 800322a:	69b9      	ldr	r1, [r7, #24]
 800322c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	2203      	movs	r2, #3
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 0203 	and.w	r2, r3, #3
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80a2 	beq.w	80033b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	4b57      	ldr	r3, [pc, #348]	; (80033d4 <HAL_GPIO_Init+0x2e8>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	4a56      	ldr	r2, [pc, #344]	; (80033d4 <HAL_GPIO_Init+0x2e8>)
 800327c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003280:	6453      	str	r3, [r2, #68]	; 0x44
 8003282:	4b54      	ldr	r3, [pc, #336]	; (80033d4 <HAL_GPIO_Init+0x2e8>)
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800328e:	4a52      	ldr	r2, [pc, #328]	; (80033d8 <HAL_GPIO_Init+0x2ec>)
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	089b      	lsrs	r3, r3, #2
 8003294:	3302      	adds	r3, #2
 8003296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800329a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	220f      	movs	r2, #15
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43db      	mvns	r3, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4013      	ands	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a49      	ldr	r2, [pc, #292]	; (80033dc <HAL_GPIO_Init+0x2f0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d019      	beq.n	80032ee <HAL_GPIO_Init+0x202>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a48      	ldr	r2, [pc, #288]	; (80033e0 <HAL_GPIO_Init+0x2f4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d013      	beq.n	80032ea <HAL_GPIO_Init+0x1fe>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a47      	ldr	r2, [pc, #284]	; (80033e4 <HAL_GPIO_Init+0x2f8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00d      	beq.n	80032e6 <HAL_GPIO_Init+0x1fa>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a46      	ldr	r2, [pc, #280]	; (80033e8 <HAL_GPIO_Init+0x2fc>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d007      	beq.n	80032e2 <HAL_GPIO_Init+0x1f6>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a45      	ldr	r2, [pc, #276]	; (80033ec <HAL_GPIO_Init+0x300>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d101      	bne.n	80032de <HAL_GPIO_Init+0x1f2>
 80032da:	2304      	movs	r3, #4
 80032dc:	e008      	b.n	80032f0 <HAL_GPIO_Init+0x204>
 80032de:	2307      	movs	r3, #7
 80032e0:	e006      	b.n	80032f0 <HAL_GPIO_Init+0x204>
 80032e2:	2303      	movs	r3, #3
 80032e4:	e004      	b.n	80032f0 <HAL_GPIO_Init+0x204>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e002      	b.n	80032f0 <HAL_GPIO_Init+0x204>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <HAL_GPIO_Init+0x204>
 80032ee:	2300      	movs	r3, #0
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	f002 0203 	and.w	r2, r2, #3
 80032f6:	0092      	lsls	r2, r2, #2
 80032f8:	4093      	lsls	r3, r2
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003300:	4935      	ldr	r1, [pc, #212]	; (80033d8 <HAL_GPIO_Init+0x2ec>)
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	089b      	lsrs	r3, r3, #2
 8003306:	3302      	adds	r3, #2
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800330e:	4b38      	ldr	r3, [pc, #224]	; (80033f0 <HAL_GPIO_Init+0x304>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	43db      	mvns	r3, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003332:	4a2f      	ldr	r2, [pc, #188]	; (80033f0 <HAL_GPIO_Init+0x304>)
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003338:	4b2d      	ldr	r3, [pc, #180]	; (80033f0 <HAL_GPIO_Init+0x304>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	43db      	mvns	r3, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800335c:	4a24      	ldr	r2, [pc, #144]	; (80033f0 <HAL_GPIO_Init+0x304>)
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003362:	4b23      	ldr	r3, [pc, #140]	; (80033f0 <HAL_GPIO_Init+0x304>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	43db      	mvns	r3, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4013      	ands	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003386:	4a1a      	ldr	r2, [pc, #104]	; (80033f0 <HAL_GPIO_Init+0x304>)
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800338c:	4b18      	ldr	r3, [pc, #96]	; (80033f0 <HAL_GPIO_Init+0x304>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033b0:	4a0f      	ldr	r2, [pc, #60]	; (80033f0 <HAL_GPIO_Init+0x304>)
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3301      	adds	r3, #1
 80033ba:	61fb      	str	r3, [r7, #28]
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	2b0f      	cmp	r3, #15
 80033c0:	f67f aea2 	bls.w	8003108 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033c4:	bf00      	nop
 80033c6:	bf00      	nop
 80033c8:	3724      	adds	r7, #36	; 0x24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40013800 	.word	0x40013800
 80033dc:	40020000 	.word	0x40020000
 80033e0:	40020400 	.word	0x40020400
 80033e4:	40020800 	.word	0x40020800
 80033e8:	40020c00 	.word	0x40020c00
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40013c00 	.word	0x40013c00

080033f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	807b      	strh	r3, [r7, #2]
 8003400:	4613      	mov	r3, r2
 8003402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003404:	787b      	ldrb	r3, [r7, #1]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800340a:	887a      	ldrh	r2, [r7, #2]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003410:	e003      	b.n	800341a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003412:	887b      	ldrh	r3, [r7, #2]
 8003414:	041a      	lsls	r2, r3, #16
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	619a      	str	r2, [r3, #24]
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e034      	b.n	80034a2 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003440:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f245 5255 	movw	r2, #21845	; 0x5555
 800344a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6852      	ldr	r2, [r2, #4]
 8003454:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6892      	ldr	r2, [r2, #8]
 800345e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003460:	f7ff f83a 	bl	80024d8 <HAL_GetTick>
 8003464:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003466:	e00f      	b.n	8003488 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003468:	f7ff f836 	bl	80024d8 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b31      	cmp	r3, #49	; 0x31
 8003474:	d908      	bls.n	8003488 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e00c      	b.n	80034a2 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1e8      	bne.n	8003468 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800349e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
	...

080034ac <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80034b0:	4b06      	ldr	r3, [pc, #24]	; (80034cc <HAL_PWR_PVD_IRQHandler+0x20>)
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d005      	beq.n	80034c8 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80034bc:	f000 f808 	bl	80034d0 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80034c0:	4b02      	ldr	r3, [pc, #8]	; (80034cc <HAL_PWR_PVD_IRQHandler+0x20>)
 80034c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80034c6:	615a      	str	r2, [r3, #20]
  }
}
 80034c8:	bf00      	nop
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40013c00 	.word	0x40013c00

080034d0 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80034d4:	bf00      	nop
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e267      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d075      	beq.n	80035ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034fe:	4b88      	ldr	r3, [pc, #544]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b04      	cmp	r3, #4
 8003508:	d00c      	beq.n	8003524 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800350a:	4b85      	ldr	r3, [pc, #532]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003512:	2b08      	cmp	r3, #8
 8003514:	d112      	bne.n	800353c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003516:	4b82      	ldr	r3, [pc, #520]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003522:	d10b      	bne.n	800353c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003524:	4b7e      	ldr	r3, [pc, #504]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d05b      	beq.n	80035e8 <HAL_RCC_OscConfig+0x108>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d157      	bne.n	80035e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e242      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003544:	d106      	bne.n	8003554 <HAL_RCC_OscConfig+0x74>
 8003546:	4b76      	ldr	r3, [pc, #472]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a75      	ldr	r2, [pc, #468]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 800354c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	e01d      	b.n	8003590 <HAL_RCC_OscConfig+0xb0>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800355c:	d10c      	bne.n	8003578 <HAL_RCC_OscConfig+0x98>
 800355e:	4b70      	ldr	r3, [pc, #448]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a6f      	ldr	r2, [pc, #444]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	4b6d      	ldr	r3, [pc, #436]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a6c      	ldr	r2, [pc, #432]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e00b      	b.n	8003590 <HAL_RCC_OscConfig+0xb0>
 8003578:	4b69      	ldr	r3, [pc, #420]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a68      	ldr	r2, [pc, #416]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 800357e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	4b66      	ldr	r3, [pc, #408]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a65      	ldr	r2, [pc, #404]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 800358a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800358e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d013      	beq.n	80035c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003598:	f7fe ff9e 	bl	80024d8 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035a0:	f7fe ff9a 	bl	80024d8 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b64      	cmp	r3, #100	; 0x64
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e207      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b2:	4b5b      	ldr	r3, [pc, #364]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0xc0>
 80035be:	e014      	b.n	80035ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c0:	f7fe ff8a 	bl	80024d8 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c8:	f7fe ff86 	bl	80024d8 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b64      	cmp	r3, #100	; 0x64
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e1f3      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035da:	4b51      	ldr	r3, [pc, #324]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0xe8>
 80035e6:	e000      	b.n	80035ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d063      	beq.n	80036be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035f6:	4b4a      	ldr	r3, [pc, #296]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00b      	beq.n	800361a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003602:	4b47      	ldr	r3, [pc, #284]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800360a:	2b08      	cmp	r3, #8
 800360c:	d11c      	bne.n	8003648 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800360e:	4b44      	ldr	r3, [pc, #272]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d116      	bne.n	8003648 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361a:	4b41      	ldr	r3, [pc, #260]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_RCC_OscConfig+0x152>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d001      	beq.n	8003632 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e1c7      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003632:	4b3b      	ldr	r3, [pc, #236]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4937      	ldr	r1, [pc, #220]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003642:	4313      	orrs	r3, r2
 8003644:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003646:	e03a      	b.n	80036be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d020      	beq.n	8003692 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003650:	4b34      	ldr	r3, [pc, #208]	; (8003724 <HAL_RCC_OscConfig+0x244>)
 8003652:	2201      	movs	r2, #1
 8003654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003656:	f7fe ff3f 	bl	80024d8 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800365e:	f7fe ff3b 	bl	80024d8 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e1a8      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003670:	4b2b      	ldr	r3, [pc, #172]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f0      	beq.n	800365e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367c:	4b28      	ldr	r3, [pc, #160]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	4925      	ldr	r1, [pc, #148]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 800368c:	4313      	orrs	r3, r2
 800368e:	600b      	str	r3, [r1, #0]
 8003690:	e015      	b.n	80036be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003692:	4b24      	ldr	r3, [pc, #144]	; (8003724 <HAL_RCC_OscConfig+0x244>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fe ff1e 	bl	80024d8 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a0:	f7fe ff1a 	bl	80024d8 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e187      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b2:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d036      	beq.n	8003738 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d016      	beq.n	8003700 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036d2:	4b15      	ldr	r3, [pc, #84]	; (8003728 <HAL_RCC_OscConfig+0x248>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d8:	f7fe fefe 	bl	80024d8 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036e0:	f7fe fefa 	bl	80024d8 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e167      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f2:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 80036f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0f0      	beq.n	80036e0 <HAL_RCC_OscConfig+0x200>
 80036fe:	e01b      	b.n	8003738 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003700:	4b09      	ldr	r3, [pc, #36]	; (8003728 <HAL_RCC_OscConfig+0x248>)
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003706:	f7fe fee7 	bl	80024d8 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370c:	e00e      	b.n	800372c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800370e:	f7fe fee3 	bl	80024d8 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d907      	bls.n	800372c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e150      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
 8003720:	40023800 	.word	0x40023800
 8003724:	42470000 	.word	0x42470000
 8003728:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800372c:	4b88      	ldr	r3, [pc, #544]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 800372e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1ea      	bne.n	800370e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8097 	beq.w	8003874 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003746:	2300      	movs	r3, #0
 8003748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800374a:	4b81      	ldr	r3, [pc, #516]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10f      	bne.n	8003776 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003756:	2300      	movs	r3, #0
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	4b7d      	ldr	r3, [pc, #500]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	4a7c      	ldr	r2, [pc, #496]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 8003760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003764:	6413      	str	r3, [r2, #64]	; 0x40
 8003766:	4b7a      	ldr	r3, [pc, #488]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376e:	60bb      	str	r3, [r7, #8]
 8003770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003772:	2301      	movs	r3, #1
 8003774:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003776:	4b77      	ldr	r3, [pc, #476]	; (8003954 <HAL_RCC_OscConfig+0x474>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d118      	bne.n	80037b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003782:	4b74      	ldr	r3, [pc, #464]	; (8003954 <HAL_RCC_OscConfig+0x474>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a73      	ldr	r2, [pc, #460]	; (8003954 <HAL_RCC_OscConfig+0x474>)
 8003788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800378e:	f7fe fea3 	bl	80024d8 <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003796:	f7fe fe9f 	bl	80024d8 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e10c      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a8:	4b6a      	ldr	r3, [pc, #424]	; (8003954 <HAL_RCC_OscConfig+0x474>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0f0      	beq.n	8003796 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d106      	bne.n	80037ca <HAL_RCC_OscConfig+0x2ea>
 80037bc:	4b64      	ldr	r3, [pc, #400]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c0:	4a63      	ldr	r2, [pc, #396]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	6713      	str	r3, [r2, #112]	; 0x70
 80037c8:	e01c      	b.n	8003804 <HAL_RCC_OscConfig+0x324>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b05      	cmp	r3, #5
 80037d0:	d10c      	bne.n	80037ec <HAL_RCC_OscConfig+0x30c>
 80037d2:	4b5f      	ldr	r3, [pc, #380]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d6:	4a5e      	ldr	r2, [pc, #376]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 80037d8:	f043 0304 	orr.w	r3, r3, #4
 80037dc:	6713      	str	r3, [r2, #112]	; 0x70
 80037de:	4b5c      	ldr	r3, [pc, #368]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e2:	4a5b      	ldr	r2, [pc, #364]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ea:	e00b      	b.n	8003804 <HAL_RCC_OscConfig+0x324>
 80037ec:	4b58      	ldr	r3, [pc, #352]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f0:	4a57      	ldr	r2, [pc, #348]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 80037f2:	f023 0301 	bic.w	r3, r3, #1
 80037f6:	6713      	str	r3, [r2, #112]	; 0x70
 80037f8:	4b55      	ldr	r3, [pc, #340]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fc:	4a54      	ldr	r2, [pc, #336]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 80037fe:	f023 0304 	bic.w	r3, r3, #4
 8003802:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d015      	beq.n	8003838 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380c:	f7fe fe64 	bl	80024d8 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003812:	e00a      	b.n	800382a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003814:	f7fe fe60 	bl	80024d8 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003822:	4293      	cmp	r3, r2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e0cb      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382a:	4b49      	ldr	r3, [pc, #292]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0ee      	beq.n	8003814 <HAL_RCC_OscConfig+0x334>
 8003836:	e014      	b.n	8003862 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003838:	f7fe fe4e 	bl	80024d8 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800383e:	e00a      	b.n	8003856 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003840:	f7fe fe4a 	bl	80024d8 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f241 3288 	movw	r2, #5000	; 0x1388
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e0b5      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003856:	4b3e      	ldr	r3, [pc, #248]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1ee      	bne.n	8003840 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003862:	7dfb      	ldrb	r3, [r7, #23]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d105      	bne.n	8003874 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003868:	4b39      	ldr	r3, [pc, #228]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	4a38      	ldr	r2, [pc, #224]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 800386e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003872:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 80a1 	beq.w	80039c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800387e:	4b34      	ldr	r3, [pc, #208]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	2b08      	cmp	r3, #8
 8003888:	d05c      	beq.n	8003944 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d141      	bne.n	8003916 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003892:	4b31      	ldr	r3, [pc, #196]	; (8003958 <HAL_RCC_OscConfig+0x478>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003898:	f7fe fe1e 	bl	80024d8 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a0:	f7fe fe1a 	bl	80024d8 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e087      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b2:	4b27      	ldr	r3, [pc, #156]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69da      	ldr	r2, [r3, #28]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	019b      	lsls	r3, r3, #6
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	085b      	lsrs	r3, r3, #1
 80038d6:	3b01      	subs	r3, #1
 80038d8:	041b      	lsls	r3, r3, #16
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	061b      	lsls	r3, r3, #24
 80038e2:	491b      	ldr	r1, [pc, #108]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e8:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <HAL_RCC_OscConfig+0x478>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ee:	f7fe fdf3 	bl	80024d8 <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f6:	f7fe fdef 	bl	80024d8 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e05c      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003908:	4b11      	ldr	r3, [pc, #68]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0f0      	beq.n	80038f6 <HAL_RCC_OscConfig+0x416>
 8003914:	e054      	b.n	80039c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003916:	4b10      	ldr	r3, [pc, #64]	; (8003958 <HAL_RCC_OscConfig+0x478>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391c:	f7fe fddc 	bl	80024d8 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003924:	f7fe fdd8 	bl	80024d8 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e045      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003936:	4b06      	ldr	r3, [pc, #24]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x444>
 8003942:	e03d      	b.n	80039c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d107      	bne.n	800395c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e038      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
 8003950:	40023800 	.word	0x40023800
 8003954:	40007000 	.word	0x40007000
 8003958:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800395c:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <HAL_RCC_OscConfig+0x4ec>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d028      	beq.n	80039bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003974:	429a      	cmp	r2, r3
 8003976:	d121      	bne.n	80039bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d11a      	bne.n	80039bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800398c:	4013      	ands	r3, r2
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003992:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003994:	4293      	cmp	r3, r2
 8003996:	d111      	bne.n	80039bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a2:	085b      	lsrs	r3, r3, #1
 80039a4:	3b01      	subs	r3, #1
 80039a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d107      	bne.n	80039bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d001      	beq.n	80039c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40023800 	.word	0x40023800

080039d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e0cc      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039e4:	4b68      	ldr	r3, [pc, #416]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d90c      	bls.n	8003a0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f2:	4b65      	ldr	r3, [pc, #404]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fa:	4b63      	ldr	r3, [pc, #396]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0b8      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d020      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a24:	4b59      	ldr	r3, [pc, #356]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	4a58      	ldr	r2, [pc, #352]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a3c:	4b53      	ldr	r3, [pc, #332]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4a52      	ldr	r2, [pc, #328]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a48:	4b50      	ldr	r3, [pc, #320]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	494d      	ldr	r1, [pc, #308]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d044      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d107      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6e:	4b47      	ldr	r3, [pc, #284]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d119      	bne.n	8003aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e07f      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d003      	beq.n	8003a8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d107      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8e:	4b3f      	ldr	r3, [pc, #252]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e06f      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9e:	4b3b      	ldr	r3, [pc, #236]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e067      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aae:	4b37      	ldr	r3, [pc, #220]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f023 0203 	bic.w	r2, r3, #3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	4934      	ldr	r1, [pc, #208]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ac0:	f7fe fd0a 	bl	80024d8 <HAL_GetTick>
 8003ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac6:	e00a      	b.n	8003ade <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac8:	f7fe fd06 	bl	80024d8 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e04f      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ade:	4b2b      	ldr	r3, [pc, #172]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 020c 	and.w	r2, r3, #12
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d1eb      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003af0:	4b25      	ldr	r3, [pc, #148]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d20c      	bcs.n	8003b18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afe:	4b22      	ldr	r3, [pc, #136]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b06:	4b20      	ldr	r3, [pc, #128]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e032      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d008      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b24:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4916      	ldr	r1, [pc, #88]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b42:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	490e      	ldr	r1, [pc, #56]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b56:	f000 f821 	bl	8003b9c <HAL_RCC_GetSysClockFreq>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	490a      	ldr	r1, [pc, #40]	; (8003b90 <HAL_RCC_ClockConfig+0x1c0>)
 8003b68:	5ccb      	ldrb	r3, [r1, r3]
 8003b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6e:	4a09      	ldr	r2, [pc, #36]	; (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b72:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <HAL_RCC_ClockConfig+0x1c8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fe f882 	bl	8001c80 <HAL_InitTick>

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40023c00 	.word	0x40023c00
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	08008b28 	.word	0x08008b28
 8003b94:	20000000 	.word	0x20000000
 8003b98:	20000004 	.word	0x20000004

08003b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba0:	b090      	sub	sp, #64	; 0x40
 8003ba2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ba8:	2300      	movs	r3, #0
 8003baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bac:	2300      	movs	r3, #0
 8003bae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bb4:	4b59      	ldr	r3, [pc, #356]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 030c 	and.w	r3, r3, #12
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d00d      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0x40>
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	f200 80a1 	bhi.w	8003d08 <HAL_RCC_GetSysClockFreq+0x16c>
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d003      	beq.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bce:	e09b      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bd0:	4b53      	ldr	r3, [pc, #332]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bd2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003bd4:	e09b      	b.n	8003d0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bd6:	4b53      	ldr	r3, [pc, #332]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bda:	e098      	b.n	8003d0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bdc:	4b4f      	ldr	r3, [pc, #316]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003be6:	4b4d      	ldr	r3, [pc, #308]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d028      	beq.n	8003c44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf2:	4b4a      	ldr	r3, [pc, #296]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	099b      	lsrs	r3, r3, #6
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	623b      	str	r3, [r7, #32]
 8003bfc:	627a      	str	r2, [r7, #36]	; 0x24
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c04:	2100      	movs	r1, #0
 8003c06:	4b47      	ldr	r3, [pc, #284]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c08:	fb03 f201 	mul.w	r2, r3, r1
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	fb00 f303 	mul.w	r3, r0, r3
 8003c12:	4413      	add	r3, r2
 8003c14:	4a43      	ldr	r2, [pc, #268]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c16:	fba0 1202 	umull	r1, r2, r0, r2
 8003c1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c1c:	460a      	mov	r2, r1
 8003c1e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c22:	4413      	add	r3, r2
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c28:	2200      	movs	r2, #0
 8003c2a:	61bb      	str	r3, [r7, #24]
 8003c2c:	61fa      	str	r2, [r7, #28]
 8003c2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c36:	f7fc fad3 	bl	80001e0 <__aeabi_uldivmod>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4613      	mov	r3, r2
 8003c40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c42:	e053      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c44:	4b35      	ldr	r3, [pc, #212]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	099b      	lsrs	r3, r3, #6
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	617a      	str	r2, [r7, #20]
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c56:	f04f 0b00 	mov.w	fp, #0
 8003c5a:	4652      	mov	r2, sl
 8003c5c:	465b      	mov	r3, fp
 8003c5e:	f04f 0000 	mov.w	r0, #0
 8003c62:	f04f 0100 	mov.w	r1, #0
 8003c66:	0159      	lsls	r1, r3, #5
 8003c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c6c:	0150      	lsls	r0, r2, #5
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	ebb2 080a 	subs.w	r8, r2, sl
 8003c76:	eb63 090b 	sbc.w	r9, r3, fp
 8003c7a:	f04f 0200 	mov.w	r2, #0
 8003c7e:	f04f 0300 	mov.w	r3, #0
 8003c82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c8e:	ebb2 0408 	subs.w	r4, r2, r8
 8003c92:	eb63 0509 	sbc.w	r5, r3, r9
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	f04f 0300 	mov.w	r3, #0
 8003c9e:	00eb      	lsls	r3, r5, #3
 8003ca0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ca4:	00e2      	lsls	r2, r4, #3
 8003ca6:	4614      	mov	r4, r2
 8003ca8:	461d      	mov	r5, r3
 8003caa:	eb14 030a 	adds.w	r3, r4, sl
 8003cae:	603b      	str	r3, [r7, #0]
 8003cb0:	eb45 030b 	adc.w	r3, r5, fp
 8003cb4:	607b      	str	r3, [r7, #4]
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	028b      	lsls	r3, r1, #10
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ccc:	4621      	mov	r1, r4
 8003cce:	028a      	lsls	r2, r1, #10
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	60fa      	str	r2, [r7, #12]
 8003cdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ce0:	f7fc fa7e 	bl	80001e0 <__aeabi_uldivmod>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4613      	mov	r3, r2
 8003cea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cec:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	0c1b      	lsrs	r3, r3, #16
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003cfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d06:	e002      	b.n	8003d0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3740      	adds	r7, #64	; 0x40
 8003d14:	46bd      	mov	sp, r7
 8003d16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	00f42400 	.word	0x00f42400
 8003d24:	017d7840 	.word	0x017d7840

08003d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d2c:	4b03      	ldr	r3, [pc, #12]	; (8003d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	20000000 	.word	0x20000000

08003d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d44:	f7ff fff0 	bl	8003d28 <HAL_RCC_GetHCLKFreq>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	0a9b      	lsrs	r3, r3, #10
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	4903      	ldr	r1, [pc, #12]	; (8003d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d56:	5ccb      	ldrb	r3, [r1, r3]
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40023800 	.word	0x40023800
 8003d64:	08008b38 	.word	0x08008b38

08003d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d6c:	f7ff ffdc 	bl	8003d28 <HAL_RCC_GetHCLKFreq>
 8003d70:	4602      	mov	r2, r0
 8003d72:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	0b5b      	lsrs	r3, r3, #13
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	4903      	ldr	r1, [pc, #12]	; (8003d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d7e:	5ccb      	ldrb	r3, [r1, r3]
 8003d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	08008b38 	.word	0x08008b38

08003d90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	220f      	movs	r2, #15
 8003d9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003da0:	4b12      	ldr	r3, [pc, #72]	; (8003dec <HAL_RCC_GetClockConfig+0x5c>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 0203 	and.w	r2, r3, #3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003dac:	4b0f      	ldr	r3, [pc, #60]	; (8003dec <HAL_RCC_GetClockConfig+0x5c>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003db8:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <HAL_RCC_GetClockConfig+0x5c>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003dc4:	4b09      	ldr	r3, [pc, #36]	; (8003dec <HAL_RCC_GetClockConfig+0x5c>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	08db      	lsrs	r3, r3, #3
 8003dca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dd2:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <HAL_RCC_GetClockConfig+0x60>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0207 	and.w	r2, r3, #7
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	601a      	str	r2, [r3, #0]
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40023800 	.word	0x40023800
 8003df0:	40023c00 	.word	0x40023c00

08003df4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e09b      	b.n	8003f3e <HAL_SPI_Init+0x14a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d108      	bne.n	8003e20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e16:	d009      	beq.n	8003e2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	61da      	str	r2, [r3, #28]
 8003e1e:	e005      	b.n	8003e2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d126      	bne.n	8003e8c <HAL_SPI_Init+0x98>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a3f      	ldr	r2, [pc, #252]	; (8003f48 <HAL_SPI_Init+0x154>)
 8003e4a:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a3f      	ldr	r2, [pc, #252]	; (8003f4c <HAL_SPI_Init+0x158>)
 8003e50:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a3e      	ldr	r2, [pc, #248]	; (8003f50 <HAL_SPI_Init+0x15c>)
 8003e56:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a3e      	ldr	r2, [pc, #248]	; (8003f54 <HAL_SPI_Init+0x160>)
 8003e5c:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a3d      	ldr	r2, [pc, #244]	; (8003f58 <HAL_SPI_Init+0x164>)
 8003e62:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a3d      	ldr	r2, [pc, #244]	; (8003f5c <HAL_SPI_Init+0x168>)
 8003e68:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a3c      	ldr	r2, [pc, #240]	; (8003f60 <HAL_SPI_Init+0x16c>)
 8003e6e:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a3c      	ldr	r2, [pc, #240]	; (8003f64 <HAL_SPI_Init+0x170>)
 8003e74:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d102      	bne.n	8003e84 <HAL_SPI_Init+0x90>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a39      	ldr	r2, [pc, #228]	; (8003f68 <HAL_SPI_Init+0x174>)
 8003e82:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ea2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef0:	ea42 0103 	orr.w	r1, r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	0c1b      	lsrs	r3, r3, #16
 8003f0a:	f003 0104 	and.w	r1, r3, #4
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	f003 0210 	and.w	r2, r3, #16
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	0800416d 	.word	0x0800416d
 8003f4c:	08004181 	.word	0x08004181
 8003f50:	08004195 	.word	0x08004195
 8003f54:	080041a9 	.word	0x080041a9
 8003f58:	080041bd 	.word	0x080041bd
 8003f5c:	080041d1 	.word	0x080041d1
 8003f60:	080041e5 	.word	0x080041e5
 8003f64:	080041f9 	.word	0x080041f9
 8003f68:	08001a71 	.word	0x08001a71

08003f6c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	099b      	lsrs	r3, r3, #6
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10f      	bne.n	8003fb0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	099b      	lsrs	r3, r3, #6
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d004      	beq.n	8003fb0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	4798      	blx	r3
    return;
 8003fae:	e0d8      	b.n	8004162 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	085b      	lsrs	r3, r3, #1
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <HAL_SPI_IRQHandler+0x66>
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	09db      	lsrs	r3, r3, #7
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d004      	beq.n	8003fd2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	4798      	blx	r3
    return;
 8003fd0:	e0c7      	b.n	8004162 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	095b      	lsrs	r3, r3, #5
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_SPI_IRQHandler+0x8c>
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	099b      	lsrs	r3, r3, #6
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	0a1b      	lsrs	r3, r3, #8
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 80b5 	beq.w	8004162 <HAL_SPI_IRQHandler+0x1f6>
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 80ae 	beq.w	8004162 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	099b      	lsrs	r3, r3, #6
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d023      	beq.n	800405a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b03      	cmp	r3, #3
 800401c:	d011      	beq.n	8004042 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004022:	f043 0204 	orr.w	r2, r3, #4
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800402a:	2300      	movs	r3, #0
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	e00b      	b.n	800405a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004042:	2300      	movs	r3, #0
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	693b      	ldr	r3, [r7, #16]
        return;
 8004058:	e083      	b.n	8004162 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	095b      	lsrs	r3, r3, #5
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d014      	beq.n	8004090 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406a:	f043 0201 	orr.w	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	0a1b      	lsrs	r3, r3, #8
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00c      	beq.n	80040b6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a0:	f043 0208 	orr.w	r2, r3, #8
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80040a8:	2300      	movs	r3, #0
 80040aa:	60bb      	str	r3, [r7, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	60bb      	str	r3, [r7, #8]
 80040b4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d050      	beq.n	8004160 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040cc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d104      	bne.n	80040ea <HAL_SPI_IRQHandler+0x17e>
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d034      	beq.n	8004154 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0203 	bic.w	r2, r2, #3
 80040f8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d011      	beq.n	8004126 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004106:	4a18      	ldr	r2, [pc, #96]	; (8004168 <HAL_SPI_IRQHandler+0x1fc>)
 8004108:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410e:	4618      	mov	r0, r3
 8004110:	f7fe fe22 	bl	8002d58 <HAL_DMA_Abort_IT>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d005      	beq.n	8004126 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800412a:	2b00      	cmp	r3, #0
 800412c:	d017      	beq.n	800415e <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004132:	4a0d      	ldr	r2, [pc, #52]	; (8004168 <HAL_SPI_IRQHandler+0x1fc>)
 8004134:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe fe0c 	bl	8002d58 <HAL_DMA_Abort_IT>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00b      	beq.n	800415e <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004152:	e004      	b.n	800415e <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800415c:	e000      	b.n	8004160 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 800415e:	bf00      	nop
    return;
 8004160:	bf00      	nop
  }
}
 8004162:	3720      	adds	r7, #32
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	0800420d 	.word	0x0800420d

0800416c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004218:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800422e:	bf00      	nop
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e04c      	b.n	80042e4 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d111      	bne.n	800427a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fc8e 	bl	8004b80 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004268:	2b00      	cmp	r3, #0
 800426a:	d102      	bne.n	8004272 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a1f      	ldr	r2, [pc, #124]	; (80042ec <HAL_TIM_Base_Init+0xb4>)
 8004270:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2202      	movs	r2, #2
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3304      	adds	r3, #4
 800428a:	4619      	mov	r1, r3
 800428c:	4610      	mov	r0, r2
 800428e:	f000 fb5d 	bl	800494c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	08002115 	.word	0x08002115

080042f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b01      	cmp	r3, #1
 8004302:	d001      	beq.n	8004308 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e03c      	b.n	8004382 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a1e      	ldr	r2, [pc, #120]	; (8004390 <HAL_TIM_Base_Start+0xa0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d018      	beq.n	800434c <HAL_TIM_Base_Start+0x5c>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004322:	d013      	beq.n	800434c <HAL_TIM_Base_Start+0x5c>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1a      	ldr	r2, [pc, #104]	; (8004394 <HAL_TIM_Base_Start+0xa4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00e      	beq.n	800434c <HAL_TIM_Base_Start+0x5c>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a19      	ldr	r2, [pc, #100]	; (8004398 <HAL_TIM_Base_Start+0xa8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d009      	beq.n	800434c <HAL_TIM_Base_Start+0x5c>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a17      	ldr	r2, [pc, #92]	; (800439c <HAL_TIM_Base_Start+0xac>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d004      	beq.n	800434c <HAL_TIM_Base_Start+0x5c>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a16      	ldr	r2, [pc, #88]	; (80043a0 <HAL_TIM_Base_Start+0xb0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d111      	bne.n	8004370 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b06      	cmp	r3, #6
 800435c:	d010      	beq.n	8004380 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f042 0201 	orr.w	r2, r2, #1
 800436c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436e:	e007      	b.n	8004380 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40010000 	.word	0x40010000
 8004394:	40000400 	.word	0x40000400
 8004398:	40000800 	.word	0x40000800
 800439c:	40000c00 	.word	0x40000c00
 80043a0:	40014000 	.word	0x40014000

080043a4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6a1a      	ldr	r2, [r3, #32]
 80043b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80043b6:	4013      	ands	r3, r2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10f      	bne.n	80043dc <HAL_TIM_Base_Stop+0x38>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6a1a      	ldr	r2, [r3, #32]
 80043c2:	f240 4344 	movw	r3, #1092	; 0x444
 80043c6:	4013      	ands	r3, r2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d107      	bne.n	80043dc <HAL_TIM_Base_Stop+0x38>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0201 	bic.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b01      	cmp	r3, #1
 8004406:	d001      	beq.n	800440c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e044      	b.n	8004496 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0201 	orr.w	r2, r2, #1
 8004422:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a1e      	ldr	r2, [pc, #120]	; (80044a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d018      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x6c>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004436:	d013      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x6c>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a1a      	ldr	r2, [pc, #104]	; (80044a8 <HAL_TIM_Base_Start_IT+0xb4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00e      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x6c>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a19      	ldr	r2, [pc, #100]	; (80044ac <HAL_TIM_Base_Start_IT+0xb8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d009      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x6c>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a17      	ldr	r2, [pc, #92]	; (80044b0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d004      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x6c>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a16      	ldr	r2, [pc, #88]	; (80044b4 <HAL_TIM_Base_Start_IT+0xc0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d111      	bne.n	8004484 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b06      	cmp	r3, #6
 8004470:	d010      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 0201 	orr.w	r2, r2, #1
 8004480:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004482:	e007      	b.n	8004494 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40010000 	.word	0x40010000
 80044a8:	40000400 	.word	0x40000400
 80044ac:	40000800 	.word	0x40000800
 80044b0:	40000c00 	.word	0x40000c00
 80044b4:	40014000 	.word	0x40014000

080044b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d128      	bne.n	8004520 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d121      	bne.n	8004520 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f06f 0202 	mvn.w	r2, #2
 80044e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d005      	beq.n	8004506 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	4798      	blx	r3
 8004504:	e009      	b.n	800451a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b04      	cmp	r3, #4
 800452c:	d128      	bne.n	8004580 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b04      	cmp	r3, #4
 800453a:	d121      	bne.n	8004580 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0204 	mvn.w	r2, #4
 8004544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2202      	movs	r2, #2
 800454a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	4798      	blx	r3
 8004564:	e009      	b.n	800457a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b08      	cmp	r3, #8
 800458c:	d128      	bne.n	80045e0 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b08      	cmp	r3, #8
 800459a:	d121      	bne.n	80045e0 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0208 	mvn.w	r2, #8
 80045a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2204      	movs	r2, #4
 80045aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d005      	beq.n	80045c6 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	4798      	blx	r3
 80045c4:	e009      	b.n	80045da <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f003 0310 	and.w	r3, r3, #16
 80045ea:	2b10      	cmp	r3, #16
 80045ec:	d128      	bne.n	8004640 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	2b10      	cmp	r3, #16
 80045fa:	d121      	bne.n	8004640 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f06f 0210 	mvn.w	r2, #16
 8004604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2208      	movs	r2, #8
 800460a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	4798      	blx	r3
 8004624:	e009      	b.n	800463a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b01      	cmp	r3, #1
 800464c:	d110      	bne.n	8004670 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b01      	cmp	r3, #1
 800465a:	d109      	bne.n	8004670 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f06f 0201 	mvn.w	r2, #1
 8004664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467a:	2b80      	cmp	r3, #128	; 0x80
 800467c:	d110      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004688:	2b80      	cmp	r3, #128	; 0x80
 800468a:	d109      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046aa:	2b40      	cmp	r3, #64	; 0x40
 80046ac:	d110      	bne.n	80046d0 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b8:	2b40      	cmp	r3, #64	; 0x40
 80046ba:	d109      	bne.n	80046d0 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f003 0320 	and.w	r3, r3, #32
 80046da:	2b20      	cmp	r3, #32
 80046dc:	d110      	bne.n	8004700 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b20      	cmp	r3, #32
 80046ea:	d109      	bne.n	8004700 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f06f 0220 	mvn.w	r2, #32
 80046f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004700:	bf00      	nop
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_TIM_ConfigClockSource+0x1c>
 8004720:	2302      	movs	r3, #2
 8004722:	e0b4      	b.n	800488e <HAL_TIM_ConfigClockSource+0x186>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800474a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800475c:	d03e      	beq.n	80047dc <HAL_TIM_ConfigClockSource+0xd4>
 800475e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004762:	f200 8087 	bhi.w	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 8004766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476a:	f000 8086 	beq.w	800487a <HAL_TIM_ConfigClockSource+0x172>
 800476e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004772:	d87f      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 8004774:	2b70      	cmp	r3, #112	; 0x70
 8004776:	d01a      	beq.n	80047ae <HAL_TIM_ConfigClockSource+0xa6>
 8004778:	2b70      	cmp	r3, #112	; 0x70
 800477a:	d87b      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 800477c:	2b60      	cmp	r3, #96	; 0x60
 800477e:	d050      	beq.n	8004822 <HAL_TIM_ConfigClockSource+0x11a>
 8004780:	2b60      	cmp	r3, #96	; 0x60
 8004782:	d877      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 8004784:	2b50      	cmp	r3, #80	; 0x50
 8004786:	d03c      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0xfa>
 8004788:	2b50      	cmp	r3, #80	; 0x50
 800478a:	d873      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 800478c:	2b40      	cmp	r3, #64	; 0x40
 800478e:	d058      	beq.n	8004842 <HAL_TIM_ConfigClockSource+0x13a>
 8004790:	2b40      	cmp	r3, #64	; 0x40
 8004792:	d86f      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 8004794:	2b30      	cmp	r3, #48	; 0x30
 8004796:	d064      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x15a>
 8004798:	2b30      	cmp	r3, #48	; 0x30
 800479a:	d86b      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 800479c:	2b20      	cmp	r3, #32
 800479e:	d060      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x15a>
 80047a0:	2b20      	cmp	r3, #32
 80047a2:	d867      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d05c      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x15a>
 80047a8:	2b10      	cmp	r3, #16
 80047aa:	d05a      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x15a>
 80047ac:	e062      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	6899      	ldr	r1, [r3, #8]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f000 f9bf 	bl	8004b40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	609a      	str	r2, [r3, #8]
      break;
 80047da:	e04f      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6818      	ldr	r0, [r3, #0]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	6899      	ldr	r1, [r3, #8]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f000 f9a8 	bl	8004b40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047fe:	609a      	str	r2, [r3, #8]
      break;
 8004800:	e03c      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6818      	ldr	r0, [r3, #0]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	6859      	ldr	r1, [r3, #4]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	461a      	mov	r2, r3
 8004810:	f000 f91c 	bl	8004a4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2150      	movs	r1, #80	; 0x50
 800481a:	4618      	mov	r0, r3
 800481c:	f000 f975 	bl	8004b0a <TIM_ITRx_SetConfig>
      break;
 8004820:	e02c      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6859      	ldr	r1, [r3, #4]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	461a      	mov	r2, r3
 8004830:	f000 f93b 	bl	8004aaa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2160      	movs	r1, #96	; 0x60
 800483a:	4618      	mov	r0, r3
 800483c:	f000 f965 	bl	8004b0a <TIM_ITRx_SetConfig>
      break;
 8004840:	e01c      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6818      	ldr	r0, [r3, #0]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	6859      	ldr	r1, [r3, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	461a      	mov	r2, r3
 8004850:	f000 f8fc 	bl	8004a4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2140      	movs	r1, #64	; 0x40
 800485a:	4618      	mov	r0, r3
 800485c:	f000 f955 	bl	8004b0a <TIM_ITRx_SetConfig>
      break;
 8004860:	e00c      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4619      	mov	r1, r3
 800486c:	4610      	mov	r0, r2
 800486e:	f000 f94c 	bl	8004b0a <TIM_ITRx_SetConfig>
      break;
 8004872:	e003      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	73fb      	strb	r3, [r7, #15]
      break;
 8004878:	e000      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800487a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800488c:	7bfb      	ldrb	r3, [r7, #15]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
	...

0800494c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a34      	ldr	r2, [pc, #208]	; (8004a30 <TIM_Base_SetConfig+0xe4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00f      	beq.n	8004984 <TIM_Base_SetConfig+0x38>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496a:	d00b      	beq.n	8004984 <TIM_Base_SetConfig+0x38>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a31      	ldr	r2, [pc, #196]	; (8004a34 <TIM_Base_SetConfig+0xe8>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d007      	beq.n	8004984 <TIM_Base_SetConfig+0x38>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a30      	ldr	r2, [pc, #192]	; (8004a38 <TIM_Base_SetConfig+0xec>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d003      	beq.n	8004984 <TIM_Base_SetConfig+0x38>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a2f      	ldr	r2, [pc, #188]	; (8004a3c <TIM_Base_SetConfig+0xf0>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d108      	bne.n	8004996 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a25      	ldr	r2, [pc, #148]	; (8004a30 <TIM_Base_SetConfig+0xe4>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d01b      	beq.n	80049d6 <TIM_Base_SetConfig+0x8a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a4:	d017      	beq.n	80049d6 <TIM_Base_SetConfig+0x8a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a22      	ldr	r2, [pc, #136]	; (8004a34 <TIM_Base_SetConfig+0xe8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d013      	beq.n	80049d6 <TIM_Base_SetConfig+0x8a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a21      	ldr	r2, [pc, #132]	; (8004a38 <TIM_Base_SetConfig+0xec>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d00f      	beq.n	80049d6 <TIM_Base_SetConfig+0x8a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a20      	ldr	r2, [pc, #128]	; (8004a3c <TIM_Base_SetConfig+0xf0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d00b      	beq.n	80049d6 <TIM_Base_SetConfig+0x8a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a1f      	ldr	r2, [pc, #124]	; (8004a40 <TIM_Base_SetConfig+0xf4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d007      	beq.n	80049d6 <TIM_Base_SetConfig+0x8a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a1e      	ldr	r2, [pc, #120]	; (8004a44 <TIM_Base_SetConfig+0xf8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d003      	beq.n	80049d6 <TIM_Base_SetConfig+0x8a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a1d      	ldr	r2, [pc, #116]	; (8004a48 <TIM_Base_SetConfig+0xfc>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d108      	bne.n	80049e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a08      	ldr	r2, [pc, #32]	; (8004a30 <TIM_Base_SetConfig+0xe4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d103      	bne.n	8004a1c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	691a      	ldr	r2, [r3, #16]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	615a      	str	r2, [r3, #20]
}
 8004a22:	bf00      	nop
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40010000 	.word	0x40010000
 8004a34:	40000400 	.word	0x40000400
 8004a38:	40000800 	.word	0x40000800
 8004a3c:	40000c00 	.word	0x40000c00
 8004a40:	40014000 	.word	0x40014000
 8004a44:	40014400 	.word	0x40014400
 8004a48:	40014800 	.word	0x40014800

08004a4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	f023 0201 	bic.w	r2, r3, #1
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f023 030a 	bic.w	r3, r3, #10
 8004a88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	621a      	str	r2, [r3, #32]
}
 8004a9e:	bf00      	nop
 8004aa0:	371c      	adds	r7, #28
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b087      	sub	sp, #28
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	f023 0210 	bic.w	r2, r3, #16
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ad4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	031b      	lsls	r3, r3, #12
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ae6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	011b      	lsls	r3, r3, #4
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	621a      	str	r2, [r3, #32]
}
 8004afe:	bf00      	nop
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b085      	sub	sp, #20
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f043 0307 	orr.w	r3, r3, #7
 8004b2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	609a      	str	r2, [r3, #8]
}
 8004b34:	bf00      	nop
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	021a      	lsls	r2, r3, #8
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	609a      	str	r2, [r3, #8]
}
 8004b74:	bf00      	nop
 8004b76:	371c      	adds	r7, #28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a1c      	ldr	r2, [pc, #112]	; (8004bfc <TIM_ResetCallback+0x7c>)
 8004b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a1b      	ldr	r2, [pc, #108]	; (8004c00 <TIM_ResetCallback+0x80>)
 8004b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a1a      	ldr	r2, [pc, #104]	; (8004c04 <TIM_ResetCallback+0x84>)
 8004b9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a19      	ldr	r2, [pc, #100]	; (8004c08 <TIM_ResetCallback+0x88>)
 8004ba4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a18      	ldr	r2, [pc, #96]	; (8004c0c <TIM_ResetCallback+0x8c>)
 8004bac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a17      	ldr	r2, [pc, #92]	; (8004c10 <TIM_ResetCallback+0x90>)
 8004bb4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a16      	ldr	r2, [pc, #88]	; (8004c14 <TIM_ResetCallback+0x94>)
 8004bbc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a15      	ldr	r2, [pc, #84]	; (8004c18 <TIM_ResetCallback+0x98>)
 8004bc4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a14      	ldr	r2, [pc, #80]	; (8004c1c <TIM_ResetCallback+0x9c>)
 8004bcc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a13      	ldr	r2, [pc, #76]	; (8004c20 <TIM_ResetCallback+0xa0>)
 8004bd4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a12      	ldr	r2, [pc, #72]	; (8004c24 <TIM_ResetCallback+0xa4>)
 8004bdc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a11      	ldr	r2, [pc, #68]	; (8004c28 <TIM_ResetCallback+0xa8>)
 8004be4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a10      	ldr	r2, [pc, #64]	; (8004c2c <TIM_ResetCallback+0xac>)
 8004bec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	08001969 	.word	0x08001969
 8004c00:	08004897 	.word	0x08004897
 8004c04:	0800490f 	.word	0x0800490f
 8004c08:	08004923 	.word	0x08004923
 8004c0c:	080048bf 	.word	0x080048bf
 8004c10:	080048d3 	.word	0x080048d3
 8004c14:	080048ab 	.word	0x080048ab
 8004c18:	080048e7 	.word	0x080048e7
 8004c1c:	080048fb 	.word	0x080048fb
 8004c20:	08004937 	.word	0x08004937
 8004c24:	08004d0d 	.word	0x08004d0d
 8004c28:	08004d21 	.word	0x08004d21
 8004c2c:	08004d35 	.word	0x08004d35

08004c30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e050      	b.n	8004cea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a1c      	ldr	r2, [pc, #112]	; (8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d018      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c94:	d013      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a18      	ldr	r2, [pc, #96]	; (8004cfc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00e      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a16      	ldr	r2, [pc, #88]	; (8004d00 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d009      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a15      	ldr	r2, [pc, #84]	; (8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d004      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a13      	ldr	r2, [pc, #76]	; (8004d08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d10c      	bne.n	8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40010000 	.word	0x40010000
 8004cfc:	40000400 	.word	0x40000400
 8004d00:	40000800 	.word	0x40000800
 8004d04:	40000c00 	.word	0x40000c00
 8004d08:	40014000 	.word	0x40014000

08004d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e04a      	b.n	8004df0 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d111      	bne.n	8004d8a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 fba6 	bl	80054c0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d102      	bne.n	8004d82 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a1e      	ldr	r2, [pc, #120]	; (8004df8 <HAL_UART_Init+0xb0>)
 8004d80:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2224      	movs	r2, #36	; 0x24
 8004d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004da0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 fd62 	bl	800586c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004db6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695a      	ldr	r2, [r3, #20]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dc6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dd6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	0800228d 	.word	0x0800228d

08004dfc <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e062      	b.n	8004ed6 <HAL_LIN_Init+0xda>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d111      	bne.n	8004e40 <HAL_LIN_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 fb4b 	bl	80054c0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d102      	bne.n	8004e38 <HAL_LIN_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a2a      	ldr	r2, [pc, #168]	; (8004ee0 <HAL_LIN_Init+0xe4>)
 8004e36:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2224      	movs	r2, #36	; 0x24
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fd07 	bl	800586c <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	691a      	ldr	r2, [r3, #16]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695a      	ldr	r2, [r3, #20]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e7c:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	691a      	ldr	r2, [r3, #16]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e8c:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0220 	bic.w	r2, r2, #32
 8004e9c:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6919      	ldr	r1, [r3, #16]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ebc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	0800228d 	.word	0x0800228d

08004ee4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b0ba      	sub	sp, #232	; 0xe8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10f      	bne.n	8004f4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f2e:	f003 0320 	and.w	r3, r3, #32
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d009      	beq.n	8004f4a <HAL_UART_IRQHandler+0x66>
 8004f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fbd5 	bl	80056f2 <UART_Receive_IT>
      return;
 8004f48:	e25b      	b.n	8005402 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 80e1 	beq.w	8005116 <HAL_UART_IRQHandler+0x232>
 8004f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d106      	bne.n	8004f6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 80d4 	beq.w	8005116 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00b      	beq.n	8004f92 <HAL_UART_IRQHandler+0xae>
 8004f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d005      	beq.n	8004f92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	f043 0201 	orr.w	r2, r3, #1
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00b      	beq.n	8004fb6 <HAL_UART_IRQHandler+0xd2>
 8004f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d005      	beq.n	8004fb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	f043 0202 	orr.w	r2, r3, #2
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00b      	beq.n	8004fda <HAL_UART_IRQHandler+0xf6>
 8004fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	f043 0204 	orr.w	r2, r3, #4
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d011      	beq.n	800500a <HAL_UART_IRQHandler+0x126>
 8004fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d105      	bne.n	8004ffe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d005      	beq.n	800500a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	f043 0208 	orr.w	r2, r3, #8
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 81f2 	beq.w	80053f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005018:	f003 0320 	and.w	r3, r3, #32
 800501c:	2b00      	cmp	r3, #0
 800501e:	d008      	beq.n	8005032 <HAL_UART_IRQHandler+0x14e>
 8005020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 fb60 	bl	80056f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503c:	2b40      	cmp	r3, #64	; 0x40
 800503e:	bf0c      	ite	eq
 8005040:	2301      	moveq	r3, #1
 8005042:	2300      	movne	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	2b00      	cmp	r3, #0
 8005054:	d103      	bne.n	800505e <HAL_UART_IRQHandler+0x17a>
 8005056:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800505a:	2b00      	cmp	r3, #0
 800505c:	d051      	beq.n	8005102 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fa66 	bl	8005530 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506e:	2b40      	cmp	r3, #64	; 0x40
 8005070:	d142      	bne.n	80050f8 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3314      	adds	r3, #20
 8005078:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005080:	e853 3f00 	ldrex	r3, [r3]
 8005084:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005088:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800508c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005090:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3314      	adds	r3, #20
 800509a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800509e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050ae:	e841 2300 	strex	r3, r2, [r1]
 80050b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1d9      	bne.n	8005072 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d013      	beq.n	80050ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ca:	4a7f      	ldr	r2, [pc, #508]	; (80052c8 <HAL_UART_IRQHandler+0x3e4>)
 80050cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fd fe40 	bl	8002d58 <HAL_DMA_Abort_IT>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d019      	beq.n	8005112 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050e8:	4610      	mov	r0, r2
 80050ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ec:	e011      	b.n	8005112 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f6:	e00c      	b.n	8005112 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005100:	e007      	b.n	8005112 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005110:	e172      	b.n	80053f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005112:	bf00      	nop
    return;
 8005114:	e170      	b.n	80053f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511a:	2b01      	cmp	r3, #1
 800511c:	f040 814c 	bne.w	80053b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 8145 	beq.w	80053b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800512e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005132:	f003 0310 	and.w	r3, r3, #16
 8005136:	2b00      	cmp	r3, #0
 8005138:	f000 813e 	beq.w	80053b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800513c:	2300      	movs	r3, #0
 800513e:	60bb      	str	r3, [r7, #8]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60bb      	str	r3, [r7, #8]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	60bb      	str	r3, [r7, #8]
 8005150:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515c:	2b40      	cmp	r3, #64	; 0x40
 800515e:	f040 80b5 	bne.w	80052cc <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800516e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 8142 	beq.w	80053fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800517c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005180:	429a      	cmp	r2, r3
 8005182:	f080 813b 	bcs.w	80053fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800518c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005198:	f000 8088 	beq.w	80052ac <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	330c      	adds	r3, #12
 80051a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051aa:	e853 3f00 	ldrex	r3, [r3]
 80051ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	330c      	adds	r3, #12
 80051c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80051c8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051d8:	e841 2300 	strex	r3, r2, [r1]
 80051dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80051e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1d9      	bne.n	800519c <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3314      	adds	r3, #20
 80051ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051f2:	e853 3f00 	ldrex	r3, [r3]
 80051f6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80051f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051fa:	f023 0301 	bic.w	r3, r3, #1
 80051fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3314      	adds	r3, #20
 8005208:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800520c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005210:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005214:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800521e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e1      	bne.n	80051e8 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3314      	adds	r3, #20
 800522a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800522e:	e853 3f00 	ldrex	r3, [r3]
 8005232:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800523a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3314      	adds	r3, #20
 8005244:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005248:	66fa      	str	r2, [r7, #108]	; 0x6c
 800524a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800524e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005250:	e841 2300 	strex	r3, r2, [r1]
 8005254:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005256:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1e3      	bne.n	8005224 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2220      	movs	r2, #32
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	330c      	adds	r3, #12
 8005270:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005274:	e853 3f00 	ldrex	r3, [r3]
 8005278:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800527a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800527c:	f023 0310 	bic.w	r3, r3, #16
 8005280:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	330c      	adds	r3, #12
 800528a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800528e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005290:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005294:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005296:	e841 2300 	strex	r3, r2, [r1]
 800529a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800529c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1e3      	bne.n	800526a <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fd fce6 	bl	8002c78 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80052b8:	b292      	uxth	r2, r2
 80052ba:	1a8a      	subs	r2, r1, r2
 80052bc:	b292      	uxth	r2, r2
 80052be:	4611      	mov	r1, r2
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052c4:	e09a      	b.n	80053fc <HAL_UART_IRQHandler+0x518>
 80052c6:	bf00      	nop
 80052c8:	080055f7 	.word	0x080055f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 808c 	beq.w	8005400 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80052e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 8087 	beq.w	8005400 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	330c      	adds	r3, #12
 80052f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fc:	e853 3f00 	ldrex	r3, [r3]
 8005300:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005304:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005308:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	330c      	adds	r3, #12
 8005312:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005316:	647a      	str	r2, [r7, #68]	; 0x44
 8005318:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800531c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800531e:	e841 2300 	strex	r3, r2, [r1]
 8005322:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1e3      	bne.n	80052f2 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3314      	adds	r3, #20
 8005330:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	623b      	str	r3, [r7, #32]
   return(result);
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	f023 0301 	bic.w	r3, r3, #1
 8005340:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3314      	adds	r3, #20
 800534a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800534e:	633a      	str	r2, [r7, #48]	; 0x30
 8005350:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800535c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e3      	bne.n	800532a <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2220      	movs	r2, #32
 8005366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	330c      	adds	r3, #12
 8005376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0310 	bic.w	r3, r3, #16
 8005386:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	330c      	adds	r3, #12
 8005390:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005394:	61fa      	str	r2, [r7, #28]
 8005396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	69b9      	ldr	r1, [r7, #24]
 800539a:	69fa      	ldr	r2, [r7, #28]
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	617b      	str	r3, [r7, #20]
   return(result);
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e3      	bne.n	8005370 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053ac:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80053b0:	4611      	mov	r1, r2
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053b6:	e023      	b.n	8005400 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d009      	beq.n	80053d8 <HAL_UART_IRQHandler+0x4f4>
 80053c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d003      	beq.n	80053d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f925 	bl	8005620 <UART_Transmit_IT>
    return;
 80053d6:	e014      	b.n	8005402 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00e      	beq.n	8005402 <HAL_UART_IRQHandler+0x51e>
 80053e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d008      	beq.n	8005402 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f965 	bl	80056c0 <UART_EndTransmit_IT>
    return;
 80053f6:	e004      	b.n	8005402 <HAL_UART_IRQHandler+0x51e>
    return;
 80053f8:	bf00      	nop
 80053fa:	e002      	b.n	8005402 <HAL_UART_IRQHandler+0x51e>
      return;
 80053fc:	bf00      	nop
 80053fe:	e000      	b.n	8005402 <HAL_UART_IRQHandler+0x51e>
      return;
 8005400:	bf00      	nop
  }
}
 8005402:	37e8      	adds	r7, #232	; 0xe8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a10      	ldr	r2, [pc, #64]	; (800550c <UART_InitCallbacksToDefault+0x4c>)
 80054cc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a0f      	ldr	r2, [pc, #60]	; (8005510 <UART_InitCallbacksToDefault+0x50>)
 80054d2:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a0f      	ldr	r2, [pc, #60]	; (8005514 <UART_InitCallbacksToDefault+0x54>)
 80054d8:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a0e      	ldr	r2, [pc, #56]	; (8005518 <UART_InitCallbacksToDefault+0x58>)
 80054de:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a0e      	ldr	r2, [pc, #56]	; (800551c <UART_InitCallbacksToDefault+0x5c>)
 80054e4:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a0d      	ldr	r2, [pc, #52]	; (8005520 <UART_InitCallbacksToDefault+0x60>)
 80054ea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a0d      	ldr	r2, [pc, #52]	; (8005524 <UART_InitCallbacksToDefault+0x64>)
 80054f0:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a0c      	ldr	r2, [pc, #48]	; (8005528 <UART_InitCallbacksToDefault+0x68>)
 80054f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a0c      	ldr	r2, [pc, #48]	; (800552c <UART_InitCallbacksToDefault+0x6c>)
 80054fc:	669a      	str	r2, [r3, #104]	; 0x68

}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	0800541d 	.word	0x0800541d
 8005510:	08005409 	.word	0x08005409
 8005514:	08005445 	.word	0x08005445
 8005518:	08005431 	.word	0x08005431
 800551c:	08005459 	.word	0x08005459
 8005520:	0800546d 	.word	0x0800546d
 8005524:	08005481 	.word	0x08005481
 8005528:	08005495 	.word	0x08005495
 800552c:	080054a9 	.word	0x080054a9

08005530 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005530:	b480      	push	{r7}
 8005532:	b095      	sub	sp, #84	; 0x54
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	330c      	adds	r3, #12
 800553e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005542:	e853 3f00 	ldrex	r3, [r3]
 8005546:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800554e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	330c      	adds	r3, #12
 8005556:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005558:	643a      	str	r2, [r7, #64]	; 0x40
 800555a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800555e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005560:	e841 2300 	strex	r3, r2, [r1]
 8005564:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1e5      	bne.n	8005538 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3314      	adds	r3, #20
 8005572:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	e853 3f00 	ldrex	r3, [r3]
 800557a:	61fb      	str	r3, [r7, #28]
   return(result);
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	f023 0301 	bic.w	r3, r3, #1
 8005582:	64bb      	str	r3, [r7, #72]	; 0x48
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3314      	adds	r3, #20
 800558a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800558c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800558e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e5      	bne.n	800556c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d119      	bne.n	80055dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	330c      	adds	r3, #12
 80055ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	e853 3f00 	ldrex	r3, [r3]
 80055b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f023 0310 	bic.w	r3, r3, #16
 80055be:	647b      	str	r3, [r7, #68]	; 0x44
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	330c      	adds	r3, #12
 80055c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055c8:	61ba      	str	r2, [r7, #24]
 80055ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055cc:	6979      	ldr	r1, [r7, #20]
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	e841 2300 	strex	r3, r2, [r1]
 80055d4:	613b      	str	r3, [r7, #16]
   return(result);
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e5      	bne.n	80055a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80055ea:	bf00      	nop
 80055ec:	3754      	adds	r7, #84	; 0x54
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b084      	sub	sp, #16
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005602:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005618:	bf00      	nop
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b21      	cmp	r3, #33	; 0x21
 8005632:	d13e      	bne.n	80056b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800563c:	d114      	bne.n	8005668 <UART_Transmit_IT+0x48>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d110      	bne.n	8005668 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	461a      	mov	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800565a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	1c9a      	adds	r2, r3, #2
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	621a      	str	r2, [r3, #32]
 8005666:	e008      	b.n	800567a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	1c59      	adds	r1, r3, #1
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	6211      	str	r1, [r2, #32]
 8005672:	781a      	ldrb	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800567e:	b29b      	uxth	r3, r3
 8005680:	3b01      	subs	r3, #1
 8005682:	b29b      	uxth	r3, r3
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	4619      	mov	r1, r3
 8005688:	84d1      	strh	r1, [r2, #38]	; 0x26
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10f      	bne.n	80056ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800569c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	e000      	b.n	80056b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80056b2:	2302      	movs	r3, #2
  }
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2220      	movs	r2, #32
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b08c      	sub	sp, #48	; 0x30
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b22      	cmp	r3, #34	; 0x22
 8005704:	f040 80ad 	bne.w	8005862 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005710:	d117      	bne.n	8005742 <UART_Receive_IT+0x50>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d113      	bne.n	8005742 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800571a:	2300      	movs	r3, #0
 800571c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005722:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	b29b      	uxth	r3, r3
 800572c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005730:	b29a      	uxth	r2, r3
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573a:	1c9a      	adds	r2, r3, #2
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	629a      	str	r2, [r3, #40]	; 0x28
 8005740:	e026      	b.n	8005790 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005746:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005748:	2300      	movs	r3, #0
 800574a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005754:	d007      	beq.n	8005766 <UART_Receive_IT+0x74>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10a      	bne.n	8005774 <UART_Receive_IT+0x82>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d106      	bne.n	8005774 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	b2da      	uxtb	r2, r3
 800576e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005770:	701a      	strb	r2, [r3, #0]
 8005772:	e008      	b.n	8005786 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	b2db      	uxtb	r3, r3
 800577c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005780:	b2da      	uxtb	r2, r3
 8005782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005784:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005794:	b29b      	uxth	r3, r3
 8005796:	3b01      	subs	r3, #1
 8005798:	b29b      	uxth	r3, r3
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	4619      	mov	r1, r3
 800579e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d15c      	bne.n	800585e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0220 	bic.w	r2, r2, #32
 80057b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695a      	ldr	r2, [r3, #20]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f022 0201 	bic.w	r2, r2, #1
 80057d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d136      	bne.n	8005852 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	330c      	adds	r3, #12
 80057f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	e853 3f00 	ldrex	r3, [r3]
 80057f8:	613b      	str	r3, [r7, #16]
   return(result);
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	f023 0310 	bic.w	r3, r3, #16
 8005800:	627b      	str	r3, [r7, #36]	; 0x24
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	330c      	adds	r3, #12
 8005808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580a:	623a      	str	r2, [r7, #32]
 800580c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580e:	69f9      	ldr	r1, [r7, #28]
 8005810:	6a3a      	ldr	r2, [r7, #32]
 8005812:	e841 2300 	strex	r3, r2, [r1]
 8005816:	61bb      	str	r3, [r7, #24]
   return(result);
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1e5      	bne.n	80057ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0310 	and.w	r3, r3, #16
 8005828:	2b10      	cmp	r3, #16
 800582a:	d10a      	bne.n	8005842 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800582c:	2300      	movs	r3, #0
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800584a:	4611      	mov	r1, r2
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	4798      	blx	r3
 8005850:	e003      	b.n	800585a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	e002      	b.n	8005864 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	e000      	b.n	8005864 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8005862:	2302      	movs	r3, #2
  }
}
 8005864:	4618      	mov	r0, r3
 8005866:	3730      	adds	r7, #48	; 0x30
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800586c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005870:	b0c0      	sub	sp, #256	; 0x100
 8005872:	af00      	add	r7, sp, #0
 8005874:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005888:	68d9      	ldr	r1, [r3, #12]
 800588a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	ea40 0301 	orr.w	r3, r0, r1
 8005894:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	431a      	orrs	r2, r3
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058c4:	f021 010c 	bic.w	r1, r1, #12
 80058c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058d2:	430b      	orrs	r3, r1
 80058d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80058e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e6:	6999      	ldr	r1, [r3, #24]
 80058e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	ea40 0301 	orr.w	r3, r0, r1
 80058f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	4b8f      	ldr	r3, [pc, #572]	; (8005b38 <UART_SetConfig+0x2cc>)
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d005      	beq.n	800590c <UART_SetConfig+0xa0>
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	4b8d      	ldr	r3, [pc, #564]	; (8005b3c <UART_SetConfig+0x2d0>)
 8005908:	429a      	cmp	r2, r3
 800590a:	d104      	bne.n	8005916 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800590c:	f7fe fa2c 	bl	8003d68 <HAL_RCC_GetPCLK2Freq>
 8005910:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005914:	e003      	b.n	800591e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005916:	f7fe fa13 	bl	8003d40 <HAL_RCC_GetPCLK1Freq>
 800591a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800591e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005928:	f040 810c 	bne.w	8005b44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800592c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005930:	2200      	movs	r2, #0
 8005932:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005936:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800593a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800593e:	4622      	mov	r2, r4
 8005940:	462b      	mov	r3, r5
 8005942:	1891      	adds	r1, r2, r2
 8005944:	65b9      	str	r1, [r7, #88]	; 0x58
 8005946:	415b      	adcs	r3, r3
 8005948:	65fb      	str	r3, [r7, #92]	; 0x5c
 800594a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800594e:	4621      	mov	r1, r4
 8005950:	eb12 0801 	adds.w	r8, r2, r1
 8005954:	4629      	mov	r1, r5
 8005956:	eb43 0901 	adc.w	r9, r3, r1
 800595a:	f04f 0200 	mov.w	r2, #0
 800595e:	f04f 0300 	mov.w	r3, #0
 8005962:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005966:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800596a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800596e:	4690      	mov	r8, r2
 8005970:	4699      	mov	r9, r3
 8005972:	4623      	mov	r3, r4
 8005974:	eb18 0303 	adds.w	r3, r8, r3
 8005978:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800597c:	462b      	mov	r3, r5
 800597e:	eb49 0303 	adc.w	r3, r9, r3
 8005982:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005992:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005996:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800599a:	460b      	mov	r3, r1
 800599c:	18db      	adds	r3, r3, r3
 800599e:	653b      	str	r3, [r7, #80]	; 0x50
 80059a0:	4613      	mov	r3, r2
 80059a2:	eb42 0303 	adc.w	r3, r2, r3
 80059a6:	657b      	str	r3, [r7, #84]	; 0x54
 80059a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80059ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80059b0:	f7fa fc16 	bl	80001e0 <__aeabi_uldivmod>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4b61      	ldr	r3, [pc, #388]	; (8005b40 <UART_SetConfig+0x2d4>)
 80059ba:	fba3 2302 	umull	r2, r3, r3, r2
 80059be:	095b      	lsrs	r3, r3, #5
 80059c0:	011c      	lsls	r4, r3, #4
 80059c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059c6:	2200      	movs	r2, #0
 80059c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80059d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80059d4:	4642      	mov	r2, r8
 80059d6:	464b      	mov	r3, r9
 80059d8:	1891      	adds	r1, r2, r2
 80059da:	64b9      	str	r1, [r7, #72]	; 0x48
 80059dc:	415b      	adcs	r3, r3
 80059de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80059e4:	4641      	mov	r1, r8
 80059e6:	eb12 0a01 	adds.w	sl, r2, r1
 80059ea:	4649      	mov	r1, r9
 80059ec:	eb43 0b01 	adc.w	fp, r3, r1
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a04:	4692      	mov	sl, r2
 8005a06:	469b      	mov	fp, r3
 8005a08:	4643      	mov	r3, r8
 8005a0a:	eb1a 0303 	adds.w	r3, sl, r3
 8005a0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a12:	464b      	mov	r3, r9
 8005a14:	eb4b 0303 	adc.w	r3, fp, r3
 8005a18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a30:	460b      	mov	r3, r1
 8005a32:	18db      	adds	r3, r3, r3
 8005a34:	643b      	str	r3, [r7, #64]	; 0x40
 8005a36:	4613      	mov	r3, r2
 8005a38:	eb42 0303 	adc.w	r3, r2, r3
 8005a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a46:	f7fa fbcb 	bl	80001e0 <__aeabi_uldivmod>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4611      	mov	r1, r2
 8005a50:	4b3b      	ldr	r3, [pc, #236]	; (8005b40 <UART_SetConfig+0x2d4>)
 8005a52:	fba3 2301 	umull	r2, r3, r3, r1
 8005a56:	095b      	lsrs	r3, r3, #5
 8005a58:	2264      	movs	r2, #100	; 0x64
 8005a5a:	fb02 f303 	mul.w	r3, r2, r3
 8005a5e:	1acb      	subs	r3, r1, r3
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a66:	4b36      	ldr	r3, [pc, #216]	; (8005b40 <UART_SetConfig+0x2d4>)
 8005a68:	fba3 2302 	umull	r2, r3, r3, r2
 8005a6c:	095b      	lsrs	r3, r3, #5
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a74:	441c      	add	r4, r3
 8005a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a88:	4642      	mov	r2, r8
 8005a8a:	464b      	mov	r3, r9
 8005a8c:	1891      	adds	r1, r2, r2
 8005a8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a90:	415b      	adcs	r3, r3
 8005a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a98:	4641      	mov	r1, r8
 8005a9a:	1851      	adds	r1, r2, r1
 8005a9c:	6339      	str	r1, [r7, #48]	; 0x30
 8005a9e:	4649      	mov	r1, r9
 8005aa0:	414b      	adcs	r3, r1
 8005aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	f04f 0300 	mov.w	r3, #0
 8005aac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ab0:	4659      	mov	r1, fp
 8005ab2:	00cb      	lsls	r3, r1, #3
 8005ab4:	4651      	mov	r1, sl
 8005ab6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aba:	4651      	mov	r1, sl
 8005abc:	00ca      	lsls	r2, r1, #3
 8005abe:	4610      	mov	r0, r2
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	4642      	mov	r2, r8
 8005ac6:	189b      	adds	r3, r3, r2
 8005ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005acc:	464b      	mov	r3, r9
 8005ace:	460a      	mov	r2, r1
 8005ad0:	eb42 0303 	adc.w	r3, r2, r3
 8005ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ae4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ae8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005aec:	460b      	mov	r3, r1
 8005aee:	18db      	adds	r3, r3, r3
 8005af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005af2:	4613      	mov	r3, r2
 8005af4:	eb42 0303 	adc.w	r3, r2, r3
 8005af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005afa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005afe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b02:	f7fa fb6d 	bl	80001e0 <__aeabi_uldivmod>
 8005b06:	4602      	mov	r2, r0
 8005b08:	460b      	mov	r3, r1
 8005b0a:	4b0d      	ldr	r3, [pc, #52]	; (8005b40 <UART_SetConfig+0x2d4>)
 8005b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b10:	095b      	lsrs	r3, r3, #5
 8005b12:	2164      	movs	r1, #100	; 0x64
 8005b14:	fb01 f303 	mul.w	r3, r1, r3
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	3332      	adds	r3, #50	; 0x32
 8005b1e:	4a08      	ldr	r2, [pc, #32]	; (8005b40 <UART_SetConfig+0x2d4>)
 8005b20:	fba2 2303 	umull	r2, r3, r2, r3
 8005b24:	095b      	lsrs	r3, r3, #5
 8005b26:	f003 0207 	and.w	r2, r3, #7
 8005b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4422      	add	r2, r4
 8005b32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b34:	e105      	b.n	8005d42 <UART_SetConfig+0x4d6>
 8005b36:	bf00      	nop
 8005b38:	40011000 	.word	0x40011000
 8005b3c:	40011400 	.word	0x40011400
 8005b40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b56:	4642      	mov	r2, r8
 8005b58:	464b      	mov	r3, r9
 8005b5a:	1891      	adds	r1, r2, r2
 8005b5c:	6239      	str	r1, [r7, #32]
 8005b5e:	415b      	adcs	r3, r3
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
 8005b62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b66:	4641      	mov	r1, r8
 8005b68:	1854      	adds	r4, r2, r1
 8005b6a:	4649      	mov	r1, r9
 8005b6c:	eb43 0501 	adc.w	r5, r3, r1
 8005b70:	f04f 0200 	mov.w	r2, #0
 8005b74:	f04f 0300 	mov.w	r3, #0
 8005b78:	00eb      	lsls	r3, r5, #3
 8005b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b7e:	00e2      	lsls	r2, r4, #3
 8005b80:	4614      	mov	r4, r2
 8005b82:	461d      	mov	r5, r3
 8005b84:	4643      	mov	r3, r8
 8005b86:	18e3      	adds	r3, r4, r3
 8005b88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b8c:	464b      	mov	r3, r9
 8005b8e:	eb45 0303 	adc.w	r3, r5, r3
 8005b92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ba2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	f04f 0300 	mov.w	r3, #0
 8005bae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005bb2:	4629      	mov	r1, r5
 8005bb4:	008b      	lsls	r3, r1, #2
 8005bb6:	4621      	mov	r1, r4
 8005bb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	008a      	lsls	r2, r1, #2
 8005bc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005bc4:	f7fa fb0c 	bl	80001e0 <__aeabi_uldivmod>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	460b      	mov	r3, r1
 8005bcc:	4b60      	ldr	r3, [pc, #384]	; (8005d50 <UART_SetConfig+0x4e4>)
 8005bce:	fba3 2302 	umull	r2, r3, r3, r2
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	011c      	lsls	r4, r3, #4
 8005bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005be0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005be4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005be8:	4642      	mov	r2, r8
 8005bea:	464b      	mov	r3, r9
 8005bec:	1891      	adds	r1, r2, r2
 8005bee:	61b9      	str	r1, [r7, #24]
 8005bf0:	415b      	adcs	r3, r3
 8005bf2:	61fb      	str	r3, [r7, #28]
 8005bf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bf8:	4641      	mov	r1, r8
 8005bfa:	1851      	adds	r1, r2, r1
 8005bfc:	6139      	str	r1, [r7, #16]
 8005bfe:	4649      	mov	r1, r9
 8005c00:	414b      	adcs	r3, r1
 8005c02:	617b      	str	r3, [r7, #20]
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	f04f 0300 	mov.w	r3, #0
 8005c0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c10:	4659      	mov	r1, fp
 8005c12:	00cb      	lsls	r3, r1, #3
 8005c14:	4651      	mov	r1, sl
 8005c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c1a:	4651      	mov	r1, sl
 8005c1c:	00ca      	lsls	r2, r1, #3
 8005c1e:	4610      	mov	r0, r2
 8005c20:	4619      	mov	r1, r3
 8005c22:	4603      	mov	r3, r0
 8005c24:	4642      	mov	r2, r8
 8005c26:	189b      	adds	r3, r3, r2
 8005c28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c2c:	464b      	mov	r3, r9
 8005c2e:	460a      	mov	r2, r1
 8005c30:	eb42 0303 	adc.w	r3, r2, r3
 8005c34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	f04f 0300 	mov.w	r3, #0
 8005c4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c50:	4649      	mov	r1, r9
 8005c52:	008b      	lsls	r3, r1, #2
 8005c54:	4641      	mov	r1, r8
 8005c56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c5a:	4641      	mov	r1, r8
 8005c5c:	008a      	lsls	r2, r1, #2
 8005c5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c62:	f7fa fabd 	bl	80001e0 <__aeabi_uldivmod>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4b39      	ldr	r3, [pc, #228]	; (8005d50 <UART_SetConfig+0x4e4>)
 8005c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c70:	095b      	lsrs	r3, r3, #5
 8005c72:	2164      	movs	r1, #100	; 0x64
 8005c74:	fb01 f303 	mul.w	r3, r1, r3
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	3332      	adds	r3, #50	; 0x32
 8005c7e:	4a34      	ldr	r2, [pc, #208]	; (8005d50 <UART_SetConfig+0x4e4>)
 8005c80:	fba2 2303 	umull	r2, r3, r2, r3
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c8a:	441c      	add	r4, r3
 8005c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c90:	2200      	movs	r2, #0
 8005c92:	673b      	str	r3, [r7, #112]	; 0x70
 8005c94:	677a      	str	r2, [r7, #116]	; 0x74
 8005c96:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c9a:	4642      	mov	r2, r8
 8005c9c:	464b      	mov	r3, r9
 8005c9e:	1891      	adds	r1, r2, r2
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	415b      	adcs	r3, r3
 8005ca4:	60fb      	str	r3, [r7, #12]
 8005ca6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005caa:	4641      	mov	r1, r8
 8005cac:	1851      	adds	r1, r2, r1
 8005cae:	6039      	str	r1, [r7, #0]
 8005cb0:	4649      	mov	r1, r9
 8005cb2:	414b      	adcs	r3, r1
 8005cb4:	607b      	str	r3, [r7, #4]
 8005cb6:	f04f 0200 	mov.w	r2, #0
 8005cba:	f04f 0300 	mov.w	r3, #0
 8005cbe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cc2:	4659      	mov	r1, fp
 8005cc4:	00cb      	lsls	r3, r1, #3
 8005cc6:	4651      	mov	r1, sl
 8005cc8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ccc:	4651      	mov	r1, sl
 8005cce:	00ca      	lsls	r2, r1, #3
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	4642      	mov	r2, r8
 8005cd8:	189b      	adds	r3, r3, r2
 8005cda:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cdc:	464b      	mov	r3, r9
 8005cde:	460a      	mov	r2, r1
 8005ce0:	eb42 0303 	adc.w	r3, r2, r3
 8005ce4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	663b      	str	r3, [r7, #96]	; 0x60
 8005cf0:	667a      	str	r2, [r7, #100]	; 0x64
 8005cf2:	f04f 0200 	mov.w	r2, #0
 8005cf6:	f04f 0300 	mov.w	r3, #0
 8005cfa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005cfe:	4649      	mov	r1, r9
 8005d00:	008b      	lsls	r3, r1, #2
 8005d02:	4641      	mov	r1, r8
 8005d04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d08:	4641      	mov	r1, r8
 8005d0a:	008a      	lsls	r2, r1, #2
 8005d0c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d10:	f7fa fa66 	bl	80001e0 <__aeabi_uldivmod>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4b0d      	ldr	r3, [pc, #52]	; (8005d50 <UART_SetConfig+0x4e4>)
 8005d1a:	fba3 1302 	umull	r1, r3, r3, r2
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	2164      	movs	r1, #100	; 0x64
 8005d22:	fb01 f303 	mul.w	r3, r1, r3
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	011b      	lsls	r3, r3, #4
 8005d2a:	3332      	adds	r3, #50	; 0x32
 8005d2c:	4a08      	ldr	r2, [pc, #32]	; (8005d50 <UART_SetConfig+0x4e4>)
 8005d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d32:	095b      	lsrs	r3, r3, #5
 8005d34:	f003 020f 	and.w	r2, r3, #15
 8005d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4422      	add	r2, r4
 8005d40:	609a      	str	r2, [r3, #8]
}
 8005d42:	bf00      	nop
 8005d44:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d4e:	bf00      	nop
 8005d50:	51eb851f 	.word	0x51eb851f

08005d54 <__NVIC_SetPriority>:
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	6039      	str	r1, [r7, #0]
 8005d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	db0a      	blt.n	8005d7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	490c      	ldr	r1, [pc, #48]	; (8005da0 <__NVIC_SetPriority+0x4c>)
 8005d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d72:	0112      	lsls	r2, r2, #4
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	440b      	add	r3, r1
 8005d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005d7c:	e00a      	b.n	8005d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	4908      	ldr	r1, [pc, #32]	; (8005da4 <__NVIC_SetPriority+0x50>)
 8005d84:	79fb      	ldrb	r3, [r7, #7]
 8005d86:	f003 030f 	and.w	r3, r3, #15
 8005d8a:	3b04      	subs	r3, #4
 8005d8c:	0112      	lsls	r2, r2, #4
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	440b      	add	r3, r1
 8005d92:	761a      	strb	r2, [r3, #24]
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	e000e100 	.word	0xe000e100
 8005da4:	e000ed00 	.word	0xe000ed00

08005da8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005dac:	4b05      	ldr	r3, [pc, #20]	; (8005dc4 <SysTick_Handler+0x1c>)
 8005dae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005db0:	f002 f95e 	bl	8008070 <xTaskGetSchedulerState>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d001      	beq.n	8005dbe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005dba:	f000 fd95 	bl	80068e8 <xPortSysTickHandler>
  }
}
 8005dbe:	bf00      	nop
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	e000e010 	.word	0xe000e010

08005dc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005dcc:	2100      	movs	r1, #0
 8005dce:	f06f 0004 	mvn.w	r0, #4
 8005dd2:	f7ff ffbf 	bl	8005d54 <__NVIC_SetPriority>
#endif
}
 8005dd6:	bf00      	nop
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005de2:	f3ef 8305 	mrs	r3, IPSR
 8005de6:	603b      	str	r3, [r7, #0]
  return(result);
 8005de8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005dee:	f06f 0305 	mvn.w	r3, #5
 8005df2:	607b      	str	r3, [r7, #4]
 8005df4:	e00c      	b.n	8005e10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005df6:	4b0a      	ldr	r3, [pc, #40]	; (8005e20 <osKernelInitialize+0x44>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d105      	bne.n	8005e0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005dfe:	4b08      	ldr	r3, [pc, #32]	; (8005e20 <osKernelInitialize+0x44>)
 8005e00:	2201      	movs	r2, #1
 8005e02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005e04:	2300      	movs	r3, #0
 8005e06:	607b      	str	r3, [r7, #4]
 8005e08:	e002      	b.n	8005e10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e10:	687b      	ldr	r3, [r7, #4]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	200006c0 	.word	0x200006c0

08005e24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e2a:	f3ef 8305 	mrs	r3, IPSR
 8005e2e:	603b      	str	r3, [r7, #0]
  return(result);
 8005e30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005e36:	f06f 0305 	mvn.w	r3, #5
 8005e3a:	607b      	str	r3, [r7, #4]
 8005e3c:	e010      	b.n	8005e60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005e3e:	4b0b      	ldr	r3, [pc, #44]	; (8005e6c <osKernelStart+0x48>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d109      	bne.n	8005e5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005e46:	f7ff ffbf 	bl	8005dc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005e4a:	4b08      	ldr	r3, [pc, #32]	; (8005e6c <osKernelStart+0x48>)
 8005e4c:	2202      	movs	r2, #2
 8005e4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005e50:	f001 fcb2 	bl	80077b8 <vTaskStartScheduler>
      stat = osOK;
 8005e54:	2300      	movs	r3, #0
 8005e56:	607b      	str	r3, [r7, #4]
 8005e58:	e002      	b.n	8005e60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e60:	687b      	ldr	r3, [r7, #4]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	200006c0 	.word	0x200006c0

08005e70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08e      	sub	sp, #56	; 0x38
 8005e74:	af04      	add	r7, sp, #16
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e80:	f3ef 8305 	mrs	r3, IPSR
 8005e84:	617b      	str	r3, [r7, #20]
  return(result);
 8005e86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d17e      	bne.n	8005f8a <osThreadNew+0x11a>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d07b      	beq.n	8005f8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005e92:	2380      	movs	r3, #128	; 0x80
 8005e94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005e96:	2318      	movs	r3, #24
 8005e98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d045      	beq.n	8005f36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <osThreadNew+0x48>
        name = attr->name;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d008      	beq.n	8005ede <osThreadNew+0x6e>
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	2b38      	cmp	r3, #56	; 0x38
 8005ed0:	d805      	bhi.n	8005ede <osThreadNew+0x6e>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <osThreadNew+0x72>
        return (NULL);
 8005ede:	2300      	movs	r3, #0
 8005ee0:	e054      	b.n	8005f8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	089b      	lsrs	r3, r3, #2
 8005ef0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00e      	beq.n	8005f18 <osThreadNew+0xa8>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	2bbb      	cmp	r3, #187	; 0xbb
 8005f00:	d90a      	bls.n	8005f18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d006      	beq.n	8005f18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <osThreadNew+0xa8>
        mem = 1;
 8005f12:	2301      	movs	r3, #1
 8005f14:	61bb      	str	r3, [r7, #24]
 8005f16:	e010      	b.n	8005f3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10c      	bne.n	8005f3a <osThreadNew+0xca>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d108      	bne.n	8005f3a <osThreadNew+0xca>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d104      	bne.n	8005f3a <osThreadNew+0xca>
          mem = 0;
 8005f30:	2300      	movs	r3, #0
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	e001      	b.n	8005f3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d110      	bne.n	8005f62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f48:	9202      	str	r2, [sp, #8]
 8005f4a:	9301      	str	r3, [sp, #4]
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	6a3a      	ldr	r2, [r7, #32]
 8005f54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f001 fa42 	bl	80073e0 <xTaskCreateStatic>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	613b      	str	r3, [r7, #16]
 8005f60:	e013      	b.n	8005f8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d110      	bne.n	8005f8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	f107 0310 	add.w	r3, r7, #16
 8005f70:	9301      	str	r3, [sp, #4]
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f001 fa8d 	bl	800749a <xTaskCreate>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d001      	beq.n	8005f8a <osThreadNew+0x11a>
            hTask = NULL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f8a:	693b      	ldr	r3, [r7, #16]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3728      	adds	r7, #40	; 0x28
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f9c:	f3ef 8305 	mrs	r3, IPSR
 8005fa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fa2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <osDelay+0x1c>
    stat = osErrorISR;
 8005fa8:	f06f 0305 	mvn.w	r3, #5
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	e007      	b.n	8005fc0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d002      	beq.n	8005fc0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f001 fbc8 	bl	8007750 <vTaskDelay>
    }
  }

  return (stat);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
	...

08005fcc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4a07      	ldr	r2, [pc, #28]	; (8005ff8 <vApplicationGetIdleTaskMemory+0x2c>)
 8005fdc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	4a06      	ldr	r2, [pc, #24]	; (8005ffc <vApplicationGetIdleTaskMemory+0x30>)
 8005fe2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2280      	movs	r2, #128	; 0x80
 8005fe8:	601a      	str	r2, [r3, #0]
}
 8005fea:	bf00      	nop
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	200006c4 	.word	0x200006c4
 8005ffc:	20000780 	.word	0x20000780

08006000 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4a07      	ldr	r2, [pc, #28]	; (800602c <vApplicationGetTimerTaskMemory+0x2c>)
 8006010:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	4a06      	ldr	r2, [pc, #24]	; (8006030 <vApplicationGetTimerTaskMemory+0x30>)
 8006016:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800601e:	601a      	str	r2, [r3, #0]
}
 8006020:	bf00      	nop
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	20000980 	.word	0x20000980
 8006030:	20000a3c 	.word	0x20000a3c

08006034 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b08a      	sub	sp, #40	; 0x28
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800603c:	2300      	movs	r3, #0
 800603e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006040:	f001 fc2a 	bl	8007898 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006044:	4b5b      	ldr	r3, [pc, #364]	; (80061b4 <pvPortMalloc+0x180>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800604c:	f000 f920 	bl	8006290 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006050:	4b59      	ldr	r3, [pc, #356]	; (80061b8 <pvPortMalloc+0x184>)
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4013      	ands	r3, r2
 8006058:	2b00      	cmp	r3, #0
 800605a:	f040 8093 	bne.w	8006184 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d01d      	beq.n	80060a0 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006064:	2208      	movs	r2, #8
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4413      	add	r3, r2
 800606a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	2b00      	cmp	r3, #0
 8006074:	d014      	beq.n	80060a0 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f023 0307 	bic.w	r3, r3, #7
 800607c:	3308      	adds	r3, #8
 800607e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00a      	beq.n	80060a0 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800608a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800609c:	bf00      	nop
 800609e:	e7fe      	b.n	800609e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d06e      	beq.n	8006184 <pvPortMalloc+0x150>
 80060a6:	4b45      	ldr	r3, [pc, #276]	; (80061bc <pvPortMalloc+0x188>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d869      	bhi.n	8006184 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80060b0:	4b43      	ldr	r3, [pc, #268]	; (80061c0 <pvPortMalloc+0x18c>)
 80060b2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80060b4:	4b42      	ldr	r3, [pc, #264]	; (80061c0 <pvPortMalloc+0x18c>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060ba:	e004      	b.n	80060c6 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d903      	bls.n	80060d8 <pvPortMalloc+0xa4>
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1f1      	bne.n	80060bc <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80060d8:	4b36      	ldr	r3, [pc, #216]	; (80061b4 <pvPortMalloc+0x180>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060de:	429a      	cmp	r2, r3
 80060e0:	d050      	beq.n	8006184 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2208      	movs	r2, #8
 80060e8:	4413      	add	r3, r2
 80060ea:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	1ad2      	subs	r2, r2, r3
 80060fc:	2308      	movs	r3, #8
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	429a      	cmp	r2, r3
 8006102:	d91f      	bls.n	8006144 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4413      	add	r3, r2
 800610a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	f003 0307 	and.w	r3, r3, #7
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <pvPortMalloc+0xf8>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	613b      	str	r3, [r7, #16]
}
 8006128:	bf00      	nop
 800612a:	e7fe      	b.n	800612a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	1ad2      	subs	r2, r2, r3
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800613e:	69b8      	ldr	r0, [r7, #24]
 8006140:	f000 f908 	bl	8006354 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006144:	4b1d      	ldr	r3, [pc, #116]	; (80061bc <pvPortMalloc+0x188>)
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	4a1b      	ldr	r2, [pc, #108]	; (80061bc <pvPortMalloc+0x188>)
 8006150:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006152:	4b1a      	ldr	r3, [pc, #104]	; (80061bc <pvPortMalloc+0x188>)
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	4b1b      	ldr	r3, [pc, #108]	; (80061c4 <pvPortMalloc+0x190>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	429a      	cmp	r2, r3
 800615c:	d203      	bcs.n	8006166 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800615e:	4b17      	ldr	r3, [pc, #92]	; (80061bc <pvPortMalloc+0x188>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a18      	ldr	r2, [pc, #96]	; (80061c4 <pvPortMalloc+0x190>)
 8006164:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	4b13      	ldr	r3, [pc, #76]	; (80061b8 <pvPortMalloc+0x184>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	431a      	orrs	r2, r3
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006176:	2200      	movs	r2, #0
 8006178:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800617a:	4b13      	ldr	r3, [pc, #76]	; (80061c8 <pvPortMalloc+0x194>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3301      	adds	r3, #1
 8006180:	4a11      	ldr	r2, [pc, #68]	; (80061c8 <pvPortMalloc+0x194>)
 8006182:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006184:	f001 fb96 	bl	80078b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	f003 0307 	and.w	r3, r3, #7
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <pvPortMalloc+0x174>
	__asm volatile
 8006192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	60fb      	str	r3, [r7, #12]
}
 80061a4:	bf00      	nop
 80061a6:	e7fe      	b.n	80061a6 <pvPortMalloc+0x172>
	return pvReturn;
 80061a8:	69fb      	ldr	r3, [r7, #28]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3728      	adds	r7, #40	; 0x28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20004a44 	.word	0x20004a44
 80061b8:	20004a58 	.word	0x20004a58
 80061bc:	20004a48 	.word	0x20004a48
 80061c0:	20004a3c 	.word	0x20004a3c
 80061c4:	20004a4c 	.word	0x20004a4c
 80061c8:	20004a50 	.word	0x20004a50

080061cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d04d      	beq.n	800627a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80061de:	2308      	movs	r3, #8
 80061e0:	425b      	negs	r3, r3
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	4413      	add	r3, r2
 80061e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	4b24      	ldr	r3, [pc, #144]	; (8006284 <vPortFree+0xb8>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4013      	ands	r3, r2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10a      	bne.n	8006210 <vPortFree+0x44>
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	60fb      	str	r3, [r7, #12]
}
 800620c:	bf00      	nop
 800620e:	e7fe      	b.n	800620e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00a      	beq.n	800622e <vPortFree+0x62>
	__asm volatile
 8006218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621c:	f383 8811 	msr	BASEPRI, r3
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	60bb      	str	r3, [r7, #8]
}
 800622a:	bf00      	nop
 800622c:	e7fe      	b.n	800622c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	4b14      	ldr	r3, [pc, #80]	; (8006284 <vPortFree+0xb8>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4013      	ands	r3, r2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01e      	beq.n	800627a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d11a      	bne.n	800627a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	4b0e      	ldr	r3, [pc, #56]	; (8006284 <vPortFree+0xb8>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	43db      	mvns	r3, r3
 800624e:	401a      	ands	r2, r3
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006254:	f001 fb20 	bl	8007898 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	4b0a      	ldr	r3, [pc, #40]	; (8006288 <vPortFree+0xbc>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4413      	add	r3, r2
 8006262:	4a09      	ldr	r2, [pc, #36]	; (8006288 <vPortFree+0xbc>)
 8006264:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006266:	6938      	ldr	r0, [r7, #16]
 8006268:	f000 f874 	bl	8006354 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800626c:	4b07      	ldr	r3, [pc, #28]	; (800628c <vPortFree+0xc0>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3301      	adds	r3, #1
 8006272:	4a06      	ldr	r2, [pc, #24]	; (800628c <vPortFree+0xc0>)
 8006274:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006276:	f001 fb1d 	bl	80078b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800627a:	bf00      	nop
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20004a58 	.word	0x20004a58
 8006288:	20004a48 	.word	0x20004a48
 800628c:	20004a54 	.word	0x20004a54

08006290 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006296:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800629a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800629c:	4b27      	ldr	r3, [pc, #156]	; (800633c <prvHeapInit+0xac>)
 800629e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00c      	beq.n	80062c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3307      	adds	r3, #7
 80062ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0307 	bic.w	r3, r3, #7
 80062b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	4a1f      	ldr	r2, [pc, #124]	; (800633c <prvHeapInit+0xac>)
 80062c0:	4413      	add	r3, r2
 80062c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80062c8:	4a1d      	ldr	r2, [pc, #116]	; (8006340 <prvHeapInit+0xb0>)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80062ce:	4b1c      	ldr	r3, [pc, #112]	; (8006340 <prvHeapInit+0xb0>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	4413      	add	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80062dc:	2208      	movs	r2, #8
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	1a9b      	subs	r3, r3, r2
 80062e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0307 	bic.w	r3, r3, #7
 80062ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4a15      	ldr	r2, [pc, #84]	; (8006344 <prvHeapInit+0xb4>)
 80062f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80062f2:	4b14      	ldr	r3, [pc, #80]	; (8006344 <prvHeapInit+0xb4>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2200      	movs	r2, #0
 80062f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80062fa:	4b12      	ldr	r3, [pc, #72]	; (8006344 <prvHeapInit+0xb4>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2200      	movs	r2, #0
 8006300:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	1ad2      	subs	r2, r2, r3
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006310:	4b0c      	ldr	r3, [pc, #48]	; (8006344 <prvHeapInit+0xb4>)
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	4a0a      	ldr	r2, [pc, #40]	; (8006348 <prvHeapInit+0xb8>)
 800631e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	4a09      	ldr	r2, [pc, #36]	; (800634c <prvHeapInit+0xbc>)
 8006326:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006328:	4b09      	ldr	r3, [pc, #36]	; (8006350 <prvHeapInit+0xc0>)
 800632a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800632e:	601a      	str	r2, [r3, #0]
}
 8006330:	bf00      	nop
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	20000e3c 	.word	0x20000e3c
 8006340:	20004a3c 	.word	0x20004a3c
 8006344:	20004a44 	.word	0x20004a44
 8006348:	20004a4c 	.word	0x20004a4c
 800634c:	20004a48 	.word	0x20004a48
 8006350:	20004a58 	.word	0x20004a58

08006354 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800635c:	4b28      	ldr	r3, [pc, #160]	; (8006400 <prvInsertBlockIntoFreeList+0xac>)
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	e002      	b.n	8006368 <prvInsertBlockIntoFreeList+0x14>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	60fb      	str	r3, [r7, #12]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	429a      	cmp	r2, r3
 8006370:	d8f7      	bhi.n	8006362 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	4413      	add	r3, r2
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	429a      	cmp	r2, r3
 8006382:	d108      	bne.n	8006396 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	441a      	add	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	441a      	add	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d118      	bne.n	80063dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	4b15      	ldr	r3, [pc, #84]	; (8006404 <prvInsertBlockIntoFreeList+0xb0>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d00d      	beq.n	80063d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	441a      	add	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	e008      	b.n	80063e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80063d2:	4b0c      	ldr	r3, [pc, #48]	; (8006404 <prvInsertBlockIntoFreeList+0xb0>)
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	601a      	str	r2, [r3, #0]
 80063da:	e003      	b.n	80063e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d002      	beq.n	80063f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063f2:	bf00      	nop
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	20004a3c 	.word	0x20004a3c
 8006404:	20004a44 	.word	0x20004a44

08006408 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f103 0208 	add.w	r2, r3, #8
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f04f 32ff 	mov.w	r2, #4294967295
 8006420:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f103 0208 	add.w	r2, r3, #8
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f103 0208 	add.w	r2, r3, #8
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006456:	bf00      	nop
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006462:	b480      	push	{r7}
 8006464:	b085      	sub	sp, #20
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	601a      	str	r2, [r3, #0]
}
 800649e:	bf00      	nop
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064aa:	b480      	push	{r7}
 80064ac:	b085      	sub	sp, #20
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c0:	d103      	bne.n	80064ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	e00c      	b.n	80064e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	3308      	adds	r3, #8
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	e002      	b.n	80064d8 <vListInsert+0x2e>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	60fb      	str	r3, [r7, #12]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d2f6      	bcs.n	80064d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	1c5a      	adds	r2, r3, #1
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	601a      	str	r2, [r3, #0]
}
 8006510:	bf00      	nop
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	6892      	ldr	r2, [r2, #8]
 8006532:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	6852      	ldr	r2, [r2, #4]
 800653c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	429a      	cmp	r2, r3
 8006546:	d103      	bne.n	8006550 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	1e5a      	subs	r2, r3, #1
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	3b04      	subs	r3, #4
 8006580:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006588:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3b04      	subs	r3, #4
 800658e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f023 0201 	bic.w	r2, r3, #1
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	3b04      	subs	r3, #4
 800659e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065a0:	4a0c      	ldr	r2, [pc, #48]	; (80065d4 <pxPortInitialiseStack+0x64>)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3b14      	subs	r3, #20
 80065aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3b04      	subs	r3, #4
 80065b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f06f 0202 	mvn.w	r2, #2
 80065be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3b20      	subs	r3, #32
 80065c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065c6:	68fb      	ldr	r3, [r7, #12]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3714      	adds	r7, #20
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	080065d9 	.word	0x080065d9

080065d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80065de:	2300      	movs	r3, #0
 80065e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065e2:	4b12      	ldr	r3, [pc, #72]	; (800662c <prvTaskExitError+0x54>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ea:	d00a      	beq.n	8006602 <prvTaskExitError+0x2a>
	__asm volatile
 80065ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	60fb      	str	r3, [r7, #12]
}
 80065fe:	bf00      	nop
 8006600:	e7fe      	b.n	8006600 <prvTaskExitError+0x28>
	__asm volatile
 8006602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	60bb      	str	r3, [r7, #8]
}
 8006614:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006616:	bf00      	nop
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0fc      	beq.n	8006618 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800661e:	bf00      	nop
 8006620:	bf00      	nop
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	2000000c 	.word	0x2000000c

08006630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006630:	4b07      	ldr	r3, [pc, #28]	; (8006650 <pxCurrentTCBConst2>)
 8006632:	6819      	ldr	r1, [r3, #0]
 8006634:	6808      	ldr	r0, [r1, #0]
 8006636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663a:	f380 8809 	msr	PSP, r0
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f04f 0000 	mov.w	r0, #0
 8006646:	f380 8811 	msr	BASEPRI, r0
 800664a:	4770      	bx	lr
 800664c:	f3af 8000 	nop.w

08006650 <pxCurrentTCBConst2>:
 8006650:	20004aa4 	.word	0x20004aa4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006654:	bf00      	nop
 8006656:	bf00      	nop

08006658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006658:	4808      	ldr	r0, [pc, #32]	; (800667c <prvPortStartFirstTask+0x24>)
 800665a:	6800      	ldr	r0, [r0, #0]
 800665c:	6800      	ldr	r0, [r0, #0]
 800665e:	f380 8808 	msr	MSP, r0
 8006662:	f04f 0000 	mov.w	r0, #0
 8006666:	f380 8814 	msr	CONTROL, r0
 800666a:	b662      	cpsie	i
 800666c:	b661      	cpsie	f
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	df00      	svc	0
 8006678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800667a:	bf00      	nop
 800667c:	e000ed08 	.word	0xe000ed08

08006680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006686:	4b46      	ldr	r3, [pc, #280]	; (80067a0 <xPortStartScheduler+0x120>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a46      	ldr	r2, [pc, #280]	; (80067a4 <xPortStartScheduler+0x124>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d10a      	bne.n	80066a6 <xPortStartScheduler+0x26>
	__asm volatile
 8006690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	613b      	str	r3, [r7, #16]
}
 80066a2:	bf00      	nop
 80066a4:	e7fe      	b.n	80066a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066a6:	4b3e      	ldr	r3, [pc, #248]	; (80067a0 <xPortStartScheduler+0x120>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a3f      	ldr	r2, [pc, #252]	; (80067a8 <xPortStartScheduler+0x128>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d10a      	bne.n	80066c6 <xPortStartScheduler+0x46>
	__asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	60fb      	str	r3, [r7, #12]
}
 80066c2:	bf00      	nop
 80066c4:	e7fe      	b.n	80066c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066c6:	4b39      	ldr	r3, [pc, #228]	; (80067ac <xPortStartScheduler+0x12c>)
 80066c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	22ff      	movs	r2, #255	; 0xff
 80066d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066e0:	78fb      	ldrb	r3, [r7, #3]
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	4b31      	ldr	r3, [pc, #196]	; (80067b0 <xPortStartScheduler+0x130>)
 80066ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066ee:	4b31      	ldr	r3, [pc, #196]	; (80067b4 <xPortStartScheduler+0x134>)
 80066f0:	2207      	movs	r2, #7
 80066f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066f4:	e009      	b.n	800670a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80066f6:	4b2f      	ldr	r3, [pc, #188]	; (80067b4 <xPortStartScheduler+0x134>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	4a2d      	ldr	r2, [pc, #180]	; (80067b4 <xPortStartScheduler+0x134>)
 80066fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	b2db      	uxtb	r3, r3
 8006704:	005b      	lsls	r3, r3, #1
 8006706:	b2db      	uxtb	r3, r3
 8006708:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800670a:	78fb      	ldrb	r3, [r7, #3]
 800670c:	b2db      	uxtb	r3, r3
 800670e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006712:	2b80      	cmp	r3, #128	; 0x80
 8006714:	d0ef      	beq.n	80066f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006716:	4b27      	ldr	r3, [pc, #156]	; (80067b4 <xPortStartScheduler+0x134>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f1c3 0307 	rsb	r3, r3, #7
 800671e:	2b04      	cmp	r3, #4
 8006720:	d00a      	beq.n	8006738 <xPortStartScheduler+0xb8>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	60bb      	str	r3, [r7, #8]
}
 8006734:	bf00      	nop
 8006736:	e7fe      	b.n	8006736 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006738:	4b1e      	ldr	r3, [pc, #120]	; (80067b4 <xPortStartScheduler+0x134>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	021b      	lsls	r3, r3, #8
 800673e:	4a1d      	ldr	r2, [pc, #116]	; (80067b4 <xPortStartScheduler+0x134>)
 8006740:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006742:	4b1c      	ldr	r3, [pc, #112]	; (80067b4 <xPortStartScheduler+0x134>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800674a:	4a1a      	ldr	r2, [pc, #104]	; (80067b4 <xPortStartScheduler+0x134>)
 800674c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	b2da      	uxtb	r2, r3
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006756:	4b18      	ldr	r3, [pc, #96]	; (80067b8 <xPortStartScheduler+0x138>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a17      	ldr	r2, [pc, #92]	; (80067b8 <xPortStartScheduler+0x138>)
 800675c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006760:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006762:	4b15      	ldr	r3, [pc, #84]	; (80067b8 <xPortStartScheduler+0x138>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a14      	ldr	r2, [pc, #80]	; (80067b8 <xPortStartScheduler+0x138>)
 8006768:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800676c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800676e:	f000 f8dd 	bl	800692c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006772:	4b12      	ldr	r3, [pc, #72]	; (80067bc <xPortStartScheduler+0x13c>)
 8006774:	2200      	movs	r2, #0
 8006776:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006778:	f000 f8fc 	bl	8006974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800677c:	4b10      	ldr	r3, [pc, #64]	; (80067c0 <xPortStartScheduler+0x140>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a0f      	ldr	r2, [pc, #60]	; (80067c0 <xPortStartScheduler+0x140>)
 8006782:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006786:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006788:	f7ff ff66 	bl	8006658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800678c:	f001 f9fa 	bl	8007b84 <vTaskSwitchContext>
	prvTaskExitError();
 8006790:	f7ff ff22 	bl	80065d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3718      	adds	r7, #24
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	e000ed00 	.word	0xe000ed00
 80067a4:	410fc271 	.word	0x410fc271
 80067a8:	410fc270 	.word	0x410fc270
 80067ac:	e000e400 	.word	0xe000e400
 80067b0:	20004a5c 	.word	0x20004a5c
 80067b4:	20004a60 	.word	0x20004a60
 80067b8:	e000ed20 	.word	0xe000ed20
 80067bc:	2000000c 	.word	0x2000000c
 80067c0:	e000ef34 	.word	0xe000ef34

080067c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	607b      	str	r3, [r7, #4]
}
 80067dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067de:	4b0f      	ldr	r3, [pc, #60]	; (800681c <vPortEnterCritical+0x58>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3301      	adds	r3, #1
 80067e4:	4a0d      	ldr	r2, [pc, #52]	; (800681c <vPortEnterCritical+0x58>)
 80067e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067e8:	4b0c      	ldr	r3, [pc, #48]	; (800681c <vPortEnterCritical+0x58>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d10f      	bne.n	8006810 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067f0:	4b0b      	ldr	r3, [pc, #44]	; (8006820 <vPortEnterCritical+0x5c>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00a      	beq.n	8006810 <vPortEnterCritical+0x4c>
	__asm volatile
 80067fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	603b      	str	r3, [r7, #0]
}
 800680c:	bf00      	nop
 800680e:	e7fe      	b.n	800680e <vPortEnterCritical+0x4a>
	}
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	2000000c 	.word	0x2000000c
 8006820:	e000ed04 	.word	0xe000ed04

08006824 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800682a:	4b12      	ldr	r3, [pc, #72]	; (8006874 <vPortExitCritical+0x50>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10a      	bne.n	8006848 <vPortExitCritical+0x24>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	607b      	str	r3, [r7, #4]
}
 8006844:	bf00      	nop
 8006846:	e7fe      	b.n	8006846 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006848:	4b0a      	ldr	r3, [pc, #40]	; (8006874 <vPortExitCritical+0x50>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3b01      	subs	r3, #1
 800684e:	4a09      	ldr	r2, [pc, #36]	; (8006874 <vPortExitCritical+0x50>)
 8006850:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006852:	4b08      	ldr	r3, [pc, #32]	; (8006874 <vPortExitCritical+0x50>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d105      	bne.n	8006866 <vPortExitCritical+0x42>
 800685a:	2300      	movs	r3, #0
 800685c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006864:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	2000000c 	.word	0x2000000c
	...

08006880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006880:	f3ef 8009 	mrs	r0, PSP
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	4b15      	ldr	r3, [pc, #84]	; (80068e0 <pxCurrentTCBConst>)
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	f01e 0f10 	tst.w	lr, #16
 8006890:	bf08      	it	eq
 8006892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689a:	6010      	str	r0, [r2, #0]
 800689c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80068a4:	f380 8811 	msr	BASEPRI, r0
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f001 f968 	bl	8007b84 <vTaskSwitchContext>
 80068b4:	f04f 0000 	mov.w	r0, #0
 80068b8:	f380 8811 	msr	BASEPRI, r0
 80068bc:	bc09      	pop	{r0, r3}
 80068be:	6819      	ldr	r1, [r3, #0]
 80068c0:	6808      	ldr	r0, [r1, #0]
 80068c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c6:	f01e 0f10 	tst.w	lr, #16
 80068ca:	bf08      	it	eq
 80068cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80068d0:	f380 8809 	msr	PSP, r0
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	f3af 8000 	nop.w

080068e0 <pxCurrentTCBConst>:
 80068e0:	20004aa4 	.word	0x20004aa4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop

080068e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
	__asm volatile
 80068ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	607b      	str	r3, [r7, #4]
}
 8006900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006902:	f001 f885 	bl	8007a10 <xTaskIncrementTick>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800690c:	4b06      	ldr	r3, [pc, #24]	; (8006928 <xPortSysTickHandler+0x40>)
 800690e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	2300      	movs	r3, #0
 8006916:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	f383 8811 	msr	BASEPRI, r3
}
 800691e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006920:	bf00      	nop
 8006922:	3708      	adds	r7, #8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	e000ed04 	.word	0xe000ed04

0800692c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800692c:	b480      	push	{r7}
 800692e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006930:	4b0b      	ldr	r3, [pc, #44]	; (8006960 <vPortSetupTimerInterrupt+0x34>)
 8006932:	2200      	movs	r2, #0
 8006934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006936:	4b0b      	ldr	r3, [pc, #44]	; (8006964 <vPortSetupTimerInterrupt+0x38>)
 8006938:	2200      	movs	r2, #0
 800693a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800693c:	4b0a      	ldr	r3, [pc, #40]	; (8006968 <vPortSetupTimerInterrupt+0x3c>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a0a      	ldr	r2, [pc, #40]	; (800696c <vPortSetupTimerInterrupt+0x40>)
 8006942:	fba2 2303 	umull	r2, r3, r2, r3
 8006946:	099b      	lsrs	r3, r3, #6
 8006948:	4a09      	ldr	r2, [pc, #36]	; (8006970 <vPortSetupTimerInterrupt+0x44>)
 800694a:	3b01      	subs	r3, #1
 800694c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800694e:	4b04      	ldr	r3, [pc, #16]	; (8006960 <vPortSetupTimerInterrupt+0x34>)
 8006950:	2207      	movs	r2, #7
 8006952:	601a      	str	r2, [r3, #0]
}
 8006954:	bf00      	nop
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	e000e010 	.word	0xe000e010
 8006964:	e000e018 	.word	0xe000e018
 8006968:	20000000 	.word	0x20000000
 800696c:	10624dd3 	.word	0x10624dd3
 8006970:	e000e014 	.word	0xe000e014

08006974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006974:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006984 <vPortEnableVFP+0x10>
 8006978:	6801      	ldr	r1, [r0, #0]
 800697a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800697e:	6001      	str	r1, [r0, #0]
 8006980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006982:	bf00      	nop
 8006984:	e000ed88 	.word	0xe000ed88

08006988 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800698e:	f3ef 8305 	mrs	r3, IPSR
 8006992:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b0f      	cmp	r3, #15
 8006998:	d914      	bls.n	80069c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800699a:	4a17      	ldr	r2, [pc, #92]	; (80069f8 <vPortValidateInterruptPriority+0x70>)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4413      	add	r3, r2
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069a4:	4b15      	ldr	r3, [pc, #84]	; (80069fc <vPortValidateInterruptPriority+0x74>)
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	7afa      	ldrb	r2, [r7, #11]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d20a      	bcs.n	80069c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	607b      	str	r3, [r7, #4]
}
 80069c0:	bf00      	nop
 80069c2:	e7fe      	b.n	80069c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80069c4:	4b0e      	ldr	r3, [pc, #56]	; (8006a00 <vPortValidateInterruptPriority+0x78>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80069cc:	4b0d      	ldr	r3, [pc, #52]	; (8006a04 <vPortValidateInterruptPriority+0x7c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d90a      	bls.n	80069ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	603b      	str	r3, [r7, #0]
}
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <vPortValidateInterruptPriority+0x60>
	}
 80069ea:	bf00      	nop
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	e000e3f0 	.word	0xe000e3f0
 80069fc:	20004a5c 	.word	0x20004a5c
 8006a00:	e000ed0c 	.word	0xe000ed0c
 8006a04:	20004a60 	.word	0x20004a60

08006a08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10a      	bne.n	8006a32 <xQueueGenericReset+0x2a>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	60bb      	str	r3, [r7, #8]
}
 8006a2e:	bf00      	nop
 8006a30:	e7fe      	b.n	8006a30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006a32:	f7ff fec7 	bl	80067c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3e:	68f9      	ldr	r1, [r7, #12]
 8006a40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a42:	fb01 f303 	mul.w	r3, r1, r3
 8006a46:	441a      	add	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a62:	3b01      	subs	r3, #1
 8006a64:	68f9      	ldr	r1, [r7, #12]
 8006a66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a68:	fb01 f303 	mul.w	r3, r1, r3
 8006a6c:	441a      	add	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	22ff      	movs	r2, #255	; 0xff
 8006a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	22ff      	movs	r2, #255	; 0xff
 8006a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d114      	bne.n	8006ab2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d01a      	beq.n	8006ac6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	3310      	adds	r3, #16
 8006a94:	4618      	mov	r0, r3
 8006a96:	f001 f929 	bl	8007cec <xTaskRemoveFromEventList>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d012      	beq.n	8006ac6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006aa0:	4b0c      	ldr	r3, [pc, #48]	; (8006ad4 <xQueueGenericReset+0xcc>)
 8006aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	e009      	b.n	8006ac6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	3310      	adds	r3, #16
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7ff fca6 	bl	8006408 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	3324      	adds	r3, #36	; 0x24
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7ff fca1 	bl	8006408 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ac6:	f7ff fead 	bl	8006824 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006aca:	2301      	movs	r3, #1
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	e000ed04 	.word	0xe000ed04

08006ad8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08e      	sub	sp, #56	; 0x38
 8006adc:	af02      	add	r7, sp, #8
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
 8006ae4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10a      	bne.n	8006b02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006afe:	bf00      	nop
 8006b00:	e7fe      	b.n	8006b00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10a      	bne.n	8006b1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0c:	f383 8811 	msr	BASEPRI, r3
 8006b10:	f3bf 8f6f 	isb	sy
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b1a:	bf00      	nop
 8006b1c:	e7fe      	b.n	8006b1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d002      	beq.n	8006b2a <xQueueGenericCreateStatic+0x52>
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <xQueueGenericCreateStatic+0x56>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e000      	b.n	8006b30 <xQueueGenericCreateStatic+0x58>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10a      	bne.n	8006b4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	623b      	str	r3, [r7, #32]
}
 8006b46:	bf00      	nop
 8006b48:	e7fe      	b.n	8006b48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d102      	bne.n	8006b56 <xQueueGenericCreateStatic+0x7e>
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <xQueueGenericCreateStatic+0x82>
 8006b56:	2301      	movs	r3, #1
 8006b58:	e000      	b.n	8006b5c <xQueueGenericCreateStatic+0x84>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10a      	bne.n	8006b76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	61fb      	str	r3, [r7, #28]
}
 8006b72:	bf00      	nop
 8006b74:	e7fe      	b.n	8006b74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006b76:	2350      	movs	r3, #80	; 0x50
 8006b78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2b50      	cmp	r3, #80	; 0x50
 8006b7e:	d00a      	beq.n	8006b96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	61bb      	str	r3, [r7, #24]
}
 8006b92:	bf00      	nop
 8006b94:	e7fe      	b.n	8006b94 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006b96:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00d      	beq.n	8006bbe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006baa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	68b9      	ldr	r1, [r7, #8]
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 f805 	bl	8006bc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3730      	adds	r7, #48	; 0x30
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
 8006bd4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d103      	bne.n	8006be4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	e002      	b.n	8006bea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	69b8      	ldr	r0, [r7, #24]
 8006bfa:	f7ff ff05 	bl	8006a08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	78fa      	ldrb	r2, [r7, #3]
 8006c02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c06:	bf00      	nop
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
	...

08006c10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08e      	sub	sp, #56	; 0x38
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10a      	bne.n	8006c42 <xQueueGenericSend+0x32>
	__asm volatile
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c3e:	bf00      	nop
 8006c40:	e7fe      	b.n	8006c40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d103      	bne.n	8006c50 <xQueueGenericSend+0x40>
 8006c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <xQueueGenericSend+0x44>
 8006c50:	2301      	movs	r3, #1
 8006c52:	e000      	b.n	8006c56 <xQueueGenericSend+0x46>
 8006c54:	2300      	movs	r3, #0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10a      	bne.n	8006c70 <xQueueGenericSend+0x60>
	__asm volatile
 8006c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c6c:	bf00      	nop
 8006c6e:	e7fe      	b.n	8006c6e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d103      	bne.n	8006c7e <xQueueGenericSend+0x6e>
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d101      	bne.n	8006c82 <xQueueGenericSend+0x72>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e000      	b.n	8006c84 <xQueueGenericSend+0x74>
 8006c82:	2300      	movs	r3, #0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10a      	bne.n	8006c9e <xQueueGenericSend+0x8e>
	__asm volatile
 8006c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8c:	f383 8811 	msr	BASEPRI, r3
 8006c90:	f3bf 8f6f 	isb	sy
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	623b      	str	r3, [r7, #32]
}
 8006c9a:	bf00      	nop
 8006c9c:	e7fe      	b.n	8006c9c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c9e:	f001 f9e7 	bl	8008070 <xTaskGetSchedulerState>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d102      	bne.n	8006cae <xQueueGenericSend+0x9e>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <xQueueGenericSend+0xa2>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e000      	b.n	8006cb4 <xQueueGenericSend+0xa4>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10a      	bne.n	8006cce <xQueueGenericSend+0xbe>
	__asm volatile
 8006cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbc:	f383 8811 	msr	BASEPRI, r3
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	61fb      	str	r3, [r7, #28]
}
 8006cca:	bf00      	nop
 8006ccc:	e7fe      	b.n	8006ccc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cce:	f7ff fd79 	bl	80067c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d302      	bcc.n	8006ce4 <xQueueGenericSend+0xd4>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d129      	bne.n	8006d38 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	68b9      	ldr	r1, [r7, #8]
 8006ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cea:	f000 fa0b 	bl	8007104 <prvCopyDataToQueue>
 8006cee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d010      	beq.n	8006d1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfa:	3324      	adds	r3, #36	; 0x24
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 fff5 	bl	8007cec <xTaskRemoveFromEventList>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d013      	beq.n	8006d30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d08:	4b3f      	ldr	r3, [pc, #252]	; (8006e08 <xQueueGenericSend+0x1f8>)
 8006d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	e00a      	b.n	8006d30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d007      	beq.n	8006d30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d20:	4b39      	ldr	r3, [pc, #228]	; (8006e08 <xQueueGenericSend+0x1f8>)
 8006d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d30:	f7ff fd78 	bl	8006824 <vPortExitCritical>
				return pdPASS;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e063      	b.n	8006e00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d103      	bne.n	8006d46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d3e:	f7ff fd71 	bl	8006824 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d42:	2300      	movs	r3, #0
 8006d44:	e05c      	b.n	8006e00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d106      	bne.n	8006d5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d4c:	f107 0314 	add.w	r3, r7, #20
 8006d50:	4618      	mov	r0, r3
 8006d52:	f001 f82f 	bl	8007db4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d56:	2301      	movs	r3, #1
 8006d58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d5a:	f7ff fd63 	bl	8006824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d5e:	f000 fd9b 	bl	8007898 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d62:	f7ff fd2f 	bl	80067c4 <vPortEnterCritical>
 8006d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d6c:	b25b      	sxtb	r3, r3
 8006d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d72:	d103      	bne.n	8006d7c <xQueueGenericSend+0x16c>
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d82:	b25b      	sxtb	r3, r3
 8006d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d88:	d103      	bne.n	8006d92 <xQueueGenericSend+0x182>
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d92:	f7ff fd47 	bl	8006824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d96:	1d3a      	adds	r2, r7, #4
 8006d98:	f107 0314 	add.w	r3, r7, #20
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f001 f81e 	bl	8007de0 <xTaskCheckForTimeOut>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d124      	bne.n	8006df4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006daa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dac:	f000 faa2 	bl	80072f4 <prvIsQueueFull>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d018      	beq.n	8006de8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db8:	3310      	adds	r3, #16
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 ff44 	bl	8007c4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dc6:	f000 fa2d 	bl	8007224 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006dca:	f000 fd73 	bl	80078b4 <xTaskResumeAll>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f47f af7c 	bne.w	8006cce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006dd6:	4b0c      	ldr	r3, [pc, #48]	; (8006e08 <xQueueGenericSend+0x1f8>)
 8006dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	e772      	b.n	8006cce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dea:	f000 fa1b 	bl	8007224 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dee:	f000 fd61 	bl	80078b4 <xTaskResumeAll>
 8006df2:	e76c      	b.n	8006cce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006df6:	f000 fa15 	bl	8007224 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dfa:	f000 fd5b 	bl	80078b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006dfe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3738      	adds	r7, #56	; 0x38
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	e000ed04 	.word	0xe000ed04

08006e0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b090      	sub	sp, #64	; 0x40
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10a      	bne.n	8006e3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e36:	bf00      	nop
 8006e38:	e7fe      	b.n	8006e38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d103      	bne.n	8006e48 <xQueueGenericSendFromISR+0x3c>
 8006e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d101      	bne.n	8006e4c <xQueueGenericSendFromISR+0x40>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e000      	b.n	8006e4e <xQueueGenericSendFromISR+0x42>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10a      	bne.n	8006e68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e64:	bf00      	nop
 8006e66:	e7fe      	b.n	8006e66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d103      	bne.n	8006e76 <xQueueGenericSendFromISR+0x6a>
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d101      	bne.n	8006e7a <xQueueGenericSendFromISR+0x6e>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e000      	b.n	8006e7c <xQueueGenericSendFromISR+0x70>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10a      	bne.n	8006e96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e84:	f383 8811 	msr	BASEPRI, r3
 8006e88:	f3bf 8f6f 	isb	sy
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	623b      	str	r3, [r7, #32]
}
 8006e92:	bf00      	nop
 8006e94:	e7fe      	b.n	8006e94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e96:	f7ff fd77 	bl	8006988 <vPortValidateInterruptPriority>
	__asm volatile
 8006e9a:	f3ef 8211 	mrs	r2, BASEPRI
 8006e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	61fa      	str	r2, [r7, #28]
 8006eb0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006eb2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006eb4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d302      	bcc.n	8006ec8 <xQueueGenericSendFromISR+0xbc>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d12f      	bne.n	8006f28 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ed8:	683a      	ldr	r2, [r7, #0]
 8006eda:	68b9      	ldr	r1, [r7, #8]
 8006edc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ede:	f000 f911 	bl	8007104 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ee2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eea:	d112      	bne.n	8006f12 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d016      	beq.n	8006f22 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef6:	3324      	adds	r3, #36	; 0x24
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 fef7 	bl	8007cec <xTaskRemoveFromEventList>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00e      	beq.n	8006f22 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00b      	beq.n	8006f22 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	e007      	b.n	8006f22 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f16:	3301      	adds	r3, #1
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	b25a      	sxtb	r2, r3
 8006f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f22:	2301      	movs	r3, #1
 8006f24:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006f26:	e001      	b.n	8006f2c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f383 8811 	msr	BASEPRI, r3
}
 8006f36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3740      	adds	r7, #64	; 0x40
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
	...

08006f44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b08c      	sub	sp, #48	; 0x30
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f50:	2300      	movs	r3, #0
 8006f52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10a      	bne.n	8006f74 <xQueueReceive+0x30>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	623b      	str	r3, [r7, #32]
}
 8006f70:	bf00      	nop
 8006f72:	e7fe      	b.n	8006f72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d103      	bne.n	8006f82 <xQueueReceive+0x3e>
 8006f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <xQueueReceive+0x42>
 8006f82:	2301      	movs	r3, #1
 8006f84:	e000      	b.n	8006f88 <xQueueReceive+0x44>
 8006f86:	2300      	movs	r3, #0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10a      	bne.n	8006fa2 <xQueueReceive+0x5e>
	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	61fb      	str	r3, [r7, #28]
}
 8006f9e:	bf00      	nop
 8006fa0:	e7fe      	b.n	8006fa0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fa2:	f001 f865 	bl	8008070 <xTaskGetSchedulerState>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d102      	bne.n	8006fb2 <xQueueReceive+0x6e>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <xQueueReceive+0x72>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e000      	b.n	8006fb8 <xQueueReceive+0x74>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10a      	bne.n	8006fd2 <xQueueReceive+0x8e>
	__asm volatile
 8006fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc0:	f383 8811 	msr	BASEPRI, r3
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	61bb      	str	r3, [r7, #24]
}
 8006fce:	bf00      	nop
 8006fd0:	e7fe      	b.n	8006fd0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fd2:	f7ff fbf7 	bl	80067c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fda:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d01f      	beq.n	8007022 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006fe2:	68b9      	ldr	r1, [r7, #8]
 8006fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fe6:	f000 f8f7 	bl	80071d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	1e5a      	subs	r2, r3, #1
 8006fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00f      	beq.n	800701a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffc:	3310      	adds	r3, #16
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 fe74 	bl	8007cec <xTaskRemoveFromEventList>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d007      	beq.n	800701a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800700a:	4b3d      	ldr	r3, [pc, #244]	; (8007100 <xQueueReceive+0x1bc>)
 800700c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007010:	601a      	str	r2, [r3, #0]
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800701a:	f7ff fc03 	bl	8006824 <vPortExitCritical>
				return pdPASS;
 800701e:	2301      	movs	r3, #1
 8007020:	e069      	b.n	80070f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d103      	bne.n	8007030 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007028:	f7ff fbfc 	bl	8006824 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800702c:	2300      	movs	r3, #0
 800702e:	e062      	b.n	80070f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007032:	2b00      	cmp	r3, #0
 8007034:	d106      	bne.n	8007044 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007036:	f107 0310 	add.w	r3, r7, #16
 800703a:	4618      	mov	r0, r3
 800703c:	f000 feba 	bl	8007db4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007040:	2301      	movs	r3, #1
 8007042:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007044:	f7ff fbee 	bl	8006824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007048:	f000 fc26 	bl	8007898 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800704c:	f7ff fbba 	bl	80067c4 <vPortEnterCritical>
 8007050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007052:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007056:	b25b      	sxtb	r3, r3
 8007058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705c:	d103      	bne.n	8007066 <xQueueReceive+0x122>
 800705e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007060:	2200      	movs	r2, #0
 8007062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007068:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800706c:	b25b      	sxtb	r3, r3
 800706e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007072:	d103      	bne.n	800707c <xQueueReceive+0x138>
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	2200      	movs	r2, #0
 8007078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800707c:	f7ff fbd2 	bl	8006824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007080:	1d3a      	adds	r2, r7, #4
 8007082:	f107 0310 	add.w	r3, r7, #16
 8007086:	4611      	mov	r1, r2
 8007088:	4618      	mov	r0, r3
 800708a:	f000 fea9 	bl	8007de0 <xTaskCheckForTimeOut>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d123      	bne.n	80070dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007096:	f000 f917 	bl	80072c8 <prvIsQueueEmpty>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d017      	beq.n	80070d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a2:	3324      	adds	r3, #36	; 0x24
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	4611      	mov	r1, r2
 80070a8:	4618      	mov	r0, r3
 80070aa:	f000 fdcf 	bl	8007c4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070b0:	f000 f8b8 	bl	8007224 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070b4:	f000 fbfe 	bl	80078b4 <xTaskResumeAll>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d189      	bne.n	8006fd2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80070be:	4b10      	ldr	r3, [pc, #64]	; (8007100 <xQueueReceive+0x1bc>)
 80070c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	f3bf 8f4f 	dsb	sy
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	e780      	b.n	8006fd2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80070d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070d2:	f000 f8a7 	bl	8007224 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070d6:	f000 fbed 	bl	80078b4 <xTaskResumeAll>
 80070da:	e77a      	b.n	8006fd2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80070dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070de:	f000 f8a1 	bl	8007224 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070e2:	f000 fbe7 	bl	80078b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070e8:	f000 f8ee 	bl	80072c8 <prvIsQueueEmpty>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f43f af6f 	beq.w	8006fd2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3730      	adds	r7, #48	; 0x30
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	e000ed04 	.word	0xe000ed04

08007104 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007110:	2300      	movs	r3, #0
 8007112:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007118:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10d      	bne.n	800713e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d14d      	bne.n	80071c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	4618      	mov	r0, r3
 8007130:	f000 ffbc 	bl	80080ac <xTaskPriorityDisinherit>
 8007134:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	609a      	str	r2, [r3, #8]
 800713c:	e043      	b.n	80071c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d119      	bne.n	8007178 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6858      	ldr	r0, [r3, #4]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714c:	461a      	mov	r2, r3
 800714e:	68b9      	ldr	r1, [r7, #8]
 8007150:	f001 fbe2 	bl	8008918 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715c:	441a      	add	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	429a      	cmp	r2, r3
 800716c:	d32b      	bcc.n	80071c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	605a      	str	r2, [r3, #4]
 8007176:	e026      	b.n	80071c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	68d8      	ldr	r0, [r3, #12]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007180:	461a      	mov	r2, r3
 8007182:	68b9      	ldr	r1, [r7, #8]
 8007184:	f001 fbc8 	bl	8008918 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	68da      	ldr	r2, [r3, #12]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007190:	425b      	negs	r3, r3
 8007192:	441a      	add	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	68da      	ldr	r2, [r3, #12]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d207      	bcs.n	80071b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	689a      	ldr	r2, [r3, #8]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ac:	425b      	negs	r3, r3
 80071ae:	441a      	add	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d105      	bne.n	80071c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	3b01      	subs	r3, #1
 80071c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80071ce:	697b      	ldr	r3, [r7, #20]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3718      	adds	r7, #24
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d018      	beq.n	800721c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68da      	ldr	r2, [r3, #12]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	441a      	add	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68da      	ldr	r2, [r3, #12]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	429a      	cmp	r2, r3
 8007202:	d303      	bcc.n	800720c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68d9      	ldr	r1, [r3, #12]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007214:	461a      	mov	r2, r3
 8007216:	6838      	ldr	r0, [r7, #0]
 8007218:	f001 fb7e 	bl	8008918 <memcpy>
	}
}
 800721c:	bf00      	nop
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800722c:	f7ff faca 	bl	80067c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007236:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007238:	e011      	b.n	800725e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723e:	2b00      	cmp	r3, #0
 8007240:	d012      	beq.n	8007268 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	3324      	adds	r3, #36	; 0x24
 8007246:	4618      	mov	r0, r3
 8007248:	f000 fd50 	bl	8007cec <xTaskRemoveFromEventList>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007252:	f000 fe27 	bl	8007ea4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007256:	7bfb      	ldrb	r3, [r7, #15]
 8007258:	3b01      	subs	r3, #1
 800725a:	b2db      	uxtb	r3, r3
 800725c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800725e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007262:	2b00      	cmp	r3, #0
 8007264:	dce9      	bgt.n	800723a <prvUnlockQueue+0x16>
 8007266:	e000      	b.n	800726a <prvUnlockQueue+0x46>
					break;
 8007268:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	22ff      	movs	r2, #255	; 0xff
 800726e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007272:	f7ff fad7 	bl	8006824 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007276:	f7ff faa5 	bl	80067c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007280:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007282:	e011      	b.n	80072a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d012      	beq.n	80072b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3310      	adds	r3, #16
 8007290:	4618      	mov	r0, r3
 8007292:	f000 fd2b 	bl	8007cec <xTaskRemoveFromEventList>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800729c:	f000 fe02 	bl	8007ea4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80072a0:	7bbb      	ldrb	r3, [r7, #14]
 80072a2:	3b01      	subs	r3, #1
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	dce9      	bgt.n	8007284 <prvUnlockQueue+0x60>
 80072b0:	e000      	b.n	80072b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80072b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	22ff      	movs	r2, #255	; 0xff
 80072b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80072bc:	f7ff fab2 	bl	8006824 <vPortExitCritical>
}
 80072c0:	bf00      	nop
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072d0:	f7ff fa78 	bl	80067c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d102      	bne.n	80072e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80072dc:	2301      	movs	r3, #1
 80072de:	60fb      	str	r3, [r7, #12]
 80072e0:	e001      	b.n	80072e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80072e2:	2300      	movs	r3, #0
 80072e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072e6:	f7ff fa9d 	bl	8006824 <vPortExitCritical>

	return xReturn;
 80072ea:	68fb      	ldr	r3, [r7, #12]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072fc:	f7ff fa62 	bl	80067c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007308:	429a      	cmp	r2, r3
 800730a:	d102      	bne.n	8007312 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800730c:	2301      	movs	r3, #1
 800730e:	60fb      	str	r3, [r7, #12]
 8007310:	e001      	b.n	8007316 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007312:	2300      	movs	r3, #0
 8007314:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007316:	f7ff fa85 	bl	8006824 <vPortExitCritical>

	return xReturn;
 800731a:	68fb      	ldr	r3, [r7, #12]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800732e:	2300      	movs	r3, #0
 8007330:	60fb      	str	r3, [r7, #12]
 8007332:	e014      	b.n	800735e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007334:	4a0f      	ldr	r2, [pc, #60]	; (8007374 <vQueueAddToRegistry+0x50>)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10b      	bne.n	8007358 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007340:	490c      	ldr	r1, [pc, #48]	; (8007374 <vQueueAddToRegistry+0x50>)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800734a:	4a0a      	ldr	r2, [pc, #40]	; (8007374 <vQueueAddToRegistry+0x50>)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	00db      	lsls	r3, r3, #3
 8007350:	4413      	add	r3, r2
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007356:	e006      	b.n	8007366 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	3301      	adds	r3, #1
 800735c:	60fb      	str	r3, [r7, #12]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2b07      	cmp	r3, #7
 8007362:	d9e7      	bls.n	8007334 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007364:	bf00      	nop
 8007366:	bf00      	nop
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	20004a64 	.word	0x20004a64

08007378 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007388:	f7ff fa1c 	bl	80067c4 <vPortEnterCritical>
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007392:	b25b      	sxtb	r3, r3
 8007394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007398:	d103      	bne.n	80073a2 <vQueueWaitForMessageRestricted+0x2a>
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073a8:	b25b      	sxtb	r3, r3
 80073aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ae:	d103      	bne.n	80073b8 <vQueueWaitForMessageRestricted+0x40>
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073b8:	f7ff fa34 	bl	8006824 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d106      	bne.n	80073d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	3324      	adds	r3, #36	; 0x24
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	68b9      	ldr	r1, [r7, #8]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 fc61 	bl	8007c94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80073d2:	6978      	ldr	r0, [r7, #20]
 80073d4:	f7ff ff26 	bl	8007224 <prvUnlockQueue>
	}
 80073d8:	bf00      	nop
 80073da:	3718      	adds	r7, #24
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08e      	sub	sp, #56	; 0x38
 80073e4:	af04      	add	r7, sp, #16
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
 80073ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80073ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10a      	bne.n	800740a <xTaskCreateStatic+0x2a>
	__asm volatile
 80073f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	623b      	str	r3, [r7, #32]
}
 8007406:	bf00      	nop
 8007408:	e7fe      	b.n	8007408 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800740a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10a      	bne.n	8007426 <xTaskCreateStatic+0x46>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	61fb      	str	r3, [r7, #28]
}
 8007422:	bf00      	nop
 8007424:	e7fe      	b.n	8007424 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007426:	23bc      	movs	r3, #188	; 0xbc
 8007428:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	2bbc      	cmp	r3, #188	; 0xbc
 800742e:	d00a      	beq.n	8007446 <xTaskCreateStatic+0x66>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	61bb      	str	r3, [r7, #24]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007446:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744a:	2b00      	cmp	r3, #0
 800744c:	d01e      	beq.n	800748c <xTaskCreateStatic+0xac>
 800744e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007450:	2b00      	cmp	r3, #0
 8007452:	d01b      	beq.n	800748c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007456:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800745c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007460:	2202      	movs	r2, #2
 8007462:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007466:	2300      	movs	r3, #0
 8007468:	9303      	str	r3, [sp, #12]
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	9302      	str	r3, [sp, #8]
 800746e:	f107 0314 	add.w	r3, r7, #20
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	68b9      	ldr	r1, [r7, #8]
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 f850 	bl	8007524 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007484:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007486:	f000 f8f3 	bl	8007670 <prvAddNewTaskToReadyList>
 800748a:	e001      	b.n	8007490 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800748c:	2300      	movs	r3, #0
 800748e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007490:	697b      	ldr	r3, [r7, #20]
	}
 8007492:	4618      	mov	r0, r3
 8007494:	3728      	adds	r7, #40	; 0x28
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800749a:	b580      	push	{r7, lr}
 800749c:	b08c      	sub	sp, #48	; 0x30
 800749e:	af04      	add	r7, sp, #16
 80074a0:	60f8      	str	r0, [r7, #12]
 80074a2:	60b9      	str	r1, [r7, #8]
 80074a4:	603b      	str	r3, [r7, #0]
 80074a6:	4613      	mov	r3, r2
 80074a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074aa:	88fb      	ldrh	r3, [r7, #6]
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fe fdc0 	bl	8006034 <pvPortMalloc>
 80074b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00e      	beq.n	80074da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074bc:	20bc      	movs	r0, #188	; 0xbc
 80074be:	f7fe fdb9 	bl	8006034 <pvPortMalloc>
 80074c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	631a      	str	r2, [r3, #48]	; 0x30
 80074d0:	e005      	b.n	80074de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80074d2:	6978      	ldr	r0, [r7, #20]
 80074d4:	f7fe fe7a 	bl	80061cc <vPortFree>
 80074d8:	e001      	b.n	80074de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074da:	2300      	movs	r3, #0
 80074dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d017      	beq.n	8007514 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074ec:	88fa      	ldrh	r2, [r7, #6]
 80074ee:	2300      	movs	r3, #0
 80074f0:	9303      	str	r3, [sp, #12]
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	9302      	str	r3, [sp, #8]
 80074f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f8:	9301      	str	r3, [sp, #4]
 80074fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	68b9      	ldr	r1, [r7, #8]
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 f80e 	bl	8007524 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007508:	69f8      	ldr	r0, [r7, #28]
 800750a:	f000 f8b1 	bl	8007670 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800750e:	2301      	movs	r3, #1
 8007510:	61bb      	str	r3, [r7, #24]
 8007512:	e002      	b.n	800751a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007514:	f04f 33ff 	mov.w	r3, #4294967295
 8007518:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800751a:	69bb      	ldr	r3, [r7, #24]
	}
 800751c:	4618      	mov	r0, r3
 800751e:	3720      	adds	r7, #32
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b088      	sub	sp, #32
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
 8007530:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	461a      	mov	r2, r3
 800753c:	21a5      	movs	r1, #165	; 0xa5
 800753e:	f001 f9f9 	bl	8008934 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800754c:	3b01      	subs	r3, #1
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	f023 0307 	bic.w	r3, r3, #7
 800755a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	f003 0307 	and.w	r3, r3, #7
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00a      	beq.n	800757c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	617b      	str	r3, [r7, #20]
}
 8007578:	bf00      	nop
 800757a:	e7fe      	b.n	800757a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d01f      	beq.n	80075c2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007582:	2300      	movs	r3, #0
 8007584:	61fb      	str	r3, [r7, #28]
 8007586:	e012      	b.n	80075ae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	4413      	add	r3, r2
 800758e:	7819      	ldrb	r1, [r3, #0]
 8007590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	4413      	add	r3, r2
 8007596:	3334      	adds	r3, #52	; 0x34
 8007598:	460a      	mov	r2, r1
 800759a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	4413      	add	r3, r2
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d006      	beq.n	80075b6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	3301      	adds	r3, #1
 80075ac:	61fb      	str	r3, [r7, #28]
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	2b0f      	cmp	r3, #15
 80075b2:	d9e9      	bls.n	8007588 <prvInitialiseNewTask+0x64>
 80075b4:	e000      	b.n	80075b8 <prvInitialiseNewTask+0x94>
			{
				break;
 80075b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075c0:	e003      	b.n	80075ca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075cc:	2b37      	cmp	r3, #55	; 0x37
 80075ce:	d901      	bls.n	80075d4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075d0:	2337      	movs	r3, #55	; 0x37
 80075d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80075e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e2:	2200      	movs	r2, #0
 80075e4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	3304      	adds	r3, #4
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7fe ff2c 	bl	8006448 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f2:	3318      	adds	r3, #24
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fe ff27 	bl	8006448 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007602:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800760e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007612:	2200      	movs	r2, #0
 8007614:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761a:	2200      	movs	r2, #0
 800761c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007622:	3354      	adds	r3, #84	; 0x54
 8007624:	2260      	movs	r2, #96	; 0x60
 8007626:	2100      	movs	r1, #0
 8007628:	4618      	mov	r0, r3
 800762a:	f001 f983 	bl	8008934 <memset>
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	4a0c      	ldr	r2, [pc, #48]	; (8007664 <prvInitialiseNewTask+0x140>)
 8007632:	659a      	str	r2, [r3, #88]	; 0x58
 8007634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007636:	4a0c      	ldr	r2, [pc, #48]	; (8007668 <prvInitialiseNewTask+0x144>)
 8007638:	65da      	str	r2, [r3, #92]	; 0x5c
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	4a0b      	ldr	r2, [pc, #44]	; (800766c <prvInitialiseNewTask+0x148>)
 800763e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	68f9      	ldr	r1, [r7, #12]
 8007644:	69b8      	ldr	r0, [r7, #24]
 8007646:	f7fe ff93 	bl	8006570 <pxPortInitialiseStack>
 800764a:	4602      	mov	r2, r0
 800764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007652:	2b00      	cmp	r3, #0
 8007654:	d002      	beq.n	800765c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800765a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800765c:	bf00      	nop
 800765e:	3720      	adds	r7, #32
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	08008b60 	.word	0x08008b60
 8007668:	08008b80 	.word	0x08008b80
 800766c:	08008b40 	.word	0x08008b40

08007670 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007678:	f7ff f8a4 	bl	80067c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800767c:	4b2d      	ldr	r3, [pc, #180]	; (8007734 <prvAddNewTaskToReadyList+0xc4>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	3301      	adds	r3, #1
 8007682:	4a2c      	ldr	r2, [pc, #176]	; (8007734 <prvAddNewTaskToReadyList+0xc4>)
 8007684:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007686:	4b2c      	ldr	r3, [pc, #176]	; (8007738 <prvAddNewTaskToReadyList+0xc8>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d109      	bne.n	80076a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800768e:	4a2a      	ldr	r2, [pc, #168]	; (8007738 <prvAddNewTaskToReadyList+0xc8>)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007694:	4b27      	ldr	r3, [pc, #156]	; (8007734 <prvAddNewTaskToReadyList+0xc4>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d110      	bne.n	80076be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800769c:	f000 fc26 	bl	8007eec <prvInitialiseTaskLists>
 80076a0:	e00d      	b.n	80076be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80076a2:	4b26      	ldr	r3, [pc, #152]	; (800773c <prvAddNewTaskToReadyList+0xcc>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d109      	bne.n	80076be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076aa:	4b23      	ldr	r3, [pc, #140]	; (8007738 <prvAddNewTaskToReadyList+0xc8>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d802      	bhi.n	80076be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80076b8:	4a1f      	ldr	r2, [pc, #124]	; (8007738 <prvAddNewTaskToReadyList+0xc8>)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076be:	4b20      	ldr	r3, [pc, #128]	; (8007740 <prvAddNewTaskToReadyList+0xd0>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3301      	adds	r3, #1
 80076c4:	4a1e      	ldr	r2, [pc, #120]	; (8007740 <prvAddNewTaskToReadyList+0xd0>)
 80076c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80076c8:	4b1d      	ldr	r3, [pc, #116]	; (8007740 <prvAddNewTaskToReadyList+0xd0>)
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d4:	4b1b      	ldr	r3, [pc, #108]	; (8007744 <prvAddNewTaskToReadyList+0xd4>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d903      	bls.n	80076e4 <prvAddNewTaskToReadyList+0x74>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e0:	4a18      	ldr	r2, [pc, #96]	; (8007744 <prvAddNewTaskToReadyList+0xd4>)
 80076e2:	6013      	str	r3, [r2, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e8:	4613      	mov	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4413      	add	r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4a15      	ldr	r2, [pc, #84]	; (8007748 <prvAddNewTaskToReadyList+0xd8>)
 80076f2:	441a      	add	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	3304      	adds	r3, #4
 80076f8:	4619      	mov	r1, r3
 80076fa:	4610      	mov	r0, r2
 80076fc:	f7fe feb1 	bl	8006462 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007700:	f7ff f890 	bl	8006824 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007704:	4b0d      	ldr	r3, [pc, #52]	; (800773c <prvAddNewTaskToReadyList+0xcc>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00e      	beq.n	800772a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800770c:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <prvAddNewTaskToReadyList+0xc8>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007716:	429a      	cmp	r2, r3
 8007718:	d207      	bcs.n	800772a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800771a:	4b0c      	ldr	r3, [pc, #48]	; (800774c <prvAddNewTaskToReadyList+0xdc>)
 800771c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800772a:	bf00      	nop
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	20004f78 	.word	0x20004f78
 8007738:	20004aa4 	.word	0x20004aa4
 800773c:	20004f84 	.word	0x20004f84
 8007740:	20004f94 	.word	0x20004f94
 8007744:	20004f80 	.word	0x20004f80
 8007748:	20004aa8 	.word	0x20004aa8
 800774c:	e000ed04 	.word	0xe000ed04

08007750 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007758:	2300      	movs	r3, #0
 800775a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d017      	beq.n	8007792 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007762:	4b13      	ldr	r3, [pc, #76]	; (80077b0 <vTaskDelay+0x60>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00a      	beq.n	8007780 <vTaskDelay+0x30>
	__asm volatile
 800776a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	60bb      	str	r3, [r7, #8]
}
 800777c:	bf00      	nop
 800777e:	e7fe      	b.n	800777e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007780:	f000 f88a 	bl	8007898 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007784:	2100      	movs	r1, #0
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fcfe 	bl	8008188 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800778c:	f000 f892 	bl	80078b4 <xTaskResumeAll>
 8007790:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d107      	bne.n	80077a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007798:	4b06      	ldr	r3, [pc, #24]	; (80077b4 <vTaskDelay+0x64>)
 800779a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800779e:	601a      	str	r2, [r3, #0]
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077a8:	bf00      	nop
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	20004fa0 	.word	0x20004fa0
 80077b4:	e000ed04 	.word	0xe000ed04

080077b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b08a      	sub	sp, #40	; 0x28
 80077bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077be:	2300      	movs	r3, #0
 80077c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077c2:	2300      	movs	r3, #0
 80077c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80077c6:	463a      	mov	r2, r7
 80077c8:	1d39      	adds	r1, r7, #4
 80077ca:	f107 0308 	add.w	r3, r7, #8
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fe fbfc 	bl	8005fcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	9202      	str	r2, [sp, #8]
 80077dc:	9301      	str	r3, [sp, #4]
 80077de:	2300      	movs	r3, #0
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	2300      	movs	r3, #0
 80077e4:	460a      	mov	r2, r1
 80077e6:	4924      	ldr	r1, [pc, #144]	; (8007878 <vTaskStartScheduler+0xc0>)
 80077e8:	4824      	ldr	r0, [pc, #144]	; (800787c <vTaskStartScheduler+0xc4>)
 80077ea:	f7ff fdf9 	bl	80073e0 <xTaskCreateStatic>
 80077ee:	4603      	mov	r3, r0
 80077f0:	4a23      	ldr	r2, [pc, #140]	; (8007880 <vTaskStartScheduler+0xc8>)
 80077f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80077f4:	4b22      	ldr	r3, [pc, #136]	; (8007880 <vTaskStartScheduler+0xc8>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077fc:	2301      	movs	r3, #1
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	e001      	b.n	8007806 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007802:	2300      	movs	r3, #0
 8007804:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d102      	bne.n	8007812 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800780c:	f000 fd10 	bl	8008230 <xTimerCreateTimerTask>
 8007810:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d11b      	bne.n	8007850 <vTaskStartScheduler+0x98>
	__asm volatile
 8007818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781c:	f383 8811 	msr	BASEPRI, r3
 8007820:	f3bf 8f6f 	isb	sy
 8007824:	f3bf 8f4f 	dsb	sy
 8007828:	613b      	str	r3, [r7, #16]
}
 800782a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800782c:	4b15      	ldr	r3, [pc, #84]	; (8007884 <vTaskStartScheduler+0xcc>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	3354      	adds	r3, #84	; 0x54
 8007832:	4a15      	ldr	r2, [pc, #84]	; (8007888 <vTaskStartScheduler+0xd0>)
 8007834:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007836:	4b15      	ldr	r3, [pc, #84]	; (800788c <vTaskStartScheduler+0xd4>)
 8007838:	f04f 32ff 	mov.w	r2, #4294967295
 800783c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800783e:	4b14      	ldr	r3, [pc, #80]	; (8007890 <vTaskStartScheduler+0xd8>)
 8007840:	2201      	movs	r2, #1
 8007842:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007844:	4b13      	ldr	r3, [pc, #76]	; (8007894 <vTaskStartScheduler+0xdc>)
 8007846:	2200      	movs	r2, #0
 8007848:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800784a:	f7fe ff19 	bl	8006680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800784e:	e00e      	b.n	800786e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007856:	d10a      	bne.n	800786e <vTaskStartScheduler+0xb6>
	__asm volatile
 8007858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785c:	f383 8811 	msr	BASEPRI, r3
 8007860:	f3bf 8f6f 	isb	sy
 8007864:	f3bf 8f4f 	dsb	sy
 8007868:	60fb      	str	r3, [r7, #12]
}
 800786a:	bf00      	nop
 800786c:	e7fe      	b.n	800786c <vTaskStartScheduler+0xb4>
}
 800786e:	bf00      	nop
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	08008aec 	.word	0x08008aec
 800787c:	08007ebd 	.word	0x08007ebd
 8007880:	20004f9c 	.word	0x20004f9c
 8007884:	20004aa4 	.word	0x20004aa4
 8007888:	20000010 	.word	0x20000010
 800788c:	20004f98 	.word	0x20004f98
 8007890:	20004f84 	.word	0x20004f84
 8007894:	20004f7c 	.word	0x20004f7c

08007898 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007898:	b480      	push	{r7}
 800789a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800789c:	4b04      	ldr	r3, [pc, #16]	; (80078b0 <vTaskSuspendAll+0x18>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3301      	adds	r3, #1
 80078a2:	4a03      	ldr	r2, [pc, #12]	; (80078b0 <vTaskSuspendAll+0x18>)
 80078a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80078a6:	bf00      	nop
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	20004fa0 	.word	0x20004fa0

080078b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078ba:	2300      	movs	r3, #0
 80078bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078be:	2300      	movs	r3, #0
 80078c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078c2:	4b42      	ldr	r3, [pc, #264]	; (80079cc <xTaskResumeAll+0x118>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10a      	bne.n	80078e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80078ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	603b      	str	r3, [r7, #0]
}
 80078dc:	bf00      	nop
 80078de:	e7fe      	b.n	80078de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078e0:	f7fe ff70 	bl	80067c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078e4:	4b39      	ldr	r3, [pc, #228]	; (80079cc <xTaskResumeAll+0x118>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	3b01      	subs	r3, #1
 80078ea:	4a38      	ldr	r2, [pc, #224]	; (80079cc <xTaskResumeAll+0x118>)
 80078ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078ee:	4b37      	ldr	r3, [pc, #220]	; (80079cc <xTaskResumeAll+0x118>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d162      	bne.n	80079bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80078f6:	4b36      	ldr	r3, [pc, #216]	; (80079d0 <xTaskResumeAll+0x11c>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d05e      	beq.n	80079bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078fe:	e02f      	b.n	8007960 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007900:	4b34      	ldr	r3, [pc, #208]	; (80079d4 <xTaskResumeAll+0x120>)
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	3318      	adds	r3, #24
 800790c:	4618      	mov	r0, r3
 800790e:	f7fe fe05 	bl	800651c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	3304      	adds	r3, #4
 8007916:	4618      	mov	r0, r3
 8007918:	f7fe fe00 	bl	800651c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007920:	4b2d      	ldr	r3, [pc, #180]	; (80079d8 <xTaskResumeAll+0x124>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	429a      	cmp	r2, r3
 8007926:	d903      	bls.n	8007930 <xTaskResumeAll+0x7c>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792c:	4a2a      	ldr	r2, [pc, #168]	; (80079d8 <xTaskResumeAll+0x124>)
 800792e:	6013      	str	r3, [r2, #0]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007934:	4613      	mov	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4413      	add	r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	4a27      	ldr	r2, [pc, #156]	; (80079dc <xTaskResumeAll+0x128>)
 800793e:	441a      	add	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	3304      	adds	r3, #4
 8007944:	4619      	mov	r1, r3
 8007946:	4610      	mov	r0, r2
 8007948:	f7fe fd8b 	bl	8006462 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007950:	4b23      	ldr	r3, [pc, #140]	; (80079e0 <xTaskResumeAll+0x12c>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007956:	429a      	cmp	r2, r3
 8007958:	d302      	bcc.n	8007960 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800795a:	4b22      	ldr	r3, [pc, #136]	; (80079e4 <xTaskResumeAll+0x130>)
 800795c:	2201      	movs	r2, #1
 800795e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007960:	4b1c      	ldr	r3, [pc, #112]	; (80079d4 <xTaskResumeAll+0x120>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1cb      	bne.n	8007900 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d001      	beq.n	8007972 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800796e:	f000 fb5f 	bl	8008030 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007972:	4b1d      	ldr	r3, [pc, #116]	; (80079e8 <xTaskResumeAll+0x134>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d010      	beq.n	80079a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800797e:	f000 f847 	bl	8007a10 <xTaskIncrementTick>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d002      	beq.n	800798e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007988:	4b16      	ldr	r3, [pc, #88]	; (80079e4 <xTaskResumeAll+0x130>)
 800798a:	2201      	movs	r2, #1
 800798c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	3b01      	subs	r3, #1
 8007992:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1f1      	bne.n	800797e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800799a:	4b13      	ldr	r3, [pc, #76]	; (80079e8 <xTaskResumeAll+0x134>)
 800799c:	2200      	movs	r2, #0
 800799e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079a0:	4b10      	ldr	r3, [pc, #64]	; (80079e4 <xTaskResumeAll+0x130>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d009      	beq.n	80079bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079a8:	2301      	movs	r3, #1
 80079aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079ac:	4b0f      	ldr	r3, [pc, #60]	; (80079ec <xTaskResumeAll+0x138>)
 80079ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079bc:	f7fe ff32 	bl	8006824 <vPortExitCritical>

	return xAlreadyYielded;
 80079c0:	68bb      	ldr	r3, [r7, #8]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	20004fa0 	.word	0x20004fa0
 80079d0:	20004f78 	.word	0x20004f78
 80079d4:	20004f38 	.word	0x20004f38
 80079d8:	20004f80 	.word	0x20004f80
 80079dc:	20004aa8 	.word	0x20004aa8
 80079e0:	20004aa4 	.word	0x20004aa4
 80079e4:	20004f8c 	.word	0x20004f8c
 80079e8:	20004f88 	.word	0x20004f88
 80079ec:	e000ed04 	.word	0xe000ed04

080079f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80079f6:	4b05      	ldr	r3, [pc, #20]	; (8007a0c <xTaskGetTickCount+0x1c>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80079fc:	687b      	ldr	r3, [r7, #4]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	20004f7c 	.word	0x20004f7c

08007a10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a16:	2300      	movs	r3, #0
 8007a18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a1a:	4b4f      	ldr	r3, [pc, #316]	; (8007b58 <xTaskIncrementTick+0x148>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f040 808f 	bne.w	8007b42 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a24:	4b4d      	ldr	r3, [pc, #308]	; (8007b5c <xTaskIncrementTick+0x14c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a2c:	4a4b      	ldr	r2, [pc, #300]	; (8007b5c <xTaskIncrementTick+0x14c>)
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d120      	bne.n	8007a7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a38:	4b49      	ldr	r3, [pc, #292]	; (8007b60 <xTaskIncrementTick+0x150>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00a      	beq.n	8007a58 <xTaskIncrementTick+0x48>
	__asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	603b      	str	r3, [r7, #0]
}
 8007a54:	bf00      	nop
 8007a56:	e7fe      	b.n	8007a56 <xTaskIncrementTick+0x46>
 8007a58:	4b41      	ldr	r3, [pc, #260]	; (8007b60 <xTaskIncrementTick+0x150>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	60fb      	str	r3, [r7, #12]
 8007a5e:	4b41      	ldr	r3, [pc, #260]	; (8007b64 <xTaskIncrementTick+0x154>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a3f      	ldr	r2, [pc, #252]	; (8007b60 <xTaskIncrementTick+0x150>)
 8007a64:	6013      	str	r3, [r2, #0]
 8007a66:	4a3f      	ldr	r2, [pc, #252]	; (8007b64 <xTaskIncrementTick+0x154>)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6013      	str	r3, [r2, #0]
 8007a6c:	4b3e      	ldr	r3, [pc, #248]	; (8007b68 <xTaskIncrementTick+0x158>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	3301      	adds	r3, #1
 8007a72:	4a3d      	ldr	r2, [pc, #244]	; (8007b68 <xTaskIncrementTick+0x158>)
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	f000 fadb 	bl	8008030 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a7a:	4b3c      	ldr	r3, [pc, #240]	; (8007b6c <xTaskIncrementTick+0x15c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d349      	bcc.n	8007b18 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a84:	4b36      	ldr	r3, [pc, #216]	; (8007b60 <xTaskIncrementTick+0x150>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d104      	bne.n	8007a98 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a8e:	4b37      	ldr	r3, [pc, #220]	; (8007b6c <xTaskIncrementTick+0x15c>)
 8007a90:	f04f 32ff 	mov.w	r2, #4294967295
 8007a94:	601a      	str	r2, [r3, #0]
					break;
 8007a96:	e03f      	b.n	8007b18 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a98:	4b31      	ldr	r3, [pc, #196]	; (8007b60 <xTaskIncrementTick+0x150>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d203      	bcs.n	8007ab8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ab0:	4a2e      	ldr	r2, [pc, #184]	; (8007b6c <xTaskIncrementTick+0x15c>)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ab6:	e02f      	b.n	8007b18 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	3304      	adds	r3, #4
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fe fd2d 	bl	800651c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d004      	beq.n	8007ad4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	3318      	adds	r3, #24
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fe fd24 	bl	800651c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad8:	4b25      	ldr	r3, [pc, #148]	; (8007b70 <xTaskIncrementTick+0x160>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d903      	bls.n	8007ae8 <xTaskIncrementTick+0xd8>
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae4:	4a22      	ldr	r2, [pc, #136]	; (8007b70 <xTaskIncrementTick+0x160>)
 8007ae6:	6013      	str	r3, [r2, #0]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aec:	4613      	mov	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	4a1f      	ldr	r2, [pc, #124]	; (8007b74 <xTaskIncrementTick+0x164>)
 8007af6:	441a      	add	r2, r3
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	3304      	adds	r3, #4
 8007afc:	4619      	mov	r1, r3
 8007afe:	4610      	mov	r0, r2
 8007b00:	f7fe fcaf 	bl	8006462 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b08:	4b1b      	ldr	r3, [pc, #108]	; (8007b78 <xTaskIncrementTick+0x168>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d3b8      	bcc.n	8007a84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007b12:	2301      	movs	r3, #1
 8007b14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b16:	e7b5      	b.n	8007a84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b18:	4b17      	ldr	r3, [pc, #92]	; (8007b78 <xTaskIncrementTick+0x168>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b1e:	4915      	ldr	r1, [pc, #84]	; (8007b74 <xTaskIncrementTick+0x164>)
 8007b20:	4613      	mov	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	440b      	add	r3, r1
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d901      	bls.n	8007b34 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007b30:	2301      	movs	r3, #1
 8007b32:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b34:	4b11      	ldr	r3, [pc, #68]	; (8007b7c <xTaskIncrementTick+0x16c>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d007      	beq.n	8007b4c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	617b      	str	r3, [r7, #20]
 8007b40:	e004      	b.n	8007b4c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b42:	4b0f      	ldr	r3, [pc, #60]	; (8007b80 <xTaskIncrementTick+0x170>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3301      	adds	r3, #1
 8007b48:	4a0d      	ldr	r2, [pc, #52]	; (8007b80 <xTaskIncrementTick+0x170>)
 8007b4a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b4c:	697b      	ldr	r3, [r7, #20]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	20004fa0 	.word	0x20004fa0
 8007b5c:	20004f7c 	.word	0x20004f7c
 8007b60:	20004f30 	.word	0x20004f30
 8007b64:	20004f34 	.word	0x20004f34
 8007b68:	20004f90 	.word	0x20004f90
 8007b6c:	20004f98 	.word	0x20004f98
 8007b70:	20004f80 	.word	0x20004f80
 8007b74:	20004aa8 	.word	0x20004aa8
 8007b78:	20004aa4 	.word	0x20004aa4
 8007b7c:	20004f8c 	.word	0x20004f8c
 8007b80:	20004f88 	.word	0x20004f88

08007b84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b8a:	4b2a      	ldr	r3, [pc, #168]	; (8007c34 <vTaskSwitchContext+0xb0>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b92:	4b29      	ldr	r3, [pc, #164]	; (8007c38 <vTaskSwitchContext+0xb4>)
 8007b94:	2201      	movs	r2, #1
 8007b96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b98:	e046      	b.n	8007c28 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007b9a:	4b27      	ldr	r3, [pc, #156]	; (8007c38 <vTaskSwitchContext+0xb4>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ba0:	4b26      	ldr	r3, [pc, #152]	; (8007c3c <vTaskSwitchContext+0xb8>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	60fb      	str	r3, [r7, #12]
 8007ba6:	e010      	b.n	8007bca <vTaskSwitchContext+0x46>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10a      	bne.n	8007bc4 <vTaskSwitchContext+0x40>
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	607b      	str	r3, [r7, #4]
}
 8007bc0:	bf00      	nop
 8007bc2:	e7fe      	b.n	8007bc2 <vTaskSwitchContext+0x3e>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	60fb      	str	r3, [r7, #12]
 8007bca:	491d      	ldr	r1, [pc, #116]	; (8007c40 <vTaskSwitchContext+0xbc>)
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4413      	add	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	440b      	add	r3, r1
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d0e4      	beq.n	8007ba8 <vTaskSwitchContext+0x24>
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	4613      	mov	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	4413      	add	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4a15      	ldr	r2, [pc, #84]	; (8007c40 <vTaskSwitchContext+0xbc>)
 8007bea:	4413      	add	r3, r2
 8007bec:	60bb      	str	r3, [r7, #8]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	605a      	str	r2, [r3, #4]
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	3308      	adds	r3, #8
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d104      	bne.n	8007c0e <vTaskSwitchContext+0x8a>
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	685a      	ldr	r2, [r3, #4]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	605a      	str	r2, [r3, #4]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	4a0b      	ldr	r2, [pc, #44]	; (8007c44 <vTaskSwitchContext+0xc0>)
 8007c16:	6013      	str	r3, [r2, #0]
 8007c18:	4a08      	ldr	r2, [pc, #32]	; (8007c3c <vTaskSwitchContext+0xb8>)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c1e:	4b09      	ldr	r3, [pc, #36]	; (8007c44 <vTaskSwitchContext+0xc0>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3354      	adds	r3, #84	; 0x54
 8007c24:	4a08      	ldr	r2, [pc, #32]	; (8007c48 <vTaskSwitchContext+0xc4>)
 8007c26:	6013      	str	r3, [r2, #0]
}
 8007c28:	bf00      	nop
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	20004fa0 	.word	0x20004fa0
 8007c38:	20004f8c 	.word	0x20004f8c
 8007c3c:	20004f80 	.word	0x20004f80
 8007c40:	20004aa8 	.word	0x20004aa8
 8007c44:	20004aa4 	.word	0x20004aa4
 8007c48:	20000010 	.word	0x20000010

08007c4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10a      	bne.n	8007c72 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	60fb      	str	r3, [r7, #12]
}
 8007c6e:	bf00      	nop
 8007c70:	e7fe      	b.n	8007c70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c72:	4b07      	ldr	r3, [pc, #28]	; (8007c90 <vTaskPlaceOnEventList+0x44>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	3318      	adds	r3, #24
 8007c78:	4619      	mov	r1, r3
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7fe fc15 	bl	80064aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c80:	2101      	movs	r1, #1
 8007c82:	6838      	ldr	r0, [r7, #0]
 8007c84:	f000 fa80 	bl	8008188 <prvAddCurrentTaskToDelayedList>
}
 8007c88:	bf00      	nop
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	20004aa4 	.word	0x20004aa4

08007c94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10a      	bne.n	8007cbc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	617b      	str	r3, [r7, #20]
}
 8007cb8:	bf00      	nop
 8007cba:	e7fe      	b.n	8007cba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cbc:	4b0a      	ldr	r3, [pc, #40]	; (8007ce8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3318      	adds	r3, #24
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f7fe fbcc 	bl	8006462 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d002      	beq.n	8007cd6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8007cd4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007cd6:	6879      	ldr	r1, [r7, #4]
 8007cd8:	68b8      	ldr	r0, [r7, #8]
 8007cda:	f000 fa55 	bl	8008188 <prvAddCurrentTaskToDelayedList>
	}
 8007cde:	bf00      	nop
 8007ce0:	3718      	adds	r7, #24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20004aa4 	.word	0x20004aa4

08007cec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10a      	bne.n	8007d18 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	60fb      	str	r3, [r7, #12]
}
 8007d14:	bf00      	nop
 8007d16:	e7fe      	b.n	8007d16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	3318      	adds	r3, #24
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7fe fbfd 	bl	800651c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d22:	4b1e      	ldr	r3, [pc, #120]	; (8007d9c <xTaskRemoveFromEventList+0xb0>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d11d      	bne.n	8007d66 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	3304      	adds	r3, #4
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fe fbf4 	bl	800651c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d38:	4b19      	ldr	r3, [pc, #100]	; (8007da0 <xTaskRemoveFromEventList+0xb4>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d903      	bls.n	8007d48 <xTaskRemoveFromEventList+0x5c>
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d44:	4a16      	ldr	r2, [pc, #88]	; (8007da0 <xTaskRemoveFromEventList+0xb4>)
 8007d46:	6013      	str	r3, [r2, #0]
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	4413      	add	r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4a13      	ldr	r2, [pc, #76]	; (8007da4 <xTaskRemoveFromEventList+0xb8>)
 8007d56:	441a      	add	r2, r3
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	3304      	adds	r3, #4
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	4610      	mov	r0, r2
 8007d60:	f7fe fb7f 	bl	8006462 <vListInsertEnd>
 8007d64:	e005      	b.n	8007d72 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	3318      	adds	r3, #24
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	480e      	ldr	r0, [pc, #56]	; (8007da8 <xTaskRemoveFromEventList+0xbc>)
 8007d6e:	f7fe fb78 	bl	8006462 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d76:	4b0d      	ldr	r3, [pc, #52]	; (8007dac <xTaskRemoveFromEventList+0xc0>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d905      	bls.n	8007d8c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d80:	2301      	movs	r3, #1
 8007d82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d84:	4b0a      	ldr	r3, [pc, #40]	; (8007db0 <xTaskRemoveFromEventList+0xc4>)
 8007d86:	2201      	movs	r2, #1
 8007d88:	601a      	str	r2, [r3, #0]
 8007d8a:	e001      	b.n	8007d90 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d90:	697b      	ldr	r3, [r7, #20]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3718      	adds	r7, #24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20004fa0 	.word	0x20004fa0
 8007da0:	20004f80 	.word	0x20004f80
 8007da4:	20004aa8 	.word	0x20004aa8
 8007da8:	20004f38 	.word	0x20004f38
 8007dac:	20004aa4 	.word	0x20004aa4
 8007db0:	20004f8c 	.word	0x20004f8c

08007db4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007dbc:	4b06      	ldr	r3, [pc, #24]	; (8007dd8 <vTaskInternalSetTimeOutState+0x24>)
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007dc4:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <vTaskInternalSetTimeOutState+0x28>)
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	605a      	str	r2, [r3, #4]
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr
 8007dd8:	20004f90 	.word	0x20004f90
 8007ddc:	20004f7c 	.word	0x20004f7c

08007de0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b088      	sub	sp, #32
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10a      	bne.n	8007e06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	613b      	str	r3, [r7, #16]
}
 8007e02:	bf00      	nop
 8007e04:	e7fe      	b.n	8007e04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10a      	bne.n	8007e22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	60fb      	str	r3, [r7, #12]
}
 8007e1e:	bf00      	nop
 8007e20:	e7fe      	b.n	8007e20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007e22:	f7fe fccf 	bl	80067c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e26:	4b1d      	ldr	r3, [pc, #116]	; (8007e9c <xTaskCheckForTimeOut+0xbc>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e3e:	d102      	bne.n	8007e46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e40:	2300      	movs	r3, #0
 8007e42:	61fb      	str	r3, [r7, #28]
 8007e44:	e023      	b.n	8007e8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	4b15      	ldr	r3, [pc, #84]	; (8007ea0 <xTaskCheckForTimeOut+0xc0>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d007      	beq.n	8007e62 <xTaskCheckForTimeOut+0x82>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d302      	bcc.n	8007e62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	61fb      	str	r3, [r7, #28]
 8007e60:	e015      	b.n	8007e8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d20b      	bcs.n	8007e84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	1ad2      	subs	r2, r2, r3
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f7ff ff9b 	bl	8007db4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	61fb      	str	r3, [r7, #28]
 8007e82:	e004      	b.n	8007e8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	2200      	movs	r2, #0
 8007e88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e8e:	f7fe fcc9 	bl	8006824 <vPortExitCritical>

	return xReturn;
 8007e92:	69fb      	ldr	r3, [r7, #28]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3720      	adds	r7, #32
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	20004f7c 	.word	0x20004f7c
 8007ea0:	20004f90 	.word	0x20004f90

08007ea4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ea8:	4b03      	ldr	r3, [pc, #12]	; (8007eb8 <vTaskMissedYield+0x14>)
 8007eaa:	2201      	movs	r2, #1
 8007eac:	601a      	str	r2, [r3, #0]
}
 8007eae:	bf00      	nop
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	20004f8c 	.word	0x20004f8c

08007ebc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ec4:	f000 f852 	bl	8007f6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ec8:	4b06      	ldr	r3, [pc, #24]	; (8007ee4 <prvIdleTask+0x28>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d9f9      	bls.n	8007ec4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ed0:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <prvIdleTask+0x2c>)
 8007ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed6:	601a      	str	r2, [r3, #0]
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ee0:	e7f0      	b.n	8007ec4 <prvIdleTask+0x8>
 8007ee2:	bf00      	nop
 8007ee4:	20004aa8 	.word	0x20004aa8
 8007ee8:	e000ed04 	.word	0xe000ed04

08007eec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	607b      	str	r3, [r7, #4]
 8007ef6:	e00c      	b.n	8007f12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	4613      	mov	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4a12      	ldr	r2, [pc, #72]	; (8007f4c <prvInitialiseTaskLists+0x60>)
 8007f04:	4413      	add	r3, r2
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fe fa7e 	bl	8006408 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	607b      	str	r3, [r7, #4]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b37      	cmp	r3, #55	; 0x37
 8007f16:	d9ef      	bls.n	8007ef8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f18:	480d      	ldr	r0, [pc, #52]	; (8007f50 <prvInitialiseTaskLists+0x64>)
 8007f1a:	f7fe fa75 	bl	8006408 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f1e:	480d      	ldr	r0, [pc, #52]	; (8007f54 <prvInitialiseTaskLists+0x68>)
 8007f20:	f7fe fa72 	bl	8006408 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f24:	480c      	ldr	r0, [pc, #48]	; (8007f58 <prvInitialiseTaskLists+0x6c>)
 8007f26:	f7fe fa6f 	bl	8006408 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f2a:	480c      	ldr	r0, [pc, #48]	; (8007f5c <prvInitialiseTaskLists+0x70>)
 8007f2c:	f7fe fa6c 	bl	8006408 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f30:	480b      	ldr	r0, [pc, #44]	; (8007f60 <prvInitialiseTaskLists+0x74>)
 8007f32:	f7fe fa69 	bl	8006408 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f36:	4b0b      	ldr	r3, [pc, #44]	; (8007f64 <prvInitialiseTaskLists+0x78>)
 8007f38:	4a05      	ldr	r2, [pc, #20]	; (8007f50 <prvInitialiseTaskLists+0x64>)
 8007f3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f3c:	4b0a      	ldr	r3, [pc, #40]	; (8007f68 <prvInitialiseTaskLists+0x7c>)
 8007f3e:	4a05      	ldr	r2, [pc, #20]	; (8007f54 <prvInitialiseTaskLists+0x68>)
 8007f40:	601a      	str	r2, [r3, #0]
}
 8007f42:	bf00      	nop
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20004aa8 	.word	0x20004aa8
 8007f50:	20004f08 	.word	0x20004f08
 8007f54:	20004f1c 	.word	0x20004f1c
 8007f58:	20004f38 	.word	0x20004f38
 8007f5c:	20004f4c 	.word	0x20004f4c
 8007f60:	20004f64 	.word	0x20004f64
 8007f64:	20004f30 	.word	0x20004f30
 8007f68:	20004f34 	.word	0x20004f34

08007f6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f72:	e019      	b.n	8007fa8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f74:	f7fe fc26 	bl	80067c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f78:	4b10      	ldr	r3, [pc, #64]	; (8007fbc <prvCheckTasksWaitingTermination+0x50>)
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	3304      	adds	r3, #4
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7fe fac9 	bl	800651c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f8a:	4b0d      	ldr	r3, [pc, #52]	; (8007fc0 <prvCheckTasksWaitingTermination+0x54>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	4a0b      	ldr	r2, [pc, #44]	; (8007fc0 <prvCheckTasksWaitingTermination+0x54>)
 8007f92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f94:	4b0b      	ldr	r3, [pc, #44]	; (8007fc4 <prvCheckTasksWaitingTermination+0x58>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	4a0a      	ldr	r2, [pc, #40]	; (8007fc4 <prvCheckTasksWaitingTermination+0x58>)
 8007f9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f9e:	f7fe fc41 	bl	8006824 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f810 	bl	8007fc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fa8:	4b06      	ldr	r3, [pc, #24]	; (8007fc4 <prvCheckTasksWaitingTermination+0x58>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1e1      	bne.n	8007f74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007fb0:	bf00      	nop
 8007fb2:	bf00      	nop
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	20004f4c 	.word	0x20004f4c
 8007fc0:	20004f78 	.word	0x20004f78
 8007fc4:	20004f60 	.word	0x20004f60

08007fc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3354      	adds	r3, #84	; 0x54
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f000 fcc3 	bl	8008960 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d108      	bne.n	8007ff6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fe f8ef 	bl	80061cc <vPortFree>
				vPortFree( pxTCB );
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7fe f8ec 	bl	80061cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ff4:	e018      	b.n	8008028 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d103      	bne.n	8008008 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f7fe f8e3 	bl	80061cc <vPortFree>
	}
 8008006:	e00f      	b.n	8008028 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800800e:	2b02      	cmp	r3, #2
 8008010:	d00a      	beq.n	8008028 <prvDeleteTCB+0x60>
	__asm volatile
 8008012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008016:	f383 8811 	msr	BASEPRI, r3
 800801a:	f3bf 8f6f 	isb	sy
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	60fb      	str	r3, [r7, #12]
}
 8008024:	bf00      	nop
 8008026:	e7fe      	b.n	8008026 <prvDeleteTCB+0x5e>
	}
 8008028:	bf00      	nop
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008036:	4b0c      	ldr	r3, [pc, #48]	; (8008068 <prvResetNextTaskUnblockTime+0x38>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d104      	bne.n	800804a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008040:	4b0a      	ldr	r3, [pc, #40]	; (800806c <prvResetNextTaskUnblockTime+0x3c>)
 8008042:	f04f 32ff 	mov.w	r2, #4294967295
 8008046:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008048:	e008      	b.n	800805c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800804a:	4b07      	ldr	r3, [pc, #28]	; (8008068 <prvResetNextTaskUnblockTime+0x38>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	4a04      	ldr	r2, [pc, #16]	; (800806c <prvResetNextTaskUnblockTime+0x3c>)
 800805a:	6013      	str	r3, [r2, #0]
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	20004f30 	.word	0x20004f30
 800806c:	20004f98 	.word	0x20004f98

08008070 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008076:	4b0b      	ldr	r3, [pc, #44]	; (80080a4 <xTaskGetSchedulerState+0x34>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d102      	bne.n	8008084 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800807e:	2301      	movs	r3, #1
 8008080:	607b      	str	r3, [r7, #4]
 8008082:	e008      	b.n	8008096 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008084:	4b08      	ldr	r3, [pc, #32]	; (80080a8 <xTaskGetSchedulerState+0x38>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d102      	bne.n	8008092 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800808c:	2302      	movs	r3, #2
 800808e:	607b      	str	r3, [r7, #4]
 8008090:	e001      	b.n	8008096 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008092:	2300      	movs	r3, #0
 8008094:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008096:	687b      	ldr	r3, [r7, #4]
	}
 8008098:	4618      	mov	r0, r3
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	20004f84 	.word	0x20004f84
 80080a8:	20004fa0 	.word	0x20004fa0

080080ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b086      	sub	sp, #24
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80080b8:	2300      	movs	r3, #0
 80080ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d056      	beq.n	8008170 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80080c2:	4b2e      	ldr	r3, [pc, #184]	; (800817c <xTaskPriorityDisinherit+0xd0>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d00a      	beq.n	80080e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	60fb      	str	r3, [r7, #12]
}
 80080de:	bf00      	nop
 80080e0:	e7fe      	b.n	80080e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d10a      	bne.n	8008100 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80080ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ee:	f383 8811 	msr	BASEPRI, r3
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	60bb      	str	r3, [r7, #8]
}
 80080fc:	bf00      	nop
 80080fe:	e7fe      	b.n	80080fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008104:	1e5a      	subs	r2, r3, #1
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008112:	429a      	cmp	r2, r3
 8008114:	d02c      	beq.n	8008170 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800811a:	2b00      	cmp	r3, #0
 800811c:	d128      	bne.n	8008170 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	3304      	adds	r3, #4
 8008122:	4618      	mov	r0, r3
 8008124:	f7fe f9fa 	bl	800651c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008134:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008140:	4b0f      	ldr	r3, [pc, #60]	; (8008180 <xTaskPriorityDisinherit+0xd4>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	429a      	cmp	r2, r3
 8008146:	d903      	bls.n	8008150 <xTaskPriorityDisinherit+0xa4>
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814c:	4a0c      	ldr	r2, [pc, #48]	; (8008180 <xTaskPriorityDisinherit+0xd4>)
 800814e:	6013      	str	r3, [r2, #0]
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008154:	4613      	mov	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4a09      	ldr	r2, [pc, #36]	; (8008184 <xTaskPriorityDisinherit+0xd8>)
 800815e:	441a      	add	r2, r3
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	3304      	adds	r3, #4
 8008164:	4619      	mov	r1, r3
 8008166:	4610      	mov	r0, r2
 8008168:	f7fe f97b 	bl	8006462 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800816c:	2301      	movs	r3, #1
 800816e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008170:	697b      	ldr	r3, [r7, #20]
	}
 8008172:	4618      	mov	r0, r3
 8008174:	3718      	adds	r7, #24
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	20004aa4 	.word	0x20004aa4
 8008180:	20004f80 	.word	0x20004f80
 8008184:	20004aa8 	.word	0x20004aa8

08008188 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008192:	4b21      	ldr	r3, [pc, #132]	; (8008218 <prvAddCurrentTaskToDelayedList+0x90>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008198:	4b20      	ldr	r3, [pc, #128]	; (800821c <prvAddCurrentTaskToDelayedList+0x94>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	3304      	adds	r3, #4
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fe f9bc 	bl	800651c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081aa:	d10a      	bne.n	80081c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d007      	beq.n	80081c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081b2:	4b1a      	ldr	r3, [pc, #104]	; (800821c <prvAddCurrentTaskToDelayedList+0x94>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	3304      	adds	r3, #4
 80081b8:	4619      	mov	r1, r3
 80081ba:	4819      	ldr	r0, [pc, #100]	; (8008220 <prvAddCurrentTaskToDelayedList+0x98>)
 80081bc:	f7fe f951 	bl	8006462 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081c0:	e026      	b.n	8008210 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4413      	add	r3, r2
 80081c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081ca:	4b14      	ldr	r3, [pc, #80]	; (800821c <prvAddCurrentTaskToDelayedList+0x94>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d209      	bcs.n	80081ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081da:	4b12      	ldr	r3, [pc, #72]	; (8008224 <prvAddCurrentTaskToDelayedList+0x9c>)
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	4b0f      	ldr	r3, [pc, #60]	; (800821c <prvAddCurrentTaskToDelayedList+0x94>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3304      	adds	r3, #4
 80081e4:	4619      	mov	r1, r3
 80081e6:	4610      	mov	r0, r2
 80081e8:	f7fe f95f 	bl	80064aa <vListInsert>
}
 80081ec:	e010      	b.n	8008210 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081ee:	4b0e      	ldr	r3, [pc, #56]	; (8008228 <prvAddCurrentTaskToDelayedList+0xa0>)
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	4b0a      	ldr	r3, [pc, #40]	; (800821c <prvAddCurrentTaskToDelayedList+0x94>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	3304      	adds	r3, #4
 80081f8:	4619      	mov	r1, r3
 80081fa:	4610      	mov	r0, r2
 80081fc:	f7fe f955 	bl	80064aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008200:	4b0a      	ldr	r3, [pc, #40]	; (800822c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	429a      	cmp	r2, r3
 8008208:	d202      	bcs.n	8008210 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800820a:	4a08      	ldr	r2, [pc, #32]	; (800822c <prvAddCurrentTaskToDelayedList+0xa4>)
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	6013      	str	r3, [r2, #0]
}
 8008210:	bf00      	nop
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	20004f7c 	.word	0x20004f7c
 800821c:	20004aa4 	.word	0x20004aa4
 8008220:	20004f64 	.word	0x20004f64
 8008224:	20004f34 	.word	0x20004f34
 8008228:	20004f30 	.word	0x20004f30
 800822c:	20004f98 	.word	0x20004f98

08008230 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b08a      	sub	sp, #40	; 0x28
 8008234:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008236:	2300      	movs	r3, #0
 8008238:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800823a:	f000 fb07 	bl	800884c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800823e:	4b1c      	ldr	r3, [pc, #112]	; (80082b0 <xTimerCreateTimerTask+0x80>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d021      	beq.n	800828a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008246:	2300      	movs	r3, #0
 8008248:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800824a:	2300      	movs	r3, #0
 800824c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800824e:	1d3a      	adds	r2, r7, #4
 8008250:	f107 0108 	add.w	r1, r7, #8
 8008254:	f107 030c 	add.w	r3, r7, #12
 8008258:	4618      	mov	r0, r3
 800825a:	f7fd fed1 	bl	8006000 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	9202      	str	r2, [sp, #8]
 8008266:	9301      	str	r3, [sp, #4]
 8008268:	2302      	movs	r3, #2
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	2300      	movs	r3, #0
 800826e:	460a      	mov	r2, r1
 8008270:	4910      	ldr	r1, [pc, #64]	; (80082b4 <xTimerCreateTimerTask+0x84>)
 8008272:	4811      	ldr	r0, [pc, #68]	; (80082b8 <xTimerCreateTimerTask+0x88>)
 8008274:	f7ff f8b4 	bl	80073e0 <xTaskCreateStatic>
 8008278:	4603      	mov	r3, r0
 800827a:	4a10      	ldr	r2, [pc, #64]	; (80082bc <xTimerCreateTimerTask+0x8c>)
 800827c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800827e:	4b0f      	ldr	r3, [pc, #60]	; (80082bc <xTimerCreateTimerTask+0x8c>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008286:	2301      	movs	r3, #1
 8008288:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10a      	bne.n	80082a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	613b      	str	r3, [r7, #16]
}
 80082a2:	bf00      	nop
 80082a4:	e7fe      	b.n	80082a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80082a6:	697b      	ldr	r3, [r7, #20]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3718      	adds	r7, #24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	20004fd4 	.word	0x20004fd4
 80082b4:	08008af4 	.word	0x08008af4
 80082b8:	080083f5 	.word	0x080083f5
 80082bc:	20004fd8 	.word	0x20004fd8

080082c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b08a      	sub	sp, #40	; 0x28
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
 80082cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10a      	bne.n	80082ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80082d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082dc:	f383 8811 	msr	BASEPRI, r3
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	623b      	str	r3, [r7, #32]
}
 80082ea:	bf00      	nop
 80082ec:	e7fe      	b.n	80082ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80082ee:	4b1a      	ldr	r3, [pc, #104]	; (8008358 <xTimerGenericCommand+0x98>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d02a      	beq.n	800834c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	2b05      	cmp	r3, #5
 8008306:	dc18      	bgt.n	800833a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008308:	f7ff feb2 	bl	8008070 <xTaskGetSchedulerState>
 800830c:	4603      	mov	r3, r0
 800830e:	2b02      	cmp	r3, #2
 8008310:	d109      	bne.n	8008326 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008312:	4b11      	ldr	r3, [pc, #68]	; (8008358 <xTimerGenericCommand+0x98>)
 8008314:	6818      	ldr	r0, [r3, #0]
 8008316:	f107 0110 	add.w	r1, r7, #16
 800831a:	2300      	movs	r3, #0
 800831c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800831e:	f7fe fc77 	bl	8006c10 <xQueueGenericSend>
 8008322:	6278      	str	r0, [r7, #36]	; 0x24
 8008324:	e012      	b.n	800834c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008326:	4b0c      	ldr	r3, [pc, #48]	; (8008358 <xTimerGenericCommand+0x98>)
 8008328:	6818      	ldr	r0, [r3, #0]
 800832a:	f107 0110 	add.w	r1, r7, #16
 800832e:	2300      	movs	r3, #0
 8008330:	2200      	movs	r2, #0
 8008332:	f7fe fc6d 	bl	8006c10 <xQueueGenericSend>
 8008336:	6278      	str	r0, [r7, #36]	; 0x24
 8008338:	e008      	b.n	800834c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800833a:	4b07      	ldr	r3, [pc, #28]	; (8008358 <xTimerGenericCommand+0x98>)
 800833c:	6818      	ldr	r0, [r3, #0]
 800833e:	f107 0110 	add.w	r1, r7, #16
 8008342:	2300      	movs	r3, #0
 8008344:	683a      	ldr	r2, [r7, #0]
 8008346:	f7fe fd61 	bl	8006e0c <xQueueGenericSendFromISR>
 800834a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800834e:	4618      	mov	r0, r3
 8008350:	3728      	adds	r7, #40	; 0x28
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	20004fd4 	.word	0x20004fd4

0800835c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b088      	sub	sp, #32
 8008360:	af02      	add	r7, sp, #8
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008366:	4b22      	ldr	r3, [pc, #136]	; (80083f0 <prvProcessExpiredTimer+0x94>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	3304      	adds	r3, #4
 8008374:	4618      	mov	r0, r3
 8008376:	f7fe f8d1 	bl	800651c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008380:	f003 0304 	and.w	r3, r3, #4
 8008384:	2b00      	cmp	r3, #0
 8008386:	d022      	beq.n	80083ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	699a      	ldr	r2, [r3, #24]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	18d1      	adds	r1, r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	6978      	ldr	r0, [r7, #20]
 8008396:	f000 f8d1 	bl	800853c <prvInsertTimerInActiveList>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d01f      	beq.n	80083e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083a0:	2300      	movs	r3, #0
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	2300      	movs	r3, #0
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	2100      	movs	r1, #0
 80083aa:	6978      	ldr	r0, [r7, #20]
 80083ac:	f7ff ff88 	bl	80082c0 <xTimerGenericCommand>
 80083b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d113      	bne.n	80083e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80083b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083bc:	f383 8811 	msr	BASEPRI, r3
 80083c0:	f3bf 8f6f 	isb	sy
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	60fb      	str	r3, [r7, #12]
}
 80083ca:	bf00      	nop
 80083cc:	e7fe      	b.n	80083cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083d4:	f023 0301 	bic.w	r3, r3, #1
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	6a1b      	ldr	r3, [r3, #32]
 80083e4:	6978      	ldr	r0, [r7, #20]
 80083e6:	4798      	blx	r3
}
 80083e8:	bf00      	nop
 80083ea:	3718      	adds	r7, #24
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	20004fcc 	.word	0x20004fcc

080083f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80083fc:	f107 0308 	add.w	r3, r7, #8
 8008400:	4618      	mov	r0, r3
 8008402:	f000 f857 	bl	80084b4 <prvGetNextExpireTime>
 8008406:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	4619      	mov	r1, r3
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f000 f803 	bl	8008418 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008412:	f000 f8d5 	bl	80085c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008416:	e7f1      	b.n	80083fc <prvTimerTask+0x8>

08008418 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008422:	f7ff fa39 	bl	8007898 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008426:	f107 0308 	add.w	r3, r7, #8
 800842a:	4618      	mov	r0, r3
 800842c:	f000 f866 	bl	80084fc <prvSampleTimeNow>
 8008430:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d130      	bne.n	800849a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10a      	bne.n	8008454 <prvProcessTimerOrBlockTask+0x3c>
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	429a      	cmp	r2, r3
 8008444:	d806      	bhi.n	8008454 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008446:	f7ff fa35 	bl	80078b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800844a:	68f9      	ldr	r1, [r7, #12]
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7ff ff85 	bl	800835c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008452:	e024      	b.n	800849e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d008      	beq.n	800846c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800845a:	4b13      	ldr	r3, [pc, #76]	; (80084a8 <prvProcessTimerOrBlockTask+0x90>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d101      	bne.n	8008468 <prvProcessTimerOrBlockTask+0x50>
 8008464:	2301      	movs	r3, #1
 8008466:	e000      	b.n	800846a <prvProcessTimerOrBlockTask+0x52>
 8008468:	2300      	movs	r3, #0
 800846a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800846c:	4b0f      	ldr	r3, [pc, #60]	; (80084ac <prvProcessTimerOrBlockTask+0x94>)
 800846e:	6818      	ldr	r0, [r3, #0]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	4619      	mov	r1, r3
 800847a:	f7fe ff7d 	bl	8007378 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800847e:	f7ff fa19 	bl	80078b4 <xTaskResumeAll>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10a      	bne.n	800849e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008488:	4b09      	ldr	r3, [pc, #36]	; (80084b0 <prvProcessTimerOrBlockTask+0x98>)
 800848a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800848e:	601a      	str	r2, [r3, #0]
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	f3bf 8f6f 	isb	sy
}
 8008498:	e001      	b.n	800849e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800849a:	f7ff fa0b 	bl	80078b4 <xTaskResumeAll>
}
 800849e:	bf00      	nop
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20004fd0 	.word	0x20004fd0
 80084ac:	20004fd4 	.word	0x20004fd4
 80084b0:	e000ed04 	.word	0xe000ed04

080084b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80084bc:	4b0e      	ldr	r3, [pc, #56]	; (80084f8 <prvGetNextExpireTime+0x44>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <prvGetNextExpireTime+0x16>
 80084c6:	2201      	movs	r2, #1
 80084c8:	e000      	b.n	80084cc <prvGetNextExpireTime+0x18>
 80084ca:	2200      	movs	r2, #0
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d105      	bne.n	80084e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084d8:	4b07      	ldr	r3, [pc, #28]	; (80084f8 <prvGetNextExpireTime+0x44>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	60fb      	str	r3, [r7, #12]
 80084e2:	e001      	b.n	80084e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80084e4:	2300      	movs	r3, #0
 80084e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80084e8:	68fb      	ldr	r3, [r7, #12]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3714      	adds	r7, #20
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	20004fcc 	.word	0x20004fcc

080084fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008504:	f7ff fa74 	bl	80079f0 <xTaskGetTickCount>
 8008508:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800850a:	4b0b      	ldr	r3, [pc, #44]	; (8008538 <prvSampleTimeNow+0x3c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	429a      	cmp	r2, r3
 8008512:	d205      	bcs.n	8008520 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008514:	f000 f936 	bl	8008784 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	601a      	str	r2, [r3, #0]
 800851e:	e002      	b.n	8008526 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008526:	4a04      	ldr	r2, [pc, #16]	; (8008538 <prvSampleTimeNow+0x3c>)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800852c:	68fb      	ldr	r3, [r7, #12]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	20004fdc 	.word	0x20004fdc

0800853c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
 8008548:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800854a:	2300      	movs	r3, #0
 800854c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	429a      	cmp	r2, r3
 8008560:	d812      	bhi.n	8008588 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	1ad2      	subs	r2, r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	429a      	cmp	r2, r3
 800856e:	d302      	bcc.n	8008576 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008570:	2301      	movs	r3, #1
 8008572:	617b      	str	r3, [r7, #20]
 8008574:	e01b      	b.n	80085ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008576:	4b10      	ldr	r3, [pc, #64]	; (80085b8 <prvInsertTimerInActiveList+0x7c>)
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	3304      	adds	r3, #4
 800857e:	4619      	mov	r1, r3
 8008580:	4610      	mov	r0, r2
 8008582:	f7fd ff92 	bl	80064aa <vListInsert>
 8008586:	e012      	b.n	80085ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	429a      	cmp	r2, r3
 800858e:	d206      	bcs.n	800859e <prvInsertTimerInActiveList+0x62>
 8008590:	68ba      	ldr	r2, [r7, #8]
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	429a      	cmp	r2, r3
 8008596:	d302      	bcc.n	800859e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008598:	2301      	movs	r3, #1
 800859a:	617b      	str	r3, [r7, #20]
 800859c:	e007      	b.n	80085ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800859e:	4b07      	ldr	r3, [pc, #28]	; (80085bc <prvInsertTimerInActiveList+0x80>)
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	3304      	adds	r3, #4
 80085a6:	4619      	mov	r1, r3
 80085a8:	4610      	mov	r0, r2
 80085aa:	f7fd ff7e 	bl	80064aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80085ae:	697b      	ldr	r3, [r7, #20]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3718      	adds	r7, #24
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	20004fd0 	.word	0x20004fd0
 80085bc:	20004fcc 	.word	0x20004fcc

080085c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b08e      	sub	sp, #56	; 0x38
 80085c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085c6:	e0ca      	b.n	800875e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	da18      	bge.n	8008600 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80085ce:	1d3b      	adds	r3, r7, #4
 80085d0:	3304      	adds	r3, #4
 80085d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80085d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10a      	bne.n	80085f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80085da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085de:	f383 8811 	msr	BASEPRI, r3
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	f3bf 8f4f 	dsb	sy
 80085ea:	61fb      	str	r3, [r7, #28]
}
 80085ec:	bf00      	nop
 80085ee:	e7fe      	b.n	80085ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80085f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085f6:	6850      	ldr	r0, [r2, #4]
 80085f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085fa:	6892      	ldr	r2, [r2, #8]
 80085fc:	4611      	mov	r1, r2
 80085fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	f2c0 80aa 	blt.w	800875c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800860c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d004      	beq.n	800861e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008616:	3304      	adds	r3, #4
 8008618:	4618      	mov	r0, r3
 800861a:	f7fd ff7f 	bl	800651c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800861e:	463b      	mov	r3, r7
 8008620:	4618      	mov	r0, r3
 8008622:	f7ff ff6b 	bl	80084fc <prvSampleTimeNow>
 8008626:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b09      	cmp	r3, #9
 800862c:	f200 8097 	bhi.w	800875e <prvProcessReceivedCommands+0x19e>
 8008630:	a201      	add	r2, pc, #4	; (adr r2, 8008638 <prvProcessReceivedCommands+0x78>)
 8008632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008636:	bf00      	nop
 8008638:	08008661 	.word	0x08008661
 800863c:	08008661 	.word	0x08008661
 8008640:	08008661 	.word	0x08008661
 8008644:	080086d5 	.word	0x080086d5
 8008648:	080086e9 	.word	0x080086e9
 800864c:	08008733 	.word	0x08008733
 8008650:	08008661 	.word	0x08008661
 8008654:	08008661 	.word	0x08008661
 8008658:	080086d5 	.word	0x080086d5
 800865c:	080086e9 	.word	0x080086e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008662:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008666:	f043 0301 	orr.w	r3, r3, #1
 800866a:	b2da      	uxtb	r2, r3
 800866c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	18d1      	adds	r1, r2, r3
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800867e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008680:	f7ff ff5c 	bl	800853c <prvInsertTimerInActiveList>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d069      	beq.n	800875e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800868a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008690:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008698:	f003 0304 	and.w	r3, r3, #4
 800869c:	2b00      	cmp	r3, #0
 800869e:	d05e      	beq.n	800875e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	441a      	add	r2, r3
 80086a8:	2300      	movs	r3, #0
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	2300      	movs	r3, #0
 80086ae:	2100      	movs	r1, #0
 80086b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086b2:	f7ff fe05 	bl	80082c0 <xTimerGenericCommand>
 80086b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80086b8:	6a3b      	ldr	r3, [r7, #32]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d14f      	bne.n	800875e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	61bb      	str	r3, [r7, #24]
}
 80086d0:	bf00      	nop
 80086d2:	e7fe      	b.n	80086d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086da:	f023 0301 	bic.w	r3, r3, #1
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80086e6:	e03a      	b.n	800875e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086ee:	f043 0301 	orr.w	r3, r3, #1
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008702:	699b      	ldr	r3, [r3, #24]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d10a      	bne.n	800871e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870c:	f383 8811 	msr	BASEPRI, r3
 8008710:	f3bf 8f6f 	isb	sy
 8008714:	f3bf 8f4f 	dsb	sy
 8008718:	617b      	str	r3, [r7, #20]
}
 800871a:	bf00      	nop
 800871c:	e7fe      	b.n	800871c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800871e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008720:	699a      	ldr	r2, [r3, #24]
 8008722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008724:	18d1      	adds	r1, r2, r3
 8008726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800872a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800872c:	f7ff ff06 	bl	800853c <prvInsertTimerInActiveList>
					break;
 8008730:	e015      	b.n	800875e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008738:	f003 0302 	and.w	r3, r3, #2
 800873c:	2b00      	cmp	r3, #0
 800873e:	d103      	bne.n	8008748 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008742:	f7fd fd43 	bl	80061cc <vPortFree>
 8008746:	e00a      	b.n	800875e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800874e:	f023 0301 	bic.w	r3, r3, #1
 8008752:	b2da      	uxtb	r2, r3
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800875a:	e000      	b.n	800875e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800875c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800875e:	4b08      	ldr	r3, [pc, #32]	; (8008780 <prvProcessReceivedCommands+0x1c0>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	1d39      	adds	r1, r7, #4
 8008764:	2200      	movs	r2, #0
 8008766:	4618      	mov	r0, r3
 8008768:	f7fe fbec 	bl	8006f44 <xQueueReceive>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	f47f af2a 	bne.w	80085c8 <prvProcessReceivedCommands+0x8>
	}
}
 8008774:	bf00      	nop
 8008776:	bf00      	nop
 8008778:	3730      	adds	r7, #48	; 0x30
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20004fd4 	.word	0x20004fd4

08008784 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b088      	sub	sp, #32
 8008788:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800878a:	e048      	b.n	800881e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800878c:	4b2d      	ldr	r3, [pc, #180]	; (8008844 <prvSwitchTimerLists+0xc0>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008796:	4b2b      	ldr	r3, [pc, #172]	; (8008844 <prvSwitchTimerLists+0xc0>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	3304      	adds	r3, #4
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fd feb9 	bl	800651c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087b8:	f003 0304 	and.w	r3, r3, #4
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d02e      	beq.n	800881e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	4413      	add	r3, r2
 80087c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d90e      	bls.n	80087f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087de:	4b19      	ldr	r3, [pc, #100]	; (8008844 <prvSwitchTimerLists+0xc0>)
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	3304      	adds	r3, #4
 80087e6:	4619      	mov	r1, r3
 80087e8:	4610      	mov	r0, r2
 80087ea:	f7fd fe5e 	bl	80064aa <vListInsert>
 80087ee:	e016      	b.n	800881e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80087f0:	2300      	movs	r3, #0
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	2300      	movs	r3, #0
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	2100      	movs	r1, #0
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f7ff fd60 	bl	80082c0 <xTimerGenericCommand>
 8008800:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10a      	bne.n	800881e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880c:	f383 8811 	msr	BASEPRI, r3
 8008810:	f3bf 8f6f 	isb	sy
 8008814:	f3bf 8f4f 	dsb	sy
 8008818:	603b      	str	r3, [r7, #0]
}
 800881a:	bf00      	nop
 800881c:	e7fe      	b.n	800881c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800881e:	4b09      	ldr	r3, [pc, #36]	; (8008844 <prvSwitchTimerLists+0xc0>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1b1      	bne.n	800878c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008828:	4b06      	ldr	r3, [pc, #24]	; (8008844 <prvSwitchTimerLists+0xc0>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800882e:	4b06      	ldr	r3, [pc, #24]	; (8008848 <prvSwitchTimerLists+0xc4>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a04      	ldr	r2, [pc, #16]	; (8008844 <prvSwitchTimerLists+0xc0>)
 8008834:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008836:	4a04      	ldr	r2, [pc, #16]	; (8008848 <prvSwitchTimerLists+0xc4>)
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	6013      	str	r3, [r2, #0]
}
 800883c:	bf00      	nop
 800883e:	3718      	adds	r7, #24
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	20004fcc 	.word	0x20004fcc
 8008848:	20004fd0 	.word	0x20004fd0

0800884c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008852:	f7fd ffb7 	bl	80067c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008856:	4b15      	ldr	r3, [pc, #84]	; (80088ac <prvCheckForValidListAndQueue+0x60>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d120      	bne.n	80088a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800885e:	4814      	ldr	r0, [pc, #80]	; (80088b0 <prvCheckForValidListAndQueue+0x64>)
 8008860:	f7fd fdd2 	bl	8006408 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008864:	4813      	ldr	r0, [pc, #76]	; (80088b4 <prvCheckForValidListAndQueue+0x68>)
 8008866:	f7fd fdcf 	bl	8006408 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800886a:	4b13      	ldr	r3, [pc, #76]	; (80088b8 <prvCheckForValidListAndQueue+0x6c>)
 800886c:	4a10      	ldr	r2, [pc, #64]	; (80088b0 <prvCheckForValidListAndQueue+0x64>)
 800886e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008870:	4b12      	ldr	r3, [pc, #72]	; (80088bc <prvCheckForValidListAndQueue+0x70>)
 8008872:	4a10      	ldr	r2, [pc, #64]	; (80088b4 <prvCheckForValidListAndQueue+0x68>)
 8008874:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008876:	2300      	movs	r3, #0
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	4b11      	ldr	r3, [pc, #68]	; (80088c0 <prvCheckForValidListAndQueue+0x74>)
 800887c:	4a11      	ldr	r2, [pc, #68]	; (80088c4 <prvCheckForValidListAndQueue+0x78>)
 800887e:	2110      	movs	r1, #16
 8008880:	200a      	movs	r0, #10
 8008882:	f7fe f929 	bl	8006ad8 <xQueueGenericCreateStatic>
 8008886:	4603      	mov	r3, r0
 8008888:	4a08      	ldr	r2, [pc, #32]	; (80088ac <prvCheckForValidListAndQueue+0x60>)
 800888a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800888c:	4b07      	ldr	r3, [pc, #28]	; (80088ac <prvCheckForValidListAndQueue+0x60>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d005      	beq.n	80088a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008894:	4b05      	ldr	r3, [pc, #20]	; (80088ac <prvCheckForValidListAndQueue+0x60>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	490b      	ldr	r1, [pc, #44]	; (80088c8 <prvCheckForValidListAndQueue+0x7c>)
 800889a:	4618      	mov	r0, r3
 800889c:	f7fe fd42 	bl	8007324 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088a0:	f7fd ffc0 	bl	8006824 <vPortExitCritical>
}
 80088a4:	bf00      	nop
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	20004fd4 	.word	0x20004fd4
 80088b0:	20004fa4 	.word	0x20004fa4
 80088b4:	20004fb8 	.word	0x20004fb8
 80088b8:	20004fcc 	.word	0x20004fcc
 80088bc:	20004fd0 	.word	0x20004fd0
 80088c0:	20005080 	.word	0x20005080
 80088c4:	20004fe0 	.word	0x20004fe0
 80088c8:	08008afc 	.word	0x08008afc

080088cc <__libc_init_array>:
 80088cc:	b570      	push	{r4, r5, r6, lr}
 80088ce:	4d0d      	ldr	r5, [pc, #52]	; (8008904 <__libc_init_array+0x38>)
 80088d0:	4c0d      	ldr	r4, [pc, #52]	; (8008908 <__libc_init_array+0x3c>)
 80088d2:	1b64      	subs	r4, r4, r5
 80088d4:	10a4      	asrs	r4, r4, #2
 80088d6:	2600      	movs	r6, #0
 80088d8:	42a6      	cmp	r6, r4
 80088da:	d109      	bne.n	80088f0 <__libc_init_array+0x24>
 80088dc:	4d0b      	ldr	r5, [pc, #44]	; (800890c <__libc_init_array+0x40>)
 80088de:	4c0c      	ldr	r4, [pc, #48]	; (8008910 <__libc_init_array+0x44>)
 80088e0:	f000 f8f2 	bl	8008ac8 <_init>
 80088e4:	1b64      	subs	r4, r4, r5
 80088e6:	10a4      	asrs	r4, r4, #2
 80088e8:	2600      	movs	r6, #0
 80088ea:	42a6      	cmp	r6, r4
 80088ec:	d105      	bne.n	80088fa <__libc_init_array+0x2e>
 80088ee:	bd70      	pop	{r4, r5, r6, pc}
 80088f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80088f4:	4798      	blx	r3
 80088f6:	3601      	adds	r6, #1
 80088f8:	e7ee      	b.n	80088d8 <__libc_init_array+0xc>
 80088fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80088fe:	4798      	blx	r3
 8008900:	3601      	adds	r6, #1
 8008902:	e7f2      	b.n	80088ea <__libc_init_array+0x1e>
 8008904:	08008ba8 	.word	0x08008ba8
 8008908:	08008ba8 	.word	0x08008ba8
 800890c:	08008ba8 	.word	0x08008ba8
 8008910:	08008bac 	.word	0x08008bac

08008914 <__retarget_lock_acquire_recursive>:
 8008914:	4770      	bx	lr

08008916 <__retarget_lock_release_recursive>:
 8008916:	4770      	bx	lr

08008918 <memcpy>:
 8008918:	440a      	add	r2, r1
 800891a:	4291      	cmp	r1, r2
 800891c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008920:	d100      	bne.n	8008924 <memcpy+0xc>
 8008922:	4770      	bx	lr
 8008924:	b510      	push	{r4, lr}
 8008926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800892a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800892e:	4291      	cmp	r1, r2
 8008930:	d1f9      	bne.n	8008926 <memcpy+0xe>
 8008932:	bd10      	pop	{r4, pc}

08008934 <memset>:
 8008934:	4402      	add	r2, r0
 8008936:	4603      	mov	r3, r0
 8008938:	4293      	cmp	r3, r2
 800893a:	d100      	bne.n	800893e <memset+0xa>
 800893c:	4770      	bx	lr
 800893e:	f803 1b01 	strb.w	r1, [r3], #1
 8008942:	e7f9      	b.n	8008938 <memset+0x4>

08008944 <cleanup_glue>:
 8008944:	b538      	push	{r3, r4, r5, lr}
 8008946:	460c      	mov	r4, r1
 8008948:	6809      	ldr	r1, [r1, #0]
 800894a:	4605      	mov	r5, r0
 800894c:	b109      	cbz	r1, 8008952 <cleanup_glue+0xe>
 800894e:	f7ff fff9 	bl	8008944 <cleanup_glue>
 8008952:	4621      	mov	r1, r4
 8008954:	4628      	mov	r0, r5
 8008956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800895a:	f000 b869 	b.w	8008a30 <_free_r>
	...

08008960 <_reclaim_reent>:
 8008960:	4b2c      	ldr	r3, [pc, #176]	; (8008a14 <_reclaim_reent+0xb4>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4283      	cmp	r3, r0
 8008966:	b570      	push	{r4, r5, r6, lr}
 8008968:	4604      	mov	r4, r0
 800896a:	d051      	beq.n	8008a10 <_reclaim_reent+0xb0>
 800896c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800896e:	b143      	cbz	r3, 8008982 <_reclaim_reent+0x22>
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d14a      	bne.n	8008a0c <_reclaim_reent+0xac>
 8008976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008978:	6819      	ldr	r1, [r3, #0]
 800897a:	b111      	cbz	r1, 8008982 <_reclaim_reent+0x22>
 800897c:	4620      	mov	r0, r4
 800897e:	f000 f857 	bl	8008a30 <_free_r>
 8008982:	6961      	ldr	r1, [r4, #20]
 8008984:	b111      	cbz	r1, 800898c <_reclaim_reent+0x2c>
 8008986:	4620      	mov	r0, r4
 8008988:	f000 f852 	bl	8008a30 <_free_r>
 800898c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800898e:	b111      	cbz	r1, 8008996 <_reclaim_reent+0x36>
 8008990:	4620      	mov	r0, r4
 8008992:	f000 f84d 	bl	8008a30 <_free_r>
 8008996:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008998:	b111      	cbz	r1, 80089a0 <_reclaim_reent+0x40>
 800899a:	4620      	mov	r0, r4
 800899c:	f000 f848 	bl	8008a30 <_free_r>
 80089a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80089a2:	b111      	cbz	r1, 80089aa <_reclaim_reent+0x4a>
 80089a4:	4620      	mov	r0, r4
 80089a6:	f000 f843 	bl	8008a30 <_free_r>
 80089aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80089ac:	b111      	cbz	r1, 80089b4 <_reclaim_reent+0x54>
 80089ae:	4620      	mov	r0, r4
 80089b0:	f000 f83e 	bl	8008a30 <_free_r>
 80089b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80089b6:	b111      	cbz	r1, 80089be <_reclaim_reent+0x5e>
 80089b8:	4620      	mov	r0, r4
 80089ba:	f000 f839 	bl	8008a30 <_free_r>
 80089be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80089c0:	b111      	cbz	r1, 80089c8 <_reclaim_reent+0x68>
 80089c2:	4620      	mov	r0, r4
 80089c4:	f000 f834 	bl	8008a30 <_free_r>
 80089c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089ca:	b111      	cbz	r1, 80089d2 <_reclaim_reent+0x72>
 80089cc:	4620      	mov	r0, r4
 80089ce:	f000 f82f 	bl	8008a30 <_free_r>
 80089d2:	69a3      	ldr	r3, [r4, #24]
 80089d4:	b1e3      	cbz	r3, 8008a10 <_reclaim_reent+0xb0>
 80089d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80089d8:	4620      	mov	r0, r4
 80089da:	4798      	blx	r3
 80089dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80089de:	b1b9      	cbz	r1, 8008a10 <_reclaim_reent+0xb0>
 80089e0:	4620      	mov	r0, r4
 80089e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80089e6:	f7ff bfad 	b.w	8008944 <cleanup_glue>
 80089ea:	5949      	ldr	r1, [r1, r5]
 80089ec:	b941      	cbnz	r1, 8008a00 <_reclaim_reent+0xa0>
 80089ee:	3504      	adds	r5, #4
 80089f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089f2:	2d80      	cmp	r5, #128	; 0x80
 80089f4:	68d9      	ldr	r1, [r3, #12]
 80089f6:	d1f8      	bne.n	80089ea <_reclaim_reent+0x8a>
 80089f8:	4620      	mov	r0, r4
 80089fa:	f000 f819 	bl	8008a30 <_free_r>
 80089fe:	e7ba      	b.n	8008976 <_reclaim_reent+0x16>
 8008a00:	680e      	ldr	r6, [r1, #0]
 8008a02:	4620      	mov	r0, r4
 8008a04:	f000 f814 	bl	8008a30 <_free_r>
 8008a08:	4631      	mov	r1, r6
 8008a0a:	e7ef      	b.n	80089ec <_reclaim_reent+0x8c>
 8008a0c:	2500      	movs	r5, #0
 8008a0e:	e7ef      	b.n	80089f0 <_reclaim_reent+0x90>
 8008a10:	bd70      	pop	{r4, r5, r6, pc}
 8008a12:	bf00      	nop
 8008a14:	20000010 	.word	0x20000010

08008a18 <__malloc_lock>:
 8008a18:	4801      	ldr	r0, [pc, #4]	; (8008a20 <__malloc_lock+0x8>)
 8008a1a:	f7ff bf7b 	b.w	8008914 <__retarget_lock_acquire_recursive>
 8008a1e:	bf00      	nop
 8008a20:	200050d0 	.word	0x200050d0

08008a24 <__malloc_unlock>:
 8008a24:	4801      	ldr	r0, [pc, #4]	; (8008a2c <__malloc_unlock+0x8>)
 8008a26:	f7ff bf76 	b.w	8008916 <__retarget_lock_release_recursive>
 8008a2a:	bf00      	nop
 8008a2c:	200050d0 	.word	0x200050d0

08008a30 <_free_r>:
 8008a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a32:	2900      	cmp	r1, #0
 8008a34:	d044      	beq.n	8008ac0 <_free_r+0x90>
 8008a36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a3a:	9001      	str	r0, [sp, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f1a1 0404 	sub.w	r4, r1, #4
 8008a42:	bfb8      	it	lt
 8008a44:	18e4      	addlt	r4, r4, r3
 8008a46:	f7ff ffe7 	bl	8008a18 <__malloc_lock>
 8008a4a:	4a1e      	ldr	r2, [pc, #120]	; (8008ac4 <_free_r+0x94>)
 8008a4c:	9801      	ldr	r0, [sp, #4]
 8008a4e:	6813      	ldr	r3, [r2, #0]
 8008a50:	b933      	cbnz	r3, 8008a60 <_free_r+0x30>
 8008a52:	6063      	str	r3, [r4, #4]
 8008a54:	6014      	str	r4, [r2, #0]
 8008a56:	b003      	add	sp, #12
 8008a58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a5c:	f7ff bfe2 	b.w	8008a24 <__malloc_unlock>
 8008a60:	42a3      	cmp	r3, r4
 8008a62:	d908      	bls.n	8008a76 <_free_r+0x46>
 8008a64:	6825      	ldr	r5, [r4, #0]
 8008a66:	1961      	adds	r1, r4, r5
 8008a68:	428b      	cmp	r3, r1
 8008a6a:	bf01      	itttt	eq
 8008a6c:	6819      	ldreq	r1, [r3, #0]
 8008a6e:	685b      	ldreq	r3, [r3, #4]
 8008a70:	1949      	addeq	r1, r1, r5
 8008a72:	6021      	streq	r1, [r4, #0]
 8008a74:	e7ed      	b.n	8008a52 <_free_r+0x22>
 8008a76:	461a      	mov	r2, r3
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	b10b      	cbz	r3, 8008a80 <_free_r+0x50>
 8008a7c:	42a3      	cmp	r3, r4
 8008a7e:	d9fa      	bls.n	8008a76 <_free_r+0x46>
 8008a80:	6811      	ldr	r1, [r2, #0]
 8008a82:	1855      	adds	r5, r2, r1
 8008a84:	42a5      	cmp	r5, r4
 8008a86:	d10b      	bne.n	8008aa0 <_free_r+0x70>
 8008a88:	6824      	ldr	r4, [r4, #0]
 8008a8a:	4421      	add	r1, r4
 8008a8c:	1854      	adds	r4, r2, r1
 8008a8e:	42a3      	cmp	r3, r4
 8008a90:	6011      	str	r1, [r2, #0]
 8008a92:	d1e0      	bne.n	8008a56 <_free_r+0x26>
 8008a94:	681c      	ldr	r4, [r3, #0]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	6053      	str	r3, [r2, #4]
 8008a9a:	4421      	add	r1, r4
 8008a9c:	6011      	str	r1, [r2, #0]
 8008a9e:	e7da      	b.n	8008a56 <_free_r+0x26>
 8008aa0:	d902      	bls.n	8008aa8 <_free_r+0x78>
 8008aa2:	230c      	movs	r3, #12
 8008aa4:	6003      	str	r3, [r0, #0]
 8008aa6:	e7d6      	b.n	8008a56 <_free_r+0x26>
 8008aa8:	6825      	ldr	r5, [r4, #0]
 8008aaa:	1961      	adds	r1, r4, r5
 8008aac:	428b      	cmp	r3, r1
 8008aae:	bf04      	itt	eq
 8008ab0:	6819      	ldreq	r1, [r3, #0]
 8008ab2:	685b      	ldreq	r3, [r3, #4]
 8008ab4:	6063      	str	r3, [r4, #4]
 8008ab6:	bf04      	itt	eq
 8008ab8:	1949      	addeq	r1, r1, r5
 8008aba:	6021      	streq	r1, [r4, #0]
 8008abc:	6054      	str	r4, [r2, #4]
 8008abe:	e7ca      	b.n	8008a56 <_free_r+0x26>
 8008ac0:	b003      	add	sp, #12
 8008ac2:	bd30      	pop	{r4, r5, pc}
 8008ac4:	200050d4 	.word	0x200050d4

08008ac8 <_init>:
 8008ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aca:	bf00      	nop
 8008acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ace:	bc08      	pop	{r3}
 8008ad0:	469e      	mov	lr, r3
 8008ad2:	4770      	bx	lr

08008ad4 <_fini>:
 8008ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad6:	bf00      	nop
 8008ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ada:	bc08      	pop	{r3}
 8008adc:	469e      	mov	lr, r3
 8008ade:	4770      	bx	lr
