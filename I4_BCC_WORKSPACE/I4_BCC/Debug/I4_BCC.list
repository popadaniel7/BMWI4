
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000798  0800ecd0  0800ecd0  0001ecd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f468  0800f468  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800f468  0800f468  0001f468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f470  0800f470  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f470  0800f470  0001f470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f474  0800f474  0001f474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800f478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054d4  20000074  0800f4ec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005548  0800f4ec  00025548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d2a0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000067b5  00000000  00000000  0004d344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023f0  00000000  00000000  00053b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002150  00000000  00000000  00055ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020710  00000000  00000000  00058040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003786b  00000000  00000000  00078750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0ac8  00000000  00000000  000affbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00160a83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009634  00000000  00000000  00160ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ecb8 	.word	0x0800ecb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800ecb8 	.word	0x0800ecb8

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b974 	b.w	8000cbc <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	4604      	mov	r4, r0
 80009f4:	468e      	mov	lr, r1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d14d      	bne.n	8000a96 <__udivmoddi4+0xaa>
 80009fa:	428a      	cmp	r2, r1
 80009fc:	4694      	mov	ip, r2
 80009fe:	d969      	bls.n	8000ad4 <__udivmoddi4+0xe8>
 8000a00:	fab2 f282 	clz	r2, r2
 8000a04:	b152      	cbz	r2, 8000a1c <__udivmoddi4+0x30>
 8000a06:	fa01 f302 	lsl.w	r3, r1, r2
 8000a0a:	f1c2 0120 	rsb	r1, r2, #32
 8000a0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a16:	ea41 0e03 	orr.w	lr, r1, r3
 8000a1a:	4094      	lsls	r4, r2
 8000a1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a20:	0c21      	lsrs	r1, r4, #16
 8000a22:	fbbe f6f8 	udiv	r6, lr, r8
 8000a26:	fa1f f78c 	uxth.w	r7, ip
 8000a2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a32:	fb06 f107 	mul.w	r1, r6, r7
 8000a36:	4299      	cmp	r1, r3
 8000a38:	d90a      	bls.n	8000a50 <__udivmoddi4+0x64>
 8000a3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a42:	f080 811f 	bcs.w	8000c84 <__udivmoddi4+0x298>
 8000a46:	4299      	cmp	r1, r3
 8000a48:	f240 811c 	bls.w	8000c84 <__udivmoddi4+0x298>
 8000a4c:	3e02      	subs	r6, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a5b      	subs	r3, r3, r1
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a58:	fb08 3310 	mls	r3, r8, r0, r3
 8000a5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a60:	fb00 f707 	mul.w	r7, r0, r7
 8000a64:	42a7      	cmp	r7, r4
 8000a66:	d90a      	bls.n	8000a7e <__udivmoddi4+0x92>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a70:	f080 810a 	bcs.w	8000c88 <__udivmoddi4+0x29c>
 8000a74:	42a7      	cmp	r7, r4
 8000a76:	f240 8107 	bls.w	8000c88 <__udivmoddi4+0x29c>
 8000a7a:	4464      	add	r4, ip
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a82:	1be4      	subs	r4, r4, r7
 8000a84:	2600      	movs	r6, #0
 8000a86:	b11d      	cbz	r5, 8000a90 <__udivmoddi4+0xa4>
 8000a88:	40d4      	lsrs	r4, r2
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d909      	bls.n	8000aae <__udivmoddi4+0xc2>
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	f000 80ef 	beq.w	8000c7e <__udivmoddi4+0x292>
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa6:	4630      	mov	r0, r6
 8000aa8:	4631      	mov	r1, r6
 8000aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aae:	fab3 f683 	clz	r6, r3
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d14a      	bne.n	8000b4c <__udivmoddi4+0x160>
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d302      	bcc.n	8000ac0 <__udivmoddi4+0xd4>
 8000aba:	4282      	cmp	r2, r0
 8000abc:	f200 80f9 	bhi.w	8000cb2 <__udivmoddi4+0x2c6>
 8000ac0:	1a84      	subs	r4, r0, r2
 8000ac2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	469e      	mov	lr, r3
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d0e0      	beq.n	8000a90 <__udivmoddi4+0xa4>
 8000ace:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ad2:	e7dd      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000ad4:	b902      	cbnz	r2, 8000ad8 <__udivmoddi4+0xec>
 8000ad6:	deff      	udf	#255	; 0xff
 8000ad8:	fab2 f282 	clz	r2, r2
 8000adc:	2a00      	cmp	r2, #0
 8000ade:	f040 8092 	bne.w	8000c06 <__udivmoddi4+0x21a>
 8000ae2:	eba1 010c 	sub.w	r1, r1, ip
 8000ae6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aea:	fa1f fe8c 	uxth.w	lr, ip
 8000aee:	2601      	movs	r6, #1
 8000af0:	0c20      	lsrs	r0, r4, #16
 8000af2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000af6:	fb07 1113 	mls	r1, r7, r3, r1
 8000afa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000afe:	fb0e f003 	mul.w	r0, lr, r3
 8000b02:	4288      	cmp	r0, r1
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x12c>
 8000b06:	eb1c 0101 	adds.w	r1, ip, r1
 8000b0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x12a>
 8000b10:	4288      	cmp	r0, r1
 8000b12:	f200 80cb 	bhi.w	8000cac <__udivmoddi4+0x2c0>
 8000b16:	4643      	mov	r3, r8
 8000b18:	1a09      	subs	r1, r1, r0
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b20:	fb07 1110 	mls	r1, r7, r0, r1
 8000b24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b28:	fb0e fe00 	mul.w	lr, lr, r0
 8000b2c:	45a6      	cmp	lr, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x156>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x154>
 8000b3a:	45a6      	cmp	lr, r4
 8000b3c:	f200 80bb 	bhi.w	8000cb6 <__udivmoddi4+0x2ca>
 8000b40:	4608      	mov	r0, r1
 8000b42:	eba4 040e 	sub.w	r4, r4, lr
 8000b46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b4a:	e79c      	b.n	8000a86 <__udivmoddi4+0x9a>
 8000b4c:	f1c6 0720 	rsb	r7, r6, #32
 8000b50:	40b3      	lsls	r3, r6
 8000b52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b62:	431c      	orrs	r4, r3
 8000b64:	40f9      	lsrs	r1, r7
 8000b66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b72:	0c20      	lsrs	r0, r4, #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fb09 1118 	mls	r1, r9, r8, r1
 8000b7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b80:	fb08 f00e 	mul.w	r0, r8, lr
 8000b84:	4288      	cmp	r0, r1
 8000b86:	fa02 f206 	lsl.w	r2, r2, r6
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b8>
 8000b8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b94:	f080 8088 	bcs.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f240 8085 	bls.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1a09      	subs	r1, r1, r0
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bac:	fb09 1110 	mls	r1, r9, r0, r1
 8000bb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb8:	458e      	cmp	lr, r1
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1e2>
 8000bbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc4:	d26c      	bcs.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bc6:	458e      	cmp	lr, r1
 8000bc8:	d96a      	bls.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bca:	3802      	subs	r0, #2
 8000bcc:	4461      	add	r1, ip
 8000bce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000bd6:	eba1 010e 	sub.w	r1, r1, lr
 8000bda:	42a1      	cmp	r1, r4
 8000bdc:	46c8      	mov	r8, r9
 8000bde:	46a6      	mov	lr, r4
 8000be0:	d356      	bcc.n	8000c90 <__udivmoddi4+0x2a4>
 8000be2:	d053      	beq.n	8000c8c <__udivmoddi4+0x2a0>
 8000be4:	b15d      	cbz	r5, 8000bfe <__udivmoddi4+0x212>
 8000be6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bea:	eb61 010e 	sbc.w	r1, r1, lr
 8000bee:	fa01 f707 	lsl.w	r7, r1, r7
 8000bf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000bf6:	40f1      	lsrs	r1, r6
 8000bf8:	431f      	orrs	r7, r3
 8000bfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000bfe:	2600      	movs	r6, #0
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	40d8      	lsrs	r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	fa21 f303 	lsr.w	r3, r1, r3
 8000c14:	4091      	lsls	r1, r2
 8000c16:	4301      	orrs	r1, r0
 8000c18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1c:	fa1f fe8c 	uxth.w	lr, ip
 8000c20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c24:	fb07 3610 	mls	r6, r7, r0, r3
 8000c28:	0c0b      	lsrs	r3, r1, #16
 8000c2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c32:	429e      	cmp	r6, r3
 8000c34:	fa04 f402 	lsl.w	r4, r4, r2
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x260>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c42:	d22f      	bcs.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c44:	429e      	cmp	r6, r3
 8000c46:	d92d      	bls.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1b9b      	subs	r3, r3, r6
 8000c4e:	b289      	uxth	r1, r1
 8000c50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c54:	fb07 3316 	mls	r3, r7, r6, r3
 8000c58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c60:	428b      	cmp	r3, r1
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x28a>
 8000c64:	eb1c 0101 	adds.w	r1, ip, r1
 8000c68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c6c:	d216      	bcs.n	8000c9c <__udivmoddi4+0x2b0>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d914      	bls.n	8000c9c <__udivmoddi4+0x2b0>
 8000c72:	3e02      	subs	r6, #2
 8000c74:	4461      	add	r1, ip
 8000c76:	1ac9      	subs	r1, r1, r3
 8000c78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c7c:	e738      	b.n	8000af0 <__udivmoddi4+0x104>
 8000c7e:	462e      	mov	r6, r5
 8000c80:	4628      	mov	r0, r5
 8000c82:	e705      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000c84:	4606      	mov	r6, r0
 8000c86:	e6e3      	b.n	8000a50 <__udivmoddi4+0x64>
 8000c88:	4618      	mov	r0, r3
 8000c8a:	e6f8      	b.n	8000a7e <__udivmoddi4+0x92>
 8000c8c:	454b      	cmp	r3, r9
 8000c8e:	d2a9      	bcs.n	8000be4 <__udivmoddi4+0x1f8>
 8000c90:	ebb9 0802 	subs.w	r8, r9, r2
 8000c94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c98:	3801      	subs	r0, #1
 8000c9a:	e7a3      	b.n	8000be4 <__udivmoddi4+0x1f8>
 8000c9c:	4646      	mov	r6, r8
 8000c9e:	e7ea      	b.n	8000c76 <__udivmoddi4+0x28a>
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	e794      	b.n	8000bce <__udivmoddi4+0x1e2>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	e7d1      	b.n	8000c4c <__udivmoddi4+0x260>
 8000ca8:	46d0      	mov	r8, sl
 8000caa:	e77b      	b.n	8000ba4 <__udivmoddi4+0x1b8>
 8000cac:	3b02      	subs	r3, #2
 8000cae:	4461      	add	r1, ip
 8000cb0:	e732      	b.n	8000b18 <__udivmoddi4+0x12c>
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	e709      	b.n	8000aca <__udivmoddi4+0xde>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	e742      	b.n	8000b42 <__udivmoddi4+0x156>

08000cbc <__aeabi_idiv0>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <BtcRxVal>:
	return E_OK;

}

StdReturnType BtcRxVal()
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

	if(BtcReceivedDataOnBluetooth >= 116 && BtcReceivedDataOnBluetooth <= 132)
 8000cc4:	4bec      	ldr	r3, [pc, #944]	; (8001078 <BtcRxVal+0x3b8>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b73      	cmp	r3, #115	; 0x73
 8000cca:	d90a      	bls.n	8000ce2 <BtcRxVal+0x22>
 8000ccc:	4bea      	ldr	r3, [pc, #936]	; (8001078 <BtcRxVal+0x3b8>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b84      	cmp	r3, #132	; 0x84
 8000cd2:	d806      	bhi.n	8000ce2 <BtcRxVal+0x22>
	{

		Btc_TemperatureValue = BtcReceivedDataOnBluetooth - 100;
 8000cd4:	4be8      	ldr	r3, [pc, #928]	; (8001078 <BtcRxVal+0x3b8>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	3b64      	subs	r3, #100	; 0x64
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	4be7      	ldr	r3, [pc, #924]	; (800107c <BtcRxVal+0x3bc>)
 8000cde:	701a      	strb	r2, [r3, #0]
 8000ce0:	e00d      	b.n	8000cfe <BtcRxVal+0x3e>

	}
	else if(BtcReceivedDataOnBluetooth >= 150 && BtcReceivedDataOnBluetooth <= 157)
 8000ce2:	4be5      	ldr	r3, [pc, #916]	; (8001078 <BtcRxVal+0x3b8>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b95      	cmp	r3, #149	; 0x95
 8000ce8:	d909      	bls.n	8000cfe <BtcRxVal+0x3e>
 8000cea:	4be3      	ldr	r3, [pc, #908]	; (8001078 <BtcRxVal+0x3b8>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b9d      	cmp	r3, #157	; 0x9d
 8000cf0:	d805      	bhi.n	8000cfe <BtcRxVal+0x3e>
	{

		Btc_FanValue = BtcReceivedDataOnBluetooth - 150;
 8000cf2:	4be1      	ldr	r3, [pc, #900]	; (8001078 <BtcRxVal+0x3b8>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	336a      	adds	r3, #106	; 0x6a
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4be1      	ldr	r3, [pc, #900]	; (8001080 <BtcRxVal+0x3c0>)
 8000cfc:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	switch(BtcReceivedDataOnBluetooth)
 8000cfe:	4bde      	ldr	r3, [pc, #888]	; (8001078 <BtcRxVal+0x3b8>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	2bd5      	cmp	r3, #213	; 0xd5
 8000d06:	f200 8291 	bhi.w	800122c <BtcRxVal+0x56c>
 8000d0a:	a201      	add	r2, pc, #4	; (adr r2, 8000d10 <BtcRxVal+0x50>)
 8000d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d10:	080010a9 	.word	0x080010a9
 8000d14:	080010b1 	.word	0x080010b1
 8000d18:	080010b9 	.word	0x080010b9
 8000d1c:	080010c1 	.word	0x080010c1
 8000d20:	080010c9 	.word	0x080010c9
 8000d24:	080010d1 	.word	0x080010d1
 8000d28:	080010d9 	.word	0x080010d9
 8000d2c:	080010e7 	.word	0x080010e7
 8000d30:	080010ef 	.word	0x080010ef
 8000d34:	080010fd 	.word	0x080010fd
 8000d38:	08001105 	.word	0x08001105
 8000d3c:	0800110d 	.word	0x0800110d
 8000d40:	08001115 	.word	0x08001115
 8000d44:	0800111d 	.word	0x0800111d
 8000d48:	08001125 	.word	0x08001125
 8000d4c:	0800112d 	.word	0x0800112d
 8000d50:	08001135 	.word	0x08001135
 8000d54:	0800113d 	.word	0x0800113d
 8000d58:	08001145 	.word	0x08001145
 8000d5c:	0800114d 	.word	0x0800114d
 8000d60:	08001069 	.word	0x08001069
 8000d64:	08001071 	.word	0x08001071
 8000d68:	0800122d 	.word	0x0800122d
 8000d6c:	0800122d 	.word	0x0800122d
 8000d70:	0800122d 	.word	0x0800122d
 8000d74:	0800122d 	.word	0x0800122d
 8000d78:	0800122d 	.word	0x0800122d
 8000d7c:	0800122d 	.word	0x0800122d
 8000d80:	0800122d 	.word	0x0800122d
 8000d84:	0800122d 	.word	0x0800122d
 8000d88:	0800122d 	.word	0x0800122d
 8000d8c:	0800122d 	.word	0x0800122d
 8000d90:	0800122d 	.word	0x0800122d
 8000d94:	0800122d 	.word	0x0800122d
 8000d98:	0800122d 	.word	0x0800122d
 8000d9c:	0800122d 	.word	0x0800122d
 8000da0:	0800122d 	.word	0x0800122d
 8000da4:	0800122d 	.word	0x0800122d
 8000da8:	0800122d 	.word	0x0800122d
 8000dac:	0800122d 	.word	0x0800122d
 8000db0:	0800122d 	.word	0x0800122d
 8000db4:	0800122d 	.word	0x0800122d
 8000db8:	0800122d 	.word	0x0800122d
 8000dbc:	0800122d 	.word	0x0800122d
 8000dc0:	0800122d 	.word	0x0800122d
 8000dc4:	0800122d 	.word	0x0800122d
 8000dc8:	0800122d 	.word	0x0800122d
 8000dcc:	0800122d 	.word	0x0800122d
 8000dd0:	0800122d 	.word	0x0800122d
 8000dd4:	0800122d 	.word	0x0800122d
 8000dd8:	0800122d 	.word	0x0800122d
 8000ddc:	0800122d 	.word	0x0800122d
 8000de0:	0800122d 	.word	0x0800122d
 8000de4:	0800122d 	.word	0x0800122d
 8000de8:	0800122d 	.word	0x0800122d
 8000dec:	0800122d 	.word	0x0800122d
 8000df0:	0800122d 	.word	0x0800122d
 8000df4:	0800122d 	.word	0x0800122d
 8000df8:	0800122d 	.word	0x0800122d
 8000dfc:	0800122d 	.word	0x0800122d
 8000e00:	0800122d 	.word	0x0800122d
 8000e04:	0800122d 	.word	0x0800122d
 8000e08:	0800122d 	.word	0x0800122d
 8000e0c:	0800122d 	.word	0x0800122d
 8000e10:	0800122d 	.word	0x0800122d
 8000e14:	0800122d 	.word	0x0800122d
 8000e18:	0800122d 	.word	0x0800122d
 8000e1c:	0800122d 	.word	0x0800122d
 8000e20:	0800122d 	.word	0x0800122d
 8000e24:	0800122d 	.word	0x0800122d
 8000e28:	0800122d 	.word	0x0800122d
 8000e2c:	0800122d 	.word	0x0800122d
 8000e30:	0800122d 	.word	0x0800122d
 8000e34:	0800122d 	.word	0x0800122d
 8000e38:	0800122d 	.word	0x0800122d
 8000e3c:	0800122d 	.word	0x0800122d
 8000e40:	0800122d 	.word	0x0800122d
 8000e44:	0800122d 	.word	0x0800122d
 8000e48:	0800122d 	.word	0x0800122d
 8000e4c:	0800122d 	.word	0x0800122d
 8000e50:	0800122d 	.word	0x0800122d
 8000e54:	0800122d 	.word	0x0800122d
 8000e58:	0800122d 	.word	0x0800122d
 8000e5c:	0800122d 	.word	0x0800122d
 8000e60:	0800122d 	.word	0x0800122d
 8000e64:	0800122d 	.word	0x0800122d
 8000e68:	0800122d 	.word	0x0800122d
 8000e6c:	0800122d 	.word	0x0800122d
 8000e70:	0800122d 	.word	0x0800122d
 8000e74:	0800122d 	.word	0x0800122d
 8000e78:	0800122d 	.word	0x0800122d
 8000e7c:	0800122d 	.word	0x0800122d
 8000e80:	0800122d 	.word	0x0800122d
 8000e84:	0800122d 	.word	0x0800122d
 8000e88:	0800122d 	.word	0x0800122d
 8000e8c:	0800122d 	.word	0x0800122d
 8000e90:	0800122d 	.word	0x0800122d
 8000e94:	0800122d 	.word	0x0800122d
 8000e98:	0800122d 	.word	0x0800122d
 8000e9c:	08001089 	.word	0x08001089
 8000ea0:	08001091 	.word	0x08001091
 8000ea4:	08001099 	.word	0x08001099
 8000ea8:	080010a1 	.word	0x080010a1
 8000eac:	0800122d 	.word	0x0800122d
 8000eb0:	0800122d 	.word	0x0800122d
 8000eb4:	0800122d 	.word	0x0800122d
 8000eb8:	0800122d 	.word	0x0800122d
 8000ebc:	0800122d 	.word	0x0800122d
 8000ec0:	0800122d 	.word	0x0800122d
 8000ec4:	0800122d 	.word	0x0800122d
 8000ec8:	0800122d 	.word	0x0800122d
 8000ecc:	0800122d 	.word	0x0800122d
 8000ed0:	0800122d 	.word	0x0800122d
 8000ed4:	0800122d 	.word	0x0800122d
 8000ed8:	0800122d 	.word	0x0800122d
 8000edc:	0800122d 	.word	0x0800122d
 8000ee0:	0800122d 	.word	0x0800122d
 8000ee4:	0800122d 	.word	0x0800122d
 8000ee8:	0800122d 	.word	0x0800122d
 8000eec:	0800122d 	.word	0x0800122d
 8000ef0:	0800122d 	.word	0x0800122d
 8000ef4:	0800122d 	.word	0x0800122d
 8000ef8:	0800122d 	.word	0x0800122d
 8000efc:	0800122d 	.word	0x0800122d
 8000f00:	0800122d 	.word	0x0800122d
 8000f04:	0800122d 	.word	0x0800122d
 8000f08:	0800122d 	.word	0x0800122d
 8000f0c:	0800122d 	.word	0x0800122d
 8000f10:	0800122d 	.word	0x0800122d
 8000f14:	0800122d 	.word	0x0800122d
 8000f18:	0800122d 	.word	0x0800122d
 8000f1c:	0800122d 	.word	0x0800122d
 8000f20:	0800122d 	.word	0x0800122d
 8000f24:	0800122d 	.word	0x0800122d
 8000f28:	0800122d 	.word	0x0800122d
 8000f2c:	0800122d 	.word	0x0800122d
 8000f30:	0800122d 	.word	0x0800122d
 8000f34:	0800122d 	.word	0x0800122d
 8000f38:	0800122d 	.word	0x0800122d
 8000f3c:	0800122d 	.word	0x0800122d
 8000f40:	0800122d 	.word	0x0800122d
 8000f44:	0800122d 	.word	0x0800122d
 8000f48:	0800122d 	.word	0x0800122d
 8000f4c:	0800122d 	.word	0x0800122d
 8000f50:	0800122d 	.word	0x0800122d
 8000f54:	0800122d 	.word	0x0800122d
 8000f58:	0800122d 	.word	0x0800122d
 8000f5c:	0800122d 	.word	0x0800122d
 8000f60:	0800122d 	.word	0x0800122d
 8000f64:	0800122d 	.word	0x0800122d
 8000f68:	0800122d 	.word	0x0800122d
 8000f6c:	0800122d 	.word	0x0800122d
 8000f70:	0800122d 	.word	0x0800122d
 8000f74:	0800122d 	.word	0x0800122d
 8000f78:	0800122d 	.word	0x0800122d
 8000f7c:	0800122d 	.word	0x0800122d
 8000f80:	0800122d 	.word	0x0800122d
 8000f84:	0800122d 	.word	0x0800122d
 8000f88:	0800122d 	.word	0x0800122d
 8000f8c:	0800122d 	.word	0x0800122d
 8000f90:	0800122d 	.word	0x0800122d
 8000f94:	0800122d 	.word	0x0800122d
 8000f98:	0800122d 	.word	0x0800122d
 8000f9c:	0800122d 	.word	0x0800122d
 8000fa0:	0800122d 	.word	0x0800122d
 8000fa4:	0800122d 	.word	0x0800122d
 8000fa8:	0800122d 	.word	0x0800122d
 8000fac:	0800122d 	.word	0x0800122d
 8000fb0:	0800122d 	.word	0x0800122d
 8000fb4:	0800122d 	.word	0x0800122d
 8000fb8:	0800122d 	.word	0x0800122d
 8000fbc:	0800122d 	.word	0x0800122d
 8000fc0:	0800122d 	.word	0x0800122d
 8000fc4:	0800122d 	.word	0x0800122d
 8000fc8:	0800122d 	.word	0x0800122d
 8000fcc:	0800122d 	.word	0x0800122d
 8000fd0:	0800122d 	.word	0x0800122d
 8000fd4:	0800122d 	.word	0x0800122d
 8000fd8:	0800122d 	.word	0x0800122d
 8000fdc:	0800122d 	.word	0x0800122d
 8000fe0:	0800122d 	.word	0x0800122d
 8000fe4:	0800122d 	.word	0x0800122d
 8000fe8:	0800122d 	.word	0x0800122d
 8000fec:	0800122d 	.word	0x0800122d
 8000ff0:	0800122d 	.word	0x0800122d
 8000ff4:	0800122d 	.word	0x0800122d
 8000ff8:	0800122d 	.word	0x0800122d
 8000ffc:	0800122d 	.word	0x0800122d
 8001000:	0800122d 	.word	0x0800122d
 8001004:	0800122d 	.word	0x0800122d
 8001008:	0800122d 	.word	0x0800122d
 800100c:	0800122d 	.word	0x0800122d
 8001010:	0800122d 	.word	0x0800122d
 8001014:	0800122d 	.word	0x0800122d
 8001018:	0800122d 	.word	0x0800122d
 800101c:	0800122d 	.word	0x0800122d
 8001020:	0800122d 	.word	0x0800122d
 8001024:	0800122d 	.word	0x0800122d
 8001028:	0800122d 	.word	0x0800122d
 800102c:	08001155 	.word	0x08001155
 8001030:	0800115d 	.word	0x0800115d
 8001034:	0800116b 	.word	0x0800116b
 8001038:	08001191 	.word	0x08001191
 800103c:	08001199 	.word	0x08001199
 8001040:	08001205 	.word	0x08001205
 8001044:	08001225 	.word	0x08001225
 8001048:	080011a1 	.word	0x080011a1
 800104c:	080011a9 	.word	0x080011a9
 8001050:	080011b1 	.word	0x080011b1
 8001054:	080011c5 	.word	0x080011c5
 8001058:	080011cd 	.word	0x080011cd
 800105c:	080011e1 	.word	0x080011e1
 8001060:	080011e9 	.word	0x080011e9
 8001064:	080011fd 	.word	0x080011fd
	{

		case BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:

			Btc_ReverseLight = STD_HIGH;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <BtcRxVal+0x3c4>)
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]

			break;
 800106e:	e0de      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:

			Btc_ReverseLight = STD_LOW;
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <BtcRxVal+0x3c4>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]

			break;
 8001076:	e0da      	b.n	800122e <BtcRxVal+0x56e>
 8001078:	20000090 	.word	0x20000090
 800107c:	200000cc 	.word	0x200000cc
 8001080:	200000cd 	.word	0x200000cd
 8001084:	200000af 	.word	0x200000af

		case BTC_RX_EXTLIGHTS_POSITIONZERO:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 8001088:	4b6c      	ldr	r3, [pc, #432]	; (800123c <BtcRxVal+0x57c>)
 800108a:	2264      	movs	r2, #100	; 0x64
 800108c:	701a      	strb	r2, [r3, #0]

			break;
 800108e:	e0ce      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 8001090:	4b6a      	ldr	r3, [pc, #424]	; (800123c <BtcRxVal+0x57c>)
 8001092:	2265      	movs	r2, #101	; 0x65
 8001094:	701a      	strb	r2, [r3, #0]

			break;
 8001096:	e0ca      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 8001098:	4b68      	ldr	r3, [pc, #416]	; (800123c <BtcRxVal+0x57c>)
 800109a:	2266      	movs	r2, #102	; 0x66
 800109c:	701a      	strb	r2, [r3, #0]

			break;
 800109e:	e0c6      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 80010a0:	4b66      	ldr	r3, [pc, #408]	; (800123c <BtcRxVal+0x57c>)
 80010a2:	2267      	movs	r2, #103	; 0x67
 80010a4:	701a      	strb	r2, [r3, #0]

			break;
 80010a6:	e0c2      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_CENLOC_ON:

			Btc_CenLoc = STD_HIGH;
 80010a8:	4b65      	ldr	r3, [pc, #404]	; (8001240 <BtcRxVal+0x580>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]

			break;
 80010ae:	e0be      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_CENLOC_OFF:

			Btc_CenLoc = STD_LOW;
 80010b0:	4b63      	ldr	r3, [pc, #396]	; (8001240 <BtcRxVal+0x580>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]

			break;
 80010b6:	e0ba      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_EXTLIGHTS_HIGBEAM_ON:

			Btc_HighBeam = STD_HIGH;
 80010b8:	4b62      	ldr	r3, [pc, #392]	; (8001244 <BtcRxVal+0x584>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]

			break;
 80010be:	e0b6      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_EXTLIGHTS_HIGBEAM_OFF:

			Btc_HighBeam = STD_LOW;
 80010c0:	4b60      	ldr	r3, [pc, #384]	; (8001244 <BtcRxVal+0x584>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]

			break;
 80010c6:	e0b2      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_ON:

			Btc_FlashHighBeam = STD_HIGH;
 80010c8:	4b5f      	ldr	r3, [pc, #380]	; (8001248 <BtcRxVal+0x588>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]

			break;
 80010ce:	e0ae      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_OFF:

			Btc_FlashHighBeam = STD_LOW;
 80010d0:	4b5d      	ldr	r3, [pc, #372]	; (8001248 <BtcRxVal+0x588>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]

			break;
 80010d6:	e0aa      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:

			Btc_TurnSignalLeft = STD_HIGH;
 80010d8:	4b5c      	ldr	r3, [pc, #368]	; (800124c <BtcRxVal+0x58c>)
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
			Btc_TurnSignalRight = STD_LOW;
 80010de:	4b5c      	ldr	r3, [pc, #368]	; (8001250 <BtcRxVal+0x590>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]

			break;
 80010e4:	e0a3      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:

			Btc_TurnSignalLeft = STD_LOW;
 80010e6:	4b59      	ldr	r3, [pc, #356]	; (800124c <BtcRxVal+0x58c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]

			break;
 80010ec:	e09f      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_ESTLIGHTS_TURNSIGNALRIGHT_ON:

			Btc_TurnSignalRight = STD_HIGH;
 80010ee:	4b58      	ldr	r3, [pc, #352]	; (8001250 <BtcRxVal+0x590>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
			Btc_TurnSignalLeft = STD_LOW;
 80010f4:	4b55      	ldr	r3, [pc, #340]	; (800124c <BtcRxVal+0x58c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]

			break;
 80010fa:	e098      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_ESTLIGHTS_TURNSIGNALRIGHT_OFF:

			Btc_TurnSignalRight = STD_LOW;
 80010fc:	4b54      	ldr	r3, [pc, #336]	; (8001250 <BtcRxVal+0x590>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]

			break;
 8001102:	e094      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:

			Btc_HazardLight = STD_HIGH;
 8001104:	4b53      	ldr	r3, [pc, #332]	; (8001254 <BtcRxVal+0x594>)
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]

			break;
 800110a:	e090      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:

			Btc_HazardLight = STD_LOW;
 800110c:	4b51      	ldr	r3, [pc, #324]	; (8001254 <BtcRxVal+0x594>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]

			break;
 8001112:	e08c      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:

			Btc_FrontFogLight = STD_HIGH;
 8001114:	4b50      	ldr	r3, [pc, #320]	; (8001258 <BtcRxVal+0x598>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]

			break;
 800111a:	e088      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:

			Btc_FrontFogLight = STD_LOW;
 800111c:	4b4e      	ldr	r3, [pc, #312]	; (8001258 <BtcRxVal+0x598>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]

			break;
 8001122:	e084      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:

			Btc_RearFogLight = STD_HIGH;
 8001124:	4b4d      	ldr	r3, [pc, #308]	; (800125c <BtcRxVal+0x59c>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]

			break;
 800112a:	e080      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:

			Btc_RearFogLight = STD_LOW;
 800112c:	4b4b      	ldr	r3, [pc, #300]	; (800125c <BtcRxVal+0x59c>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]

			break;
 8001132:	e07c      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTON:

			Btc_BrakeLight = STD_HIGH;
 8001134:	4b4a      	ldr	r3, [pc, #296]	; (8001260 <BtcRxVal+0x5a0>)
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]

			break;
 800113a:	e078      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:

			Btc_BrakeLight = STD_LOW;
 800113c:	4b48      	ldr	r3, [pc, #288]	; (8001260 <BtcRxVal+0x5a0>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]

			break;
 8001142:	e074      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:

			Btc_IntLights = STD_HIGH;
 8001144:	4b47      	ldr	r3, [pc, #284]	; (8001264 <BtcRxVal+0x5a4>)
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]

			break;
 800114a:	e070      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:

			Btc_IntLights = STD_LOW;
 800114c:	4b45      	ldr	r3, [pc, #276]	; (8001264 <BtcRxVal+0x5a4>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]

			break;
 8001152:	e06c      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_HVAC_NORMALMODE_ON:

			Btc_NormalMode = STD_HIGH;
 8001154:	4b44      	ldr	r3, [pc, #272]	; (8001268 <BtcRxVal+0x5a8>)
 8001156:	2201      	movs	r2, #1
 8001158:	701a      	strb	r2, [r3, #0]

			break;
 800115a:	e068      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_HVAC_RECIRCULATIONMODE_ON:

			Btc_NormalMode 			= STD_LOW;
 800115c:	4b42      	ldr	r3, [pc, #264]	; (8001268 <BtcRxVal+0x5a8>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
			Btc_RecirculationMode 	= STD_HIGH;
 8001162:	4b42      	ldr	r3, [pc, #264]	; (800126c <BtcRxVal+0x5ac>)
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]

			break;
 8001168:	e061      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_HVAC_AUTOMATICMODE_ON:

			Btc_NormalMode 			= STD_LOW;
 800116a:	4b3f      	ldr	r3, [pc, #252]	; (8001268 <BtcRxVal+0x5a8>)
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
			Btc_RecirculationMode 	= STD_LOW;
 8001170:	4b3e      	ldr	r3, [pc, #248]	; (800126c <BtcRxVal+0x5ac>)
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
			Btc_LegVents 			= STD_LOW;
 8001176:	4b3e      	ldr	r3, [pc, #248]	; (8001270 <BtcRxVal+0x5b0>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
			Btc_MidVents 			= STD_LOW;
 800117c:	4b3d      	ldr	r3, [pc, #244]	; (8001274 <BtcRxVal+0x5b4>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldVents 	= STD_LOW;
 8001182:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <BtcRxVal+0x5b8>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_HIGH;
 8001188:	4b3c      	ldr	r3, [pc, #240]	; (800127c <BtcRxVal+0x5bc>)
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]

			break;
 800118e:	e04e      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_HVAC_BACKWINDOWDEFROSTON:

			Btc_BackwindowDefrost = STD_HIGH;
 8001190:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <BtcRxVal+0x5c0>)
 8001192:	2201      	movs	r2, #1
 8001194:	701a      	strb	r2, [r3, #0]

			break;
 8001196:	e04a      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_HVAC_BACKWINDOWDEFROSTOFF:

			Btc_BackwindowDefrost = STD_LOW;
 8001198:	4b39      	ldr	r3, [pc, #228]	; (8001280 <BtcRxVal+0x5c0>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]

			break;
 800119e:	e046      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_HVAC_AC_ON:

			Btc_AC = STD_HIGH;
 80011a0:	4b38      	ldr	r3, [pc, #224]	; (8001284 <BtcRxVal+0x5c4>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]

			break;
 80011a6:	e042      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_HVAC_AC_OFF:

			Btc_AC = STD_LOW;
 80011a8:	4b36      	ldr	r3, [pc, #216]	; (8001284 <BtcRxVal+0x5c4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]

			break;
 80011ae:	e03e      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_HVAC_LEGVENT_ON:

			Btc_LegVents 			= STD_HIGH;
 80011b0:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <BtcRxVal+0x5b0>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldDefrost 	= STD_LOW;
 80011b6:	4b34      	ldr	r3, [pc, #208]	; (8001288 <BtcRxVal+0x5c8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_LOW;
 80011bc:	4b2f      	ldr	r3, [pc, #188]	; (800127c <BtcRxVal+0x5bc>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]

			break;
 80011c2:	e034      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_HVAC_LEGVENT_OFF:

			Btc_LegVents = STD_LOW;
 80011c4:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <BtcRxVal+0x5b0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]

			break;
 80011ca:	e030      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_HVAC_MIDVENT_ON:

			Btc_MidVents 			= STD_HIGH;
 80011cc:	4b29      	ldr	r3, [pc, #164]	; (8001274 <BtcRxVal+0x5b4>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldDefrost 	= STD_LOW;
 80011d2:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <BtcRxVal+0x5c8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_LOW;
 80011d8:	4b28      	ldr	r3, [pc, #160]	; (800127c <BtcRxVal+0x5bc>)
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]

			break;
 80011de:	e026      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_HVAC_MIDVENT_OFF:

			Btc_MidVents = STD_LOW;
 80011e0:	4b24      	ldr	r3, [pc, #144]	; (8001274 <BtcRxVal+0x5b4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]

			break;
 80011e6:	e022      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_HVAC_WINDSHIELDVENT_ON:

			Btc_WindshieldVents 	= STD_HIGH;
 80011e8:	4b23      	ldr	r3, [pc, #140]	; (8001278 <BtcRxVal+0x5b8>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldDefrost 	= STD_LOW;
 80011ee:	4b26      	ldr	r3, [pc, #152]	; (8001288 <BtcRxVal+0x5c8>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_LOW;
 80011f4:	4b21      	ldr	r3, [pc, #132]	; (800127c <BtcRxVal+0x5bc>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]

			break;
 80011fa:	e018      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_HVAC_WINDSHIELDVENT_OFF:

			Btc_WindshieldVents = STD_LOW;
 80011fc:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <BtcRxVal+0x5b8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]

			break;
 8001202:	e014      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_HVAC_WINDSHIELDDEFROST_ON:

			Btc_WindshieldDefrost	= STD_HIGH;
 8001204:	4b20      	ldr	r3, [pc, #128]	; (8001288 <BtcRxVal+0x5c8>)
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
			Btc_LegVents 			= STD_LOW;
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <BtcRxVal+0x5b0>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
			Btc_MidVents 			= STD_LOW;
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <BtcRxVal+0x5b4>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldVents 	= STD_LOW;
 8001216:	4b18      	ldr	r3, [pc, #96]	; (8001278 <BtcRxVal+0x5b8>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_LOW;
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <BtcRxVal+0x5bc>)
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]

			break;
 8001222:	e004      	b.n	800122e <BtcRxVal+0x56e>

		case BTC_RX_HVAC_WINDSHIELDDEFROST_OFF:

			Btc_WindshieldDefrost = STD_LOW;
 8001224:	4b18      	ldr	r3, [pc, #96]	; (8001288 <BtcRxVal+0x5c8>)
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]


			break;
 800122a:	e000      	b.n	800122e <BtcRxVal+0x56e>

		default:

			break;
 800122c:	bf00      	nop

	}

	return 1;
 800122e:	2301      	movs	r3, #1

}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	200000a6 	.word	0x200000a6
 8001240:	20000096 	.word	0x20000096
 8001244:	200000a7 	.word	0x200000a7
 8001248:	200000a8 	.word	0x200000a8
 800124c:	200000aa 	.word	0x200000aa
 8001250:	200000ab 	.word	0x200000ab
 8001254:	200000ac 	.word	0x200000ac
 8001258:	200000a9 	.word	0x200000a9
 800125c:	200000ae 	.word	0x200000ae
 8001260:	200000ad 	.word	0x200000ad
 8001264:	200000f5 	.word	0x200000f5
 8001268:	200000d6 	.word	0x200000d6
 800126c:	200000d5 	.word	0x200000d5
 8001270:	200000ce 	.word	0x200000ce
 8001274:	200000cf 	.word	0x200000cf
 8001278:	200000d0 	.word	0x200000d0
 800127c:	200000d4 	.word	0x200000d4
 8001280:	200000d2 	.word	0x200000d2
 8001284:	200000d3 	.word	0x200000d3
 8001288:	200000d1 	.word	0x200000d1

0800128c <BtcEnableUart>:

StdReturnType BtcEnableUart()
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0

	uint8 status = STD_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	71fb      	strb	r3, [r7, #7]

	if(HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1) != E_NOT_OK)
 8001296:	2201      	movs	r2, #1
 8001298:	490e      	ldr	r1, [pc, #56]	; (80012d4 <BtcEnableUart+0x48>)
 800129a:	480f      	ldr	r0, [pc, #60]	; (80012d8 <BtcEnableUart+0x4c>)
 800129c:	f009 fa48 	bl	800a730 <HAL_UART_Receive_IT>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d007      	beq.n	80012b6 <BtcEnableUart+0x2a>
	{

		HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1);
 80012a6:	2201      	movs	r2, #1
 80012a8:	490a      	ldr	r1, [pc, #40]	; (80012d4 <BtcEnableUart+0x48>)
 80012aa:	480b      	ldr	r0, [pc, #44]	; (80012d8 <BtcEnableUart+0x4c>)
 80012ac:	f009 fa40 	bl	800a730 <HAL_UART_Receive_IT>
		status = E_OK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	71fb      	strb	r3, [r7, #7]
 80012b4:	e009      	b.n	80012ca <BtcEnableUart+0x3e>

	}
	else if(HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1) == E_NOT_OK)
 80012b6:	2201      	movs	r2, #1
 80012b8:	4906      	ldr	r1, [pc, #24]	; (80012d4 <BtcEnableUart+0x48>)
 80012ba:	4807      	ldr	r0, [pc, #28]	; (80012d8 <BtcEnableUart+0x4c>)
 80012bc:	f009 fa38 	bl	800a730 <HAL_UART_Receive_IT>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d101      	bne.n	80012ca <BtcEnableUart+0x3e>
	{

		status = E_NOT_OK;
 80012c6:	2301      	movs	r3, #1
 80012c8:	71fb      	strb	r3, [r7, #7]

		/* do nothing */

	}

	return status;
 80012ca:	79fb      	ldrb	r3, [r7, #7]

}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000090 	.word	0x20000090
 80012d8:	20000878 	.word	0x20000878

080012dc <BtcMainFunction>:

void BtcMainFunction()
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0

	BtcEnableUart();
 80012e0:	f7ff ffd4 	bl	800128c <BtcEnableUart>
	BtcRxVal();
 80012e4:	f7ff fcec 	bl	8000cc0 <BtcRxVal>

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}

080012ec <CenLocState>:

	return E_OK;
}

StdReturnType CenLocState()
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0

	uint8 status = E_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	71fb      	strb	r3, [r7, #7]

	if(CenLoc_PreviousState != CenLoc_CurrentState)
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <CenLocState+0x5c>)
 80012f8:	781a      	ldrb	r2, [r3, #0]
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <CenLocState+0x60>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d01c      	beq.n	800133c <CenLocState+0x50>
	{
		CenLoc_PreviousStateFlag 		= CenLoc_PreviousState;
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <CenLocState+0x5c>)
 8001304:	781a      	ldrb	r2, [r3, #0]
 8001306:	4b12      	ldr	r3, [pc, #72]	; (8001350 <CenLocState+0x64>)
 8001308:	701a      	strb	r2, [r3, #0]
		CenLoc_PreviousState 			= CenLoc_CurrentState;
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <CenLocState+0x60>)
 800130c:	781a      	ldrb	r2, [r3, #0]
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <CenLocState+0x5c>)
 8001310:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim2IRQFlag 				= STD_LOW;
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <CenLocState+0x68>)
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim5IRQFlag 				= STD_LOW;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <CenLocState+0x6c>)
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim3IRQFlag				= STD_LOW;
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <CenLocState+0x70>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim11IRQFlag				= STD_LOW;
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <CenLocState+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]

		HAL_TIM_Base_Init(&htim2);
 800132a:	480e      	ldr	r0, [pc, #56]	; (8001364 <CenLocState+0x78>)
 800132c:	f008 f88e 	bl	800944c <HAL_TIM_Base_Init>
		HAL_TIM_Base_Init(&htim3);
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <CenLocState+0x7c>)
 8001332:	f008 f88b 	bl	800944c <HAL_TIM_Base_Init>
		HAL_TIM_Base_Init(&htim5);
 8001336:	480d      	ldr	r0, [pc, #52]	; (800136c <CenLocState+0x80>)
 8001338:	f008 f888 	bl	800944c <HAL_TIM_Base_Init>

		/* do nothing */

	}

	return status;
 800133c:	79fb      	ldrb	r3, [r7, #7]

}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000092 	.word	0x20000092
 800134c:	20000091 	.word	0x20000091
 8001350:	20000095 	.word	0x20000095
 8001354:	20000098 	.word	0x20000098
 8001358:	2000009a 	.word	0x2000009a
 800135c:	20000099 	.word	0x20000099
 8001360:	2000009b 	.word	0x2000009b
 8001364:	20000440 	.word	0x20000440
 8001368:	200004f4 	.word	0x200004f4
 800136c:	2000065c 	.word	0x2000065c

08001370 <CenLocSecAlmStateToOff>:

void CenLocSecAlmStateToOff()
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH)
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <CenLocSecAlmStateToOff+0x1c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d102      	bne.n	8001382 <CenLocSecAlmStateToOff+0x12>
	{

		SecAlm_Trigger = STD_LOW;
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <CenLocSecAlmStateToOff+0x20>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	20000091 	.word	0x20000091
 8001390:	20000106 	.word	0x20000106

08001394 <CenLocRxBtcState>:

void CenLocRxBtcState()
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

	CenLoc_CurrentState = Btc_CenLoc;
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <CenLocRxBtcState+0x18>)
 800139a:	781a      	ldrb	r2, [r3, #0]
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <CenLocRxBtcState+0x1c>)
 800139e:	701a      	strb	r2, [r3, #0]

}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000096 	.word	0x20000096
 80013b0:	20000091 	.word	0x20000091

080013b4 <CenLocToggleDoorLED>:

void CenLocToggleDoorLED(uint8 PinState)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CENLOC_DOOR_LED_PORT, CENLOC_DOOR_LED_PIN, PinState);
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	461a      	mov	r2, r3
 80013c2:	2180      	movs	r1, #128	; 0x80
 80013c4:	4803      	ldr	r0, [pc, #12]	; (80013d4 <CenLocToggleDoorLED+0x20>)
 80013c6:	f004 ff9f 	bl	8006308 <HAL_GPIO_WritePin>

}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40020400 	.word	0x40020400

080013d8 <CenLocFollowMeHome>:

void CenLocFollowMeHome()
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

	if(CenLoc_Tim5IRQFlag == 1)
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <CenLocFollowMeHome+0x2c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d103      	bne.n	80013ec <CenLocFollowMeHome+0x14>
	{

		CenLoc_FollowMeHomeState = STD_HIGH;
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <CenLocFollowMeHome+0x30>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 80013ea:	e006      	b.n	80013fa <CenLocFollowMeHome+0x22>
	else if(CenLoc_Tim5IRQFlag == 2)
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <CenLocFollowMeHome+0x2c>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d102      	bne.n	80013fa <CenLocFollowMeHome+0x22>
		CenLoc_FollowMeHomeState = STD_LOW;
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <CenLocFollowMeHome+0x30>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	2000009a 	.word	0x2000009a
 8001408:	20000093 	.word	0x20000093

0800140c <CenLocUnlockSequence>:
	ExtLightsTurnSignalRight(CenLoc_BlinkState);

}

void CenLocUnlockSequence()
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop_IT(&htim3);
 8001410:	482e      	ldr	r0, [pc, #184]	; (80014cc <CenLocUnlockSequence+0xc0>)
 8001412:	f008 f97f 	bl	8009714 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8001416:	482e      	ldr	r0, [pc, #184]	; (80014d0 <CenLocUnlockSequence+0xc4>)
 8001418:	f008 f8ea 	bl	80095f0 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800141c:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <CenLocUnlockSequence+0xc0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2200      	movs	r2, #0
 8001422:	625a      	str	r2, [r3, #36]	; 0x24

	CenLocToggleDoorLED(CenLoc_CurrentState);
 8001424:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <CenLocUnlockSequence+0xc8>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ffc3 	bl	80013b4 <CenLocToggleDoorLED>
	CenLocFollowMeHome();
 800142e:	f7ff ffd3 	bl	80013d8 <CenLocFollowMeHome>

	localPreviousState = STD_HIGH;
 8001432:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <CenLocUnlockSequence+0xcc>)
 8001434:	2201      	movs	r2, #1
 8001436:	701a      	strb	r2, [r3, #0]

	if(CenLoc_Tim2IRQFlag <= 4)
 8001438:	4b28      	ldr	r3, [pc, #160]	; (80014dc <CenLocUnlockSequence+0xd0>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b04      	cmp	r3, #4
 800143e:	d837      	bhi.n	80014b0 <CenLocUnlockSequence+0xa4>
	{

		HAL_TIM_Base_Start_IT(&htim2);
 8001440:	4827      	ldr	r0, [pc, #156]	; (80014e0 <CenLocUnlockSequence+0xd4>)
 8001442:	f008 f8d5 	bl	80095f0 <HAL_TIM_Base_Start_IT>

		switch(CenLoc_Tim2IRQFlag)
 8001446:	4b25      	ldr	r3, [pc, #148]	; (80014dc <CenLocUnlockSequence+0xd0>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	3b01      	subs	r3, #1
 800144c:	2b03      	cmp	r3, #3
 800144e:	d83a      	bhi.n	80014c6 <CenLocUnlockSequence+0xba>
 8001450:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <CenLocUnlockSequence+0x4c>)
 8001452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001456:	bf00      	nop
 8001458:	08001469 	.word	0x08001469
 800145c:	0800147b 	.word	0x0800147b
 8001460:	0800148d 	.word	0x0800148d
 8001464:	0800149f 	.word	0x0800149f
		{

			case 1:

				CenLoc_BlinkState = STD_HIGH;
 8001468:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <CenLocUnlockSequence+0xd8>)
 800146a:	2201      	movs	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <CenLocUnlockSequence+0xd8>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f8e4 	bl	8001640 <CenLocToggleBuzzer>

				break;
 8001478:	e026      	b.n	80014c8 <CenLocUnlockSequence+0xbc>

			case 2:

				CenLoc_BlinkState = STD_LOW;
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <CenLocUnlockSequence+0xd8>)
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 8001480:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <CenLocUnlockSequence+0xd8>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f000 f8db 	bl	8001640 <CenLocToggleBuzzer>

				break;
 800148a:	e01d      	b.n	80014c8 <CenLocUnlockSequence+0xbc>

			case 3:

				CenLoc_BlinkState = STD_HIGH;
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <CenLocUnlockSequence+0xd8>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <CenLocUnlockSequence+0xd8>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f8d2 	bl	8001640 <CenLocToggleBuzzer>

				break;
 800149c:	e014      	b.n	80014c8 <CenLocUnlockSequence+0xbc>

			case 4:

				CenLoc_BlinkState = STD_LOW;
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <CenLocUnlockSequence+0xd8>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <CenLocUnlockSequence+0xd8>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 f8c9 	bl	8001640 <CenLocToggleBuzzer>

				break;
 80014ae:	e00b      	b.n	80014c8 <CenLocUnlockSequence+0xbc>
				break;

		}

	}
	else if(CenLoc_Tim2IRQFlag == 5)
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <CenLocUnlockSequence+0xd0>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b05      	cmp	r3, #5
 80014b6:	d107      	bne.n	80014c8 <CenLocUnlockSequence+0xbc>
	{

		CenLoc_BlinkState = 2;
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <CenLocUnlockSequence+0xd8>)
 80014ba:	2202      	movs	r2, #2
 80014bc:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 80014be:	4808      	ldr	r0, [pc, #32]	; (80014e0 <CenLocUnlockSequence+0xd4>)
 80014c0:	f008 f928 	bl	8009714 <HAL_TIM_Base_Stop_IT>

		/* do nothing */

	}

}
 80014c4:	e000      	b.n	80014c8 <CenLocUnlockSequence+0xbc>
				break;
 80014c6:	bf00      	nop
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200004f4 	.word	0x200004f4
 80014d0:	2000065c 	.word	0x2000065c
 80014d4:	20000091 	.word	0x20000091
 80014d8:	20000097 	.word	0x20000097
 80014dc:	20000098 	.word	0x20000098
 80014e0:	20000440 	.word	0x20000440
 80014e4:	20000094 	.word	0x20000094

080014e8 <CenLocLockSequence>:

void CenLocLockSequence()
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0

	CenLocToggleDoorLED(CenLoc_CurrentState);
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <CenLocLockSequence+0x84>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff5f 	bl	80013b4 <CenLocToggleDoorLED>
	CenLocFollowMeHome();
 80014f6:	f7ff ff6f 	bl	80013d8 <CenLocFollowMeHome>

	if(CenLoc_Tim2IRQFlag <= 2 && localPreviousState == STD_HIGH)
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <CenLocLockSequence+0x88>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d827      	bhi.n	8001552 <CenLocLockSequence+0x6a>
 8001502:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <CenLocLockSequence+0x8c>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d123      	bne.n	8001552 <CenLocLockSequence+0x6a>
	{
		HAL_TIM_Base_Start_IT(&htim5);
 800150a:	481b      	ldr	r0, [pc, #108]	; (8001578 <CenLocLockSequence+0x90>)
 800150c:	f008 f870 	bl	80095f0 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim2);
 8001510:	481a      	ldr	r0, [pc, #104]	; (800157c <CenLocLockSequence+0x94>)
 8001512:	f008 f86d 	bl	80095f0 <HAL_TIM_Base_Start_IT>

		switch(CenLoc_Tim2IRQFlag)
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <CenLocLockSequence+0x88>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d002      	beq.n	8001524 <CenLocLockSequence+0x3c>
 800151e:	2b02      	cmp	r3, #2
 8001520:	d009      	beq.n	8001536 <CenLocLockSequence+0x4e>

			break;

		default:

			break;
 8001522:	e014      	b.n	800154e <CenLocLockSequence+0x66>
			CenLoc_BlinkState = STD_HIGH;
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <CenLocLockSequence+0x98>)
 8001526:	2201      	movs	r2, #1
 8001528:	701a      	strb	r2, [r3, #0]
			CenLocToggleBuzzer(CenLoc_BlinkState);
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <CenLocLockSequence+0x98>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f000 f886 	bl	8001640 <CenLocToggleBuzzer>
			break;
 8001534:	e00b      	b.n	800154e <CenLocLockSequence+0x66>
			CenLoc_BlinkState = STD_LOW;
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <CenLocLockSequence+0x98>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
			CenLocToggleBuzzer(CenLoc_BlinkState);
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <CenLocLockSequence+0x98>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f000 f87d 	bl	8001640 <CenLocToggleBuzzer>
			localPreviousState = STD_LOW;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <CenLocLockSequence+0x8c>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
			break;
 800154c:	bf00      	nop
		switch(CenLoc_Tim2IRQFlag)
 800154e:	bf00      	nop
	else
	{
		/* do nothing */
	}

}
 8001550:	e009      	b.n	8001566 <CenLocLockSequence+0x7e>
	else if(CenLoc_Tim2IRQFlag == 3)
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <CenLocLockSequence+0x88>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b03      	cmp	r3, #3
 8001558:	d105      	bne.n	8001566 <CenLocLockSequence+0x7e>
		CenLoc_BlinkState = 2;
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <CenLocLockSequence+0x98>)
 800155c:	2202      	movs	r2, #2
 800155e:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8001560:	4806      	ldr	r0, [pc, #24]	; (800157c <CenLocLockSequence+0x94>)
 8001562:	f008 f8d7 	bl	8009714 <HAL_TIM_Base_Stop_IT>
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000091 	.word	0x20000091
 8001570:	20000098 	.word	0x20000098
 8001574:	20000097 	.word	0x20000097
 8001578:	2000065c 	.word	0x2000065c
 800157c:	20000440 	.word	0x20000440
 8001580:	20000094 	.word	0x20000094

08001584 <CenLocControlAlarmLed>:

void CenLocControlAlarmLed()
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	if(CenLoc_CurrentState == STD_HIGH)
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <CenLocControlAlarmLed+0x64>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d103      	bne.n	8001598 <CenLocControlAlarmLed+0x14>
	{

		SecAlmToggleAlarmLed(STD_LOW);
 8001590:	2000      	movs	r0, #0
 8001592:	f001 f8a5 	bl	80026e0 <SecAlmToggleAlarmLed>
			/* do nothing */

		}

	}
}
 8001596:	e025      	b.n	80015e4 <CenLocControlAlarmLed+0x60>
	else if(CenLoc_CurrentState == STD_LOW)
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <CenLocControlAlarmLed+0x64>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d121      	bne.n	80015e4 <CenLocControlAlarmLed+0x60>
		HAL_TIM_Base_Start_IT(&htim3);
 80015a0:	4812      	ldr	r0, [pc, #72]	; (80015ec <CenLocControlAlarmLed+0x68>)
 80015a2:	f008 f825 	bl	80095f0 <HAL_TIM_Base_Start_IT>
		if(CenLoc_Tim3IRQFlag == 2)
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <CenLocControlAlarmLed+0x6c>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d11a      	bne.n	80015e4 <CenLocControlAlarmLed+0x60>
			HAL_TIM_Base_Start_IT(&htim11);
 80015ae:	4811      	ldr	r0, [pc, #68]	; (80015f4 <CenLocControlAlarmLed+0x70>)
 80015b0:	f008 f81e 	bl	80095f0 <HAL_TIM_Base_Start_IT>
			if(CenLoc_Tim11IRQFlag == 1)
 80015b4:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <CenLocControlAlarmLed+0x74>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d103      	bne.n	80015c4 <CenLocControlAlarmLed+0x40>
				SecAlmToggleAlarmLed(STD_HIGH);
 80015bc:	2001      	movs	r0, #1
 80015be:	f001 f88f 	bl	80026e0 <SecAlmToggleAlarmLed>
}
 80015c2:	e00f      	b.n	80015e4 <CenLocControlAlarmLed+0x60>
			else if(CenLoc_Tim11IRQFlag > 1)
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <CenLocControlAlarmLed+0x74>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d90b      	bls.n	80015e4 <CenLocControlAlarmLed+0x60>
				SecAlmToggleAlarmLed(STD_LOW);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f001 f887 	bl	80026e0 <SecAlmToggleAlarmLed>
				CenLoc_Tim11IRQFlag = 0;
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <CenLocControlAlarmLed+0x74>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
				CenLoc_Tim3IRQFlag = 1;
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <CenLocControlAlarmLed+0x6c>)
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim11);
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <CenLocControlAlarmLed+0x70>)
 80015e0:	f008 f898 	bl	8009714 <HAL_TIM_Base_Stop_IT>
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000091 	.word	0x20000091
 80015ec:	200004f4 	.word	0x200004f4
 80015f0:	20000099 	.word	0x20000099
 80015f4:	200007c4 	.word	0x200007c4
 80015f8:	2000009b 	.word	0x2000009b

080015fc <CenLocLockUnlockStates>:

StdReturnType CenLocLockUnlockStates()
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH && SecAlm_Trigger == STD_LOW)
 8001600:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <CenLocLockUnlockStates+0x3c>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d108      	bne.n	800161a <CenLocLockUnlockStates+0x1e>
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <CenLocLockUnlockStates+0x40>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d104      	bne.n	800161a <CenLocLockUnlockStates+0x1e>
	{

		CenLocUnlockSequence();
 8001610:	f7ff fefc 	bl	800140c <CenLocUnlockSequence>
		CenLocControlAlarmLed();
 8001614:	f7ff ffb6 	bl	8001584 <CenLocControlAlarmLed>
 8001618:	e00b      	b.n	8001632 <CenLocLockUnlockStates+0x36>

	}
	else if(CenLoc_CurrentState == STD_LOW && SecAlm_Trigger == STD_LOW)
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <CenLocLockUnlockStates+0x3c>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d107      	bne.n	8001632 <CenLocLockUnlockStates+0x36>
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <CenLocLockUnlockStates+0x40>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d103      	bne.n	8001632 <CenLocLockUnlockStates+0x36>
	{

		CenLocLockSequence();
 800162a:	f7ff ff5d 	bl	80014e8 <CenLocLockSequence>
		CenLocControlAlarmLed();
 800162e:	f7ff ffa9 	bl	8001584 <CenLocControlAlarmLed>

	}

	return 1;
 8001632:	2301      	movs	r3, #1

}
 8001634:	4618      	mov	r0, r3
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000091 	.word	0x20000091
 800163c:	20000106 	.word	0x20000106

08001640 <CenLocToggleBuzzer>:

void CenLocToggleBuzzer(uint8 PinState)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CENLOC_BUZZER_PORT, CENLOC_BUZZER_PIN, PinState);
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	461a      	mov	r2, r3
 800164e:	2110      	movs	r1, #16
 8001650:	4803      	ldr	r0, [pc, #12]	; (8001660 <CenLocToggleBuzzer+0x20>)
 8001652:	f004 fe59 	bl	8006308 <HAL_GPIO_WritePin>

}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40020800 	.word	0x40020800

08001664 <CenLocMainFunction>:

void CenLocMainFunction()
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0

	CenLocRxBtcState();
 8001668:	f7ff fe94 	bl	8001394 <CenLocRxBtcState>
	CenLocState();
 800166c:	f7ff fe3e 	bl	80012ec <CenLocState>
	CenLocSecAlmStateToOff();
 8001670:	f7ff fe7e 	bl	8001370 <CenLocSecAlmStateToOff>
	CenLocLockUnlockStates();
 8001674:	f7ff ffc2 	bl	80015fc <CenLocLockUnlockStates>

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}

0800167c <ExtLightsTurnSignalHazardLight>:
void ExtLightsPrevStateTSHL();
StdReturnType ExtLightsInit();
uint32 ExtLightsLightReadSensorValue();

void ExtLightsTurnSignalHazardLight()
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0

	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8001680:	4b35      	ldr	r3, [pc, #212]	; (8001758 <ExtLightsTurnSignalHazardLight+0xdc>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d115      	bne.n	80016b4 <ExtLightsTurnSignalHazardLight+0x38>
	{

		HAL_TIM_Base_Start_IT(&htim2);
 8001688:	4834      	ldr	r0, [pc, #208]	; (800175c <ExtLightsTurnSignalHazardLight+0xe0>)
 800168a:	f007 ffb1 	bl	80095f0 <HAL_TIM_Base_Start_IT>

		if(ExtLights_LTSFlag % 2 == 0)
 800168e:	4b34      	ldr	r3, [pc, #208]	; (8001760 <ExtLightsTurnSignalHazardLight+0xe4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d103      	bne.n	80016a2 <ExtLightsTurnSignalHazardLight+0x26>
		{

			ExtLightsTurnSignalLeft(STD_HIGH);
 800169a:	2001      	movs	r0, #1
 800169c:	f000 fa7c 	bl	8001b98 <ExtLightsTurnSignalLeft>
 80016a0:	e008      	b.n	80016b4 <ExtLightsTurnSignalHazardLight+0x38>

		}
		else if(ExtLights_LTSFlag % 2 == STD_HIGH)
 80016a2:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <ExtLightsTurnSignalHazardLight+0xe4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <ExtLightsTurnSignalHazardLight+0x38>
		{

			ExtLightsTurnSignalLeft(STD_LOW);
 80016ae:	2000      	movs	r0, #0
 80016b0:	f000 fa72 	bl	8001b98 <ExtLightsTurnSignalLeft>

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 80016b4:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <ExtLightsTurnSignalHazardLight+0xe8>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d115      	bne.n	80016e8 <ExtLightsTurnSignalHazardLight+0x6c>
	{

		HAL_TIM_Base_Start_IT(&htim2);
 80016bc:	4827      	ldr	r0, [pc, #156]	; (800175c <ExtLightsTurnSignalHazardLight+0xe0>)
 80016be:	f007 ff97 	bl	80095f0 <HAL_TIM_Base_Start_IT>

		if(ExtLights_RTSFlag % 2 == STD_LOW)
 80016c2:	4b29      	ldr	r3, [pc, #164]	; (8001768 <ExtLightsTurnSignalHazardLight+0xec>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d103      	bne.n	80016d6 <ExtLightsTurnSignalHazardLight+0x5a>
		{

			ExtLightsTurnSignalRight(STD_HIGH);
 80016ce:	2001      	movs	r0, #1
 80016d0:	f000 fa74 	bl	8001bbc <ExtLightsTurnSignalRight>
 80016d4:	e008      	b.n	80016e8 <ExtLightsTurnSignalHazardLight+0x6c>

		}
		else if(ExtLights_RTSFlag % 2 == STD_HIGH)
 80016d6:	4b24      	ldr	r3, [pc, #144]	; (8001768 <ExtLightsTurnSignalHazardLight+0xec>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d002      	beq.n	80016e8 <ExtLightsTurnSignalHazardLight+0x6c>
		{

			ExtLightsTurnSignalRight(STD_LOW);
 80016e2:	2000      	movs	r0, #0
 80016e4:	f000 fa6a 	bl	8001bbc <ExtLightsTurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 80016e8:	4b20      	ldr	r3, [pc, #128]	; (800176c <ExtLightsTurnSignalHazardLight+0xf0>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d11b      	bne.n	8001728 <ExtLightsTurnSignalHazardLight+0xac>
	{

		HAL_TIM_Base_Start_IT(&htim2);
 80016f0:	481a      	ldr	r0, [pc, #104]	; (800175c <ExtLightsTurnSignalHazardLight+0xe0>)
 80016f2:	f007 ff7d 	bl	80095f0 <HAL_TIM_Base_Start_IT>

		if(ExtLights_HLFlag % 2 == STD_LOW)
 80016f6:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <ExtLightsTurnSignalHazardLight+0xf4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d106      	bne.n	8001710 <ExtLightsTurnSignalHazardLight+0x94>
		{

			ExtLightsTurnSignalLeft(STD_HIGH);
 8001702:	2001      	movs	r0, #1
 8001704:	f000 fa48 	bl	8001b98 <ExtLightsTurnSignalLeft>
			ExtLightsTurnSignalRight(STD_HIGH);
 8001708:	2001      	movs	r0, #1
 800170a:	f000 fa57 	bl	8001bbc <ExtLightsTurnSignalRight>
 800170e:	e00b      	b.n	8001728 <ExtLightsTurnSignalHazardLight+0xac>

		}
		else if(ExtLights_HLFlag % 2 == STD_HIGH)
 8001710:	4b17      	ldr	r3, [pc, #92]	; (8001770 <ExtLightsTurnSignalHazardLight+0xf4>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <ExtLightsTurnSignalHazardLight+0xac>
		{

			ExtLightsTurnSignalLeft(STD_LOW);
 800171c:	2000      	movs	r0, #0
 800171e:	f000 fa3b 	bl	8001b98 <ExtLightsTurnSignalLeft>
			ExtLightsTurnSignalRight(STD_LOW);
 8001722:	2000      	movs	r0, #0
 8001724:	f000 fa4a 	bl	8001bbc <ExtLightsTurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <ExtLightsTurnSignalHazardLight+0xe8>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d106      	bne.n	800173e <ExtLightsTurnSignalHazardLight+0xc2>
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <ExtLightsTurnSignalHazardLight+0xf0>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <ExtLightsTurnSignalHazardLight+0xc2>
	{

		ExtLightsTurnSignalRight(STD_LOW);
 8001738:	2000      	movs	r0, #0
 800173a:	f000 fa3f 	bl	8001bbc <ExtLightsTurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_TurnSignalLeft_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <ExtLightsTurnSignalHazardLight+0xdc>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d106      	bne.n	8001754 <ExtLightsTurnSignalHazardLight+0xd8>
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <ExtLightsTurnSignalHazardLight+0xf0>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d102      	bne.n	8001754 <ExtLightsTurnSignalHazardLight+0xd8>
	{

		ExtLightsTurnSignalLeft(STD_LOW);
 800174e:	2000      	movs	r0, #0
 8001750:	f000 fa22 	bl	8001b98 <ExtLightsTurnSignalLeft>

		/* do nothing */

	}

}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}
 8001758:	200000a2 	.word	0x200000a2
 800175c:	20000440 	.word	0x20000440
 8001760:	200000b8 	.word	0x200000b8
 8001764:	200000a3 	.word	0x200000a3
 8001768:	200000b4 	.word	0x200000b4
 800176c:	200000a4 	.word	0x200000a4
 8001770:	200000bc 	.word	0x200000bc

08001774 <ExtLightsPrevStateTSHL>:

void ExtLightsPrevStateTSHL()
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

	if(ExtLights_TurnSignalLeft_CurrentState != ExtLights_LTS_PrevState)
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <ExtLightsPrevStateTSHL+0x5c>)
 800177a:	781a      	ldrb	r2, [r3, #0]
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <ExtLightsPrevStateTSHL+0x60>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d006      	beq.n	8001792 <ExtLightsPrevStateTSHL+0x1e>
	{

		ExtLights_LTS_PrevState = ExtLights_TurnSignalLeft_CurrentState;
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <ExtLightsPrevStateTSHL+0x5c>)
 8001786:	781a      	ldrb	r2, [r3, #0]
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <ExtLightsPrevStateTSHL+0x60>)
 800178a:	701a      	strb	r2, [r3, #0]
		ExtLights_LTSFlag = 0;
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <ExtLightsPrevStateTSHL+0x64>)
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState != ExtLights_RTS_PrevState)
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <ExtLightsPrevStateTSHL+0x68>)
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <ExtLightsPrevStateTSHL+0x6c>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d006      	beq.n	80017ac <ExtLightsPrevStateTSHL+0x38>
	{

		ExtLights_RTS_PrevState = ExtLights_TurnSignalRight_CurrentState;
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <ExtLightsPrevStateTSHL+0x68>)
 80017a0:	781a      	ldrb	r2, [r3, #0]
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <ExtLightsPrevStateTSHL+0x6c>)
 80017a4:	701a      	strb	r2, [r3, #0]
		ExtLights_RTSFlag = 0;
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <ExtLightsPrevStateTSHL+0x70>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]

		/* do nothing */

	}

	if(ExtLights_HazardLight_CurrentState != ExtLights_HL_PrevState)
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <ExtLightsPrevStateTSHL+0x74>)
 80017ae:	781a      	ldrb	r2, [r3, #0]
 80017b0:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <ExtLightsPrevStateTSHL+0x78>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d006      	beq.n	80017c6 <ExtLightsPrevStateTSHL+0x52>
	{

		ExtLights_HL_PrevState = ExtLights_HazardLight_CurrentState;
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <ExtLightsPrevStateTSHL+0x74>)
 80017ba:	781a      	ldrb	r2, [r3, #0]
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <ExtLightsPrevStateTSHL+0x78>)
 80017be:	701a      	strb	r2, [r3, #0]
		ExtLights_HLFlag = 0;
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <ExtLightsPrevStateTSHL+0x7c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]

		/* do nothing */

	}

}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	200000a2 	.word	0x200000a2
 80017d4:	200000b1 	.word	0x200000b1
 80017d8:	200000b8 	.word	0x200000b8
 80017dc:	200000a3 	.word	0x200000a3
 80017e0:	200000b0 	.word	0x200000b0
 80017e4:	200000b4 	.word	0x200000b4
 80017e8:	200000a4 	.word	0x200000a4
 80017ec:	200000b2 	.word	0x200000b2
 80017f0:	200000bc 	.word	0x200000bc

080017f4 <ExtLightsLightState>:

void ExtLightsLightState()
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0

	if(CenLoc_FollowMeHomeState == STD_HIGH)
 80017f8:	4b4a      	ldr	r3, [pc, #296]	; (8001924 <ExtLightsLightState+0x130>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d114      	bne.n	800182a <ExtLightsLightState+0x36>
	{

		ExtLightsLowBeam(CenLoc_FollowMeHomeState);
 8001800:	4b48      	ldr	r3, [pc, #288]	; (8001924 <ExtLightsLightState+0x130>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f000 f97f 	bl	8001b08 <ExtLightsLowBeam>
		ExtLightsDayTimeRunningLight(CenLoc_FollowMeHomeState);
 800180a:	4b46      	ldr	r3, [pc, #280]	; (8001924 <ExtLightsLightState+0x130>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f000 f99e 	bl	8001b50 <ExtLightsDayTimeRunningLight>
		ExtLightsRearPositionLight(CenLoc_FollowMeHomeState);
 8001814:	4b43      	ldr	r3, [pc, #268]	; (8001924 <ExtLightsLightState+0x130>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f000 f9e1 	bl	8001be0 <ExtLightsRearPositionLight>
		ExtLightsLicensePlateLight(CenLoc_FollowMeHomeState);
 800181e:	4b41      	ldr	r3, [pc, #260]	; (8001924 <ExtLightsLightState+0x130>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f000 fa24 	bl	8001c70 <ExtLightsLicensePlateLight>
 8001828:	e00d      	b.n	8001846 <ExtLightsLightState+0x52>

	}
	else if(CenLoc_FollowMeHomeState == STD_LOW && ExtLights_LightsSwitch_CurrentState == 0)
 800182a:	4b3e      	ldr	r3, [pc, #248]	; (8001924 <ExtLightsLightState+0x130>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d109      	bne.n	8001846 <ExtLightsLightState+0x52>
 8001832:	4b3d      	ldr	r3, [pc, #244]	; (8001928 <ExtLightsLightState+0x134>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d105      	bne.n	8001846 <ExtLightsLightState+0x52>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATEZERO;
 800183a:	4b3b      	ldr	r3, [pc, #236]	; (8001928 <ExtLightsLightState+0x134>)
 800183c:	2264      	movs	r2, #100	; 0x64
 800183e:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim5);
 8001840:	483a      	ldr	r0, [pc, #232]	; (800192c <ExtLightsLightState+0x138>)
 8001842:	f007 ff67 	bl	8009714 <HAL_TIM_Base_Stop_IT>

	}

	if(ExtLights_ReverseLight_CurrentState == STD_HIGH ||
 8001846:	4b3a      	ldr	r3, [pc, #232]	; (8001930 <ExtLightsLightState+0x13c>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d023      	beq.n	8001896 <ExtLightsLightState+0xa2>
				ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 800184e:	4b39      	ldr	r3, [pc, #228]	; (8001934 <ExtLightsLightState+0x140>)
 8001850:	781b      	ldrb	r3, [r3, #0]
	if(ExtLights_ReverseLight_CurrentState == STD_HIGH ||
 8001852:	2b01      	cmp	r3, #1
 8001854:	d01f      	beq.n	8001896 <ExtLightsLightState+0xa2>
				ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 8001856:	4b38      	ldr	r3, [pc, #224]	; (8001938 <ExtLightsLightState+0x144>)
 8001858:	781b      	ldrb	r3, [r3, #0]
				ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 800185a:	2b01      	cmp	r3, #1
 800185c:	d01b      	beq.n	8001896 <ExtLightsLightState+0xa2>
				ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 800185e:	4b32      	ldr	r3, [pc, #200]	; (8001928 <ExtLightsLightState+0x134>)
 8001860:	781b      	ldrb	r3, [r3, #0]
				ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 8001862:	2b00      	cmp	r3, #0
 8001864:	d117      	bne.n	8001896 <ExtLightsLightState+0xa2>
				ExtLights_HighBeam_CurrentState == STD_HIGH ||
 8001866:	4b35      	ldr	r3, [pc, #212]	; (800193c <ExtLightsLightState+0x148>)
 8001868:	781b      	ldrb	r3, [r3, #0]
				ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 800186a:	2b01      	cmp	r3, #1
 800186c:	d013      	beq.n	8001896 <ExtLightsLightState+0xa2>
				ExtLights_FrontFogLight_CurrentState == STD_HIGH ||
 800186e:	4b34      	ldr	r3, [pc, #208]	; (8001940 <ExtLightsLightState+0x14c>)
 8001870:	781b      	ldrb	r3, [r3, #0]
				ExtLights_HighBeam_CurrentState == STD_HIGH ||
 8001872:	2b01      	cmp	r3, #1
 8001874:	d00f      	beq.n	8001896 <ExtLightsLightState+0xa2>
				ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 8001876:	4b33      	ldr	r3, [pc, #204]	; (8001944 <ExtLightsLightState+0x150>)
 8001878:	781b      	ldrb	r3, [r3, #0]
				ExtLights_FrontFogLight_CurrentState == STD_HIGH ||
 800187a:	2b01      	cmp	r3, #1
 800187c:	d00b      	beq.n	8001896 <ExtLightsLightState+0xa2>
				ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 800187e:	4b32      	ldr	r3, [pc, #200]	; (8001948 <ExtLightsLightState+0x154>)
 8001880:	781b      	ldrb	r3, [r3, #0]
				ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 8001882:	2b01      	cmp	r3, #1
 8001884:	d007      	beq.n	8001896 <ExtLightsLightState+0xa2>
				ExtLights_HazardLight_CurrentState == STD_HIGH ||
 8001886:	4b31      	ldr	r3, [pc, #196]	; (800194c <ExtLightsLightState+0x158>)
 8001888:	781b      	ldrb	r3, [r3, #0]
				ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 800188a:	2b01      	cmp	r3, #1
 800188c:	d003      	beq.n	8001896 <ExtLightsLightState+0xa2>
				ExtLights_RearFogLight_CurrentState == STD_HIGH)
 800188e:	4b30      	ldr	r3, [pc, #192]	; (8001950 <ExtLightsLightState+0x15c>)
 8001890:	781b      	ldrb	r3, [r3, #0]
				ExtLights_HazardLight_CurrentState == STD_HIGH ||
 8001892:	2b01      	cmp	r3, #1
 8001894:	d105      	bne.n	80018a2 <ExtLightsLightState+0xae>
	{

		CenLoc_FollowMeHomeState = STD_LOW;
 8001896:	4b23      	ldr	r3, [pc, #140]	; (8001924 <ExtLightsLightState+0x130>)
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim5IRQFlag = 2;
 800189c:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <ExtLightsLightState+0x160>)
 800189e:	2202      	movs	r2, #2
 80018a0:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(CenLoc_BlinkState == STD_HIGH)
 80018a2:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <ExtLightsLightState+0x164>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d10a      	bne.n	80018c0 <ExtLightsLightState+0xcc>
	{

		ExtLightsTurnSignalLeft(CenLoc_BlinkState);
 80018aa:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <ExtLightsLightState+0x164>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 f972 	bl	8001b98 <ExtLightsTurnSignalLeft>
		ExtLightsTurnSignalRight(CenLoc_BlinkState);
 80018b4:	4b28      	ldr	r3, [pc, #160]	; (8001958 <ExtLightsLightState+0x164>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 f97f 	bl	8001bbc <ExtLightsTurnSignalRight>
 80018be:	e014      	b.n	80018ea <ExtLightsLightState+0xf6>

	}
	else if(CenLoc_BlinkState == STD_LOW)
 80018c0:	4b25      	ldr	r3, [pc, #148]	; (8001958 <ExtLightsLightState+0x164>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10a      	bne.n	80018de <ExtLightsLightState+0xea>
	{

		ExtLightsTurnSignalLeft(CenLoc_BlinkState);
 80018c8:	4b23      	ldr	r3, [pc, #140]	; (8001958 <ExtLightsLightState+0x164>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 f963 	bl	8001b98 <ExtLightsTurnSignalLeft>
		ExtLightsTurnSignalRight(CenLoc_BlinkState);
 80018d2:	4b21      	ldr	r3, [pc, #132]	; (8001958 <ExtLightsLightState+0x164>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 f970 	bl	8001bbc <ExtLightsTurnSignalRight>
 80018dc:	e005      	b.n	80018ea <ExtLightsLightState+0xf6>

	}
	else if(CenLoc_BlinkState == 2)
 80018de:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <ExtLightsLightState+0x164>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d101      	bne.n	80018ea <ExtLightsLightState+0xf6>
	{

		ExtLightsTurnSignalHazardLight();
 80018e6:	f7ff fec9 	bl	800167c <ExtLightsTurnSignalHazardLight>

		/* do nothing */

	}

	ExtLightsLightSwitchMode();
 80018ea:	f000 f841 	bl	8001970 <ExtLightsLightSwitchMode>
	ExtLightsReverseLight(ExtLights_ReverseLight_CurrentState);
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <ExtLightsLightState+0x13c>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 f9aa 	bl	8001c4c <ExtLightsReverseLight>
	ExtLightsBrakeLight(ExtLights_BrakeLight_CurrentState);
 80018f8:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <ExtLightsLightState+0x140>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 f993 	bl	8001c28 <ExtLightsBrakeLight>
	ExtLightsHighBeam(ExtLights_HighBeam_CurrentState);
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <ExtLightsLightState+0x148>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f910 	bl	8001b2c <ExtLightsHighBeam>
	ExtLightsRearFogLight(ExtLights_RearFogLight_CurrentState);
 800190c:	4b10      	ldr	r3, [pc, #64]	; (8001950 <ExtLightsLightState+0x15c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f000 f977 	bl	8001c04 <ExtLightsRearFogLight>
	ExtLightsFrontFogLight(ExtLights_FrontFogLight_CurrentState);
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <ExtLightsLightState+0x14c>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f92a 	bl	8001b74 <ExtLightsFrontFogLight>

}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000093 	.word	0x20000093
 8001928:	2000009f 	.word	0x2000009f
 800192c:	2000065c 	.word	0x2000065c
 8001930:	2000009c 	.word	0x2000009c
 8001934:	2000009d 	.word	0x2000009d
 8001938:	2000009e 	.word	0x2000009e
 800193c:	200000a0 	.word	0x200000a0
 8001940:	200000a1 	.word	0x200000a1
 8001944:	200000a2 	.word	0x200000a2
 8001948:	200000a3 	.word	0x200000a3
 800194c:	200000a4 	.word	0x200000a4
 8001950:	200000a5 	.word	0x200000a5
 8001954:	2000009a 	.word	0x2000009a
 8001958:	20000094 	.word	0x20000094

0800195c <ExtLightsMainFunction>:

void ExtLightsMainFunction()
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0

	ExtLightsRxBtcState();
 8001960:	f000 f870 	bl	8001a44 <ExtLightsRxBtcState>
	ExtLightsLightState();
 8001964:	f7ff ff46 	bl	80017f4 <ExtLightsLightState>
	ExtLightsPrevStateTSHL();
 8001968:	f7ff ff04 	bl	8001774 <ExtLightsPrevStateTSHL>

}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <ExtLightsLightSwitchMode>:

void ExtLightsLightSwitchMode()
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0

	switch(ExtLights_LightsSwitch_CurrentState)
 8001974:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <ExtLightsLightSwitchMode+0xcc>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	3b64      	subs	r3, #100	; 0x64
 800197a:	2b03      	cmp	r3, #3
 800197c:	d859      	bhi.n	8001a32 <ExtLightsLightSwitchMode+0xc2>
 800197e:	a201      	add	r2, pc, #4	; (adr r2, 8001984 <ExtLightsLightSwitchMode+0x14>)
 8001980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001984:	08001995 	.word	0x08001995
 8001988:	080019af 	.word	0x080019af
 800198c:	080019ff 	.word	0x080019ff
 8001990:	08001a19 	.word	0x08001a19
	{
		case EXTLIGHTS_LIGHTSWITCH_STATEZERO:

			ExtLightsLowBeam(STD_LOW);
 8001994:	2000      	movs	r0, #0
 8001996:	f000 f8b7 	bl	8001b08 <ExtLightsLowBeam>
			ExtLightsDayTimeRunningLight(STD_LOW);
 800199a:	2000      	movs	r0, #0
 800199c:	f000 f8d8 	bl	8001b50 <ExtLightsDayTimeRunningLight>
			ExtLightsRearPositionLight(STD_LOW);
 80019a0:	2000      	movs	r0, #0
 80019a2:	f000 f91d 	bl	8001be0 <ExtLightsRearPositionLight>
			ExtLightsLicensePlateLight(STD_LOW);
 80019a6:	2000      	movs	r0, #0
 80019a8:	f000 f962 	bl	8001c70 <ExtLightsLicensePlateLight>

			break;
 80019ac:	e044      	b.n	8001a38 <ExtLightsLightSwitchMode+0xc8>

		case EXTLIGHTS_LIGHTSWITCH_STATEONE:

			lightSensorState = ExtLightsLightReadSensorValue();
 80019ae:	f000 f899 	bl	8001ae4 <ExtLightsLightReadSensorValue>
 80019b2:	4603      	mov	r3, r0
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <ExtLightsLightSwitchMode+0xd0>)
 80019b8:	701a      	strb	r2, [r3, #0]

			if(lightSensorState < EXTLIGHTS_LIGHTSENSOR_DAYNIGHTVALUE)
 80019ba:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <ExtLightsLightSwitchMode+0xd0>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b95      	cmp	r3, #149	; 0x95
 80019c0:	d80c      	bhi.n	80019dc <ExtLightsLightSwitchMode+0x6c>
			{

				ExtLightsLowBeam(STD_HIGH);
 80019c2:	2001      	movs	r0, #1
 80019c4:	f000 f8a0 	bl	8001b08 <ExtLightsLowBeam>
				ExtLightsDayTimeRunningLight(STD_HIGH);
 80019c8:	2001      	movs	r0, #1
 80019ca:	f000 f8c1 	bl	8001b50 <ExtLightsDayTimeRunningLight>
				ExtLightsRearPositionLight(STD_HIGH);
 80019ce:	2001      	movs	r0, #1
 80019d0:	f000 f906 	bl	8001be0 <ExtLightsRearPositionLight>
				ExtLightsLicensePlateLight(STD_HIGH);
 80019d4:	2001      	movs	r0, #1
 80019d6:	f000 f94b 	bl	8001c70 <ExtLightsLicensePlateLight>
				ExtLightsRearPositionLight(STD_LOW);
				ExtLightsLicensePlateLight(STD_LOW);

			}

			break;
 80019da:	e02c      	b.n	8001a36 <ExtLightsLightSwitchMode+0xc6>
			else if(lightSensorState > EXTLIGHTS_LIGHTSENSOR_DAYNIGHTVALUE)
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <ExtLightsLightSwitchMode+0xd0>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b96      	cmp	r3, #150	; 0x96
 80019e2:	d928      	bls.n	8001a36 <ExtLightsLightSwitchMode+0xc6>
				ExtLightsLowBeam(STD_LOW);
 80019e4:	2000      	movs	r0, #0
 80019e6:	f000 f88f 	bl	8001b08 <ExtLightsLowBeam>
				ExtLightsDayTimeRunningLight(STD_HIGH);
 80019ea:	2001      	movs	r0, #1
 80019ec:	f000 f8b0 	bl	8001b50 <ExtLightsDayTimeRunningLight>
				ExtLightsRearPositionLight(STD_LOW);
 80019f0:	2000      	movs	r0, #0
 80019f2:	f000 f8f5 	bl	8001be0 <ExtLightsRearPositionLight>
				ExtLightsLicensePlateLight(STD_LOW);
 80019f6:	2000      	movs	r0, #0
 80019f8:	f000 f93a 	bl	8001c70 <ExtLightsLicensePlateLight>
			break;
 80019fc:	e01b      	b.n	8001a36 <ExtLightsLightSwitchMode+0xc6>

		case EXTLIGHTS_LIGHTSWITCH_STATETWO:

			ExtLightsLowBeam(STD_LOW);
 80019fe:	2000      	movs	r0, #0
 8001a00:	f000 f882 	bl	8001b08 <ExtLightsLowBeam>
			ExtLightsDayTimeRunningLight(STD_HIGH);
 8001a04:	2001      	movs	r0, #1
 8001a06:	f000 f8a3 	bl	8001b50 <ExtLightsDayTimeRunningLight>
			ExtLightsRearPositionLight(STD_HIGH);
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	f000 f8e8 	bl	8001be0 <ExtLightsRearPositionLight>
			ExtLightsLicensePlateLight(STD_HIGH);
 8001a10:	2001      	movs	r0, #1
 8001a12:	f000 f92d 	bl	8001c70 <ExtLightsLicensePlateLight>

			break;
 8001a16:	e00f      	b.n	8001a38 <ExtLightsLightSwitchMode+0xc8>

		case EXTLIGHTS_LIGHTSWITCH_STATETHREE:

			ExtLightsLowBeam(STD_HIGH);
 8001a18:	2001      	movs	r0, #1
 8001a1a:	f000 f875 	bl	8001b08 <ExtLightsLowBeam>
			ExtLightsDayTimeRunningLight(STD_HIGH);
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f000 f896 	bl	8001b50 <ExtLightsDayTimeRunningLight>
			ExtLightsRearPositionLight(STD_HIGH);
 8001a24:	2001      	movs	r0, #1
 8001a26:	f000 f8db 	bl	8001be0 <ExtLightsRearPositionLight>
			ExtLightsLicensePlateLight(STD_HIGH);
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	f000 f920 	bl	8001c70 <ExtLightsLicensePlateLight>

			break;
 8001a30:	e002      	b.n	8001a38 <ExtLightsLightSwitchMode+0xc8>

		default:

			break;
 8001a32:	bf00      	nop
 8001a34:	e000      	b.n	8001a38 <ExtLightsLightSwitchMode+0xc8>
			break;
 8001a36:	bf00      	nop

	}

}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	2000009f 	.word	0x2000009f
 8001a40:	200000c0 	.word	0x200000c0

08001a44 <ExtLightsRxBtcState>:
	return E_OK;

}

void ExtLightsRxBtcState()
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0

	ExtLights_ReverseLight_CurrentState 	= Btc_ReverseLight;
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <ExtLightsRxBtcState+0x58>)
 8001a4a:	781a      	ldrb	r2, [r3, #0]
 8001a4c:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <ExtLightsRxBtcState+0x5c>)
 8001a4e:	701a      	strb	r2, [r3, #0]
	ExtLights_LightsSwitch_CurrentState 	= Btc_LightSwitch;
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <ExtLightsRxBtcState+0x60>)
 8001a52:	781a      	ldrb	r2, [r3, #0]
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <ExtLightsRxBtcState+0x64>)
 8001a56:	701a      	strb	r2, [r3, #0]
	ExtLights_HighBeam_CurrentState 		= Btc_HighBeam;
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <ExtLightsRxBtcState+0x68>)
 8001a5a:	781a      	ldrb	r2, [r3, #0]
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <ExtLightsRxBtcState+0x6c>)
 8001a5e:	701a      	strb	r2, [r3, #0]
	ExtLights_FrontFogLight_CurrentState 	= Btc_FrontFogLight;
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <ExtLightsRxBtcState+0x70>)
 8001a62:	781a      	ldrb	r2, [r3, #0]
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <ExtLightsRxBtcState+0x74>)
 8001a66:	701a      	strb	r2, [r3, #0]
	ExtLights_RearFogLight_CurrentState 	= Btc_RearFogLight;
 8001a68:	4b14      	ldr	r3, [pc, #80]	; (8001abc <ExtLightsRxBtcState+0x78>)
 8001a6a:	781a      	ldrb	r2, [r3, #0]
 8001a6c:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <ExtLightsRxBtcState+0x7c>)
 8001a6e:	701a      	strb	r2, [r3, #0]
	ExtLights_BrakeLight_CurrentState 		= Btc_BrakeLight;
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <ExtLightsRxBtcState+0x80>)
 8001a72:	781a      	ldrb	r2, [r3, #0]
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <ExtLightsRxBtcState+0x84>)
 8001a76:	701a      	strb	r2, [r3, #0]
	ExtLights_TurnSignalLeft_CurrentState 	= Btc_TurnSignalLeft;
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <ExtLightsRxBtcState+0x88>)
 8001a7a:	781a      	ldrb	r2, [r3, #0]
 8001a7c:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <ExtLightsRxBtcState+0x8c>)
 8001a7e:	701a      	strb	r2, [r3, #0]
	ExtLights_TurnSignalRight_CurrentState 	= Btc_TurnSignalRight;
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <ExtLightsRxBtcState+0x90>)
 8001a82:	781a      	ldrb	r2, [r3, #0]
 8001a84:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <ExtLightsRxBtcState+0x94>)
 8001a86:	701a      	strb	r2, [r3, #0]
	ExtLights_HazardLight_CurrentState		= Btc_HazardLight;
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <ExtLightsRxBtcState+0x98>)
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <ExtLightsRxBtcState+0x9c>)
 8001a8e:	701a      	strb	r2, [r3, #0]

}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	200000af 	.word	0x200000af
 8001aa0:	2000009c 	.word	0x2000009c
 8001aa4:	200000a6 	.word	0x200000a6
 8001aa8:	2000009f 	.word	0x2000009f
 8001aac:	200000a7 	.word	0x200000a7
 8001ab0:	200000a0 	.word	0x200000a0
 8001ab4:	200000a9 	.word	0x200000a9
 8001ab8:	200000a1 	.word	0x200000a1
 8001abc:	200000ae 	.word	0x200000ae
 8001ac0:	200000a5 	.word	0x200000a5
 8001ac4:	200000ad 	.word	0x200000ad
 8001ac8:	2000009d 	.word	0x2000009d
 8001acc:	200000aa 	.word	0x200000aa
 8001ad0:	200000a2 	.word	0x200000a2
 8001ad4:	200000ab 	.word	0x200000ab
 8001ad8:	200000a3 	.word	0x200000a3
 8001adc:	200000ac 	.word	0x200000ac
 8001ae0:	200000a4 	.word	0x200000a4

08001ae4 <ExtLightsLightReadSensorValue>:

uint32 ExtLightsLightReadSensorValue()
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0

	uint8 sensorValue = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	71fb      	strb	r3, [r7, #7]

	sensorValue = ADC_BUFFER[2];
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <ExtLightsLightReadSensorValue+0x20>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	71fb      	strb	r3, [r7, #7]

	return sensorValue;
 8001af4:	79fb      	ldrb	r3, [r7, #7]

}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	200000dc 	.word	0x200000dc

08001b08 <ExtLightsLowBeam>:

void ExtLightsLowBeam(uint8 PinState)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_LOWBEAM_PORT, EXTLIGHTS_LOWBEAM_PIN, PinState);
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	461a      	mov	r2, r3
 8001b16:	2110      	movs	r1, #16
 8001b18:	4803      	ldr	r0, [pc, #12]	; (8001b28 <ExtLightsLowBeam+0x20>)
 8001b1a:	f004 fbf5 	bl	8006308 <HAL_GPIO_WritePin>

}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40020000 	.word	0x40020000

08001b2c <ExtLightsHighBeam>:

void ExtLightsHighBeam(uint8 PinState)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	4803      	ldr	r0, [pc, #12]	; (8001b4c <ExtLightsHighBeam+0x20>)
 8001b3e:	f004 fbe3 	bl	8006308 <HAL_GPIO_WritePin>

}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40020400 	.word	0x40020400

08001b50 <ExtLightsDayTimeRunningLight>:

void ExtLightsDayTimeRunningLight(uint8 PinState)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_DAYTIMERUNNINGLIGHT_PORT, EXTLIGHTS_DAYTIMERUNNINGLIGHT_PIN, PinState);
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	2102      	movs	r1, #2
 8001b60:	4803      	ldr	r0, [pc, #12]	; (8001b70 <ExtLightsDayTimeRunningLight+0x20>)
 8001b62:	f004 fbd1 	bl	8006308 <HAL_GPIO_WritePin>

}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40020000 	.word	0x40020000

08001b74 <ExtLightsFrontFogLight>:

void ExtLightsFrontFogLight(uint8 PinState)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_FRONTFOGLIGHT_PORT, EXTLIGHTS_FRONTFOGLIGHT_PIN, PinState);
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	461a      	mov	r2, r3
 8001b82:	2108      	movs	r1, #8
 8001b84:	4803      	ldr	r0, [pc, #12]	; (8001b94 <ExtLightsFrontFogLight+0x20>)
 8001b86:	f004 fbbf 	bl	8006308 <HAL_GPIO_WritePin>

}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40020800 	.word	0x40020800

08001b98 <ExtLightsTurnSignalLeft>:

void ExtLightsTurnSignalLeft(uint8 PinState)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALLEFT_PORT, EXTLIGHTS_TURNSIGNALLEFT_PIN, PinState);
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <ExtLightsTurnSignalLeft+0x20>)
 8001baa:	f004 fbad 	bl	8006308 <HAL_GPIO_WritePin>

}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40020800 	.word	0x40020800

08001bbc <ExtLightsTurnSignalRight>:

void ExtLightsTurnSignalRight(uint8 PinState)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALRIGHT_PORT, EXTLIGHTS_TURNSIGNALRIGHT_PIN, PinState);
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	2102      	movs	r1, #2
 8001bcc:	4803      	ldr	r0, [pc, #12]	; (8001bdc <ExtLightsTurnSignalRight+0x20>)
 8001bce:	f004 fb9b 	bl	8006308 <HAL_GPIO_WritePin>

}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40020800 	.word	0x40020800

08001be0 <ExtLightsRearPositionLight>:

void ExtLightsRearPositionLight(uint8 PinState)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REARPOSITIONLIGHT_PORT, EXTLIGHTS_REARPOSITIONLIGHT_PIN, PinState);
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	461a      	mov	r2, r3
 8001bee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bf2:	4803      	ldr	r0, [pc, #12]	; (8001c00 <ExtLightsRearPositionLight+0x20>)
 8001bf4:	f004 fb88 	bl	8006308 <HAL_GPIO_WritePin>

}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40020800 	.word	0x40020800

08001c04 <ExtLightsRearFogLight>:

void ExtLightsRearFogLight(uint8 PinState)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REARFOGLIGHT_PORT, EXTLIGHTS_REARFOGLIGHT_PIN, PinState);
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	461a      	mov	r2, r3
 8001c12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c16:	4803      	ldr	r0, [pc, #12]	; (8001c24 <ExtLightsRearFogLight+0x20>)
 8001c18:	f004 fb76 	bl	8006308 <HAL_GPIO_WritePin>

}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40020800 	.word	0x40020800

08001c28 <ExtLightsBrakeLight>:

void ExtLightsBrakeLight(uint8 PinState)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_BRAKELIGHT_PORT, EXTLIGHTS_BRAKELIGHT_PIN, PinState);
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	461a      	mov	r2, r3
 8001c36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c3a:	4803      	ldr	r0, [pc, #12]	; (8001c48 <ExtLightsBrakeLight+0x20>)
 8001c3c:	f004 fb64 	bl	8006308 <HAL_GPIO_WritePin>

}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40020800 	.word	0x40020800

08001c4c <ExtLightsReverseLight>:

void ExtLightsReverseLight(uint8 PinState)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REVERSELIGHT_PORT, EXTLIGHTS_REVERSELIGHT_PIN, PinState);
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c5e:	4803      	ldr	r0, [pc, #12]	; (8001c6c <ExtLightsReverseLight+0x20>)
 8001c60:	f004 fb52 	bl	8006308 <HAL_GPIO_WritePin>

}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40020000 	.word	0x40020000

08001c70 <ExtLightsLicensePlateLight>:

void ExtLightsLicensePlateLight(uint8 PinState)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_LICENSEPLATELIGHT_PORT, EXTLIGHTS_LICENSEPLATELIGHT_PIN, PinState);
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	2101      	movs	r1, #1
 8001c80:	4803      	ldr	r0, [pc, #12]	; (8001c90 <ExtLightsLicensePlateLight+0x20>)
 8001c82:	f004 fb41 	bl	8006308 <HAL_GPIO_WritePin>

}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40020000 	.word	0x40020000

08001c94 <HVACTemSenReturnTemperatureValue>:
//	tempStatus = HVACTemSenAdcReceivedValues();

}

float HVACTemSenReturnTemperatureValue(float TemSenVal)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	ed87 0a01 	vstr	s0, [r7, #4]

	/* redo */

	return 1;
 8001c9e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ca2:	ee07 3a90 	vmov	s15, r3

}
 8001ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HVACTemSenAdcReceivedValues>:

float HVACTemSenAdcReceivedValues()
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0

	uint32 RxTem = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	607b      	str	r3, [r7, #4]

	HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, 6);
 8001cbe:	2206      	movs	r2, #6
 8001cc0:	490f      	ldr	r1, [pc, #60]	; (8001d00 <HVACTemSenAdcReceivedValues+0x4c>)
 8001cc2:	4810      	ldr	r0, [pc, #64]	; (8001d04 <HVACTemSenAdcReceivedValues+0x50>)
 8001cc4:	f002 fb74 	bl	80043b0 <HAL_ADC_Start_DMA>
	RxTem = HVACTemSenReturnTemperatureValue(ADC_BUFFER[0]);
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <HVACTemSenAdcReceivedValues+0x4c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	ee07 3a90 	vmov	s15, r3
 8001cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd8:	f7ff ffdc 	bl	8001c94 <HVACTemSenReturnTemperatureValue>
 8001cdc:	eef0 7a40 	vmov.f32	s15, s0
 8001ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ce4:	ee17 3a90 	vmov	r3, s15
 8001ce8:	607b      	str	r3, [r7, #4]

	return RxTem;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	ee07 3a90 	vmov	s15, r3
 8001cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15

}
 8001cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200000dc 	.word	0x200000dc
 8001d04:	20000110 	.word	0x20000110

08001d08 <HVACMainFunction>:


}

void HVACMainFunction()
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0

	//HVACI2cTxToLcd();
	HVAC_TemSenRxTemperature = HVACTemSenAdcReceivedValues();
 8001d0c:	f7ff ffd2 	bl	8001cb4 <HVACTemSenAdcReceivedValues>
 8001d10:	eef0 7a40 	vmov.f32	s15, s0
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HVACMainFunction+0x1c>)
 8001d16:	edc3 7a00 	vstr	s15, [r3]
	HVACState();
 8001d1a:	f000 f805 	bl	8001d28 <HVACState>

}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200000d8 	.word	0x200000d8

08001d28 <HVACState>:

void HVACState()
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0

	HVAC_BackwindowDefrost_CurrentState 	= Btc_BackwindowDefrost;
 8001d2c:	4b72      	ldr	r3, [pc, #456]	; (8001ef8 <HVACState+0x1d0>)
 8001d2e:	781a      	ldrb	r2, [r3, #0]
 8001d30:	4b72      	ldr	r3, [pc, #456]	; (8001efc <HVACState+0x1d4>)
 8001d32:	701a      	strb	r2, [r3, #0]
	HVAC_AC_CurrentState 					= Btc_AC;
 8001d34:	4b72      	ldr	r3, [pc, #456]	; (8001f00 <HVACState+0x1d8>)
 8001d36:	781a      	ldrb	r2, [r3, #0]
 8001d38:	4b72      	ldr	r3, [pc, #456]	; (8001f04 <HVACState+0x1dc>)
 8001d3a:	701a      	strb	r2, [r3, #0]
	HVAC_FanValue 							= Btc_FanValue;
 8001d3c:	4b72      	ldr	r3, [pc, #456]	; (8001f08 <HVACState+0x1e0>)
 8001d3e:	781a      	ldrb	r2, [r3, #0]
 8001d40:	4b72      	ldr	r3, [pc, #456]	; (8001f0c <HVACState+0x1e4>)
 8001d42:	701a      	strb	r2, [r3, #0]
	HVAC_TemperatureValue 					= Btc_TemperatureValue;
 8001d44:	4b72      	ldr	r3, [pc, #456]	; (8001f10 <HVACState+0x1e8>)
 8001d46:	781a      	ldrb	r2, [r3, #0]
 8001d48:	4b72      	ldr	r3, [pc, #456]	; (8001f14 <HVACState+0x1ec>)
 8001d4a:	701a      	strb	r2, [r3, #0]

	if(Btc_NormalMode == STD_HIGH)
 8001d4c:	4b72      	ldr	r3, [pc, #456]	; (8001f18 <HVACState+0x1f0>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d106      	bne.n	8001d62 <HVACState+0x3a>
	{

		Btc_RecirculationMode = STD_LOW;
 8001d54:	4b71      	ldr	r3, [pc, #452]	; (8001f1c <HVACState+0x1f4>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
		HVAC_RecirculationMode_CurrentState = STD_LOW;
 8001d5a:	4b71      	ldr	r3, [pc, #452]	; (8001f20 <HVACState+0x1f8>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
 8001d60:	e007      	b.n	8001d72 <HVACState+0x4a>

	}
	else if(Btc_NormalMode == STD_LOW)
 8001d62:	4b6d      	ldr	r3, [pc, #436]	; (8001f18 <HVACState+0x1f0>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d103      	bne.n	8001d72 <HVACState+0x4a>
	{

		HVAC_RecirculationMode_CurrentState = Btc_RecirculationMode;
 8001d6a:	4b6c      	ldr	r3, [pc, #432]	; (8001f1c <HVACState+0x1f4>)
 8001d6c:	781a      	ldrb	r2, [r3, #0]
 8001d6e:	4b6c      	ldr	r3, [pc, #432]	; (8001f20 <HVACState+0x1f8>)
 8001d70:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_FanValue == 0 && Btc_TemperatureValue == 0 && HVAC_FanValue == 0 && HVAC_TemperatureValue == 0)
 8001d72:	4b65      	ldr	r3, [pc, #404]	; (8001f08 <HVACState+0x1e0>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d119      	bne.n	8001dae <HVACState+0x86>
 8001d7a:	4b65      	ldr	r3, [pc, #404]	; (8001f10 <HVACState+0x1e8>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d115      	bne.n	8001dae <HVACState+0x86>
 8001d82:	4b62      	ldr	r3, [pc, #392]	; (8001f0c <HVACState+0x1e4>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d111      	bne.n	8001dae <HVACState+0x86>
 8001d8a:	4b62      	ldr	r3, [pc, #392]	; (8001f14 <HVACState+0x1ec>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10d      	bne.n	8001dae <HVACState+0x86>
	{

		Btc_FanValue 							= 1;
 8001d92:	4b5d      	ldr	r3, [pc, #372]	; (8001f08 <HVACState+0x1e0>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	701a      	strb	r2, [r3, #0]
		Btc_TemperatureValue 					= 22;
 8001d98:	4b5d      	ldr	r3, [pc, #372]	; (8001f10 <HVACState+0x1e8>)
 8001d9a:	2216      	movs	r2, #22
 8001d9c:	701a      	strb	r2, [r3, #0]
		HVAC_FanValue 							= Btc_FanValue;
 8001d9e:	4b5a      	ldr	r3, [pc, #360]	; (8001f08 <HVACState+0x1e0>)
 8001da0:	781a      	ldrb	r2, [r3, #0]
 8001da2:	4b5a      	ldr	r3, [pc, #360]	; (8001f0c <HVACState+0x1e4>)
 8001da4:	701a      	strb	r2, [r3, #0]
		HVAC_TemperatureValue 					= Btc_TemperatureValue;
 8001da6:	4b5a      	ldr	r3, [pc, #360]	; (8001f10 <HVACState+0x1e8>)
 8001da8:	781a      	ldrb	r2, [r3, #0]
 8001daa:	4b5a      	ldr	r3, [pc, #360]	; (8001f14 <HVACState+0x1ec>)
 8001dac:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(HVAC_FanValue == STD_LOW)
 8001dae:	4b57      	ldr	r3, [pc, #348]	; (8001f0c <HVACState+0x1e4>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d103      	bne.n	8001dbe <HVACState+0x96>
	{

		HVAC_CurrentState = STD_LOW;
 8001db6:	4b5b      	ldr	r3, [pc, #364]	; (8001f24 <HVACState+0x1fc>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	e006      	b.n	8001dcc <HVACState+0xa4>

	}
	else if(HVAC_FanValue != STD_LOW)
 8001dbe:	4b53      	ldr	r3, [pc, #332]	; (8001f0c <HVACState+0x1e4>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d002      	beq.n	8001dcc <HVACState+0xa4>
	{

		HVAC_CurrentState = STD_HIGH;
 8001dc6:	4b57      	ldr	r3, [pc, #348]	; (8001f24 <HVACState+0x1fc>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_LegVents == STD_HIGH)
 8001dcc:	4b56      	ldr	r3, [pc, #344]	; (8001f28 <HVACState+0x200>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d107      	bne.n	8001de4 <HVACState+0xbc>
	{

		Btc_AutomaticMode 			= STD_LOW;
 8001dd4:	4b55      	ldr	r3, [pc, #340]	; (8001f2c <HVACState+0x204>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 	= Btc_LegVents;
 8001dda:	4b53      	ldr	r3, [pc, #332]	; (8001f28 <HVACState+0x200>)
 8001ddc:	781a      	ldrb	r2, [r3, #0]
 8001dde:	4b54      	ldr	r3, [pc, #336]	; (8001f30 <HVACState+0x208>)
 8001de0:	701a      	strb	r2, [r3, #0]
 8001de2:	e007      	b.n	8001df4 <HVACState+0xcc>

	}
	else if(Btc_LegVents == STD_LOW)
 8001de4:	4b50      	ldr	r3, [pc, #320]	; (8001f28 <HVACState+0x200>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d103      	bne.n	8001df4 <HVACState+0xcc>
	{

		HVAC_LegVents_CurrentState 	= Btc_LegVents;
 8001dec:	4b4e      	ldr	r3, [pc, #312]	; (8001f28 <HVACState+0x200>)
 8001dee:	781a      	ldrb	r2, [r3, #0]
 8001df0:	4b4f      	ldr	r3, [pc, #316]	; (8001f30 <HVACState+0x208>)
 8001df2:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_MidVents == STD_HIGH)
 8001df4:	4b4f      	ldr	r3, [pc, #316]	; (8001f34 <HVACState+0x20c>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d107      	bne.n	8001e0c <HVACState+0xe4>
	{

		Btc_AutomaticMode 			= STD_LOW;
 8001dfc:	4b4b      	ldr	r3, [pc, #300]	; (8001f2c <HVACState+0x204>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 	= Btc_MidVents;
 8001e02:	4b4c      	ldr	r3, [pc, #304]	; (8001f34 <HVACState+0x20c>)
 8001e04:	781a      	ldrb	r2, [r3, #0]
 8001e06:	4b4c      	ldr	r3, [pc, #304]	; (8001f38 <HVACState+0x210>)
 8001e08:	701a      	strb	r2, [r3, #0]
 8001e0a:	e007      	b.n	8001e1c <HVACState+0xf4>

	}
	else if(Btc_MidVents == STD_LOW)
 8001e0c:	4b49      	ldr	r3, [pc, #292]	; (8001f34 <HVACState+0x20c>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d103      	bne.n	8001e1c <HVACState+0xf4>
	{

		HVAC_MidVents_CurrentState 	= Btc_MidVents;
 8001e14:	4b47      	ldr	r3, [pc, #284]	; (8001f34 <HVACState+0x20c>)
 8001e16:	781a      	ldrb	r2, [r3, #0]
 8001e18:	4b47      	ldr	r3, [pc, #284]	; (8001f38 <HVACState+0x210>)
 8001e1a:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_WindshieldVents == STD_HIGH)
 8001e1c:	4b47      	ldr	r3, [pc, #284]	; (8001f3c <HVACState+0x214>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d107      	bne.n	8001e34 <HVACState+0x10c>
	{

		Btc_AutomaticMode 					= STD_LOW;
 8001e24:	4b41      	ldr	r3, [pc, #260]	; (8001f2c <HVACState+0x204>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 	= Btc_WindshieldVents;
 8001e2a:	4b44      	ldr	r3, [pc, #272]	; (8001f3c <HVACState+0x214>)
 8001e2c:	781a      	ldrb	r2, [r3, #0]
 8001e2e:	4b44      	ldr	r3, [pc, #272]	; (8001f40 <HVACState+0x218>)
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	e007      	b.n	8001e44 <HVACState+0x11c>

	}
	else if(Btc_WindshieldVents == STD_LOW)
 8001e34:	4b41      	ldr	r3, [pc, #260]	; (8001f3c <HVACState+0x214>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d103      	bne.n	8001e44 <HVACState+0x11c>
	{

		HVAC_WindshieldVents_CurrentState 	= Btc_WindshieldVents;
 8001e3c:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <HVACState+0x214>)
 8001e3e:	781a      	ldrb	r2, [r3, #0]
 8001e40:	4b3f      	ldr	r3, [pc, #252]	; (8001f40 <HVACState+0x218>)
 8001e42:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_WindshieldDefrost == STD_HIGH)
 8001e44:	4b3f      	ldr	r3, [pc, #252]	; (8001f44 <HVACState+0x21c>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d110      	bne.n	8001e6e <HVACState+0x146>
	{

		Btc_AutomaticMode				 		= STD_LOW;
 8001e4c:	4b37      	ldr	r3, [pc, #220]	; (8001f2c <HVACState+0x204>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
 8001e52:	4b3c      	ldr	r3, [pc, #240]	; (8001f44 <HVACState+0x21c>)
 8001e54:	781a      	ldrb	r2, [r3, #0]
 8001e56:	4b3c      	ldr	r3, [pc, #240]	; (8001f48 <HVACState+0x220>)
 8001e58:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= STD_LOW;
 8001e5a:	4b35      	ldr	r3, [pc, #212]	; (8001f30 <HVACState+0x208>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= STD_LOW;
 8001e60:	4b35      	ldr	r3, [pc, #212]	; (8001f38 <HVACState+0x210>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= STD_LOW;
 8001e66:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <HVACState+0x218>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
 8001e6c:	e013      	b.n	8001e96 <HVACState+0x16e>

	}
	else if(Btc_WindshieldDefrost == STD_LOW)
 8001e6e:	4b35      	ldr	r3, [pc, #212]	; (8001f44 <HVACState+0x21c>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10f      	bne.n	8001e96 <HVACState+0x16e>
	{

		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
 8001e76:	4b33      	ldr	r3, [pc, #204]	; (8001f44 <HVACState+0x21c>)
 8001e78:	781a      	ldrb	r2, [r3, #0]
 8001e7a:	4b33      	ldr	r3, [pc, #204]	; (8001f48 <HVACState+0x220>)
 8001e7c:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= Btc_LegVents;
 8001e7e:	4b2a      	ldr	r3, [pc, #168]	; (8001f28 <HVACState+0x200>)
 8001e80:	781a      	ldrb	r2, [r3, #0]
 8001e82:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <HVACState+0x208>)
 8001e84:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= Btc_MidVents;
 8001e86:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <HVACState+0x20c>)
 8001e88:	781a      	ldrb	r2, [r3, #0]
 8001e8a:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <HVACState+0x210>)
 8001e8c:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= Btc_WindshieldVents;
 8001e8e:	4b2b      	ldr	r3, [pc, #172]	; (8001f3c <HVACState+0x214>)
 8001e90:	781a      	ldrb	r2, [r3, #0]
 8001e92:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <HVACState+0x218>)
 8001e94:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_AutomaticMode == STD_HIGH)
 8001e96:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <HVACState+0x204>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d10f      	bne.n	8001ebe <HVACState+0x196>
	{

		HVAC_AutomaticMode_CurrentState 		= STD_HIGH;
 8001e9e:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <HVACState+0x224>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= STD_LOW;
 8001ea4:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <HVACState+0x220>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= STD_LOW;
 8001eaa:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <HVACState+0x218>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= STD_LOW;
 8001eb0:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <HVACState+0x210>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= STD_LOW;
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <HVACState+0x208>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8001ebc:	e016      	b.n	8001eec <HVACState+0x1c4>
	else if(Btc_NormalMode == STD_HIGH)
 8001ebe:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <HVACState+0x1f0>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d112      	bne.n	8001eec <HVACState+0x1c4>
		HVAC_AutomaticMode_CurrentState 		= STD_LOW;
 8001ec6:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <HVACState+0x224>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <HVACState+0x21c>)
 8001ece:	781a      	ldrb	r2, [r3, #0]
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <HVACState+0x220>)
 8001ed2:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= Btc_WindshieldVents;
 8001ed4:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <HVACState+0x214>)
 8001ed6:	781a      	ldrb	r2, [r3, #0]
 8001ed8:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <HVACState+0x218>)
 8001eda:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= Btc_MidVents;
 8001edc:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <HVACState+0x20c>)
 8001ede:	781a      	ldrb	r2, [r3, #0]
 8001ee0:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HVACState+0x210>)
 8001ee2:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= Btc_LegVents;
 8001ee4:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <HVACState+0x200>)
 8001ee6:	781a      	ldrb	r2, [r3, #0]
 8001ee8:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HVACState+0x208>)
 8001eea:	701a      	strb	r2, [r3, #0]
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	200000d2 	.word	0x200000d2
 8001efc:	200000cb 	.word	0x200000cb
 8001f00:	200000d3 	.word	0x200000d3
 8001f04:	200000c8 	.word	0x200000c8
 8001f08:	200000cd 	.word	0x200000cd
 8001f0c:	200000c3 	.word	0x200000c3
 8001f10:	200000cc 	.word	0x200000cc
 8001f14:	200000c2 	.word	0x200000c2
 8001f18:	200000d6 	.word	0x200000d6
 8001f1c:	200000d5 	.word	0x200000d5
 8001f20:	200000ca 	.word	0x200000ca
 8001f24:	200000c1 	.word	0x200000c1
 8001f28:	200000ce 	.word	0x200000ce
 8001f2c:	200000d4 	.word	0x200000d4
 8001f30:	200000c4 	.word	0x200000c4
 8001f34:	200000cf 	.word	0x200000cf
 8001f38:	200000c5 	.word	0x200000c5
 8001f3c:	200000d0 	.word	0x200000d0
 8001f40:	200000c6 	.word	0x200000c6
 8001f44:	200000d1 	.word	0x200000d1
 8001f48:	200000c7 	.word	0x200000c7
 8001f4c:	200000c9 	.word	0x200000c9

08001f50 <IntLightsRxBtcState>:
void IntLightsMainFunction();
void IntLightsToggleIntLights(uint8 PinState);
void IntLightsRxBtcState();

void IntLightsRxBtcState()
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0

	uint8 lightsStateFromBtcCommand = BtcReceivedDataOnBluetooth;
 8001f56:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <IntLightsRxBtcState+0x98>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	71fb      	strb	r3, [r7, #7]

	switch(lightsStateFromBtcCommand)
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	2b13      	cmp	r3, #19
 8001f62:	d83b      	bhi.n	8001fdc <IntLightsRxBtcState+0x8c>
 8001f64:	a201      	add	r2, pc, #4	; (adr r2, 8001f6c <IntLightsRxBtcState+0x1c>)
 8001f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6a:	bf00      	nop
 8001f6c:	08001fbd 	.word	0x08001fbd
 8001f70:	08001fc5 	.word	0x08001fc5
 8001f74:	08001fdd 	.word	0x08001fdd
 8001f78:	08001fdd 	.word	0x08001fdd
 8001f7c:	08001fdd 	.word	0x08001fdd
 8001f80:	08001fdd 	.word	0x08001fdd
 8001f84:	08001fdd 	.word	0x08001fdd
 8001f88:	08001fdd 	.word	0x08001fdd
 8001f8c:	08001fdd 	.word	0x08001fdd
 8001f90:	08001fdd 	.word	0x08001fdd
 8001f94:	08001fdd 	.word	0x08001fdd
 8001f98:	08001fdd 	.word	0x08001fdd
 8001f9c:	08001fdd 	.word	0x08001fdd
 8001fa0:	08001fdd 	.word	0x08001fdd
 8001fa4:	08001fdd 	.word	0x08001fdd
 8001fa8:	08001fdd 	.word	0x08001fdd
 8001fac:	08001fdd 	.word	0x08001fdd
 8001fb0:	08001fdd 	.word	0x08001fdd
 8001fb4:	08001fcd 	.word	0x08001fcd
 8001fb8:	08001fd5 	.word	0x08001fd5
	{
		case LIGHTSON_CENLOCON:

			IntLights_CurrentState = STD_HIGH;
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <IntLightsRxBtcState+0x9c>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	701a      	strb	r2, [r3, #0]

			break;
 8001fc2:	e00b      	b.n	8001fdc <IntLightsRxBtcState+0x8c>

		case LIGHTSOFF_CENLOCOFF:

			IntLights_CurrentState = STD_LOW;
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <IntLightsRxBtcState+0x9c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]

			break;
 8001fca:	e007      	b.n	8001fdc <IntLightsRxBtcState+0x8c>

		case LIGHTSON_INTLIGHTSON:

			IntLights_CurrentState = STD_HIGH;
 8001fcc:	4b07      	ldr	r3, [pc, #28]	; (8001fec <IntLightsRxBtcState+0x9c>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	701a      	strb	r2, [r3, #0]

			break;
 8001fd2:	e003      	b.n	8001fdc <IntLightsRxBtcState+0x8c>

		case LIGHTSOFF_INTLIGHTSOFF:

			IntLights_CurrentState = STD_LOW;
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <IntLightsRxBtcState+0x9c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]

			break;
 8001fda:	bf00      	nop

	}

}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	20000090 	.word	0x20000090
 8001fec:	200000f4 	.word	0x200000f4

08001ff0 <IntLightsMainFunction>:

void IntLightsMainFunction()
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0

	IntLightsRxBtcState();
 8001ff4:	f7ff ffac 	bl	8001f50 <IntLightsRxBtcState>
	IntLightsToggleIntLights(IntLights_CurrentState);
 8001ff8:	4b03      	ldr	r3, [pc, #12]	; (8002008 <IntLightsMainFunction+0x18>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 f805 	bl	800200c <IntLightsToggleIntLights>

}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200000f4 	.word	0x200000f4

0800200c <IntLightsToggleIntLights>:
	return E_OK;

}

void IntLightsToggleIntLights(uint8 PinState)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(INTERIOR_LIGHT_PORT, INTERIOR_LIGHT_PIN, PinState);
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	461a      	mov	r2, r3
 800201a:	2104      	movs	r1, #4
 800201c:	4803      	ldr	r0, [pc, #12]	; (800202c <IntLightsToggleIntLights+0x20>)
 800201e:	f004 f973 	bl	8006308 <HAL_GPIO_WritePin>

}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40020800 	.word	0x40020800

08002030 <PdcRearGenerateDelay>:
void PdcRearBuzzerControl();
void PdcFrontStatus();
void PdcRearStatus();

void PdcRearGenerateDelay()
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

	Pdc_RearGenerateDelayFlag = STD_LOW;
 8002034:	4b14      	ldr	r3, [pc, #80]	; (8002088 <PdcRearGenerateDelay+0x58>)
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
	Pdc_SecondRearGenerateDelayFlag = STD_LOW;
 800203a:	4b14      	ldr	r3, [pc, #80]	; (800208c <PdcRearGenerateDelay+0x5c>)
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]

	if(Pdc_RearGenerateDelayFlag == STD_HIGH)
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <PdcRearGenerateDelay+0x58>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d103      	bne.n	8002050 <PdcRearGenerateDelay+0x20>
	{

		Pdc_RearDelayStatus = STD_HIGH;
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <PdcRearGenerateDelay+0x60>)
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
 800204e:	e006      	b.n	800205e <PdcRearGenerateDelay+0x2e>

	}
	else if(Pdc_RearGenerateDelayFlag == STD_LOW)
 8002050:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <PdcRearGenerateDelay+0x58>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d102      	bne.n	800205e <PdcRearGenerateDelay+0x2e>
	{

		Pdc_RearDelayStatus = STD_LOW;
 8002058:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <PdcRearGenerateDelay+0x60>)
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Pdc_SecondRearGenerateDelayFlag == STD_HIGH)
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <PdcRearGenerateDelay+0x5c>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d103      	bne.n	800206e <PdcRearGenerateDelay+0x3e>
	{

		Pdc_SecondRearDelayStatus = STD_HIGH;
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <PdcRearGenerateDelay+0x64>)
 8002068:	2201      	movs	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 800206c:	e006      	b.n	800207c <PdcRearGenerateDelay+0x4c>
	else if(Pdc_SecondRearGenerateDelayFlag == STD_LOW)
 800206e:	4b07      	ldr	r3, [pc, #28]	; (800208c <PdcRearGenerateDelay+0x5c>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d102      	bne.n	800207c <PdcRearGenerateDelay+0x4c>
		Pdc_SecondRearDelayStatus = STD_LOW;
 8002076:	4b07      	ldr	r3, [pc, #28]	; (8002094 <PdcRearGenerateDelay+0x64>)
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	200000fe 	.word	0x200000fe
 800208c:	20000102 	.word	0x20000102
 8002090:	20000101 	.word	0x20000101
 8002094:	20000105 	.word	0x20000105

08002098 <PdcFrontGenerateDelay>:

void PdcFrontGenerateDelay()
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0

	Pdc_FrontGenerateDelayFlag 			= STD_LOW;
 800209c:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <PdcFrontGenerateDelay+0x58>)
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
	Pdc_SecondFrontGenerateDelayFlag 	= STD_LOW;
 80020a2:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <PdcFrontGenerateDelay+0x5c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]

	if(Pdc_FrontGenerateDelayFlag == STD_HIGH)
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <PdcFrontGenerateDelay+0x58>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d103      	bne.n	80020b8 <PdcFrontGenerateDelay+0x20>
	{

		Pdc_FrontDelayStatus = STD_HIGH;
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <PdcFrontGenerateDelay+0x60>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	701a      	strb	r2, [r3, #0]
 80020b6:	e006      	b.n	80020c6 <PdcFrontGenerateDelay+0x2e>

	}
	else if(Pdc_FrontGenerateDelayFlag == STD_LOW)
 80020b8:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <PdcFrontGenerateDelay+0x58>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d102      	bne.n	80020c6 <PdcFrontGenerateDelay+0x2e>
	{

		Pdc_FrontDelayStatus = STD_LOW;
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <PdcFrontGenerateDelay+0x60>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Pdc_SecondFrontGenerateDelayFlag == STD_HIGH)
 80020c6:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <PdcFrontGenerateDelay+0x5c>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d103      	bne.n	80020d6 <PdcFrontGenerateDelay+0x3e>
	{

		Pdc_SecondFrontDelayStatus = STD_HIGH;
 80020ce:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <PdcFrontGenerateDelay+0x64>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 80020d4:	e006      	b.n	80020e4 <PdcFrontGenerateDelay+0x4c>
	else if(Pdc_SecondFrontGenerateDelayFlag == STD_LOW)
 80020d6:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <PdcFrontGenerateDelay+0x5c>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d102      	bne.n	80020e4 <PdcFrontGenerateDelay+0x4c>
		Pdc_SecondFrontDelayStatus = STD_LOW;
 80020de:	4b07      	ldr	r3, [pc, #28]	; (80020fc <PdcFrontGenerateDelay+0x64>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	200000ff 	.word	0x200000ff
 80020f4:	20000103 	.word	0x20000103
 80020f8:	20000100 	.word	0x20000100
 80020fc:	20000104 	.word	0x20000104

08002100 <PdcFrontStatus>:

void PdcFrontStatus()
{
 8002100:	b590      	push	{r4, r7, lr}
 8002102:	b085      	sub	sp, #20
 8002104:	af02      	add	r7, sp, #8

	TickType_t expiry_time 	= 0;
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
	uint8 echoValue 		= 0;
 800210a:	2300      	movs	r3, #0
 800210c:	70fb      	strb	r3, [r7, #3]

	osTimerStart(PdcFrontGlobalTimerHandle, 10000);
 800210e:	4b3f      	ldr	r3, [pc, #252]	; (800220c <PdcFrontStatus+0x10c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f242 7110 	movw	r1, #10000	; 0x2710
 8002116:	4618      	mov	r0, r3
 8002118:	f009 fcc2 	bl	800baa0 <osTimerStart>
	xTimerStart(PdcFrontGlobalTimerHandle, 0);
 800211c:	4b3b      	ldr	r3, [pc, #236]	; (800220c <PdcFrontStatus+0x10c>)
 800211e:	681c      	ldr	r4, [r3, #0]
 8002120:	f00b fb76 	bl	800d810 <xTaskGetTickCount>
 8002124:	4602      	mov	r2, r0
 8002126:	2300      	movs	r3, #0
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	2300      	movs	r3, #0
 800212c:	2101      	movs	r1, #1
 800212e:	4620      	mov	r0, r4
 8002130:	f00c f956 	bl	800e3e0 <xTimerGenericCommand>
	PdcToggleFrontTriggerPin(STD_LOW);
 8002134:	2000      	movs	r0, #0
 8002136:	f000 f911 	bl	800235c <PdcToggleFrontTriggerPin>
	PdcToggleFrontTriggerPin(STD_HIGH);
 800213a:	2001      	movs	r0, #1
 800213c:	f000 f90e 	bl	800235c <PdcToggleFrontTriggerPin>
	osTimerStart(PdcFrontDelayTimerHandle, PDC_DELAY_VALUE_TEN);
 8002140:	4b33      	ldr	r3, [pc, #204]	; (8002210 <PdcFrontStatus+0x110>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	210a      	movs	r1, #10
 8002146:	4618      	mov	r0, r3
 8002148:	f009 fcaa 	bl	800baa0 <osTimerStart>
	PdcFrontGenerateDelay();
 800214c:	f7ff ffa4 	bl	8002098 <PdcFrontGenerateDelay>

	if(Pdc_FrontDelayStatus == STD_HIGH)
 8002150:	4b30      	ldr	r3, [pc, #192]	; (8002214 <PdcFrontStatus+0x114>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d107      	bne.n	8002168 <PdcFrontStatus+0x68>
	{

		PdcToggleFrontTriggerPin(STD_LOW);
 8002158:	2000      	movs	r0, #0
 800215a:	f000 f8ff 	bl	800235c <PdcToggleFrontTriggerPin>
		osTimerStop(PdcFrontDelayTimerHandle);
 800215e:	4b2c      	ldr	r3, [pc, #176]	; (8002210 <PdcFrontStatus+0x110>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f009 fcca 	bl	800bafc <osTimerStop>

		/* do nothing */

	}

	echoValue = PdcReadFrontEchoPin();
 8002168:	f000 f91c 	bl	80023a4 <PdcReadFrontEchoPin>
 800216c:	4603      	mov	r3, r0
 800216e:	70fb      	strb	r3, [r7, #3]

	if(echoValue == STD_HIGH)
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d11e      	bne.n	80021b4 <PdcFrontStatus+0xb4>
	{

		Pdc_FrontRxDelay = HAL_GetTick();
 8002176:	f001 fe4b 	bl	8003e10 <HAL_GetTick>
 800217a:	4603      	mov	r3, r0
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4b26      	ldr	r3, [pc, #152]	; (8002218 <PdcFrontStatus+0x118>)
 8002180:	701a      	strb	r2, [r3, #0]
		osTimerStart(PdcSecondFrontDelayTimerHandle, Pdc_FrontRxDelay + 10);
 8002182:	4b26      	ldr	r3, [pc, #152]	; (800221c <PdcFrontStatus+0x11c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a24      	ldr	r2, [pc, #144]	; (8002218 <PdcFrontStatus+0x118>)
 8002188:	7812      	ldrb	r2, [r2, #0]
 800218a:	320a      	adds	r2, #10
 800218c:	4611      	mov	r1, r2
 800218e:	4618      	mov	r0, r3
 8002190:	f009 fc86 	bl	800baa0 <osTimerStart>
		PdcFrontGenerateDelay();
 8002194:	f7ff ff80 	bl	8002098 <PdcFrontGenerateDelay>

		if(Pdc_SecondFrontDelayStatus == STD_HIGH)
 8002198:	4b21      	ldr	r3, [pc, #132]	; (8002220 <PdcFrontStatus+0x120>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d109      	bne.n	80021b4 <PdcFrontStatus+0xb4>
		{

			expiry_time = xTimerGetExpiryTime(PdcFrontGlobalTimerHandle);
 80021a0:	4b1a      	ldr	r3, [pc, #104]	; (800220c <PdcFrontStatus+0x10c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f00c f969 	bl	800e47c <xTimerGetExpiryTime>
 80021aa:	6078      	str	r0, [r7, #4]
			Pdc_FrontEchoFirstTimeStampValue = expiry_time;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <PdcFrontStatus+0x124>)
 80021b2:	701a      	strb	r2, [r3, #0]

		}

	}

	echoValue = PdcReadFrontEchoPin();
 80021b4:	f000 f8f6 	bl	80023a4 <PdcReadFrontEchoPin>
 80021b8:	4603      	mov	r3, r0
 80021ba:	70fb      	strb	r3, [r7, #3]

	if(echoValue == STD_HIGH)
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d11e      	bne.n	8002200 <PdcFrontStatus+0x100>
	{

		Pdc_FrontRxDelay = HAL_GetTick();
 80021c2:	f001 fe25 	bl	8003e10 <HAL_GetTick>
 80021c6:	4603      	mov	r3, r0
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <PdcFrontStatus+0x118>)
 80021cc:	701a      	strb	r2, [r3, #0]
		osTimerStart(PdcSecondFrontDelayTimerHandle, Pdc_FrontRxDelay + 50);
 80021ce:	4b13      	ldr	r3, [pc, #76]	; (800221c <PdcFrontStatus+0x11c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a11      	ldr	r2, [pc, #68]	; (8002218 <PdcFrontStatus+0x118>)
 80021d4:	7812      	ldrb	r2, [r2, #0]
 80021d6:	3232      	adds	r2, #50	; 0x32
 80021d8:	4611      	mov	r1, r2
 80021da:	4618      	mov	r0, r3
 80021dc:	f009 fc60 	bl	800baa0 <osTimerStart>
		PdcFrontGenerateDelay();
 80021e0:	f7ff ff5a 	bl	8002098 <PdcFrontGenerateDelay>

		if(Pdc_SecondFrontDelayStatus == STD_HIGH)
 80021e4:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <PdcFrontStatus+0x120>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d109      	bne.n	8002200 <PdcFrontStatus+0x100>
		{

			expiry_time = xTimerGetExpiryTime(PdcFrontGlobalTimerHandle);
 80021ec:	4b07      	ldr	r3, [pc, #28]	; (800220c <PdcFrontStatus+0x10c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f00c f943 	bl	800e47c <xTimerGetExpiryTime>
 80021f6:	6078      	str	r0, [r7, #4]
			Pdc_FrontEchoSecondTimeStampValue = expiry_time;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <PdcFrontStatus+0x128>)
 80021fe:	701a      	strb	r2, [r3, #0]

		}

	}

	PdcFrontDistance();
 8002200:	f000 f8fa 	bl	80023f8 <PdcFrontDistance>

}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	bd90      	pop	{r4, r7, pc}
 800220c:	200001f0 	.word	0x200001f0
 8002210:	200001e8 	.word	0x200001e8
 8002214:	20000100 	.word	0x20000100
 8002218:	200000f6 	.word	0x200000f6
 800221c:	200001ec 	.word	0x200001ec
 8002220:	20000104 	.word	0x20000104
 8002224:	200000f7 	.word	0x200000f7
 8002228:	200000f8 	.word	0x200000f8

0800222c <PdcRearStatus>:

void PdcRearStatus()
{
 800222c:	b590      	push	{r4, r7, lr}
 800222e:	b085      	sub	sp, #20
 8002230:	af02      	add	r7, sp, #8

	TickType_t expiry_time 	= 0;
 8002232:	2300      	movs	r3, #0
 8002234:	607b      	str	r3, [r7, #4]
	uint8 echoValue 		= 0;
 8002236:	2300      	movs	r3, #0
 8002238:	70fb      	strb	r3, [r7, #3]

	osTimerStart(PdcRearGlobalTimerHandle, 10000);
 800223a:	4b3f      	ldr	r3, [pc, #252]	; (8002338 <PdcRearStatus+0x10c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f242 7110 	movw	r1, #10000	; 0x2710
 8002242:	4618      	mov	r0, r3
 8002244:	f009 fc2c 	bl	800baa0 <osTimerStart>
	xTimerStart(PdcRearGlobalTimerHandle, 0);
 8002248:	4b3b      	ldr	r3, [pc, #236]	; (8002338 <PdcRearStatus+0x10c>)
 800224a:	681c      	ldr	r4, [r3, #0]
 800224c:	f00b fae0 	bl	800d810 <xTaskGetTickCount>
 8002250:	4602      	mov	r2, r0
 8002252:	2300      	movs	r3, #0
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	2300      	movs	r3, #0
 8002258:	2101      	movs	r1, #1
 800225a:	4620      	mov	r0, r4
 800225c:	f00c f8c0 	bl	800e3e0 <xTimerGenericCommand>
	PdcToggleRearTriggerPin(STD_LOW);
 8002260:	2000      	movs	r0, #0
 8002262:	f000 f88d 	bl	8002380 <PdcToggleRearTriggerPin>
	PdcToggleRearTriggerPin(STD_HIGH);
 8002266:	2001      	movs	r0, #1
 8002268:	f000 f88a 	bl	8002380 <PdcToggleRearTriggerPin>
	osTimerStart(PdcRearDelayTimerHandle, 10);
 800226c:	4b33      	ldr	r3, [pc, #204]	; (800233c <PdcRearStatus+0x110>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	210a      	movs	r1, #10
 8002272:	4618      	mov	r0, r3
 8002274:	f009 fc14 	bl	800baa0 <osTimerStart>
	PdcRearGenerateDelay();
 8002278:	f7ff feda 	bl	8002030 <PdcRearGenerateDelay>

	if(Pdc_RearDelayStatus == STD_HIGH)
 800227c:	4b30      	ldr	r3, [pc, #192]	; (8002340 <PdcRearStatus+0x114>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d107      	bne.n	8002294 <PdcRearStatus+0x68>
	{

		PdcToggleRearTriggerPin(STD_LOW);
 8002284:	2000      	movs	r0, #0
 8002286:	f000 f87b 	bl	8002380 <PdcToggleRearTriggerPin>
		osTimerStop(PdcRearDelayTimerHandle);
 800228a:	4b2c      	ldr	r3, [pc, #176]	; (800233c <PdcRearStatus+0x110>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f009 fc34 	bl	800bafc <osTimerStop>

		/* do nothing */

	}

	echoValue = PdcReadRearEchoPin();
 8002294:	f000 f89a 	bl	80023cc <PdcReadRearEchoPin>
 8002298:	4603      	mov	r3, r0
 800229a:	70fb      	strb	r3, [r7, #3]

	if(echoValue == STD_HIGH)
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d11e      	bne.n	80022e0 <PdcRearStatus+0xb4>
	{

		Pdc_RearRxDelay = HAL_GetTick();
 80022a2:	f001 fdb5 	bl	8003e10 <HAL_GetTick>
 80022a6:	4603      	mov	r3, r0
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	4b26      	ldr	r3, [pc, #152]	; (8002344 <PdcRearStatus+0x118>)
 80022ac:	701a      	strb	r2, [r3, #0]
		osTimerStart(PdcSecondRearDelayTimerHandle, Pdc_RearRxDelay + 10);
 80022ae:	4b26      	ldr	r3, [pc, #152]	; (8002348 <PdcRearStatus+0x11c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a24      	ldr	r2, [pc, #144]	; (8002344 <PdcRearStatus+0x118>)
 80022b4:	7812      	ldrb	r2, [r2, #0]
 80022b6:	320a      	adds	r2, #10
 80022b8:	4611      	mov	r1, r2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f009 fbf0 	bl	800baa0 <osTimerStart>
		PdcRearGenerateDelay();
 80022c0:	f7ff feb6 	bl	8002030 <PdcRearGenerateDelay>

		if(Pdc_SecondRearDelayStatus == STD_HIGH)
 80022c4:	4b21      	ldr	r3, [pc, #132]	; (800234c <PdcRearStatus+0x120>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d109      	bne.n	80022e0 <PdcRearStatus+0xb4>
		{

			expiry_time = xTimerGetExpiryTime(PdcRearGlobalTimerHandle);
 80022cc:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <PdcRearStatus+0x10c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f00c f8d3 	bl	800e47c <xTimerGetExpiryTime>
 80022d6:	6078      	str	r0, [r7, #4]
			Pdc_RearEchoFirstTimeStampValue = expiry_time;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <PdcRearStatus+0x124>)
 80022de:	701a      	strb	r2, [r3, #0]

		}

	}

	echoValue = PdcReadRearEchoPin();
 80022e0:	f000 f874 	bl	80023cc <PdcReadRearEchoPin>
 80022e4:	4603      	mov	r3, r0
 80022e6:	70fb      	strb	r3, [r7, #3]

	if(echoValue == STD_HIGH)
 80022e8:	78fb      	ldrb	r3, [r7, #3]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d11e      	bne.n	800232c <PdcRearStatus+0x100>
	{

		Pdc_RearRxDelay = HAL_GetTick();
 80022ee:	f001 fd8f 	bl	8003e10 <HAL_GetTick>
 80022f2:	4603      	mov	r3, r0
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4b13      	ldr	r3, [pc, #76]	; (8002344 <PdcRearStatus+0x118>)
 80022f8:	701a      	strb	r2, [r3, #0]
		osTimerStart(PdcSecondRearDelayTimerHandle, Pdc_RearRxDelay + 50);
 80022fa:	4b13      	ldr	r3, [pc, #76]	; (8002348 <PdcRearStatus+0x11c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a11      	ldr	r2, [pc, #68]	; (8002344 <PdcRearStatus+0x118>)
 8002300:	7812      	ldrb	r2, [r2, #0]
 8002302:	3232      	adds	r2, #50	; 0x32
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f009 fbca 	bl	800baa0 <osTimerStart>
		PdcFrontGenerateDelay();
 800230c:	f7ff fec4 	bl	8002098 <PdcFrontGenerateDelay>

		if(Pdc_SecondFrontDelayStatus == STD_HIGH)
 8002310:	4b10      	ldr	r3, [pc, #64]	; (8002354 <PdcRearStatus+0x128>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d109      	bne.n	800232c <PdcRearStatus+0x100>
		{

			expiry_time = xTimerGetExpiryTime(PdcRearGlobalTimerHandle);
 8002318:	4b07      	ldr	r3, [pc, #28]	; (8002338 <PdcRearStatus+0x10c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f00c f8ad 	bl	800e47c <xTimerGetExpiryTime>
 8002322:	6078      	str	r0, [r7, #4]
			Pdc_RearEchoSecondTimeStampValue = expiry_time;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	b2da      	uxtb	r2, r3
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <PdcRearStatus+0x12c>)
 800232a:	701a      	strb	r2, [r3, #0]

		}

	}

	PdcRearDistance();
 800232c:	f000 f898 	bl	8002460 <PdcRearDistance>

}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	bd90      	pop	{r4, r7, pc}
 8002338:	200001f4 	.word	0x200001f4
 800233c:	200001f8 	.word	0x200001f8
 8002340:	20000101 	.word	0x20000101
 8002344:	200000fa 	.word	0x200000fa
 8002348:	200001fc 	.word	0x200001fc
 800234c:	20000105 	.word	0x20000105
 8002350:	200000fb 	.word	0x200000fb
 8002354:	20000104 	.word	0x20000104
 8002358:	200000fc 	.word	0x200000fc

0800235c <PdcToggleFrontTriggerPin>:

void PdcToggleFrontTriggerPin(uint8 PinState)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(PDC_FRONT_TRIGGER_PORT, PDC_FRONT_TRIGGER_PIN, PinState);
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	461a      	mov	r2, r3
 800236a:	2102      	movs	r1, #2
 800236c:	4803      	ldr	r0, [pc, #12]	; (800237c <PdcToggleFrontTriggerPin+0x20>)
 800236e:	f003 ffcb 	bl	8006308 <HAL_GPIO_WritePin>

}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40020400 	.word	0x40020400

08002380 <PdcToggleRearTriggerPin>:

void PdcToggleRearTriggerPin(uint8 PinState)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(PDC_FRONT_TRIGGER_PORT, PDC_FRONT_TRIGGER_PIN, PinState);
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	461a      	mov	r2, r3
 800238e:	2102      	movs	r1, #2
 8002390:	4803      	ldr	r0, [pc, #12]	; (80023a0 <PdcToggleRearTriggerPin+0x20>)
 8002392:	f003 ffb9 	bl	8006308 <HAL_GPIO_WritePin>

}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40020400 	.word	0x40020400

080023a4 <PdcReadFrontEchoPin>:

StdReturnType PdcReadFrontEchoPin()
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0

	uint8 pinValue = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	71fb      	strb	r3, [r7, #7]

	pinValue = HAL_GPIO_ReadPin(PDC_FRONT_ECHO_PORT, PDC_FRONT_ECHO_PIN);
 80023ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <PdcReadFrontEchoPin+0x24>)
 80023b4:	f003 ff82 	bl	80062bc <HAL_GPIO_ReadPin>
 80023b8:	4603      	mov	r3, r0
 80023ba:	71fb      	strb	r3, [r7, #7]

	return pinValue;
 80023bc:	79fb      	ldrb	r3, [r7, #7]

}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40020400 	.word	0x40020400

080023cc <PdcReadRearEchoPin>:

StdReturnType PdcReadRearEchoPin()
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0

	uint8 pinValue = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	71fb      	strb	r3, [r7, #7]

	pinValue = HAL_GPIO_ReadPin(PDC_REAR_ECHO_PORT, PDC_REAR_ECHO_PIN);
 80023d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023da:	4805      	ldr	r0, [pc, #20]	; (80023f0 <PdcReadRearEchoPin+0x24>)
 80023dc:	f003 ff6e 	bl	80062bc <HAL_GPIO_ReadPin>
 80023e0:	4603      	mov	r3, r0
 80023e2:	71fb      	strb	r3, [r7, #7]

	return pinValue;
 80023e4:	79fb      	ldrb	r3, [r7, #7]

}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40020000 	.word	0x40020000
 80023f4:	00000000 	.word	0x00000000

080023f8 <PdcFrontDistance>:

void PdcFrontDistance()
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0

	Pdc_FrontDistanceValue = (Pdc_FrontEchoFirstTimeStampValue + Pdc_FrontEchoSecondTimeStampValue) * 0.034 / 2;
 80023fc:	4b14      	ldr	r3, [pc, #80]	; (8002450 <PdcFrontDistance+0x58>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	461a      	mov	r2, r3
 8002402:	4b14      	ldr	r3, [pc, #80]	; (8002454 <PdcFrontDistance+0x5c>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	4413      	add	r3, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe f83b 	bl	8000484 <__aeabi_i2d>
 800240e:	a30e      	add	r3, pc, #56	; (adr r3, 8002448 <PdcFrontDistance+0x50>)
 8002410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002414:	f7fe f8a0 	bl	8000558 <__aeabi_dmul>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4610      	mov	r0, r2
 800241e:	4619      	mov	r1, r3
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002428:	f7fe f9c0 	bl	80007ac <__aeabi_ddiv>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	f7fe faa2 	bl	800097c <__aeabi_d2uiz>
 8002438:	4603      	mov	r3, r0
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <PdcFrontDistance+0x60>)
 800243e:	701a      	strb	r2, [r3, #0]

}
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}
 8002444:	f3af 8000 	nop.w
 8002448:	b020c49c 	.word	0xb020c49c
 800244c:	3fa16872 	.word	0x3fa16872
 8002450:	200000f7 	.word	0x200000f7
 8002454:	200000f8 	.word	0x200000f8
 8002458:	200000f9 	.word	0x200000f9
 800245c:	00000000 	.word	0x00000000

08002460 <PdcRearDistance>:


void PdcRearDistance()
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0

	Pdc_RearDistanceValue = (Pdc_RearEchoFirstTimeStampValue + Pdc_RearEchoSecondTimeStampValue) * 0.034 / 2;
 8002464:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <PdcRearDistance+0x58>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	4b14      	ldr	r3, [pc, #80]	; (80024bc <PdcRearDistance+0x5c>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	4413      	add	r3, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe f807 	bl	8000484 <__aeabi_i2d>
 8002476:	a30e      	add	r3, pc, #56	; (adr r3, 80024b0 <PdcRearDistance+0x50>)
 8002478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247c:	f7fe f86c 	bl	8000558 <__aeabi_dmul>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002490:	f7fe f98c 	bl	80007ac <__aeabi_ddiv>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	f7fe fa6e 	bl	800097c <__aeabi_d2uiz>
 80024a0:	4603      	mov	r3, r0
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <PdcRearDistance+0x60>)
 80024a6:	701a      	strb	r2, [r3, #0]

}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	f3af 8000 	nop.w
 80024b0:	b020c49c 	.word	0xb020c49c
 80024b4:	3fa16872 	.word	0x3fa16872
 80024b8:	200000fb 	.word	0x200000fb
 80024bc:	200000fc 	.word	0x200000fc
 80024c0:	200000fd 	.word	0x200000fd

080024c4 <PdcMainFunction>:
	}

}

void PdcMainFunction()
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0

	PdcFrontStatus();
 80024c8:	f7ff fe1a 	bl	8002100 <PdcFrontStatus>
	PdcRearStatus();
 80024cc:	f7ff feae 	bl	800222c <PdcRearStatus>

}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <SecAlmVibeSenReadPin>:
void SecAlmState();
void SecAlmLightsBuzzerControl();
void SecAlmTurnOnExtLights();

StdReturnType SecAlmVibeSenReadPin()
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0

	uint8 PinState = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	71fb      	strb	r3, [r7, #7]

	PinState = HAL_GPIO_ReadPin(SECALM_VIBSEN_PORT, SECALM_VIBSEN_PIN);
 80024de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024e2:	4805      	ldr	r0, [pc, #20]	; (80024f8 <SecAlmVibeSenReadPin+0x24>)
 80024e4:	f003 feea 	bl	80062bc <HAL_GPIO_ReadPin>
 80024e8:	4603      	mov	r3, r0
 80024ea:	71fb      	strb	r3, [r7, #7]

	return PinState;
 80024ec:	79fb      	ldrb	r3, [r7, #7]

}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40020000 	.word	0x40020000

080024fc <SecAlmVibSenStatus>:

StdReturnType SecAlmVibSenStatus()
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0

	uint8 status = STD_LOW;
 8002502:	2300      	movs	r3, #0
 8002504:	71fb      	strb	r3, [r7, #7]

	SecAlm_VibSenStatusFlag = SecAlmVibeSenReadPin();
 8002506:	f7ff ffe5 	bl	80024d4 <SecAlmVibeSenReadPin>
 800250a:	4603      	mov	r3, r0
 800250c:	461a      	mov	r2, r3
 800250e:	4b07      	ldr	r3, [pc, #28]	; (800252c <SecAlmVibSenStatus+0x30>)
 8002510:	601a      	str	r2, [r3, #0]

	if(SecAlm_VibSenStatusFlag >= 1000)
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <SecAlmVibSenStatus+0x30>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800251a:	d301      	bcc.n	8002520 <SecAlmVibSenStatus+0x24>
	{

		status = STD_HIGH;
 800251c:	2301      	movs	r3, #1
 800251e:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* do nothing */
	}

	return status;
 8002520:	79fb      	ldrb	r3, [r7, #7]

}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	2000010c 	.word	0x2000010c

08002530 <SecAlmState>:

void SecAlmState()
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0

	if(SecAlmVibSenStatus() == STD_HIGH && CenLoc_CurrentState == STD_LOW)
 8002534:	f7ff ffe2 	bl	80024fc <SecAlmVibSenStatus>
 8002538:	4603      	mov	r3, r0
 800253a:	2b01      	cmp	r3, #1
 800253c:	d109      	bne.n	8002552 <SecAlmState+0x22>
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <SecAlmState+0x28>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d105      	bne.n	8002552 <SecAlmState+0x22>
	{

		SecAlm_Trigger = STD_HIGH;
 8002546:	4b05      	ldr	r3, [pc, #20]	; (800255c <SecAlmState+0x2c>)
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Init(&htim4);
 800254c:	4804      	ldr	r0, [pc, #16]	; (8002560 <SecAlmState+0x30>)
 800254e:	f006 ff7d 	bl	800944c <HAL_TIM_Base_Init>

		/* do nothing */

	}

}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000091 	.word	0x20000091
 800255c:	20000106 	.word	0x20000106
 8002560:	200005a8 	.word	0x200005a8

08002564 <SecAlmTurnOnExtLights>:

void SecAlmTurnOnExtLights()
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0

	ExtLightsLowBeam(SecAlm_PinStateChange);
 8002568:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <SecAlmTurnOnExtLights+0x50>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff facb 	bl	8001b08 <ExtLightsLowBeam>
	ExtLightsRearPositionLight(SecAlm_PinStateChange);
 8002572:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <SecAlmTurnOnExtLights+0x50>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fb32 	bl	8001be0 <ExtLightsRearPositionLight>
	ExtLightsFrontFogLight(SecAlm_PinStateChange);
 800257c:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <SecAlmTurnOnExtLights+0x50>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff faf7 	bl	8001b74 <ExtLightsFrontFogLight>
	ExtLightsRearFogLight(SecAlm_PinStateChange);
 8002586:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <SecAlmTurnOnExtLights+0x50>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fb3a 	bl	8001c04 <ExtLightsRearFogLight>
	ExtLightsTurnSignalRight(SecAlm_PinStateChange);
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <SecAlmTurnOnExtLights+0x50>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fb11 	bl	8001bbc <ExtLightsTurnSignalRight>
	ExtLightsTurnSignalLeft(SecAlm_PinStateChange);
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <SecAlmTurnOnExtLights+0x50>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fafa 	bl	8001b98 <ExtLightsTurnSignalLeft>
	SecAlmToggleAlarmBuzzer(SecAlm_PinStateChange);
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <SecAlmTurnOnExtLights+0x50>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 f887 	bl	80026bc <SecAlmToggleAlarmBuzzer>

}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000107 	.word	0x20000107

080025b8 <SecAlmLightsBuzzerControl>:

void SecAlmLightsBuzzerControl()
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0

	if(SecAlm_Trigger == STD_LOW)
 80025bc:	4b22      	ldr	r3, [pc, #136]	; (8002648 <SecAlmLightsBuzzerControl+0x90>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <SecAlmLightsBuzzerControl+0x10>
	{

		SecAlmInit();
 80025c4:	f000 f856 	bl	8002674 <SecAlmInit>

		/* do nothing */

	}

	if(SecAlm_Trigger == STD_HIGH)
 80025c8:	4b1f      	ldr	r3, [pc, #124]	; (8002648 <SecAlmLightsBuzzerControl+0x90>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d11b      	bne.n	8002608 <SecAlmLightsBuzzerControl+0x50>
	{
		HAL_TIM_Base_Start_IT(&htim4);
 80025d0:	481e      	ldr	r0, [pc, #120]	; (800264c <SecAlmLightsBuzzerControl+0x94>)
 80025d2:	f007 f80d 	bl	80095f0 <HAL_TIM_Base_Start_IT>

		if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 1)
 80025d6:	4b1e      	ldr	r3, [pc, #120]	; (8002650 <SecAlmLightsBuzzerControl+0x98>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <SecAlmLightsBuzzerControl+0x38>
		{

			SecAlm_PinStateChange = STD_HIGH;
 80025e4:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <SecAlmLightsBuzzerControl+0x9c>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
			SecAlmTurnOnExtLights();
 80025ea:	f7ff ffbb 	bl	8002564 <SecAlmTurnOnExtLights>
 80025ee:	e00b      	b.n	8002608 <SecAlmLightsBuzzerControl+0x50>

		}
		else if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 0)
 80025f0:	4b17      	ldr	r3, [pc, #92]	; (8002650 <SecAlmLightsBuzzerControl+0x98>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d104      	bne.n	8002608 <SecAlmLightsBuzzerControl+0x50>
		{

			SecAlm_PinStateChange = STD_LOW;
 80025fe:	4b15      	ldr	r3, [pc, #84]	; (8002654 <SecAlmLightsBuzzerControl+0x9c>)
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]
			SecAlmTurnOnExtLights();
 8002604:	f7ff ffae 	bl	8002564 <SecAlmTurnOnExtLights>

		/* do nothing */

	}

	if(SecAlm_TriggerIRQCounterForTimer4 >= 20)
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <SecAlmLightsBuzzerControl+0x98>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b13      	cmp	r3, #19
 800260e:	d918      	bls.n	8002642 <SecAlmLightsBuzzerControl+0x8a>
	{

		HAL_TIM_Base_Stop_IT(&htim4);
 8002610:	480e      	ldr	r0, [pc, #56]	; (800264c <SecAlmLightsBuzzerControl+0x94>)
 8002612:	f007 f87f 	bl	8009714 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim5);
 8002616:	4810      	ldr	r0, [pc, #64]	; (8002658 <SecAlmLightsBuzzerControl+0xa0>)
 8002618:	f007 f87c 	bl	8009714 <HAL_TIM_Base_Stop_IT>

		SecAlm_Trigger 						= STD_LOW;
 800261c:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <SecAlmLightsBuzzerControl+0x90>)
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange 				= STD_LOW;
 8002622:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <SecAlmLightsBuzzerControl+0x9c>)
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]
		SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <SecAlmLightsBuzzerControl+0x98>)
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim3IRQFlag 					= STD_HIGH;
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <SecAlmLightsBuzzerControl+0xa4>)
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim11IRQFlag 				= STD_LOW;
 8002634:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <SecAlmLightsBuzzerControl+0xa8>)
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]

		SecAlmInit();
 800263a:	f000 f81b 	bl	8002674 <SecAlmInit>
		SecAlmTurnOnExtLights();
 800263e:	f7ff ff91 	bl	8002564 <SecAlmTurnOnExtLights>

		/* do nothing */

	}

}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000106 	.word	0x20000106
 800264c:	200005a8 	.word	0x200005a8
 8002650:	20000108 	.word	0x20000108
 8002654:	20000107 	.word	0x20000107
 8002658:	2000065c 	.word	0x2000065c
 800265c:	20000099 	.word	0x20000099
 8002660:	2000009b 	.word	0x2000009b

08002664 <SecAlmMainFunction>:

void SecAlmMainFunction()
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0

	SecAlmState();
 8002668:	f7ff ff62 	bl	8002530 <SecAlmState>
	SecAlmLightsBuzzerControl();
 800266c:	f7ff ffa4 	bl	80025b8 <SecAlmLightsBuzzerControl>

}
 8002670:	bf00      	nop
 8002672:	bd80      	pop	{r7, pc}

08002674 <SecAlmInit>:

StdReturnType SecAlmInit()
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0

	SecAlm_Trigger					 	= STD_LOW;
 8002678:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <SecAlmInit+0x30>)
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
	SecAlm_PinStateChange 				= STD_LOW;
 800267e:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <SecAlmInit+0x34>)
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
	SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
 8002684:	4b09      	ldr	r3, [pc, #36]	; (80026ac <SecAlmInit+0x38>)
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]
	SecAlm_IsAlmOnFlag 					= STD_LOW;
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <SecAlmInit+0x3c>)
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
	SecAlm_VibSenStatusFlag 			= STD_LOW;
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <SecAlmInit+0x40>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Init(&htim4);
 8002696:	4808      	ldr	r0, [pc, #32]	; (80026b8 <SecAlmInit+0x44>)
 8002698:	f006 fed8 	bl	800944c <HAL_TIM_Base_Init>

	return E_OK;
 800269c:	2300      	movs	r3, #0

}
 800269e:	4618      	mov	r0, r3
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000106 	.word	0x20000106
 80026a8:	20000107 	.word	0x20000107
 80026ac:	20000108 	.word	0x20000108
 80026b0:	20000109 	.word	0x20000109
 80026b4:	2000010c 	.word	0x2000010c
 80026b8:	200005a8 	.word	0x200005a8

080026bc <SecAlmToggleAlarmBuzzer>:

void SecAlmToggleAlarmBuzzer(uint8 PinState)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	461a      	mov	r2, r3
 80026ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026ce:	4803      	ldr	r0, [pc, #12]	; (80026dc <SecAlmToggleAlarmBuzzer+0x20>)
 80026d0:	f003 fe1a 	bl	8006308 <HAL_GPIO_WritePin>

}
 80026d4:	bf00      	nop
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40020400 	.word	0x40020400

080026e0 <SecAlmToggleAlarmLed>:

void SecAlmToggleAlarmLed(uint8 PinState)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	461a      	mov	r2, r3
 80026ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026f2:	4803      	ldr	r0, [pc, #12]	; (8002700 <SecAlmToggleAlarmLed+0x20>)
 80026f4:	f003 fe08 	bl	8006308 <HAL_GPIO_WritePin>

}
 80026f8:	bf00      	nop
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40020000 	.word	0x40020000

08002704 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800270a:	463b      	mov	r3, r7
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002716:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <MX_ADC1_Init+0xec>)
 8002718:	4a36      	ldr	r2, [pc, #216]	; (80027f4 <MX_ADC1_Init+0xf0>)
 800271a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800271c:	4b34      	ldr	r3, [pc, #208]	; (80027f0 <MX_ADC1_Init+0xec>)
 800271e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002722:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002724:	4b32      	ldr	r3, [pc, #200]	; (80027f0 <MX_ADC1_Init+0xec>)
 8002726:	2200      	movs	r2, #0
 8002728:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800272a:	4b31      	ldr	r3, [pc, #196]	; (80027f0 <MX_ADC1_Init+0xec>)
 800272c:	2201      	movs	r2, #1
 800272e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002730:	4b2f      	ldr	r3, [pc, #188]	; (80027f0 <MX_ADC1_Init+0xec>)
 8002732:	2201      	movs	r2, #1
 8002734:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002736:	4b2e      	ldr	r3, [pc, #184]	; (80027f0 <MX_ADC1_Init+0xec>)
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800273e:	4b2c      	ldr	r3, [pc, #176]	; (80027f0 <MX_ADC1_Init+0xec>)
 8002740:	2200      	movs	r2, #0
 8002742:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002744:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <MX_ADC1_Init+0xec>)
 8002746:	4a2c      	ldr	r2, [pc, #176]	; (80027f8 <MX_ADC1_Init+0xf4>)
 8002748:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800274a:	4b29      	ldr	r3, [pc, #164]	; (80027f0 <MX_ADC1_Init+0xec>)
 800274c:	2200      	movs	r2, #0
 800274e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002750:	4b27      	ldr	r3, [pc, #156]	; (80027f0 <MX_ADC1_Init+0xec>)
 8002752:	2204      	movs	r2, #4
 8002754:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002756:	4b26      	ldr	r3, [pc, #152]	; (80027f0 <MX_ADC1_Init+0xec>)
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800275e:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <MX_ADC1_Init+0xec>)
 8002760:	2201      	movs	r2, #1
 8002762:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002764:	4822      	ldr	r0, [pc, #136]	; (80027f0 <MX_ADC1_Init+0xec>)
 8002766:	f001 fb5f 	bl	8003e28 <HAL_ADC_Init>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002770:	f000 fd06 	bl	8003180 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002774:	2302      	movs	r3, #2
 8002776:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002778:	2301      	movs	r3, #1
 800277a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800277c:	2300      	movs	r3, #0
 800277e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002780:	463b      	mov	r3, r7
 8002782:	4619      	mov	r1, r3
 8002784:	481a      	ldr	r0, [pc, #104]	; (80027f0 <MX_ADC1_Init+0xec>)
 8002786:	f001 ff53 	bl	8004630 <HAL_ADC_ConfigChannel>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002790:	f000 fcf6 	bl	8003180 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002794:	2303      	movs	r3, #3
 8002796:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002798:	2302      	movs	r3, #2
 800279a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800279c:	463b      	mov	r3, r7
 800279e:	4619      	mov	r1, r3
 80027a0:	4813      	ldr	r0, [pc, #76]	; (80027f0 <MX_ADC1_Init+0xec>)
 80027a2:	f001 ff45 	bl	8004630 <HAL_ADC_ConfigChannel>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80027ac:	f000 fce8 	bl	8003180 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80027b0:	2306      	movs	r3, #6
 80027b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80027b4:	2303      	movs	r3, #3
 80027b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027b8:	463b      	mov	r3, r7
 80027ba:	4619      	mov	r1, r3
 80027bc:	480c      	ldr	r0, [pc, #48]	; (80027f0 <MX_ADC1_Init+0xec>)
 80027be:	f001 ff37 	bl	8004630 <HAL_ADC_ConfigChannel>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80027c8:	f000 fcda 	bl	8003180 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80027cc:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <MX_ADC1_Init+0xf8>)
 80027ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80027d0:	2304      	movs	r3, #4
 80027d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027d4:	463b      	mov	r3, r7
 80027d6:	4619      	mov	r1, r3
 80027d8:	4805      	ldr	r0, [pc, #20]	; (80027f0 <MX_ADC1_Init+0xec>)
 80027da:	f001 ff29 	bl	8004630 <HAL_ADC_ConfigChannel>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80027e4:	f000 fccc 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027e8:	bf00      	nop
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000110 	.word	0x20000110
 80027f4:	40012000 	.word	0x40012000
 80027f8:	0f000001 	.word	0x0f000001
 80027fc:	10000012 	.word	0x10000012

08002800 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08a      	sub	sp, #40	; 0x28
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002808:	f107 0314 	add.w	r3, r7, #20
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a32      	ldr	r2, [pc, #200]	; (80028e8 <HAL_ADC_MspInit+0xe8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d15e      	bne.n	80028e0 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	4b31      	ldr	r3, [pc, #196]	; (80028ec <HAL_ADC_MspInit+0xec>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	4a30      	ldr	r2, [pc, #192]	; (80028ec <HAL_ADC_MspInit+0xec>)
 800282c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002830:	6453      	str	r3, [r2, #68]	; 0x44
 8002832:	4b2e      	ldr	r3, [pc, #184]	; (80028ec <HAL_ADC_MspInit+0xec>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	4b2a      	ldr	r3, [pc, #168]	; (80028ec <HAL_ADC_MspInit+0xec>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	4a29      	ldr	r2, [pc, #164]	; (80028ec <HAL_ADC_MspInit+0xec>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	6313      	str	r3, [r2, #48]	; 0x30
 800284e:	4b27      	ldr	r3, [pc, #156]	; (80028ec <HAL_ADC_MspInit+0xec>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6;
 800285a:	234c      	movs	r3, #76	; 0x4c
 800285c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800285e:	2303      	movs	r3, #3
 8002860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	2300      	movs	r3, #0
 8002864:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	4619      	mov	r1, r3
 800286c:	4820      	ldr	r0, [pc, #128]	; (80028f0 <HAL_ADC_MspInit+0xf0>)
 800286e:	f003 fa8b 	bl	8005d88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002872:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <HAL_ADC_MspInit+0xf4>)
 8002874:	4a20      	ldr	r2, [pc, #128]	; (80028f8 <HAL_ADC_MspInit+0xf8>)
 8002876:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002878:	4b1e      	ldr	r3, [pc, #120]	; (80028f4 <HAL_ADC_MspInit+0xf4>)
 800287a:	2200      	movs	r2, #0
 800287c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800287e:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <HAL_ADC_MspInit+0xf4>)
 8002880:	2200      	movs	r2, #0
 8002882:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002884:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <HAL_ADC_MspInit+0xf4>)
 8002886:	2200      	movs	r2, #0
 8002888:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800288a:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <HAL_ADC_MspInit+0xf4>)
 800288c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002890:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002892:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <HAL_ADC_MspInit+0xf4>)
 8002894:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002898:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800289a:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <HAL_ADC_MspInit+0xf4>)
 800289c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80028a2:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <HAL_ADC_MspInit+0xf4>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80028a8:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_ADC_MspInit+0xf4>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ae:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <HAL_ADC_MspInit+0xf4>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80028b4:	480f      	ldr	r0, [pc, #60]	; (80028f4 <HAL_ADC_MspInit+0xf4>)
 80028b6:	f002 fb07 	bl	8004ec8 <HAL_DMA_Init>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80028c0:	f000 fc5e 	bl	8003180 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a0b      	ldr	r2, [pc, #44]	; (80028f4 <HAL_ADC_MspInit+0xf4>)
 80028c8:	639a      	str	r2, [r3, #56]	; 0x38
 80028ca:	4a0a      	ldr	r2, [pc, #40]	; (80028f4 <HAL_ADC_MspInit+0xf4>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80028d0:	2200      	movs	r2, #0
 80028d2:	2105      	movs	r1, #5
 80028d4:	2012      	movs	r0, #18
 80028d6:	f002 fa89 	bl	8004dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80028da:	2012      	movs	r0, #18
 80028dc:	f002 fab2 	bl	8004e44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80028e0:	bf00      	nop
 80028e2:	3728      	adds	r7, #40	; 0x28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40012000 	.word	0x40012000
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40020000 	.word	0x40020000
 80028f4:	20000174 	.word	0x20000174
 80028f8:	40026410 	.word	0x40026410

080028fc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002900:	4b06      	ldr	r3, [pc, #24]	; (800291c <MX_CRC_Init+0x20>)
 8002902:	4a07      	ldr	r2, [pc, #28]	; (8002920 <MX_CRC_Init+0x24>)
 8002904:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002906:	4805      	ldr	r0, [pc, #20]	; (800291c <MX_CRC_Init+0x20>)
 8002908:	f002 fab4 	bl	8004e74 <HAL_CRC_Init>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002912:	f000 fc35 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	200001d4 	.word	0x200001d4
 8002920:	40023000 	.word	0x40023000

08002924 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0b      	ldr	r2, [pc, #44]	; (8002960 <HAL_CRC_MspInit+0x3c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d10d      	bne.n	8002952 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <HAL_CRC_MspInit+0x40>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	4a09      	ldr	r2, [pc, #36]	; (8002964 <HAL_CRC_MspInit+0x40>)
 8002940:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002944:	6313      	str	r3, [r2, #48]	; 0x30
 8002946:	4b07      	ldr	r3, [pc, #28]	; (8002964 <HAL_CRC_MspInit+0x40>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8002952:	bf00      	nop
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40023000 	.word	0x40023000
 8002964:	40023800 	.word	0x40023800

08002968 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	607b      	str	r3, [r7, #4]
 8002972:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <MX_DMA_Init+0x3c>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	4a0b      	ldr	r2, [pc, #44]	; (80029a4 <MX_DMA_Init+0x3c>)
 8002978:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800297c:	6313      	str	r3, [r2, #48]	; 0x30
 800297e:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <MX_DMA_Init+0x3c>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002986:	607b      	str	r3, [r7, #4]
 8002988:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800298a:	2200      	movs	r2, #0
 800298c:	2105      	movs	r1, #5
 800298e:	2038      	movs	r0, #56	; 0x38
 8002990:	f002 fa2c 	bl	8004dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002994:	2038      	movs	r0, #56	; 0x38
 8002996:	f002 fa55 	bl	8004e44 <HAL_NVIC_EnableIRQ>

}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800

080029a8 <configureTimerForRunTimeStats>:
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0

}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80029b6:	b480      	push	{r7}
 80029b8:	af00      	add	r7, sp, #0
return 0;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80029ca:	bf00      	nop
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0
}
 8002a0a:	bf00      	nop
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <PreSleepProcessing>:
/* USER CODE END DAEMON_TASK_STARTUP_HOOK */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of PdcFrontDelayTimer */
  PdcFrontDelayTimerHandle = osTimerNew(PdcFrontDelayCallback, osTimerPeriodic, NULL, &PdcFrontDelayTimer_attributes);
 8002a40:	4b28      	ldr	r3, [pc, #160]	; (8002ae4 <MX_FREERTOS_Init+0xa8>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	2101      	movs	r1, #1
 8002a46:	4828      	ldr	r0, [pc, #160]	; (8002ae8 <MX_FREERTOS_Init+0xac>)
 8002a48:	f008 ffae 	bl	800b9a8 <osTimerNew>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4a27      	ldr	r2, [pc, #156]	; (8002aec <MX_FREERTOS_Init+0xb0>)
 8002a50:	6013      	str	r3, [r2, #0]

  /* creation of PdcSecondFrontDelayTimer */
  PdcSecondFrontDelayTimerHandle = osTimerNew(PdcSecondFrontDelayCallback, osTimerPeriodic, NULL, &PdcSecondFrontDelayTimer_attributes);
 8002a52:	4b27      	ldr	r3, [pc, #156]	; (8002af0 <MX_FREERTOS_Init+0xb4>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	2101      	movs	r1, #1
 8002a58:	4826      	ldr	r0, [pc, #152]	; (8002af4 <MX_FREERTOS_Init+0xb8>)
 8002a5a:	f008 ffa5 	bl	800b9a8 <osTimerNew>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	4a25      	ldr	r2, [pc, #148]	; (8002af8 <MX_FREERTOS_Init+0xbc>)
 8002a62:	6013      	str	r3, [r2, #0]

  /* creation of PdcFrontGlobalTimer */
  PdcFrontGlobalTimerHandle = osTimerNew(PdcFrontGlobalTimerCallback, osTimerPeriodic, NULL, &PdcFrontGlobalTimer_attributes);
 8002a64:	4b25      	ldr	r3, [pc, #148]	; (8002afc <MX_FREERTOS_Init+0xc0>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	2101      	movs	r1, #1
 8002a6a:	4825      	ldr	r0, [pc, #148]	; (8002b00 <MX_FREERTOS_Init+0xc4>)
 8002a6c:	f008 ff9c 	bl	800b9a8 <osTimerNew>
 8002a70:	4603      	mov	r3, r0
 8002a72:	4a24      	ldr	r2, [pc, #144]	; (8002b04 <MX_FREERTOS_Init+0xc8>)
 8002a74:	6013      	str	r3, [r2, #0]

  /* creation of PdcRearGlobalTimer */
  PdcRearGlobalTimerHandle = osTimerNew(PdcRearGlobalCallback, osTimerPeriodic, NULL, &PdcRearGlobalTimer_attributes);
 8002a76:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <MX_FREERTOS_Init+0xcc>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	4823      	ldr	r0, [pc, #140]	; (8002b0c <MX_FREERTOS_Init+0xd0>)
 8002a7e:	f008 ff93 	bl	800b9a8 <osTimerNew>
 8002a82:	4603      	mov	r3, r0
 8002a84:	4a22      	ldr	r2, [pc, #136]	; (8002b10 <MX_FREERTOS_Init+0xd4>)
 8002a86:	6013      	str	r3, [r2, #0]

  /* creation of PdcRearDelayTimer */
  PdcRearDelayTimerHandle = osTimerNew(PdcRearDelayCallback, osTimerPeriodic, NULL, &PdcRearDelayTimer_attributes);
 8002a88:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <MX_FREERTOS_Init+0xd8>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	4822      	ldr	r0, [pc, #136]	; (8002b18 <MX_FREERTOS_Init+0xdc>)
 8002a90:	f008 ff8a 	bl	800b9a8 <osTimerNew>
 8002a94:	4603      	mov	r3, r0
 8002a96:	4a21      	ldr	r2, [pc, #132]	; (8002b1c <MX_FREERTOS_Init+0xe0>)
 8002a98:	6013      	str	r3, [r2, #0]

  /* creation of PdcSecondRearDelayTimer */
  PdcSecondRearDelayTimerHandle = osTimerNew(PdcSecondRearDelayCallback, osTimerPeriodic, NULL, &PdcSecondRearDelayTimer_attributes);
 8002a9a:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <MX_FREERTOS_Init+0xe4>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	4820      	ldr	r0, [pc, #128]	; (8002b24 <MX_FREERTOS_Init+0xe8>)
 8002aa2:	f008 ff81 	bl	800b9a8 <osTimerNew>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4a1f      	ldr	r2, [pc, #124]	; (8002b28 <MX_FREERTOS_Init+0xec>)
 8002aaa:	6013      	str	r3, [r2, #0]

  /* creation of RLTSHL */
  RLTSHLHandle = osTimerNew(RLTSHLCallback, osTimerPeriodic, NULL, &RLTSHL_attributes);
 8002aac:	4b1f      	ldr	r3, [pc, #124]	; (8002b2c <MX_FREERTOS_Init+0xf0>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	481f      	ldr	r0, [pc, #124]	; (8002b30 <MX_FREERTOS_Init+0xf4>)
 8002ab4:	f008 ff78 	bl	800b9a8 <osTimerNew>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4a1e      	ldr	r2, [pc, #120]	; (8002b34 <MX_FREERTOS_Init+0xf8>)
 8002abc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002abe:	4a1e      	ldr	r2, [pc, #120]	; (8002b38 <MX_FREERTOS_Init+0xfc>)
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	481e      	ldr	r0, [pc, #120]	; (8002b3c <MX_FREERTOS_Init+0x100>)
 8002ac4:	f008 feac 	bl	800b820 <osThreadNew>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4a1d      	ldr	r2, [pc, #116]	; (8002b40 <MX_FREERTOS_Init+0x104>)
 8002acc:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8002ace:	4a1d      	ldr	r2, [pc, #116]	; (8002b44 <MX_FREERTOS_Init+0x108>)
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	481d      	ldr	r0, [pc, #116]	; (8002b48 <MX_FREERTOS_Init+0x10c>)
 8002ad4:	f008 fea4 	bl	800b820 <osThreadNew>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	4a1c      	ldr	r2, [pc, #112]	; (8002b4c <MX_FREERTOS_Init+0x110>)
 8002adc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	0800f378 	.word	0x0800f378
 8002ae8:	08002b9d 	.word	0x08002b9d
 8002aec:	200001e8 	.word	0x200001e8
 8002af0:	0800f388 	.word	0x0800f388
 8002af4:	08002bbd 	.word	0x08002bbd
 8002af8:	200001ec 	.word	0x200001ec
 8002afc:	0800f398 	.word	0x0800f398
 8002b00:	08002bdd 	.word	0x08002bdd
 8002b04:	200001f0 	.word	0x200001f0
 8002b08:	0800f3a8 	.word	0x0800f3a8
 8002b0c:	08002bf1 	.word	0x08002bf1
 8002b10:	200001f4 	.word	0x200001f4
 8002b14:	0800f3b8 	.word	0x0800f3b8
 8002b18:	08002c05 	.word	0x08002c05
 8002b1c:	200001f8 	.word	0x200001f8
 8002b20:	0800f3c8 	.word	0x0800f3c8
 8002b24:	08002c25 	.word	0x08002c25
 8002b28:	200001fc 	.word	0x200001fc
 8002b2c:	0800f3d8 	.word	0x0800f3d8
 8002b30:	08002c45 	.word	0x08002c45
 8002b34:	20000200 	.word	0x20000200
 8002b38:	0800f330 	.word	0x0800f330
 8002b3c:	08002b51 	.word	0x08002b51
 8002b40:	200001e0 	.word	0x200001e0
 8002b44:	0800f354 	.word	0x0800f354
 8002b48:	08002b7d 	.word	0x08002b7d
 8002b4c:	200001e4 	.word	0x200001e4

08002b50 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {

		BtcMainFunction();
 8002b58:	f7fe fbc0 	bl	80012dc <BtcMainFunction>
		CenLocMainFunction();
 8002b5c:	f7fe fd82 	bl	8001664 <CenLocMainFunction>
		ExtLightsMainFunction();
 8002b60:	f7fe fefc 	bl	800195c <ExtLightsMainFunction>
		IntLightsMainFunction();
 8002b64:	f7ff fa44 	bl	8001ff0 <IntLightsMainFunction>
		SecAlmMainFunction();
 8002b68:	f7ff fd7c 	bl	8002664 <SecAlmMainFunction>
		HVACMainFunction();
 8002b6c:	f7ff f8cc 	bl	8001d08 <HVACMainFunction>
		PdcMainFunction();
 8002b70:	f7ff fca8 	bl	80024c4 <PdcMainFunction>

		osDelay(1);
 8002b74:	2001      	movs	r0, #1
 8002b76:	f008 fee6 	bl	800b946 <osDelay>
		BtcMainFunction();
 8002b7a:	e7ed      	b.n	8002b58 <StartDefaultTask+0x8>

08002b7c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  OS_Counter++;
 8002b84:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <StartTask02+0x1c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	4a03      	ldr	r2, [pc, #12]	; (8002b98 <StartTask02+0x1c>)
 8002b8c:	6013      	str	r3, [r2, #0]
	  osDelay(1);
 8002b8e:	2001      	movs	r0, #1
 8002b90:	f008 fed9 	bl	800b946 <osDelay>
	  OS_Counter++;
 8002b94:	e7f6      	b.n	8002b84 <StartTask02+0x8>
 8002b96:	bf00      	nop
 8002b98:	200001dc 	.word	0x200001dc

08002b9c <PdcFrontDelayCallback>:
  /* USER CODE END StartTask02 */
}

/* PdcFrontDelayCallback function */
void PdcFrontDelayCallback(void *argument)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcFrontDelayCallback */
	Pdc_FrontGenerateDelayFlag = STD_HIGH;
 8002ba4:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <PdcFrontDelayCallback+0x1c>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END PdcFrontDelayCallback */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	200000ff 	.word	0x200000ff

08002bbc <PdcSecondFrontDelayCallback>:

/* PdcSecondFrontDelayCallback function */
void PdcSecondFrontDelayCallback(void *argument)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcSecondFrontDelayCallback */
	Pdc_SecondFrontGenerateDelayFlag = STD_HIGH;
 8002bc4:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <PdcSecondFrontDelayCallback+0x1c>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END PdcSecondFrontDelayCallback */
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	20000103 	.word	0x20000103

08002bdc <PdcFrontGlobalTimerCallback>:

/* PdcFrontGlobalTimerCallback function */
void PdcFrontGlobalTimerCallback(void *argument)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcFrontGlobalTimerCallback */

  /* USER CODE END PdcFrontGlobalTimerCallback */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <PdcRearGlobalCallback>:

/* PdcRearGlobalCallback function */
void PdcRearGlobalCallback(void *argument)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcRearGlobalCallback */

  /* USER CODE END PdcRearGlobalCallback */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <PdcRearDelayCallback>:

/* PdcRearDelayCallback function */
void PdcRearDelayCallback(void *argument)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcRearDelayCallback */
	Pdc_RearGenerateDelayFlag = STD_HIGH;
 8002c0c:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <PdcRearDelayCallback+0x1c>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	701a      	strb	r2, [r3, #0]
  /* USER CODE END PdcRearDelayCallback */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	200000fe 	.word	0x200000fe

08002c24 <PdcSecondRearDelayCallback>:

/* PdcSecondRearDelayCallback function */
void PdcSecondRearDelayCallback(void *argument)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PdcSecondRearDelayCallback */
	Pdc_SecondRearGenerateDelayFlag = STD_HIGH;
 8002c2c:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <PdcSecondRearDelayCallback+0x1c>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
  /* USER CODE END PdcSecondRearDelayCallback */
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20000102 	.word	0x20000102

08002c44 <RLTSHLCallback>:

/* RLTSHLCallback function */
void RLTSHLCallback(void *argument)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RLTSHLCallback */



  /* USER CODE END RLTSHLCallback */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08a      	sub	sp, #40	; 0x28
 8002c5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5e:	f107 0314 	add.w	r3, r7, #20
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	605a      	str	r2, [r3, #4]
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	60da      	str	r2, [r3, #12]
 8002c6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	4b3c      	ldr	r3, [pc, #240]	; (8002d64 <MX_GPIO_Init+0x10c>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	4a3b      	ldr	r2, [pc, #236]	; (8002d64 <MX_GPIO_Init+0x10c>)
 8002c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7e:	4b39      	ldr	r3, [pc, #228]	; (8002d64 <MX_GPIO_Init+0x10c>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	4b35      	ldr	r3, [pc, #212]	; (8002d64 <MX_GPIO_Init+0x10c>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	4a34      	ldr	r2, [pc, #208]	; (8002d64 <MX_GPIO_Init+0x10c>)
 8002c94:	f043 0304 	orr.w	r3, r3, #4
 8002c98:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9a:	4b32      	ldr	r3, [pc, #200]	; (8002d64 <MX_GPIO_Init+0x10c>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60bb      	str	r3, [r7, #8]
 8002caa:	4b2e      	ldr	r3, [pc, #184]	; (8002d64 <MX_GPIO_Init+0x10c>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	4a2d      	ldr	r2, [pc, #180]	; (8002d64 <MX_GPIO_Init+0x10c>)
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb6:	4b2b      	ldr	r3, [pc, #172]	; (8002d64 <MX_GPIO_Init+0x10c>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	60bb      	str	r3, [r7, #8]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	4b27      	ldr	r3, [pc, #156]	; (8002d64 <MX_GPIO_Init+0x10c>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	4a26      	ldr	r2, [pc, #152]	; (8002d64 <MX_GPIO_Init+0x10c>)
 8002ccc:	f043 0302 	orr.w	r3, r3, #2
 8002cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd2:	4b24      	ldr	r3, [pc, #144]	; (8002d64 <MX_GPIO_Init+0x10c>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	607b      	str	r3, [r7, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LTS_Pin|RTS_Pin|IL_Pin|FL_Pin
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f641 411f 	movw	r1, #7199	; 0x1c1f
 8002ce4:	4820      	ldr	r0, [pc, #128]	; (8002d68 <MX_GPIO_Init+0x110>)
 8002ce6:	f003 fb0f 	bl	8006308 <HAL_GPIO_WritePin>
                          |BUZZ1_Pin|RFL_Pin|BL_Pin|PRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LPN_Pin|DRL_Pin|LB_Pin|GPIO_PIN_12
 8002cea:	2200      	movs	r2, #0
 8002cec:	f249 0113 	movw	r1, #36883	; 0x9013
 8002cf0:	481e      	ldr	r0, [pc, #120]	; (8002d6c <MX_GPIO_Init+0x114>)
 8002cf2:	f003 fb09 	bl	8006308 <HAL_GPIO_WritePin>
                          |SAL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HB_Pin|BUZZ2_Pin|BUZZ3_Pin|BUZZ4_Pin
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f24e 0181 	movw	r1, #57473	; 0xe081
 8002cfc:	481c      	ldr	r0, [pc, #112]	; (8002d70 <MX_GPIO_Init+0x118>)
 8002cfe:	f003 fb03 	bl	8006308 <HAL_GPIO_WritePin>
                          |CLL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LTS_Pin|RTS_Pin|IL_Pin|FL_Pin
 8002d02:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002d06:	617b      	str	r3, [r7, #20]
                          |BUZZ1_Pin|RFL_Pin|BL_Pin|PRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d10:	2300      	movs	r3, #0
 8002d12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d14:	f107 0314 	add.w	r3, r7, #20
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4813      	ldr	r0, [pc, #76]	; (8002d68 <MX_GPIO_Init+0x110>)
 8002d1c:	f003 f834 	bl	8005d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PA12
                           PAPin */
  GPIO_InitStruct.Pin = LPN_Pin|DRL_Pin|LB_Pin|GPIO_PIN_12
 8002d20:	f249 0313 	movw	r3, #36883	; 0x9013
 8002d24:	617b      	str	r3, [r7, #20]
                          |SAL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d26:	2301      	movs	r3, #1
 8002d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d32:	f107 0314 	add.w	r3, r7, #20
 8002d36:	4619      	mov	r1, r3
 8002d38:	480c      	ldr	r0, [pc, #48]	; (8002d6c <MX_GPIO_Init+0x114>)
 8002d3a:	f003 f825 	bl	8005d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = HB_Pin|BUZZ2_Pin|BUZZ3_Pin|BUZZ4_Pin
 8002d3e:	f24e 0381 	movw	r3, #57473	; 0xe081
 8002d42:	617b      	str	r3, [r7, #20]
                          |CLL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d44:	2301      	movs	r3, #1
 8002d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d50:	f107 0314 	add.w	r3, r7, #20
 8002d54:	4619      	mov	r1, r3
 8002d56:	4806      	ldr	r0, [pc, #24]	; (8002d70 <MX_GPIO_Init+0x118>)
 8002d58:	f003 f816 	bl	8005d88 <HAL_GPIO_Init>

}
 8002d5c:	bf00      	nop
 8002d5e:	3728      	adds	r7, #40	; 0x28
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40023800 	.word	0x40023800
 8002d68:	40020800 	.word	0x40020800
 8002d6c:	40020000 	.word	0x40020000
 8002d70:	40020400 	.word	0x40020400

08002d74 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <MX_I2C1_Init+0x50>)
 8002d7a:	4a13      	ldr	r2, [pc, #76]	; (8002dc8 <MX_I2C1_Init+0x54>)
 8002d7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002d7e:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <MX_I2C1_Init+0x50>)
 8002d80:	4a12      	ldr	r2, [pc, #72]	; (8002dcc <MX_I2C1_Init+0x58>)
 8002d82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d84:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <MX_I2C1_Init+0x50>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d8a:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <MX_I2C1_Init+0x50>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <MX_I2C1_Init+0x50>)
 8002d92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d98:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <MX_I2C1_Init+0x50>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d9e:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <MX_I2C1_Init+0x50>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002da4:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <MX_I2C1_Init+0x50>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002daa:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <MX_I2C1_Init+0x50>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002db0:	4804      	ldr	r0, [pc, #16]	; (8002dc4 <MX_I2C1_Init+0x50>)
 8002db2:	f003 fadb 	bl	800636c <HAL_I2C_Init>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002dbc:	f000 f9e0 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002dc0:	bf00      	nop
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000204 	.word	0x20000204
 8002dc8:	40005400 	.word	0x40005400
 8002dcc:	000186a0 	.word	0x000186a0

08002dd0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002dd4:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <MX_I2C3_Init+0x50>)
 8002dd6:	4a13      	ldr	r2, [pc, #76]	; (8002e24 <MX_I2C3_Init+0x54>)
 8002dd8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002dda:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <MX_I2C3_Init+0x50>)
 8002ddc:	4a12      	ldr	r2, [pc, #72]	; (8002e28 <MX_I2C3_Init+0x58>)
 8002dde:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002de0:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <MX_I2C3_Init+0x50>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002de6:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <MX_I2C3_Init+0x50>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dec:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <MX_I2C3_Init+0x50>)
 8002dee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002df2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002df4:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <MX_I2C3_Init+0x50>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002dfa:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <MX_I2C3_Init+0x50>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e00:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <MX_I2C3_Init+0x50>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <MX_I2C3_Init+0x50>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002e0c:	4804      	ldr	r0, [pc, #16]	; (8002e20 <MX_I2C3_Init+0x50>)
 8002e0e:	f003 faad 	bl	800636c <HAL_I2C_Init>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002e18:	f000 f9b2 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002e1c:	bf00      	nop
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	20000288 	.word	0x20000288
 8002e24:	40005c00 	.word	0x40005c00
 8002e28:	000186a0 	.word	0x000186a0

08002e2c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08c      	sub	sp, #48	; 0x30
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e34:	f107 031c 	add.w	r3, r7, #28
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	60da      	str	r2, [r3, #12]
 8002e42:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a52      	ldr	r2, [pc, #328]	; (8002f94 <HAL_I2C_MspInit+0x168>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d13d      	bne.n	8002eca <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61bb      	str	r3, [r7, #24]
 8002e52:	4b51      	ldr	r3, [pc, #324]	; (8002f98 <HAL_I2C_MspInit+0x16c>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	4a50      	ldr	r2, [pc, #320]	; (8002f98 <HAL_I2C_MspInit+0x16c>)
 8002e58:	f043 0302 	orr.w	r3, r3, #2
 8002e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5e:	4b4e      	ldr	r3, [pc, #312]	; (8002f98 <HAL_I2C_MspInit+0x16c>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	61bb      	str	r3, [r7, #24]
 8002e68:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e70:	2312      	movs	r3, #18
 8002e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e80:	f107 031c 	add.w	r3, r7, #28
 8002e84:	4619      	mov	r1, r3
 8002e86:	4845      	ldr	r0, [pc, #276]	; (8002f9c <HAL_I2C_MspInit+0x170>)
 8002e88:	f002 ff7e 	bl	8005d88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	4b41      	ldr	r3, [pc, #260]	; (8002f98 <HAL_I2C_MspInit+0x16c>)
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	4a40      	ldr	r2, [pc, #256]	; (8002f98 <HAL_I2C_MspInit+0x16c>)
 8002e96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e9a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9c:	4b3e      	ldr	r3, [pc, #248]	; (8002f98 <HAL_I2C_MspInit+0x16c>)
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	2105      	movs	r1, #5
 8002eac:	201f      	movs	r0, #31
 8002eae:	f001 ff9d 	bl	8004dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002eb2:	201f      	movs	r0, #31
 8002eb4:	f001 ffc6 	bl	8004e44 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2105      	movs	r1, #5
 8002ebc:	2020      	movs	r0, #32
 8002ebe:	f001 ff95 	bl	8004dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002ec2:	2020      	movs	r0, #32
 8002ec4:	f001 ffbe 	bl	8004e44 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002ec8:	e060      	b.n	8002f8c <HAL_I2C_MspInit+0x160>
  else if(i2cHandle->Instance==I2C3)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a34      	ldr	r2, [pc, #208]	; (8002fa0 <HAL_I2C_MspInit+0x174>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d15b      	bne.n	8002f8c <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	4b2f      	ldr	r3, [pc, #188]	; (8002f98 <HAL_I2C_MspInit+0x16c>)
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	4a2e      	ldr	r2, [pc, #184]	; (8002f98 <HAL_I2C_MspInit+0x16c>)
 8002ede:	f043 0304 	orr.w	r3, r3, #4
 8002ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee4:	4b2c      	ldr	r3, [pc, #176]	; (8002f98 <HAL_I2C_MspInit+0x16c>)
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	4b28      	ldr	r3, [pc, #160]	; (8002f98 <HAL_I2C_MspInit+0x16c>)
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	4a27      	ldr	r2, [pc, #156]	; (8002f98 <HAL_I2C_MspInit+0x16c>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	6313      	str	r3, [r2, #48]	; 0x30
 8002f00:	4b25      	ldr	r3, [pc, #148]	; (8002f98 <HAL_I2C_MspInit+0x16c>)
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f12:	2312      	movs	r3, #18
 8002f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f1e:	2304      	movs	r3, #4
 8002f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f22:	f107 031c 	add.w	r3, r7, #28
 8002f26:	4619      	mov	r1, r3
 8002f28:	481e      	ldr	r0, [pc, #120]	; (8002fa4 <HAL_I2C_MspInit+0x178>)
 8002f2a:	f002 ff2d 	bl	8005d88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f34:	2312      	movs	r3, #18
 8002f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f40:	2304      	movs	r3, #4
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f44:	f107 031c 	add.w	r3, r7, #28
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4817      	ldr	r0, [pc, #92]	; (8002fa8 <HAL_I2C_MspInit+0x17c>)
 8002f4c:	f002 ff1c 	bl	8005d88 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002f50:	2300      	movs	r3, #0
 8002f52:	60bb      	str	r3, [r7, #8]
 8002f54:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <HAL_I2C_MspInit+0x16c>)
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	4a0f      	ldr	r2, [pc, #60]	; (8002f98 <HAL_I2C_MspInit+0x16c>)
 8002f5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f60:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <HAL_I2C_MspInit+0x16c>)
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	2105      	movs	r1, #5
 8002f70:	2048      	movs	r0, #72	; 0x48
 8002f72:	f001 ff3b 	bl	8004dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8002f76:	2048      	movs	r0, #72	; 0x48
 8002f78:	f001 ff64 	bl	8004e44 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2105      	movs	r1, #5
 8002f80:	2049      	movs	r0, #73	; 0x49
 8002f82:	f001 ff33 	bl	8004dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8002f86:	2049      	movs	r0, #73	; 0x49
 8002f88:	f001 ff5c 	bl	8004e44 <HAL_NVIC_EnableIRQ>
}
 8002f8c:	bf00      	nop
 8002f8e:	3730      	adds	r7, #48	; 0x30
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40005400 	.word	0x40005400
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	40020400 	.word	0x40020400
 8002fa0:	40005c00 	.word	0x40005c00
 8002fa4:	40020800 	.word	0x40020800
 8002fa8:	40020000 	.word	0x40020000

08002fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fb0:	f000 fef8 	bl	8003da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fb4:	f000 f82a 	bl	800300c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fb8:	f7ff fe4e 	bl	8002c58 <MX_GPIO_Init>
  MX_DMA_Init();
 8002fbc:	f7ff fcd4 	bl	8002968 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002fc0:	f000 fdb2 	bl	8003b28 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002fc4:	f000 fb5c 	bl	8003680 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002fc8:	f000 fba8 	bl	800371c <MX_TIM3_Init>
  MX_TIM5_Init();
 8002fcc:	f000 fc42 	bl	8003854 <MX_TIM5_Init>
  MX_TIM4_Init();
 8002fd0:	f000 fbf2 	bl	80037b8 <MX_TIM4_Init>
  MX_ADC1_Init();
 8002fd4:	f7ff fb96 	bl	8002704 <MX_ADC1_Init>
  MX_CRC_Init();
 8002fd8:	f7ff fc90 	bl	80028fc <MX_CRC_Init>
  MX_TIM9_Init();
 8002fdc:	f000 fc8a 	bl	80038f4 <MX_TIM9_Init>
  MX_I2C3_Init();
 8002fe0:	f7ff fef6 	bl	8002dd0 <MX_I2C3_Init>
  MX_SPI1_Init();
 8002fe4:	f000 f8dc 	bl	80031a0 <MX_SPI1_Init>
  MX_MBEDTLS_Init();
 8002fe8:	f008 fb84 	bl	800b6f4 <MX_MBEDTLS_Init>
  MX_TIM11_Init();
 8002fec:	f000 fcbc 	bl	8003968 <MX_TIM11_Init>
  MX_I2C1_Init();
 8002ff0:	f7ff fec0 	bl	8002d74 <MX_I2C1_Init>
  /* Call PreOsInit function */
  MX_MBEDTLS_Init();
 8002ff4:	f008 fb7e 	bl	800b6f4 <MX_MBEDTLS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002ff8:	f000 f870 	bl	80030dc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002ffc:	f008 fbc6 	bl	800b78c <osKernelInitialize>
  MX_FREERTOS_Init();
 8003000:	f7ff fd1c 	bl	8002a3c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003004:	f008 fbe6 	bl	800b7d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003008:	e7fe      	b.n	8003008 <main+0x5c>
	...

0800300c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b094      	sub	sp, #80	; 0x50
 8003010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003012:	f107 0320 	add.w	r3, r7, #32
 8003016:	2230      	movs	r2, #48	; 0x30
 8003018:	2100      	movs	r1, #0
 800301a:	4618      	mov	r0, r3
 800301c:	f00b fd82 	bl	800eb24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003020:	f107 030c 	add.w	r3, r7, #12
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	60da      	str	r2, [r3, #12]
 800302e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003030:	2300      	movs	r3, #0
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	4b27      	ldr	r3, [pc, #156]	; (80030d4 <SystemClock_Config+0xc8>)
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	4a26      	ldr	r2, [pc, #152]	; (80030d4 <SystemClock_Config+0xc8>)
 800303a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800303e:	6413      	str	r3, [r2, #64]	; 0x40
 8003040:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <SystemClock_Config+0xc8>)
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800304c:	2300      	movs	r3, #0
 800304e:	607b      	str	r3, [r7, #4]
 8003050:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <SystemClock_Config+0xcc>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a20      	ldr	r2, [pc, #128]	; (80030d8 <SystemClock_Config+0xcc>)
 8003056:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	4b1e      	ldr	r3, [pc, #120]	; (80030d8 <SystemClock_Config+0xcc>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003064:	607b      	str	r3, [r7, #4]
 8003066:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003068:	2301      	movs	r3, #1
 800306a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800306c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003072:	2302      	movs	r3, #2
 8003074:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003076:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800307a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800307c:	2304      	movs	r3, #4
 800307e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003080:	2364      	movs	r3, #100	; 0x64
 8003082:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003084:	2302      	movs	r3, #2
 8003086:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003088:	2304      	movs	r3, #4
 800308a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800308c:	f107 0320 	add.w	r3, r7, #32
 8003090:	4618      	mov	r0, r3
 8003092:	f005 f885 	bl	80081a0 <HAL_RCC_OscConfig>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800309c:	f000 f870 	bl	8003180 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030a0:	230f      	movs	r3, #15
 80030a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030a4:	2302      	movs	r3, #2
 80030a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80030b6:	f107 030c 	add.w	r3, r7, #12
 80030ba:	2103      	movs	r1, #3
 80030bc:	4618      	mov	r0, r3
 80030be:	f005 fb97 	bl	80087f0 <HAL_RCC_ClockConfig>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80030c8:	f000 f85a 	bl	8003180 <Error_Handler>
  }
}
 80030cc:	bf00      	nop
 80030ce:	3750      	adds	r7, #80	; 0x50
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40023800 	.word	0x40023800
 80030d8:	40007000 	.word	0x40007000

080030dc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 80030e0:	2200      	movs	r2, #0
 80030e2:	2105      	movs	r1, #5
 80030e4:	2004      	movs	r0, #4
 80030e6:	f001 fe81 	bl	8004dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80030ea:	2004      	movs	r0, #4
 80030ec:	f001 feaa 	bl	8004e44 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 80030f0:	2200      	movs	r2, #0
 80030f2:	2105      	movs	r1, #5
 80030f4:	2051      	movs	r0, #81	; 0x51
 80030f6:	f001 fe79 	bl	8004dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80030fa:	2051      	movs	r0, #81	; 0x51
 80030fc:	f001 fea2 	bl	8004e44 <HAL_NVIC_EnableIRQ>
}
 8003100:	bf00      	nop
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if(htim->Instance == TIM2)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003114:	d11a      	bne.n	800314c <HAL_TIM_PeriodElapsedCallback+0x48>
	{

		if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8003116:	4b13      	ldr	r3, [pc, #76]	; (8003164 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d104      	bne.n	8003128 <HAL_TIM_PeriodElapsedCallback+0x24>
		{

			ExtLights_LTSFlag++;
 800311e:	4b12      	ldr	r3, [pc, #72]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3301      	adds	r3, #1
 8003124:	4a10      	ldr	r2, [pc, #64]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003126:	6013      	str	r3, [r2, #0]

			/* do nothing */

		}

		if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8003128:	4b10      	ldr	r3, [pc, #64]	; (800316c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d104      	bne.n	800313a <HAL_TIM_PeriodElapsedCallback+0x36>
		{

			ExtLights_RTSFlag++;
 8003130:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	3301      	adds	r3, #1
 8003136:	4a0e      	ldr	r2, [pc, #56]	; (8003170 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003138:	6013      	str	r3, [r2, #0]

			/* do nothing */

		}

		if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d104      	bne.n	800314c <HAL_TIM_PeriodElapsedCallback+0x48>
		{

			ExtLights_HLFlag++;
 8003142:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3301      	adds	r3, #1
 8003148:	4a0b      	ldr	r2, [pc, #44]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800314a:	6013      	str	r3, [r2, #0]
		/* do nothin */

	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a0a      	ldr	r2, [pc, #40]	; (800317c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d101      	bne.n	800315a <HAL_TIM_PeriodElapsedCallback+0x56>
    HAL_IncTick();
 8003156:	f000 fe47 	bl	8003de8 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */



  /* USER CODE END Callback 1 */
}
 800315a:	bf00      	nop
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	200000a2 	.word	0x200000a2
 8003168:	200000b8 	.word	0x200000b8
 800316c:	200000a3 	.word	0x200000a3
 8003170:	200000b4 	.word	0x200000b4
 8003174:	200000a4 	.word	0x200000a4
 8003178:	200000bc 	.word	0x200000bc
 800317c:	40010000 	.word	0x40010000

08003180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003184:	b672      	cpsid	i
}
 8003186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003188:	e7fe      	b.n	8003188 <Error_Handler+0x8>

0800318a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80031a4:	4b17      	ldr	r3, [pc, #92]	; (8003204 <MX_SPI1_Init+0x64>)
 80031a6:	4a18      	ldr	r2, [pc, #96]	; (8003208 <MX_SPI1_Init+0x68>)
 80031a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031aa:	4b16      	ldr	r3, [pc, #88]	; (8003204 <MX_SPI1_Init+0x64>)
 80031ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031b2:	4b14      	ldr	r3, [pc, #80]	; (8003204 <MX_SPI1_Init+0x64>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80031b8:	4b12      	ldr	r3, [pc, #72]	; (8003204 <MX_SPI1_Init+0x64>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <MX_SPI1_Init+0x64>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031c4:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <MX_SPI1_Init+0x64>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80031ca:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <MX_SPI1_Init+0x64>)
 80031cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031d2:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <MX_SPI1_Init+0x64>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031d8:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <MX_SPI1_Init+0x64>)
 80031da:	2200      	movs	r2, #0
 80031dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80031de:	4b09      	ldr	r3, [pc, #36]	; (8003204 <MX_SPI1_Init+0x64>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e4:	4b07      	ldr	r3, [pc, #28]	; (8003204 <MX_SPI1_Init+0x64>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80031ea:	4b06      	ldr	r3, [pc, #24]	; (8003204 <MX_SPI1_Init+0x64>)
 80031ec:	220a      	movs	r2, #10
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031f0:	4804      	ldr	r0, [pc, #16]	; (8003204 <MX_SPI1_Init+0x64>)
 80031f2:	f005 fdf7 	bl	8008de4 <HAL_SPI_Init>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80031fc:	f7ff ffc0 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003200:	bf00      	nop
 8003202:	bd80      	pop	{r7, pc}
 8003204:	2000030c 	.word	0x2000030c
 8003208:	40013000 	.word	0x40013000

0800320c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	; 0x28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003214:	f107 0314 	add.w	r3, r7, #20
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	60da      	str	r2, [r3, #12]
 8003222:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a2c      	ldr	r2, [pc, #176]	; (80032dc <HAL_SPI_MspInit+0xd0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d151      	bne.n	80032d2 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	4b2b      	ldr	r3, [pc, #172]	; (80032e0 <HAL_SPI_MspInit+0xd4>)
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	4a2a      	ldr	r2, [pc, #168]	; (80032e0 <HAL_SPI_MspInit+0xd4>)
 8003238:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800323c:	6453      	str	r3, [r2, #68]	; 0x44
 800323e:	4b28      	ldr	r3, [pc, #160]	; (80032e0 <HAL_SPI_MspInit+0xd4>)
 8003240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	4b24      	ldr	r3, [pc, #144]	; (80032e0 <HAL_SPI_MspInit+0xd4>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	4a23      	ldr	r2, [pc, #140]	; (80032e0 <HAL_SPI_MspInit+0xd4>)
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	6313      	str	r3, [r2, #48]	; 0x30
 800325a:	4b21      	ldr	r3, [pc, #132]	; (80032e0 <HAL_SPI_MspInit+0xd4>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <HAL_SPI_MspInit+0xd4>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	4a1c      	ldr	r2, [pc, #112]	; (80032e0 <HAL_SPI_MspInit+0xd4>)
 8003270:	f043 0302 	orr.w	r3, r3, #2
 8003274:	6313      	str	r3, [r2, #48]	; 0x30
 8003276:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <HAL_SPI_MspInit+0xd4>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003282:	23a0      	movs	r3, #160	; 0xa0
 8003284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003286:	2302      	movs	r3, #2
 8003288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800328e:	2303      	movs	r3, #3
 8003290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003292:	2305      	movs	r3, #5
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003296:	f107 0314 	add.w	r3, r7, #20
 800329a:	4619      	mov	r1, r3
 800329c:	4811      	ldr	r0, [pc, #68]	; (80032e4 <HAL_SPI_MspInit+0xd8>)
 800329e:	f002 fd73 	bl	8005d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80032a2:	2310      	movs	r3, #16
 80032a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a6:	2302      	movs	r3, #2
 80032a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ae:	2303      	movs	r3, #3
 80032b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032b2:	2305      	movs	r3, #5
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b6:	f107 0314 	add.w	r3, r7, #20
 80032ba:	4619      	mov	r1, r3
 80032bc:	480a      	ldr	r0, [pc, #40]	; (80032e8 <HAL_SPI_MspInit+0xdc>)
 80032be:	f002 fd63 	bl	8005d88 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80032c2:	2200      	movs	r2, #0
 80032c4:	2105      	movs	r1, #5
 80032c6:	2023      	movs	r0, #35	; 0x23
 80032c8:	f001 fd90 	bl	8004dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80032cc:	2023      	movs	r0, #35	; 0x23
 80032ce:	f001 fdb9 	bl	8004e44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80032d2:	bf00      	nop
 80032d4:	3728      	adds	r7, #40	; 0x28
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40013000 	.word	0x40013000
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40020000 	.word	0x40020000
 80032e8:	40020400 	.word	0x40020400

080032ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	607b      	str	r3, [r7, #4]
 80032f6:	4b1a      	ldr	r3, [pc, #104]	; (8003360 <HAL_MspInit+0x74>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	4a19      	ldr	r2, [pc, #100]	; (8003360 <HAL_MspInit+0x74>)
 80032fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003300:	6453      	str	r3, [r2, #68]	; 0x44
 8003302:	4b17      	ldr	r3, [pc, #92]	; (8003360 <HAL_MspInit+0x74>)
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800330a:	607b      	str	r3, [r7, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	603b      	str	r3, [r7, #0]
 8003312:	4b13      	ldr	r3, [pc, #76]	; (8003360 <HAL_MspInit+0x74>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	4a12      	ldr	r2, [pc, #72]	; (8003360 <HAL_MspInit+0x74>)
 8003318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331c:	6413      	str	r3, [r2, #64]	; 0x40
 800331e:	4b10      	ldr	r3, [pc, #64]	; (8003360 <HAL_MspInit+0x74>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800332a:	2200      	movs	r2, #0
 800332c:	210f      	movs	r1, #15
 800332e:	f06f 0001 	mvn.w	r0, #1
 8003332:	f001 fd5b 	bl	8004dec <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8003336:	2200      	movs	r2, #0
 8003338:	2105      	movs	r1, #5
 800333a:	2001      	movs	r0, #1
 800333c:	f001 fd56 	bl	8004dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8003340:	2001      	movs	r0, #1
 8003342:	f001 fd7f 	bl	8004e44 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8003346:	2200      	movs	r2, #0
 8003348:	2105      	movs	r1, #5
 800334a:	2005      	movs	r0, #5
 800334c:	f001 fd4e 	bl	8004dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003350:	2005      	movs	r0, #5
 8003352:	f001 fd77 	bl	8004e44 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40023800 	.word	0x40023800

08003364 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08c      	sub	sp, #48	; 0x30
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003374:	2300      	movs	r3, #0
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	4b2e      	ldr	r3, [pc, #184]	; (8003434 <HAL_InitTick+0xd0>)
 800337a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337c:	4a2d      	ldr	r2, [pc, #180]	; (8003434 <HAL_InitTick+0xd0>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6453      	str	r3, [r2, #68]	; 0x44
 8003384:	4b2b      	ldr	r3, [pc, #172]	; (8003434 <HAL_InitTick+0xd0>)
 8003386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003390:	f107 020c 	add.w	r2, r7, #12
 8003394:	f107 0310 	add.w	r3, r7, #16
 8003398:	4611      	mov	r1, r2
 800339a:	4618      	mov	r0, r3
 800339c:	f005 fcf0 	bl	8008d80 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80033a0:	f005 fcda 	bl	8008d58 <HAL_RCC_GetPCLK2Freq>
 80033a4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80033a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a8:	4a23      	ldr	r2, [pc, #140]	; (8003438 <HAL_InitTick+0xd4>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	0c9b      	lsrs	r3, r3, #18
 80033b0:	3b01      	subs	r3, #1
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80033b4:	4b21      	ldr	r3, [pc, #132]	; (800343c <HAL_InitTick+0xd8>)
 80033b6:	4a22      	ldr	r2, [pc, #136]	; (8003440 <HAL_InitTick+0xdc>)
 80033b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80033ba:	4b20      	ldr	r3, [pc, #128]	; (800343c <HAL_InitTick+0xd8>)
 80033bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80033c0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80033c2:	4a1e      	ldr	r2, [pc, #120]	; (800343c <HAL_InitTick+0xd8>)
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80033c8:	4b1c      	ldr	r3, [pc, #112]	; (800343c <HAL_InitTick+0xd8>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ce:	4b1b      	ldr	r3, [pc, #108]	; (800343c <HAL_InitTick+0xd8>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033d4:	4b19      	ldr	r3, [pc, #100]	; (800343c <HAL_InitTick+0xd8>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80033da:	4818      	ldr	r0, [pc, #96]	; (800343c <HAL_InitTick+0xd8>)
 80033dc:	f006 f836 	bl	800944c <HAL_TIM_Base_Init>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80033e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d11b      	bne.n	8003426 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80033ee:	4813      	ldr	r0, [pc, #76]	; (800343c <HAL_InitTick+0xd8>)
 80033f0:	f006 f8fe 	bl	80095f0 <HAL_TIM_Base_Start_IT>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80033fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d111      	bne.n	8003426 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003402:	2019      	movs	r0, #25
 8003404:	f001 fd1e 	bl	8004e44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b0f      	cmp	r3, #15
 800340c:	d808      	bhi.n	8003420 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800340e:	2200      	movs	r2, #0
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	2019      	movs	r0, #25
 8003414:	f001 fcea 	bl	8004dec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003418:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <HAL_InitTick+0xe0>)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e002      	b.n	8003426 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003426:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800342a:	4618      	mov	r0, r3
 800342c:	3730      	adds	r7, #48	; 0x30
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40023800 	.word	0x40023800
 8003438:	431bde83 	.word	0x431bde83
 800343c:	2000038c 	.word	0x2000038c
 8003440:	40010000 	.word	0x40010000
 8003444:	20000004 	.word	0x20000004

08003448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800344c:	e7fe      	b.n	800344c <NMI_Handler+0x4>

0800344e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800344e:	b480      	push	{r7}
 8003450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003452:	e7fe      	b.n	8003452 <HardFault_Handler+0x4>

08003454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003458:	e7fe      	b.n	8003458 <MemManage_Handler+0x4>

0800345a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800345a:	b480      	push	{r7}
 800345c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800345e:	e7fe      	b.n	800345e <BusFault_Handler+0x4>

08003460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003464:	e7fe      	b.n	8003464 <UsageFault_Handler+0x4>

08003466 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003466:	b480      	push	{r7}
 8003468:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8003478:	f004 fe78 	bl	800816c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800347c:	bf00      	nop
 800347e:	bd80      	pop	{r7, pc}

08003480 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8003484:	f002 faaa 	bl	80059dc <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8003488:	bf00      	nop
 800348a:	bd80      	pop	{r7, pc}

0800348c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003490:	bf00      	nop
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
	...

0800349c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80034a0:	4802      	ldr	r0, [pc, #8]	; (80034ac <ADC_IRQHandler+0x10>)
 80034a2:	f000 fe43 	bl	800412c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000110 	.word	0x20000110

080034b0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80034b4:	4802      	ldr	r0, [pc, #8]	; (80034c0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80034b6:	f006 f997 	bl	80097e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000710 	.word	0x20000710

080034c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034c8:	4802      	ldr	r0, [pc, #8]	; (80034d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80034ca:	f006 f98d 	bl	80097e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	2000038c 	.word	0x2000038c

080034d8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
	if(CenLoc_Tim3IRQFlag == 2)
 80034dc:	4b07      	ldr	r3, [pc, #28]	; (80034fc <TIM1_TRG_COM_TIM11_IRQHandler+0x24>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d105      	bne.n	80034f0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>
	{

		CenLoc_Tim11IRQFlag++;
 80034e4:	4b06      	ldr	r3, [pc, #24]	; (8003500 <TIM1_TRG_COM_TIM11_IRQHandler+0x28>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	3301      	adds	r3, #1
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	4b04      	ldr	r3, [pc, #16]	; (8003500 <TIM1_TRG_COM_TIM11_IRQHandler+0x28>)
 80034ee:	701a      	strb	r2, [r3, #0]
		/* do nothing */

	}

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80034f0:	4804      	ldr	r0, [pc, #16]	; (8003504 <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 80034f2:	f006 f979 	bl	80097e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20000099 	.word	0x20000099
 8003500:	2000009b 	.word	0x2000009b
 8003504:	200007c4 	.word	0x200007c4

08003508 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	if((CenLoc_CurrentState == STD_LOW && CenLoc_PreviousStateFlag == STD_HIGH) || (CenLoc_CurrentState == STD_HIGH && CenLoc_PreviousStateFlag == STD_LOW))
 800350c:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <TIM2_IRQHandler+0x3c>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d103      	bne.n	800351c <TIM2_IRQHandler+0x14>
 8003514:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <TIM2_IRQHandler+0x40>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d007      	beq.n	800352c <TIM2_IRQHandler+0x24>
 800351c:	4b09      	ldr	r3, [pc, #36]	; (8003544 <TIM2_IRQHandler+0x3c>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d109      	bne.n	8003538 <TIM2_IRQHandler+0x30>
 8003524:	4b08      	ldr	r3, [pc, #32]	; (8003548 <TIM2_IRQHandler+0x40>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d105      	bne.n	8003538 <TIM2_IRQHandler+0x30>
	{

		CenLoc_Tim2IRQFlag = CenLoc_Tim2IRQFlag + 1;
 800352c:	4b07      	ldr	r3, [pc, #28]	; (800354c <TIM2_IRQHandler+0x44>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	3301      	adds	r3, #1
 8003532:	b2da      	uxtb	r2, r3
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <TIM2_IRQHandler+0x44>)
 8003536:	701a      	strb	r2, [r3, #0]
		/* do nothing */

	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003538:	4805      	ldr	r0, [pc, #20]	; (8003550 <TIM2_IRQHandler+0x48>)
 800353a:	f006 f955 	bl	80097e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000091 	.word	0x20000091
 8003548:	20000095 	.word	0x20000095
 800354c:	20000098 	.word	0x20000098
 8003550:	20000440 	.word	0x20000440

08003554 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	CenLoc_Tim3IRQFlag++;
 8003558:	4b05      	ldr	r3, [pc, #20]	; (8003570 <TIM3_IRQHandler+0x1c>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	3301      	adds	r3, #1
 800355e:	b2da      	uxtb	r2, r3
 8003560:	4b03      	ldr	r3, [pc, #12]	; (8003570 <TIM3_IRQHandler+0x1c>)
 8003562:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003564:	4803      	ldr	r0, [pc, #12]	; (8003574 <TIM3_IRQHandler+0x20>)
 8003566:	f006 f93f 	bl	80097e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800356a:	bf00      	nop
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	20000099 	.word	0x20000099
 8003574:	200004f4 	.word	0x200004f4

08003578 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	SecAlm_TriggerIRQCounterForTimer4++;
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <TIM4_IRQHandler+0x1c>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	3301      	adds	r3, #1
 8003582:	b2da      	uxtb	r2, r3
 8003584:	4b03      	ldr	r3, [pc, #12]	; (8003594 <TIM4_IRQHandler+0x1c>)
 8003586:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003588:	4803      	ldr	r0, [pc, #12]	; (8003598 <TIM4_IRQHandler+0x20>)
 800358a:	f006 f92d 	bl	80097e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20000108 	.word	0x20000108
 8003598:	200005a8 	.word	0x200005a8

0800359c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80035a0:	4802      	ldr	r0, [pc, #8]	; (80035ac <I2C1_EV_IRQHandler+0x10>)
 80035a2:	f003 f8ed 	bl	8006780 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000204 	.word	0x20000204

080035b0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80035b4:	4802      	ldr	r0, [pc, #8]	; (80035c0 <I2C1_ER_IRQHandler+0x10>)
 80035b6:	f003 fa54 	bl	8006a62 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20000204 	.word	0x20000204

080035c4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <SPI1_IRQHandler+0x10>)
 80035ca:	f005 fdd9 	bl	8009180 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	2000030c 	.word	0x2000030c

080035d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035dc:	4802      	ldr	r0, [pc, #8]	; (80035e8 <USART1_IRQHandler+0x10>)
 80035de:	f007 f8d7 	bl	800a790 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000878 	.word	0x20000878

080035ec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	CenLoc_Tim5IRQFlag++;
 80035f0:	4b05      	ldr	r3, [pc, #20]	; (8003608 <TIM5_IRQHandler+0x1c>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	3301      	adds	r3, #1
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	4b03      	ldr	r3, [pc, #12]	; (8003608 <TIM5_IRQHandler+0x1c>)
 80035fa:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80035fc:	4803      	ldr	r0, [pc, #12]	; (800360c <TIM5_IRQHandler+0x20>)
 80035fe:	f006 f8f3 	bl	80097e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	2000009a 	.word	0x2000009a
 800360c:	2000065c 	.word	0x2000065c

08003610 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003614:	4802      	ldr	r0, [pc, #8]	; (8003620 <DMA2_Stream0_IRQHandler+0x10>)
 8003616:	f001 ff69 	bl	80054ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800361a:	bf00      	nop
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20000174 	.word	0x20000174

08003624 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8003628:	4802      	ldr	r0, [pc, #8]	; (8003634 <I2C3_EV_IRQHandler+0x10>)
 800362a:	f003 f8a9 	bl	8006780 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800362e:	bf00      	nop
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20000288 	.word	0x20000288

08003638 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 800363c:	4802      	ldr	r0, [pc, #8]	; (8003648 <I2C3_ER_IRQHandler+0x10>)
 800363e:	f003 fa10 	bl	8006a62 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8003642:	bf00      	nop
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	20000288 	.word	0x20000288

0800364c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003650:	bf00      	nop
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
	...

0800365c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003660:	4b06      	ldr	r3, [pc, #24]	; (800367c <SystemInit+0x20>)
 8003662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003666:	4a05      	ldr	r2, [pc, #20]	; (800367c <SystemInit+0x20>)
 8003668:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800366c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003670:	bf00      	nop
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	e000ed00 	.word	0xe000ed00

08003680 <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003686:	f107 0308 	add.w	r3, r7, #8
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	609a      	str	r2, [r3, #8]
 8003692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003694:	463b      	mov	r3, r7
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800369c:	4b1e      	ldr	r3, [pc, #120]	; (8003718 <MX_TIM2_Init+0x98>)
 800369e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 80036a4:	4b1c      	ldr	r3, [pc, #112]	; (8003718 <MX_TIM2_Init+0x98>)
 80036a6:	f242 720f 	movw	r2, #9999	; 0x270f
 80036aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ac:	4b1a      	ldr	r3, [pc, #104]	; (8003718 <MX_TIM2_Init+0x98>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 80036b2:	4b19      	ldr	r3, [pc, #100]	; (8003718 <MX_TIM2_Init+0x98>)
 80036b4:	f241 3287 	movw	r2, #4999	; 0x1387
 80036b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036ba:	4b17      	ldr	r3, [pc, #92]	; (8003718 <MX_TIM2_Init+0x98>)
 80036bc:	2200      	movs	r2, #0
 80036be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036c0:	4b15      	ldr	r3, [pc, #84]	; (8003718 <MX_TIM2_Init+0x98>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036c6:	4814      	ldr	r0, [pc, #80]	; (8003718 <MX_TIM2_Init+0x98>)
 80036c8:	f005 fec0 	bl	800944c <HAL_TIM_Base_Init>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80036d2:	f7ff fd55 	bl	8003180 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80036dc:	f107 0308 	add.w	r3, r7, #8
 80036e0:	4619      	mov	r1, r3
 80036e2:	480d      	ldr	r0, [pc, #52]	; (8003718 <MX_TIM2_Init+0x98>)
 80036e4:	f006 f9a8 	bl	8009a38 <HAL_TIM_ConfigClockSource>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80036ee:	f7ff fd47 	bl	8003180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036f2:	2300      	movs	r3, #0
 80036f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80036fa:	463b      	mov	r3, r7
 80036fc:	4619      	mov	r1, r3
 80036fe:	4806      	ldr	r0, [pc, #24]	; (8003718 <MX_TIM2_Init+0x98>)
 8003700:	f006 fe76 	bl	800a3f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800370a:	f7ff fd39 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800370e:	bf00      	nop
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20000440 	.word	0x20000440

0800371c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003722:	f107 0308 	add.w	r3, r7, #8
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	605a      	str	r2, [r3, #4]
 800372c:	609a      	str	r2, [r3, #8]
 800372e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003730:	463b      	mov	r3, r7
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003738:	4b1d      	ldr	r3, [pc, #116]	; (80037b0 <MX_TIM3_Init+0x94>)
 800373a:	4a1e      	ldr	r2, [pc, #120]	; (80037b4 <MX_TIM3_Init+0x98>)
 800373c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 800373e:	4b1c      	ldr	r3, [pc, #112]	; (80037b0 <MX_TIM3_Init+0x94>)
 8003740:	f242 720f 	movw	r2, #9999	; 0x270f
 8003744:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003746:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <MX_TIM3_Init+0x94>)
 8003748:	2200      	movs	r2, #0
 800374a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 800374c:	4b18      	ldr	r3, [pc, #96]	; (80037b0 <MX_TIM3_Init+0x94>)
 800374e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003752:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003754:	4b16      	ldr	r3, [pc, #88]	; (80037b0 <MX_TIM3_Init+0x94>)
 8003756:	2200      	movs	r2, #0
 8003758:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800375a:	4b15      	ldr	r3, [pc, #84]	; (80037b0 <MX_TIM3_Init+0x94>)
 800375c:	2200      	movs	r2, #0
 800375e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003760:	4813      	ldr	r0, [pc, #76]	; (80037b0 <MX_TIM3_Init+0x94>)
 8003762:	f005 fe73 	bl	800944c <HAL_TIM_Base_Init>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800376c:	f7ff fd08 	bl	8003180 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003774:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003776:	f107 0308 	add.w	r3, r7, #8
 800377a:	4619      	mov	r1, r3
 800377c:	480c      	ldr	r0, [pc, #48]	; (80037b0 <MX_TIM3_Init+0x94>)
 800377e:	f006 f95b 	bl	8009a38 <HAL_TIM_ConfigClockSource>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003788:	f7ff fcfa 	bl	8003180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800378c:	2300      	movs	r3, #0
 800378e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003790:	2300      	movs	r3, #0
 8003792:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003794:	463b      	mov	r3, r7
 8003796:	4619      	mov	r1, r3
 8003798:	4805      	ldr	r0, [pc, #20]	; (80037b0 <MX_TIM3_Init+0x94>)
 800379a:	f006 fe29 	bl	800a3f0 <HAL_TIMEx_MasterConfigSynchronization>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80037a4:	f7ff fcec 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80037a8:	bf00      	nop
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	200004f4 	.word	0x200004f4
 80037b4:	40000400 	.word	0x40000400

080037b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037be:	f107 0308 	add.w	r3, r7, #8
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	605a      	str	r2, [r3, #4]
 80037c8:	609a      	str	r2, [r3, #8]
 80037ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037cc:	463b      	mov	r3, r7
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80037d4:	4b1d      	ldr	r3, [pc, #116]	; (800384c <MX_TIM4_Init+0x94>)
 80037d6:	4a1e      	ldr	r2, [pc, #120]	; (8003850 <MX_TIM4_Init+0x98>)
 80037d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 80037da:	4b1c      	ldr	r3, [pc, #112]	; (800384c <MX_TIM4_Init+0x94>)
 80037dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80037e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037e2:	4b1a      	ldr	r3, [pc, #104]	; (800384c <MX_TIM4_Init+0x94>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000-1;
 80037e8:	4b18      	ldr	r3, [pc, #96]	; (800384c <MX_TIM4_Init+0x94>)
 80037ea:	f241 3287 	movw	r2, #4999	; 0x1387
 80037ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037f0:	4b16      	ldr	r3, [pc, #88]	; (800384c <MX_TIM4_Init+0x94>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037f6:	4b15      	ldr	r3, [pc, #84]	; (800384c <MX_TIM4_Init+0x94>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80037fc:	4813      	ldr	r0, [pc, #76]	; (800384c <MX_TIM4_Init+0x94>)
 80037fe:	f005 fe25 	bl	800944c <HAL_TIM_Base_Init>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003808:	f7ff fcba 	bl	8003180 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800380c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003810:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003812:	f107 0308 	add.w	r3, r7, #8
 8003816:	4619      	mov	r1, r3
 8003818:	480c      	ldr	r0, [pc, #48]	; (800384c <MX_TIM4_Init+0x94>)
 800381a:	f006 f90d 	bl	8009a38 <HAL_TIM_ConfigClockSource>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003824:	f7ff fcac 	bl	8003180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003828:	2300      	movs	r3, #0
 800382a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800382c:	2300      	movs	r3, #0
 800382e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003830:	463b      	mov	r3, r7
 8003832:	4619      	mov	r1, r3
 8003834:	4805      	ldr	r0, [pc, #20]	; (800384c <MX_TIM4_Init+0x94>)
 8003836:	f006 fddb 	bl	800a3f0 <HAL_TIMEx_MasterConfigSynchronization>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003840:	f7ff fc9e 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003844:	bf00      	nop
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	200005a8 	.word	0x200005a8
 8003850:	40000800 	.word	0x40000800

08003854 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800385a:	f107 0308 	add.w	r3, r7, #8
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	605a      	str	r2, [r3, #4]
 8003864:	609a      	str	r2, [r3, #8]
 8003866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003868:	463b      	mov	r3, r7
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003870:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <MX_TIM5_Init+0x94>)
 8003872:	4a1e      	ldr	r2, [pc, #120]	; (80038ec <MX_TIM5_Init+0x98>)
 8003874:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10000-1;
 8003876:	4b1c      	ldr	r3, [pc, #112]	; (80038e8 <MX_TIM5_Init+0x94>)
 8003878:	f242 720f 	movw	r2, #9999	; 0x270f
 800387c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800387e:	4b1a      	ldr	r3, [pc, #104]	; (80038e8 <MX_TIM5_Init+0x94>)
 8003880:	2200      	movs	r2, #0
 8003882:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000-1;
 8003884:	4b18      	ldr	r3, [pc, #96]	; (80038e8 <MX_TIM5_Init+0x94>)
 8003886:	4a1a      	ldr	r2, [pc, #104]	; (80038f0 <MX_TIM5_Init+0x9c>)
 8003888:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800388a:	4b17      	ldr	r3, [pc, #92]	; (80038e8 <MX_TIM5_Init+0x94>)
 800388c:	2200      	movs	r2, #0
 800388e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003890:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <MX_TIM5_Init+0x94>)
 8003892:	2200      	movs	r2, #0
 8003894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003896:	4814      	ldr	r0, [pc, #80]	; (80038e8 <MX_TIM5_Init+0x94>)
 8003898:	f005 fdd8 	bl	800944c <HAL_TIM_Base_Init>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80038a2:	f7ff fc6d 	bl	8003180 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80038ac:	f107 0308 	add.w	r3, r7, #8
 80038b0:	4619      	mov	r1, r3
 80038b2:	480d      	ldr	r0, [pc, #52]	; (80038e8 <MX_TIM5_Init+0x94>)
 80038b4:	f006 f8c0 	bl	8009a38 <HAL_TIM_ConfigClockSource>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80038be:	f7ff fc5f 	bl	8003180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038c2:	2300      	movs	r3, #0
 80038c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038c6:	2300      	movs	r3, #0
 80038c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80038ca:	463b      	mov	r3, r7
 80038cc:	4619      	mov	r1, r3
 80038ce:	4806      	ldr	r0, [pc, #24]	; (80038e8 <MX_TIM5_Init+0x94>)
 80038d0:	f006 fd8e 	bl	800a3f0 <HAL_TIMEx_MasterConfigSynchronization>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80038da:	f7ff fc51 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80038de:	bf00      	nop
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	2000065c 	.word	0x2000065c
 80038ec:	40000c00 	.word	0x40000c00
 80038f0:	0001869f 	.word	0x0001869f

080038f4 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038fa:	463b      	mov	r3, r7
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	605a      	str	r2, [r3, #4]
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003906:	4b16      	ldr	r3, [pc, #88]	; (8003960 <MX_TIM9_Init+0x6c>)
 8003908:	4a16      	ldr	r2, [pc, #88]	; (8003964 <MX_TIM9_Init+0x70>)
 800390a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10000-1;
 800390c:	4b14      	ldr	r3, [pc, #80]	; (8003960 <MX_TIM9_Init+0x6c>)
 800390e:	f242 720f 	movw	r2, #9999	; 0x270f
 8003912:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003914:	4b12      	ldr	r3, [pc, #72]	; (8003960 <MX_TIM9_Init+0x6c>)
 8003916:	2200      	movs	r2, #0
 8003918:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000-1;
 800391a:	4b11      	ldr	r3, [pc, #68]	; (8003960 <MX_TIM9_Init+0x6c>)
 800391c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003920:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003922:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <MX_TIM9_Init+0x6c>)
 8003924:	2200      	movs	r2, #0
 8003926:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003928:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <MX_TIM9_Init+0x6c>)
 800392a:	2200      	movs	r2, #0
 800392c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800392e:	480c      	ldr	r0, [pc, #48]	; (8003960 <MX_TIM9_Init+0x6c>)
 8003930:	f005 fd8c 	bl	800944c <HAL_TIM_Base_Init>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800393a:	f7ff fc21 	bl	8003180 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800393e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003942:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003944:	463b      	mov	r3, r7
 8003946:	4619      	mov	r1, r3
 8003948:	4805      	ldr	r0, [pc, #20]	; (8003960 <MX_TIM9_Init+0x6c>)
 800394a:	f006 f875 	bl	8009a38 <HAL_TIM_ConfigClockSource>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8003954:	f7ff fc14 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20000710 	.word	0x20000710
 8003964:	40014000 	.word	0x40014000

08003968 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800396c:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <MX_TIM11_Init+0x40>)
 800396e:	4a0f      	ldr	r2, [pc, #60]	; (80039ac <MX_TIM11_Init+0x44>)
 8003970:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10000-1;
 8003972:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <MX_TIM11_Init+0x40>)
 8003974:	f242 720f 	movw	r2, #9999	; 0x270f
 8003978:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800397a:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <MX_TIM11_Init+0x40>)
 800397c:	2200      	movs	r2, #0
 800397e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 5000-1;
 8003980:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <MX_TIM11_Init+0x40>)
 8003982:	f241 3287 	movw	r2, #4999	; 0x1387
 8003986:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003988:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <MX_TIM11_Init+0x40>)
 800398a:	2200      	movs	r2, #0
 800398c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800398e:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <MX_TIM11_Init+0x40>)
 8003990:	2200      	movs	r2, #0
 8003992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003994:	4804      	ldr	r0, [pc, #16]	; (80039a8 <MX_TIM11_Init+0x40>)
 8003996:	f005 fd59 	bl	800944c <HAL_TIM_Base_Init>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80039a0:	f7ff fbee 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80039a4:	bf00      	nop
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	200007c4 	.word	0x200007c4
 80039ac:	40014800 	.word	0x40014800

080039b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c0:	d116      	bne.n	80039f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	61fb      	str	r3, [r7, #28]
 80039c6:	4b52      	ldr	r3, [pc, #328]	; (8003b10 <HAL_TIM_Base_MspInit+0x160>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	4a51      	ldr	r2, [pc, #324]	; (8003b10 <HAL_TIM_Base_MspInit+0x160>)
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	6413      	str	r3, [r2, #64]	; 0x40
 80039d2:	4b4f      	ldr	r3, [pc, #316]	; (8003b10 <HAL_TIM_Base_MspInit+0x160>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	61fb      	str	r3, [r7, #28]
 80039dc:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80039de:	2200      	movs	r2, #0
 80039e0:	2105      	movs	r1, #5
 80039e2:	201c      	movs	r0, #28
 80039e4:	f001 fa02 	bl	8004dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80039e8:	201c      	movs	r0, #28
 80039ea:	f001 fa2b 	bl	8004e44 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80039ee:	e08a      	b.n	8003b06 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM3)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a47      	ldr	r2, [pc, #284]	; (8003b14 <HAL_TIM_Base_MspInit+0x164>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d116      	bne.n	8003a28 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	61bb      	str	r3, [r7, #24]
 80039fe:	4b44      	ldr	r3, [pc, #272]	; (8003b10 <HAL_TIM_Base_MspInit+0x160>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	4a43      	ldr	r2, [pc, #268]	; (8003b10 <HAL_TIM_Base_MspInit+0x160>)
 8003a04:	f043 0302 	orr.w	r3, r3, #2
 8003a08:	6413      	str	r3, [r2, #64]	; 0x40
 8003a0a:	4b41      	ldr	r3, [pc, #260]	; (8003b10 <HAL_TIM_Base_MspInit+0x160>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	61bb      	str	r3, [r7, #24]
 8003a14:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003a16:	2200      	movs	r2, #0
 8003a18:	2105      	movs	r1, #5
 8003a1a:	201d      	movs	r0, #29
 8003a1c:	f001 f9e6 	bl	8004dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003a20:	201d      	movs	r0, #29
 8003a22:	f001 fa0f 	bl	8004e44 <HAL_NVIC_EnableIRQ>
}
 8003a26:	e06e      	b.n	8003b06 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM4)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a3a      	ldr	r2, [pc, #232]	; (8003b18 <HAL_TIM_Base_MspInit+0x168>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d116      	bne.n	8003a60 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	4b36      	ldr	r3, [pc, #216]	; (8003b10 <HAL_TIM_Base_MspInit+0x160>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	4a35      	ldr	r2, [pc, #212]	; (8003b10 <HAL_TIM_Base_MspInit+0x160>)
 8003a3c:	f043 0304 	orr.w	r3, r3, #4
 8003a40:	6413      	str	r3, [r2, #64]	; 0x40
 8003a42:	4b33      	ldr	r3, [pc, #204]	; (8003b10 <HAL_TIM_Base_MspInit+0x160>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2105      	movs	r1, #5
 8003a52:	201e      	movs	r0, #30
 8003a54:	f001 f9ca 	bl	8004dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003a58:	201e      	movs	r0, #30
 8003a5a:	f001 f9f3 	bl	8004e44 <HAL_NVIC_EnableIRQ>
}
 8003a5e:	e052      	b.n	8003b06 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM5)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a2d      	ldr	r2, [pc, #180]	; (8003b1c <HAL_TIM_Base_MspInit+0x16c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d116      	bne.n	8003a98 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	4b28      	ldr	r3, [pc, #160]	; (8003b10 <HAL_TIM_Base_MspInit+0x160>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	4a27      	ldr	r2, [pc, #156]	; (8003b10 <HAL_TIM_Base_MspInit+0x160>)
 8003a74:	f043 0308 	orr.w	r3, r3, #8
 8003a78:	6413      	str	r3, [r2, #64]	; 0x40
 8003a7a:	4b25      	ldr	r3, [pc, #148]	; (8003b10 <HAL_TIM_Base_MspInit+0x160>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8003a86:	2200      	movs	r2, #0
 8003a88:	2105      	movs	r1, #5
 8003a8a:	2032      	movs	r0, #50	; 0x32
 8003a8c:	f001 f9ae 	bl	8004dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003a90:	2032      	movs	r0, #50	; 0x32
 8003a92:	f001 f9d7 	bl	8004e44 <HAL_NVIC_EnableIRQ>
}
 8003a96:	e036      	b.n	8003b06 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM9)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a20      	ldr	r2, [pc, #128]	; (8003b20 <HAL_TIM_Base_MspInit+0x170>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d116      	bne.n	8003ad0 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	4b1a      	ldr	r3, [pc, #104]	; (8003b10 <HAL_TIM_Base_MspInit+0x160>)
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	4a19      	ldr	r2, [pc, #100]	; (8003b10 <HAL_TIM_Base_MspInit+0x160>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ab2:	4b17      	ldr	r3, [pc, #92]	; (8003b10 <HAL_TIM_Base_MspInit+0x160>)
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2105      	movs	r1, #5
 8003ac2:	2018      	movs	r0, #24
 8003ac4:	f001 f992 	bl	8004dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003ac8:	2018      	movs	r0, #24
 8003aca:	f001 f9bb 	bl	8004e44 <HAL_NVIC_EnableIRQ>
}
 8003ace:	e01a      	b.n	8003b06 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM11)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a13      	ldr	r2, [pc, #76]	; (8003b24 <HAL_TIM_Base_MspInit+0x174>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d115      	bne.n	8003b06 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003ada:	2300      	movs	r3, #0
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <HAL_TIM_Base_MspInit+0x160>)
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	4a0b      	ldr	r2, [pc, #44]	; (8003b10 <HAL_TIM_Base_MspInit+0x160>)
 8003ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aea:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <HAL_TIM_Base_MspInit+0x160>)
 8003aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af2:	60bb      	str	r3, [r7, #8]
 8003af4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8003af6:	2200      	movs	r2, #0
 8003af8:	2105      	movs	r1, #5
 8003afa:	201a      	movs	r0, #26
 8003afc:	f001 f976 	bl	8004dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003b00:	201a      	movs	r0, #26
 8003b02:	f001 f99f 	bl	8004e44 <HAL_NVIC_EnableIRQ>
}
 8003b06:	bf00      	nop
 8003b08:	3720      	adds	r7, #32
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40023800 	.word	0x40023800
 8003b14:	40000400 	.word	0x40000400
 8003b18:	40000800 	.word	0x40000800
 8003b1c:	40000c00 	.word	0x40000c00
 8003b20:	40014000 	.word	0x40014000
 8003b24:	40014800 	.word	0x40014800

08003b28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b2c:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <MX_USART1_UART_Init+0x4c>)
 8003b2e:	4a12      	ldr	r2, [pc, #72]	; (8003b78 <MX_USART1_UART_Init+0x50>)
 8003b30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003b32:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <MX_USART1_UART_Init+0x4c>)
 8003b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b3a:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <MX_USART1_UART_Init+0x4c>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b40:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <MX_USART1_UART_Init+0x4c>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b46:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <MX_USART1_UART_Init+0x4c>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b4c:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <MX_USART1_UART_Init+0x4c>)
 8003b4e:	220c      	movs	r2, #12
 8003b50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b52:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <MX_USART1_UART_Init+0x4c>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <MX_USART1_UART_Init+0x4c>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b5e:	4805      	ldr	r0, [pc, #20]	; (8003b74 <MX_USART1_UART_Init+0x4c>)
 8003b60:	f006 fd22 	bl	800a5a8 <HAL_UART_Init>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003b6a:	f7ff fb09 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000878 	.word	0x20000878
 8003b78:	40011000 	.word	0x40011000

08003b7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08a      	sub	sp, #40	; 0x28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b84:	f107 0314 	add.w	r3, r7, #20
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	609a      	str	r2, [r3, #8]
 8003b90:	60da      	str	r2, [r3, #12]
 8003b92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a1d      	ldr	r2, [pc, #116]	; (8003c10 <HAL_UART_MspInit+0x94>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d133      	bne.n	8003c06 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	4b1c      	ldr	r3, [pc, #112]	; (8003c14 <HAL_UART_MspInit+0x98>)
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	4a1b      	ldr	r2, [pc, #108]	; (8003c14 <HAL_UART_MspInit+0x98>)
 8003ba8:	f043 0310 	orr.w	r3, r3, #16
 8003bac:	6453      	str	r3, [r2, #68]	; 0x44
 8003bae:	4b19      	ldr	r3, [pc, #100]	; (8003c14 <HAL_UART_MspInit+0x98>)
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	4b15      	ldr	r3, [pc, #84]	; (8003c14 <HAL_UART_MspInit+0x98>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	4a14      	ldr	r2, [pc, #80]	; (8003c14 <HAL_UART_MspInit+0x98>)
 8003bc4:	f043 0302 	orr.w	r3, r3, #2
 8003bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bca:	4b12      	ldr	r3, [pc, #72]	; (8003c14 <HAL_UART_MspInit+0x98>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB3     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8003bd6:	2348      	movs	r3, #72	; 0x48
 8003bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bda:	2302      	movs	r3, #2
 8003bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003be2:	2303      	movs	r3, #3
 8003be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003be6:	2307      	movs	r3, #7
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bea:	f107 0314 	add.w	r3, r7, #20
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4809      	ldr	r0, [pc, #36]	; (8003c18 <HAL_UART_MspInit+0x9c>)
 8003bf2:	f002 f8c9 	bl	8005d88 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	2105      	movs	r1, #5
 8003bfa:	2025      	movs	r0, #37	; 0x25
 8003bfc:	f001 f8f6 	bl	8004dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c00:	2025      	movs	r0, #37	; 0x25
 8003c02:	f001 f91f 	bl	8004e44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003c06:	bf00      	nop
 8003c08:	3728      	adds	r7, #40	; 0x28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40011000 	.word	0x40011000
 8003c14:	40023800 	.word	0x40023800
 8003c18:	40020400 	.word	0x40020400

08003c1c <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a05      	ldr	r2, [pc, #20]	; (8003c40 <HAL_UART_RxCpltCallback+0x24>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d104      	bne.n	8003c38 <HAL_UART_RxCpltCallback+0x1c>
  {

	//BtcReceivedDataIRQ = STD_HIGH;
    HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1);
 8003c2e:	2201      	movs	r2, #1
 8003c30:	4904      	ldr	r1, [pc, #16]	; (8003c44 <HAL_UART_RxCpltCallback+0x28>)
 8003c32:	4805      	ldr	r0, [pc, #20]	; (8003c48 <HAL_UART_RxCpltCallback+0x2c>)
 8003c34:	f006 fd7c 	bl	800a730 <HAL_UART_Receive_IT>

	  /* do nothing */

  }

}
 8003c38:	bf00      	nop
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40011000 	.word	0x40011000
 8003c44:	20000090 	.word	0x20000090
 8003c48:	20000878 	.word	0x20000878

08003c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c50:	480d      	ldr	r0, [pc, #52]	; (8003c88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003c52:	490e      	ldr	r1, [pc, #56]	; (8003c8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003c54:	4a0e      	ldr	r2, [pc, #56]	; (8003c90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c58:	e002      	b.n	8003c60 <LoopCopyDataInit>

08003c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c5e:	3304      	adds	r3, #4

08003c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c64:	d3f9      	bcc.n	8003c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c66:	4a0b      	ldr	r2, [pc, #44]	; (8003c94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c68:	4c0b      	ldr	r4, [pc, #44]	; (8003c98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c6c:	e001      	b.n	8003c72 <LoopFillZerobss>

08003c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c70:	3204      	adds	r2, #4

08003c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c74:	d3fb      	bcc.n	8003c6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c76:	f7ff fcf1 	bl	800365c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c7a:	f00a ff21 	bl	800eac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c7e:	f7ff f995 	bl	8002fac <main>
  bx  lr    
 8003c82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c8c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003c90:	0800f478 	.word	0x0800f478
  ldr r2, =_sbss
 8003c94:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003c98:	20005548 	.word	0x20005548

08003c9c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c9c:	e7fe      	b.n	8003c9c <DMA1_Stream0_IRQHandler>

08003c9e <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b084      	sub	sp, #16
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d104      	bne.n	8003cb6 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003cac:	b672      	cpsid	i
}
 8003cae:	bf00      	nop
 8003cb0:	f7ff fa66 	bl	8003180 <Error_Handler>
 8003cb4:	e7fe      	b.n	8003cb4 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	7a1b      	ldrb	r3, [r3, #8]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d904      	bls.n	8003cc8 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003cbe:	b672      	cpsid	i
}
 8003cc0:	bf00      	nop
 8003cc2:	f7ff fa5d 	bl	8003180 <Error_Handler>
 8003cc6:	e7fe      	b.n	8003cc6 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	7a1b      	ldrb	r3, [r3, #8]
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	b2d1      	uxtb	r1, r2
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	7211      	strb	r1, [r2, #8]
 8003cd4:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003cd6:	f3ef 8211 	mrs	r2, BASEPRI
 8003cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cde:	f383 8811 	msr	BASEPRI, r3
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	f3bf 8f4f 	dsb	sy
 8003cea:	60fa      	str	r2, [r7, #12]
 8003cec:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8003cf6:	bf00      	nop
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b084      	sub	sp, #16
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d104      	bne.n	8003d16 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003d0c:	b672      	cpsid	i
}
 8003d0e:	bf00      	nop
 8003d10:	f7ff fa36 	bl	8003180 <Error_Handler>
 8003d14:	e7fe      	b.n	8003d14 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	7a1b      	ldrb	r3, [r3, #8]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	7a1b      	ldrb	r3, [r3, #8]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d904      	bls.n	8003d34 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8003d2a:	b672      	cpsid	i
}
 8003d2c:	bf00      	nop
 8003d2e:	f7ff fa27 	bl	8003180 <Error_Handler>
 8003d32:	e7fe      	b.n	8003d32 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	7a1b      	ldrb	r3, [r3, #8]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d40:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d48:	bf00      	nop
}
 8003d4a:	bf00      	nop
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b082      	sub	sp, #8
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d104      	bne.n	8003d6a <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003d60:	b672      	cpsid	i
}
 8003d62:	bf00      	nop
 8003d64:	f7ff fa0c 	bl	8003180 <Error_Handler>
 8003d68:	e7fe      	b.n	8003d68 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff ff96 	bl	8003c9e <stm32_lock_acquire>
}
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d104      	bne.n	8003d92 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003d88:	b672      	cpsid	i
}
 8003d8a:	bf00      	nop
 8003d8c:	f7ff f9f8 	bl	8003180 <Error_Handler>
 8003d90:	e7fe      	b.n	8003d90 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff ffb2 	bl	8003cfe <stm32_lock_release>
}
 8003d9a:	bf00      	nop
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003da8:	4b0e      	ldr	r3, [pc, #56]	; (8003de4 <HAL_Init+0x40>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a0d      	ldr	r2, [pc, #52]	; (8003de4 <HAL_Init+0x40>)
 8003dae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003db2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003db4:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <HAL_Init+0x40>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a0a      	ldr	r2, [pc, #40]	; (8003de4 <HAL_Init+0x40>)
 8003dba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dc0:	4b08      	ldr	r3, [pc, #32]	; (8003de4 <HAL_Init+0x40>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a07      	ldr	r2, [pc, #28]	; (8003de4 <HAL_Init+0x40>)
 8003dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dcc:	2003      	movs	r0, #3
 8003dce:	f000 ffed 	bl	8004dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dd2:	2005      	movs	r0, #5
 8003dd4:	f7ff fac6 	bl	8003364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dd8:	f7ff fa88 	bl	80032ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40023c00 	.word	0x40023c00

08003de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003dec:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <HAL_IncTick+0x20>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	461a      	mov	r2, r3
 8003df2:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <HAL_IncTick+0x24>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4413      	add	r3, r2
 8003df8:	4a04      	ldr	r2, [pc, #16]	; (8003e0c <HAL_IncTick+0x24>)
 8003dfa:	6013      	str	r3, [r2, #0]
}
 8003dfc:	bf00      	nop
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	20000008 	.word	0x20000008
 8003e0c:	200008f8 	.word	0x200008f8

08003e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  return uwTick;
 8003e14:	4b03      	ldr	r3, [pc, #12]	; (8003e24 <HAL_GetTick+0x14>)
 8003e16:	681b      	ldr	r3, [r3, #0]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	200008f8 	.word	0x200008f8

08003e28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e16f      	b.n	800411e <HAL_ADC_Init+0x2f6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a93      	ldr	r2, [pc, #588]	; (8004090 <HAL_ADC_Init+0x268>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d004      	beq.n	8003e52 <HAL_ADC_Init+0x2a>
 8003e48:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8003e4c:	4891      	ldr	r0, [pc, #580]	; (8004094 <HAL_ADC_Init+0x26c>)
 8003e4e:	f7ff f99c 	bl	800318a <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d013      	beq.n	8003e82 <HAL_ADC_Init+0x5a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e62:	d00e      	beq.n	8003e82 <HAL_ADC_Init+0x5a>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e6c:	d009      	beq.n	8003e82 <HAL_ADC_Init+0x5a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e76:	d004      	beq.n	8003e82 <HAL_ADC_Init+0x5a>
 8003e78:	f240 1143 	movw	r1, #323	; 0x143
 8003e7c:	4885      	ldr	r0, [pc, #532]	; (8004094 <HAL_ADC_Init+0x26c>)
 8003e7e:	f7ff f984 	bl	800318a <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d013      	beq.n	8003eb2 <HAL_ADC_Init+0x8a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e92:	d00e      	beq.n	8003eb2 <HAL_ADC_Init+0x8a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e9c:	d009      	beq.n	8003eb2 <HAL_ADC_Init+0x8a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ea6:	d004      	beq.n	8003eb2 <HAL_ADC_Init+0x8a>
 8003ea8:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8003eac:	4879      	ldr	r0, [pc, #484]	; (8004094 <HAL_ADC_Init+0x26c>)
 8003eae:	f7ff f96c 	bl	800318a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d008      	beq.n	8003ecc <HAL_ADC_Init+0xa4>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d004      	beq.n	8003ecc <HAL_ADC_Init+0xa4>
 8003ec2:	f240 1145 	movw	r1, #325	; 0x145
 8003ec6:	4873      	ldr	r0, [pc, #460]	; (8004094 <HAL_ADC_Init+0x26c>)
 8003ec8:	f7ff f95f 	bl	800318a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	7e1b      	ldrb	r3, [r3, #24]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_ADC_Init+0xbe>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	7e1b      	ldrb	r3, [r3, #24]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d004      	beq.n	8003ee6 <HAL_ADC_Init+0xbe>
 8003edc:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003ee0:	486c      	ldr	r0, [pc, #432]	; (8004094 <HAL_ADC_Init+0x26c>)
 8003ee2:	f7ff f952 	bl	800318a <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d054      	beq.n	8003f98 <HAL_ADC_Init+0x170>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ef6:	d04f      	beq.n	8003f98 <HAL_ADC_Init+0x170>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f00:	d04a      	beq.n	8003f98 <HAL_ADC_Init+0x170>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f0a:	d045      	beq.n	8003f98 <HAL_ADC_Init+0x170>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f14:	d040      	beq.n	8003f98 <HAL_ADC_Init+0x170>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003f1e:	d03b      	beq.n	8003f98 <HAL_ADC_Init+0x170>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003f28:	d036      	beq.n	8003f98 <HAL_ADC_Init+0x170>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8003f32:	d031      	beq.n	8003f98 <HAL_ADC_Init+0x170>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f3c:	d02c      	beq.n	8003f98 <HAL_ADC_Init+0x170>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8003f46:	d027      	beq.n	8003f98 <HAL_ADC_Init+0x170>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003f50:	d022      	beq.n	8003f98 <HAL_ADC_Init+0x170>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f56:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8003f5a:	d01d      	beq.n	8003f98 <HAL_ADC_Init+0x170>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003f64:	d018      	beq.n	8003f98 <HAL_ADC_Init+0x170>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6a:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8003f6e:	d013      	beq.n	8003f98 <HAL_ADC_Init+0x170>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f74:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003f78:	d00e      	beq.n	8003f98 <HAL_ADC_Init+0x170>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003f82:	d009      	beq.n	8003f98 <HAL_ADC_Init+0x170>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	4a43      	ldr	r2, [pc, #268]	; (8004098 <HAL_ADC_Init+0x270>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d004      	beq.n	8003f98 <HAL_ADC_Init+0x170>
 8003f8e:	f240 1147 	movw	r1, #327	; 0x147
 8003f92:	4840      	ldr	r0, [pc, #256]	; (8004094 <HAL_ADC_Init+0x26c>)
 8003f94:	f7ff f8f9 	bl	800318a <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d009      	beq.n	8003fb4 <HAL_ADC_Init+0x18c>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa8:	d004      	beq.n	8003fb4 <HAL_ADC_Init+0x18c>
 8003faa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003fae:	4839      	ldr	r0, [pc, #228]	; (8004094 <HAL_ADC_Init+0x26c>)
 8003fb0:	f7ff f8eb 	bl	800318a <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_ADC_Init+0x19c>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	2b10      	cmp	r3, #16
 8003fc2:	d904      	bls.n	8003fce <HAL_ADC_Init+0x1a6>
 8003fc4:	f240 1149 	movw	r1, #329	; 0x149
 8003fc8:	4832      	ldr	r0, [pc, #200]	; (8004094 <HAL_ADC_Init+0x26c>)
 8003fca:	f7ff f8de 	bl	800318a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d009      	beq.n	8003fec <HAL_ADC_Init+0x1c4>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d004      	beq.n	8003fec <HAL_ADC_Init+0x1c4>
 8003fe2:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8003fe6:	482b      	ldr	r0, [pc, #172]	; (8004094 <HAL_ADC_Init+0x26c>)
 8003fe8:	f7ff f8cf 	bl	800318a <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d00c      	beq.n	800400e <HAL_ADC_Init+0x1e6>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d008      	beq.n	800400e <HAL_ADC_Init+0x1e6>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	2b02      	cmp	r3, #2
 8004002:	d004      	beq.n	800400e <HAL_ADC_Init+0x1e6>
 8004004:	f240 114b 	movw	r1, #331	; 0x14b
 8004008:	4822      	ldr	r0, [pc, #136]	; (8004094 <HAL_ADC_Init+0x26c>)
 800400a:	f7ff f8be 	bl	800318a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d009      	beq.n	800402c <HAL_ADC_Init+0x204>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d004      	beq.n	800402c <HAL_ADC_Init+0x204>
 8004022:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004026:	481b      	ldr	r0, [pc, #108]	; (8004094 <HAL_ADC_Init+0x26c>)
 8004028:	f7ff f8af 	bl	800318a <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004030:	4a19      	ldr	r2, [pc, #100]	; (8004098 <HAL_ADC_Init+0x270>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d017      	beq.n	8004066 <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403a:	2b00      	cmp	r3, #0
 800403c:	d013      	beq.n	8004066 <HAL_ADC_Init+0x23e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004046:	d00e      	beq.n	8004066 <HAL_ADC_Init+0x23e>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004050:	d009      	beq.n	8004066 <HAL_ADC_Init+0x23e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004056:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800405a:	d004      	beq.n	8004066 <HAL_ADC_Init+0x23e>
 800405c:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004060:	480c      	ldr	r0, [pc, #48]	; (8004094 <HAL_ADC_Init+0x26c>)
 8004062:	f7ff f892 	bl	800318a <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	d131      	bne.n	80040d2 <HAL_ADC_Init+0x2aa>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a0a      	ldr	r2, [pc, #40]	; (800409c <HAL_ADC_Init+0x274>)
 8004072:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a0a      	ldr	r2, [pc, #40]	; (80040a0 <HAL_ADC_Init+0x278>)
 8004078:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a09      	ldr	r2, [pc, #36]	; (80040a4 <HAL_ADC_Init+0x27c>)
 800407e:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a09      	ldr	r2, [pc, #36]	; (80040a8 <HAL_ADC_Init+0x280>)
 8004084:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a08      	ldr	r2, [pc, #32]	; (80040ac <HAL_ADC_Init+0x284>)
 800408a:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	e00f      	b.n	80040b0 <HAL_ADC_Init+0x288>
 8004090:	40012000 	.word	0x40012000
 8004094:	0800ed74 	.word	0x0800ed74
 8004098:	0f000001 	.word	0x0f000001
 800409c:	080045e1 	.word	0x080045e1
 80040a0:	080045f5 	.word	0x080045f5
 80040a4:	08004609 	.word	0x08004609
 80040a8:	0800461d 	.word	0x0800461d
 80040ac:	08004c3d 	.word	0x08004c3d
 80040b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d102      	bne.n	80040bc <HAL_ADC_Init+0x294>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a1b      	ldr	r2, [pc, #108]	; (8004128 <HAL_ADC_Init+0x300>)
 80040ba:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f003 0310 	and.w	r3, r3, #16
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d118      	bne.n	8004110 <HAL_ADC_Init+0x2e8>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040e6:	f023 0302 	bic.w	r3, r3, #2
 80040ea:	f043 0202 	orr.w	r2, r3, #2
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fc12 	bl	800491c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	f023 0303 	bic.w	r3, r3, #3
 8004106:	f043 0201 	orr.w	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	641a      	str	r2, [r3, #64]	; 0x40
 800410e:	e001      	b.n	8004114 <HAL_ADC_Init+0x2ec>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800411c:	7bfb      	ldrb	r3, [r7, #15]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	08002801 	.word	0x08002801

0800412c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	2300      	movs	r3, #0
 800413a:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	7e1b      	ldrb	r3, [r3, #24]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_ADC_IRQHandler+0x3a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	7e1b      	ldrb	r3, [r3, #24]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d004      	beq.n	8004166 <HAL_ADC_IRQHandler+0x3a>
 800415c:	f240 41b7 	movw	r1, #1207	; 0x4b7
 8004160:	4892      	ldr	r0, [pc, #584]	; (80043ac <HAL_ADC_IRQHandler+0x280>)
 8004162:	f7ff f812 	bl	800318a <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_ADC_IRQHandler+0x4a>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	2b10      	cmp	r3, #16
 8004174:	d904      	bls.n	8004180 <HAL_ADC_IRQHandler+0x54>
 8004176:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
 800417a:	488c      	ldr	r0, [pc, #560]	; (80043ac <HAL_ADC_IRQHandler+0x280>)
 800417c:	f7ff f805 	bl	800318a <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d00c      	beq.n	80041a2 <HAL_ADC_IRQHandler+0x76>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d008      	beq.n	80041a2 <HAL_ADC_IRQHandler+0x76>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	2b02      	cmp	r3, #2
 8004196:	d004      	beq.n	80041a2 <HAL_ADC_IRQHandler+0x76>
 8004198:	f240 41b9 	movw	r1, #1209	; 0x4b9
 800419c:	4883      	ldr	r0, [pc, #524]	; (80043ac <HAL_ADC_IRQHandler+0x280>)
 800419e:	f7fe fff4 	bl	800318a <assert_failed>
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f003 0320 	and.w	r3, r3, #32
 80041b0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d04a      	beq.n	800424e <HAL_ADC_IRQHandler+0x122>
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d047      	beq.n	800424e <HAL_ADC_IRQHandler+0x122>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	f003 0310 	and.w	r3, r3, #16
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d105      	bne.n	80041d6 <HAL_ADC_IRQHandler+0xaa>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d12b      	bne.n	800423c <HAL_ADC_IRQHandler+0x110>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d127      	bne.n	800423c <HAL_ADC_IRQHandler+0x110>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d006      	beq.n	8004208 <HAL_ADC_IRQHandler+0xdc>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004204:	2b00      	cmp	r3, #0
 8004206:	d119      	bne.n	800423c <HAL_ADC_IRQHandler+0x110>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0220 	bic.w	r2, r2, #32
 8004216:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d105      	bne.n	800423c <HAL_ADC_IRQHandler+0x110>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	f043 0201 	orr.w	r2, r3, #1
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0212 	mvn.w	r2, #18
 800424c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d058      	beq.n	8004316 <HAL_ADC_IRQHandler+0x1ea>
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d055      	beq.n	8004316 <HAL_ADC_IRQHandler+0x1ea>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b00      	cmp	r3, #0
 8004274:	d105      	bne.n	8004282 <HAL_ADC_IRQHandler+0x156>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d139      	bne.n	8004304 <HAL_ADC_IRQHandler+0x1d8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004296:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800429a:	2b00      	cmp	r3, #0
 800429c:	d006      	beq.n	80042ac <HAL_ADC_IRQHandler+0x180>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d12b      	bne.n	8004304 <HAL_ADC_IRQHandler+0x1d8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d124      	bne.n	8004304 <HAL_ADC_IRQHandler+0x1d8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d11d      	bne.n	8004304 <HAL_ADC_IRQHandler+0x1d8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d119      	bne.n	8004304 <HAL_ADC_IRQHandler+0x1d8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d105      	bne.n	8004304 <HAL_ADC_IRQHandler+0x1d8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	f043 0201 	orr.w	r2, r3, #1
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f06f 020c 	mvn.w	r2, #12
 8004314:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004324:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d018      	beq.n	800435e <HAL_ADC_IRQHandler+0x232>
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d015      	beq.n	800435e <HAL_ADC_IRQHandler+0x232>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b01      	cmp	r3, #1
 800433e:	d10e      	bne.n	800435e <HAL_ADC_IRQHandler+0x232>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0201 	mvn.w	r2, #1
 800435c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f003 0320 	and.w	r3, r3, #32
 8004364:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800436c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d016      	beq.n	80043a2 <HAL_ADC_IRQHandler+0x276>
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d013      	beq.n	80043a2 <HAL_ADC_IRQHandler+0x276>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	f043 0202 	orr.w	r2, r3, #2
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f06f 0220 	mvn.w	r2, #32
 800438e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f06f 0220 	mvn.w	r2, #32
 80043a0:	601a      	str	r2, [r3, #0]
  }
}
 80043a2:	bf00      	nop
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	0800ed74 	.word	0x0800ed74

080043b0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	7e1b      	ldrb	r3, [r3, #24]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <HAL_ADC_Start_DMA+0x2a>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	7e1b      	ldrb	r3, [r3, #24]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d004      	beq.n	80043da <HAL_ADC_Start_DMA+0x2a>
 80043d0:	f240 515a 	movw	r1, #1370	; 0x55a
 80043d4:	487a      	ldr	r0, [pc, #488]	; (80045c0 <HAL_ADC_Start_DMA+0x210>)
 80043d6:	f7fe fed8 	bl	800318a <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d013      	beq.n	800440a <HAL_ADC_Start_DMA+0x5a>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043ea:	d00e      	beq.n	800440a <HAL_ADC_Start_DMA+0x5a>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043f4:	d009      	beq.n	800440a <HAL_ADC_Start_DMA+0x5a>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043fe:	d004      	beq.n	800440a <HAL_ADC_Start_DMA+0x5a>
 8004400:	f240 515b 	movw	r1, #1371	; 0x55b
 8004404:	486e      	ldr	r0, [pc, #440]	; (80045c0 <HAL_ADC_Start_DMA+0x210>)
 8004406:	f7fe fec0 	bl	800318a <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_ADC_Start_DMA+0x68>
 8004414:	2302      	movs	r3, #2
 8004416:	e0ce      	b.n	80045b6 <HAL_ADC_Start_DMA+0x206>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b01      	cmp	r3, #1
 800442c:	d018      	beq.n	8004460 <HAL_ADC_Start_DMA+0xb0>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0201 	orr.w	r2, r2, #1
 800443c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800443e:	4b61      	ldr	r3, [pc, #388]	; (80045c4 <HAL_ADC_Start_DMA+0x214>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a61      	ldr	r2, [pc, #388]	; (80045c8 <HAL_ADC_Start_DMA+0x218>)
 8004444:	fba2 2303 	umull	r2, r3, r2, r3
 8004448:	0c9a      	lsrs	r2, r3, #18
 800444a:	4613      	mov	r3, r2
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	4413      	add	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004452:	e002      	b.n	800445a <HAL_ADC_Start_DMA+0xaa>
    {
      counter--;
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	3b01      	subs	r3, #1
 8004458:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f9      	bne.n	8004454 <HAL_ADC_Start_DMA+0xa4>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800446e:	d107      	bne.n	8004480 <HAL_ADC_Start_DMA+0xd0>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800447e:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b01      	cmp	r3, #1
 800448c:	f040 8086 	bne.w	800459c <HAL_ADC_Start_DMA+0x1ec>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004498:	f023 0301 	bic.w	r3, r3, #1
 800449c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d007      	beq.n	80044c2 <HAL_ADC_Start_DMA+0x112>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ce:	d106      	bne.n	80044de <HAL_ADC_Start_DMA+0x12e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d4:	f023 0206 	bic.w	r2, r3, #6
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	645a      	str	r2, [r3, #68]	; 0x44
 80044dc:	e002      	b.n	80044e4 <HAL_ADC_Start_DMA+0x134>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044ec:	4b37      	ldr	r3, [pc, #220]	; (80045cc <HAL_ADC_Start_DMA+0x21c>)
 80044ee:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f4:	4a36      	ldr	r2, [pc, #216]	; (80045d0 <HAL_ADC_Start_DMA+0x220>)
 80044f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fc:	4a35      	ldr	r2, [pc, #212]	; (80045d4 <HAL_ADC_Start_DMA+0x224>)
 80044fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004504:	4a34      	ldr	r2, [pc, #208]	; (80045d8 <HAL_ADC_Start_DMA+0x228>)
 8004506:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004510:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004520:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004530:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	334c      	adds	r3, #76	; 0x4c
 800453c:	4619      	mov	r1, r3
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f000 fedb 	bl	80052fc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f003 031f 	and.w	r3, r3, #31
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10f      	bne.n	8004572 <HAL_ADC_Start_DMA+0x1c2>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d129      	bne.n	80045b4 <HAL_ADC_Start_DMA+0x204>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800456e:	609a      	str	r2, [r3, #8]
 8004570:	e020      	b.n	80045b4 <HAL_ADC_Start_DMA+0x204>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a19      	ldr	r2, [pc, #100]	; (80045dc <HAL_ADC_Start_DMA+0x22c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d11b      	bne.n	80045b4 <HAL_ADC_Start_DMA+0x204>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d114      	bne.n	80045b4 <HAL_ADC_Start_DMA+0x204>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004598:	609a      	str	r2, [r3, #8]
 800459a:	e00b      	b.n	80045b4 <HAL_ADC_Start_DMA+0x204>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	f043 0210 	orr.w	r2, r3, #16
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ac:	f043 0201 	orr.w	r2, r3, #1
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	0800ed74 	.word	0x0800ed74
 80045c4:	20000000 	.word	0x20000000
 80045c8:	431bde83 	.word	0x431bde83
 80045cc:	40012300 	.word	0x40012300
 80045d0:	08004b31 	.word	0x08004b31
 80045d4:	08004bef 	.word	0x08004bef
 80045d8:	08004c0d 	.word	0x08004c0d
 80045dc:	40012000 	.word	0x40012000

080045e0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b12      	cmp	r3, #18
 8004644:	d909      	bls.n	800465a <HAL_ADC_ConfigChannel+0x2a>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a72      	ldr	r2, [pc, #456]	; (8004814 <HAL_ADC_ConfigChannel+0x1e4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d004      	beq.n	800465a <HAL_ADC_ConfigChannel+0x2a>
 8004650:	f240 618b 	movw	r1, #1675	; 0x68b
 8004654:	4870      	ldr	r0, [pc, #448]	; (8004818 <HAL_ADC_ConfigChannel+0x1e8>)
 8004656:	f7fe fd98 	bl	800318a <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_ADC_ConfigChannel+0x3a>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b10      	cmp	r3, #16
 8004668:	d904      	bls.n	8004674 <HAL_ADC_ConfigChannel+0x44>
 800466a:	f240 618c 	movw	r1, #1676	; 0x68c
 800466e:	486a      	ldr	r0, [pc, #424]	; (8004818 <HAL_ADC_ConfigChannel+0x1e8>)
 8004670:	f7fe fd8b 	bl	800318a <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d020      	beq.n	80046be <HAL_ADC_ConfigChannel+0x8e>
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d01c      	beq.n	80046be <HAL_ADC_ConfigChannel+0x8e>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2b02      	cmp	r3, #2
 800468a:	d018      	beq.n	80046be <HAL_ADC_ConfigChannel+0x8e>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2b03      	cmp	r3, #3
 8004692:	d014      	beq.n	80046be <HAL_ADC_ConfigChannel+0x8e>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b04      	cmp	r3, #4
 800469a:	d010      	beq.n	80046be <HAL_ADC_ConfigChannel+0x8e>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	2b05      	cmp	r3, #5
 80046a2:	d00c      	beq.n	80046be <HAL_ADC_ConfigChannel+0x8e>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	2b06      	cmp	r3, #6
 80046aa:	d008      	beq.n	80046be <HAL_ADC_ConfigChannel+0x8e>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	2b07      	cmp	r3, #7
 80046b2:	d004      	beq.n	80046be <HAL_ADC_ConfigChannel+0x8e>
 80046b4:	f240 618d 	movw	r1, #1677	; 0x68d
 80046b8:	4857      	ldr	r0, [pc, #348]	; (8004818 <HAL_ADC_ConfigChannel+0x1e8>)
 80046ba:	f7fe fd66 	bl	800318a <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_ADC_ConfigChannel+0x9c>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e118      	b.n	80048fe <HAL_ADC_ConfigChannel+0x2ce>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b09      	cmp	r3, #9
 80046da:	d925      	bls.n	8004728 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68d9      	ldr	r1, [r3, #12]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	461a      	mov	r2, r3
 80046ea:	4613      	mov	r3, r2
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	4413      	add	r3, r2
 80046f0:	3b1e      	subs	r3, #30
 80046f2:	2207      	movs	r2, #7
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	43da      	mvns	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	400a      	ands	r2, r1
 8004700:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68d9      	ldr	r1, [r3, #12]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	b29b      	uxth	r3, r3
 8004712:	4618      	mov	r0, r3
 8004714:	4603      	mov	r3, r0
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	4403      	add	r3, r0
 800471a:	3b1e      	subs	r3, #30
 800471c:	409a      	lsls	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	60da      	str	r2, [r3, #12]
 8004726:	e022      	b.n	800476e <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6919      	ldr	r1, [r3, #16]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	b29b      	uxth	r3, r3
 8004734:	461a      	mov	r2, r3
 8004736:	4613      	mov	r3, r2
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	4413      	add	r3, r2
 800473c:	2207      	movs	r2, #7
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43da      	mvns	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	400a      	ands	r2, r1
 800474a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6919      	ldr	r1, [r3, #16]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	b29b      	uxth	r3, r3
 800475c:	4618      	mov	r0, r3
 800475e:	4603      	mov	r3, r0
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	4403      	add	r3, r0
 8004764:	409a      	lsls	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b06      	cmp	r3, #6
 8004774:	d824      	bhi.n	80047c0 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	4613      	mov	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	3b05      	subs	r3, #5
 8004788:	221f      	movs	r2, #31
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43da      	mvns	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	400a      	ands	r2, r1
 8004796:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	4618      	mov	r0, r3
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	4613      	mov	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	3b05      	subs	r3, #5
 80047b2:	fa00 f203 	lsl.w	r2, r0, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	635a      	str	r2, [r3, #52]	; 0x34
 80047be:	e051      	b.n	8004864 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b0c      	cmp	r3, #12
 80047c6:	d829      	bhi.n	800481c <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	3b23      	subs	r3, #35	; 0x23
 80047da:	221f      	movs	r2, #31
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	43da      	mvns	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	400a      	ands	r2, r1
 80047e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	4618      	mov	r0, r3
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	4613      	mov	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	3b23      	subs	r3, #35	; 0x23
 8004804:	fa00 f203 	lsl.w	r2, r0, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	631a      	str	r2, [r3, #48]	; 0x30
 8004810:	e028      	b.n	8004864 <HAL_ADC_ConfigChannel+0x234>
 8004812:	bf00      	nop
 8004814:	10000012 	.word	0x10000012
 8004818:	0800ed74 	.word	0x0800ed74
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	3b41      	subs	r3, #65	; 0x41
 800482e:	221f      	movs	r2, #31
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	43da      	mvns	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	400a      	ands	r2, r1
 800483c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	b29b      	uxth	r3, r3
 800484a:	4618      	mov	r0, r3
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	3b41      	subs	r3, #65	; 0x41
 8004858:	fa00 f203 	lsl.w	r2, r0, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004864:	4b28      	ldr	r3, [pc, #160]	; (8004908 <HAL_ADC_ConfigChannel+0x2d8>)
 8004866:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a27      	ldr	r2, [pc, #156]	; (800490c <HAL_ADC_ConfigChannel+0x2dc>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d10f      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x262>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b12      	cmp	r3, #18
 8004878:	d10b      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a1d      	ldr	r2, [pc, #116]	; (800490c <HAL_ADC_ConfigChannel+0x2dc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d12b      	bne.n	80048f4 <HAL_ADC_ConfigChannel+0x2c4>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1b      	ldr	r2, [pc, #108]	; (8004910 <HAL_ADC_ConfigChannel+0x2e0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d003      	beq.n	80048ae <HAL_ADC_ConfigChannel+0x27e>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b11      	cmp	r3, #17
 80048ac:	d122      	bne.n	80048f4 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a11      	ldr	r2, [pc, #68]	; (8004910 <HAL_ADC_ConfigChannel+0x2e0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d111      	bne.n	80048f4 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80048d0:	4b10      	ldr	r3, [pc, #64]	; (8004914 <HAL_ADC_ConfigChannel+0x2e4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a10      	ldr	r2, [pc, #64]	; (8004918 <HAL_ADC_ConfigChannel+0x2e8>)
 80048d6:	fba2 2303 	umull	r2, r3, r2, r3
 80048da:	0c9a      	lsrs	r2, r3, #18
 80048dc:	4613      	mov	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80048e6:	e002      	b.n	80048ee <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1f9      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40012300 	.word	0x40012300
 800490c:	40012000 	.word	0x40012000
 8004910:	10000012 	.word	0x10000012
 8004914:	20000000 	.word	0x20000000
 8004918:	431bde83 	.word	0x431bde83

0800491c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004924:	4b7f      	ldr	r3, [pc, #508]	; (8004b24 <ADC_Init+0x208>)
 8004926:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	431a      	orrs	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004950:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6859      	ldr	r1, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	021a      	lsls	r2, r3, #8
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004974:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6859      	ldr	r1, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004996:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6899      	ldr	r1, [r3, #8]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	4a5e      	ldr	r2, [pc, #376]	; (8004b28 <ADC_Init+0x20c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d022      	beq.n	80049fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6899      	ldr	r1, [r3, #8]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	6899      	ldr	r1, [r3, #8]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	609a      	str	r2, [r3, #8]
 80049f8:	e00f      	b.n	8004a1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0202 	bic.w	r2, r2, #2
 8004a28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6899      	ldr	r1, [r3, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	7e1b      	ldrb	r3, [r3, #24]
 8004a34:	005a      	lsls	r2, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d028      	beq.n	8004a9a <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <ADC_Init+0x13c>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d904      	bls.n	8004a62 <ADC_Init+0x146>
 8004a58:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8004a5c:	4833      	ldr	r0, [pc, #204]	; (8004b2c <ADC_Init+0x210>)
 8004a5e:	f7fe fb94 	bl	800318a <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a70:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004a80:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6859      	ldr	r1, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	035a      	lsls	r2, r3, #13
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	605a      	str	r2, [r3, #4]
 8004a98:	e007      	b.n	8004aaa <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aa8:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	051a      	lsls	r2, r3, #20
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689a      	ldr	r2, [r3, #8]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ade:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6899      	ldr	r1, [r3, #8]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004aec:	025a      	lsls	r2, r3, #9
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6899      	ldr	r1, [r3, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	029a      	lsls	r2, r3, #10
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	609a      	str	r2, [r3, #8]
}
 8004b1a:	bf00      	nop
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40012300 	.word	0x40012300
 8004b28:	0f000001 	.word	0x0f000001
 8004b2c:	0800ed74 	.word	0x0800ed74

08004b30 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d13d      	bne.n	8004bc6 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d12b      	bne.n	8004bbc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d127      	bne.n	8004bbc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d006      	beq.n	8004b88 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d119      	bne.n	8004bbc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0220 	bic.w	r2, r2, #32
 8004b96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d105      	bne.n	8004bbc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb4:	f043 0201 	orr.w	r2, r3, #1
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004bc4:	e00f      	b.n	8004be6 <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	f003 0310 	and.w	r3, r3, #16
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d004      	beq.n	8004bdc <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	4798      	blx	r3
}
 8004bda:	e004      	b.n	8004be6 <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	4798      	blx	r3
}
 8004be6:	bf00      	nop
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c04:	bf00      	nop
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2240      	movs	r2, #64	; 0x40
 8004c1e:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c24:	f043 0204 	orr.w	r2, r3, #4
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c34:	bf00      	nop
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c60:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <__NVIC_SetPriorityGrouping+0x44>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c82:	4a04      	ldr	r2, [pc, #16]	; (8004c94 <__NVIC_SetPriorityGrouping+0x44>)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	60d3      	str	r3, [r2, #12]
}
 8004c88:	bf00      	nop
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	e000ed00 	.word	0xe000ed00

08004c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c9c:	4b04      	ldr	r3, [pc, #16]	; (8004cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	0a1b      	lsrs	r3, r3, #8
 8004ca2:	f003 0307 	and.w	r3, r3, #7
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	e000ed00 	.word	0xe000ed00

08004cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	db0b      	blt.n	8004cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	f003 021f 	and.w	r2, r3, #31
 8004ccc:	4907      	ldr	r1, [pc, #28]	; (8004cec <__NVIC_EnableIRQ+0x38>)
 8004cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cd2:	095b      	lsrs	r3, r3, #5
 8004cd4:	2001      	movs	r0, #1
 8004cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8004cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	e000e100 	.word	0xe000e100

08004cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	6039      	str	r1, [r7, #0]
 8004cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	db0a      	blt.n	8004d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	490c      	ldr	r1, [pc, #48]	; (8004d3c <__NVIC_SetPriority+0x4c>)
 8004d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d0e:	0112      	lsls	r2, r2, #4
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	440b      	add	r3, r1
 8004d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d18:	e00a      	b.n	8004d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	4908      	ldr	r1, [pc, #32]	; (8004d40 <__NVIC_SetPriority+0x50>)
 8004d20:	79fb      	ldrb	r3, [r7, #7]
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	3b04      	subs	r3, #4
 8004d28:	0112      	lsls	r2, r2, #4
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	761a      	strb	r2, [r3, #24]
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	e000e100 	.word	0xe000e100
 8004d40:	e000ed00 	.word	0xe000ed00

08004d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b089      	sub	sp, #36	; 0x24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	f1c3 0307 	rsb	r3, r3, #7
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	bf28      	it	cs
 8004d62:	2304      	movcs	r3, #4
 8004d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	2b06      	cmp	r3, #6
 8004d6c:	d902      	bls.n	8004d74 <NVIC_EncodePriority+0x30>
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	3b03      	subs	r3, #3
 8004d72:	e000      	b.n	8004d76 <NVIC_EncodePriority+0x32>
 8004d74:	2300      	movs	r3, #0
 8004d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d78:	f04f 32ff 	mov.w	r2, #4294967295
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	43da      	mvns	r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	401a      	ands	r2, r3
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	fa01 f303 	lsl.w	r3, r1, r3
 8004d96:	43d9      	mvns	r1, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d9c:	4313      	orrs	r3, r2
         );
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3724      	adds	r7, #36	; 0x24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
	...

08004dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b07      	cmp	r3, #7
 8004db8:	d00f      	beq.n	8004dda <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b06      	cmp	r3, #6
 8004dbe:	d00c      	beq.n	8004dda <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b05      	cmp	r3, #5
 8004dc4:	d009      	beq.n	8004dda <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b04      	cmp	r3, #4
 8004dca:	d006      	beq.n	8004dda <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	d003      	beq.n	8004dda <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004dd2:	2190      	movs	r1, #144	; 0x90
 8004dd4:	4804      	ldr	r0, [pc, #16]	; (8004de8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8004dd6:	f7fe f9d8 	bl	800318a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7ff ff38 	bl	8004c50 <__NVIC_SetPriorityGrouping>
}
 8004de0:	bf00      	nop
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	0800ede8 	.word	0x0800ede8

08004dec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	4603      	mov	r3, r0
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b0f      	cmp	r3, #15
 8004e02:	d903      	bls.n	8004e0c <HAL_NVIC_SetPriority+0x20>
 8004e04:	21a8      	movs	r1, #168	; 0xa8
 8004e06:	480e      	ldr	r0, [pc, #56]	; (8004e40 <HAL_NVIC_SetPriority+0x54>)
 8004e08:	f7fe f9bf 	bl	800318a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b0f      	cmp	r3, #15
 8004e10:	d903      	bls.n	8004e1a <HAL_NVIC_SetPriority+0x2e>
 8004e12:	21a9      	movs	r1, #169	; 0xa9
 8004e14:	480a      	ldr	r0, [pc, #40]	; (8004e40 <HAL_NVIC_SetPriority+0x54>)
 8004e16:	f7fe f9b8 	bl	800318a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e1a:	f7ff ff3d 	bl	8004c98 <__NVIC_GetPriorityGrouping>
 8004e1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	68b9      	ldr	r1, [r7, #8]
 8004e24:	6978      	ldr	r0, [r7, #20]
 8004e26:	f7ff ff8d 	bl	8004d44 <NVIC_EncodePriority>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e30:	4611      	mov	r1, r2
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff ff5c 	bl	8004cf0 <__NVIC_SetPriority>
}
 8004e38:	bf00      	nop
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	0800ede8 	.word	0x0800ede8

08004e44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8004e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	da03      	bge.n	8004e5e <HAL_NVIC_EnableIRQ+0x1a>
 8004e56:	21bc      	movs	r1, #188	; 0xbc
 8004e58:	4805      	ldr	r0, [pc, #20]	; (8004e70 <HAL_NVIC_EnableIRQ+0x2c>)
 8004e5a:	f7fe f996 	bl	800318a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff ff26 	bl	8004cb4 <__NVIC_EnableIRQ>
}
 8004e68:	bf00      	nop
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	0800ede8 	.word	0x0800ede8

08004e74 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e017      	b.n	8004eb6 <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a0d      	ldr	r2, [pc, #52]	; (8004ec0 <HAL_CRC_Init+0x4c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d003      	beq.n	8004e98 <HAL_CRC_Init+0x24>
 8004e90:	2168      	movs	r1, #104	; 0x68
 8004e92:	480c      	ldr	r0, [pc, #48]	; (8004ec4 <HAL_CRC_Init+0x50>)
 8004e94:	f7fe f979 	bl	800318a <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	795b      	ldrb	r3, [r3, #5]
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d105      	bne.n	8004eae <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7fd fd3b 	bl	8002924 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40023000 	.word	0x40023000
 8004ec4:	0800ee60 	.word	0x0800ee60

08004ec8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ed4:	f7fe ff9c 	bl	8003e10 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e203      	b.n	80052ec <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a8b      	ldr	r2, [pc, #556]	; (8005118 <HAL_DMA_Init+0x250>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d04e      	beq.n	8004f8c <HAL_DMA_Init+0xc4>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a8a      	ldr	r2, [pc, #552]	; (800511c <HAL_DMA_Init+0x254>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d049      	beq.n	8004f8c <HAL_DMA_Init+0xc4>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a88      	ldr	r2, [pc, #544]	; (8005120 <HAL_DMA_Init+0x258>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d044      	beq.n	8004f8c <HAL_DMA_Init+0xc4>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a87      	ldr	r2, [pc, #540]	; (8005124 <HAL_DMA_Init+0x25c>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d03f      	beq.n	8004f8c <HAL_DMA_Init+0xc4>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a85      	ldr	r2, [pc, #532]	; (8005128 <HAL_DMA_Init+0x260>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d03a      	beq.n	8004f8c <HAL_DMA_Init+0xc4>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a84      	ldr	r2, [pc, #528]	; (800512c <HAL_DMA_Init+0x264>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d035      	beq.n	8004f8c <HAL_DMA_Init+0xc4>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a82      	ldr	r2, [pc, #520]	; (8005130 <HAL_DMA_Init+0x268>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d030      	beq.n	8004f8c <HAL_DMA_Init+0xc4>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a81      	ldr	r2, [pc, #516]	; (8005134 <HAL_DMA_Init+0x26c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d02b      	beq.n	8004f8c <HAL_DMA_Init+0xc4>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a7f      	ldr	r2, [pc, #508]	; (8005138 <HAL_DMA_Init+0x270>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d026      	beq.n	8004f8c <HAL_DMA_Init+0xc4>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a7e      	ldr	r2, [pc, #504]	; (800513c <HAL_DMA_Init+0x274>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d021      	beq.n	8004f8c <HAL_DMA_Init+0xc4>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a7c      	ldr	r2, [pc, #496]	; (8005140 <HAL_DMA_Init+0x278>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d01c      	beq.n	8004f8c <HAL_DMA_Init+0xc4>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a7b      	ldr	r2, [pc, #492]	; (8005144 <HAL_DMA_Init+0x27c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d017      	beq.n	8004f8c <HAL_DMA_Init+0xc4>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a79      	ldr	r2, [pc, #484]	; (8005148 <HAL_DMA_Init+0x280>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d012      	beq.n	8004f8c <HAL_DMA_Init+0xc4>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a78      	ldr	r2, [pc, #480]	; (800514c <HAL_DMA_Init+0x284>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d00d      	beq.n	8004f8c <HAL_DMA_Init+0xc4>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a76      	ldr	r2, [pc, #472]	; (8005150 <HAL_DMA_Init+0x288>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d008      	beq.n	8004f8c <HAL_DMA_Init+0xc4>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a75      	ldr	r2, [pc, #468]	; (8005154 <HAL_DMA_Init+0x28c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d003      	beq.n	8004f8c <HAL_DMA_Init+0xc4>
 8004f84:	21b7      	movs	r1, #183	; 0xb7
 8004f86:	4874      	ldr	r0, [pc, #464]	; (8005158 <HAL_DMA_Init+0x290>)
 8004f88:	f7fe f8ff 	bl	800318a <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d026      	beq.n	8004fe2 <HAL_DMA_Init+0x11a>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f9c:	d021      	beq.n	8004fe2 <HAL_DMA_Init+0x11a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fa6:	d01c      	beq.n	8004fe2 <HAL_DMA_Init+0x11a>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004fb0:	d017      	beq.n	8004fe2 <HAL_DMA_Init+0x11a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fba:	d012      	beq.n	8004fe2 <HAL_DMA_Init+0x11a>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8004fc4:	d00d      	beq.n	8004fe2 <HAL_DMA_Init+0x11a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004fce:	d008      	beq.n	8004fe2 <HAL_DMA_Init+0x11a>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8004fd8:	d003      	beq.n	8004fe2 <HAL_DMA_Init+0x11a>
 8004fda:	21b8      	movs	r1, #184	; 0xb8
 8004fdc:	485e      	ldr	r0, [pc, #376]	; (8005158 <HAL_DMA_Init+0x290>)
 8004fde:	f7fe f8d4 	bl	800318a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00b      	beq.n	8005002 <HAL_DMA_Init+0x13a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b40      	cmp	r3, #64	; 0x40
 8004ff0:	d007      	beq.n	8005002 <HAL_DMA_Init+0x13a>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	2b80      	cmp	r3, #128	; 0x80
 8004ff8:	d003      	beq.n	8005002 <HAL_DMA_Init+0x13a>
 8004ffa:	21b9      	movs	r1, #185	; 0xb9
 8004ffc:	4856      	ldr	r0, [pc, #344]	; (8005158 <HAL_DMA_Init+0x290>)
 8004ffe:	f7fe f8c4 	bl	800318a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800500a:	d007      	beq.n	800501c <HAL_DMA_Init+0x154>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <HAL_DMA_Init+0x154>
 8005014:	21ba      	movs	r1, #186	; 0xba
 8005016:	4850      	ldr	r0, [pc, #320]	; (8005158 <HAL_DMA_Init+0x290>)
 8005018:	f7fe f8b7 	bl	800318a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005024:	d007      	beq.n	8005036 <HAL_DMA_Init+0x16e>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_DMA_Init+0x16e>
 800502e:	21bb      	movs	r1, #187	; 0xbb
 8005030:	4849      	ldr	r0, [pc, #292]	; (8005158 <HAL_DMA_Init+0x290>)
 8005032:	f7fe f8aa 	bl	800318a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00d      	beq.n	800505a <HAL_DMA_Init+0x192>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005046:	d008      	beq.n	800505a <HAL_DMA_Init+0x192>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005050:	d003      	beq.n	800505a <HAL_DMA_Init+0x192>
 8005052:	21bc      	movs	r1, #188	; 0xbc
 8005054:	4840      	ldr	r0, [pc, #256]	; (8005158 <HAL_DMA_Init+0x290>)
 8005056:	f7fe f898 	bl	800318a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00d      	beq.n	800507e <HAL_DMA_Init+0x1b6>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800506a:	d008      	beq.n	800507e <HAL_DMA_Init+0x1b6>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005074:	d003      	beq.n	800507e <HAL_DMA_Init+0x1b6>
 8005076:	21bd      	movs	r1, #189	; 0xbd
 8005078:	4837      	ldr	r0, [pc, #220]	; (8005158 <HAL_DMA_Init+0x290>)
 800507a:	f7fe f886 	bl	800318a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00c      	beq.n	80050a0 <HAL_DMA_Init+0x1d8>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800508e:	d007      	beq.n	80050a0 <HAL_DMA_Init+0x1d8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	2b20      	cmp	r3, #32
 8005096:	d003      	beq.n	80050a0 <HAL_DMA_Init+0x1d8>
 8005098:	21be      	movs	r1, #190	; 0xbe
 800509a:	482f      	ldr	r0, [pc, #188]	; (8005158 <HAL_DMA_Init+0x290>)
 800509c:	f7fe f875 	bl	800318a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d012      	beq.n	80050ce <HAL_DMA_Init+0x206>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b0:	d00d      	beq.n	80050ce <HAL_DMA_Init+0x206>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050ba:	d008      	beq.n	80050ce <HAL_DMA_Init+0x206>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050c4:	d003      	beq.n	80050ce <HAL_DMA_Init+0x206>
 80050c6:	21bf      	movs	r1, #191	; 0xbf
 80050c8:	4823      	ldr	r0, [pc, #140]	; (8005158 <HAL_DMA_Init+0x290>)
 80050ca:	f7fe f85e 	bl	800318a <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d007      	beq.n	80050e6 <HAL_DMA_Init+0x21e>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	2b04      	cmp	r3, #4
 80050dc:	d003      	beq.n	80050e6 <HAL_DMA_Init+0x21e>
 80050de:	21c0      	movs	r1, #192	; 0xc0
 80050e0:	481d      	ldr	r0, [pc, #116]	; (8005158 <HAL_DMA_Init+0x290>)
 80050e2:	f7fe f852 	bl	800318a <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d064      	beq.n	80051b8 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d032      	beq.n	800515c <HAL_DMA_Init+0x294>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d02e      	beq.n	800515c <HAL_DMA_Init+0x294>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005102:	2b02      	cmp	r3, #2
 8005104:	d02a      	beq.n	800515c <HAL_DMA_Init+0x294>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510a:	2b03      	cmp	r3, #3
 800510c:	d026      	beq.n	800515c <HAL_DMA_Init+0x294>
 800510e:	21c5      	movs	r1, #197	; 0xc5
 8005110:	4811      	ldr	r0, [pc, #68]	; (8005158 <HAL_DMA_Init+0x290>)
 8005112:	f7fe f83a 	bl	800318a <assert_failed>
 8005116:	e021      	b.n	800515c <HAL_DMA_Init+0x294>
 8005118:	40026010 	.word	0x40026010
 800511c:	40026028 	.word	0x40026028
 8005120:	40026040 	.word	0x40026040
 8005124:	40026058 	.word	0x40026058
 8005128:	40026070 	.word	0x40026070
 800512c:	40026088 	.word	0x40026088
 8005130:	400260a0 	.word	0x400260a0
 8005134:	400260b8 	.word	0x400260b8
 8005138:	40026410 	.word	0x40026410
 800513c:	40026428 	.word	0x40026428
 8005140:	40026440 	.word	0x40026440
 8005144:	40026458 	.word	0x40026458
 8005148:	40026470 	.word	0x40026470
 800514c:	40026488 	.word	0x40026488
 8005150:	400264a0 	.word	0x400264a0
 8005154:	400264b8 	.word	0x400264b8
 8005158:	0800eed4 	.word	0x0800eed4
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d012      	beq.n	800518a <HAL_DMA_Init+0x2c2>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005168:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800516c:	d00d      	beq.n	800518a <HAL_DMA_Init+0x2c2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005172:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005176:	d008      	beq.n	800518a <HAL_DMA_Init+0x2c2>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005180:	d003      	beq.n	800518a <HAL_DMA_Init+0x2c2>
 8005182:	21c6      	movs	r1, #198	; 0xc6
 8005184:	485b      	ldr	r0, [pc, #364]	; (80052f4 <HAL_DMA_Init+0x42c>)
 8005186:	f7fe f800 	bl	800318a <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518e:	2b00      	cmp	r3, #0
 8005190:	d012      	beq.n	80051b8 <HAL_DMA_Init+0x2f0>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005196:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800519a:	d00d      	beq.n	80051b8 <HAL_DMA_Init+0x2f0>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051a4:	d008      	beq.n	80051b8 <HAL_DMA_Init+0x2f0>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80051ae:	d003      	beq.n	80051b8 <HAL_DMA_Init+0x2f0>
 80051b0:	21c7      	movs	r1, #199	; 0xc7
 80051b2:	4850      	ldr	r0, [pc, #320]	; (80052f4 <HAL_DMA_Init+0x42c>)
 80051b4:	f7fd ffe9 	bl	800318a <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0201 	bic.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051d8:	e00f      	b.n	80051fa <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051da:	f7fe fe19 	bl	8003e10 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b05      	cmp	r3, #5
 80051e6:	d908      	bls.n	80051fa <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2220      	movs	r2, #32
 80051ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2203      	movs	r2, #3
 80051f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e078      	b.n	80052ec <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e8      	bne.n	80051da <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	4b39      	ldr	r3, [pc, #228]	; (80052f8 <HAL_DMA_Init+0x430>)
 8005214:	4013      	ands	r3, r2
 8005216:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005226:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005232:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800523e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4313      	orrs	r3, r2
 800524a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	2b04      	cmp	r3, #4
 8005252:	d107      	bne.n	8005264 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525c:	4313      	orrs	r3, r2
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	4313      	orrs	r3, r2
 8005262:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f023 0307 	bic.w	r3, r3, #7
 800527a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	2b04      	cmp	r3, #4
 800528c:	d117      	bne.n	80052be <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	4313      	orrs	r3, r2
 8005296:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00e      	beq.n	80052be <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fb1f 	bl	80058e4 <DMA_CheckFifoParam>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d008      	beq.n	80052be <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2240      	movs	r2, #64	; 0x40
 80052b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80052ba:	2301      	movs	r3, #1
 80052bc:	e016      	b.n	80052ec <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fad6 	bl	8005878 <DMA_CalcBaseAndBitshift>
 80052cc:	4603      	mov	r3, r0
 80052ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d4:	223f      	movs	r2, #63	; 0x3f
 80052d6:	409a      	lsls	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	0800eed4 	.word	0x0800eed4
 80052f8:	f010803f 	.word	0xf010803f

080052fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005312:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_DMA_Start_IT+0x26>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005320:	d304      	bcc.n	800532c <HAL_DMA_Start_IT+0x30>
 8005322:	f240 11cb 	movw	r1, #459	; 0x1cb
 8005326:	4827      	ldr	r0, [pc, #156]	; (80053c4 <HAL_DMA_Start_IT+0xc8>)
 8005328:	f7fd ff2f 	bl	800318a <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005332:	2b01      	cmp	r3, #1
 8005334:	d101      	bne.n	800533a <HAL_DMA_Start_IT+0x3e>
 8005336:	2302      	movs	r3, #2
 8005338:	e040      	b.n	80053bc <HAL_DMA_Start_IT+0xc0>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b01      	cmp	r3, #1
 800534c:	d12f      	bne.n	80053ae <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2202      	movs	r2, #2
 8005352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 fa5a 	bl	800581c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800536c:	223f      	movs	r2, #63	; 0x3f
 800536e:	409a      	lsls	r2, r3
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0216 	orr.w	r2, r2, #22
 8005382:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d007      	beq.n	800539c <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0208 	orr.w	r2, r2, #8
 800539a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	e005      	b.n	80053ba <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80053b6:	2302      	movs	r3, #2
 80053b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80053ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3718      	adds	r7, #24
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	0800eed4 	.word	0x0800eed4

080053c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80053d6:	f7fe fd1b 	bl	8003e10 <HAL_GetTick>
 80053da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d008      	beq.n	80053fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2280      	movs	r2, #128	; 0x80
 80053ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e052      	b.n	80054a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0216 	bic.w	r2, r2, #22
 8005408:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695a      	ldr	r2, [r3, #20]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005418:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	2b00      	cmp	r3, #0
 8005420:	d103      	bne.n	800542a <HAL_DMA_Abort+0x62>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005426:	2b00      	cmp	r3, #0
 8005428:	d007      	beq.n	800543a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0208 	bic.w	r2, r2, #8
 8005438:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0201 	bic.w	r2, r2, #1
 8005448:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800544a:	e013      	b.n	8005474 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800544c:	f7fe fce0 	bl	8003e10 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b05      	cmp	r3, #5
 8005458:	d90c      	bls.n	8005474 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2220      	movs	r2, #32
 800545e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2203      	movs	r2, #3
 8005464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e015      	b.n	80054a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1e4      	bne.n	800544c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005486:	223f      	movs	r2, #63	; 0x3f
 8005488:	409a      	lsls	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d004      	beq.n	80054c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2280      	movs	r2, #128	; 0x80
 80054c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e00c      	b.n	80054e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2205      	movs	r2, #5
 80054ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0201 	bic.w	r2, r2, #1
 80054dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80054f8:	4b8e      	ldr	r3, [pc, #568]	; (8005734 <HAL_DMA_IRQHandler+0x248>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a8e      	ldr	r2, [pc, #568]	; (8005738 <HAL_DMA_IRQHandler+0x24c>)
 80054fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005502:	0a9b      	lsrs	r3, r3, #10
 8005504:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800550a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005516:	2208      	movs	r2, #8
 8005518:	409a      	lsls	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4013      	ands	r3, r2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d01a      	beq.n	8005558 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b00      	cmp	r3, #0
 800552e:	d013      	beq.n	8005558 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0204 	bic.w	r2, r2, #4
 800553e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005544:	2208      	movs	r2, #8
 8005546:	409a      	lsls	r2, r3
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005550:	f043 0201 	orr.w	r2, r3, #1
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800555c:	2201      	movs	r2, #1
 800555e:	409a      	lsls	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4013      	ands	r3, r2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d012      	beq.n	800558e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00b      	beq.n	800558e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800557a:	2201      	movs	r2, #1
 800557c:	409a      	lsls	r2, r3
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005586:	f043 0202 	orr.w	r2, r3, #2
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005592:	2204      	movs	r2, #4
 8005594:	409a      	lsls	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4013      	ands	r3, r2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d012      	beq.n	80055c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00b      	beq.n	80055c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b0:	2204      	movs	r2, #4
 80055b2:	409a      	lsls	r2, r3
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055bc:	f043 0204 	orr.w	r2, r3, #4
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055c8:	2210      	movs	r2, #16
 80055ca:	409a      	lsls	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4013      	ands	r3, r2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d043      	beq.n	800565c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d03c      	beq.n	800565c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e6:	2210      	movs	r2, #16
 80055e8:	409a      	lsls	r2, r3
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d018      	beq.n	800562e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d108      	bne.n	800561c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	2b00      	cmp	r3, #0
 8005610:	d024      	beq.n	800565c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	4798      	blx	r3
 800561a:	e01f      	b.n	800565c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005620:	2b00      	cmp	r3, #0
 8005622:	d01b      	beq.n	800565c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	4798      	blx	r3
 800562c:	e016      	b.n	800565c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005638:	2b00      	cmp	r3, #0
 800563a:	d107      	bne.n	800564c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0208 	bic.w	r2, r2, #8
 800564a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005660:	2220      	movs	r2, #32
 8005662:	409a      	lsls	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4013      	ands	r3, r2
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 808f 	beq.w	800578c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0310 	and.w	r3, r3, #16
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 8087 	beq.w	800578c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005682:	2220      	movs	r2, #32
 8005684:	409a      	lsls	r2, r3
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b05      	cmp	r3, #5
 8005694:	d136      	bne.n	8005704 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0216 	bic.w	r2, r2, #22
 80056a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	695a      	ldr	r2, [r3, #20]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d103      	bne.n	80056c6 <HAL_DMA_IRQHandler+0x1da>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d007      	beq.n	80056d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0208 	bic.w	r2, r2, #8
 80056d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056da:	223f      	movs	r2, #63	; 0x3f
 80056dc:	409a      	lsls	r2, r3
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d07e      	beq.n	80057f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	4798      	blx	r3
        }
        return;
 8005702:	e079      	b.n	80057f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d01d      	beq.n	800574e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10d      	bne.n	800573c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005724:	2b00      	cmp	r3, #0
 8005726:	d031      	beq.n	800578c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	4798      	blx	r3
 8005730:	e02c      	b.n	800578c <HAL_DMA_IRQHandler+0x2a0>
 8005732:	bf00      	nop
 8005734:	20000000 	.word	0x20000000
 8005738:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005740:	2b00      	cmp	r3, #0
 8005742:	d023      	beq.n	800578c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	4798      	blx	r3
 800574c:	e01e      	b.n	800578c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10f      	bne.n	800577c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0210 	bic.w	r2, r2, #16
 800576a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005790:	2b00      	cmp	r3, #0
 8005792:	d032      	beq.n	80057fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b00      	cmp	r3, #0
 800579e:	d022      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2205      	movs	r2, #5
 80057a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0201 	bic.w	r2, r2, #1
 80057b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	3301      	adds	r3, #1
 80057bc:	60bb      	str	r3, [r7, #8]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d307      	bcc.n	80057d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f2      	bne.n	80057b8 <HAL_DMA_IRQHandler+0x2cc>
 80057d2:	e000      	b.n	80057d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80057d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d005      	beq.n	80057fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	4798      	blx	r3
 80057f6:	e000      	b.n	80057fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80057f8:	bf00      	nop
    }
  }
}
 80057fa:	3718      	adds	r7, #24
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800580e:	b2db      	uxtb	r3, r3
}
 8005810:	4618      	mov	r0, r3
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005838:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	2b40      	cmp	r3, #64	; 0x40
 8005848:	d108      	bne.n	800585c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800585a:	e007      	b.n	800586c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	60da      	str	r2, [r3, #12]
}
 800586c:	bf00      	nop
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	b2db      	uxtb	r3, r3
 8005886:	3b10      	subs	r3, #16
 8005888:	4a14      	ldr	r2, [pc, #80]	; (80058dc <DMA_CalcBaseAndBitshift+0x64>)
 800588a:	fba2 2303 	umull	r2, r3, r2, r3
 800588e:	091b      	lsrs	r3, r3, #4
 8005890:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005892:	4a13      	ldr	r2, [pc, #76]	; (80058e0 <DMA_CalcBaseAndBitshift+0x68>)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4413      	add	r3, r2
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b03      	cmp	r3, #3
 80058a4:	d909      	bls.n	80058ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80058ae:	f023 0303 	bic.w	r3, r3, #3
 80058b2:	1d1a      	adds	r2, r3, #4
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	659a      	str	r2, [r3, #88]	; 0x58
 80058b8:	e007      	b.n	80058ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80058c2:	f023 0303 	bic.w	r3, r3, #3
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	aaaaaaab 	.word	0xaaaaaaab
 80058e0:	0800f400 	.word	0x0800f400

080058e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d11f      	bne.n	800593e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b03      	cmp	r3, #3
 8005902:	d856      	bhi.n	80059b2 <DMA_CheckFifoParam+0xce>
 8005904:	a201      	add	r2, pc, #4	; (adr r2, 800590c <DMA_CheckFifoParam+0x28>)
 8005906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590a:	bf00      	nop
 800590c:	0800591d 	.word	0x0800591d
 8005910:	0800592f 	.word	0x0800592f
 8005914:	0800591d 	.word	0x0800591d
 8005918:	080059b3 	.word	0x080059b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005920:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d046      	beq.n	80059b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800592c:	e043      	b.n	80059b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005932:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005936:	d140      	bne.n	80059ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800593c:	e03d      	b.n	80059ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005946:	d121      	bne.n	800598c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b03      	cmp	r3, #3
 800594c:	d837      	bhi.n	80059be <DMA_CheckFifoParam+0xda>
 800594e:	a201      	add	r2, pc, #4	; (adr r2, 8005954 <DMA_CheckFifoParam+0x70>)
 8005950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005954:	08005965 	.word	0x08005965
 8005958:	0800596b 	.word	0x0800596b
 800595c:	08005965 	.word	0x08005965
 8005960:	0800597d 	.word	0x0800597d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	73fb      	strb	r3, [r7, #15]
      break;
 8005968:	e030      	b.n	80059cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d025      	beq.n	80059c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800597a:	e022      	b.n	80059c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005984:	d11f      	bne.n	80059c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800598a:	e01c      	b.n	80059c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2b02      	cmp	r3, #2
 8005990:	d903      	bls.n	800599a <DMA_CheckFifoParam+0xb6>
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b03      	cmp	r3, #3
 8005996:	d003      	beq.n	80059a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005998:	e018      	b.n	80059cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	73fb      	strb	r3, [r7, #15]
      break;
 800599e:	e015      	b.n	80059cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00e      	beq.n	80059ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	73fb      	strb	r3, [r7, #15]
      break;
 80059b0:	e00b      	b.n	80059ca <DMA_CheckFifoParam+0xe6>
      break;
 80059b2:	bf00      	nop
 80059b4:	e00a      	b.n	80059cc <DMA_CheckFifoParam+0xe8>
      break;
 80059b6:	bf00      	nop
 80059b8:	e008      	b.n	80059cc <DMA_CheckFifoParam+0xe8>
      break;
 80059ba:	bf00      	nop
 80059bc:	e006      	b.n	80059cc <DMA_CheckFifoParam+0xe8>
      break;
 80059be:	bf00      	nop
 80059c0:	e004      	b.n	80059cc <DMA_CheckFifoParam+0xe8>
      break;
 80059c2:	bf00      	nop
 80059c4:	e002      	b.n	80059cc <DMA_CheckFifoParam+0xe8>
      break;   
 80059c6:	bf00      	nop
 80059c8:	e000      	b.n	80059cc <DMA_CheckFifoParam+0xe8>
      break;
 80059ca:	bf00      	nop
    }
  } 
  
  return status; 
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop

080059dc <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80059e6:	4b4b      	ldr	r3, [pc, #300]	; (8005b14 <HAL_FLASH_IRQHandler+0x138>)
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d020      	beq.n	8005a34 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80059f2:	4b49      	ldr	r3, [pc, #292]	; (8005b18 <HAL_FLASH_IRQHandler+0x13c>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d107      	bne.n	8005a0c <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 80059fc:	4b46      	ldr	r3, [pc, #280]	; (8005b18 <HAL_FLASH_IRQHandler+0x13c>)
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8005a02:	4b45      	ldr	r3, [pc, #276]	; (8005b18 <HAL_FLASH_IRQHandler+0x13c>)
 8005a04:	f04f 32ff 	mov.w	r2, #4294967295
 8005a08:	60da      	str	r2, [r3, #12]
 8005a0a:	e00b      	b.n	8005a24 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8005a0c:	4b42      	ldr	r3, [pc, #264]	; (8005b18 <HAL_FLASH_IRQHandler+0x13c>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d103      	bne.n	8005a1e <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8005a16:	4b40      	ldr	r3, [pc, #256]	; (8005b18 <HAL_FLASH_IRQHandler+0x13c>)
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	607b      	str	r3, [r7, #4]
 8005a1c:	e002      	b.n	8005a24 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8005a1e:	4b3e      	ldr	r3, [pc, #248]	; (8005b18 <HAL_FLASH_IRQHandler+0x13c>)
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8005a24:	f000 f88e 	bl	8005b44 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f881 	bl	8005b30 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005a2e:	4b3a      	ldr	r3, [pc, #232]	; (8005b18 <HAL_FLASH_IRQHandler+0x13c>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005a34:	4b37      	ldr	r3, [pc, #220]	; (8005b14 <HAL_FLASH_IRQHandler+0x138>)
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d04a      	beq.n	8005ad6 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005a40:	4b34      	ldr	r3, [pc, #208]	; (8005b14 <HAL_FLASH_IRQHandler+0x138>)
 8005a42:	2201      	movs	r2, #1
 8005a44:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8005a46:	4b34      	ldr	r3, [pc, #208]	; (8005b18 <HAL_FLASH_IRQHandler+0x13c>)
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d12d      	bne.n	8005aac <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8005a50:	4b31      	ldr	r3, [pc, #196]	; (8005b18 <HAL_FLASH_IRQHandler+0x13c>)
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	4a30      	ldr	r2, [pc, #192]	; (8005b18 <HAL_FLASH_IRQHandler+0x13c>)
 8005a58:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8005a5a:	4b2f      	ldr	r3, [pc, #188]	; (8005b18 <HAL_FLASH_IRQHandler+0x13c>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d015      	beq.n	8005a8e <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8005a62:	4b2d      	ldr	r3, [pc, #180]	; (8005b18 <HAL_FLASH_IRQHandler+0x13c>)
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f857 	bl	8005b1c <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8005a6e:	4b2a      	ldr	r3, [pc, #168]	; (8005b18 <HAL_FLASH_IRQHandler+0x13c>)
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	3301      	adds	r3, #1
 8005a74:	4a28      	ldr	r2, [pc, #160]	; (8005b18 <HAL_FLASH_IRQHandler+0x13c>)
 8005a76:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8005a78:	4b27      	ldr	r3, [pc, #156]	; (8005b18 <HAL_FLASH_IRQHandler+0x13c>)
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8005a7e:	4b26      	ldr	r3, [pc, #152]	; (8005b18 <HAL_FLASH_IRQHandler+0x13c>)
 8005a80:	7a1b      	ldrb	r3, [r3, #8]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	4619      	mov	r1, r3
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f8c2 	bl	8005c10 <FLASH_Erase_Sector>
 8005a8c:	e023      	b.n	8005ad6 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8005a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a92:	607b      	str	r3, [r7, #4]
 8005a94:	4a20      	ldr	r2, [pc, #128]	; (8005b18 <HAL_FLASH_IRQHandler+0x13c>)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005a9a:	4b1f      	ldr	r3, [pc, #124]	; (8005b18 <HAL_FLASH_IRQHandler+0x13c>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8005aa0:	f000 f92c 	bl	8005cfc <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 f839 	bl	8005b1c <HAL_FLASH_EndOfOperationCallback>
 8005aaa:	e014      	b.n	8005ad6 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8005aac:	4b1a      	ldr	r3, [pc, #104]	; (8005b18 <HAL_FLASH_IRQHandler+0x13c>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d107      	bne.n	8005ac6 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8005ab6:	f000 f921 	bl	8005cfc <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8005aba:	4b17      	ldr	r3, [pc, #92]	; (8005b18 <HAL_FLASH_IRQHandler+0x13c>)
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 f82c 	bl	8005b1c <HAL_FLASH_EndOfOperationCallback>
 8005ac4:	e004      	b.n	8005ad0 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8005ac6:	4b14      	ldr	r3, [pc, #80]	; (8005b18 <HAL_FLASH_IRQHandler+0x13c>)
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 f826 	bl	8005b1c <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005ad0:	4b11      	ldr	r3, [pc, #68]	; (8005b18 <HAL_FLASH_IRQHandler+0x13c>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8005ad6:	4b10      	ldr	r3, [pc, #64]	; (8005b18 <HAL_FLASH_IRQHandler+0x13c>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d114      	bne.n	8005b0a <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8005ae0:	4b0c      	ldr	r3, [pc, #48]	; (8005b14 <HAL_FLASH_IRQHandler+0x138>)
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	4a0b      	ldr	r2, [pc, #44]	; (8005b14 <HAL_FLASH_IRQHandler+0x138>)
 8005ae6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005aea:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8005aec:	4b09      	ldr	r3, [pc, #36]	; (8005b14 <HAL_FLASH_IRQHandler+0x138>)
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	4a08      	ldr	r2, [pc, #32]	; (8005b14 <HAL_FLASH_IRQHandler+0x138>)
 8005af2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005af6:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8005af8:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <HAL_FLASH_IRQHandler+0x138>)
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	4a05      	ldr	r2, [pc, #20]	; (8005b14 <HAL_FLASH_IRQHandler+0x138>)
 8005afe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005b02:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8005b04:	4b04      	ldr	r3, [pc, #16]	; (8005b18 <HAL_FLASH_IRQHandler+0x13c>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	761a      	strb	r2, [r3, #24]
  }
}
 8005b0a:	bf00      	nop
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	40023c00 	.word	0x40023c00
 8005b18:	200008fc 	.word	0x200008fc

08005b1c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005b48:	4b2f      	ldr	r3, [pc, #188]	; (8005c08 <FLASH_SetErrorCode+0xc4>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f003 0310 	and.w	r3, r3, #16
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d008      	beq.n	8005b66 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005b54:	4b2d      	ldr	r3, [pc, #180]	; (8005c0c <FLASH_SetErrorCode+0xc8>)
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	f043 0310 	orr.w	r3, r3, #16
 8005b5c:	4a2b      	ldr	r2, [pc, #172]	; (8005c0c <FLASH_SetErrorCode+0xc8>)
 8005b5e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005b60:	4b29      	ldr	r3, [pc, #164]	; (8005c08 <FLASH_SetErrorCode+0xc4>)
 8005b62:	2210      	movs	r2, #16
 8005b64:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005b66:	4b28      	ldr	r3, [pc, #160]	; (8005c08 <FLASH_SetErrorCode+0xc4>)
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d008      	beq.n	8005b84 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005b72:	4b26      	ldr	r3, [pc, #152]	; (8005c0c <FLASH_SetErrorCode+0xc8>)
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	f043 0308 	orr.w	r3, r3, #8
 8005b7a:	4a24      	ldr	r2, [pc, #144]	; (8005c0c <FLASH_SetErrorCode+0xc8>)
 8005b7c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005b7e:	4b22      	ldr	r3, [pc, #136]	; (8005c08 <FLASH_SetErrorCode+0xc4>)
 8005b80:	2220      	movs	r2, #32
 8005b82:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005b84:	4b20      	ldr	r3, [pc, #128]	; (8005c08 <FLASH_SetErrorCode+0xc4>)
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005b90:	4b1e      	ldr	r3, [pc, #120]	; (8005c0c <FLASH_SetErrorCode+0xc8>)
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	f043 0304 	orr.w	r3, r3, #4
 8005b98:	4a1c      	ldr	r2, [pc, #112]	; (8005c0c <FLASH_SetErrorCode+0xc8>)
 8005b9a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005b9c:	4b1a      	ldr	r3, [pc, #104]	; (8005c08 <FLASH_SetErrorCode+0xc4>)
 8005b9e:	2240      	movs	r2, #64	; 0x40
 8005ba0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005ba2:	4b19      	ldr	r3, [pc, #100]	; (8005c08 <FLASH_SetErrorCode+0xc4>)
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d008      	beq.n	8005bc0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005bae:	4b17      	ldr	r3, [pc, #92]	; (8005c0c <FLASH_SetErrorCode+0xc8>)
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	f043 0302 	orr.w	r3, r3, #2
 8005bb6:	4a15      	ldr	r2, [pc, #84]	; (8005c0c <FLASH_SetErrorCode+0xc8>)
 8005bb8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005bba:	4b13      	ldr	r3, [pc, #76]	; (8005c08 <FLASH_SetErrorCode+0xc4>)
 8005bbc:	2280      	movs	r2, #128	; 0x80
 8005bbe:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005bc0:	4b11      	ldr	r3, [pc, #68]	; (8005c08 <FLASH_SetErrorCode+0xc4>)
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d009      	beq.n	8005be0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005bcc:	4b0f      	ldr	r3, [pc, #60]	; (8005c0c <FLASH_SetErrorCode+0xc8>)
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	f043 0301 	orr.w	r3, r3, #1
 8005bd4:	4a0d      	ldr	r2, [pc, #52]	; (8005c0c <FLASH_SetErrorCode+0xc8>)
 8005bd6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <FLASH_SetErrorCode+0xc4>)
 8005bda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bde:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005be0:	4b09      	ldr	r3, [pc, #36]	; (8005c08 <FLASH_SetErrorCode+0xc4>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d008      	beq.n	8005bfe <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005bec:	4b07      	ldr	r3, [pc, #28]	; (8005c0c <FLASH_SetErrorCode+0xc8>)
 8005bee:	69db      	ldr	r3, [r3, #28]
 8005bf0:	f043 0320 	orr.w	r3, r3, #32
 8005bf4:	4a05      	ldr	r2, [pc, #20]	; (8005c0c <FLASH_SetErrorCode+0xc8>)
 8005bf6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005bf8:	4b03      	ldr	r3, [pc, #12]	; (8005c08 <FLASH_SetErrorCode+0xc4>)
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	60da      	str	r2, [r3, #12]
  }
}
 8005bfe:	bf00      	nop
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	40023c00 	.word	0x40023c00
 8005c0c:	200008fc 	.word	0x200008fc

08005c10 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d019      	beq.n	8005c5a <FLASH_Erase_Sector+0x4a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d016      	beq.n	8005c5a <FLASH_Erase_Sector+0x4a>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d013      	beq.n	8005c5a <FLASH_Erase_Sector+0x4a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b03      	cmp	r3, #3
 8005c36:	d010      	beq.n	8005c5a <FLASH_Erase_Sector+0x4a>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d00d      	beq.n	8005c5a <FLASH_Erase_Sector+0x4a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b05      	cmp	r3, #5
 8005c42:	d00a      	beq.n	8005c5a <FLASH_Erase_Sector+0x4a>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b06      	cmp	r3, #6
 8005c48:	d007      	beq.n	8005c5a <FLASH_Erase_Sector+0x4a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b07      	cmp	r3, #7
 8005c4e:	d004      	beq.n	8005c5a <FLASH_Erase_Sector+0x4a>
 8005c50:	f240 31d9 	movw	r1, #985	; 0x3d9
 8005c54:	4827      	ldr	r0, [pc, #156]	; (8005cf4 <FLASH_Erase_Sector+0xe4>)
 8005c56:	f7fd fa98 	bl	800318a <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8005c5a:	78fb      	ldrb	r3, [r7, #3]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00d      	beq.n	8005c7c <FLASH_Erase_Sector+0x6c>
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d00a      	beq.n	8005c7c <FLASH_Erase_Sector+0x6c>
 8005c66:	78fb      	ldrb	r3, [r7, #3]
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d007      	beq.n	8005c7c <FLASH_Erase_Sector+0x6c>
 8005c6c:	78fb      	ldrb	r3, [r7, #3]
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d004      	beq.n	8005c7c <FLASH_Erase_Sector+0x6c>
 8005c72:	f240 31da 	movw	r1, #986	; 0x3da
 8005c76:	481f      	ldr	r0, [pc, #124]	; (8005cf4 <FLASH_Erase_Sector+0xe4>)
 8005c78:	f7fd fa87 	bl	800318a <assert_failed>

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005c7c:	78fb      	ldrb	r3, [r7, #3]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d102      	bne.n	8005c88 <FLASH_Erase_Sector+0x78>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	e010      	b.n	8005caa <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005c88:	78fb      	ldrb	r3, [r7, #3]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d103      	bne.n	8005c96 <FLASH_Erase_Sector+0x86>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	e009      	b.n	8005caa <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005c96:	78fb      	ldrb	r3, [r7, #3]
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d103      	bne.n	8005ca4 <FLASH_Erase_Sector+0x94>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ca0:	60fb      	str	r3, [r7, #12]
 8005ca2:	e002      	b.n	8005caa <FLASH_Erase_Sector+0x9a>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005ca4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005ca8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005caa:	4b13      	ldr	r3, [pc, #76]	; (8005cf8 <FLASH_Erase_Sector+0xe8>)
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	4a12      	ldr	r2, [pc, #72]	; (8005cf8 <FLASH_Erase_Sector+0xe8>)
 8005cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005cb6:	4b10      	ldr	r3, [pc, #64]	; (8005cf8 <FLASH_Erase_Sector+0xe8>)
 8005cb8:	691a      	ldr	r2, [r3, #16]
 8005cba:	490f      	ldr	r1, [pc, #60]	; (8005cf8 <FLASH_Erase_Sector+0xe8>)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005cc2:	4b0d      	ldr	r3, [pc, #52]	; (8005cf8 <FLASH_Erase_Sector+0xe8>)
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	4a0c      	ldr	r2, [pc, #48]	; (8005cf8 <FLASH_Erase_Sector+0xe8>)
 8005cc8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005ccc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005cce:	4b0a      	ldr	r3, [pc, #40]	; (8005cf8 <FLASH_Erase_Sector+0xe8>)
 8005cd0:	691a      	ldr	r2, [r3, #16]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	00db      	lsls	r3, r3, #3
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	4a07      	ldr	r2, [pc, #28]	; (8005cf8 <FLASH_Erase_Sector+0xe8>)
 8005cda:	f043 0302 	orr.w	r3, r3, #2
 8005cde:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005ce0:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <FLASH_Erase_Sector+0xe8>)
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	4a04      	ldr	r2, [pc, #16]	; (8005cf8 <FLASH_Erase_Sector+0xe8>)
 8005ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cea:	6113      	str	r3, [r2, #16]
}
 8005cec:	bf00      	nop
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	0800ef48 	.word	0x0800ef48
 8005cf8:	40023c00 	.word	0x40023c00

08005cfc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005d00:	4b20      	ldr	r3, [pc, #128]	; (8005d84 <FLASH_FlushCaches+0x88>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d017      	beq.n	8005d3c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005d0c:	4b1d      	ldr	r3, [pc, #116]	; (8005d84 <FLASH_FlushCaches+0x88>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a1c      	ldr	r2, [pc, #112]	; (8005d84 <FLASH_FlushCaches+0x88>)
 8005d12:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d16:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005d18:	4b1a      	ldr	r3, [pc, #104]	; (8005d84 <FLASH_FlushCaches+0x88>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a19      	ldr	r2, [pc, #100]	; (8005d84 <FLASH_FlushCaches+0x88>)
 8005d1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d22:	6013      	str	r3, [r2, #0]
 8005d24:	4b17      	ldr	r3, [pc, #92]	; (8005d84 <FLASH_FlushCaches+0x88>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a16      	ldr	r2, [pc, #88]	; (8005d84 <FLASH_FlushCaches+0x88>)
 8005d2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d2e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d30:	4b14      	ldr	r3, [pc, #80]	; (8005d84 <FLASH_FlushCaches+0x88>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a13      	ldr	r2, [pc, #76]	; (8005d84 <FLASH_FlushCaches+0x88>)
 8005d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d3a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005d3c:	4b11      	ldr	r3, [pc, #68]	; (8005d84 <FLASH_FlushCaches+0x88>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d017      	beq.n	8005d78 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005d48:	4b0e      	ldr	r3, [pc, #56]	; (8005d84 <FLASH_FlushCaches+0x88>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a0d      	ldr	r2, [pc, #52]	; (8005d84 <FLASH_FlushCaches+0x88>)
 8005d4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d52:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005d54:	4b0b      	ldr	r3, [pc, #44]	; (8005d84 <FLASH_FlushCaches+0x88>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a0a      	ldr	r2, [pc, #40]	; (8005d84 <FLASH_FlushCaches+0x88>)
 8005d5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d5e:	6013      	str	r3, [r2, #0]
 8005d60:	4b08      	ldr	r3, [pc, #32]	; (8005d84 <FLASH_FlushCaches+0x88>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a07      	ldr	r2, [pc, #28]	; (8005d84 <FLASH_FlushCaches+0x88>)
 8005d66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d6a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d6c:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <FLASH_FlushCaches+0x88>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a04      	ldr	r2, [pc, #16]	; (8005d84 <FLASH_FlushCaches+0x88>)
 8005d72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d76:	6013      	str	r3, [r2, #0]
  }
}
 8005d78:	bf00      	nop
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	40023c00 	.word	0x40023c00

08005d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b088      	sub	sp, #32
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a33      	ldr	r2, [pc, #204]	; (8005e70 <HAL_GPIO_Init+0xe8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d017      	beq.n	8005dd6 <HAL_GPIO_Init+0x4e>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a32      	ldr	r2, [pc, #200]	; (8005e74 <HAL_GPIO_Init+0xec>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d013      	beq.n	8005dd6 <HAL_GPIO_Init+0x4e>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a31      	ldr	r2, [pc, #196]	; (8005e78 <HAL_GPIO_Init+0xf0>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d00f      	beq.n	8005dd6 <HAL_GPIO_Init+0x4e>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a30      	ldr	r2, [pc, #192]	; (8005e7c <HAL_GPIO_Init+0xf4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00b      	beq.n	8005dd6 <HAL_GPIO_Init+0x4e>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a2f      	ldr	r2, [pc, #188]	; (8005e80 <HAL_GPIO_Init+0xf8>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d007      	beq.n	8005dd6 <HAL_GPIO_Init+0x4e>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a2e      	ldr	r2, [pc, #184]	; (8005e84 <HAL_GPIO_Init+0xfc>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d003      	beq.n	8005dd6 <HAL_GPIO_Init+0x4e>
 8005dce:	21ac      	movs	r1, #172	; 0xac
 8005dd0:	482d      	ldr	r0, [pc, #180]	; (8005e88 <HAL_GPIO_Init+0x100>)
 8005dd2:	f7fd f9da 	bl	800318a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d005      	beq.n	8005dec <HAL_GPIO_Init+0x64>
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	0c1b      	lsrs	r3, r3, #16
 8005de6:	041b      	lsls	r3, r3, #16
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <HAL_GPIO_Init+0x6c>
 8005dec:	21ad      	movs	r1, #173	; 0xad
 8005dee:	4826      	ldr	r0, [pc, #152]	; (8005e88 <HAL_GPIO_Init+0x100>)
 8005df0:	f7fd f9cb 	bl	800318a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d035      	beq.n	8005e68 <HAL_GPIO_Init+0xe0>
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d031      	beq.n	8005e68 <HAL_GPIO_Init+0xe0>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	2b11      	cmp	r3, #17
 8005e0a:	d02d      	beq.n	8005e68 <HAL_GPIO_Init+0xe0>
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d029      	beq.n	8005e68 <HAL_GPIO_Init+0xe0>
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	2b12      	cmp	r3, #18
 8005e1a:	d025      	beq.n	8005e68 <HAL_GPIO_Init+0xe0>
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8005e24:	d020      	beq.n	8005e68 <HAL_GPIO_Init+0xe0>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005e2e:	d01b      	beq.n	8005e68 <HAL_GPIO_Init+0xe0>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8005e38:	d016      	beq.n	8005e68 <HAL_GPIO_Init+0xe0>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8005e42:	d011      	beq.n	8005e68 <HAL_GPIO_Init+0xe0>
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8005e4c:	d00c      	beq.n	8005e68 <HAL_GPIO_Init+0xe0>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8005e56:	d007      	beq.n	8005e68 <HAL_GPIO_Init+0xe0>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	2b03      	cmp	r3, #3
 8005e5e:	d003      	beq.n	8005e68 <HAL_GPIO_Init+0xe0>
 8005e60:	21ae      	movs	r1, #174	; 0xae
 8005e62:	4809      	ldr	r0, [pc, #36]	; (8005e88 <HAL_GPIO_Init+0x100>)
 8005e64:	f7fd f991 	bl	800318a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e68:	2300      	movs	r3, #0
 8005e6a:	61fb      	str	r3, [r7, #28]
 8005e6c:	e20c      	b.n	8006288 <HAL_GPIO_Init+0x500>
 8005e6e:	bf00      	nop
 8005e70:	40020000 	.word	0x40020000
 8005e74:	40020400 	.word	0x40020400
 8005e78:	40020800 	.word	0x40020800
 8005e7c:	40020c00 	.word	0x40020c00
 8005e80:	40021000 	.word	0x40021000
 8005e84:	40021c00 	.word	0x40021c00
 8005e88:	0800efc0 	.word	0x0800efc0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	f040 81ec 	bne.w	8006282 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d005      	beq.n	8005ec2 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d144      	bne.n	8005f4c <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00f      	beq.n	8005eea <HAL_GPIO_Init+0x162>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d00b      	beq.n	8005eea <HAL_GPIO_Init+0x162>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d007      	beq.n	8005eea <HAL_GPIO_Init+0x162>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	d003      	beq.n	8005eea <HAL_GPIO_Init+0x162>
 8005ee2:	21c0      	movs	r1, #192	; 0xc0
 8005ee4:	4884      	ldr	r0, [pc, #528]	; (80060f8 <HAL_GPIO_Init+0x370>)
 8005ee6:	f7fd f950 	bl	800318a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	2203      	movs	r2, #3
 8005ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8005efa:	43db      	mvns	r3, r3
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	4013      	ands	r3, r2
 8005f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f20:	2201      	movs	r2, #1
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	43db      	mvns	r3, r3
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	091b      	lsrs	r3, r3, #4
 8005f36:	f003 0201 	and.w	r2, r3, #1
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f003 0303 	and.w	r3, r3, #3
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d027      	beq.n	8005fa8 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00b      	beq.n	8005f78 <HAL_GPIO_Init+0x1f0>
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d007      	beq.n	8005f78 <HAL_GPIO_Init+0x1f0>
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d003      	beq.n	8005f78 <HAL_GPIO_Init+0x1f0>
 8005f70:	21d1      	movs	r1, #209	; 0xd1
 8005f72:	4861      	ldr	r0, [pc, #388]	; (80060f8 <HAL_GPIO_Init+0x370>)
 8005f74:	f7fd f909 	bl	800318a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	005b      	lsls	r3, r3, #1
 8005f82:	2203      	movs	r2, #3
 8005f84:	fa02 f303 	lsl.w	r3, r2, r3
 8005f88:	43db      	mvns	r3, r3
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f003 0303 	and.w	r3, r3, #3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	f040 80a3 	bne.w	80060fc <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d077      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	2b09      	cmp	r3, #9
 8005fc4:	d073      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d06f      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d06b      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d067      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d063      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d05f      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d05b      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d057      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b02      	cmp	r3, #2
 8006004:	d053      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	2b02      	cmp	r3, #2
 800600c:	d04f      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	2b04      	cmp	r3, #4
 8006014:	d04b      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	2b04      	cmp	r3, #4
 800601c:	d047      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	2b04      	cmp	r3, #4
 8006024:	d043      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	2b05      	cmp	r3, #5
 800602c:	d03f      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	2b05      	cmp	r3, #5
 8006034:	d03b      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	2b05      	cmp	r3, #5
 800603c:	d037      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	2b06      	cmp	r3, #6
 8006044:	d033      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	2b06      	cmp	r3, #6
 800604c:	d02f      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	2b05      	cmp	r3, #5
 8006054:	d02b      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	2b06      	cmp	r3, #6
 800605c:	d027      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	2b07      	cmp	r3, #7
 8006064:	d023      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	2b07      	cmp	r3, #7
 800606c:	d01f      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	2b07      	cmp	r3, #7
 8006074:	d01b      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	2b08      	cmp	r3, #8
 800607c:	d017      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	2b0a      	cmp	r3, #10
 8006084:	d013      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	2b09      	cmp	r3, #9
 800608c:	d00f      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	2b09      	cmp	r3, #9
 8006094:	d00b      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	2b0c      	cmp	r3, #12
 800609c:	d007      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	2b0f      	cmp	r3, #15
 80060a4:	d003      	beq.n	80060ae <HAL_GPIO_Init+0x326>
 80060a6:	21de      	movs	r1, #222	; 0xde
 80060a8:	4813      	ldr	r0, [pc, #76]	; (80060f8 <HAL_GPIO_Init+0x370>)
 80060aa:	f7fd f86e 	bl	800318a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	08da      	lsrs	r2, r3, #3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	3208      	adds	r2, #8
 80060b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	f003 0307 	and.w	r3, r3, #7
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	220f      	movs	r2, #15
 80060c6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ca:	43db      	mvns	r3, r3
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	4013      	ands	r3, r2
 80060d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	691a      	ldr	r2, [r3, #16]
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	f003 0307 	and.w	r3, r3, #7
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	fa02 f303 	lsl.w	r3, r2, r3
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	08da      	lsrs	r2, r3, #3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	3208      	adds	r2, #8
 80060f0:	69b9      	ldr	r1, [r7, #24]
 80060f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80060f6:	e001      	b.n	80060fc <HAL_GPIO_Init+0x374>
 80060f8:	0800efc0 	.word	0x0800efc0
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	2203      	movs	r2, #3
 8006108:	fa02 f303 	lsl.w	r3, r2, r3
 800610c:	43db      	mvns	r3, r3
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	4013      	ands	r3, r2
 8006112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f003 0203 	and.w	r2, r3, #3
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	fa02 f303 	lsl.w	r3, r2, r3
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	4313      	orrs	r3, r2
 8006128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 80a2 	beq.w	8006282 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800613e:	2300      	movs	r3, #0
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	4b56      	ldr	r3, [pc, #344]	; (800629c <HAL_GPIO_Init+0x514>)
 8006144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006146:	4a55      	ldr	r2, [pc, #340]	; (800629c <HAL_GPIO_Init+0x514>)
 8006148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800614c:	6453      	str	r3, [r2, #68]	; 0x44
 800614e:	4b53      	ldr	r3, [pc, #332]	; (800629c <HAL_GPIO_Init+0x514>)
 8006150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006156:	60fb      	str	r3, [r7, #12]
 8006158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800615a:	4a51      	ldr	r2, [pc, #324]	; (80062a0 <HAL_GPIO_Init+0x518>)
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	089b      	lsrs	r3, r3, #2
 8006160:	3302      	adds	r3, #2
 8006162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	f003 0303 	and.w	r3, r3, #3
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	220f      	movs	r2, #15
 8006172:	fa02 f303 	lsl.w	r3, r2, r3
 8006176:	43db      	mvns	r3, r3
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	4013      	ands	r3, r2
 800617c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a48      	ldr	r2, [pc, #288]	; (80062a4 <HAL_GPIO_Init+0x51c>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d019      	beq.n	80061ba <HAL_GPIO_Init+0x432>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a47      	ldr	r2, [pc, #284]	; (80062a8 <HAL_GPIO_Init+0x520>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d013      	beq.n	80061b6 <HAL_GPIO_Init+0x42e>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a46      	ldr	r2, [pc, #280]	; (80062ac <HAL_GPIO_Init+0x524>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d00d      	beq.n	80061b2 <HAL_GPIO_Init+0x42a>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a45      	ldr	r2, [pc, #276]	; (80062b0 <HAL_GPIO_Init+0x528>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d007      	beq.n	80061ae <HAL_GPIO_Init+0x426>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a44      	ldr	r2, [pc, #272]	; (80062b4 <HAL_GPIO_Init+0x52c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d101      	bne.n	80061aa <HAL_GPIO_Init+0x422>
 80061a6:	2304      	movs	r3, #4
 80061a8:	e008      	b.n	80061bc <HAL_GPIO_Init+0x434>
 80061aa:	2307      	movs	r3, #7
 80061ac:	e006      	b.n	80061bc <HAL_GPIO_Init+0x434>
 80061ae:	2303      	movs	r3, #3
 80061b0:	e004      	b.n	80061bc <HAL_GPIO_Init+0x434>
 80061b2:	2302      	movs	r3, #2
 80061b4:	e002      	b.n	80061bc <HAL_GPIO_Init+0x434>
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <HAL_GPIO_Init+0x434>
 80061ba:	2300      	movs	r3, #0
 80061bc:	69fa      	ldr	r2, [r7, #28]
 80061be:	f002 0203 	and.w	r2, r2, #3
 80061c2:	0092      	lsls	r2, r2, #2
 80061c4:	4093      	lsls	r3, r2
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061cc:	4934      	ldr	r1, [pc, #208]	; (80062a0 <HAL_GPIO_Init+0x518>)
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	089b      	lsrs	r3, r3, #2
 80061d2:	3302      	adds	r3, #2
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80061da:	4b37      	ldr	r3, [pc, #220]	; (80062b8 <HAL_GPIO_Init+0x530>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	43db      	mvns	r3, r3
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	4013      	ands	r3, r2
 80061e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80061fe:	4a2e      	ldr	r2, [pc, #184]	; (80062b8 <HAL_GPIO_Init+0x530>)
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006204:	4b2c      	ldr	r3, [pc, #176]	; (80062b8 <HAL_GPIO_Init+0x530>)
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	43db      	mvns	r3, r3
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	4013      	ands	r3, r2
 8006212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	4313      	orrs	r3, r2
 8006226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006228:	4a23      	ldr	r2, [pc, #140]	; (80062b8 <HAL_GPIO_Init+0x530>)
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800622e:	4b22      	ldr	r3, [pc, #136]	; (80062b8 <HAL_GPIO_Init+0x530>)
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	43db      	mvns	r3, r3
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	4013      	ands	r3, r2
 800623c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	4313      	orrs	r3, r2
 8006250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006252:	4a19      	ldr	r2, [pc, #100]	; (80062b8 <HAL_GPIO_Init+0x530>)
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006258:	4b17      	ldr	r3, [pc, #92]	; (80062b8 <HAL_GPIO_Init+0x530>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	43db      	mvns	r3, r3
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	4013      	ands	r3, r2
 8006266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	4313      	orrs	r3, r2
 800627a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800627c:	4a0e      	ldr	r2, [pc, #56]	; (80062b8 <HAL_GPIO_Init+0x530>)
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	3301      	adds	r3, #1
 8006286:	61fb      	str	r3, [r7, #28]
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	2b0f      	cmp	r3, #15
 800628c:	f67f adfe 	bls.w	8005e8c <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8006290:	bf00      	nop
 8006292:	bf00      	nop
 8006294:	3720      	adds	r7, #32
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	40023800 	.word	0x40023800
 80062a0:	40013800 	.word	0x40013800
 80062a4:	40020000 	.word	0x40020000
 80062a8:	40020400 	.word	0x40020400
 80062ac:	40020800 	.word	0x40020800
 80062b0:	40020c00 	.word	0x40020c00
 80062b4:	40021000 	.word	0x40021000
 80062b8:	40013c00 	.word	0x40013c00

080062bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	460b      	mov	r3, r1
 80062c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80062c8:	887b      	ldrh	r3, [r7, #2]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d004      	beq.n	80062d8 <HAL_GPIO_ReadPin+0x1c>
 80062ce:	887b      	ldrh	r3, [r7, #2]
 80062d0:	0c1b      	lsrs	r3, r3, #16
 80062d2:	041b      	lsls	r3, r3, #16
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d004      	beq.n	80062e2 <HAL_GPIO_ReadPin+0x26>
 80062d8:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80062dc:	4809      	ldr	r0, [pc, #36]	; (8006304 <HAL_GPIO_ReadPin+0x48>)
 80062de:	f7fc ff54 	bl	800318a <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691a      	ldr	r2, [r3, #16]
 80062e6:	887b      	ldrh	r3, [r7, #2]
 80062e8:	4013      	ands	r3, r2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d002      	beq.n	80062f4 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 80062ee:	2301      	movs	r3, #1
 80062f0:	73fb      	strb	r3, [r7, #15]
 80062f2:	e001      	b.n	80062f8 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062f4:	2300      	movs	r3, #0
 80062f6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	0800efc0 	.word	0x0800efc0

08006308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	460b      	mov	r3, r1
 8006312:	807b      	strh	r3, [r7, #2]
 8006314:	4613      	mov	r3, r2
 8006316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006318:	887b      	ldrh	r3, [r7, #2]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d004      	beq.n	8006328 <HAL_GPIO_WritePin+0x20>
 800631e:	887b      	ldrh	r3, [r7, #2]
 8006320:	0c1b      	lsrs	r3, r3, #16
 8006322:	041b      	lsls	r3, r3, #16
 8006324:	2b00      	cmp	r3, #0
 8006326:	d004      	beq.n	8006332 <HAL_GPIO_WritePin+0x2a>
 8006328:	f240 119d 	movw	r1, #413	; 0x19d
 800632c:	480e      	ldr	r0, [pc, #56]	; (8006368 <HAL_GPIO_WritePin+0x60>)
 800632e:	f7fc ff2c 	bl	800318a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8006332:	787b      	ldrb	r3, [r7, #1]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d007      	beq.n	8006348 <HAL_GPIO_WritePin+0x40>
 8006338:	787b      	ldrb	r3, [r7, #1]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d004      	beq.n	8006348 <HAL_GPIO_WritePin+0x40>
 800633e:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8006342:	4809      	ldr	r0, [pc, #36]	; (8006368 <HAL_GPIO_WritePin+0x60>)
 8006344:	f7fc ff21 	bl	800318a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8006348:	787b      	ldrb	r3, [r7, #1]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d003      	beq.n	8006356 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800634e:	887a      	ldrh	r2, [r7, #2]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006354:	e003      	b.n	800635e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006356:	887b      	ldrh	r3, [r7, #2]
 8006358:	041a      	lsls	r2, r3, #16
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	619a      	str	r2, [r3, #24]
}
 800635e:	bf00      	nop
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	0800efc0 	.word	0x0800efc0

0800636c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e1f7      	b.n	800676e <HAL_I2C_Init+0x402>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a81      	ldr	r2, [pc, #516]	; (8006588 <HAL_I2C_Init+0x21c>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d00e      	beq.n	80063a6 <HAL_I2C_Init+0x3a>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a7f      	ldr	r2, [pc, #508]	; (800658c <HAL_I2C_Init+0x220>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d009      	beq.n	80063a6 <HAL_I2C_Init+0x3a>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a7e      	ldr	r2, [pc, #504]	; (8006590 <HAL_I2C_Init+0x224>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d004      	beq.n	80063a6 <HAL_I2C_Init+0x3a>
 800639c:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80063a0:	487c      	ldr	r0, [pc, #496]	; (8006594 <HAL_I2C_Init+0x228>)
 80063a2:	f7fc fef2 	bl	800318a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d004      	beq.n	80063b8 <HAL_I2C_Init+0x4c>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	4a79      	ldr	r2, [pc, #484]	; (8006598 <HAL_I2C_Init+0x22c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d904      	bls.n	80063c2 <HAL_I2C_Init+0x56>
 80063b8:	f240 11bf 	movw	r1, #447	; 0x1bf
 80063bc:	4875      	ldr	r0, [pc, #468]	; (8006594 <HAL_I2C_Init+0x228>)
 80063be:	f7fc fee4 	bl	800318a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d009      	beq.n	80063de <HAL_I2C_Init+0x72>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063d2:	d004      	beq.n	80063de <HAL_I2C_Init+0x72>
 80063d4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80063d8:	486e      	ldr	r0, [pc, #440]	; (8006594 <HAL_I2C_Init+0x228>)
 80063da:	f7fc fed6 	bl	800318a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80063e6:	f023 0303 	bic.w	r3, r3, #3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d004      	beq.n	80063f8 <HAL_I2C_Init+0x8c>
 80063ee:	f240 11c1 	movw	r1, #449	; 0x1c1
 80063f2:	4868      	ldr	r0, [pc, #416]	; (8006594 <HAL_I2C_Init+0x228>)
 80063f4:	f7fc fec9 	bl	800318a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006400:	d009      	beq.n	8006416 <HAL_I2C_Init+0xaa>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800640a:	d004      	beq.n	8006416 <HAL_I2C_Init+0xaa>
 800640c:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8006410:	4860      	ldr	r0, [pc, #384]	; (8006594 <HAL_I2C_Init+0x228>)
 8006412:	f7fc feba 	bl	800318a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d008      	beq.n	8006430 <HAL_I2C_Init+0xc4>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d004      	beq.n	8006430 <HAL_I2C_Init+0xc4>
 8006426:	f240 11c3 	movw	r1, #451	; 0x1c3
 800642a:	485a      	ldr	r0, [pc, #360]	; (8006594 <HAL_I2C_Init+0x228>)
 800642c:	f7fc fead 	bl	800318a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006438:	2b00      	cmp	r3, #0
 800643a:	d004      	beq.n	8006446 <HAL_I2C_Init+0xda>
 800643c:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8006440:	4854      	ldr	r0, [pc, #336]	; (8006594 <HAL_I2C_Init+0x228>)
 8006442:	f7fc fea2 	bl	800318a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d008      	beq.n	8006460 <HAL_I2C_Init+0xf4>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	2b40      	cmp	r3, #64	; 0x40
 8006454:	d004      	beq.n	8006460 <HAL_I2C_Init+0xf4>
 8006456:	f240 11c5 	movw	r1, #453	; 0x1c5
 800645a:	484e      	ldr	r0, [pc, #312]	; (8006594 <HAL_I2C_Init+0x228>)
 800645c:	f7fc fe95 	bl	800318a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d008      	beq.n	800647a <HAL_I2C_Init+0x10e>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	2b80      	cmp	r3, #128	; 0x80
 800646e:	d004      	beq.n	800647a <HAL_I2C_Init+0x10e>
 8006470:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8006474:	4847      	ldr	r0, [pc, #284]	; (8006594 <HAL_I2C_Init+0x228>)
 8006476:	f7fc fe88 	bl	800318a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d12c      	bne.n	80064e0 <HAL_I2C_Init+0x174>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a42      	ldr	r2, [pc, #264]	; (800659c <HAL_I2C_Init+0x230>)
 8006492:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a42      	ldr	r2, [pc, #264]	; (80065a0 <HAL_I2C_Init+0x234>)
 8006498:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a41      	ldr	r2, [pc, #260]	; (80065a4 <HAL_I2C_Init+0x238>)
 800649e:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a41      	ldr	r2, [pc, #260]	; (80065a8 <HAL_I2C_Init+0x23c>)
 80064a4:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a40      	ldr	r2, [pc, #256]	; (80065ac <HAL_I2C_Init+0x240>)
 80064aa:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a40      	ldr	r2, [pc, #256]	; (80065b0 <HAL_I2C_Init+0x244>)
 80064b0:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a3f      	ldr	r2, [pc, #252]	; (80065b4 <HAL_I2C_Init+0x248>)
 80064b6:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a3f      	ldr	r2, [pc, #252]	; (80065b8 <HAL_I2C_Init+0x24c>)
 80064bc:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a3e      	ldr	r2, [pc, #248]	; (80065bc <HAL_I2C_Init+0x250>)
 80064c2:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a3e      	ldr	r2, [pc, #248]	; (80065c0 <HAL_I2C_Init+0x254>)
 80064c8:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d102      	bne.n	80064d8 <HAL_I2C_Init+0x16c>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a3b      	ldr	r2, [pc, #236]	; (80065c4 <HAL_I2C_Init+0x258>)
 80064d6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2224      	movs	r2, #36	; 0x24
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0201 	bic.w	r2, r2, #1
 80064f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006506:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006516:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006518:	f002 fc0a 	bl	8008d30 <HAL_RCC_GetPCLK1Freq>
 800651c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	4a29      	ldr	r2, [pc, #164]	; (80065c8 <HAL_I2C_Init+0x25c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d807      	bhi.n	8006538 <HAL_I2C_Init+0x1cc>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4a28      	ldr	r2, [pc, #160]	; (80065cc <HAL_I2C_Init+0x260>)
 800652c:	4293      	cmp	r3, r2
 800652e:	bf94      	ite	ls
 8006530:	2301      	movls	r3, #1
 8006532:	2300      	movhi	r3, #0
 8006534:	b2db      	uxtb	r3, r3
 8006536:	e006      	b.n	8006546 <HAL_I2C_Init+0x1da>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4a25      	ldr	r2, [pc, #148]	; (80065d0 <HAL_I2C_Init+0x264>)
 800653c:	4293      	cmp	r3, r2
 800653e:	bf94      	ite	ls
 8006540:	2301      	movls	r3, #1
 8006542:	2300      	movhi	r3, #0
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <HAL_I2C_Init+0x1e2>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e10f      	b.n	800676e <HAL_I2C_Init+0x402>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4a20      	ldr	r2, [pc, #128]	; (80065d4 <HAL_I2C_Init+0x268>)
 8006552:	fba2 2303 	umull	r2, r3, r2, r3
 8006556:	0c9b      	lsrs	r3, r3, #18
 8006558:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	430a      	orrs	r2, r1
 800656c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	4a12      	ldr	r2, [pc, #72]	; (80065c8 <HAL_I2C_Init+0x25c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d82a      	bhi.n	80065d8 <HAL_I2C_Init+0x26c>
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	3301      	adds	r3, #1
 8006586:	e031      	b.n	80065ec <HAL_I2C_Init+0x280>
 8006588:	40005400 	.word	0x40005400
 800658c:	40005800 	.word	0x40005800
 8006590:	40005c00 	.word	0x40005c00
 8006594:	0800f034 	.word	0x0800f034
 8006598:	00061a80 	.word	0x00061a80
 800659c:	08006bb1 	.word	0x08006bb1
 80065a0:	08006bc5 	.word	0x08006bc5
 80065a4:	08006bd9 	.word	0x08006bd9
 80065a8:	08006bed 	.word	0x08006bed
 80065ac:	08006c1d 	.word	0x08006c1d
 80065b0:	08006c31 	.word	0x08006c31
 80065b4:	08006c45 	.word	0x08006c45
 80065b8:	08006c59 	.word	0x08006c59
 80065bc:	08006c6d 	.word	0x08006c6d
 80065c0:	08006c01 	.word	0x08006c01
 80065c4:	08002e2d 	.word	0x08002e2d
 80065c8:	000186a0 	.word	0x000186a0
 80065cc:	001e847f 	.word	0x001e847f
 80065d0:	003d08ff 	.word	0x003d08ff
 80065d4:	431bde83 	.word	0x431bde83
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80065de:	fb02 f303 	mul.w	r3, r2, r3
 80065e2:	4a65      	ldr	r2, [pc, #404]	; (8006778 <HAL_I2C_Init+0x40c>)
 80065e4:	fba2 2303 	umull	r2, r3, r2, r3
 80065e8:	099b      	lsrs	r3, r3, #6
 80065ea:	3301      	adds	r3, #1
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	6812      	ldr	r2, [r2, #0]
 80065f0:	430b      	orrs	r3, r1
 80065f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80065fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	495d      	ldr	r1, [pc, #372]	; (800677c <HAL_I2C_Init+0x410>)
 8006608:	428b      	cmp	r3, r1
 800660a:	d819      	bhi.n	8006640 <HAL_I2C_Init+0x2d4>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	1e59      	subs	r1, r3, #1
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	005b      	lsls	r3, r3, #1
 8006616:	fbb1 f3f3 	udiv	r3, r1, r3
 800661a:	1c59      	adds	r1, r3, #1
 800661c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006620:	400b      	ands	r3, r1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00a      	beq.n	800663c <HAL_I2C_Init+0x2d0>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	1e59      	subs	r1, r3, #1
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	005b      	lsls	r3, r3, #1
 8006630:	fbb1 f3f3 	udiv	r3, r1, r3
 8006634:	3301      	adds	r3, #1
 8006636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800663a:	e051      	b.n	80066e0 <HAL_I2C_Init+0x374>
 800663c:	2304      	movs	r3, #4
 800663e:	e04f      	b.n	80066e0 <HAL_I2C_Init+0x374>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d111      	bne.n	800666c <HAL_I2C_Init+0x300>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	1e58      	subs	r0, r3, #1
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6859      	ldr	r1, [r3, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	005b      	lsls	r3, r3, #1
 8006654:	440b      	add	r3, r1
 8006656:	fbb0 f3f3 	udiv	r3, r0, r3
 800665a:	3301      	adds	r3, #1
 800665c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006660:	2b00      	cmp	r3, #0
 8006662:	bf0c      	ite	eq
 8006664:	2301      	moveq	r3, #1
 8006666:	2300      	movne	r3, #0
 8006668:	b2db      	uxtb	r3, r3
 800666a:	e012      	b.n	8006692 <HAL_I2C_Init+0x326>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	1e58      	subs	r0, r3, #1
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6859      	ldr	r1, [r3, #4]
 8006674:	460b      	mov	r3, r1
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	440b      	add	r3, r1
 800667a:	0099      	lsls	r1, r3, #2
 800667c:	440b      	add	r3, r1
 800667e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006682:	3301      	adds	r3, #1
 8006684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006688:	2b00      	cmp	r3, #0
 800668a:	bf0c      	ite	eq
 800668c:	2301      	moveq	r3, #1
 800668e:	2300      	movne	r3, #0
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <HAL_I2C_Init+0x32e>
 8006696:	2301      	movs	r3, #1
 8006698:	e022      	b.n	80066e0 <HAL_I2C_Init+0x374>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10e      	bne.n	80066c0 <HAL_I2C_Init+0x354>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	1e58      	subs	r0, r3, #1
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6859      	ldr	r1, [r3, #4]
 80066aa:	460b      	mov	r3, r1
 80066ac:	005b      	lsls	r3, r3, #1
 80066ae:	440b      	add	r3, r1
 80066b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80066b4:	3301      	adds	r3, #1
 80066b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066be:	e00f      	b.n	80066e0 <HAL_I2C_Init+0x374>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	1e58      	subs	r0, r3, #1
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6859      	ldr	r1, [r3, #4]
 80066c8:	460b      	mov	r3, r1
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	440b      	add	r3, r1
 80066ce:	0099      	lsls	r1, r3, #2
 80066d0:	440b      	add	r3, r1
 80066d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80066d6:	3301      	adds	r3, #1
 80066d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066e0:	6879      	ldr	r1, [r7, #4]
 80066e2:	6809      	ldr	r1, [r1, #0]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	69da      	ldr	r2, [r3, #28]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	431a      	orrs	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	430a      	orrs	r2, r1
 8006702:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800670e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	6911      	ldr	r1, [r2, #16]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	68d2      	ldr	r2, [r2, #12]
 800671a:	4311      	orrs	r1, r2
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	6812      	ldr	r2, [r2, #0]
 8006720:	430b      	orrs	r3, r1
 8006722:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	695a      	ldr	r2, [r3, #20]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	431a      	orrs	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0201 	orr.w	r2, r2, #1
 800674e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2220      	movs	r2, #32
 800675a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	10624dd3 	.word	0x10624dd3
 800677c:	000186a0 	.word	0x000186a0

08006780 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b088      	sub	sp, #32
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006788:	2300      	movs	r3, #0
 800678a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006798:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067a8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80067aa:	7bfb      	ldrb	r3, [r7, #15]
 80067ac:	2b10      	cmp	r3, #16
 80067ae:	d003      	beq.n	80067b8 <HAL_I2C_EV_IRQHandler+0x38>
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
 80067b2:	2b40      	cmp	r3, #64	; 0x40
 80067b4:	f040 80c1 	bne.w	800693a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10d      	bne.n	80067ee <HAL_I2C_EV_IRQHandler+0x6e>
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80067d8:	d003      	beq.n	80067e2 <HAL_I2C_EV_IRQHandler+0x62>
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80067e0:	d101      	bne.n	80067e6 <HAL_I2C_EV_IRQHandler+0x66>
 80067e2:	2301      	movs	r3, #1
 80067e4:	e000      	b.n	80067e8 <HAL_I2C_EV_IRQHandler+0x68>
 80067e6:	2300      	movs	r3, #0
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	f000 8132 	beq.w	8006a52 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00c      	beq.n	8006812 <HAL_I2C_EV_IRQHandler+0x92>
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	0a5b      	lsrs	r3, r3, #9
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	2b00      	cmp	r3, #0
 8006802:	d006      	beq.n	8006812 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f001 fc95 	bl	8008134 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fd8f 	bl	800732e <I2C_Master_SB>
 8006810:	e092      	b.n	8006938 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	08db      	lsrs	r3, r3, #3
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d009      	beq.n	8006832 <HAL_I2C_EV_IRQHandler+0xb2>
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	0a5b      	lsrs	r3, r3, #9
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fe05 	bl	800743a <I2C_Master_ADD10>
 8006830:	e082      	b.n	8006938 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	085b      	lsrs	r3, r3, #1
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	d009      	beq.n	8006852 <HAL_I2C_EV_IRQHandler+0xd2>
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	0a5b      	lsrs	r3, r3, #9
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fe1f 	bl	800748e <I2C_Master_ADDR>
 8006850:	e072      	b.n	8006938 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	089b      	lsrs	r3, r3, #2
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b00      	cmp	r3, #0
 800685c:	d03b      	beq.n	80068d6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800686c:	f000 80f3 	beq.w	8006a56 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	09db      	lsrs	r3, r3, #7
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00f      	beq.n	800689c <HAL_I2C_EV_IRQHandler+0x11c>
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	0a9b      	lsrs	r3, r3, #10
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b00      	cmp	r3, #0
 8006886:	d009      	beq.n	800689c <HAL_I2C_EV_IRQHandler+0x11c>
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	089b      	lsrs	r3, r3, #2
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b00      	cmp	r3, #0
 8006892:	d103      	bne.n	800689c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f9f3 	bl	8006c80 <I2C_MasterTransmit_TXE>
 800689a:	e04d      	b.n	8006938 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	089b      	lsrs	r3, r3, #2
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 80d6 	beq.w	8006a56 <HAL_I2C_EV_IRQHandler+0x2d6>
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	0a5b      	lsrs	r3, r3, #9
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 80cf 	beq.w	8006a56 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80068b8:	7bbb      	ldrb	r3, [r7, #14]
 80068ba:	2b21      	cmp	r3, #33	; 0x21
 80068bc:	d103      	bne.n	80068c6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fa7d 	bl	8006dbe <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068c4:	e0c7      	b.n	8006a56 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
 80068c8:	2b40      	cmp	r3, #64	; 0x40
 80068ca:	f040 80c4 	bne.w	8006a56 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 faee 	bl	8006eb0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068d4:	e0bf      	b.n	8006a56 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068e4:	f000 80b7 	beq.w	8006a56 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	099b      	lsrs	r3, r3, #6
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00f      	beq.n	8006914 <HAL_I2C_EV_IRQHandler+0x194>
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	0a9b      	lsrs	r3, r3, #10
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d009      	beq.n	8006914 <HAL_I2C_EV_IRQHandler+0x194>
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	089b      	lsrs	r3, r3, #2
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	d103      	bne.n	8006914 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fb64 	bl	8006fda <I2C_MasterReceive_RXNE>
 8006912:	e011      	b.n	8006938 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	089b      	lsrs	r3, r3, #2
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 809a 	beq.w	8006a56 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	0a5b      	lsrs	r3, r3, #9
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 8093 	beq.w	8006a56 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fc10 	bl	8007156 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006936:	e08e      	b.n	8006a56 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006938:	e08d      	b.n	8006a56 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693e:	2b00      	cmp	r3, #0
 8006940:	d004      	beq.n	800694c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	61fb      	str	r3, [r7, #28]
 800694a:	e007      	b.n	800695c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	085b      	lsrs	r3, r3, #1
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	d012      	beq.n	800698e <HAL_I2C_EV_IRQHandler+0x20e>
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	0a5b      	lsrs	r3, r3, #9
 800696c:	f003 0301 	and.w	r3, r3, #1
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00c      	beq.n	800698e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006978:	2b00      	cmp	r3, #0
 800697a:	d003      	beq.n	8006984 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006984:	69b9      	ldr	r1, [r7, #24]
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 ffd2 	bl	8007930 <I2C_Slave_ADDR>
 800698c:	e066      	b.n	8006a5c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	091b      	lsrs	r3, r3, #4
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b00      	cmp	r3, #0
 8006998:	d009      	beq.n	80069ae <HAL_I2C_EV_IRQHandler+0x22e>
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	0a5b      	lsrs	r3, r3, #9
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f001 f80c 	bl	80079c4 <I2C_Slave_STOPF>
 80069ac:	e056      	b.n	8006a5c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80069ae:	7bbb      	ldrb	r3, [r7, #14]
 80069b0:	2b21      	cmp	r3, #33	; 0x21
 80069b2:	d002      	beq.n	80069ba <HAL_I2C_EV_IRQHandler+0x23a>
 80069b4:	7bbb      	ldrb	r3, [r7, #14]
 80069b6:	2b29      	cmp	r3, #41	; 0x29
 80069b8:	d125      	bne.n	8006a06 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	09db      	lsrs	r3, r3, #7
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00f      	beq.n	80069e6 <HAL_I2C_EV_IRQHandler+0x266>
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	0a9b      	lsrs	r3, r3, #10
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d009      	beq.n	80069e6 <HAL_I2C_EV_IRQHandler+0x266>
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	089b      	lsrs	r3, r3, #2
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d103      	bne.n	80069e6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fee6 	bl	80077b0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80069e4:	e039      	b.n	8006a5a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	089b      	lsrs	r3, r3, #2
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d033      	beq.n	8006a5a <HAL_I2C_EV_IRQHandler+0x2da>
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	0a5b      	lsrs	r3, r3, #9
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d02d      	beq.n	8006a5a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 ff14 	bl	800782c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a04:	e029      	b.n	8006a5a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	099b      	lsrs	r3, r3, #6
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00f      	beq.n	8006a32 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	0a9b      	lsrs	r3, r3, #10
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d009      	beq.n	8006a32 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	089b      	lsrs	r3, r3, #2
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d103      	bne.n	8006a32 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 ff1f 	bl	800786e <I2C_SlaveReceive_RXNE>
 8006a30:	e014      	b.n	8006a5c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	089b      	lsrs	r3, r3, #2
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00e      	beq.n	8006a5c <HAL_I2C_EV_IRQHandler+0x2dc>
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	0a5b      	lsrs	r3, r3, #9
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d008      	beq.n	8006a5c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 ff4e 	bl	80078ec <I2C_SlaveReceive_BTF>
 8006a50:	e004      	b.n	8006a5c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006a52:	bf00      	nop
 8006a54:	e002      	b.n	8006a5c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a56:	bf00      	nop
 8006a58:	e000      	b.n	8006a5c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a5a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006a5c:	3720      	adds	r7, #32
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b08a      	sub	sp, #40	; 0x28
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a84:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	0a1b      	lsrs	r3, r3, #8
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00e      	beq.n	8006ab0 <HAL_I2C_ER_IRQHandler+0x4e>
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	0a1b      	lsrs	r3, r3, #8
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d008      	beq.n	8006ab0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa0:	f043 0301 	orr.w	r3, r3, #1
 8006aa4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006aae:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	0a5b      	lsrs	r3, r3, #9
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00e      	beq.n	8006ada <HAL_I2C_ER_IRQHandler+0x78>
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	0a1b      	lsrs	r3, r3, #8
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d008      	beq.n	8006ada <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	f043 0302 	orr.w	r3, r3, #2
 8006ace:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006ad8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	0a9b      	lsrs	r3, r3, #10
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d03f      	beq.n	8006b66 <HAL_I2C_ER_IRQHandler+0x104>
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	0a1b      	lsrs	r3, r3, #8
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d039      	beq.n	8006b66 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006af2:	7efb      	ldrb	r3, [r7, #27]
 8006af4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b04:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006b0c:	7ebb      	ldrb	r3, [r7, #26]
 8006b0e:	2b20      	cmp	r3, #32
 8006b10:	d112      	bne.n	8006b38 <HAL_I2C_ER_IRQHandler+0xd6>
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10f      	bne.n	8006b38 <HAL_I2C_ER_IRQHandler+0xd6>
 8006b18:	7cfb      	ldrb	r3, [r7, #19]
 8006b1a:	2b21      	cmp	r3, #33	; 0x21
 8006b1c:	d008      	beq.n	8006b30 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006b1e:	7cfb      	ldrb	r3, [r7, #19]
 8006b20:	2b29      	cmp	r3, #41	; 0x29
 8006b22:	d005      	beq.n	8006b30 <HAL_I2C_ER_IRQHandler+0xce>
 8006b24:	7cfb      	ldrb	r3, [r7, #19]
 8006b26:	2b28      	cmp	r3, #40	; 0x28
 8006b28:	d106      	bne.n	8006b38 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2b21      	cmp	r3, #33	; 0x21
 8006b2e:	d103      	bne.n	8006b38 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f001 f87b 	bl	8007c2c <I2C_Slave_AF>
 8006b36:	e016      	b.n	8006b66 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b40:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	f043 0304 	orr.w	r3, r3, #4
 8006b48:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006b4a:	7efb      	ldrb	r3, [r7, #27]
 8006b4c:	2b10      	cmp	r3, #16
 8006b4e:	d002      	beq.n	8006b56 <HAL_I2C_ER_IRQHandler+0xf4>
 8006b50:	7efb      	ldrb	r3, [r7, #27]
 8006b52:	2b40      	cmp	r3, #64	; 0x40
 8006b54:	d107      	bne.n	8006b66 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b64:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	0adb      	lsrs	r3, r3, #11
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00e      	beq.n	8006b90 <HAL_I2C_ER_IRQHandler+0x12e>
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	0a1b      	lsrs	r3, r3, #8
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d008      	beq.n	8006b90 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	f043 0308 	orr.w	r3, r3, #8
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006b8e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d008      	beq.n	8006ba8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f001 f8b4 	bl	8007d10 <I2C_ITError>
  }
}
 8006ba8:	bf00      	nop
 8006baa:	3728      	adds	r7, #40	; 0x28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	70fb      	strb	r3, [r7, #3]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c8e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c96:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d153      	bne.n	8006d4e <I2C_MasterTransmit_TXE+0xce>
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
 8006ca8:	2b21      	cmp	r3, #33	; 0x21
 8006caa:	d150      	bne.n	8006d4e <I2C_MasterTransmit_TXE+0xce>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2b08      	cmp	r3, #8
 8006cb0:	d01e      	beq.n	8006cf0 <I2C_MasterTransmit_TXE+0x70>
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	d01b      	beq.n	8006cf0 <I2C_MasterTransmit_TXE+0x70>
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006cbe:	d017      	beq.n	8006cf0 <I2C_MasterTransmit_TXE+0x70>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006cce:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2211      	movs	r2, #17
 8006cd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006cee:	e062      	b.n	8006db6 <I2C_MasterTransmit_TXE+0x136>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006cfe:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d0e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2220      	movs	r2, #32
 8006d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b40      	cmp	r3, #64	; 0x40
 8006d28:	d108      	bne.n	8006d3c <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d3a:	e03c      	b.n	8006db6 <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MemTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d4c:	e033      	b.n	8006db6 <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MasterTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	2b21      	cmp	r3, #33	; 0x21
 8006d52:	d005      	beq.n	8006d60 <I2C_MasterTransmit_TXE+0xe0>
 8006d54:	7bbb      	ldrb	r3, [r7, #14]
 8006d56:	2b40      	cmp	r3, #64	; 0x40
 8006d58:	d12d      	bne.n	8006db6 <I2C_MasterTransmit_TXE+0x136>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
 8006d5c:	2b22      	cmp	r3, #34	; 0x22
 8006d5e:	d12a      	bne.n	8006db6 <I2C_MasterTransmit_TXE+0x136>
  {
    if (hi2c->XferCount == 0U)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d108      	bne.n	8006d7c <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d78:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006d7a:	e01c      	b.n	8006db6 <I2C_MasterTransmit_TXE+0x136>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b40      	cmp	r3, #64	; 0x40
 8006d86:	d103      	bne.n	8006d90 <I2C_MasterTransmit_TXE+0x110>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f891 	bl	8006eb0 <I2C_MemoryTransmit_TXE_BTF>
}
 8006d8e:	e012      	b.n	8006db6 <I2C_MasterTransmit_TXE+0x136>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	781a      	ldrb	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	3b01      	subs	r3, #1
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006db4:	e7ff      	b.n	8006db6 <I2C_MasterTransmit_TXE+0x136>
 8006db6:	bf00      	nop
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dca:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b21      	cmp	r3, #33	; 0x21
 8006dd6:	d167      	bne.n	8006ea8 <I2C_MasterTransmit_BTF+0xea>
  {
    if (hi2c->XferCount != 0U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d012      	beq.n	8006e08 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de6:	781a      	ldrb	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df2:	1c5a      	adds	r2, r3, #1
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006e06:	e04f      	b.n	8006ea8 <I2C_MasterTransmit_BTF+0xea>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2b08      	cmp	r3, #8
 8006e0c:	d01e      	beq.n	8006e4c <I2C_MasterTransmit_BTF+0x8e>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b20      	cmp	r3, #32
 8006e12:	d01b      	beq.n	8006e4c <I2C_MasterTransmit_BTF+0x8e>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e1a:	d017      	beq.n	8006e4c <I2C_MasterTransmit_BTF+0x8e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	685a      	ldr	r2, [r3, #4]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e2a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2211      	movs	r2, #17
 8006e30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->MasterTxCpltCallback(hi2c);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	4798      	blx	r3
}
 8006e4a:	e02d      	b.n	8006ea8 <I2C_MasterTransmit_BTF+0xea>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e5a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e6a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2220      	movs	r2, #32
 8006e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b40      	cmp	r3, #64	; 0x40
 8006e84:	d108      	bne.n	8006e98 <I2C_MasterTransmit_BTF+0xda>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MemTxCpltCallback(hi2c);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	4798      	blx	r3
}
 8006e96:	e007      	b.n	8006ea8 <I2C_MasterTransmit_BTF+0xea>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MasterTxCpltCallback(hi2c);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	4798      	blx	r3
}
 8006ea8:	bf00      	nop
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ebe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d11d      	bne.n	8006f04 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d10b      	bne.n	8006ee8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee0:	1c9a      	adds	r2, r3, #2
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006ee6:	e074      	b.n	8006fd2 <I2C_MemoryTransmit_TXE_BTF+0x122>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	121b      	asrs	r3, r3, #8
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006efc:	1c5a      	adds	r2, r3, #1
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006f02:	e066      	b.n	8006fd2 <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 1U)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d10b      	bne.n	8006f24 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f1c:	1c5a      	adds	r2, r3, #1
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006f22:	e056      	b.n	8006fd2 <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 2U)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d152      	bne.n	8006fd2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006f2c:	7bfb      	ldrb	r3, [r7, #15]
 8006f2e:	2b22      	cmp	r3, #34	; 0x22
 8006f30:	d10d      	bne.n	8006f4e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f40:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006f4c:	e041      	b.n	8006fd2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d015      	beq.n	8006f84 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
 8006f5a:	2b21      	cmp	r3, #33	; 0x21
 8006f5c:	d112      	bne.n	8006f84 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	781a      	ldrb	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006f82:	e026      	b.n	8006fd2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d121      	bne.n	8006fd2 <I2C_MemoryTransmit_TXE_BTF+0x122>
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
 8006f90:	2b21      	cmp	r3, #33	; 0x21
 8006f92:	d11e      	bne.n	8006fd2 <I2C_MemoryTransmit_TXE_BTF+0x122>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fa2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fb2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->MemTxCpltCallback(hi2c);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	4798      	blx	r3
}
 8006fd2:	bf00      	nop
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b084      	sub	sp, #16
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b22      	cmp	r3, #34	; 0x22
 8006fec:	f040 80af 	bne.w	800714e <I2C_MasterReceive_RXNE+0x174>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2b03      	cmp	r3, #3
 8006ffc:	d921      	bls.n	8007042 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	691a      	ldr	r2, [r3, #16]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007008:	b2d2      	uxtb	r2, r2
 800700a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	1c5a      	adds	r2, r3, #1
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800701a:	b29b      	uxth	r3, r3
 800701c:	3b01      	subs	r3, #1
 800701e:	b29a      	uxth	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007028:	b29b      	uxth	r3, r3
 800702a:	2b03      	cmp	r3, #3
 800702c:	f040 808f 	bne.w	800714e <I2C_MasterReceive_RXNE+0x174>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800703e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007040:	e085      	b.n	800714e <I2C_MasterReceive_RXNE+0x174>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007046:	2b02      	cmp	r3, #2
 8007048:	d078      	beq.n	800713c <I2C_MasterReceive_RXNE+0x162>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d002      	beq.n	8007056 <I2C_MasterReceive_RXNE+0x7c>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d172      	bne.n	800713c <I2C_MasterReceive_RXNE+0x162>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f001 f83a 	bl	80080d0 <I2C_WaitOnSTOPRequestThroughIT>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d144      	bne.n	80070ec <I2C_MasterReceive_RXNE+0x112>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007070:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007080:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	691a      	ldr	r2, [r3, #16]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708c:	b2d2      	uxtb	r2, r2
 800708e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007094:	1c5a      	adds	r2, r3, #1
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800709e:	b29b      	uxth	r3, r3
 80070a0:	3b01      	subs	r3, #1
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2220      	movs	r2, #32
 80070ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b40      	cmp	r3, #64	; 0x40
 80070ba:	d10b      	bne.n	80070d4 <I2C_MasterReceive_RXNE+0xfa>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MemRxCpltCallback(hi2c);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80070d2:	e03c      	b.n	800714e <I2C_MasterReceive_RXNE+0x174>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2212      	movs	r2, #18
 80070e0:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MasterRxCpltCallback(hi2c);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80070ea:	e030      	b.n	800714e <I2C_MasterReceive_RXNE+0x174>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685a      	ldr	r2, [r3, #4]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070fa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	691a      	ldr	r2, [r3, #16]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	b2d2      	uxtb	r2, r2
 8007108:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710e:	1c5a      	adds	r2, r3, #1
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007118:	b29b      	uxth	r3, r3
 800711a:	3b01      	subs	r3, #1
 800711c:	b29a      	uxth	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2220      	movs	r2, #32
 8007126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCallback(hi2c);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800713a:	e008      	b.n	800714e <I2C_MasterReceive_RXNE+0x174>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800714a:	605a      	str	r2, [r3, #4]
}
 800714c:	e7ff      	b.n	800714e <I2C_MasterReceive_RXNE+0x174>
 800714e:	bf00      	nop
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b084      	sub	sp, #16
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007162:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007168:	b29b      	uxth	r3, r3
 800716a:	2b04      	cmp	r3, #4
 800716c:	d11b      	bne.n	80071a6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800717c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	691a      	ldr	r2, [r3, #16]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007188:	b2d2      	uxtb	r2, r2
 800718a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007190:	1c5a      	adds	r2, r3, #1
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800719a:	b29b      	uxth	r3, r3
 800719c:	3b01      	subs	r3, #1
 800719e:	b29a      	uxth	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80071a4:	e0bf      	b.n	8007326 <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 3U)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	2b03      	cmp	r3, #3
 80071ae:	d129      	bne.n	8007204 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071be:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2b04      	cmp	r3, #4
 80071c4:	d00a      	beq.n	80071dc <I2C_MasterReceive_BTF+0x86>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d007      	beq.n	80071dc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071da:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	691a      	ldr	r2, [r3, #16]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e6:	b2d2      	uxtb	r2, r2
 80071e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	1c5a      	adds	r2, r3, #1
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	3b01      	subs	r3, #1
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007202:	e090      	b.n	8007326 <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 2U)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007208:	b29b      	uxth	r3, r3
 800720a:	2b02      	cmp	r3, #2
 800720c:	d178      	bne.n	8007300 <I2C_MasterReceive_BTF+0x1aa>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d002      	beq.n	800721a <I2C_MasterReceive_BTF+0xc4>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2b10      	cmp	r3, #16
 8007218:	d108      	bne.n	800722c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	e019      	b.n	8007260 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2b04      	cmp	r3, #4
 8007230:	d002      	beq.n	8007238 <I2C_MasterReceive_BTF+0xe2>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2b02      	cmp	r3, #2
 8007236:	d108      	bne.n	800724a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007246:	601a      	str	r2, [r3, #0]
 8007248:	e00a      	b.n	8007260 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2b10      	cmp	r3, #16
 800724e:	d007      	beq.n	8007260 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800725e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	691a      	ldr	r2, [r3, #16]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726a:	b2d2      	uxtb	r2, r2
 800726c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800727c:	b29b      	uxth	r3, r3
 800727e:	3b01      	subs	r3, #1
 8007280:	b29a      	uxth	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	691a      	ldr	r2, [r3, #16]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	b2d2      	uxtb	r2, r2
 8007292:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	3b01      	subs	r3, #1
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80072ba:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2220      	movs	r2, #32
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b40      	cmp	r3, #64	; 0x40
 80072ce:	d10b      	bne.n	80072e8 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MemRxCpltCallback(hi2c);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	4798      	blx	r3
}
 80072e6:	e01e      	b.n	8007326 <I2C_MasterReceive_BTF+0x1d0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2212      	movs	r2, #18
 80072f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	4798      	blx	r3
}
 80072fe:	e012      	b.n	8007326 <I2C_MasterReceive_BTF+0x1d0>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	691a      	ldr	r2, [r3, #16]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730a:	b2d2      	uxtb	r2, r2
 800730c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	1c5a      	adds	r2, r3, #1
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800731c:	b29b      	uxth	r3, r3
 800731e:	3b01      	subs	r3, #1
 8007320:	b29a      	uxth	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007326:	bf00      	nop
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800732e:	b480      	push	{r7}
 8007330:	b083      	sub	sp, #12
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b40      	cmp	r3, #64	; 0x40
 8007340:	d117      	bne.n	8007372 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007346:	2b00      	cmp	r3, #0
 8007348:	d109      	bne.n	800735e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800734e:	b2db      	uxtb	r3, r3
 8007350:	461a      	mov	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800735a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800735c:	e067      	b.n	800742e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007362:	b2db      	uxtb	r3, r3
 8007364:	f043 0301 	orr.w	r3, r3, #1
 8007368:	b2da      	uxtb	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	611a      	str	r2, [r3, #16]
}
 8007370:	e05d      	b.n	800742e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800737a:	d133      	bne.n	80073e4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b21      	cmp	r3, #33	; 0x21
 8007386:	d109      	bne.n	800739c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738c:	b2db      	uxtb	r3, r3
 800738e:	461a      	mov	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007398:	611a      	str	r2, [r3, #16]
 800739a:	e008      	b.n	80073ae <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	f043 0301 	orr.w	r3, r3, #1
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d004      	beq.n	80073c0 <I2C_Master_SB+0x92>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d108      	bne.n	80073d2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d032      	beq.n	800742e <I2C_Master_SB+0x100>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d02d      	beq.n	800742e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073e0:	605a      	str	r2, [r3, #4]
}
 80073e2:	e024      	b.n	800742e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10e      	bne.n	800740a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	11db      	asrs	r3, r3, #7
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	f003 0306 	and.w	r3, r3, #6
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	f063 030f 	orn	r3, r3, #15
 8007400:	b2da      	uxtb	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	611a      	str	r2, [r3, #16]
}
 8007408:	e011      	b.n	800742e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800740e:	2b01      	cmp	r3, #1
 8007410:	d10d      	bne.n	800742e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007416:	b29b      	uxth	r3, r3
 8007418:	11db      	asrs	r3, r3, #7
 800741a:	b2db      	uxtb	r3, r3
 800741c:	f003 0306 	and.w	r3, r3, #6
 8007420:	b2db      	uxtb	r3, r3
 8007422:	f063 030e 	orn	r3, r3, #14
 8007426:	b2da      	uxtb	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	611a      	str	r2, [r3, #16]
}
 800742e:	bf00      	nop
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800743a:	b480      	push	{r7}
 800743c:	b083      	sub	sp, #12
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007446:	b2da      	uxtb	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007452:	2b00      	cmp	r3, #0
 8007454:	d004      	beq.n	8007460 <I2C_Master_ADD10+0x26>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800745a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800745c:	2b00      	cmp	r3, #0
 800745e:	d108      	bne.n	8007472 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00c      	beq.n	8007482 <I2C_Master_ADD10+0x48>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746e:	2b00      	cmp	r3, #0
 8007470:	d007      	beq.n	8007482 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007480:	605a      	str	r2, [r3, #4]
  }
}
 8007482:	bf00      	nop
 8007484:	370c      	adds	r7, #12
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800748e:	b480      	push	{r7}
 8007490:	b091      	sub	sp, #68	; 0x44
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800749c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074aa:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b22      	cmp	r3, #34	; 0x22
 80074b6:	f040 8169 	bne.w	800778c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10f      	bne.n	80074e2 <I2C_Master_ADDR+0x54>
 80074c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80074c6:	2b40      	cmp	r3, #64	; 0x40
 80074c8:	d10b      	bne.n	80074e2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074ca:	2300      	movs	r3, #0
 80074cc:	633b      	str	r3, [r7, #48]	; 0x30
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	633b      	str	r3, [r7, #48]	; 0x30
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	633b      	str	r3, [r7, #48]	; 0x30
 80074de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e0:	e160      	b.n	80077a4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d11d      	bne.n	8007526 <I2C_Master_ADDR+0x98>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80074f2:	d118      	bne.n	8007526 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074f4:	2300      	movs	r3, #0
 80074f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007508:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007518:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800751e:	1c5a      	adds	r2, r3, #1
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	651a      	str	r2, [r3, #80]	; 0x50
 8007524:	e13e      	b.n	80077a4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800752a:	b29b      	uxth	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	d113      	bne.n	8007558 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007530:	2300      	movs	r3, #0
 8007532:	62bb      	str	r3, [r7, #40]	; 0x28
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	62bb      	str	r3, [r7, #40]	; 0x28
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	62bb      	str	r3, [r7, #40]	; 0x28
 8007544:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007554:	601a      	str	r2, [r3, #0]
 8007556:	e115      	b.n	8007784 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800755c:	b29b      	uxth	r3, r3
 800755e:	2b01      	cmp	r3, #1
 8007560:	f040 808a 	bne.w	8007678 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007566:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800756a:	d137      	bne.n	80075dc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800757a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800758a:	d113      	bne.n	80075b4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800759a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800759c:	2300      	movs	r3, #0
 800759e:	627b      	str	r3, [r7, #36]	; 0x24
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	627b      	str	r3, [r7, #36]	; 0x24
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	627b      	str	r3, [r7, #36]	; 0x24
 80075b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b2:	e0e7      	b.n	8007784 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075b4:	2300      	movs	r3, #0
 80075b6:	623b      	str	r3, [r7, #32]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	623b      	str	r3, [r7, #32]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	623b      	str	r3, [r7, #32]
 80075c8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	e0d3      	b.n	8007784 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80075dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075de:	2b08      	cmp	r3, #8
 80075e0:	d02e      	beq.n	8007640 <I2C_Master_ADDR+0x1b2>
 80075e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e4:	2b20      	cmp	r3, #32
 80075e6:	d02b      	beq.n	8007640 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80075e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ea:	2b12      	cmp	r3, #18
 80075ec:	d102      	bne.n	80075f4 <I2C_Master_ADDR+0x166>
 80075ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d125      	bne.n	8007640 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80075f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f6:	2b04      	cmp	r3, #4
 80075f8:	d00e      	beq.n	8007618 <I2C_Master_ADDR+0x18a>
 80075fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d00b      	beq.n	8007618 <I2C_Master_ADDR+0x18a>
 8007600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007602:	2b10      	cmp	r3, #16
 8007604:	d008      	beq.n	8007618 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007614:	601a      	str	r2, [r3, #0]
 8007616:	e007      	b.n	8007628 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007626:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007628:	2300      	movs	r3, #0
 800762a:	61fb      	str	r3, [r7, #28]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	61fb      	str	r3, [r7, #28]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	61fb      	str	r3, [r7, #28]
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	e0a1      	b.n	8007784 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800764e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007650:	2300      	movs	r3, #0
 8007652:	61bb      	str	r3, [r7, #24]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	61bb      	str	r3, [r7, #24]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	61bb      	str	r3, [r7, #24]
 8007664:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007674:	601a      	str	r2, [r3, #0]
 8007676:	e085      	b.n	8007784 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800767c:	b29b      	uxth	r3, r3
 800767e:	2b02      	cmp	r3, #2
 8007680:	d14d      	bne.n	800771e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007684:	2b04      	cmp	r3, #4
 8007686:	d016      	beq.n	80076b6 <I2C_Master_ADDR+0x228>
 8007688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768a:	2b02      	cmp	r3, #2
 800768c:	d013      	beq.n	80076b6 <I2C_Master_ADDR+0x228>
 800768e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007690:	2b10      	cmp	r3, #16
 8007692:	d010      	beq.n	80076b6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076a2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	e007      	b.n	80076c6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80076c4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076d4:	d117      	bne.n	8007706 <I2C_Master_ADDR+0x278>
 80076d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80076dc:	d00b      	beq.n	80076f6 <I2C_Master_ADDR+0x268>
 80076de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d008      	beq.n	80076f6 <I2C_Master_ADDR+0x268>
 80076e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e6:	2b08      	cmp	r3, #8
 80076e8:	d005      	beq.n	80076f6 <I2C_Master_ADDR+0x268>
 80076ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ec:	2b10      	cmp	r3, #16
 80076ee:	d002      	beq.n	80076f6 <I2C_Master_ADDR+0x268>
 80076f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f2:	2b20      	cmp	r3, #32
 80076f4:	d107      	bne.n	8007706 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007704:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007706:	2300      	movs	r3, #0
 8007708:	617b      	str	r3, [r7, #20]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	617b      	str	r3, [r7, #20]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	617b      	str	r3, [r7, #20]
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	e032      	b.n	8007784 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800772c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800773c:	d117      	bne.n	800776e <I2C_Master_ADDR+0x2e0>
 800773e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007740:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007744:	d00b      	beq.n	800775e <I2C_Master_ADDR+0x2d0>
 8007746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007748:	2b01      	cmp	r3, #1
 800774a:	d008      	beq.n	800775e <I2C_Master_ADDR+0x2d0>
 800774c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774e:	2b08      	cmp	r3, #8
 8007750:	d005      	beq.n	800775e <I2C_Master_ADDR+0x2d0>
 8007752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007754:	2b10      	cmp	r3, #16
 8007756:	d002      	beq.n	800775e <I2C_Master_ADDR+0x2d0>
 8007758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775a:	2b20      	cmp	r3, #32
 800775c:	d107      	bne.n	800776e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800776c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800776e:	2300      	movs	r3, #0
 8007770:	613b      	str	r3, [r7, #16]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	613b      	str	r3, [r7, #16]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	613b      	str	r3, [r7, #16]
 8007782:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800778a:	e00b      	b.n	80077a4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800778c:	2300      	movs	r3, #0
 800778e:	60fb      	str	r3, [r7, #12]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	60fb      	str	r3, [r7, #12]
 80077a0:	68fb      	ldr	r3, [r7, #12]
}
 80077a2:	e7ff      	b.n	80077a4 <I2C_Master_ADDR+0x316>
 80077a4:	bf00      	nop
 80077a6:	3744      	adds	r7, #68	; 0x44
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077be:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d02c      	beq.n	8007824 <I2C_SlaveTransmit_TXE+0x74>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	781a      	ldrb	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	3b01      	subs	r3, #1
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d115      	bne.n	8007824 <I2C_SlaveTransmit_TXE+0x74>
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
 80077fa:	2b29      	cmp	r3, #41	; 0x29
 80077fc:	d112      	bne.n	8007824 <I2C_SlaveTransmit_TXE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800780c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2221      	movs	r2, #33	; 0x21
 8007812:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2228      	movs	r2, #40	; 0x28
 8007818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	4798      	blx	r3
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007824:	bf00      	nop
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007838:	b29b      	uxth	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d011      	beq.n	8007862 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007842:	781a      	ldrb	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784e:	1c5a      	adds	r2, r3, #1
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007858:	b29b      	uxth	r3, r3
 800785a:	3b01      	subs	r3, #1
 800785c:	b29a      	uxth	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007862:	bf00      	nop
 8007864:	370c      	adds	r7, #12
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b084      	sub	sp, #16
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800787c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007882:	b29b      	uxth	r3, r3
 8007884:	2b00      	cmp	r3, #0
 8007886:	d02d      	beq.n	80078e4 <I2C_SlaveReceive_RXNE+0x76>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	691a      	ldr	r2, [r3, #16]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007892:	b2d2      	uxtb	r2, r2
 8007894:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	1c5a      	adds	r2, r3, #1
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	3b01      	subs	r3, #1
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d115      	bne.n	80078e4 <I2C_SlaveReceive_RXNE+0x76>
 80078b8:	7bfb      	ldrb	r3, [r7, #15]
 80078ba:	2b2a      	cmp	r3, #42	; 0x2a
 80078bc:	d112      	bne.n	80078e4 <I2C_SlaveReceive_RXNE+0x76>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	685a      	ldr	r2, [r3, #4]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078cc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2222      	movs	r2, #34	; 0x22
 80078d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2228      	movs	r2, #40	; 0x28
 80078d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	4798      	blx	r3
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80078e4:	bf00      	nop
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d012      	beq.n	8007924 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	691a      	ldr	r2, [r3, #16]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	b2d2      	uxtb	r2, r2
 800790a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800791a:	b29b      	uxth	r3, r3
 800791c:	3b01      	subs	r3, #1
 800791e:	b29a      	uxth	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800793a:	2300      	movs	r3, #0
 800793c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007944:	b2db      	uxtb	r3, r3
 8007946:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800794a:	2b28      	cmp	r3, #40	; 0x28
 800794c:	d127      	bne.n	800799e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800795c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	089b      	lsrs	r3, r3, #2
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800796a:	2301      	movs	r3, #1
 800796c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	09db      	lsrs	r3, r3, #7
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	2b00      	cmp	r3, #0
 8007978:	d103      	bne.n	8007982 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	81bb      	strh	r3, [r7, #12]
 8007980:	e002      	b.n	8007988 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007994:	89ba      	ldrh	r2, [r7, #12]
 8007996:	7bf9      	ldrb	r1, [r7, #15]
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	4798      	blx	r3
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800799c:	e00e      	b.n	80079bc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800799e:	2300      	movs	r3, #0
 80079a0:	60bb      	str	r3, [r7, #8]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	60bb      	str	r3, [r7, #8]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	60bb      	str	r3, [r7, #8]
 80079b2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80079bc:	bf00      	nop
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079d2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80079e2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80079e4:	2300      	movs	r3, #0
 80079e6:	60bb      	str	r3, [r7, #8]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	60bb      	str	r3, [r7, #8]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f042 0201 	orr.w	r2, r2, #1
 80079fe:	601a      	str	r2, [r3, #0]
 8007a00:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a10:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a20:	d172      	bne.n	8007b08 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007a22:	7bfb      	ldrb	r3, [r7, #15]
 8007a24:	2b22      	cmp	r3, #34	; 0x22
 8007a26:	d002      	beq.n	8007a2e <I2C_Slave_STOPF+0x6a>
 8007a28:	7bfb      	ldrb	r3, [r7, #15]
 8007a2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007a2c:	d135      	bne.n	8007a9a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d005      	beq.n	8007a52 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4a:	f043 0204 	orr.w	r2, r3, #4
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	685a      	ldr	r2, [r3, #4]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a60:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fd feca 	bl	8005800 <HAL_DMA_GetState>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d049      	beq.n	8007b06 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a76:	4a6b      	ldr	r2, [pc, #428]	; (8007c24 <I2C_Slave_STOPF+0x260>)
 8007a78:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fd fd12 	bl	80054a8 <HAL_DMA_Abort_IT>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d03d      	beq.n	8007b06 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a94:	4610      	mov	r0, r2
 8007a96:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007a98:	e035      	b.n	8007b06 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d005      	beq.n	8007abe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab6:	f043 0204 	orr.w	r2, r3, #4
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007acc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7fd fe94 	bl	8005800 <HAL_DMA_GetState>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d014      	beq.n	8007b08 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae2:	4a50      	ldr	r2, [pc, #320]	; (8007c24 <I2C_Slave_STOPF+0x260>)
 8007ae4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fd fcdc 	bl	80054a8 <HAL_DMA_Abort_IT>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d008      	beq.n	8007b08 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007b00:	4610      	mov	r0, r2
 8007b02:	4798      	blx	r3
 8007b04:	e000      	b.n	8007b08 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007b06:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d03e      	beq.n	8007b90 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	695b      	ldr	r3, [r3, #20]
 8007b18:	f003 0304 	and.w	r3, r3, #4
 8007b1c:	2b04      	cmp	r3, #4
 8007b1e:	d112      	bne.n	8007b46 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	691a      	ldr	r2, [r3, #16]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2a:	b2d2      	uxtb	r2, r2
 8007b2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b32:	1c5a      	adds	r2, r3, #1
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b50:	2b40      	cmp	r3, #64	; 0x40
 8007b52:	d112      	bne.n	8007b7a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	691a      	ldr	r2, [r3, #16]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5e:	b2d2      	uxtb	r2, r2
 8007b60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	1c5a      	adds	r2, r3, #1
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	3b01      	subs	r3, #1
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d005      	beq.n	8007b90 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b88:	f043 0204 	orr.w	r2, r3, #4
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d003      	beq.n	8007ba0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f8b9 	bl	8007d10 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007b9e:	e03c      	b.n	8007c1a <I2C_Slave_STOPF+0x256>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007ba0:	7bfb      	ldrb	r3, [r7, #15]
 8007ba2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ba4:	d10a      	bne.n	8007bbc <I2C_Slave_STOPF+0x1f8>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2228      	movs	r2, #40	; 0x28
 8007bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b28      	cmp	r3, #40	; 0x28
 8007bc6:	d112      	bne.n	8007bee <I2C_Slave_STOPF+0x22a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a17      	ldr	r2, [pc, #92]	; (8007c28 <I2C_Slave_STOPF+0x264>)
 8007bcc:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ListenCpltCallback(hi2c);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	4798      	blx	r3
}
 8007bec:	e015      	b.n	8007c1a <I2C_Slave_STOPF+0x256>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf2:	2b22      	cmp	r3, #34	; 0x22
 8007bf4:	d002      	beq.n	8007bfc <I2C_Slave_STOPF+0x238>
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
 8007bf8:	2b22      	cmp	r3, #34	; 0x22
 8007bfa:	d10e      	bne.n	8007c1a <I2C_Slave_STOPF+0x256>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2220      	movs	r2, #32
 8007c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->SlaveRxCpltCallback(hi2c);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	4798      	blx	r3
}
 8007c1a:	bf00      	nop
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	08007f7d 	.word	0x08007f7d
 8007c28:	ffff0000 	.word	0xffff0000

08007c2c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c40:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d002      	beq.n	8007c4e <I2C_Slave_AF+0x22>
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2b20      	cmp	r3, #32
 8007c4c:	d12a      	bne.n	8007ca4 <I2C_Slave_AF+0x78>
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
 8007c50:	2b28      	cmp	r3, #40	; 0x28
 8007c52:	d127      	bne.n	8007ca4 <I2C_Slave_AF+0x78>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a2d      	ldr	r2, [pc, #180]	; (8007d0c <I2C_Slave_AF+0xe0>)
 8007c58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c68:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c72:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c82:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	4798      	blx	r3
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007ca2:	e02f      	b.n	8007d04 <I2C_Slave_AF+0xd8>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
 8007ca6:	2b21      	cmp	r3, #33	; 0x21
 8007ca8:	d127      	bne.n	8007cfa <I2C_Slave_AF+0xce>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a17      	ldr	r2, [pc, #92]	; (8007d0c <I2C_Slave_AF+0xe0>)
 8007cae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2221      	movs	r2, #33	; 0x21
 8007cb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2220      	movs	r2, #32
 8007cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007cd4:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007cde:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cee:	601a      	str	r2, [r3, #0]
    hi2c->SlaveTxCpltCallback(hi2c);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	4798      	blx	r3
}
 8007cf8:	e004      	b.n	8007d04 <I2C_Slave_AF+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d02:	615a      	str	r2, [r3, #20]
}
 8007d04:	bf00      	nop
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	ffff0000 	.word	0xffff0000

08007d10 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007d28:	7bbb      	ldrb	r3, [r7, #14]
 8007d2a:	2b10      	cmp	r3, #16
 8007d2c:	d002      	beq.n	8007d34 <I2C_ITError+0x24>
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
 8007d30:	2b40      	cmp	r3, #64	; 0x40
 8007d32:	d10a      	bne.n	8007d4a <I2C_ITError+0x3a>
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
 8007d36:	2b22      	cmp	r3, #34	; 0x22
 8007d38:	d107      	bne.n	8007d4a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d48:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d4a:	7bfb      	ldrb	r3, [r7, #15]
 8007d4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007d50:	2b28      	cmp	r3, #40	; 0x28
 8007d52:	d107      	bne.n	8007d64 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2228      	movs	r2, #40	; 0x28
 8007d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007d62:	e015      	b.n	8007d90 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d72:	d00a      	beq.n	8007d8a <I2C_ITError+0x7a>
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
 8007d76:	2b60      	cmp	r3, #96	; 0x60
 8007d78:	d007      	beq.n	8007d8a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2220      	movs	r2, #32
 8007d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d9e:	d162      	bne.n	8007e66 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d020      	beq.n	8007e00 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc2:	4a6c      	ldr	r2, [pc, #432]	; (8007f74 <I2C_ITError+0x264>)
 8007dc4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fd fb6c 	bl	80054a8 <HAL_DMA_Abort_IT>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 808b 	beq.w	8007eee <I2C_ITError+0x1de>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f022 0201 	bic.w	r2, r2, #1
 8007de6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2220      	movs	r2, #32
 8007dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007dfa:	4610      	mov	r0, r2
 8007dfc:	4798      	blx	r3
 8007dfe:	e076      	b.n	8007eee <I2C_ITError+0x1de>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e04:	4a5b      	ldr	r2, [pc, #364]	; (8007f74 <I2C_ITError+0x264>)
 8007e06:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7fd fb4b 	bl	80054a8 <HAL_DMA_Abort_IT>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d06a      	beq.n	8007eee <I2C_ITError+0x1de>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e22:	2b40      	cmp	r3, #64	; 0x40
 8007e24:	d10b      	bne.n	8007e3e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	691a      	ldr	r2, [r3, #16]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e30:	b2d2      	uxtb	r2, r2
 8007e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e38:	1c5a      	adds	r2, r3, #1
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f022 0201 	bic.w	r2, r2, #1
 8007e4c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2220      	movs	r2, #32
 8007e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e60:	4610      	mov	r0, r2
 8007e62:	4798      	blx	r3
 8007e64:	e043      	b.n	8007eee <I2C_ITError+0x1de>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b60      	cmp	r3, #96	; 0x60
 8007e70:	d126      	bne.n	8007ec0 <I2C_ITError+0x1b0>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2220      	movs	r2, #32
 8007e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e8a:	2b40      	cmp	r3, #64	; 0x40
 8007e8c:	d10b      	bne.n	8007ea6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	691a      	ldr	r2, [r3, #16]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	b2d2      	uxtb	r2, r2
 8007e9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea0:	1c5a      	adds	r2, r3, #1
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f022 0201 	bic.w	r2, r2, #1
 8007eb4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	4798      	blx	r3
 8007ebe:	e016      	b.n	8007eee <I2C_ITError+0x1de>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eca:	2b40      	cmp	r3, #64	; 0x40
 8007ecc:	d10b      	bne.n	8007ee6 <I2C_ITError+0x1d6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	691a      	ldr	r2, [r3, #16]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed8:	b2d2      	uxtb	r2, r2
 8007eda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10e      	bne.n	8007f1c <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d109      	bne.n	8007f1c <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d104      	bne.n	8007f1c <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d007      	beq.n	8007f2c <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	685a      	ldr	r2, [r3, #4]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007f2a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f32:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f38:	f003 0304 	and.w	r3, r3, #4
 8007f3c:	2b04      	cmp	r3, #4
 8007f3e:	d114      	bne.n	8007f6a <I2C_ITError+0x25a>
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
 8007f42:	2b28      	cmp	r3, #40	; 0x28
 8007f44:	d111      	bne.n	8007f6a <I2C_ITError+0x25a>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a0b      	ldr	r2, [pc, #44]	; (8007f78 <I2C_ITError+0x268>)
 8007f4a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2220      	movs	r2, #32
 8007f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	4798      	blx	r3
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007f6a:	bf00      	nop
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	08007f7d 	.word	0x08007f7d
 8007f78:	ffff0000 	.word	0xffff0000

08007f7c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f94:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007f96:	4b4c      	ldr	r3, [pc, #304]	; (80080c8 <I2C_DMAAbort+0x14c>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	08db      	lsrs	r3, r3, #3
 8007f9c:	4a4b      	ldr	r2, [pc, #300]	; (80080cc <I2C_DMAAbort+0x150>)
 8007f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa2:	0a1a      	lsrs	r2, r3, #8
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4413      	add	r3, r2
 8007faa:	00da      	lsls	r2, r3, #3
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d106      	bne.n	8007fc4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fba:	f043 0220 	orr.w	r2, r3, #32
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007fc2:	e00a      	b.n	8007fda <I2C_DMAAbort+0x5e>
    }
    count--;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fd8:	d0ea      	beq.n	8007fb0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008008:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	2200      	movs	r2, #0
 800800e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008014:	2b00      	cmp	r3, #0
 8008016:	d003      	beq.n	8008020 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800801c:	2200      	movs	r2, #0
 800801e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008024:	2b00      	cmp	r3, #0
 8008026:	d003      	beq.n	8008030 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802c:	2200      	movs	r2, #0
 800802e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f022 0201 	bic.w	r2, r2, #1
 800803e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008046:	b2db      	uxtb	r3, r3
 8008048:	2b60      	cmp	r3, #96	; 0x60
 800804a:	d10f      	bne.n	800806c <I2C_DMAAbort+0xf0>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	2220      	movs	r2, #32
 8008050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	2200      	movs	r2, #0
 8008060:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008066:	6978      	ldr	r0, [r7, #20]
 8008068:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800806a:	e028      	b.n	80080be <I2C_DMAAbort+0x142>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800806c:	7cfb      	ldrb	r3, [r7, #19]
 800806e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008072:	2b28      	cmp	r3, #40	; 0x28
 8008074:	d117      	bne.n	80080a6 <I2C_DMAAbort+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f042 0201 	orr.w	r2, r2, #1
 8008084:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008094:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	2200      	movs	r2, #0
 800809a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	2228      	movs	r2, #40	; 0x28
 80080a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80080a4:	e007      	b.n	80080b6 <I2C_DMAAbort+0x13a>
      hi2c->State = HAL_I2C_STATE_READY;
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	2220      	movs	r2, #32
 80080aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCallback(hi2c);
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ba:	6978      	ldr	r0, [r7, #20]
 80080bc:	4798      	blx	r3
}
 80080be:	bf00      	nop
 80080c0:	3718      	adds	r7, #24
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	20000000 	.word	0x20000000
 80080cc:	14f8b589 	.word	0x14f8b589

080080d0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080d8:	2300      	movs	r3, #0
 80080da:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80080dc:	4b13      	ldr	r3, [pc, #76]	; (800812c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	08db      	lsrs	r3, r3, #3
 80080e2:	4a13      	ldr	r2, [pc, #76]	; (8008130 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80080e4:	fba2 2303 	umull	r2, r3, r2, r3
 80080e8:	0a1a      	lsrs	r2, r3, #8
 80080ea:	4613      	mov	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4413      	add	r3, r2
 80080f0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3b01      	subs	r3, #1
 80080f6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d107      	bne.n	800810e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008102:	f043 0220 	orr.w	r2, r3, #32
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e008      	b.n	8008120 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800811c:	d0e9      	beq.n	80080f2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	20000000 	.word	0x20000000
 8008130:	14f8b589 	.word	0x14f8b589

08008134 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008140:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008144:	d103      	bne.n	800814e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800814c:	e007      	b.n	800815e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008152:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008156:	d102      	bne.n	800815e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2208      	movs	r2, #8
 800815c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800815e:	bf00      	nop
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
	...

0800816c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8008170:	4b06      	ldr	r3, [pc, #24]	; (800818c <HAL_PWR_PVD_IRQHandler+0x20>)
 8008172:	695b      	ldr	r3, [r3, #20]
 8008174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008178:	2b00      	cmp	r3, #0
 800817a:	d005      	beq.n	8008188 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800817c:	f000 f808 	bl	8008190 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8008180:	4b02      	ldr	r3, [pc, #8]	; (800818c <HAL_PWR_PVD_IRQHandler+0x20>)
 8008182:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008186:	615a      	str	r2, [r3, #20]
  }
}
 8008188:	bf00      	nop
 800818a:	bd80      	pop	{r7, pc}
 800818c:	40013c00 	.word	0x40013c00

08008190 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8008190:	b480      	push	{r7}
 8008192:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8008194:	bf00      	nop
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
	...

080081a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d101      	bne.n	80081b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e314      	b.n	80087dc <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2b0f      	cmp	r3, #15
 80081b8:	d903      	bls.n	80081c2 <HAL_RCC_OscConfig+0x22>
 80081ba:	21e6      	movs	r1, #230	; 0xe6
 80081bc:	4897      	ldr	r0, [pc, #604]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 80081be:	f7fa ffe4 	bl	800318a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0301 	and.w	r3, r3, #1
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f000 8088 	beq.w	80082e0 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00d      	beq.n	80081f4 <HAL_RCC_OscConfig+0x54>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081e0:	d008      	beq.n	80081f4 <HAL_RCC_OscConfig+0x54>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081ea:	d003      	beq.n	80081f4 <HAL_RCC_OscConfig+0x54>
 80081ec:	21eb      	movs	r1, #235	; 0xeb
 80081ee:	488b      	ldr	r0, [pc, #556]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 80081f0:	f7fa ffcb 	bl	800318a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80081f4:	4b8a      	ldr	r3, [pc, #552]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	f003 030c 	and.w	r3, r3, #12
 80081fc:	2b04      	cmp	r3, #4
 80081fe:	d00c      	beq.n	800821a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008200:	4b87      	ldr	r3, [pc, #540]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008208:	2b08      	cmp	r3, #8
 800820a:	d112      	bne.n	8008232 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800820c:	4b84      	ldr	r3, [pc, #528]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008214:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008218:	d10b      	bne.n	8008232 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800821a:	4b81      	ldr	r3, [pc, #516]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008222:	2b00      	cmp	r3, #0
 8008224:	d05b      	beq.n	80082de <HAL_RCC_OscConfig+0x13e>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d157      	bne.n	80082de <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e2d4      	b.n	80087dc <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800823a:	d106      	bne.n	800824a <HAL_RCC_OscConfig+0xaa>
 800823c:	4b78      	ldr	r3, [pc, #480]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a77      	ldr	r2, [pc, #476]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 8008242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008246:	6013      	str	r3, [r2, #0]
 8008248:	e01d      	b.n	8008286 <HAL_RCC_OscConfig+0xe6>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008252:	d10c      	bne.n	800826e <HAL_RCC_OscConfig+0xce>
 8008254:	4b72      	ldr	r3, [pc, #456]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a71      	ldr	r2, [pc, #452]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 800825a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800825e:	6013      	str	r3, [r2, #0]
 8008260:	4b6f      	ldr	r3, [pc, #444]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a6e      	ldr	r2, [pc, #440]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 8008266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800826a:	6013      	str	r3, [r2, #0]
 800826c:	e00b      	b.n	8008286 <HAL_RCC_OscConfig+0xe6>
 800826e:	4b6c      	ldr	r3, [pc, #432]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a6b      	ldr	r2, [pc, #428]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 8008274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008278:	6013      	str	r3, [r2, #0]
 800827a:	4b69      	ldr	r3, [pc, #420]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a68      	ldr	r2, [pc, #416]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 8008280:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008284:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d013      	beq.n	80082b6 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800828e:	f7fb fdbf 	bl	8003e10 <HAL_GetTick>
 8008292:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008294:	e008      	b.n	80082a8 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008296:	f7fb fdbb 	bl	8003e10 <HAL_GetTick>
 800829a:	4602      	mov	r2, r0
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	2b64      	cmp	r3, #100	; 0x64
 80082a2:	d901      	bls.n	80082a8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e299      	b.n	80087dc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082a8:	4b5d      	ldr	r3, [pc, #372]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d0f0      	beq.n	8008296 <HAL_RCC_OscConfig+0xf6>
 80082b4:	e014      	b.n	80082e0 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082b6:	f7fb fdab 	bl	8003e10 <HAL_GetTick>
 80082ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082bc:	e008      	b.n	80082d0 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082be:	f7fb fda7 	bl	8003e10 <HAL_GetTick>
 80082c2:	4602      	mov	r2, r0
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	2b64      	cmp	r3, #100	; 0x64
 80082ca:	d901      	bls.n	80082d0 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e285      	b.n	80087dc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082d0:	4b53      	ldr	r3, [pc, #332]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1f0      	bne.n	80082be <HAL_RCC_OscConfig+0x11e>
 80082dc:	e000      	b.n	80082e0 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082de:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0302 	and.w	r3, r3, #2
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d079      	beq.n	80083e0 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d008      	beq.n	8008306 <HAL_RCC_OscConfig+0x166>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d004      	beq.n	8008306 <HAL_RCC_OscConfig+0x166>
 80082fc:	f240 111d 	movw	r1, #285	; 0x11d
 8008300:	4846      	ldr	r0, [pc, #280]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 8008302:	f7fa ff42 	bl	800318a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	2b1f      	cmp	r3, #31
 800830c:	d904      	bls.n	8008318 <HAL_RCC_OscConfig+0x178>
 800830e:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8008312:	4842      	ldr	r0, [pc, #264]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 8008314:	f7fa ff39 	bl	800318a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008318:	4b41      	ldr	r3, [pc, #260]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f003 030c 	and.w	r3, r3, #12
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00b      	beq.n	800833c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008324:	4b3e      	ldr	r3, [pc, #248]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800832c:	2b08      	cmp	r3, #8
 800832e:	d11c      	bne.n	800836a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008330:	4b3b      	ldr	r3, [pc, #236]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d116      	bne.n	800836a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800833c:	4b38      	ldr	r3, [pc, #224]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 0302 	and.w	r3, r3, #2
 8008344:	2b00      	cmp	r3, #0
 8008346:	d005      	beq.n	8008354 <HAL_RCC_OscConfig+0x1b4>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d001      	beq.n	8008354 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	e243      	b.n	80087dc <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008354:	4b32      	ldr	r3, [pc, #200]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	00db      	lsls	r3, r3, #3
 8008362:	492f      	ldr	r1, [pc, #188]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 8008364:	4313      	orrs	r3, r2
 8008366:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008368:	e03a      	b.n	80083e0 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d020      	beq.n	80083b4 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008372:	4b2c      	ldr	r3, [pc, #176]	; (8008424 <HAL_RCC_OscConfig+0x284>)
 8008374:	2201      	movs	r2, #1
 8008376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008378:	f7fb fd4a 	bl	8003e10 <HAL_GetTick>
 800837c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800837e:	e008      	b.n	8008392 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008380:	f7fb fd46 	bl	8003e10 <HAL_GetTick>
 8008384:	4602      	mov	r2, r0
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	2b02      	cmp	r3, #2
 800838c:	d901      	bls.n	8008392 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	e224      	b.n	80087dc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008392:	4b23      	ldr	r3, [pc, #140]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 0302 	and.w	r3, r3, #2
 800839a:	2b00      	cmp	r3, #0
 800839c:	d0f0      	beq.n	8008380 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800839e:	4b20      	ldr	r3, [pc, #128]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	00db      	lsls	r3, r3, #3
 80083ac:	491c      	ldr	r1, [pc, #112]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	600b      	str	r3, [r1, #0]
 80083b2:	e015      	b.n	80083e0 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80083b4:	4b1b      	ldr	r3, [pc, #108]	; (8008424 <HAL_RCC_OscConfig+0x284>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083ba:	f7fb fd29 	bl	8003e10 <HAL_GetTick>
 80083be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083c0:	e008      	b.n	80083d4 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083c2:	f7fb fd25 	bl	8003e10 <HAL_GetTick>
 80083c6:	4602      	mov	r2, r0
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d901      	bls.n	80083d4 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e203      	b.n	80087dc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083d4:	4b12      	ldr	r3, [pc, #72]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 0302 	and.w	r3, r3, #2
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1f0      	bne.n	80083c2 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0308 	and.w	r3, r3, #8
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d045      	beq.n	8008478 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	695b      	ldr	r3, [r3, #20]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d008      	beq.n	8008406 <HAL_RCC_OscConfig+0x266>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	695b      	ldr	r3, [r3, #20]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d004      	beq.n	8008406 <HAL_RCC_OscConfig+0x266>
 80083fc:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008400:	4806      	ldr	r0, [pc, #24]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 8008402:	f7fa fec2 	bl	800318a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d01e      	beq.n	800844c <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800840e:	4b06      	ldr	r3, [pc, #24]	; (8008428 <HAL_RCC_OscConfig+0x288>)
 8008410:	2201      	movs	r2, #1
 8008412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008414:	f7fb fcfc 	bl	8003e10 <HAL_GetTick>
 8008418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800841a:	e010      	b.n	800843e <HAL_RCC_OscConfig+0x29e>
 800841c:	0800f0a8 	.word	0x0800f0a8
 8008420:	40023800 	.word	0x40023800
 8008424:	42470000 	.word	0x42470000
 8008428:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800842c:	f7fb fcf0 	bl	8003e10 <HAL_GetTick>
 8008430:	4602      	mov	r2, r0
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	2b02      	cmp	r3, #2
 8008438:	d901      	bls.n	800843e <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 800843a:	2303      	movs	r3, #3
 800843c:	e1ce      	b.n	80087dc <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800843e:	4b5e      	ldr	r3, [pc, #376]	; (80085b8 <HAL_RCC_OscConfig+0x418>)
 8008440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008442:	f003 0302 	and.w	r3, r3, #2
 8008446:	2b00      	cmp	r3, #0
 8008448:	d0f0      	beq.n	800842c <HAL_RCC_OscConfig+0x28c>
 800844a:	e015      	b.n	8008478 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800844c:	4b5b      	ldr	r3, [pc, #364]	; (80085bc <HAL_RCC_OscConfig+0x41c>)
 800844e:	2200      	movs	r2, #0
 8008450:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008452:	f7fb fcdd 	bl	8003e10 <HAL_GetTick>
 8008456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008458:	e008      	b.n	800846c <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800845a:	f7fb fcd9 	bl	8003e10 <HAL_GetTick>
 800845e:	4602      	mov	r2, r0
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	2b02      	cmp	r3, #2
 8008466:	d901      	bls.n	800846c <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8008468:	2303      	movs	r3, #3
 800846a:	e1b7      	b.n	80087dc <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800846c:	4b52      	ldr	r3, [pc, #328]	; (80085b8 <HAL_RCC_OscConfig+0x418>)
 800846e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008470:	f003 0302 	and.w	r3, r3, #2
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1f0      	bne.n	800845a <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 0304 	and.w	r3, r3, #4
 8008480:	2b00      	cmp	r3, #0
 8008482:	f000 80b0 	beq.w	80085e6 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008486:	2300      	movs	r3, #0
 8008488:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00c      	beq.n	80084ac <HAL_RCC_OscConfig+0x30c>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	2b01      	cmp	r3, #1
 8008498:	d008      	beq.n	80084ac <HAL_RCC_OscConfig+0x30c>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	2b05      	cmp	r3, #5
 80084a0:	d004      	beq.n	80084ac <HAL_RCC_OscConfig+0x30c>
 80084a2:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80084a6:	4846      	ldr	r0, [pc, #280]	; (80085c0 <HAL_RCC_OscConfig+0x420>)
 80084a8:	f7fa fe6f 	bl	800318a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80084ac:	4b42      	ldr	r3, [pc, #264]	; (80085b8 <HAL_RCC_OscConfig+0x418>)
 80084ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10f      	bne.n	80084d8 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084b8:	2300      	movs	r3, #0
 80084ba:	60bb      	str	r3, [r7, #8]
 80084bc:	4b3e      	ldr	r3, [pc, #248]	; (80085b8 <HAL_RCC_OscConfig+0x418>)
 80084be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c0:	4a3d      	ldr	r2, [pc, #244]	; (80085b8 <HAL_RCC_OscConfig+0x418>)
 80084c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084c6:	6413      	str	r3, [r2, #64]	; 0x40
 80084c8:	4b3b      	ldr	r3, [pc, #236]	; (80085b8 <HAL_RCC_OscConfig+0x418>)
 80084ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084d0:	60bb      	str	r3, [r7, #8]
 80084d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80084d4:	2301      	movs	r3, #1
 80084d6:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084d8:	4b3a      	ldr	r3, [pc, #232]	; (80085c4 <HAL_RCC_OscConfig+0x424>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d118      	bne.n	8008516 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80084e4:	4b37      	ldr	r3, [pc, #220]	; (80085c4 <HAL_RCC_OscConfig+0x424>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a36      	ldr	r2, [pc, #216]	; (80085c4 <HAL_RCC_OscConfig+0x424>)
 80084ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80084f0:	f7fb fc8e 	bl	8003e10 <HAL_GetTick>
 80084f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084f6:	e008      	b.n	800850a <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084f8:	f7fb fc8a 	bl	8003e10 <HAL_GetTick>
 80084fc:	4602      	mov	r2, r0
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	2b02      	cmp	r3, #2
 8008504:	d901      	bls.n	800850a <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8008506:	2303      	movs	r3, #3
 8008508:	e168      	b.n	80087dc <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800850a:	4b2e      	ldr	r3, [pc, #184]	; (80085c4 <HAL_RCC_OscConfig+0x424>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008512:	2b00      	cmp	r3, #0
 8008514:	d0f0      	beq.n	80084f8 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d106      	bne.n	800852c <HAL_RCC_OscConfig+0x38c>
 800851e:	4b26      	ldr	r3, [pc, #152]	; (80085b8 <HAL_RCC_OscConfig+0x418>)
 8008520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008522:	4a25      	ldr	r2, [pc, #148]	; (80085b8 <HAL_RCC_OscConfig+0x418>)
 8008524:	f043 0301 	orr.w	r3, r3, #1
 8008528:	6713      	str	r3, [r2, #112]	; 0x70
 800852a:	e01c      	b.n	8008566 <HAL_RCC_OscConfig+0x3c6>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	2b05      	cmp	r3, #5
 8008532:	d10c      	bne.n	800854e <HAL_RCC_OscConfig+0x3ae>
 8008534:	4b20      	ldr	r3, [pc, #128]	; (80085b8 <HAL_RCC_OscConfig+0x418>)
 8008536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008538:	4a1f      	ldr	r2, [pc, #124]	; (80085b8 <HAL_RCC_OscConfig+0x418>)
 800853a:	f043 0304 	orr.w	r3, r3, #4
 800853e:	6713      	str	r3, [r2, #112]	; 0x70
 8008540:	4b1d      	ldr	r3, [pc, #116]	; (80085b8 <HAL_RCC_OscConfig+0x418>)
 8008542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008544:	4a1c      	ldr	r2, [pc, #112]	; (80085b8 <HAL_RCC_OscConfig+0x418>)
 8008546:	f043 0301 	orr.w	r3, r3, #1
 800854a:	6713      	str	r3, [r2, #112]	; 0x70
 800854c:	e00b      	b.n	8008566 <HAL_RCC_OscConfig+0x3c6>
 800854e:	4b1a      	ldr	r3, [pc, #104]	; (80085b8 <HAL_RCC_OscConfig+0x418>)
 8008550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008552:	4a19      	ldr	r2, [pc, #100]	; (80085b8 <HAL_RCC_OscConfig+0x418>)
 8008554:	f023 0301 	bic.w	r3, r3, #1
 8008558:	6713      	str	r3, [r2, #112]	; 0x70
 800855a:	4b17      	ldr	r3, [pc, #92]	; (80085b8 <HAL_RCC_OscConfig+0x418>)
 800855c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800855e:	4a16      	ldr	r2, [pc, #88]	; (80085b8 <HAL_RCC_OscConfig+0x418>)
 8008560:	f023 0304 	bic.w	r3, r3, #4
 8008564:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d015      	beq.n	800859a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800856e:	f7fb fc4f 	bl	8003e10 <HAL_GetTick>
 8008572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008574:	e00a      	b.n	800858c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008576:	f7fb fc4b 	bl	8003e10 <HAL_GetTick>
 800857a:	4602      	mov	r2, r0
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	f241 3288 	movw	r2, #5000	; 0x1388
 8008584:	4293      	cmp	r3, r2
 8008586:	d901      	bls.n	800858c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8008588:	2303      	movs	r3, #3
 800858a:	e127      	b.n	80087dc <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800858c:	4b0a      	ldr	r3, [pc, #40]	; (80085b8 <HAL_RCC_OscConfig+0x418>)
 800858e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008590:	f003 0302 	and.w	r3, r3, #2
 8008594:	2b00      	cmp	r3, #0
 8008596:	d0ee      	beq.n	8008576 <HAL_RCC_OscConfig+0x3d6>
 8008598:	e01c      	b.n	80085d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800859a:	f7fb fc39 	bl	8003e10 <HAL_GetTick>
 800859e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085a0:	e012      	b.n	80085c8 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085a2:	f7fb fc35 	bl	8003e10 <HAL_GetTick>
 80085a6:	4602      	mov	r2, r0
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d909      	bls.n	80085c8 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 80085b4:	2303      	movs	r3, #3
 80085b6:	e111      	b.n	80087dc <HAL_RCC_OscConfig+0x63c>
 80085b8:	40023800 	.word	0x40023800
 80085bc:	42470e80 	.word	0x42470e80
 80085c0:	0800f0a8 	.word	0x0800f0a8
 80085c4:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085c8:	4b86      	ldr	r3, [pc, #536]	; (80087e4 <HAL_RCC_OscConfig+0x644>)
 80085ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085cc:	f003 0302 	and.w	r3, r3, #2
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1e6      	bne.n	80085a2 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80085d4:	7dfb      	ldrb	r3, [r7, #23]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d105      	bne.n	80085e6 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085da:	4b82      	ldr	r3, [pc, #520]	; (80087e4 <HAL_RCC_OscConfig+0x644>)
 80085dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085de:	4a81      	ldr	r2, [pc, #516]	; (80087e4 <HAL_RCC_OscConfig+0x644>)
 80085e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00c      	beq.n	8008608 <HAL_RCC_OscConfig+0x468>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d008      	beq.n	8008608 <HAL_RCC_OscConfig+0x468>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d004      	beq.n	8008608 <HAL_RCC_OscConfig+0x468>
 80085fe:	f240 11cd 	movw	r1, #461	; 0x1cd
 8008602:	4879      	ldr	r0, [pc, #484]	; (80087e8 <HAL_RCC_OscConfig+0x648>)
 8008604:	f7fa fdc1 	bl	800318a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	2b00      	cmp	r3, #0
 800860e:	f000 80e4 	beq.w	80087da <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008612:	4b74      	ldr	r3, [pc, #464]	; (80087e4 <HAL_RCC_OscConfig+0x644>)
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	f003 030c 	and.w	r3, r3, #12
 800861a:	2b08      	cmp	r3, #8
 800861c:	f000 80a5 	beq.w	800876a <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	2b02      	cmp	r3, #2
 8008626:	f040 8089 	bne.w	800873c <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d009      	beq.n	8008646 <HAL_RCC_OscConfig+0x4a6>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800863a:	d004      	beq.n	8008646 <HAL_RCC_OscConfig+0x4a6>
 800863c:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8008640:	4869      	ldr	r0, [pc, #420]	; (80087e8 <HAL_RCC_OscConfig+0x648>)
 8008642:	f7fa fda2 	bl	800318a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	2b3f      	cmp	r3, #63	; 0x3f
 800864c:	d904      	bls.n	8008658 <HAL_RCC_OscConfig+0x4b8>
 800864e:	f240 11d7 	movw	r1, #471	; 0x1d7
 8008652:	4865      	ldr	r0, [pc, #404]	; (80087e8 <HAL_RCC_OscConfig+0x648>)
 8008654:	f7fa fd99 	bl	800318a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865c:	2b31      	cmp	r3, #49	; 0x31
 800865e:	d904      	bls.n	800866a <HAL_RCC_OscConfig+0x4ca>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008664:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8008668:	d904      	bls.n	8008674 <HAL_RCC_OscConfig+0x4d4>
 800866a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800866e:	485e      	ldr	r0, [pc, #376]	; (80087e8 <HAL_RCC_OscConfig+0x648>)
 8008670:	f7fa fd8b 	bl	800318a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008678:	2b02      	cmp	r3, #2
 800867a:	d010      	beq.n	800869e <HAL_RCC_OscConfig+0x4fe>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008680:	2b04      	cmp	r3, #4
 8008682:	d00c      	beq.n	800869e <HAL_RCC_OscConfig+0x4fe>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008688:	2b06      	cmp	r3, #6
 800868a:	d008      	beq.n	800869e <HAL_RCC_OscConfig+0x4fe>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008690:	2b08      	cmp	r3, #8
 8008692:	d004      	beq.n	800869e <HAL_RCC_OscConfig+0x4fe>
 8008694:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008698:	4853      	ldr	r0, [pc, #332]	; (80087e8 <HAL_RCC_OscConfig+0x648>)
 800869a:	f7fa fd76 	bl	800318a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d903      	bls.n	80086ae <HAL_RCC_OscConfig+0x50e>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086aa:	2b0f      	cmp	r3, #15
 80086ac:	d904      	bls.n	80086b8 <HAL_RCC_OscConfig+0x518>
 80086ae:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80086b2:	484d      	ldr	r0, [pc, #308]	; (80087e8 <HAL_RCC_OscConfig+0x648>)
 80086b4:	f7fa fd69 	bl	800318a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086b8:	4b4c      	ldr	r3, [pc, #304]	; (80087ec <HAL_RCC_OscConfig+0x64c>)
 80086ba:	2200      	movs	r2, #0
 80086bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086be:	f7fb fba7 	bl	8003e10 <HAL_GetTick>
 80086c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086c4:	e008      	b.n	80086d8 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086c6:	f7fb fba3 	bl	8003e10 <HAL_GetTick>
 80086ca:	4602      	mov	r2, r0
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d901      	bls.n	80086d8 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 80086d4:	2303      	movs	r3, #3
 80086d6:	e081      	b.n	80087dc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086d8:	4b42      	ldr	r3, [pc, #264]	; (80087e4 <HAL_RCC_OscConfig+0x644>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1f0      	bne.n	80086c6 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	69da      	ldr	r2, [r3, #28]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a1b      	ldr	r3, [r3, #32]
 80086ec:	431a      	orrs	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f2:	019b      	lsls	r3, r3, #6
 80086f4:	431a      	orrs	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fa:	085b      	lsrs	r3, r3, #1
 80086fc:	3b01      	subs	r3, #1
 80086fe:	041b      	lsls	r3, r3, #16
 8008700:	431a      	orrs	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008706:	061b      	lsls	r3, r3, #24
 8008708:	4936      	ldr	r1, [pc, #216]	; (80087e4 <HAL_RCC_OscConfig+0x644>)
 800870a:	4313      	orrs	r3, r2
 800870c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800870e:	4b37      	ldr	r3, [pc, #220]	; (80087ec <HAL_RCC_OscConfig+0x64c>)
 8008710:	2201      	movs	r2, #1
 8008712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008714:	f7fb fb7c 	bl	8003e10 <HAL_GetTick>
 8008718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800871a:	e008      	b.n	800872e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800871c:	f7fb fb78 	bl	8003e10 <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	2b02      	cmp	r3, #2
 8008728:	d901      	bls.n	800872e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e056      	b.n	80087dc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800872e:	4b2d      	ldr	r3, [pc, #180]	; (80087e4 <HAL_RCC_OscConfig+0x644>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008736:	2b00      	cmp	r3, #0
 8008738:	d0f0      	beq.n	800871c <HAL_RCC_OscConfig+0x57c>
 800873a:	e04e      	b.n	80087da <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800873c:	4b2b      	ldr	r3, [pc, #172]	; (80087ec <HAL_RCC_OscConfig+0x64c>)
 800873e:	2200      	movs	r2, #0
 8008740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008742:	f7fb fb65 	bl	8003e10 <HAL_GetTick>
 8008746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008748:	e008      	b.n	800875c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800874a:	f7fb fb61 	bl	8003e10 <HAL_GetTick>
 800874e:	4602      	mov	r2, r0
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	2b02      	cmp	r3, #2
 8008756:	d901      	bls.n	800875c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	e03f      	b.n	80087dc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800875c:	4b21      	ldr	r3, [pc, #132]	; (80087e4 <HAL_RCC_OscConfig+0x644>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1f0      	bne.n	800874a <HAL_RCC_OscConfig+0x5aa>
 8008768:	e037      	b.n	80087da <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	2b01      	cmp	r3, #1
 8008770:	d101      	bne.n	8008776 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e032      	b.n	80087dc <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008776:	4b1b      	ldr	r3, [pc, #108]	; (80087e4 <HAL_RCC_OscConfig+0x644>)
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	699b      	ldr	r3, [r3, #24]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d028      	beq.n	80087d6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800878e:	429a      	cmp	r2, r3
 8008790:	d121      	bne.n	80087d6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800879c:	429a      	cmp	r2, r3
 800879e:	d11a      	bne.n	80087d6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80087a6:	4013      	ands	r3, r2
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80087ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d111      	bne.n	80087d6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087bc:	085b      	lsrs	r3, r3, #1
 80087be:	3b01      	subs	r3, #1
 80087c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d107      	bne.n	80087d6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d001      	beq.n	80087da <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e000      	b.n	80087dc <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3718      	adds	r7, #24
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	40023800 	.word	0x40023800
 80087e8:	0800f0a8 	.word	0x0800f0a8
 80087ec:	42470060 	.word	0x42470060

080087f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d101      	bne.n	8008804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e174      	b.n	8008aee <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <HAL_RCC_ClockConfig+0x24>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b0f      	cmp	r3, #15
 8008812:	d904      	bls.n	800881e <HAL_RCC_ClockConfig+0x2e>
 8008814:	f240 215a 	movw	r1, #602	; 0x25a
 8008818:	487b      	ldr	r0, [pc, #492]	; (8008a08 <HAL_RCC_ClockConfig+0x218>)
 800881a:	f7fa fcb6 	bl	800318a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d019      	beq.n	8008858 <HAL_RCC_ClockConfig+0x68>
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d016      	beq.n	8008858 <HAL_RCC_ClockConfig+0x68>
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	2b02      	cmp	r3, #2
 800882e:	d013      	beq.n	8008858 <HAL_RCC_ClockConfig+0x68>
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	2b03      	cmp	r3, #3
 8008834:	d010      	beq.n	8008858 <HAL_RCC_ClockConfig+0x68>
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	2b04      	cmp	r3, #4
 800883a:	d00d      	beq.n	8008858 <HAL_RCC_ClockConfig+0x68>
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	2b05      	cmp	r3, #5
 8008840:	d00a      	beq.n	8008858 <HAL_RCC_ClockConfig+0x68>
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	2b06      	cmp	r3, #6
 8008846:	d007      	beq.n	8008858 <HAL_RCC_ClockConfig+0x68>
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	2b07      	cmp	r3, #7
 800884c:	d004      	beq.n	8008858 <HAL_RCC_ClockConfig+0x68>
 800884e:	f240 215b 	movw	r1, #603	; 0x25b
 8008852:	486d      	ldr	r0, [pc, #436]	; (8008a08 <HAL_RCC_ClockConfig+0x218>)
 8008854:	f7fa fc99 	bl	800318a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008858:	4b6c      	ldr	r3, [pc, #432]	; (8008a0c <HAL_RCC_ClockConfig+0x21c>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 0307 	and.w	r3, r3, #7
 8008860:	683a      	ldr	r2, [r7, #0]
 8008862:	429a      	cmp	r2, r3
 8008864:	d90c      	bls.n	8008880 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008866:	4b69      	ldr	r3, [pc, #420]	; (8008a0c <HAL_RCC_ClockConfig+0x21c>)
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	b2d2      	uxtb	r2, r2
 800886c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800886e:	4b67      	ldr	r3, [pc, #412]	; (8008a0c <HAL_RCC_ClockConfig+0x21c>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 0307 	and.w	r3, r3, #7
 8008876:	683a      	ldr	r2, [r7, #0]
 8008878:	429a      	cmp	r2, r3
 800887a:	d001      	beq.n	8008880 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e136      	b.n	8008aee <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 0302 	and.w	r3, r3, #2
 8008888:	2b00      	cmp	r3, #0
 800888a:	d049      	beq.n	8008920 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0304 	and.w	r3, r3, #4
 8008894:	2b00      	cmp	r3, #0
 8008896:	d005      	beq.n	80088a4 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008898:	4b5d      	ldr	r3, [pc, #372]	; (8008a10 <HAL_RCC_ClockConfig+0x220>)
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	4a5c      	ldr	r2, [pc, #368]	; (8008a10 <HAL_RCC_ClockConfig+0x220>)
 800889e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80088a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0308 	and.w	r3, r3, #8
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d005      	beq.n	80088bc <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80088b0:	4b57      	ldr	r3, [pc, #348]	; (8008a10 <HAL_RCC_ClockConfig+0x220>)
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	4a56      	ldr	r2, [pc, #344]	; (8008a10 <HAL_RCC_ClockConfig+0x220>)
 80088b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80088ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d024      	beq.n	800890e <HAL_RCC_ClockConfig+0x11e>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	2b80      	cmp	r3, #128	; 0x80
 80088ca:	d020      	beq.n	800890e <HAL_RCC_ClockConfig+0x11e>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	2b90      	cmp	r3, #144	; 0x90
 80088d2:	d01c      	beq.n	800890e <HAL_RCC_ClockConfig+0x11e>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	2ba0      	cmp	r3, #160	; 0xa0
 80088da:	d018      	beq.n	800890e <HAL_RCC_ClockConfig+0x11e>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	2bb0      	cmp	r3, #176	; 0xb0
 80088e2:	d014      	beq.n	800890e <HAL_RCC_ClockConfig+0x11e>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	2bc0      	cmp	r3, #192	; 0xc0
 80088ea:	d010      	beq.n	800890e <HAL_RCC_ClockConfig+0x11e>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	2bd0      	cmp	r3, #208	; 0xd0
 80088f2:	d00c      	beq.n	800890e <HAL_RCC_ClockConfig+0x11e>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	2be0      	cmp	r3, #224	; 0xe0
 80088fa:	d008      	beq.n	800890e <HAL_RCC_ClockConfig+0x11e>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	2bf0      	cmp	r3, #240	; 0xf0
 8008902:	d004      	beq.n	800890e <HAL_RCC_ClockConfig+0x11e>
 8008904:	f240 217e 	movw	r1, #638	; 0x27e
 8008908:	483f      	ldr	r0, [pc, #252]	; (8008a08 <HAL_RCC_ClockConfig+0x218>)
 800890a:	f7fa fc3e 	bl	800318a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800890e:	4b40      	ldr	r3, [pc, #256]	; (8008a10 <HAL_RCC_ClockConfig+0x220>)
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	493d      	ldr	r1, [pc, #244]	; (8008a10 <HAL_RCC_ClockConfig+0x220>)
 800891c:	4313      	orrs	r3, r2
 800891e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0301 	and.w	r3, r3, #1
 8008928:	2b00      	cmp	r3, #0
 800892a:	d059      	beq.n	80089e0 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d010      	beq.n	8008956 <HAL_RCC_ClockConfig+0x166>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d00c      	beq.n	8008956 <HAL_RCC_ClockConfig+0x166>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	2b02      	cmp	r3, #2
 8008942:	d008      	beq.n	8008956 <HAL_RCC_ClockConfig+0x166>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	2b03      	cmp	r3, #3
 800894a:	d004      	beq.n	8008956 <HAL_RCC_ClockConfig+0x166>
 800894c:	f240 2185 	movw	r1, #645	; 0x285
 8008950:	482d      	ldr	r0, [pc, #180]	; (8008a08 <HAL_RCC_ClockConfig+0x218>)
 8008952:	f7fa fc1a 	bl	800318a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d107      	bne.n	800896e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800895e:	4b2c      	ldr	r3, [pc, #176]	; (8008a10 <HAL_RCC_ClockConfig+0x220>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008966:	2b00      	cmp	r3, #0
 8008968:	d119      	bne.n	800899e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e0bf      	b.n	8008aee <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	2b02      	cmp	r3, #2
 8008974:	d003      	beq.n	800897e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800897a:	2b03      	cmp	r3, #3
 800897c:	d107      	bne.n	800898e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800897e:	4b24      	ldr	r3, [pc, #144]	; (8008a10 <HAL_RCC_ClockConfig+0x220>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d109      	bne.n	800899e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e0af      	b.n	8008aee <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800898e:	4b20      	ldr	r3, [pc, #128]	; (8008a10 <HAL_RCC_ClockConfig+0x220>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 0302 	and.w	r3, r3, #2
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e0a7      	b.n	8008aee <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800899e:	4b1c      	ldr	r3, [pc, #112]	; (8008a10 <HAL_RCC_ClockConfig+0x220>)
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f023 0203 	bic.w	r2, r3, #3
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	4919      	ldr	r1, [pc, #100]	; (8008a10 <HAL_RCC_ClockConfig+0x220>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80089b0:	f7fb fa2e 	bl	8003e10 <HAL_GetTick>
 80089b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089b6:	e00a      	b.n	80089ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089b8:	f7fb fa2a 	bl	8003e10 <HAL_GetTick>
 80089bc:	4602      	mov	r2, r0
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d901      	bls.n	80089ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e08f      	b.n	8008aee <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089ce:	4b10      	ldr	r3, [pc, #64]	; (8008a10 <HAL_RCC_ClockConfig+0x220>)
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f003 020c 	and.w	r2, r3, #12
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	429a      	cmp	r2, r3
 80089de:	d1eb      	bne.n	80089b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089e0:	4b0a      	ldr	r3, [pc, #40]	; (8008a0c <HAL_RCC_ClockConfig+0x21c>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 0307 	and.w	r3, r3, #7
 80089e8:	683a      	ldr	r2, [r7, #0]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d212      	bcs.n	8008a14 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089ee:	4b07      	ldr	r3, [pc, #28]	; (8008a0c <HAL_RCC_ClockConfig+0x21c>)
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	b2d2      	uxtb	r2, r2
 80089f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089f6:	4b05      	ldr	r3, [pc, #20]	; (8008a0c <HAL_RCC_ClockConfig+0x21c>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 0307 	and.w	r3, r3, #7
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d007      	beq.n	8008a14 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e072      	b.n	8008aee <HAL_RCC_ClockConfig+0x2fe>
 8008a08:	0800f0a8 	.word	0x0800f0a8
 8008a0c:	40023c00 	.word	0x40023c00
 8008a10:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 0304 	and.w	r3, r3, #4
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d025      	beq.n	8008a6c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d018      	beq.n	8008a5a <HAL_RCC_ClockConfig+0x26a>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a30:	d013      	beq.n	8008a5a <HAL_RCC_ClockConfig+0x26a>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008a3a:	d00e      	beq.n	8008a5a <HAL_RCC_ClockConfig+0x26a>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008a44:	d009      	beq.n	8008a5a <HAL_RCC_ClockConfig+0x26a>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8008a4e:	d004      	beq.n	8008a5a <HAL_RCC_ClockConfig+0x26a>
 8008a50:	f240 21c3 	movw	r1, #707	; 0x2c3
 8008a54:	4828      	ldr	r0, [pc, #160]	; (8008af8 <HAL_RCC_ClockConfig+0x308>)
 8008a56:	f7fa fb98 	bl	800318a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a5a:	4b28      	ldr	r3, [pc, #160]	; (8008afc <HAL_RCC_ClockConfig+0x30c>)
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	4925      	ldr	r1, [pc, #148]	; (8008afc <HAL_RCC_ClockConfig+0x30c>)
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 0308 	and.w	r3, r3, #8
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d026      	beq.n	8008ac6 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d018      	beq.n	8008ab2 <HAL_RCC_ClockConfig+0x2c2>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a88:	d013      	beq.n	8008ab2 <HAL_RCC_ClockConfig+0x2c2>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	691b      	ldr	r3, [r3, #16]
 8008a8e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008a92:	d00e      	beq.n	8008ab2 <HAL_RCC_ClockConfig+0x2c2>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008a9c:	d009      	beq.n	8008ab2 <HAL_RCC_ClockConfig+0x2c2>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8008aa6:	d004      	beq.n	8008ab2 <HAL_RCC_ClockConfig+0x2c2>
 8008aa8:	f240 21ca 	movw	r1, #714	; 0x2ca
 8008aac:	4812      	ldr	r0, [pc, #72]	; (8008af8 <HAL_RCC_ClockConfig+0x308>)
 8008aae:	f7fa fb6c 	bl	800318a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ab2:	4b12      	ldr	r3, [pc, #72]	; (8008afc <HAL_RCC_ClockConfig+0x30c>)
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	00db      	lsls	r3, r3, #3
 8008ac0:	490e      	ldr	r1, [pc, #56]	; (8008afc <HAL_RCC_ClockConfig+0x30c>)
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008ac6:	f000 f821 	bl	8008b0c <HAL_RCC_GetSysClockFreq>
 8008aca:	4602      	mov	r2, r0
 8008acc:	4b0b      	ldr	r3, [pc, #44]	; (8008afc <HAL_RCC_ClockConfig+0x30c>)
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	091b      	lsrs	r3, r3, #4
 8008ad2:	f003 030f 	and.w	r3, r3, #15
 8008ad6:	490a      	ldr	r1, [pc, #40]	; (8008b00 <HAL_RCC_ClockConfig+0x310>)
 8008ad8:	5ccb      	ldrb	r3, [r1, r3]
 8008ada:	fa22 f303 	lsr.w	r3, r2, r3
 8008ade:	4a09      	ldr	r2, [pc, #36]	; (8008b04 <HAL_RCC_ClockConfig+0x314>)
 8008ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008ae2:	4b09      	ldr	r3, [pc, #36]	; (8008b08 <HAL_RCC_ClockConfig+0x318>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7fa fc3c 	bl	8003364 <HAL_InitTick>

  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	0800f0a8 	.word	0x0800f0a8
 8008afc:	40023800 	.word	0x40023800
 8008b00:	0800f3e8 	.word	0x0800f3e8
 8008b04:	20000000 	.word	0x20000000
 8008b08:	20000004 	.word	0x20000004

08008b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b10:	b094      	sub	sp, #80	; 0x50
 8008b12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008b14:	2300      	movs	r3, #0
 8008b16:	647b      	str	r3, [r7, #68]	; 0x44
 8008b18:	2300      	movs	r3, #0
 8008b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008b20:	2300      	movs	r3, #0
 8008b22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b24:	4b79      	ldr	r3, [pc, #484]	; (8008d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	f003 030c 	and.w	r3, r3, #12
 8008b2c:	2b08      	cmp	r3, #8
 8008b2e:	d00d      	beq.n	8008b4c <HAL_RCC_GetSysClockFreq+0x40>
 8008b30:	2b08      	cmp	r3, #8
 8008b32:	f200 80e1 	bhi.w	8008cf8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d002      	beq.n	8008b40 <HAL_RCC_GetSysClockFreq+0x34>
 8008b3a:	2b04      	cmp	r3, #4
 8008b3c:	d003      	beq.n	8008b46 <HAL_RCC_GetSysClockFreq+0x3a>
 8008b3e:	e0db      	b.n	8008cf8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b40:	4b73      	ldr	r3, [pc, #460]	; (8008d10 <HAL_RCC_GetSysClockFreq+0x204>)
 8008b42:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008b44:	e0db      	b.n	8008cfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008b46:	4b73      	ldr	r3, [pc, #460]	; (8008d14 <HAL_RCC_GetSysClockFreq+0x208>)
 8008b48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008b4a:	e0d8      	b.n	8008cfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008b4c:	4b6f      	ldr	r3, [pc, #444]	; (8008d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b54:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008b56:	4b6d      	ldr	r3, [pc, #436]	; (8008d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d063      	beq.n	8008c2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b62:	4b6a      	ldr	r3, [pc, #424]	; (8008d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	099b      	lsrs	r3, r3, #6
 8008b68:	2200      	movs	r2, #0
 8008b6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b74:	633b      	str	r3, [r7, #48]	; 0x30
 8008b76:	2300      	movs	r3, #0
 8008b78:	637b      	str	r3, [r7, #52]	; 0x34
 8008b7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008b7e:	4622      	mov	r2, r4
 8008b80:	462b      	mov	r3, r5
 8008b82:	f04f 0000 	mov.w	r0, #0
 8008b86:	f04f 0100 	mov.w	r1, #0
 8008b8a:	0159      	lsls	r1, r3, #5
 8008b8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b90:	0150      	lsls	r0, r2, #5
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	4621      	mov	r1, r4
 8008b98:	1a51      	subs	r1, r2, r1
 8008b9a:	6139      	str	r1, [r7, #16]
 8008b9c:	4629      	mov	r1, r5
 8008b9e:	eb63 0301 	sbc.w	r3, r3, r1
 8008ba2:	617b      	str	r3, [r7, #20]
 8008ba4:	f04f 0200 	mov.w	r2, #0
 8008ba8:	f04f 0300 	mov.w	r3, #0
 8008bac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008bb0:	4659      	mov	r1, fp
 8008bb2:	018b      	lsls	r3, r1, #6
 8008bb4:	4651      	mov	r1, sl
 8008bb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008bba:	4651      	mov	r1, sl
 8008bbc:	018a      	lsls	r2, r1, #6
 8008bbe:	4651      	mov	r1, sl
 8008bc0:	ebb2 0801 	subs.w	r8, r2, r1
 8008bc4:	4659      	mov	r1, fp
 8008bc6:	eb63 0901 	sbc.w	r9, r3, r1
 8008bca:	f04f 0200 	mov.w	r2, #0
 8008bce:	f04f 0300 	mov.w	r3, #0
 8008bd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008bd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008bda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008bde:	4690      	mov	r8, r2
 8008be0:	4699      	mov	r9, r3
 8008be2:	4623      	mov	r3, r4
 8008be4:	eb18 0303 	adds.w	r3, r8, r3
 8008be8:	60bb      	str	r3, [r7, #8]
 8008bea:	462b      	mov	r3, r5
 8008bec:	eb49 0303 	adc.w	r3, r9, r3
 8008bf0:	60fb      	str	r3, [r7, #12]
 8008bf2:	f04f 0200 	mov.w	r2, #0
 8008bf6:	f04f 0300 	mov.w	r3, #0
 8008bfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008bfe:	4629      	mov	r1, r5
 8008c00:	024b      	lsls	r3, r1, #9
 8008c02:	4621      	mov	r1, r4
 8008c04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008c08:	4621      	mov	r1, r4
 8008c0a:	024a      	lsls	r2, r1, #9
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	4619      	mov	r1, r3
 8008c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c12:	2200      	movs	r2, #0
 8008c14:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c1c:	f7f7 fece 	bl	80009bc <__aeabi_uldivmod>
 8008c20:	4602      	mov	r2, r0
 8008c22:	460b      	mov	r3, r1
 8008c24:	4613      	mov	r3, r2
 8008c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c28:	e058      	b.n	8008cdc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c2a:	4b38      	ldr	r3, [pc, #224]	; (8008d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	099b      	lsrs	r3, r3, #6
 8008c30:	2200      	movs	r2, #0
 8008c32:	4618      	mov	r0, r3
 8008c34:	4611      	mov	r1, r2
 8008c36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008c3a:	623b      	str	r3, [r7, #32]
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008c44:	4642      	mov	r2, r8
 8008c46:	464b      	mov	r3, r9
 8008c48:	f04f 0000 	mov.w	r0, #0
 8008c4c:	f04f 0100 	mov.w	r1, #0
 8008c50:	0159      	lsls	r1, r3, #5
 8008c52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c56:	0150      	lsls	r0, r2, #5
 8008c58:	4602      	mov	r2, r0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	4641      	mov	r1, r8
 8008c5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008c62:	4649      	mov	r1, r9
 8008c64:	eb63 0b01 	sbc.w	fp, r3, r1
 8008c68:	f04f 0200 	mov.w	r2, #0
 8008c6c:	f04f 0300 	mov.w	r3, #0
 8008c70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008c74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008c78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008c7c:	ebb2 040a 	subs.w	r4, r2, sl
 8008c80:	eb63 050b 	sbc.w	r5, r3, fp
 8008c84:	f04f 0200 	mov.w	r2, #0
 8008c88:	f04f 0300 	mov.w	r3, #0
 8008c8c:	00eb      	lsls	r3, r5, #3
 8008c8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c92:	00e2      	lsls	r2, r4, #3
 8008c94:	4614      	mov	r4, r2
 8008c96:	461d      	mov	r5, r3
 8008c98:	4643      	mov	r3, r8
 8008c9a:	18e3      	adds	r3, r4, r3
 8008c9c:	603b      	str	r3, [r7, #0]
 8008c9e:	464b      	mov	r3, r9
 8008ca0:	eb45 0303 	adc.w	r3, r5, r3
 8008ca4:	607b      	str	r3, [r7, #4]
 8008ca6:	f04f 0200 	mov.w	r2, #0
 8008caa:	f04f 0300 	mov.w	r3, #0
 8008cae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008cb2:	4629      	mov	r1, r5
 8008cb4:	028b      	lsls	r3, r1, #10
 8008cb6:	4621      	mov	r1, r4
 8008cb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008cbc:	4621      	mov	r1, r4
 8008cbe:	028a      	lsls	r2, r1, #10
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	61bb      	str	r3, [r7, #24]
 8008cca:	61fa      	str	r2, [r7, #28]
 8008ccc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008cd0:	f7f7 fe74 	bl	80009bc <__aeabi_uldivmod>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	4613      	mov	r3, r2
 8008cda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008cdc:	4b0b      	ldr	r3, [pc, #44]	; (8008d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	0c1b      	lsrs	r3, r3, #16
 8008ce2:	f003 0303 	and.w	r3, r3, #3
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	005b      	lsls	r3, r3, #1
 8008cea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008cec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cf4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008cf6:	e002      	b.n	8008cfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008cf8:	4b05      	ldr	r3, [pc, #20]	; (8008d10 <HAL_RCC_GetSysClockFreq+0x204>)
 8008cfa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3750      	adds	r7, #80	; 0x50
 8008d04:	46bd      	mov	sp, r7
 8008d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d0a:	bf00      	nop
 8008d0c:	40023800 	.word	0x40023800
 8008d10:	00f42400 	.word	0x00f42400
 8008d14:	007a1200 	.word	0x007a1200

08008d18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d1c:	4b03      	ldr	r3, [pc, #12]	; (8008d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	20000000 	.word	0x20000000

08008d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008d34:	f7ff fff0 	bl	8008d18 <HAL_RCC_GetHCLKFreq>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	4b05      	ldr	r3, [pc, #20]	; (8008d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	0a9b      	lsrs	r3, r3, #10
 8008d40:	f003 0307 	and.w	r3, r3, #7
 8008d44:	4903      	ldr	r1, [pc, #12]	; (8008d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d46:	5ccb      	ldrb	r3, [r1, r3]
 8008d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	40023800 	.word	0x40023800
 8008d54:	0800f3f8 	.word	0x0800f3f8

08008d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008d5c:	f7ff ffdc 	bl	8008d18 <HAL_RCC_GetHCLKFreq>
 8008d60:	4602      	mov	r2, r0
 8008d62:	4b05      	ldr	r3, [pc, #20]	; (8008d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	0b5b      	lsrs	r3, r3, #13
 8008d68:	f003 0307 	and.w	r3, r3, #7
 8008d6c:	4903      	ldr	r1, [pc, #12]	; (8008d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d6e:	5ccb      	ldrb	r3, [r1, r3]
 8008d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	40023800 	.word	0x40023800
 8008d7c:	0800f3f8 	.word	0x0800f3f8

08008d80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	220f      	movs	r2, #15
 8008d8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008d90:	4b12      	ldr	r3, [pc, #72]	; (8008ddc <HAL_RCC_GetClockConfig+0x5c>)
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	f003 0203 	and.w	r2, r3, #3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008d9c:	4b0f      	ldr	r3, [pc, #60]	; (8008ddc <HAL_RCC_GetClockConfig+0x5c>)
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008da8:	4b0c      	ldr	r3, [pc, #48]	; (8008ddc <HAL_RCC_GetClockConfig+0x5c>)
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008db4:	4b09      	ldr	r3, [pc, #36]	; (8008ddc <HAL_RCC_GetClockConfig+0x5c>)
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	08db      	lsrs	r3, r3, #3
 8008dba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008dc2:	4b07      	ldr	r3, [pc, #28]	; (8008de0 <HAL_RCC_GetClockConfig+0x60>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 0207 	and.w	r2, r3, #7
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	601a      	str	r2, [r3, #0]
}
 8008dce:	bf00      	nop
 8008dd0:	370c      	adds	r7, #12
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	40023800 	.word	0x40023800
 8008de0:	40023c00 	.word	0x40023c00

08008de4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d101      	bne.n	8008df6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	e1ac      	b.n	8009150 <HAL_SPI_Init+0x36c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a75      	ldr	r2, [pc, #468]	; (8008fd0 <HAL_SPI_Init+0x1ec>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d018      	beq.n	8008e32 <HAL_SPI_Init+0x4e>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a73      	ldr	r2, [pc, #460]	; (8008fd4 <HAL_SPI_Init+0x1f0>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d013      	beq.n	8008e32 <HAL_SPI_Init+0x4e>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a72      	ldr	r2, [pc, #456]	; (8008fd8 <HAL_SPI_Init+0x1f4>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d00e      	beq.n	8008e32 <HAL_SPI_Init+0x4e>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a70      	ldr	r2, [pc, #448]	; (8008fdc <HAL_SPI_Init+0x1f8>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d009      	beq.n	8008e32 <HAL_SPI_Init+0x4e>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a6f      	ldr	r2, [pc, #444]	; (8008fe0 <HAL_SPI_Init+0x1fc>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d004      	beq.n	8008e32 <HAL_SPI_Init+0x4e>
 8008e28:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008e2c:	486d      	ldr	r0, [pc, #436]	; (8008fe4 <HAL_SPI_Init+0x200>)
 8008e2e:	f7fa f9ac 	bl	800318a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d009      	beq.n	8008e4e <HAL_SPI_Init+0x6a>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e42:	d004      	beq.n	8008e4e <HAL_SPI_Init+0x6a>
 8008e44:	f240 1141 	movw	r1, #321	; 0x141
 8008e48:	4866      	ldr	r0, [pc, #408]	; (8008fe4 <HAL_SPI_Init+0x200>)
 8008e4a:	f7fa f99e 	bl	800318a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00e      	beq.n	8008e74 <HAL_SPI_Init+0x90>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e5e:	d009      	beq.n	8008e74 <HAL_SPI_Init+0x90>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e68:	d004      	beq.n	8008e74 <HAL_SPI_Init+0x90>
 8008e6a:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8008e6e:	485d      	ldr	r0, [pc, #372]	; (8008fe4 <HAL_SPI_Init+0x200>)
 8008e70:	f7fa f98b 	bl	800318a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e7c:	d008      	beq.n	8008e90 <HAL_SPI_Init+0xac>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d004      	beq.n	8008e90 <HAL_SPI_Init+0xac>
 8008e86:	f240 1143 	movw	r1, #323	; 0x143
 8008e8a:	4856      	ldr	r0, [pc, #344]	; (8008fe4 <HAL_SPI_Init+0x200>)
 8008e8c:	f7fa f97d 	bl	800318a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e98:	d00d      	beq.n	8008eb6 <HAL_SPI_Init+0xd2>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d009      	beq.n	8008eb6 <HAL_SPI_Init+0xd2>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008eaa:	d004      	beq.n	8008eb6 <HAL_SPI_Init+0xd2>
 8008eac:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8008eb0:	484c      	ldr	r0, [pc, #304]	; (8008fe4 <HAL_SPI_Init+0x200>)
 8008eb2:	f7fa f96a 	bl	800318a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	69db      	ldr	r3, [r3, #28]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d020      	beq.n	8008f00 <HAL_SPI_Init+0x11c>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	69db      	ldr	r3, [r3, #28]
 8008ec2:	2b08      	cmp	r3, #8
 8008ec4:	d01c      	beq.n	8008f00 <HAL_SPI_Init+0x11c>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	2b10      	cmp	r3, #16
 8008ecc:	d018      	beq.n	8008f00 <HAL_SPI_Init+0x11c>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	69db      	ldr	r3, [r3, #28]
 8008ed2:	2b18      	cmp	r3, #24
 8008ed4:	d014      	beq.n	8008f00 <HAL_SPI_Init+0x11c>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	69db      	ldr	r3, [r3, #28]
 8008eda:	2b20      	cmp	r3, #32
 8008edc:	d010      	beq.n	8008f00 <HAL_SPI_Init+0x11c>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	69db      	ldr	r3, [r3, #28]
 8008ee2:	2b28      	cmp	r3, #40	; 0x28
 8008ee4:	d00c      	beq.n	8008f00 <HAL_SPI_Init+0x11c>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	2b30      	cmp	r3, #48	; 0x30
 8008eec:	d008      	beq.n	8008f00 <HAL_SPI_Init+0x11c>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	69db      	ldr	r3, [r3, #28]
 8008ef2:	2b38      	cmp	r3, #56	; 0x38
 8008ef4:	d004      	beq.n	8008f00 <HAL_SPI_Init+0x11c>
 8008ef6:	f240 1145 	movw	r1, #325	; 0x145
 8008efa:	483a      	ldr	r0, [pc, #232]	; (8008fe4 <HAL_SPI_Init+0x200>)
 8008efc:	f7fa f945 	bl	800318a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a1b      	ldr	r3, [r3, #32]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d008      	beq.n	8008f1a <HAL_SPI_Init+0x136>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a1b      	ldr	r3, [r3, #32]
 8008f0c:	2b80      	cmp	r3, #128	; 0x80
 8008f0e:	d004      	beq.n	8008f1a <HAL_SPI_Init+0x136>
 8008f10:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8008f14:	4833      	ldr	r0, [pc, #204]	; (8008fe4 <HAL_SPI_Init+0x200>)
 8008f16:	f7fa f938 	bl	800318a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d008      	beq.n	8008f34 <HAL_SPI_Init+0x150>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f26:	2b10      	cmp	r3, #16
 8008f28:	d004      	beq.n	8008f34 <HAL_SPI_Init+0x150>
 8008f2a:	f240 1147 	movw	r1, #327	; 0x147
 8008f2e:	482d      	ldr	r0, [pc, #180]	; (8008fe4 <HAL_SPI_Init+0x200>)
 8008f30:	f7fa f92b 	bl	800318a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d155      	bne.n	8008fe8 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d008      	beq.n	8008f56 <HAL_SPI_Init+0x172>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d004      	beq.n	8008f56 <HAL_SPI_Init+0x172>
 8008f4c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8008f50:	4824      	ldr	r0, [pc, #144]	; (8008fe4 <HAL_SPI_Init+0x200>)
 8008f52:	f7fa f91a 	bl	800318a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	695b      	ldr	r3, [r3, #20]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d008      	beq.n	8008f70 <HAL_SPI_Init+0x18c>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	695b      	ldr	r3, [r3, #20]
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d004      	beq.n	8008f70 <HAL_SPI_Init+0x18c>
 8008f66:	f240 114b 	movw	r1, #331	; 0x14b
 8008f6a:	481e      	ldr	r0, [pc, #120]	; (8008fe4 <HAL_SPI_Init+0x200>)
 8008f6c:	f7fa f90d 	bl	800318a <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f78:	d125      	bne.n	8008fc6 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	69db      	ldr	r3, [r3, #28]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d05d      	beq.n	800903e <HAL_SPI_Init+0x25a>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	2b08      	cmp	r3, #8
 8008f88:	d059      	beq.n	800903e <HAL_SPI_Init+0x25a>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	69db      	ldr	r3, [r3, #28]
 8008f8e:	2b10      	cmp	r3, #16
 8008f90:	d055      	beq.n	800903e <HAL_SPI_Init+0x25a>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	69db      	ldr	r3, [r3, #28]
 8008f96:	2b18      	cmp	r3, #24
 8008f98:	d051      	beq.n	800903e <HAL_SPI_Init+0x25a>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	69db      	ldr	r3, [r3, #28]
 8008f9e:	2b20      	cmp	r3, #32
 8008fa0:	d04d      	beq.n	800903e <HAL_SPI_Init+0x25a>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	69db      	ldr	r3, [r3, #28]
 8008fa6:	2b28      	cmp	r3, #40	; 0x28
 8008fa8:	d049      	beq.n	800903e <HAL_SPI_Init+0x25a>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	2b30      	cmp	r3, #48	; 0x30
 8008fb0:	d045      	beq.n	800903e <HAL_SPI_Init+0x25a>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	69db      	ldr	r3, [r3, #28]
 8008fb6:	2b38      	cmp	r3, #56	; 0x38
 8008fb8:	d041      	beq.n	800903e <HAL_SPI_Init+0x25a>
 8008fba:	f240 114f 	movw	r1, #335	; 0x14f
 8008fbe:	4809      	ldr	r0, [pc, #36]	; (8008fe4 <HAL_SPI_Init+0x200>)
 8008fc0:	f7fa f8e3 	bl	800318a <assert_failed>
 8008fc4:	e03b      	b.n	800903e <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	61da      	str	r2, [r3, #28]
 8008fcc:	e037      	b.n	800903e <HAL_SPI_Init+0x25a>
 8008fce:	bf00      	nop
 8008fd0:	40013000 	.word	0x40013000
 8008fd4:	40003800 	.word	0x40003800
 8008fd8:	40003c00 	.word	0x40003c00
 8008fdc:	40013400 	.word	0x40013400
 8008fe0:	40015000 	.word	0x40015000
 8008fe4:	0800f11c 	.word	0x0800f11c
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	69db      	ldr	r3, [r3, #28]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d020      	beq.n	8009032 <HAL_SPI_Init+0x24e>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	69db      	ldr	r3, [r3, #28]
 8008ff4:	2b08      	cmp	r3, #8
 8008ff6:	d01c      	beq.n	8009032 <HAL_SPI_Init+0x24e>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	69db      	ldr	r3, [r3, #28]
 8008ffc:	2b10      	cmp	r3, #16
 8008ffe:	d018      	beq.n	8009032 <HAL_SPI_Init+0x24e>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	69db      	ldr	r3, [r3, #28]
 8009004:	2b18      	cmp	r3, #24
 8009006:	d014      	beq.n	8009032 <HAL_SPI_Init+0x24e>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	69db      	ldr	r3, [r3, #28]
 800900c:	2b20      	cmp	r3, #32
 800900e:	d010      	beq.n	8009032 <HAL_SPI_Init+0x24e>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	69db      	ldr	r3, [r3, #28]
 8009014:	2b28      	cmp	r3, #40	; 0x28
 8009016:	d00c      	beq.n	8009032 <HAL_SPI_Init+0x24e>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	69db      	ldr	r3, [r3, #28]
 800901c:	2b30      	cmp	r3, #48	; 0x30
 800901e:	d008      	beq.n	8009032 <HAL_SPI_Init+0x24e>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	69db      	ldr	r3, [r3, #28]
 8009024:	2b38      	cmp	r3, #56	; 0x38
 8009026:	d004      	beq.n	8009032 <HAL_SPI_Init+0x24e>
 8009028:	f240 1159 	movw	r1, #345	; 0x159
 800902c:	484a      	ldr	r0, [pc, #296]	; (8009158 <HAL_SPI_Init+0x374>)
 800902e:	f7fa f8ac 	bl	800318a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800904a:	b2db      	uxtb	r3, r3
 800904c:	2b00      	cmp	r3, #0
 800904e:	d126      	bne.n	800909e <HAL_SPI_Init+0x2ba>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a40      	ldr	r2, [pc, #256]	; (800915c <HAL_SPI_Init+0x378>)
 800905c:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a3f      	ldr	r2, [pc, #252]	; (8009160 <HAL_SPI_Init+0x37c>)
 8009062:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a3f      	ldr	r2, [pc, #252]	; (8009164 <HAL_SPI_Init+0x380>)
 8009068:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4a3e      	ldr	r2, [pc, #248]	; (8009168 <HAL_SPI_Init+0x384>)
 800906e:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a3e      	ldr	r2, [pc, #248]	; (800916c <HAL_SPI_Init+0x388>)
 8009074:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a3d      	ldr	r2, [pc, #244]	; (8009170 <HAL_SPI_Init+0x38c>)
 800907a:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a3d      	ldr	r2, [pc, #244]	; (8009174 <HAL_SPI_Init+0x390>)
 8009080:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a3c      	ldr	r2, [pc, #240]	; (8009178 <HAL_SPI_Init+0x394>)
 8009086:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800908c:	2b00      	cmp	r3, #0
 800908e:	d102      	bne.n	8009096 <HAL_SPI_Init+0x2b2>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4a3a      	ldr	r2, [pc, #232]	; (800917c <HAL_SPI_Init+0x398>)
 8009094:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2202      	movs	r2, #2
 80090a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090b4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80090c6:	431a      	orrs	r2, r3
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090d0:	431a      	orrs	r2, r3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	f003 0302 	and.w	r3, r3, #2
 80090da:	431a      	orrs	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	695b      	ldr	r3, [r3, #20]
 80090e0:	f003 0301 	and.w	r3, r3, #1
 80090e4:	431a      	orrs	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090ee:	431a      	orrs	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	69db      	ldr	r3, [r3, #28]
 80090f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090f8:	431a      	orrs	r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a1b      	ldr	r3, [r3, #32]
 80090fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009102:	ea42 0103 	orr.w	r1, r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800910a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	430a      	orrs	r2, r1
 8009114:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	699b      	ldr	r3, [r3, #24]
 800911a:	0c1b      	lsrs	r3, r3, #16
 800911c:	f003 0104 	and.w	r1, r3, #4
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009124:	f003 0210 	and.w	r2, r3, #16
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	430a      	orrs	r2, r1
 800912e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	69da      	ldr	r2, [r3, #28]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800913e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2201      	movs	r2, #1
 800914a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	0800f11c 	.word	0x0800f11c
 800915c:	08009381 	.word	0x08009381
 8009160:	08009395 	.word	0x08009395
 8009164:	080093a9 	.word	0x080093a9
 8009168:	080093bd 	.word	0x080093bd
 800916c:	080093d1 	.word	0x080093d1
 8009170:	080093e5 	.word	0x080093e5
 8009174:	080093f9 	.word	0x080093f9
 8009178:	0800940d 	.word	0x0800940d
 800917c:	0800320d 	.word	0x0800320d

08009180 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b088      	sub	sp, #32
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	099b      	lsrs	r3, r3, #6
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10f      	bne.n	80091c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00a      	beq.n	80091c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	099b      	lsrs	r3, r3, #6
 80091b2:	f003 0301 	and.w	r3, r3, #1
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d004      	beq.n	80091c4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	4798      	blx	r3
    return;
 80091c2:	e0d8      	b.n	8009376 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	085b      	lsrs	r3, r3, #1
 80091c8:	f003 0301 	and.w	r3, r3, #1
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00a      	beq.n	80091e6 <HAL_SPI_IRQHandler+0x66>
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	09db      	lsrs	r3, r3, #7
 80091d4:	f003 0301 	and.w	r3, r3, #1
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d004      	beq.n	80091e6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	4798      	blx	r3
    return;
 80091e4:	e0c7      	b.n	8009376 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	095b      	lsrs	r3, r3, #5
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10c      	bne.n	800920c <HAL_SPI_IRQHandler+0x8c>
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	099b      	lsrs	r3, r3, #6
 80091f6:	f003 0301 	and.w	r3, r3, #1
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d106      	bne.n	800920c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	0a1b      	lsrs	r3, r3, #8
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	2b00      	cmp	r3, #0
 8009208:	f000 80b5 	beq.w	8009376 <HAL_SPI_IRQHandler+0x1f6>
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	095b      	lsrs	r3, r3, #5
 8009210:	f003 0301 	and.w	r3, r3, #1
 8009214:	2b00      	cmp	r3, #0
 8009216:	f000 80ae 	beq.w	8009376 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	099b      	lsrs	r3, r3, #6
 800921e:	f003 0301 	and.w	r3, r3, #1
 8009222:	2b00      	cmp	r3, #0
 8009224:	d023      	beq.n	800926e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b03      	cmp	r3, #3
 8009230:	d011      	beq.n	8009256 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009236:	f043 0204 	orr.w	r2, r3, #4
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800923e:	2300      	movs	r3, #0
 8009240:	617b      	str	r3, [r7, #20]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	617b      	str	r3, [r7, #20]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	617b      	str	r3, [r7, #20]
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	e00b      	b.n	800926e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009256:	2300      	movs	r3, #0
 8009258:	613b      	str	r3, [r7, #16]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	613b      	str	r3, [r7, #16]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	613b      	str	r3, [r7, #16]
 800926a:	693b      	ldr	r3, [r7, #16]
        return;
 800926c:	e083      	b.n	8009376 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	095b      	lsrs	r3, r3, #5
 8009272:	f003 0301 	and.w	r3, r3, #1
 8009276:	2b00      	cmp	r3, #0
 8009278:	d014      	beq.n	80092a4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800927e:	f043 0201 	orr.w	r2, r3, #1
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009286:	2300      	movs	r3, #0
 8009288:	60fb      	str	r3, [r7, #12]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	60fb      	str	r3, [r7, #12]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092a0:	601a      	str	r2, [r3, #0]
 80092a2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	0a1b      	lsrs	r3, r3, #8
 80092a8:	f003 0301 	and.w	r3, r3, #1
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00c      	beq.n	80092ca <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092b4:	f043 0208 	orr.w	r2, r3, #8
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80092bc:	2300      	movs	r3, #0
 80092be:	60bb      	str	r3, [r7, #8]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	60bb      	str	r3, [r7, #8]
 80092c8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d050      	beq.n	8009374 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	685a      	ldr	r2, [r3, #4]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80092e0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	f003 0302 	and.w	r3, r3, #2
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d104      	bne.n	80092fe <HAL_SPI_IRQHandler+0x17e>
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d034      	beq.n	8009368 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	685a      	ldr	r2, [r3, #4]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f022 0203 	bic.w	r2, r2, #3
 800930c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009312:	2b00      	cmp	r3, #0
 8009314:	d011      	beq.n	800933a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800931a:	4a18      	ldr	r2, [pc, #96]	; (800937c <HAL_SPI_IRQHandler+0x1fc>)
 800931c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009322:	4618      	mov	r0, r3
 8009324:	f7fc f8c0 	bl	80054a8 <HAL_DMA_Abort_IT>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d005      	beq.n	800933a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009332:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800933e:	2b00      	cmp	r3, #0
 8009340:	d017      	beq.n	8009372 <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009346:	4a0d      	ldr	r2, [pc, #52]	; (800937c <HAL_SPI_IRQHandler+0x1fc>)
 8009348:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800934e:	4618      	mov	r0, r3
 8009350:	f7fc f8aa 	bl	80054a8 <HAL_DMA_Abort_IT>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00b      	beq.n	8009372 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800935e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009366:	e004      	b.n	8009372 <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009370:	e000      	b.n	8009374 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8009372:	bf00      	nop
    return;
 8009374:	bf00      	nop
  }
}
 8009376:	3720      	adds	r7, #32
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	08009421 	.word	0x08009421

08009380 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009388:	bf00      	nop
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800939c:	bf00      	nop
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80093b0:	bf00      	nop
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80093c4:	bf00      	nop
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80093ec:	bf00      	nop
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2200      	movs	r2, #0
 8009432:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009442:	bf00      	nop
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
	...

0800944c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d101      	bne.n	800945e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e0b2      	b.n	80095c4 <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a5a      	ldr	r2, [pc, #360]	; (80095cc <HAL_TIM_Base_Init+0x180>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d027      	beq.n	80094b8 <HAL_TIM_Base_Init+0x6c>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009470:	d022      	beq.n	80094b8 <HAL_TIM_Base_Init+0x6c>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a56      	ldr	r2, [pc, #344]	; (80095d0 <HAL_TIM_Base_Init+0x184>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d01d      	beq.n	80094b8 <HAL_TIM_Base_Init+0x6c>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a54      	ldr	r2, [pc, #336]	; (80095d4 <HAL_TIM_Base_Init+0x188>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d018      	beq.n	80094b8 <HAL_TIM_Base_Init+0x6c>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a53      	ldr	r2, [pc, #332]	; (80095d8 <HAL_TIM_Base_Init+0x18c>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d013      	beq.n	80094b8 <HAL_TIM_Base_Init+0x6c>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a51      	ldr	r2, [pc, #324]	; (80095dc <HAL_TIM_Base_Init+0x190>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d00e      	beq.n	80094b8 <HAL_TIM_Base_Init+0x6c>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a50      	ldr	r2, [pc, #320]	; (80095e0 <HAL_TIM_Base_Init+0x194>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d009      	beq.n	80094b8 <HAL_TIM_Base_Init+0x6c>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a4e      	ldr	r2, [pc, #312]	; (80095e4 <HAL_TIM_Base_Init+0x198>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d004      	beq.n	80094b8 <HAL_TIM_Base_Init+0x6c>
 80094ae:	f240 1113 	movw	r1, #275	; 0x113
 80094b2:	484d      	ldr	r0, [pc, #308]	; (80095e8 <HAL_TIM_Base_Init+0x19c>)
 80094b4:	f7f9 fe69 	bl	800318a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d014      	beq.n	80094ea <HAL_TIM_Base_Init+0x9e>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	2b10      	cmp	r3, #16
 80094c6:	d010      	beq.n	80094ea <HAL_TIM_Base_Init+0x9e>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	2b20      	cmp	r3, #32
 80094ce:	d00c      	beq.n	80094ea <HAL_TIM_Base_Init+0x9e>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	2b40      	cmp	r3, #64	; 0x40
 80094d6:	d008      	beq.n	80094ea <HAL_TIM_Base_Init+0x9e>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	2b60      	cmp	r3, #96	; 0x60
 80094de:	d004      	beq.n	80094ea <HAL_TIM_Base_Init+0x9e>
 80094e0:	f44f 718a 	mov.w	r1, #276	; 0x114
 80094e4:	4840      	ldr	r0, [pc, #256]	; (80095e8 <HAL_TIM_Base_Init+0x19c>)
 80094e6:	f7f9 fe50 	bl	800318a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00e      	beq.n	8009510 <HAL_TIM_Base_Init+0xc4>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094fa:	d009      	beq.n	8009510 <HAL_TIM_Base_Init+0xc4>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	691b      	ldr	r3, [r3, #16]
 8009500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009504:	d004      	beq.n	8009510 <HAL_TIM_Base_Init+0xc4>
 8009506:	f240 1115 	movw	r1, #277	; 0x115
 800950a:	4837      	ldr	r0, [pc, #220]	; (80095e8 <HAL_TIM_Base_Init+0x19c>)
 800950c:	f7f9 fe3d 	bl	800318a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	699b      	ldr	r3, [r3, #24]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d008      	beq.n	800952a <HAL_TIM_Base_Init+0xde>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	699b      	ldr	r3, [r3, #24]
 800951c:	2b80      	cmp	r3, #128	; 0x80
 800951e:	d004      	beq.n	800952a <HAL_TIM_Base_Init+0xde>
 8009520:	f44f 718b 	mov.w	r1, #278	; 0x116
 8009524:	4830      	ldr	r0, [pc, #192]	; (80095e8 <HAL_TIM_Base_Init+0x19c>)
 8009526:	f7f9 fe30 	bl	800318a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009530:	b2db      	uxtb	r3, r3
 8009532:	2b00      	cmp	r3, #0
 8009534:	d111      	bne.n	800955a <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 fefe 	bl	800a340 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009548:	2b00      	cmp	r3, #0
 800954a:	d102      	bne.n	8009552 <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a27      	ldr	r2, [pc, #156]	; (80095ec <HAL_TIM_Base_Init+0x1a0>)
 8009550:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2202      	movs	r2, #2
 800955e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	3304      	adds	r3, #4
 800956a:	4619      	mov	r1, r3
 800956c:	4610      	mov	r0, r2
 800956e:	f000 fdcd 	bl	800a10c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2201      	movs	r2, #1
 8009576:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2201      	movs	r2, #1
 800957e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2201      	movs	r2, #1
 8009586:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3708      	adds	r7, #8
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	40010000 	.word	0x40010000
 80095d0:	40000400 	.word	0x40000400
 80095d4:	40000800 	.word	0x40000800
 80095d8:	40000c00 	.word	0x40000c00
 80095dc:	40014000 	.word	0x40014000
 80095e0:	40014400 	.word	0x40014400
 80095e4:	40014800 	.word	0x40014800
 80095e8:	0800f190 	.word	0x0800f190
 80095ec:	080039b1 	.word	0x080039b1

080095f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a3d      	ldr	r2, [pc, #244]	; (80096f4 <HAL_TIM_Base_Start_IT+0x104>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d027      	beq.n	8009652 <HAL_TIM_Base_Start_IT+0x62>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800960a:	d022      	beq.n	8009652 <HAL_TIM_Base_Start_IT+0x62>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a39      	ldr	r2, [pc, #228]	; (80096f8 <HAL_TIM_Base_Start_IT+0x108>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d01d      	beq.n	8009652 <HAL_TIM_Base_Start_IT+0x62>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a38      	ldr	r2, [pc, #224]	; (80096fc <HAL_TIM_Base_Start_IT+0x10c>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d018      	beq.n	8009652 <HAL_TIM_Base_Start_IT+0x62>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a36      	ldr	r2, [pc, #216]	; (8009700 <HAL_TIM_Base_Start_IT+0x110>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d013      	beq.n	8009652 <HAL_TIM_Base_Start_IT+0x62>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a35      	ldr	r2, [pc, #212]	; (8009704 <HAL_TIM_Base_Start_IT+0x114>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d00e      	beq.n	8009652 <HAL_TIM_Base_Start_IT+0x62>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a33      	ldr	r2, [pc, #204]	; (8009708 <HAL_TIM_Base_Start_IT+0x118>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d009      	beq.n	8009652 <HAL_TIM_Base_Start_IT+0x62>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a32      	ldr	r2, [pc, #200]	; (800970c <HAL_TIM_Base_Start_IT+0x11c>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d004      	beq.n	8009652 <HAL_TIM_Base_Start_IT+0x62>
 8009648:	f240 11cf 	movw	r1, #463	; 0x1cf
 800964c:	4830      	ldr	r0, [pc, #192]	; (8009710 <HAL_TIM_Base_Start_IT+0x120>)
 800964e:	f7f9 fd9c 	bl	800318a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009658:	b2db      	uxtb	r3, r3
 800965a:	2b01      	cmp	r3, #1
 800965c:	d001      	beq.n	8009662 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	e044      	b.n	80096ec <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2202      	movs	r2, #2
 8009666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68da      	ldr	r2, [r3, #12]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f042 0201 	orr.w	r2, r2, #1
 8009678:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a1d      	ldr	r2, [pc, #116]	; (80096f4 <HAL_TIM_Base_Start_IT+0x104>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d018      	beq.n	80096b6 <HAL_TIM_Base_Start_IT+0xc6>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800968c:	d013      	beq.n	80096b6 <HAL_TIM_Base_Start_IT+0xc6>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a19      	ldr	r2, [pc, #100]	; (80096f8 <HAL_TIM_Base_Start_IT+0x108>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d00e      	beq.n	80096b6 <HAL_TIM_Base_Start_IT+0xc6>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a17      	ldr	r2, [pc, #92]	; (80096fc <HAL_TIM_Base_Start_IT+0x10c>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d009      	beq.n	80096b6 <HAL_TIM_Base_Start_IT+0xc6>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a16      	ldr	r2, [pc, #88]	; (8009700 <HAL_TIM_Base_Start_IT+0x110>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d004      	beq.n	80096b6 <HAL_TIM_Base_Start_IT+0xc6>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a14      	ldr	r2, [pc, #80]	; (8009704 <HAL_TIM_Base_Start_IT+0x114>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d111      	bne.n	80096da <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	f003 0307 	and.w	r3, r3, #7
 80096c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2b06      	cmp	r3, #6
 80096c6:	d010      	beq.n	80096ea <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f042 0201 	orr.w	r2, r2, #1
 80096d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096d8:	e007      	b.n	80096ea <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f042 0201 	orr.w	r2, r2, #1
 80096e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	40010000 	.word	0x40010000
 80096f8:	40000400 	.word	0x40000400
 80096fc:	40000800 	.word	0x40000800
 8009700:	40000c00 	.word	0x40000c00
 8009704:	40014000 	.word	0x40014000
 8009708:	40014400 	.word	0x40014400
 800970c:	40014800 	.word	0x40014800
 8009710:	0800f190 	.word	0x0800f190

08009714 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a29      	ldr	r2, [pc, #164]	; (80097c8 <HAL_TIM_Base_Stop_IT+0xb4>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d027      	beq.n	8009776 <HAL_TIM_Base_Stop_IT+0x62>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800972e:	d022      	beq.n	8009776 <HAL_TIM_Base_Stop_IT+0x62>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a25      	ldr	r2, [pc, #148]	; (80097cc <HAL_TIM_Base_Stop_IT+0xb8>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d01d      	beq.n	8009776 <HAL_TIM_Base_Stop_IT+0x62>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a24      	ldr	r2, [pc, #144]	; (80097d0 <HAL_TIM_Base_Stop_IT+0xbc>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d018      	beq.n	8009776 <HAL_TIM_Base_Stop_IT+0x62>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a22      	ldr	r2, [pc, #136]	; (80097d4 <HAL_TIM_Base_Stop_IT+0xc0>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d013      	beq.n	8009776 <HAL_TIM_Base_Stop_IT+0x62>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a21      	ldr	r2, [pc, #132]	; (80097d8 <HAL_TIM_Base_Stop_IT+0xc4>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d00e      	beq.n	8009776 <HAL_TIM_Base_Stop_IT+0x62>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a1f      	ldr	r2, [pc, #124]	; (80097dc <HAL_TIM_Base_Stop_IT+0xc8>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d009      	beq.n	8009776 <HAL_TIM_Base_Stop_IT+0x62>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a1e      	ldr	r2, [pc, #120]	; (80097e0 <HAL_TIM_Base_Stop_IT+0xcc>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d004      	beq.n	8009776 <HAL_TIM_Base_Stop_IT+0x62>
 800976c:	f240 11f7 	movw	r1, #503	; 0x1f7
 8009770:	481c      	ldr	r0, [pc, #112]	; (80097e4 <HAL_TIM_Base_Stop_IT+0xd0>)
 8009772:	f7f9 fd0a 	bl	800318a <assert_failed>

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	68da      	ldr	r2, [r3, #12]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f022 0201 	bic.w	r2, r2, #1
 8009784:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	6a1a      	ldr	r2, [r3, #32]
 800978c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009790:	4013      	ands	r3, r2
 8009792:	2b00      	cmp	r3, #0
 8009794:	d10f      	bne.n	80097b6 <HAL_TIM_Base_Stop_IT+0xa2>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	6a1a      	ldr	r2, [r3, #32]
 800979c:	f240 4344 	movw	r3, #1092	; 0x444
 80097a0:	4013      	ands	r3, r2
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d107      	bne.n	80097b6 <HAL_TIM_Base_Stop_IT+0xa2>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f022 0201 	bic.w	r2, r2, #1
 80097b4:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2201      	movs	r2, #1
 80097ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80097be:	2300      	movs	r3, #0
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	40010000 	.word	0x40010000
 80097cc:	40000400 	.word	0x40000400
 80097d0:	40000800 	.word	0x40000800
 80097d4:	40000c00 	.word	0x40000c00
 80097d8:	40014000 	.word	0x40014000
 80097dc:	40014400 	.word	0x40014400
 80097e0:	40014800 	.word	0x40014800
 80097e4:	0800f190 	.word	0x0800f190

080097e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	f003 0302 	and.w	r3, r3, #2
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d128      	bne.n	8009850 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	f003 0302 	and.w	r3, r3, #2
 8009808:	2b02      	cmp	r3, #2
 800980a:	d121      	bne.n	8009850 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f06f 0202 	mvn.w	r2, #2
 8009814:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2201      	movs	r2, #1
 800981a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	699b      	ldr	r3, [r3, #24]
 8009822:	f003 0303 	and.w	r3, r3, #3
 8009826:	2b00      	cmp	r3, #0
 8009828:	d005      	beq.n	8009836 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	4798      	blx	r3
 8009834:	e009      	b.n	800984a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	f003 0304 	and.w	r3, r3, #4
 800985a:	2b04      	cmp	r3, #4
 800985c:	d128      	bne.n	80098b0 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	f003 0304 	and.w	r3, r3, #4
 8009868:	2b04      	cmp	r3, #4
 800986a:	d121      	bne.n	80098b0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f06f 0204 	mvn.w	r2, #4
 8009874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2202      	movs	r2, #2
 800987a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	699b      	ldr	r3, [r3, #24]
 8009882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009886:	2b00      	cmp	r3, #0
 8009888:	d005      	beq.n	8009896 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	4798      	blx	r3
 8009894:	e009      	b.n	80098aa <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	f003 0308 	and.w	r3, r3, #8
 80098ba:	2b08      	cmp	r3, #8
 80098bc:	d128      	bne.n	8009910 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	f003 0308 	and.w	r3, r3, #8
 80098c8:	2b08      	cmp	r3, #8
 80098ca:	d121      	bne.n	8009910 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f06f 0208 	mvn.w	r2, #8
 80098d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2204      	movs	r2, #4
 80098da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	69db      	ldr	r3, [r3, #28]
 80098e2:	f003 0303 	and.w	r3, r3, #3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d005      	beq.n	80098f6 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	4798      	blx	r3
 80098f4:	e009      	b.n	800990a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	f003 0310 	and.w	r3, r3, #16
 800991a:	2b10      	cmp	r3, #16
 800991c:	d128      	bne.n	8009970 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	f003 0310 	and.w	r3, r3, #16
 8009928:	2b10      	cmp	r3, #16
 800992a:	d121      	bne.n	8009970 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f06f 0210 	mvn.w	r2, #16
 8009934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2208      	movs	r2, #8
 800993a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	69db      	ldr	r3, [r3, #28]
 8009942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009946:	2b00      	cmp	r3, #0
 8009948:	d005      	beq.n	8009956 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	4798      	blx	r3
 8009954:	e009      	b.n	800996a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	f003 0301 	and.w	r3, r3, #1
 800997a:	2b01      	cmp	r3, #1
 800997c:	d110      	bne.n	80099a0 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	f003 0301 	and.w	r3, r3, #1
 8009988:	2b01      	cmp	r3, #1
 800998a:	d109      	bne.n	80099a0 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f06f 0201 	mvn.w	r2, #1
 8009994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099aa:	2b80      	cmp	r3, #128	; 0x80
 80099ac:	d110      	bne.n	80099d0 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099b8:	2b80      	cmp	r3, #128	; 0x80
 80099ba:	d109      	bne.n	80099d0 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80099c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099da:	2b40      	cmp	r3, #64	; 0x40
 80099dc:	d110      	bne.n	8009a00 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099e8:	2b40      	cmp	r3, #64	; 0x40
 80099ea:	d109      	bne.n	8009a00 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80099f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	f003 0320 	and.w	r3, r3, #32
 8009a0a:	2b20      	cmp	r3, #32
 8009a0c:	d110      	bne.n	8009a30 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	f003 0320 	and.w	r3, r3, #32
 8009a18:	2b20      	cmp	r3, #32
 8009a1a:	d109      	bne.n	8009a30 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f06f 0220 	mvn.w	r2, #32
 8009a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a30:	bf00      	nop
 8009a32:	3708      	adds	r7, #8
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d101      	bne.n	8009a54 <HAL_TIM_ConfigClockSource+0x1c>
 8009a50:	2302      	movs	r3, #2
 8009a52:	e2f0      	b.n	800a036 <HAL_TIM_ConfigClockSource+0x5fe>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a6c:	d029      	beq.n	8009ac2 <HAL_TIM_ConfigClockSource+0x8a>
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2b70      	cmp	r3, #112	; 0x70
 8009a74:	d025      	beq.n	8009ac2 <HAL_TIM_ConfigClockSource+0x8a>
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a7e:	d020      	beq.n	8009ac2 <HAL_TIM_ConfigClockSource+0x8a>
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2b40      	cmp	r3, #64	; 0x40
 8009a86:	d01c      	beq.n	8009ac2 <HAL_TIM_ConfigClockSource+0x8a>
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2b50      	cmp	r3, #80	; 0x50
 8009a8e:	d018      	beq.n	8009ac2 <HAL_TIM_ConfigClockSource+0x8a>
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2b60      	cmp	r3, #96	; 0x60
 8009a96:	d014      	beq.n	8009ac2 <HAL_TIM_ConfigClockSource+0x8a>
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d010      	beq.n	8009ac2 <HAL_TIM_ConfigClockSource+0x8a>
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2b10      	cmp	r3, #16
 8009aa6:	d00c      	beq.n	8009ac2 <HAL_TIM_ConfigClockSource+0x8a>
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2b20      	cmp	r3, #32
 8009aae:	d008      	beq.n	8009ac2 <HAL_TIM_ConfigClockSource+0x8a>
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2b30      	cmp	r3, #48	; 0x30
 8009ab6:	d004      	beq.n	8009ac2 <HAL_TIM_ConfigClockSource+0x8a>
 8009ab8:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8009abc:	487c      	ldr	r0, [pc, #496]	; (8009cb0 <HAL_TIM_ConfigClockSource+0x278>)
 8009abe:	f7f9 fb64 	bl	800318a <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009ad0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ad8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aea:	f000 80f1 	beq.w	8009cd0 <HAL_TIM_ConfigClockSource+0x298>
 8009aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009af2:	f200 8293 	bhi.w	800a01c <HAL_TIM_ConfigClockSource+0x5e4>
 8009af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009afa:	d02d      	beq.n	8009b58 <HAL_TIM_ConfigClockSource+0x120>
 8009afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b00:	f200 828c 	bhi.w	800a01c <HAL_TIM_ConfigClockSource+0x5e4>
 8009b04:	2b70      	cmp	r3, #112	; 0x70
 8009b06:	d05d      	beq.n	8009bc4 <HAL_TIM_ConfigClockSource+0x18c>
 8009b08:	2b70      	cmp	r3, #112	; 0x70
 8009b0a:	f200 8287 	bhi.w	800a01c <HAL_TIM_ConfigClockSource+0x5e4>
 8009b0e:	2b60      	cmp	r3, #96	; 0x60
 8009b10:	f000 81a0 	beq.w	8009e54 <HAL_TIM_ConfigClockSource+0x41c>
 8009b14:	2b60      	cmp	r3, #96	; 0x60
 8009b16:	f200 8281 	bhi.w	800a01c <HAL_TIM_ConfigClockSource+0x5e4>
 8009b1a:	2b50      	cmp	r3, #80	; 0x50
 8009b1c:	f000 8144 	beq.w	8009da8 <HAL_TIM_ConfigClockSource+0x370>
 8009b20:	2b50      	cmp	r3, #80	; 0x50
 8009b22:	f200 827b 	bhi.w	800a01c <HAL_TIM_ConfigClockSource+0x5e4>
 8009b26:	2b40      	cmp	r3, #64	; 0x40
 8009b28:	f000 81f6 	beq.w	8009f18 <HAL_TIM_ConfigClockSource+0x4e0>
 8009b2c:	2b40      	cmp	r3, #64	; 0x40
 8009b2e:	f200 8275 	bhi.w	800a01c <HAL_TIM_ConfigClockSource+0x5e4>
 8009b32:	2b30      	cmp	r3, #48	; 0x30
 8009b34:	f000 8246 	beq.w	8009fc4 <HAL_TIM_ConfigClockSource+0x58c>
 8009b38:	2b30      	cmp	r3, #48	; 0x30
 8009b3a:	f200 826f 	bhi.w	800a01c <HAL_TIM_ConfigClockSource+0x5e4>
 8009b3e:	2b20      	cmp	r3, #32
 8009b40:	f000 8240 	beq.w	8009fc4 <HAL_TIM_ConfigClockSource+0x58c>
 8009b44:	2b20      	cmp	r3, #32
 8009b46:	f200 8269 	bhi.w	800a01c <HAL_TIM_ConfigClockSource+0x5e4>
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f000 823a 	beq.w	8009fc4 <HAL_TIM_ConfigClockSource+0x58c>
 8009b50:	2b10      	cmp	r3, #16
 8009b52:	f000 8237 	beq.w	8009fc4 <HAL_TIM_ConfigClockSource+0x58c>
 8009b56:	e261      	b.n	800a01c <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a55      	ldr	r2, [pc, #340]	; (8009cb4 <HAL_TIM_ConfigClockSource+0x27c>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	f000 825f 	beq.w	800a022 <HAL_TIM_ConfigClockSource+0x5ea>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b6c:	f000 8259 	beq.w	800a022 <HAL_TIM_ConfigClockSource+0x5ea>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a50      	ldr	r2, [pc, #320]	; (8009cb8 <HAL_TIM_ConfigClockSource+0x280>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	f000 8253 	beq.w	800a022 <HAL_TIM_ConfigClockSource+0x5ea>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a4e      	ldr	r2, [pc, #312]	; (8009cbc <HAL_TIM_ConfigClockSource+0x284>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	f000 824d 	beq.w	800a022 <HAL_TIM_ConfigClockSource+0x5ea>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a4c      	ldr	r2, [pc, #304]	; (8009cc0 <HAL_TIM_ConfigClockSource+0x288>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	f000 8247 	beq.w	800a022 <HAL_TIM_ConfigClockSource+0x5ea>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a4a      	ldr	r2, [pc, #296]	; (8009cc4 <HAL_TIM_ConfigClockSource+0x28c>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	f000 8241 	beq.w	800a022 <HAL_TIM_ConfigClockSource+0x5ea>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a48      	ldr	r2, [pc, #288]	; (8009cc8 <HAL_TIM_ConfigClockSource+0x290>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	f000 823b 	beq.w	800a022 <HAL_TIM_ConfigClockSource+0x5ea>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a46      	ldr	r2, [pc, #280]	; (8009ccc <HAL_TIM_ConfigClockSource+0x294>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	f000 8235 	beq.w	800a022 <HAL_TIM_ConfigClockSource+0x5ea>
 8009bb8:	f241 41c3 	movw	r1, #5315	; 0x14c3
 8009bbc:	483c      	ldr	r0, [pc, #240]	; (8009cb0 <HAL_TIM_ConfigClockSource+0x278>)
 8009bbe:	f7f9 fae4 	bl	800318a <assert_failed>
      break;
 8009bc2:	e22e      	b.n	800a022 <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a3a      	ldr	r2, [pc, #232]	; (8009cb4 <HAL_TIM_ConfigClockSource+0x27c>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d01d      	beq.n	8009c0a <HAL_TIM_ConfigClockSource+0x1d2>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bd6:	d018      	beq.n	8009c0a <HAL_TIM_ConfigClockSource+0x1d2>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a36      	ldr	r2, [pc, #216]	; (8009cb8 <HAL_TIM_ConfigClockSource+0x280>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d013      	beq.n	8009c0a <HAL_TIM_ConfigClockSource+0x1d2>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a35      	ldr	r2, [pc, #212]	; (8009cbc <HAL_TIM_ConfigClockSource+0x284>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d00e      	beq.n	8009c0a <HAL_TIM_ConfigClockSource+0x1d2>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a33      	ldr	r2, [pc, #204]	; (8009cc0 <HAL_TIM_ConfigClockSource+0x288>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d009      	beq.n	8009c0a <HAL_TIM_ConfigClockSource+0x1d2>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a32      	ldr	r2, [pc, #200]	; (8009cc4 <HAL_TIM_ConfigClockSource+0x28c>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d004      	beq.n	8009c0a <HAL_TIM_ConfigClockSource+0x1d2>
 8009c00:	f241 41ca 	movw	r1, #5322	; 0x14ca
 8009c04:	482a      	ldr	r0, [pc, #168]	; (8009cb0 <HAL_TIM_ConfigClockSource+0x278>)
 8009c06:	f7f9 fac0 	bl	800318a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d013      	beq.n	8009c3a <HAL_TIM_ConfigClockSource+0x202>
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c1a:	d00e      	beq.n	8009c3a <HAL_TIM_ConfigClockSource+0x202>
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c24:	d009      	beq.n	8009c3a <HAL_TIM_ConfigClockSource+0x202>
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c2e:	d004      	beq.n	8009c3a <HAL_TIM_ConfigClockSource+0x202>
 8009c30:	f241 41cd 	movw	r1, #5325	; 0x14cd
 8009c34:	481e      	ldr	r0, [pc, #120]	; (8009cb0 <HAL_TIM_ConfigClockSource+0x278>)
 8009c36:	f7f9 faa8 	bl	800318a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c42:	d014      	beq.n	8009c6e <HAL_TIM_ConfigClockSource+0x236>
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d010      	beq.n	8009c6e <HAL_TIM_ConfigClockSource+0x236>
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d00c      	beq.n	8009c6e <HAL_TIM_ConfigClockSource+0x236>
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d008      	beq.n	8009c6e <HAL_TIM_ConfigClockSource+0x236>
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	2b0a      	cmp	r3, #10
 8009c62:	d004      	beq.n	8009c6e <HAL_TIM_ConfigClockSource+0x236>
 8009c64:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8009c68:	4811      	ldr	r0, [pc, #68]	; (8009cb0 <HAL_TIM_ConfigClockSource+0x278>)
 8009c6a:	f7f9 fa8e 	bl	800318a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	2b0f      	cmp	r3, #15
 8009c74:	d904      	bls.n	8009c80 <HAL_TIM_ConfigClockSource+0x248>
 8009c76:	f241 41cf 	movw	r1, #5327	; 0x14cf
 8009c7a:	480d      	ldr	r0, [pc, #52]	; (8009cb0 <HAL_TIM_ConfigClockSource+0x278>)
 8009c7c:	f7f9 fa85 	bl	800318a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6818      	ldr	r0, [r3, #0]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	6899      	ldr	r1, [r3, #8]
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	685a      	ldr	r2, [r3, #4]
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	f000 fb36 	bl	800a300 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	689b      	ldr	r3, [r3, #8]
 8009c9a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009ca2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68ba      	ldr	r2, [r7, #8]
 8009caa:	609a      	str	r2, [r3, #8]
      break;
 8009cac:	e1ba      	b.n	800a024 <HAL_TIM_ConfigClockSource+0x5ec>
 8009cae:	bf00      	nop
 8009cb0:	0800f190 	.word	0x0800f190
 8009cb4:	40010000 	.word	0x40010000
 8009cb8:	40000400 	.word	0x40000400
 8009cbc:	40000800 	.word	0x40000800
 8009cc0:	40000c00 	.word	0x40000c00
 8009cc4:	40014000 	.word	0x40014000
 8009cc8:	40014400 	.word	0x40014400
 8009ccc:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a8a      	ldr	r2, [pc, #552]	; (8009f00 <HAL_TIM_ConfigClockSource+0x4c8>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d018      	beq.n	8009d0c <HAL_TIM_ConfigClockSource+0x2d4>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ce2:	d013      	beq.n	8009d0c <HAL_TIM_ConfigClockSource+0x2d4>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a86      	ldr	r2, [pc, #536]	; (8009f04 <HAL_TIM_ConfigClockSource+0x4cc>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d00e      	beq.n	8009d0c <HAL_TIM_ConfigClockSource+0x2d4>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a85      	ldr	r2, [pc, #532]	; (8009f08 <HAL_TIM_ConfigClockSource+0x4d0>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d009      	beq.n	8009d0c <HAL_TIM_ConfigClockSource+0x2d4>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a83      	ldr	r2, [pc, #524]	; (8009f0c <HAL_TIM_ConfigClockSource+0x4d4>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d004      	beq.n	8009d0c <HAL_TIM_ConfigClockSource+0x2d4>
 8009d02:	f241 41e2 	movw	r1, #5346	; 0x14e2
 8009d06:	4882      	ldr	r0, [pc, #520]	; (8009f10 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009d08:	f7f9 fa3f 	bl	800318a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d013      	beq.n	8009d3c <HAL_TIM_ConfigClockSource+0x304>
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d1c:	d00e      	beq.n	8009d3c <HAL_TIM_ConfigClockSource+0x304>
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d26:	d009      	beq.n	8009d3c <HAL_TIM_ConfigClockSource+0x304>
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009d30:	d004      	beq.n	8009d3c <HAL_TIM_ConfigClockSource+0x304>
 8009d32:	f241 41e5 	movw	r1, #5349	; 0x14e5
 8009d36:	4876      	ldr	r0, [pc, #472]	; (8009f10 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009d38:	f7f9 fa27 	bl	800318a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d44:	d014      	beq.n	8009d70 <HAL_TIM_ConfigClockSource+0x338>
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d010      	beq.n	8009d70 <HAL_TIM_ConfigClockSource+0x338>
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d00c      	beq.n	8009d70 <HAL_TIM_ConfigClockSource+0x338>
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d008      	beq.n	8009d70 <HAL_TIM_ConfigClockSource+0x338>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	2b0a      	cmp	r3, #10
 8009d64:	d004      	beq.n	8009d70 <HAL_TIM_ConfigClockSource+0x338>
 8009d66:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8009d6a:	4869      	ldr	r0, [pc, #420]	; (8009f10 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009d6c:	f7f9 fa0d 	bl	800318a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	2b0f      	cmp	r3, #15
 8009d76:	d904      	bls.n	8009d82 <HAL_TIM_ConfigClockSource+0x34a>
 8009d78:	f241 41e7 	movw	r1, #5351	; 0x14e7
 8009d7c:	4864      	ldr	r0, [pc, #400]	; (8009f10 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009d7e:	f7f9 fa04 	bl	800318a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6818      	ldr	r0, [r3, #0]
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	6899      	ldr	r1, [r3, #8]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	685a      	ldr	r2, [r3, #4]
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	f000 fab5 	bl	800a300 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	689a      	ldr	r2, [r3, #8]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009da4:	609a      	str	r2, [r3, #8]
      break;
 8009da6:	e13d      	b.n	800a024 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a54      	ldr	r2, [pc, #336]	; (8009f00 <HAL_TIM_ConfigClockSource+0x4c8>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d01d      	beq.n	8009dee <HAL_TIM_ConfigClockSource+0x3b6>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dba:	d018      	beq.n	8009dee <HAL_TIM_ConfigClockSource+0x3b6>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a50      	ldr	r2, [pc, #320]	; (8009f04 <HAL_TIM_ConfigClockSource+0x4cc>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d013      	beq.n	8009dee <HAL_TIM_ConfigClockSource+0x3b6>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a4f      	ldr	r2, [pc, #316]	; (8009f08 <HAL_TIM_ConfigClockSource+0x4d0>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d00e      	beq.n	8009dee <HAL_TIM_ConfigClockSource+0x3b6>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a4d      	ldr	r2, [pc, #308]	; (8009f0c <HAL_TIM_ConfigClockSource+0x4d4>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d009      	beq.n	8009dee <HAL_TIM_ConfigClockSource+0x3b6>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a4d      	ldr	r2, [pc, #308]	; (8009f14 <HAL_TIM_ConfigClockSource+0x4dc>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d004      	beq.n	8009dee <HAL_TIM_ConfigClockSource+0x3b6>
 8009de4:	f241 41f6 	movw	r1, #5366	; 0x14f6
 8009de8:	4849      	ldr	r0, [pc, #292]	; (8009f10 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009dea:	f7f9 f9ce 	bl	800318a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009df6:	d014      	beq.n	8009e22 <HAL_TIM_ConfigClockSource+0x3ea>
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d010      	beq.n	8009e22 <HAL_TIM_ConfigClockSource+0x3ea>
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00c      	beq.n	8009e22 <HAL_TIM_ConfigClockSource+0x3ea>
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d008      	beq.n	8009e22 <HAL_TIM_ConfigClockSource+0x3ea>
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	2b0a      	cmp	r3, #10
 8009e16:	d004      	beq.n	8009e22 <HAL_TIM_ConfigClockSource+0x3ea>
 8009e18:	f241 41f9 	movw	r1, #5369	; 0x14f9
 8009e1c:	483c      	ldr	r0, [pc, #240]	; (8009f10 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009e1e:	f7f9 f9b4 	bl	800318a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	2b0f      	cmp	r3, #15
 8009e28:	d904      	bls.n	8009e34 <HAL_TIM_ConfigClockSource+0x3fc>
 8009e2a:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8009e2e:	4838      	ldr	r0, [pc, #224]	; (8009f10 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009e30:	f7f9 f9ab 	bl	800318a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6818      	ldr	r0, [r3, #0]
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	6859      	ldr	r1, [r3, #4]
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	461a      	mov	r2, r3
 8009e42:	f000 f9e3 	bl	800a20c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2150      	movs	r1, #80	; 0x50
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f000 fa3c 	bl	800a2ca <TIM_ITRx_SetConfig>
      break;
 8009e52:	e0e7      	b.n	800a024 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a29      	ldr	r2, [pc, #164]	; (8009f00 <HAL_TIM_ConfigClockSource+0x4c8>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d01d      	beq.n	8009e9a <HAL_TIM_ConfigClockSource+0x462>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e66:	d018      	beq.n	8009e9a <HAL_TIM_ConfigClockSource+0x462>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a25      	ldr	r2, [pc, #148]	; (8009f04 <HAL_TIM_ConfigClockSource+0x4cc>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d013      	beq.n	8009e9a <HAL_TIM_ConfigClockSource+0x462>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a24      	ldr	r2, [pc, #144]	; (8009f08 <HAL_TIM_ConfigClockSource+0x4d0>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d00e      	beq.n	8009e9a <HAL_TIM_ConfigClockSource+0x462>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a22      	ldr	r2, [pc, #136]	; (8009f0c <HAL_TIM_ConfigClockSource+0x4d4>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d009      	beq.n	8009e9a <HAL_TIM_ConfigClockSource+0x462>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a22      	ldr	r2, [pc, #136]	; (8009f14 <HAL_TIM_ConfigClockSource+0x4dc>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d004      	beq.n	8009e9a <HAL_TIM_ConfigClockSource+0x462>
 8009e90:	f241 5106 	movw	r1, #5382	; 0x1506
 8009e94:	481e      	ldr	r0, [pc, #120]	; (8009f10 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009e96:	f7f9 f978 	bl	800318a <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ea2:	d014      	beq.n	8009ece <HAL_TIM_ConfigClockSource+0x496>
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d010      	beq.n	8009ece <HAL_TIM_ConfigClockSource+0x496>
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00c      	beq.n	8009ece <HAL_TIM_ConfigClockSource+0x496>
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d008      	beq.n	8009ece <HAL_TIM_ConfigClockSource+0x496>
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	2b0a      	cmp	r3, #10
 8009ec2:	d004      	beq.n	8009ece <HAL_TIM_ConfigClockSource+0x496>
 8009ec4:	f241 5109 	movw	r1, #5385	; 0x1509
 8009ec8:	4811      	ldr	r0, [pc, #68]	; (8009f10 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009eca:	f7f9 f95e 	bl	800318a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	2b0f      	cmp	r3, #15
 8009ed4:	d904      	bls.n	8009ee0 <HAL_TIM_ConfigClockSource+0x4a8>
 8009ed6:	f241 510a 	movw	r1, #5386	; 0x150a
 8009eda:	480d      	ldr	r0, [pc, #52]	; (8009f10 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009edc:	f7f9 f955 	bl	800318a <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6818      	ldr	r0, [r3, #0]
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	6859      	ldr	r1, [r3, #4]
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	461a      	mov	r2, r3
 8009eee:	f000 f9bc 	bl	800a26a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2160      	movs	r1, #96	; 0x60
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 f9e6 	bl	800a2ca <TIM_ITRx_SetConfig>
      break;
 8009efe:	e091      	b.n	800a024 <HAL_TIM_ConfigClockSource+0x5ec>
 8009f00:	40010000 	.word	0x40010000
 8009f04:	40000400 	.word	0x40000400
 8009f08:	40000800 	.word	0x40000800
 8009f0c:	40000c00 	.word	0x40000c00
 8009f10:	0800f190 	.word	0x0800f190
 8009f14:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a48      	ldr	r2, [pc, #288]	; (800a040 <HAL_TIM_ConfigClockSource+0x608>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d01d      	beq.n	8009f5e <HAL_TIM_ConfigClockSource+0x526>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f2a:	d018      	beq.n	8009f5e <HAL_TIM_ConfigClockSource+0x526>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a44      	ldr	r2, [pc, #272]	; (800a044 <HAL_TIM_ConfigClockSource+0x60c>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d013      	beq.n	8009f5e <HAL_TIM_ConfigClockSource+0x526>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a43      	ldr	r2, [pc, #268]	; (800a048 <HAL_TIM_ConfigClockSource+0x610>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d00e      	beq.n	8009f5e <HAL_TIM_ConfigClockSource+0x526>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a41      	ldr	r2, [pc, #260]	; (800a04c <HAL_TIM_ConfigClockSource+0x614>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d009      	beq.n	8009f5e <HAL_TIM_ConfigClockSource+0x526>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a40      	ldr	r2, [pc, #256]	; (800a050 <HAL_TIM_ConfigClockSource+0x618>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d004      	beq.n	8009f5e <HAL_TIM_ConfigClockSource+0x526>
 8009f54:	f241 5116 	movw	r1, #5398	; 0x1516
 8009f58:	483e      	ldr	r0, [pc, #248]	; (800a054 <HAL_TIM_ConfigClockSource+0x61c>)
 8009f5a:	f7f9 f916 	bl	800318a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f66:	d014      	beq.n	8009f92 <HAL_TIM_ConfigClockSource+0x55a>
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d010      	beq.n	8009f92 <HAL_TIM_ConfigClockSource+0x55a>
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00c      	beq.n	8009f92 <HAL_TIM_ConfigClockSource+0x55a>
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d008      	beq.n	8009f92 <HAL_TIM_ConfigClockSource+0x55a>
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	2b0a      	cmp	r3, #10
 8009f86:	d004      	beq.n	8009f92 <HAL_TIM_ConfigClockSource+0x55a>
 8009f88:	f241 5119 	movw	r1, #5401	; 0x1519
 8009f8c:	4831      	ldr	r0, [pc, #196]	; (800a054 <HAL_TIM_ConfigClockSource+0x61c>)
 8009f8e:	f7f9 f8fc 	bl	800318a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	2b0f      	cmp	r3, #15
 8009f98:	d904      	bls.n	8009fa4 <HAL_TIM_ConfigClockSource+0x56c>
 8009f9a:	f241 511a 	movw	r1, #5402	; 0x151a
 8009f9e:	482d      	ldr	r0, [pc, #180]	; (800a054 <HAL_TIM_ConfigClockSource+0x61c>)
 8009fa0:	f7f9 f8f3 	bl	800318a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6818      	ldr	r0, [r3, #0]
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	6859      	ldr	r1, [r3, #4]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	f000 f92b 	bl	800a20c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2140      	movs	r1, #64	; 0x40
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f000 f984 	bl	800a2ca <TIM_ITRx_SetConfig>
      break;
 8009fc2:	e02f      	b.n	800a024 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a1d      	ldr	r2, [pc, #116]	; (800a040 <HAL_TIM_ConfigClockSource+0x608>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d01d      	beq.n	800a00a <HAL_TIM_ConfigClockSource+0x5d2>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fd6:	d018      	beq.n	800a00a <HAL_TIM_ConfigClockSource+0x5d2>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a19      	ldr	r2, [pc, #100]	; (800a044 <HAL_TIM_ConfigClockSource+0x60c>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d013      	beq.n	800a00a <HAL_TIM_ConfigClockSource+0x5d2>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a18      	ldr	r2, [pc, #96]	; (800a048 <HAL_TIM_ConfigClockSource+0x610>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d00e      	beq.n	800a00a <HAL_TIM_ConfigClockSource+0x5d2>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a16      	ldr	r2, [pc, #88]	; (800a04c <HAL_TIM_ConfigClockSource+0x614>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d009      	beq.n	800a00a <HAL_TIM_ConfigClockSource+0x5d2>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a15      	ldr	r2, [pc, #84]	; (800a050 <HAL_TIM_ConfigClockSource+0x618>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d004      	beq.n	800a00a <HAL_TIM_ConfigClockSource+0x5d2>
 800a000:	f241 5129 	movw	r1, #5417	; 0x1529
 800a004:	4813      	ldr	r0, [pc, #76]	; (800a054 <HAL_TIM_ConfigClockSource+0x61c>)
 800a006:	f7f9 f8c0 	bl	800318a <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4619      	mov	r1, r3
 800a014:	4610      	mov	r0, r2
 800a016:	f000 f958 	bl	800a2ca <TIM_ITRx_SetConfig>
      break;
 800a01a:	e003      	b.n	800a024 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	73fb      	strb	r3, [r7, #15]
      break;
 800a020:	e000      	b.n	800a024 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 800a022:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a034:	7bfb      	ldrb	r3, [r7, #15]
}
 800a036:	4618      	mov	r0, r3
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	40010000 	.word	0x40010000
 800a044:	40000400 	.word	0x40000400
 800a048:	40000800 	.word	0x40000800
 800a04c:	40000c00 	.word	0x40000c00
 800a050:	40014000 	.word	0x40014000
 800a054:	0800f190 	.word	0x0800f190

0800a058 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a060:	bf00      	nop
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a074:	bf00      	nop
 800a076:	370c      	adds	r7, #12
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a09c:	bf00      	nop
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a0b0:	bf00      	nop
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a0c4:	bf00      	nop
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0d8:	bf00      	nop
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4a34      	ldr	r2, [pc, #208]	; (800a1f0 <TIM_Base_SetConfig+0xe4>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d00f      	beq.n	800a144 <TIM_Base_SetConfig+0x38>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a12a:	d00b      	beq.n	800a144 <TIM_Base_SetConfig+0x38>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a31      	ldr	r2, [pc, #196]	; (800a1f4 <TIM_Base_SetConfig+0xe8>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d007      	beq.n	800a144 <TIM_Base_SetConfig+0x38>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a30      	ldr	r2, [pc, #192]	; (800a1f8 <TIM_Base_SetConfig+0xec>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d003      	beq.n	800a144 <TIM_Base_SetConfig+0x38>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a2f      	ldr	r2, [pc, #188]	; (800a1fc <TIM_Base_SetConfig+0xf0>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d108      	bne.n	800a156 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a14a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	4313      	orrs	r3, r2
 800a154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a25      	ldr	r2, [pc, #148]	; (800a1f0 <TIM_Base_SetConfig+0xe4>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d01b      	beq.n	800a196 <TIM_Base_SetConfig+0x8a>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a164:	d017      	beq.n	800a196 <TIM_Base_SetConfig+0x8a>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4a22      	ldr	r2, [pc, #136]	; (800a1f4 <TIM_Base_SetConfig+0xe8>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d013      	beq.n	800a196 <TIM_Base_SetConfig+0x8a>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4a21      	ldr	r2, [pc, #132]	; (800a1f8 <TIM_Base_SetConfig+0xec>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d00f      	beq.n	800a196 <TIM_Base_SetConfig+0x8a>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4a20      	ldr	r2, [pc, #128]	; (800a1fc <TIM_Base_SetConfig+0xf0>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d00b      	beq.n	800a196 <TIM_Base_SetConfig+0x8a>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4a1f      	ldr	r2, [pc, #124]	; (800a200 <TIM_Base_SetConfig+0xf4>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d007      	beq.n	800a196 <TIM_Base_SetConfig+0x8a>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a1e      	ldr	r2, [pc, #120]	; (800a204 <TIM_Base_SetConfig+0xf8>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d003      	beq.n	800a196 <TIM_Base_SetConfig+0x8a>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4a1d      	ldr	r2, [pc, #116]	; (800a208 <TIM_Base_SetConfig+0xfc>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d108      	bne.n	800a1a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a19c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	695b      	ldr	r3, [r3, #20]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	689a      	ldr	r2, [r3, #8]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4a08      	ldr	r2, [pc, #32]	; (800a1f0 <TIM_Base_SetConfig+0xe4>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d103      	bne.n	800a1dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	691a      	ldr	r2, [r3, #16]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	615a      	str	r2, [r3, #20]
}
 800a1e2:	bf00      	nop
 800a1e4:	3714      	adds	r7, #20
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop
 800a1f0:	40010000 	.word	0x40010000
 800a1f4:	40000400 	.word	0x40000400
 800a1f8:	40000800 	.word	0x40000800
 800a1fc:	40000c00 	.word	0x40000c00
 800a200:	40014000 	.word	0x40014000
 800a204:	40014400 	.word	0x40014400
 800a208:	40014800 	.word	0x40014800

0800a20c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b087      	sub	sp, #28
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6a1b      	ldr	r3, [r3, #32]
 800a21c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6a1b      	ldr	r3, [r3, #32]
 800a222:	f023 0201 	bic.w	r2, r3, #1
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	699b      	ldr	r3, [r3, #24]
 800a22e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	011b      	lsls	r3, r3, #4
 800a23c:	693a      	ldr	r2, [r7, #16]
 800a23e:	4313      	orrs	r3, r2
 800a240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	f023 030a 	bic.w	r3, r3, #10
 800a248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a24a:	697a      	ldr	r2, [r7, #20]
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	4313      	orrs	r3, r2
 800a250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	697a      	ldr	r2, [r7, #20]
 800a25c:	621a      	str	r2, [r3, #32]
}
 800a25e:	bf00      	nop
 800a260:	371c      	adds	r7, #28
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr

0800a26a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a26a:	b480      	push	{r7}
 800a26c:	b087      	sub	sp, #28
 800a26e:	af00      	add	r7, sp, #0
 800a270:	60f8      	str	r0, [r7, #12]
 800a272:	60b9      	str	r1, [r7, #8]
 800a274:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6a1b      	ldr	r3, [r3, #32]
 800a27a:	f023 0210 	bic.w	r2, r3, #16
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	699b      	ldr	r3, [r3, #24]
 800a286:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6a1b      	ldr	r3, [r3, #32]
 800a28c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a294:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	031b      	lsls	r3, r3, #12
 800a29a:	697a      	ldr	r2, [r7, #20]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a2a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	011b      	lsls	r3, r3, #4
 800a2ac:	693a      	ldr	r2, [r7, #16]
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	697a      	ldr	r2, [r7, #20]
 800a2b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	693a      	ldr	r2, [r7, #16]
 800a2bc:	621a      	str	r2, [r3, #32]
}
 800a2be:	bf00      	nop
 800a2c0:	371c      	adds	r7, #28
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr

0800a2ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2ca:	b480      	push	{r7}
 800a2cc:	b085      	sub	sp, #20
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2e2:	683a      	ldr	r2, [r7, #0]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	f043 0307 	orr.w	r3, r3, #7
 800a2ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	68fa      	ldr	r2, [r7, #12]
 800a2f2:	609a      	str	r2, [r3, #8]
}
 800a2f4:	bf00      	nop
 800a2f6:	3714      	adds	r7, #20
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a300:	b480      	push	{r7}
 800a302:	b087      	sub	sp, #28
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	607a      	str	r2, [r7, #4]
 800a30c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a31a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	021a      	lsls	r2, r3, #8
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	431a      	orrs	r2, r3
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	4313      	orrs	r3, r2
 800a328:	697a      	ldr	r2, [r7, #20]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	697a      	ldr	r2, [r7, #20]
 800a332:	609a      	str	r2, [r3, #8]
}
 800a334:	bf00      	nop
 800a336:	371c      	adds	r7, #28
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	4a1c      	ldr	r2, [pc, #112]	; (800a3bc <TIM_ResetCallback+0x7c>)
 800a34c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	4a1b      	ldr	r2, [pc, #108]	; (800a3c0 <TIM_ResetCallback+0x80>)
 800a354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	4a1a      	ldr	r2, [pc, #104]	; (800a3c4 <TIM_ResetCallback+0x84>)
 800a35c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4a19      	ldr	r2, [pc, #100]	; (800a3c8 <TIM_ResetCallback+0x88>)
 800a364:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	4a18      	ldr	r2, [pc, #96]	; (800a3cc <TIM_ResetCallback+0x8c>)
 800a36c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a17      	ldr	r2, [pc, #92]	; (800a3d0 <TIM_ResetCallback+0x90>)
 800a374:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a16      	ldr	r2, [pc, #88]	; (800a3d4 <TIM_ResetCallback+0x94>)
 800a37c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4a15      	ldr	r2, [pc, #84]	; (800a3d8 <TIM_ResetCallback+0x98>)
 800a384:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a14      	ldr	r2, [pc, #80]	; (800a3dc <TIM_ResetCallback+0x9c>)
 800a38c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4a13      	ldr	r2, [pc, #76]	; (800a3e0 <TIM_ResetCallback+0xa0>)
 800a394:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a12      	ldr	r2, [pc, #72]	; (800a3e4 <TIM_ResetCallback+0xa4>)
 800a39c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a11      	ldr	r2, [pc, #68]	; (800a3e8 <TIM_ResetCallback+0xa8>)
 800a3a4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a10      	ldr	r2, [pc, #64]	; (800a3ec <TIM_ResetCallback+0xac>)
 800a3ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	08003105 	.word	0x08003105
 800a3c0:	0800a059 	.word	0x0800a059
 800a3c4:	0800a0d1 	.word	0x0800a0d1
 800a3c8:	0800a0e5 	.word	0x0800a0e5
 800a3cc:	0800a081 	.word	0x0800a081
 800a3d0:	0800a095 	.word	0x0800a095
 800a3d4:	0800a06d 	.word	0x0800a06d
 800a3d8:	0800a0a9 	.word	0x0800a0a9
 800a3dc:	0800a0bd 	.word	0x0800a0bd
 800a3e0:	0800a0f9 	.word	0x0800a0f9
 800a3e4:	0800a56d 	.word	0x0800a56d
 800a3e8:	0800a581 	.word	0x0800a581
 800a3ec:	0800a595 	.word	0x0800a595

0800a3f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a55      	ldr	r2, [pc, #340]	; (800a554 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d018      	beq.n	800a436 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a40c:	d013      	beq.n	800a436 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a51      	ldr	r2, [pc, #324]	; (800a558 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d00e      	beq.n	800a436 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a4f      	ldr	r2, [pc, #316]	; (800a55c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d009      	beq.n	800a436 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a4e      	ldr	r2, [pc, #312]	; (800a560 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d004      	beq.n	800a436 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a42c:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800a430:	484c      	ldr	r0, [pc, #304]	; (800a564 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a432:	f7f8 feaa 	bl	800318a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d020      	beq.n	800a480 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2b10      	cmp	r3, #16
 800a444:	d01c      	beq.n	800a480 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2b20      	cmp	r3, #32
 800a44c:	d018      	beq.n	800a480 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b30      	cmp	r3, #48	; 0x30
 800a454:	d014      	beq.n	800a480 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2b40      	cmp	r3, #64	; 0x40
 800a45c:	d010      	beq.n	800a480 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2b50      	cmp	r3, #80	; 0x50
 800a464:	d00c      	beq.n	800a480 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2b60      	cmp	r3, #96	; 0x60
 800a46c:	d008      	beq.n	800a480 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2b70      	cmp	r3, #112	; 0x70
 800a474:	d004      	beq.n	800a480 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a476:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800a47a:	483a      	ldr	r0, [pc, #232]	; (800a564 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a47c:	f7f8 fe85 	bl	800318a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	2b80      	cmp	r3, #128	; 0x80
 800a486:	d008      	beq.n	800a49a <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d004      	beq.n	800a49a <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800a490:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800a494:	4833      	ldr	r0, [pc, #204]	; (800a564 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a496:	f7f8 fe78 	bl	800318a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d101      	bne.n	800a4a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a4a4:	2302      	movs	r3, #2
 800a4a6:	e050      	b.n	800a54a <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2202      	movs	r2, #2
 800a4b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a1b      	ldr	r2, [pc, #108]	; (800a554 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d018      	beq.n	800a51e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4f4:	d013      	beq.n	800a51e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a17      	ldr	r2, [pc, #92]	; (800a558 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d00e      	beq.n	800a51e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a15      	ldr	r2, [pc, #84]	; (800a55c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d009      	beq.n	800a51e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a14      	ldr	r2, [pc, #80]	; (800a560 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d004      	beq.n	800a51e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a13      	ldr	r2, [pc, #76]	; (800a568 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d10c      	bne.n	800a538 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a524:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	68ba      	ldr	r2, [r7, #8]
 800a52c:	4313      	orrs	r3, r2
 800a52e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68ba      	ldr	r2, [r7, #8]
 800a536:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	40010000 	.word	0x40010000
 800a558:	40000400 	.word	0x40000400
 800a55c:	40000800 	.word	0x40000800
 800a560:	40000c00 	.word	0x40000c00
 800a564:	0800f204 	.word	0x0800f204
 800a568:	40014000 	.word	0x40014000

0800a56c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b083      	sub	sp, #12
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a574:	bf00      	nop
 800a576:	370c      	adds	r7, #12
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a588:	bf00      	nop
 800a58a:	370c      	adds	r7, #12
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a59c:	bf00      	nop
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d101      	bne.n	800a5ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e0ab      	b.n	800a712 <HAL_UART_Init+0x16a>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	699b      	ldr	r3, [r3, #24]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d02c      	beq.n	800a61c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a55      	ldr	r2, [pc, #340]	; (800a71c <HAL_UART_Init+0x174>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d00e      	beq.n	800a5ea <HAL_UART_Init+0x42>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a53      	ldr	r2, [pc, #332]	; (800a720 <HAL_UART_Init+0x178>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d009      	beq.n	800a5ea <HAL_UART_Init+0x42>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a52      	ldr	r2, [pc, #328]	; (800a724 <HAL_UART_Init+0x17c>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d004      	beq.n	800a5ea <HAL_UART_Init+0x42>
 800a5e0:	f240 1173 	movw	r1, #371	; 0x173
 800a5e4:	4850      	ldr	r0, [pc, #320]	; (800a728 <HAL_UART_Init+0x180>)
 800a5e6:	f7f8 fdd0 	bl	800318a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	699b      	ldr	r3, [r3, #24]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d028      	beq.n	800a644 <HAL_UART_Init+0x9c>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	699b      	ldr	r3, [r3, #24]
 800a5f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5fa:	d023      	beq.n	800a644 <HAL_UART_Init+0x9c>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	699b      	ldr	r3, [r3, #24]
 800a600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a604:	d01e      	beq.n	800a644 <HAL_UART_Init+0x9c>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	699b      	ldr	r3, [r3, #24]
 800a60a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a60e:	d019      	beq.n	800a644 <HAL_UART_Init+0x9c>
 800a610:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800a614:	4844      	ldr	r0, [pc, #272]	; (800a728 <HAL_UART_Init+0x180>)
 800a616:	f7f8 fdb8 	bl	800318a <assert_failed>
 800a61a:	e013      	b.n	800a644 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a3e      	ldr	r2, [pc, #248]	; (800a71c <HAL_UART_Init+0x174>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d00e      	beq.n	800a644 <HAL_UART_Init+0x9c>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a3d      	ldr	r2, [pc, #244]	; (800a720 <HAL_UART_Init+0x178>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d009      	beq.n	800a644 <HAL_UART_Init+0x9c>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a3b      	ldr	r2, [pc, #236]	; (800a724 <HAL_UART_Init+0x17c>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d004      	beq.n	800a644 <HAL_UART_Init+0x9c>
 800a63a:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800a63e:	483a      	ldr	r0, [pc, #232]	; (800a728 <HAL_UART_Init+0x180>)
 800a640:	f7f8 fda3 	bl	800318a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d009      	beq.n	800a660 <HAL_UART_Init+0xb8>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a654:	d004      	beq.n	800a660 <HAL_UART_Init+0xb8>
 800a656:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800a65a:	4833      	ldr	r0, [pc, #204]	; (800a728 <HAL_UART_Init+0x180>)
 800a65c:	f7f8 fd95 	bl	800318a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	69db      	ldr	r3, [r3, #28]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d009      	beq.n	800a67c <HAL_UART_Init+0xd4>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	69db      	ldr	r3, [r3, #28]
 800a66c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a670:	d004      	beq.n	800a67c <HAL_UART_Init+0xd4>
 800a672:	f240 117b 	movw	r1, #379	; 0x17b
 800a676:	482c      	ldr	r0, [pc, #176]	; (800a728 <HAL_UART_Init+0x180>)
 800a678:	f7f8 fd87 	bl	800318a <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a682:	b2db      	uxtb	r3, r3
 800a684:	2b00      	cmp	r3, #0
 800a686:	d111      	bne.n	800a6ac <HAL_UART_Init+0x104>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 fb61 	bl	800ad58 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d102      	bne.n	800a6a4 <HAL_UART_Init+0xfc>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4a22      	ldr	r2, [pc, #136]	; (800a72c <HAL_UART_Init+0x184>)
 800a6a2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2224      	movs	r2, #36	; 0x24
 800a6b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	68da      	ldr	r2, [r3, #12]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a6c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 fd5b 	bl	800b180 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	691a      	ldr	r2, [r3, #16]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a6d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	695a      	ldr	r2, [r3, #20]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a6e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	68da      	ldr	r2, [r3, #12]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2220      	movs	r2, #32
 800a704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2220      	movs	r2, #32
 800a70c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	40011000 	.word	0x40011000
 800a720:	40004400 	.word	0x40004400
 800a724:	40011400 	.word	0x40011400
 800a728:	0800f27c 	.word	0x0800f27c
 800a72c:	08003b7d 	.word	0x08003b7d

0800a730 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	4613      	mov	r3, r2
 800a73c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a744:	b2db      	uxtb	r3, r3
 800a746:	2b20      	cmp	r3, #32
 800a748:	d11d      	bne.n	800a786 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d002      	beq.n	800a756 <HAL_UART_Receive_IT+0x26>
 800a750:	88fb      	ldrh	r3, [r7, #6]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d101      	bne.n	800a75a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	e016      	b.n	800a788 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a760:	2b01      	cmp	r3, #1
 800a762:	d101      	bne.n	800a768 <HAL_UART_Receive_IT+0x38>
 800a764:	2302      	movs	r3, #2
 800a766:	e00f      	b.n	800a788 <HAL_UART_Receive_IT+0x58>
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2200      	movs	r2, #0
 800a774:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a776:	88fb      	ldrh	r3, [r7, #6]
 800a778:	461a      	mov	r2, r3
 800a77a:	68b9      	ldr	r1, [r7, #8]
 800a77c:	68f8      	ldr	r0, [r7, #12]
 800a77e:	f000 fb23 	bl	800adc8 <UART_Start_Receive_IT>
 800a782:	4603      	mov	r3, r0
 800a784:	e000      	b.n	800a788 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a786:	2302      	movs	r3, #2
  }
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b0ba      	sub	sp, #232	; 0xe8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	695b      	ldr	r3, [r3, #20]
 800a7b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a7c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7c6:	f003 030f 	and.w	r3, r3, #15
 800a7ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a7ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d10f      	bne.n	800a7f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a7d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7da:	f003 0320 	and.w	r3, r3, #32
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d009      	beq.n	800a7f6 <HAL_UART_IRQHandler+0x66>
 800a7e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7e6:	f003 0320 	and.w	r3, r3, #32
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d003      	beq.n	800a7f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 fc09 	bl	800b006 <UART_Receive_IT>
      return;
 800a7f4:	e25b      	b.n	800acae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a7f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	f000 80e1 	beq.w	800a9c2 <HAL_UART_IRQHandler+0x232>
 800a800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a804:	f003 0301 	and.w	r3, r3, #1
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d106      	bne.n	800a81a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a80c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a810:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a814:	2b00      	cmp	r3, #0
 800a816:	f000 80d4 	beq.w	800a9c2 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a81a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a81e:	f003 0301 	and.w	r3, r3, #1
 800a822:	2b00      	cmp	r3, #0
 800a824:	d00b      	beq.n	800a83e <HAL_UART_IRQHandler+0xae>
 800a826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a82a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d005      	beq.n	800a83e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a836:	f043 0201 	orr.w	r2, r3, #1
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a83e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a842:	f003 0304 	and.w	r3, r3, #4
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00b      	beq.n	800a862 <HAL_UART_IRQHandler+0xd2>
 800a84a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a84e:	f003 0301 	and.w	r3, r3, #1
 800a852:	2b00      	cmp	r3, #0
 800a854:	d005      	beq.n	800a862 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a85a:	f043 0202 	orr.w	r2, r3, #2
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a866:	f003 0302 	and.w	r3, r3, #2
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d00b      	beq.n	800a886 <HAL_UART_IRQHandler+0xf6>
 800a86e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a872:	f003 0301 	and.w	r3, r3, #1
 800a876:	2b00      	cmp	r3, #0
 800a878:	d005      	beq.n	800a886 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a87e:	f043 0204 	orr.w	r2, r3, #4
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a88a:	f003 0308 	and.w	r3, r3, #8
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d011      	beq.n	800a8b6 <HAL_UART_IRQHandler+0x126>
 800a892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a896:	f003 0320 	and.w	r3, r3, #32
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d105      	bne.n	800a8aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a89e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8a2:	f003 0301 	and.w	r3, r3, #1
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d005      	beq.n	800a8b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ae:	f043 0208 	orr.w	r2, r3, #8
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	f000 81f2 	beq.w	800aca4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a8c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8c4:	f003 0320 	and.w	r3, r3, #32
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d008      	beq.n	800a8de <HAL_UART_IRQHandler+0x14e>
 800a8cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8d0:	f003 0320 	and.w	r3, r3, #32
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d002      	beq.n	800a8de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 fb94 	bl	800b006 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	695b      	ldr	r3, [r3, #20]
 800a8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8e8:	2b40      	cmp	r3, #64	; 0x40
 800a8ea:	bf0c      	ite	eq
 800a8ec:	2301      	moveq	r3, #1
 800a8ee:	2300      	movne	r3, #0
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8fa:	f003 0308 	and.w	r3, r3, #8
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d103      	bne.n	800a90a <HAL_UART_IRQHandler+0x17a>
 800a902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a906:	2b00      	cmp	r3, #0
 800a908:	d051      	beq.n	800a9ae <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 fa9a 	bl	800ae44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	695b      	ldr	r3, [r3, #20]
 800a916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a91a:	2b40      	cmp	r3, #64	; 0x40
 800a91c:	d142      	bne.n	800a9a4 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	3314      	adds	r3, #20
 800a924:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a928:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a92c:	e853 3f00 	ldrex	r3, [r3]
 800a930:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a934:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a93c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	3314      	adds	r3, #20
 800a946:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a94a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a94e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a952:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a956:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a95a:	e841 2300 	strex	r3, r2, [r1]
 800a95e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a962:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d1d9      	bne.n	800a91e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d013      	beq.n	800a99a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a976:	4a7f      	ldr	r2, [pc, #508]	; (800ab74 <HAL_UART_IRQHandler+0x3e4>)
 800a978:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a97e:	4618      	mov	r0, r3
 800a980:	f7fa fd92 	bl	80054a8 <HAL_DMA_Abort_IT>
 800a984:	4603      	mov	r3, r0
 800a986:	2b00      	cmp	r3, #0
 800a988:	d019      	beq.n	800a9be <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a98e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a994:	4610      	mov	r0, r2
 800a996:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a998:	e011      	b.n	800a9be <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9a2:	e00c      	b.n	800a9be <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9ac:	e007      	b.n	800a9be <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a9bc:	e172      	b.n	800aca4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9be:	bf00      	nop
    return;
 800a9c0:	e170      	b.n	800aca4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	f040 814c 	bne.w	800ac64 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a9cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9d0:	f003 0310 	and.w	r3, r3, #16
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f000 8145 	beq.w	800ac64 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a9da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9de:	f003 0310 	and.w	r3, r3, #16
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	f000 813e 	beq.w	800ac64 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	60bb      	str	r3, [r7, #8]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	60bb      	str	r3, [r7, #8]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	60bb      	str	r3, [r7, #8]
 800a9fc:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	695b      	ldr	r3, [r3, #20]
 800aa04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa08:	2b40      	cmp	r3, #64	; 0x40
 800aa0a:	f040 80b5 	bne.w	800ab78 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aa1a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f000 8142 	beq.w	800aca8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	f080 813b 	bcs.w	800aca8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa38:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3e:	69db      	ldr	r3, [r3, #28]
 800aa40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa44:	f000 8088 	beq.w	800ab58 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	330c      	adds	r3, #12
 800aa4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa56:	e853 3f00 	ldrex	r3, [r3]
 800aa5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800aa5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aa62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	330c      	adds	r3, #12
 800aa70:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800aa74:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aa78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aa80:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aa84:	e841 2300 	strex	r3, r2, [r1]
 800aa88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aa8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d1d9      	bne.n	800aa48 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	3314      	adds	r3, #20
 800aa9a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa9e:	e853 3f00 	ldrex	r3, [r3]
 800aaa2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aaa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aaa6:	f023 0301 	bic.w	r3, r3, #1
 800aaaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	3314      	adds	r3, #20
 800aab4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aab8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aabc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aabe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aac0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aac4:	e841 2300 	strex	r3, r2, [r1]
 800aac8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aaca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d1e1      	bne.n	800aa94 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	3314      	adds	r3, #20
 800aad6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aada:	e853 3f00 	ldrex	r3, [r3]
 800aade:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aae6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	3314      	adds	r3, #20
 800aaf0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aaf4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aaf6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aafa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aafc:	e841 2300 	strex	r3, r2, [r1]
 800ab00:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ab02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1e3      	bne.n	800aad0 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2220      	movs	r2, #32
 800ab0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	330c      	adds	r3, #12
 800ab1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab20:	e853 3f00 	ldrex	r3, [r3]
 800ab24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ab26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab28:	f023 0310 	bic.w	r3, r3, #16
 800ab2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	330c      	adds	r3, #12
 800ab36:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ab3a:	65ba      	str	r2, [r7, #88]	; 0x58
 800ab3c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab42:	e841 2300 	strex	r3, r2, [r1]
 800ab46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ab48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d1e3      	bne.n	800ab16 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab52:	4618      	mov	r0, r3
 800ab54:	f7fa fc38 	bl	80053c8 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800ab64:	b292      	uxth	r2, r2
 800ab66:	1a8a      	subs	r2, r1, r2
 800ab68:	b292      	uxth	r2, r2
 800ab6a:	4611      	mov	r1, r2
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ab70:	e09a      	b.n	800aca8 <HAL_UART_IRQHandler+0x518>
 800ab72:	bf00      	nop
 800ab74:	0800af0b 	.word	0x0800af0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	1ad3      	subs	r3, r2, r3
 800ab84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f000 808c 	beq.w	800acac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800ab94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f000 8087 	beq.w	800acac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	330c      	adds	r3, #12
 800aba4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba8:	e853 3f00 	ldrex	r3, [r3]
 800abac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800abae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800abb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	330c      	adds	r3, #12
 800abbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800abc2:	647a      	str	r2, [r7, #68]	; 0x44
 800abc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800abc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abca:	e841 2300 	strex	r3, r2, [r1]
 800abce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800abd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d1e3      	bne.n	800ab9e <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	3314      	adds	r3, #20
 800abdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe0:	e853 3f00 	ldrex	r3, [r3]
 800abe4:	623b      	str	r3, [r7, #32]
   return(result);
 800abe6:	6a3b      	ldr	r3, [r7, #32]
 800abe8:	f023 0301 	bic.w	r3, r3, #1
 800abec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	3314      	adds	r3, #20
 800abf6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800abfa:	633a      	str	r2, [r7, #48]	; 0x30
 800abfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac02:	e841 2300 	strex	r3, r2, [r1]
 800ac06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d1e3      	bne.n	800abd6 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2220      	movs	r2, #32
 800ac12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	330c      	adds	r3, #12
 800ac22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	e853 3f00 	ldrex	r3, [r3]
 800ac2a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f023 0310 	bic.w	r3, r3, #16
 800ac32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	330c      	adds	r3, #12
 800ac3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ac40:	61fa      	str	r2, [r7, #28]
 800ac42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac44:	69b9      	ldr	r1, [r7, #24]
 800ac46:	69fa      	ldr	r2, [r7, #28]
 800ac48:	e841 2300 	strex	r3, r2, [r1]
 800ac4c:	617b      	str	r3, [r7, #20]
   return(result);
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1e3      	bne.n	800ac1c <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac58:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800ac5c:	4611      	mov	r1, r2
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ac62:	e023      	b.n	800acac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ac64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d009      	beq.n	800ac84 <HAL_UART_IRQHandler+0x4f4>
 800ac70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d003      	beq.n	800ac84 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 f959 	bl	800af34 <UART_Transmit_IT>
    return;
 800ac82:	e014      	b.n	800acae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ac84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d00e      	beq.n	800acae <HAL_UART_IRQHandler+0x51e>
 800ac90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d008      	beq.n	800acae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 f999 	bl	800afd4 <UART_EndTransmit_IT>
    return;
 800aca2:	e004      	b.n	800acae <HAL_UART_IRQHandler+0x51e>
    return;
 800aca4:	bf00      	nop
 800aca6:	e002      	b.n	800acae <HAL_UART_IRQHandler+0x51e>
      return;
 800aca8:	bf00      	nop
 800acaa:	e000      	b.n	800acae <HAL_UART_IRQHandler+0x51e>
      return;
 800acac:	bf00      	nop
  }
}
 800acae:	37e8      	adds	r7, #232	; 0xe8
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b083      	sub	sp, #12
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800acbc:	bf00      	nop
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800acd0:	bf00      	nop
 800acd2:	370c      	adds	r7, #12
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ace4:	bf00      	nop
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800acf8:	bf00      	nop
 800acfa:	370c      	adds	r7, #12
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800ad0c:	bf00      	nop
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ad20:	bf00      	nop
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	460b      	mov	r3, r1
 800ad4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ad4c:	bf00      	nop
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a10      	ldr	r2, [pc, #64]	; (800ada4 <UART_InitCallbacksToDefault+0x4c>)
 800ad64:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4a0f      	ldr	r2, [pc, #60]	; (800ada8 <UART_InitCallbacksToDefault+0x50>)
 800ad6a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	4a0f      	ldr	r2, [pc, #60]	; (800adac <UART_InitCallbacksToDefault+0x54>)
 800ad70:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4a0e      	ldr	r2, [pc, #56]	; (800adb0 <UART_InitCallbacksToDefault+0x58>)
 800ad76:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4a0e      	ldr	r2, [pc, #56]	; (800adb4 <UART_InitCallbacksToDefault+0x5c>)
 800ad7c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4a0d      	ldr	r2, [pc, #52]	; (800adb8 <UART_InitCallbacksToDefault+0x60>)
 800ad82:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	4a0d      	ldr	r2, [pc, #52]	; (800adbc <UART_InitCallbacksToDefault+0x64>)
 800ad88:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	4a0c      	ldr	r2, [pc, #48]	; (800adc0 <UART_InitCallbacksToDefault+0x68>)
 800ad8e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4a0c      	ldr	r2, [pc, #48]	; (800adc4 <UART_InitCallbacksToDefault+0x6c>)
 800ad94:	669a      	str	r2, [r3, #104]	; 0x68

}
 800ad96:	bf00      	nop
 800ad98:	370c      	adds	r7, #12
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	0800acc9 	.word	0x0800acc9
 800ada8:	0800acb5 	.word	0x0800acb5
 800adac:	0800acdd 	.word	0x0800acdd
 800adb0:	08003c1d 	.word	0x08003c1d
 800adb4:	0800acf1 	.word	0x0800acf1
 800adb8:	0800ad05 	.word	0x0800ad05
 800adbc:	0800ad19 	.word	0x0800ad19
 800adc0:	0800ad2d 	.word	0x0800ad2d
 800adc4:	0800ad41 	.word	0x0800ad41

0800adc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	4613      	mov	r3, r2
 800add4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	68ba      	ldr	r2, [r7, #8]
 800adda:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	88fa      	ldrh	r2, [r7, #6]
 800ade0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	88fa      	ldrh	r2, [r7, #6]
 800ade6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2200      	movs	r2, #0
 800adec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2222      	movs	r2, #34	; 0x22
 800adf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d007      	beq.n	800ae16 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	68da      	ldr	r2, [r3, #12]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae14:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	695a      	ldr	r2, [r3, #20]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f042 0201 	orr.w	r2, r2, #1
 800ae24:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	68da      	ldr	r2, [r3, #12]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f042 0220 	orr.w	r2, r2, #32
 800ae34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3714      	adds	r7, #20
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b095      	sub	sp, #84	; 0x54
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	330c      	adds	r3, #12
 800ae52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae56:	e853 3f00 	ldrex	r3, [r3]
 800ae5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ae5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae62:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	330c      	adds	r3, #12
 800ae6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae6c:	643a      	str	r2, [r7, #64]	; 0x40
 800ae6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ae72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae74:	e841 2300 	strex	r3, r2, [r1]
 800ae78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d1e5      	bne.n	800ae4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	3314      	adds	r3, #20
 800ae86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae88:	6a3b      	ldr	r3, [r7, #32]
 800ae8a:	e853 3f00 	ldrex	r3, [r3]
 800ae8e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	f023 0301 	bic.w	r3, r3, #1
 800ae96:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	3314      	adds	r3, #20
 800ae9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aea0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aea2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aea8:	e841 2300 	strex	r3, r2, [r1]
 800aeac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aeae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d1e5      	bne.n	800ae80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d119      	bne.n	800aef0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	330c      	adds	r3, #12
 800aec2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	e853 3f00 	ldrex	r3, [r3]
 800aeca:	60bb      	str	r3, [r7, #8]
   return(result);
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	f023 0310 	bic.w	r3, r3, #16
 800aed2:	647b      	str	r3, [r7, #68]	; 0x44
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	330c      	adds	r3, #12
 800aeda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aedc:	61ba      	str	r2, [r7, #24]
 800aede:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee0:	6979      	ldr	r1, [r7, #20]
 800aee2:	69ba      	ldr	r2, [r7, #24]
 800aee4:	e841 2300 	strex	r3, r2, [r1]
 800aee8:	613b      	str	r3, [r7, #16]
   return(result);
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d1e5      	bne.n	800aebc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2220      	movs	r2, #32
 800aef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800aefe:	bf00      	nop
 800af00:	3754      	adds	r7, #84	; 0x54
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b084      	sub	sp, #16
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2200      	movs	r2, #0
 800af1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2200      	movs	r2, #0
 800af22:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af2c:	bf00      	nop
 800af2e:	3710      	adds	r7, #16
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800af34:	b480      	push	{r7}
 800af36:	b085      	sub	sp, #20
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af42:	b2db      	uxtb	r3, r3
 800af44:	2b21      	cmp	r3, #33	; 0x21
 800af46:	d13e      	bne.n	800afc6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af50:	d114      	bne.n	800af7c <UART_Transmit_IT+0x48>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	691b      	ldr	r3, [r3, #16]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d110      	bne.n	800af7c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6a1b      	ldr	r3, [r3, #32]
 800af5e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	881b      	ldrh	r3, [r3, #0]
 800af64:	461a      	mov	r2, r3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af6e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6a1b      	ldr	r3, [r3, #32]
 800af74:	1c9a      	adds	r2, r3, #2
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	621a      	str	r2, [r3, #32]
 800af7a:	e008      	b.n	800af8e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6a1b      	ldr	r3, [r3, #32]
 800af80:	1c59      	adds	r1, r3, #1
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	6211      	str	r1, [r2, #32]
 800af86:	781a      	ldrb	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800af92:	b29b      	uxth	r3, r3
 800af94:	3b01      	subs	r3, #1
 800af96:	b29b      	uxth	r3, r3
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	4619      	mov	r1, r3
 800af9c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d10f      	bne.n	800afc2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	68da      	ldr	r2, [r3, #12]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800afb0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	68da      	ldr	r2, [r3, #12]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afc0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800afc2:	2300      	movs	r3, #0
 800afc4:	e000      	b.n	800afc8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800afc6:	2302      	movs	r3, #2
  }
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3714      	adds	r7, #20
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68da      	ldr	r2, [r3, #12]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2220      	movs	r2, #32
 800aff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800affc:	2300      	movs	r3, #0
}
 800affe:	4618      	mov	r0, r3
 800b000:	3708      	adds	r7, #8
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b006:	b580      	push	{r7, lr}
 800b008:	b08c      	sub	sp, #48	; 0x30
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b014:	b2db      	uxtb	r3, r3
 800b016:	2b22      	cmp	r3, #34	; 0x22
 800b018:	f040 80ad 	bne.w	800b176 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b024:	d117      	bne.n	800b056 <UART_Receive_IT+0x50>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	691b      	ldr	r3, [r3, #16]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d113      	bne.n	800b056 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b02e:	2300      	movs	r3, #0
 800b030:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b036:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	b29b      	uxth	r3, r3
 800b040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b044:	b29a      	uxth	r2, r3
 800b046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b048:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b04e:	1c9a      	adds	r2, r3, #2
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	629a      	str	r2, [r3, #40]	; 0x28
 800b054:	e026      	b.n	800b0a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b05a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b05c:	2300      	movs	r3, #0
 800b05e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b068:	d007      	beq.n	800b07a <UART_Receive_IT+0x74>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	689b      	ldr	r3, [r3, #8]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d10a      	bne.n	800b088 <UART_Receive_IT+0x82>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d106      	bne.n	800b088 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	b2da      	uxtb	r2, r3
 800b082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b084:	701a      	strb	r2, [r3, #0]
 800b086:	e008      	b.n	800b09a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b094:	b2da      	uxtb	r2, r3
 800b096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b098:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b09e:	1c5a      	adds	r2, r3, #1
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d15c      	bne.n	800b172 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	68da      	ldr	r2, [r3, #12]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f022 0220 	bic.w	r2, r2, #32
 800b0c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	68da      	ldr	r2, [r3, #12]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b0d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	695a      	ldr	r2, [r3, #20]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f022 0201 	bic.w	r2, r2, #1
 800b0e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2220      	movs	r2, #32
 800b0ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d136      	bne.n	800b166 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	330c      	adds	r3, #12
 800b104:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	e853 3f00 	ldrex	r3, [r3]
 800b10c:	613b      	str	r3, [r7, #16]
   return(result);
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	f023 0310 	bic.w	r3, r3, #16
 800b114:	627b      	str	r3, [r7, #36]	; 0x24
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	330c      	adds	r3, #12
 800b11c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b11e:	623a      	str	r2, [r7, #32]
 800b120:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b122:	69f9      	ldr	r1, [r7, #28]
 800b124:	6a3a      	ldr	r2, [r7, #32]
 800b126:	e841 2300 	strex	r3, r2, [r1]
 800b12a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b12c:	69bb      	ldr	r3, [r7, #24]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d1e5      	bne.n	800b0fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f003 0310 	and.w	r3, r3, #16
 800b13c:	2b10      	cmp	r3, #16
 800b13e:	d10a      	bne.n	800b156 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b140:	2300      	movs	r3, #0
 800b142:	60fb      	str	r3, [r7, #12]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	60fb      	str	r3, [r7, #12]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	60fb      	str	r3, [r7, #12]
 800b154:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b15e:	4611      	mov	r1, r2
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	4798      	blx	r3
 800b164:	e003      	b.n	800b16e <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b16e:	2300      	movs	r3, #0
 800b170:	e002      	b.n	800b178 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800b172:	2300      	movs	r3, #0
 800b174:	e000      	b.n	800b178 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800b176:	2302      	movs	r3, #2
  }
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3730      	adds	r7, #48	; 0x30
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b184:	b0c0      	sub	sp, #256	; 0x100
 800b186:	af00      	add	r7, sp, #0
 800b188:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800b18c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b190:	685a      	ldr	r2, [r3, #4]
 800b192:	4bcf      	ldr	r3, [pc, #828]	; (800b4d0 <UART_SetConfig+0x350>)
 800b194:	429a      	cmp	r2, r3
 800b196:	d904      	bls.n	800b1a2 <UART_SetConfig+0x22>
 800b198:	f640 6161 	movw	r1, #3681	; 0xe61
 800b19c:	48cd      	ldr	r0, [pc, #820]	; (800b4d4 <UART_SetConfig+0x354>)
 800b19e:	f7f7 fff4 	bl	800318a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800b1a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d00a      	beq.n	800b1c2 <UART_SetConfig+0x42>
 800b1ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1b0:	68db      	ldr	r3, [r3, #12]
 800b1b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1b6:	d004      	beq.n	800b1c2 <UART_SetConfig+0x42>
 800b1b8:	f640 6162 	movw	r1, #3682	; 0xe62
 800b1bc:	48c5      	ldr	r0, [pc, #788]	; (800b4d4 <UART_SetConfig+0x354>)
 800b1be:	f7f7 ffe4 	bl	800318a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800b1c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1c6:	691b      	ldr	r3, [r3, #16]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d010      	beq.n	800b1ee <UART_SetConfig+0x6e>
 800b1cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1d0:	691b      	ldr	r3, [r3, #16]
 800b1d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1d6:	d00a      	beq.n	800b1ee <UART_SetConfig+0x6e>
 800b1d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b1e2:	d004      	beq.n	800b1ee <UART_SetConfig+0x6e>
 800b1e4:	f640 6163 	movw	r1, #3683	; 0xe63
 800b1e8:	48ba      	ldr	r0, [pc, #744]	; (800b4d4 <UART_SetConfig+0x354>)
 800b1ea:	f7f7 ffce 	bl	800318a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800b1ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1f2:	695a      	ldr	r2, [r3, #20]
 800b1f4:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d104      	bne.n	800b208 <UART_SetConfig+0x88>
 800b1fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b202:	695b      	ldr	r3, [r3, #20]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d104      	bne.n	800b212 <UART_SetConfig+0x92>
 800b208:	f640 6164 	movw	r1, #3684	; 0xe64
 800b20c:	48b1      	ldr	r0, [pc, #708]	; (800b4d4 <UART_SetConfig+0x354>)
 800b20e:	f7f7 ffbc 	bl	800318a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	691b      	ldr	r3, [r3, #16]
 800b21a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b21e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b222:	68d9      	ldr	r1, [r3, #12]
 800b224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	ea40 0301 	orr.w	r3, r0, r1
 800b22e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b234:	689a      	ldr	r2, [r3, #8]
 800b236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b23a:	691b      	ldr	r3, [r3, #16]
 800b23c:	431a      	orrs	r2, r3
 800b23e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b242:	695b      	ldr	r3, [r3, #20]
 800b244:	431a      	orrs	r2, r3
 800b246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b24a:	69db      	ldr	r3, [r3, #28]
 800b24c:	4313      	orrs	r3, r2
 800b24e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	68db      	ldr	r3, [r3, #12]
 800b25a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b25e:	f021 010c 	bic.w	r1, r1, #12
 800b262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b26c:	430b      	orrs	r3, r1
 800b26e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	695b      	ldr	r3, [r3, #20]
 800b278:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b27c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b280:	6999      	ldr	r1, [r3, #24]
 800b282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b286:	681a      	ldr	r2, [r3, #0]
 800b288:	ea40 0301 	orr.w	r3, r0, r1
 800b28c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b28e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b292:	681a      	ldr	r2, [r3, #0]
 800b294:	4b90      	ldr	r3, [pc, #576]	; (800b4d8 <UART_SetConfig+0x358>)
 800b296:	429a      	cmp	r2, r3
 800b298:	d005      	beq.n	800b2a6 <UART_SetConfig+0x126>
 800b29a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	4b8e      	ldr	r3, [pc, #568]	; (800b4dc <UART_SetConfig+0x35c>)
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d104      	bne.n	800b2b0 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b2a6:	f7fd fd57 	bl	8008d58 <HAL_RCC_GetPCLK2Freq>
 800b2aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b2ae:	e003      	b.n	800b2b8 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b2b0:	f7fd fd3e 	bl	8008d30 <HAL_RCC_GetPCLK1Freq>
 800b2b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2bc:	69db      	ldr	r3, [r3, #28]
 800b2be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2c2:	f040 810f 	bne.w	800b4e4 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b2c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b2d0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b2d4:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b2d8:	4622      	mov	r2, r4
 800b2da:	462b      	mov	r3, r5
 800b2dc:	1891      	adds	r1, r2, r2
 800b2de:	65b9      	str	r1, [r7, #88]	; 0x58
 800b2e0:	415b      	adcs	r3, r3
 800b2e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b2e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b2e8:	4621      	mov	r1, r4
 800b2ea:	eb12 0801 	adds.w	r8, r2, r1
 800b2ee:	4629      	mov	r1, r5
 800b2f0:	eb43 0901 	adc.w	r9, r3, r1
 800b2f4:	f04f 0200 	mov.w	r2, #0
 800b2f8:	f04f 0300 	mov.w	r3, #0
 800b2fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b300:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b304:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b308:	4690      	mov	r8, r2
 800b30a:	4699      	mov	r9, r3
 800b30c:	4623      	mov	r3, r4
 800b30e:	eb18 0303 	adds.w	r3, r8, r3
 800b312:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b316:	462b      	mov	r3, r5
 800b318:	eb49 0303 	adc.w	r3, r9, r3
 800b31c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b32c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b330:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b334:	460b      	mov	r3, r1
 800b336:	18db      	adds	r3, r3, r3
 800b338:	653b      	str	r3, [r7, #80]	; 0x50
 800b33a:	4613      	mov	r3, r2
 800b33c:	eb42 0303 	adc.w	r3, r2, r3
 800b340:	657b      	str	r3, [r7, #84]	; 0x54
 800b342:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b346:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b34a:	f7f5 fb37 	bl	80009bc <__aeabi_uldivmod>
 800b34e:	4602      	mov	r2, r0
 800b350:	460b      	mov	r3, r1
 800b352:	4b63      	ldr	r3, [pc, #396]	; (800b4e0 <UART_SetConfig+0x360>)
 800b354:	fba3 2302 	umull	r2, r3, r3, r2
 800b358:	095b      	lsrs	r3, r3, #5
 800b35a:	011c      	lsls	r4, r3, #4
 800b35c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b360:	2200      	movs	r2, #0
 800b362:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b366:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b36a:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b36e:	4642      	mov	r2, r8
 800b370:	464b      	mov	r3, r9
 800b372:	1891      	adds	r1, r2, r2
 800b374:	64b9      	str	r1, [r7, #72]	; 0x48
 800b376:	415b      	adcs	r3, r3
 800b378:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b37a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b37e:	4641      	mov	r1, r8
 800b380:	eb12 0a01 	adds.w	sl, r2, r1
 800b384:	4649      	mov	r1, r9
 800b386:	eb43 0b01 	adc.w	fp, r3, r1
 800b38a:	f04f 0200 	mov.w	r2, #0
 800b38e:	f04f 0300 	mov.w	r3, #0
 800b392:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b396:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b39a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b39e:	4692      	mov	sl, r2
 800b3a0:	469b      	mov	fp, r3
 800b3a2:	4643      	mov	r3, r8
 800b3a4:	eb1a 0303 	adds.w	r3, sl, r3
 800b3a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b3ac:	464b      	mov	r3, r9
 800b3ae:	eb4b 0303 	adc.w	r3, fp, r3
 800b3b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b3b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b3c2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b3c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	18db      	adds	r3, r3, r3
 800b3ce:	643b      	str	r3, [r7, #64]	; 0x40
 800b3d0:	4613      	mov	r3, r2
 800b3d2:	eb42 0303 	adc.w	r3, r2, r3
 800b3d6:	647b      	str	r3, [r7, #68]	; 0x44
 800b3d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b3dc:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b3e0:	f7f5 faec 	bl	80009bc <__aeabi_uldivmod>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	4611      	mov	r1, r2
 800b3ea:	4b3d      	ldr	r3, [pc, #244]	; (800b4e0 <UART_SetConfig+0x360>)
 800b3ec:	fba3 2301 	umull	r2, r3, r3, r1
 800b3f0:	095b      	lsrs	r3, r3, #5
 800b3f2:	2264      	movs	r2, #100	; 0x64
 800b3f4:	fb02 f303 	mul.w	r3, r2, r3
 800b3f8:	1acb      	subs	r3, r1, r3
 800b3fa:	00db      	lsls	r3, r3, #3
 800b3fc:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b400:	4b37      	ldr	r3, [pc, #220]	; (800b4e0 <UART_SetConfig+0x360>)
 800b402:	fba3 2302 	umull	r2, r3, r3, r2
 800b406:	095b      	lsrs	r3, r3, #5
 800b408:	005b      	lsls	r3, r3, #1
 800b40a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b40e:	441c      	add	r4, r3
 800b410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b414:	2200      	movs	r2, #0
 800b416:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b41a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b41e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b422:	4642      	mov	r2, r8
 800b424:	464b      	mov	r3, r9
 800b426:	1891      	adds	r1, r2, r2
 800b428:	63b9      	str	r1, [r7, #56]	; 0x38
 800b42a:	415b      	adcs	r3, r3
 800b42c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b42e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b432:	4641      	mov	r1, r8
 800b434:	1851      	adds	r1, r2, r1
 800b436:	6339      	str	r1, [r7, #48]	; 0x30
 800b438:	4649      	mov	r1, r9
 800b43a:	414b      	adcs	r3, r1
 800b43c:	637b      	str	r3, [r7, #52]	; 0x34
 800b43e:	f04f 0200 	mov.w	r2, #0
 800b442:	f04f 0300 	mov.w	r3, #0
 800b446:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b44a:	4659      	mov	r1, fp
 800b44c:	00cb      	lsls	r3, r1, #3
 800b44e:	4651      	mov	r1, sl
 800b450:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b454:	4651      	mov	r1, sl
 800b456:	00ca      	lsls	r2, r1, #3
 800b458:	4610      	mov	r0, r2
 800b45a:	4619      	mov	r1, r3
 800b45c:	4603      	mov	r3, r0
 800b45e:	4642      	mov	r2, r8
 800b460:	189b      	adds	r3, r3, r2
 800b462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b466:	464b      	mov	r3, r9
 800b468:	460a      	mov	r2, r1
 800b46a:	eb42 0303 	adc.w	r3, r2, r3
 800b46e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b47e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b482:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b486:	460b      	mov	r3, r1
 800b488:	18db      	adds	r3, r3, r3
 800b48a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b48c:	4613      	mov	r3, r2
 800b48e:	eb42 0303 	adc.w	r3, r2, r3
 800b492:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b494:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b498:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b49c:	f7f5 fa8e 	bl	80009bc <__aeabi_uldivmod>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	4b0e      	ldr	r3, [pc, #56]	; (800b4e0 <UART_SetConfig+0x360>)
 800b4a6:	fba3 1302 	umull	r1, r3, r3, r2
 800b4aa:	095b      	lsrs	r3, r3, #5
 800b4ac:	2164      	movs	r1, #100	; 0x64
 800b4ae:	fb01 f303 	mul.w	r3, r1, r3
 800b4b2:	1ad3      	subs	r3, r2, r3
 800b4b4:	00db      	lsls	r3, r3, #3
 800b4b6:	3332      	adds	r3, #50	; 0x32
 800b4b8:	4a09      	ldr	r2, [pc, #36]	; (800b4e0 <UART_SetConfig+0x360>)
 800b4ba:	fba2 2303 	umull	r2, r3, r2, r3
 800b4be:	095b      	lsrs	r3, r3, #5
 800b4c0:	f003 0207 	and.w	r2, r3, #7
 800b4c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4422      	add	r2, r4
 800b4cc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b4ce:	e108      	b.n	800b6e2 <UART_SetConfig+0x562>
 800b4d0:	00a037a0 	.word	0x00a037a0
 800b4d4:	0800f27c 	.word	0x0800f27c
 800b4d8:	40011000 	.word	0x40011000
 800b4dc:	40011400 	.word	0x40011400
 800b4e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b4e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b4ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b4f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b4f6:	4642      	mov	r2, r8
 800b4f8:	464b      	mov	r3, r9
 800b4fa:	1891      	adds	r1, r2, r2
 800b4fc:	6239      	str	r1, [r7, #32]
 800b4fe:	415b      	adcs	r3, r3
 800b500:	627b      	str	r3, [r7, #36]	; 0x24
 800b502:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b506:	4641      	mov	r1, r8
 800b508:	1854      	adds	r4, r2, r1
 800b50a:	4649      	mov	r1, r9
 800b50c:	eb43 0501 	adc.w	r5, r3, r1
 800b510:	f04f 0200 	mov.w	r2, #0
 800b514:	f04f 0300 	mov.w	r3, #0
 800b518:	00eb      	lsls	r3, r5, #3
 800b51a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b51e:	00e2      	lsls	r2, r4, #3
 800b520:	4614      	mov	r4, r2
 800b522:	461d      	mov	r5, r3
 800b524:	4643      	mov	r3, r8
 800b526:	18e3      	adds	r3, r4, r3
 800b528:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b52c:	464b      	mov	r3, r9
 800b52e:	eb45 0303 	adc.w	r3, r5, r3
 800b532:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	2200      	movs	r2, #0
 800b53e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b542:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b546:	f04f 0200 	mov.w	r2, #0
 800b54a:	f04f 0300 	mov.w	r3, #0
 800b54e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b552:	4629      	mov	r1, r5
 800b554:	008b      	lsls	r3, r1, #2
 800b556:	4621      	mov	r1, r4
 800b558:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b55c:	4621      	mov	r1, r4
 800b55e:	008a      	lsls	r2, r1, #2
 800b560:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b564:	f7f5 fa2a 	bl	80009bc <__aeabi_uldivmod>
 800b568:	4602      	mov	r2, r0
 800b56a:	460b      	mov	r3, r1
 800b56c:	4b60      	ldr	r3, [pc, #384]	; (800b6f0 <UART_SetConfig+0x570>)
 800b56e:	fba3 2302 	umull	r2, r3, r3, r2
 800b572:	095b      	lsrs	r3, r3, #5
 800b574:	011c      	lsls	r4, r3, #4
 800b576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b57a:	2200      	movs	r2, #0
 800b57c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b580:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b584:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b588:	4642      	mov	r2, r8
 800b58a:	464b      	mov	r3, r9
 800b58c:	1891      	adds	r1, r2, r2
 800b58e:	61b9      	str	r1, [r7, #24]
 800b590:	415b      	adcs	r3, r3
 800b592:	61fb      	str	r3, [r7, #28]
 800b594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b598:	4641      	mov	r1, r8
 800b59a:	1851      	adds	r1, r2, r1
 800b59c:	6139      	str	r1, [r7, #16]
 800b59e:	4649      	mov	r1, r9
 800b5a0:	414b      	adcs	r3, r1
 800b5a2:	617b      	str	r3, [r7, #20]
 800b5a4:	f04f 0200 	mov.w	r2, #0
 800b5a8:	f04f 0300 	mov.w	r3, #0
 800b5ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b5b0:	4659      	mov	r1, fp
 800b5b2:	00cb      	lsls	r3, r1, #3
 800b5b4:	4651      	mov	r1, sl
 800b5b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b5ba:	4651      	mov	r1, sl
 800b5bc:	00ca      	lsls	r2, r1, #3
 800b5be:	4610      	mov	r0, r2
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	4642      	mov	r2, r8
 800b5c6:	189b      	adds	r3, r3, r2
 800b5c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b5cc:	464b      	mov	r3, r9
 800b5ce:	460a      	mov	r2, r1
 800b5d0:	eb42 0303 	adc.w	r3, r2, r3
 800b5d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b5d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	67bb      	str	r3, [r7, #120]	; 0x78
 800b5e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b5e4:	f04f 0200 	mov.w	r2, #0
 800b5e8:	f04f 0300 	mov.w	r3, #0
 800b5ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b5f0:	4649      	mov	r1, r9
 800b5f2:	008b      	lsls	r3, r1, #2
 800b5f4:	4641      	mov	r1, r8
 800b5f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b5fa:	4641      	mov	r1, r8
 800b5fc:	008a      	lsls	r2, r1, #2
 800b5fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b602:	f7f5 f9db 	bl	80009bc <__aeabi_uldivmod>
 800b606:	4602      	mov	r2, r0
 800b608:	460b      	mov	r3, r1
 800b60a:	4b39      	ldr	r3, [pc, #228]	; (800b6f0 <UART_SetConfig+0x570>)
 800b60c:	fba3 1302 	umull	r1, r3, r3, r2
 800b610:	095b      	lsrs	r3, r3, #5
 800b612:	2164      	movs	r1, #100	; 0x64
 800b614:	fb01 f303 	mul.w	r3, r1, r3
 800b618:	1ad3      	subs	r3, r2, r3
 800b61a:	011b      	lsls	r3, r3, #4
 800b61c:	3332      	adds	r3, #50	; 0x32
 800b61e:	4a34      	ldr	r2, [pc, #208]	; (800b6f0 <UART_SetConfig+0x570>)
 800b620:	fba2 2303 	umull	r2, r3, r2, r3
 800b624:	095b      	lsrs	r3, r3, #5
 800b626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b62a:	441c      	add	r4, r3
 800b62c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b630:	2200      	movs	r2, #0
 800b632:	673b      	str	r3, [r7, #112]	; 0x70
 800b634:	677a      	str	r2, [r7, #116]	; 0x74
 800b636:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b63a:	4642      	mov	r2, r8
 800b63c:	464b      	mov	r3, r9
 800b63e:	1891      	adds	r1, r2, r2
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	415b      	adcs	r3, r3
 800b644:	60fb      	str	r3, [r7, #12]
 800b646:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b64a:	4641      	mov	r1, r8
 800b64c:	1851      	adds	r1, r2, r1
 800b64e:	6039      	str	r1, [r7, #0]
 800b650:	4649      	mov	r1, r9
 800b652:	414b      	adcs	r3, r1
 800b654:	607b      	str	r3, [r7, #4]
 800b656:	f04f 0200 	mov.w	r2, #0
 800b65a:	f04f 0300 	mov.w	r3, #0
 800b65e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b662:	4659      	mov	r1, fp
 800b664:	00cb      	lsls	r3, r1, #3
 800b666:	4651      	mov	r1, sl
 800b668:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b66c:	4651      	mov	r1, sl
 800b66e:	00ca      	lsls	r2, r1, #3
 800b670:	4610      	mov	r0, r2
 800b672:	4619      	mov	r1, r3
 800b674:	4603      	mov	r3, r0
 800b676:	4642      	mov	r2, r8
 800b678:	189b      	adds	r3, r3, r2
 800b67a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b67c:	464b      	mov	r3, r9
 800b67e:	460a      	mov	r2, r1
 800b680:	eb42 0303 	adc.w	r3, r2, r3
 800b684:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	663b      	str	r3, [r7, #96]	; 0x60
 800b690:	667a      	str	r2, [r7, #100]	; 0x64
 800b692:	f04f 0200 	mov.w	r2, #0
 800b696:	f04f 0300 	mov.w	r3, #0
 800b69a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b69e:	4649      	mov	r1, r9
 800b6a0:	008b      	lsls	r3, r1, #2
 800b6a2:	4641      	mov	r1, r8
 800b6a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b6a8:	4641      	mov	r1, r8
 800b6aa:	008a      	lsls	r2, r1, #2
 800b6ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b6b0:	f7f5 f984 	bl	80009bc <__aeabi_uldivmod>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	460b      	mov	r3, r1
 800b6b8:	4b0d      	ldr	r3, [pc, #52]	; (800b6f0 <UART_SetConfig+0x570>)
 800b6ba:	fba3 1302 	umull	r1, r3, r3, r2
 800b6be:	095b      	lsrs	r3, r3, #5
 800b6c0:	2164      	movs	r1, #100	; 0x64
 800b6c2:	fb01 f303 	mul.w	r3, r1, r3
 800b6c6:	1ad3      	subs	r3, r2, r3
 800b6c8:	011b      	lsls	r3, r3, #4
 800b6ca:	3332      	adds	r3, #50	; 0x32
 800b6cc:	4a08      	ldr	r2, [pc, #32]	; (800b6f0 <UART_SetConfig+0x570>)
 800b6ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b6d2:	095b      	lsrs	r3, r3, #5
 800b6d4:	f003 020f 	and.w	r2, r3, #15
 800b6d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4422      	add	r2, r4
 800b6e0:	609a      	str	r2, [r3, #8]
}
 800b6e2:	bf00      	nop
 800b6e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b6ee:	bf00      	nop
 800b6f0:	51eb851f 	.word	0x51eb851f

0800b6f4 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 800b6f8:	bf00      	nop
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
	...

0800b704 <__NVIC_SetPriority>:
{
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	4603      	mov	r3, r0
 800b70c:	6039      	str	r1, [r7, #0]
 800b70e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b714:	2b00      	cmp	r3, #0
 800b716:	db0a      	blt.n	800b72e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	b2da      	uxtb	r2, r3
 800b71c:	490c      	ldr	r1, [pc, #48]	; (800b750 <__NVIC_SetPriority+0x4c>)
 800b71e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b722:	0112      	lsls	r2, r2, #4
 800b724:	b2d2      	uxtb	r2, r2
 800b726:	440b      	add	r3, r1
 800b728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b72c:	e00a      	b.n	800b744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	b2da      	uxtb	r2, r3
 800b732:	4908      	ldr	r1, [pc, #32]	; (800b754 <__NVIC_SetPriority+0x50>)
 800b734:	79fb      	ldrb	r3, [r7, #7]
 800b736:	f003 030f 	and.w	r3, r3, #15
 800b73a:	3b04      	subs	r3, #4
 800b73c:	0112      	lsls	r2, r2, #4
 800b73e:	b2d2      	uxtb	r2, r2
 800b740:	440b      	add	r3, r1
 800b742:	761a      	strb	r2, [r3, #24]
}
 800b744:	bf00      	nop
 800b746:	370c      	adds	r7, #12
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr
 800b750:	e000e100 	.word	0xe000e100
 800b754:	e000ed00 	.word	0xe000ed00

0800b758 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b758:	b580      	push	{r7, lr}
 800b75a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b75c:	4b05      	ldr	r3, [pc, #20]	; (800b774 <SysTick_Handler+0x1c>)
 800b75e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b760:	f002 fc70 	bl	800e044 <xTaskGetSchedulerState>
 800b764:	4603      	mov	r3, r0
 800b766:	2b01      	cmp	r3, #1
 800b768:	d001      	beq.n	800b76e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b76a:	f000 fe95 	bl	800c498 <xPortSysTickHandler>
  }
}
 800b76e:	bf00      	nop
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	e000e010 	.word	0xe000e010

0800b778 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b778:	b580      	push	{r7, lr}
 800b77a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b77c:	2100      	movs	r1, #0
 800b77e:	f06f 0004 	mvn.w	r0, #4
 800b782:	f7ff ffbf 	bl	800b704 <__NVIC_SetPriority>
#endif
}
 800b786:	bf00      	nop
 800b788:	bd80      	pop	{r7, pc}
	...

0800b78c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b792:	f3ef 8305 	mrs	r3, IPSR
 800b796:	603b      	str	r3, [r7, #0]
  return(result);
 800b798:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d003      	beq.n	800b7a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b79e:	f06f 0305 	mvn.w	r3, #5
 800b7a2:	607b      	str	r3, [r7, #4]
 800b7a4:	e00c      	b.n	800b7c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b7a6:	4b0a      	ldr	r3, [pc, #40]	; (800b7d0 <osKernelInitialize+0x44>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d105      	bne.n	800b7ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b7ae:	4b08      	ldr	r3, [pc, #32]	; (800b7d0 <osKernelInitialize+0x44>)
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	607b      	str	r3, [r7, #4]
 800b7b8:	e002      	b.n	800b7c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b7ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b7be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b7c0:	687b      	ldr	r3, [r7, #4]
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	370c      	adds	r7, #12
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7cc:	4770      	bx	lr
 800b7ce:	bf00      	nop
 800b7d0:	2000091c 	.word	0x2000091c

0800b7d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7da:	f3ef 8305 	mrs	r3, IPSR
 800b7de:	603b      	str	r3, [r7, #0]
  return(result);
 800b7e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d003      	beq.n	800b7ee <osKernelStart+0x1a>
    stat = osErrorISR;
 800b7e6:	f06f 0305 	mvn.w	r3, #5
 800b7ea:	607b      	str	r3, [r7, #4]
 800b7ec:	e010      	b.n	800b810 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b7ee:	4b0b      	ldr	r3, [pc, #44]	; (800b81c <osKernelStart+0x48>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d109      	bne.n	800b80a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b7f6:	f7ff ffbf 	bl	800b778 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b7fa:	4b08      	ldr	r3, [pc, #32]	; (800b81c <osKernelStart+0x48>)
 800b7fc:	2202      	movs	r2, #2
 800b7fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b800:	f001 feb0 	bl	800d564 <vTaskStartScheduler>
      stat = osOK;
 800b804:	2300      	movs	r3, #0
 800b806:	607b      	str	r3, [r7, #4]
 800b808:	e002      	b.n	800b810 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b80a:	f04f 33ff 	mov.w	r3, #4294967295
 800b80e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b810:	687b      	ldr	r3, [r7, #4]
}
 800b812:	4618      	mov	r0, r3
 800b814:	3708      	adds	r7, #8
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	2000091c 	.word	0x2000091c

0800b820 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b820:	b580      	push	{r7, lr}
 800b822:	b08e      	sub	sp, #56	; 0x38
 800b824:	af04      	add	r7, sp, #16
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b82c:	2300      	movs	r3, #0
 800b82e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b830:	f3ef 8305 	mrs	r3, IPSR
 800b834:	617b      	str	r3, [r7, #20]
  return(result);
 800b836:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d17f      	bne.n	800b93c <osThreadNew+0x11c>
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d07c      	beq.n	800b93c <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800b842:	2380      	movs	r3, #128	; 0x80
 800b844:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b846:	2318      	movs	r3, #24
 800b848:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b84a:	2300      	movs	r3, #0
 800b84c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b84e:	f04f 33ff 	mov.w	r3, #4294967295
 800b852:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d046      	beq.n	800b8e8 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d002      	beq.n	800b868 <osThreadNew+0x48>
        name = attr->name;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	699b      	ldr	r3, [r3, #24]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d002      	beq.n	800b876 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	699b      	ldr	r3, [r3, #24]
 800b874:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b876:	69fb      	ldr	r3, [r7, #28]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d008      	beq.n	800b88e <osThreadNew+0x6e>
 800b87c:	69fb      	ldr	r3, [r7, #28]
 800b87e:	2b38      	cmp	r3, #56	; 0x38
 800b880:	d805      	bhi.n	800b88e <osThreadNew+0x6e>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	f003 0301 	and.w	r3, r3, #1
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d001      	beq.n	800b892 <osThreadNew+0x72>
        return (NULL);
 800b88e:	2300      	movs	r3, #0
 800b890:	e055      	b.n	800b93e <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	695b      	ldr	r3, [r3, #20]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d003      	beq.n	800b8a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	695b      	ldr	r3, [r3, #20]
 800b89e:	089b      	lsrs	r3, r3, #2
 800b8a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00f      	beq.n	800b8ca <osThreadNew+0xaa>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 800b8b2:	d30a      	bcc.n	800b8ca <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d006      	beq.n	800b8ca <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	695b      	ldr	r3, [r3, #20]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d002      	beq.n	800b8ca <osThreadNew+0xaa>
        mem = 1;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	61bb      	str	r3, [r7, #24]
 800b8c8:	e010      	b.n	800b8ec <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	689b      	ldr	r3, [r3, #8]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d10c      	bne.n	800b8ec <osThreadNew+0xcc>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	68db      	ldr	r3, [r3, #12]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d108      	bne.n	800b8ec <osThreadNew+0xcc>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	691b      	ldr	r3, [r3, #16]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d104      	bne.n	800b8ec <osThreadNew+0xcc>
          mem = 0;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	61bb      	str	r3, [r7, #24]
 800b8e6:	e001      	b.n	800b8ec <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b8ec:	69bb      	ldr	r3, [r7, #24]
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d110      	bne.n	800b914 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b8fa:	9202      	str	r2, [sp, #8]
 800b8fc:	9301      	str	r3, [sp, #4]
 800b8fe:	69fb      	ldr	r3, [r7, #28]
 800b900:	9300      	str	r3, [sp, #0]
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	6a3a      	ldr	r2, [r7, #32]
 800b906:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f001 fc25 	bl	800d158 <xTaskCreateStatic>
 800b90e:	4603      	mov	r3, r0
 800b910:	613b      	str	r3, [r7, #16]
 800b912:	e013      	b.n	800b93c <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800b914:	69bb      	ldr	r3, [r7, #24]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d110      	bne.n	800b93c <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b91a:	6a3b      	ldr	r3, [r7, #32]
 800b91c:	b29a      	uxth	r2, r3
 800b91e:	f107 0310 	add.w	r3, r7, #16
 800b922:	9301      	str	r3, [sp, #4]
 800b924:	69fb      	ldr	r3, [r7, #28]
 800b926:	9300      	str	r3, [sp, #0]
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b92c:	68f8      	ldr	r0, [r7, #12]
 800b92e:	f001 fc72 	bl	800d216 <xTaskCreate>
 800b932:	4603      	mov	r3, r0
 800b934:	2b01      	cmp	r3, #1
 800b936:	d001      	beq.n	800b93c <osThreadNew+0x11c>
            hTask = NULL;
 800b938:	2300      	movs	r3, #0
 800b93a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b93c:	693b      	ldr	r3, [r7, #16]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3728      	adds	r7, #40	; 0x28
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}

0800b946 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b946:	b580      	push	{r7, lr}
 800b948:	b084      	sub	sp, #16
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b94e:	f3ef 8305 	mrs	r3, IPSR
 800b952:	60bb      	str	r3, [r7, #8]
  return(result);
 800b954:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b956:	2b00      	cmp	r3, #0
 800b958:	d003      	beq.n	800b962 <osDelay+0x1c>
    stat = osErrorISR;
 800b95a:	f06f 0305 	mvn.w	r3, #5
 800b95e:	60fb      	str	r3, [r7, #12]
 800b960:	e007      	b.n	800b972 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b962:	2300      	movs	r3, #0
 800b964:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d002      	beq.n	800b972 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f001 fdc5 	bl	800d4fc <vTaskDelay>
    }
  }

  return (stat);
 800b972:	68fb      	ldr	r3, [r7, #12]
}
 800b974:	4618      	mov	r0, r3
 800b976:	3710      	adds	r7, #16
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f003 f87a 	bl	800ea7e <pvTimerGetTimerID>
 800b98a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d005      	beq.n	800b99e <TimerCallback+0x22>
    callb->func (callb->arg);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	68fa      	ldr	r2, [r7, #12]
 800b998:	6852      	ldr	r2, [r2, #4]
 800b99a:	4610      	mov	r0, r2
 800b99c:	4798      	blx	r3
  }
}
 800b99e:	bf00      	nop
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
	...

0800b9a8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b08c      	sub	sp, #48	; 0x30
 800b9ac:	af02      	add	r7, sp, #8
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	607a      	str	r2, [r7, #4]
 800b9b2:	603b      	str	r3, [r7, #0]
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9bc:	f3ef 8305 	mrs	r3, IPSR
 800b9c0:	613b      	str	r3, [r7, #16]
  return(result);
 800b9c2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d163      	bne.n	800ba90 <osTimerNew+0xe8>
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d060      	beq.n	800ba90 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800b9ce:	2008      	movs	r0, #8
 800b9d0:	f000 f900 	bl	800bbd4 <pvPortMalloc>
 800b9d4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d059      	beq.n	800ba90 <osTimerNew+0xe8>
      callb->func = func;
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	68fa      	ldr	r2, [r7, #12]
 800b9e0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800b9e8:	7afb      	ldrb	r3, [r7, #11]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d102      	bne.n	800b9f4 <osTimerNew+0x4c>
        reload = pdFALSE;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	61fb      	str	r3, [r7, #28]
 800b9f2:	e001      	b.n	800b9f8 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800b9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9fc:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d01c      	beq.n	800ba42 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d002      	beq.n	800ba16 <osTimerNew+0x6e>
          name = attr->name;
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d006      	beq.n	800ba2c <osTimerNew+0x84>
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	2b2b      	cmp	r3, #43	; 0x2b
 800ba24:	d902      	bls.n	800ba2c <osTimerNew+0x84>
          mem = 1;
 800ba26:	2301      	movs	r3, #1
 800ba28:	61bb      	str	r3, [r7, #24]
 800ba2a:	e00c      	b.n	800ba46 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d108      	bne.n	800ba46 <osTimerNew+0x9e>
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	68db      	ldr	r3, [r3, #12]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d104      	bne.n	800ba46 <osTimerNew+0x9e>
            mem = 0;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	61bb      	str	r3, [r7, #24]
 800ba40:	e001      	b.n	800ba46 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800ba42:	2300      	movs	r3, #0
 800ba44:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800ba46:	69bb      	ldr	r3, [r7, #24]
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d10c      	bne.n	800ba66 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	689b      	ldr	r3, [r3, #8]
 800ba50:	9301      	str	r3, [sp, #4]
 800ba52:	4b12      	ldr	r3, [pc, #72]	; (800ba9c <osTimerNew+0xf4>)
 800ba54:	9300      	str	r3, [sp, #0]
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	69fa      	ldr	r2, [r7, #28]
 800ba5a:	2101      	movs	r1, #1
 800ba5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba5e:	f002 fc46 	bl	800e2ee <xTimerCreateStatic>
 800ba62:	6238      	str	r0, [r7, #32]
 800ba64:	e00b      	b.n	800ba7e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d108      	bne.n	800ba7e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800ba6c:	4b0b      	ldr	r3, [pc, #44]	; (800ba9c <osTimerNew+0xf4>)
 800ba6e:	9300      	str	r3, [sp, #0]
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	69fa      	ldr	r2, [r7, #28]
 800ba74:	2101      	movs	r1, #1
 800ba76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba78:	f002 fc18 	bl	800e2ac <xTimerCreate>
 800ba7c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800ba7e:	6a3b      	ldr	r3, [r7, #32]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d105      	bne.n	800ba90 <osTimerNew+0xe8>
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d002      	beq.n	800ba90 <osTimerNew+0xe8>
        vPortFree (callb);
 800ba8a:	6978      	ldr	r0, [r7, #20]
 800ba8c:	f000 f972 	bl	800bd74 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800ba90:	6a3b      	ldr	r3, [r7, #32]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3728      	adds	r7, #40	; 0x28
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	0800b97d 	.word	0x0800b97d

0800baa0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b088      	sub	sp, #32
 800baa4:	af02      	add	r7, sp, #8
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800baae:	f3ef 8305 	mrs	r3, IPSR
 800bab2:	60fb      	str	r3, [r7, #12]
  return(result);
 800bab4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d003      	beq.n	800bac2 <osTimerStart+0x22>
    stat = osErrorISR;
 800baba:	f06f 0305 	mvn.w	r3, #5
 800babe:	617b      	str	r3, [r7, #20]
 800bac0:	e017      	b.n	800baf2 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d103      	bne.n	800bad0 <osTimerStart+0x30>
    stat = osErrorParameter;
 800bac8:	f06f 0303 	mvn.w	r3, #3
 800bacc:	617b      	str	r3, [r7, #20]
 800bace:	e010      	b.n	800baf2 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800bad0:	2300      	movs	r3, #0
 800bad2:	9300      	str	r3, [sp, #0]
 800bad4:	2300      	movs	r3, #0
 800bad6:	683a      	ldr	r2, [r7, #0]
 800bad8:	2104      	movs	r1, #4
 800bada:	6938      	ldr	r0, [r7, #16]
 800badc:	f002 fc80 	bl	800e3e0 <xTimerGenericCommand>
 800bae0:	4603      	mov	r3, r0
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d102      	bne.n	800baec <osTimerStart+0x4c>
      stat = osOK;
 800bae6:	2300      	movs	r3, #0
 800bae8:	617b      	str	r3, [r7, #20]
 800baea:	e002      	b.n	800baf2 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800baec:	f06f 0302 	mvn.w	r3, #2
 800baf0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800baf2:	697b      	ldr	r3, [r7, #20]
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3718      	adds	r7, #24
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b088      	sub	sp, #32
 800bb00:	af02      	add	r7, sp, #8
 800bb02:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb08:	f3ef 8305 	mrs	r3, IPSR
 800bb0c:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d003      	beq.n	800bb1c <osTimerStop+0x20>
    stat = osErrorISR;
 800bb14:	f06f 0305 	mvn.w	r3, #5
 800bb18:	617b      	str	r3, [r7, #20]
 800bb1a:	e021      	b.n	800bb60 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d103      	bne.n	800bb2a <osTimerStop+0x2e>
    stat = osErrorParameter;
 800bb22:	f06f 0303 	mvn.w	r3, #3
 800bb26:	617b      	str	r3, [r7, #20]
 800bb28:	e01a      	b.n	800bb60 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800bb2a:	6938      	ldr	r0, [r7, #16]
 800bb2c:	f002 ff7e 	bl	800ea2c <xTimerIsTimerActive>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d103      	bne.n	800bb3e <osTimerStop+0x42>
      stat = osErrorResource;
 800bb36:	f06f 0302 	mvn.w	r3, #2
 800bb3a:	617b      	str	r3, [r7, #20]
 800bb3c:	e010      	b.n	800bb60 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800bb3e:	2300      	movs	r3, #0
 800bb40:	9300      	str	r3, [sp, #0]
 800bb42:	2300      	movs	r3, #0
 800bb44:	2200      	movs	r2, #0
 800bb46:	2103      	movs	r1, #3
 800bb48:	6938      	ldr	r0, [r7, #16]
 800bb4a:	f002 fc49 	bl	800e3e0 <xTimerGenericCommand>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2b01      	cmp	r3, #1
 800bb52:	d102      	bne.n	800bb5a <osTimerStop+0x5e>
        stat = osOK;
 800bb54:	2300      	movs	r3, #0
 800bb56:	617b      	str	r3, [r7, #20]
 800bb58:	e002      	b.n	800bb60 <osTimerStop+0x64>
      } else {
        stat = osError;
 800bb5a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb5e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800bb60:	697b      	ldr	r3, [r7, #20]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3718      	adds	r7, #24
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
	...

0800bb6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bb6c:	b480      	push	{r7}
 800bb6e:	b085      	sub	sp, #20
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	60b9      	str	r1, [r7, #8]
 800bb76:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	4a07      	ldr	r2, [pc, #28]	; (800bb98 <vApplicationGetIdleTaskMemory+0x2c>)
 800bb7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	4a06      	ldr	r2, [pc, #24]	; (800bb9c <vApplicationGetIdleTaskMemory+0x30>)
 800bb82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2280      	movs	r2, #128	; 0x80
 800bb88:	601a      	str	r2, [r3, #0]
}
 800bb8a:	bf00      	nop
 800bb8c:	3714      	adds	r7, #20
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr
 800bb96:	bf00      	nop
 800bb98:	20000920 	.word	0x20000920
 800bb9c:	20000adc 	.word	0x20000adc

0800bba0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bba0:	b480      	push	{r7}
 800bba2:	b085      	sub	sp, #20
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	60b9      	str	r1, [r7, #8]
 800bbaa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	4a07      	ldr	r2, [pc, #28]	; (800bbcc <vApplicationGetTimerTaskMemory+0x2c>)
 800bbb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	4a06      	ldr	r2, [pc, #24]	; (800bbd0 <vApplicationGetTimerTaskMemory+0x30>)
 800bbb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bbbe:	601a      	str	r2, [r3, #0]
}
 800bbc0:	bf00      	nop
 800bbc2:	3714      	adds	r7, #20
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr
 800bbcc:	20000cdc 	.word	0x20000cdc
 800bbd0:	20000e98 	.word	0x20000e98

0800bbd4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b08a      	sub	sp, #40	; 0x28
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bbe0:	f001 fd32 	bl	800d648 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bbe4:	4b5d      	ldr	r3, [pc, #372]	; (800bd5c <pvPortMalloc+0x188>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d101      	bne.n	800bbf0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bbec:	f000 f924 	bl	800be38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bbf0:	4b5b      	ldr	r3, [pc, #364]	; (800bd60 <pvPortMalloc+0x18c>)
 800bbf2:	681a      	ldr	r2, [r3, #0]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4013      	ands	r3, r2
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	f040 8093 	bne.w	800bd24 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d01d      	beq.n	800bc40 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bc04:	2208      	movs	r2, #8
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	4413      	add	r3, r2
 800bc0a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f003 0307 	and.w	r3, r3, #7
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d014      	beq.n	800bc40 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f023 0307 	bic.w	r3, r3, #7
 800bc1c:	3308      	adds	r3, #8
 800bc1e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f003 0307 	and.w	r3, r3, #7
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d00a      	beq.n	800bc40 <pvPortMalloc+0x6c>
	__asm volatile
 800bc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2e:	f383 8811 	msr	BASEPRI, r3
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	617b      	str	r3, [r7, #20]
}
 800bc3c:	bf00      	nop
 800bc3e:	e7fe      	b.n	800bc3e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d06e      	beq.n	800bd24 <pvPortMalloc+0x150>
 800bc46:	4b47      	ldr	r3, [pc, #284]	; (800bd64 <pvPortMalloc+0x190>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d869      	bhi.n	800bd24 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bc50:	4b45      	ldr	r3, [pc, #276]	; (800bd68 <pvPortMalloc+0x194>)
 800bc52:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bc54:	4b44      	ldr	r3, [pc, #272]	; (800bd68 <pvPortMalloc+0x194>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc5a:	e004      	b.n	800bc66 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d903      	bls.n	800bc78 <pvPortMalloc+0xa4>
 800bc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d1f1      	bne.n	800bc5c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bc78:	4b38      	ldr	r3, [pc, #224]	; (800bd5c <pvPortMalloc+0x188>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d050      	beq.n	800bd24 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bc82:	6a3b      	ldr	r3, [r7, #32]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2208      	movs	r2, #8
 800bc88:	4413      	add	r3, r2
 800bc8a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	6a3b      	ldr	r3, [r7, #32]
 800bc92:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc96:	685a      	ldr	r2, [r3, #4]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	1ad2      	subs	r2, r2, r3
 800bc9c:	2308      	movs	r3, #8
 800bc9e:	005b      	lsls	r3, r3, #1
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d91f      	bls.n	800bce4 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	4413      	add	r3, r2
 800bcaa:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bcac:	69bb      	ldr	r3, [r7, #24]
 800bcae:	f003 0307 	and.w	r3, r3, #7
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d00a      	beq.n	800bccc <pvPortMalloc+0xf8>
	__asm volatile
 800bcb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcba:	f383 8811 	msr	BASEPRI, r3
 800bcbe:	f3bf 8f6f 	isb	sy
 800bcc2:	f3bf 8f4f 	dsb	sy
 800bcc6:	613b      	str	r3, [r7, #16]
}
 800bcc8:	bf00      	nop
 800bcca:	e7fe      	b.n	800bcca <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcce:	685a      	ldr	r2, [r3, #4]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	1ad2      	subs	r2, r2, r3
 800bcd4:	69bb      	ldr	r3, [r7, #24]
 800bcd6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bcde:	69b8      	ldr	r0, [r7, #24]
 800bce0:	f000 f90c 	bl	800befc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bce4:	4b1f      	ldr	r3, [pc, #124]	; (800bd64 <pvPortMalloc+0x190>)
 800bce6:	681a      	ldr	r2, [r3, #0]
 800bce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	1ad3      	subs	r3, r2, r3
 800bcee:	4a1d      	ldr	r2, [pc, #116]	; (800bd64 <pvPortMalloc+0x190>)
 800bcf0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bcf2:	4b1c      	ldr	r3, [pc, #112]	; (800bd64 <pvPortMalloc+0x190>)
 800bcf4:	681a      	ldr	r2, [r3, #0]
 800bcf6:	4b1d      	ldr	r3, [pc, #116]	; (800bd6c <pvPortMalloc+0x198>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d203      	bcs.n	800bd06 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bcfe:	4b19      	ldr	r3, [pc, #100]	; (800bd64 <pvPortMalloc+0x190>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a1a      	ldr	r2, [pc, #104]	; (800bd6c <pvPortMalloc+0x198>)
 800bd04:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd08:	685a      	ldr	r2, [r3, #4]
 800bd0a:	4b15      	ldr	r3, [pc, #84]	; (800bd60 <pvPortMalloc+0x18c>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	431a      	orrs	r2, r3
 800bd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd12:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd16:	2200      	movs	r2, #0
 800bd18:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bd1a:	4b15      	ldr	r3, [pc, #84]	; (800bd70 <pvPortMalloc+0x19c>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	3301      	adds	r3, #1
 800bd20:	4a13      	ldr	r2, [pc, #76]	; (800bd70 <pvPortMalloc+0x19c>)
 800bd22:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bd24:	f001 fcd6 	bl	800d6d4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d101      	bne.n	800bd32 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800bd2e:	f7f6 fe63 	bl	80029f8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd32:	69fb      	ldr	r3, [r7, #28]
 800bd34:	f003 0307 	and.w	r3, r3, #7
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d00a      	beq.n	800bd52 <pvPortMalloc+0x17e>
	__asm volatile
 800bd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd40:	f383 8811 	msr	BASEPRI, r3
 800bd44:	f3bf 8f6f 	isb	sy
 800bd48:	f3bf 8f4f 	dsb	sy
 800bd4c:	60fb      	str	r3, [r7, #12]
}
 800bd4e:	bf00      	nop
 800bd50:	e7fe      	b.n	800bd50 <pvPortMalloc+0x17c>
	return pvReturn;
 800bd52:	69fb      	ldr	r3, [r7, #28]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3728      	adds	r7, #40	; 0x28
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}
 800bd5c:	20004ea0 	.word	0x20004ea0
 800bd60:	20004eb4 	.word	0x20004eb4
 800bd64:	20004ea4 	.word	0x20004ea4
 800bd68:	20004e98 	.word	0x20004e98
 800bd6c:	20004ea8 	.word	0x20004ea8
 800bd70:	20004eac 	.word	0x20004eac

0800bd74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b086      	sub	sp, #24
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d04d      	beq.n	800be22 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bd86:	2308      	movs	r3, #8
 800bd88:	425b      	negs	r3, r3
 800bd8a:	697a      	ldr	r2, [r7, #20]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	685a      	ldr	r2, [r3, #4]
 800bd98:	4b24      	ldr	r3, [pc, #144]	; (800be2c <vPortFree+0xb8>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4013      	ands	r3, r2
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d10a      	bne.n	800bdb8 <vPortFree+0x44>
	__asm volatile
 800bda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda6:	f383 8811 	msr	BASEPRI, r3
 800bdaa:	f3bf 8f6f 	isb	sy
 800bdae:	f3bf 8f4f 	dsb	sy
 800bdb2:	60fb      	str	r3, [r7, #12]
}
 800bdb4:	bf00      	nop
 800bdb6:	e7fe      	b.n	800bdb6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d00a      	beq.n	800bdd6 <vPortFree+0x62>
	__asm volatile
 800bdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc4:	f383 8811 	msr	BASEPRI, r3
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	60bb      	str	r3, [r7, #8]
}
 800bdd2:	bf00      	nop
 800bdd4:	e7fe      	b.n	800bdd4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	685a      	ldr	r2, [r3, #4]
 800bdda:	4b14      	ldr	r3, [pc, #80]	; (800be2c <vPortFree+0xb8>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4013      	ands	r3, r2
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d01e      	beq.n	800be22 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d11a      	bne.n	800be22 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	685a      	ldr	r2, [r3, #4]
 800bdf0:	4b0e      	ldr	r3, [pc, #56]	; (800be2c <vPortFree+0xb8>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	43db      	mvns	r3, r3
 800bdf6:	401a      	ands	r2, r3
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bdfc:	f001 fc24 	bl	800d648 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	685a      	ldr	r2, [r3, #4]
 800be04:	4b0a      	ldr	r3, [pc, #40]	; (800be30 <vPortFree+0xbc>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4413      	add	r3, r2
 800be0a:	4a09      	ldr	r2, [pc, #36]	; (800be30 <vPortFree+0xbc>)
 800be0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800be0e:	6938      	ldr	r0, [r7, #16]
 800be10:	f000 f874 	bl	800befc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800be14:	4b07      	ldr	r3, [pc, #28]	; (800be34 <vPortFree+0xc0>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	3301      	adds	r3, #1
 800be1a:	4a06      	ldr	r2, [pc, #24]	; (800be34 <vPortFree+0xc0>)
 800be1c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800be1e:	f001 fc59 	bl	800d6d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800be22:	bf00      	nop
 800be24:	3718      	adds	r7, #24
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
 800be2a:	bf00      	nop
 800be2c:	20004eb4 	.word	0x20004eb4
 800be30:	20004ea4 	.word	0x20004ea4
 800be34:	20004eb0 	.word	0x20004eb0

0800be38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800be38:	b480      	push	{r7}
 800be3a:	b085      	sub	sp, #20
 800be3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800be3e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800be42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800be44:	4b27      	ldr	r3, [pc, #156]	; (800bee4 <prvHeapInit+0xac>)
 800be46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f003 0307 	and.w	r3, r3, #7
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d00c      	beq.n	800be6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	3307      	adds	r3, #7
 800be56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f023 0307 	bic.w	r3, r3, #7
 800be5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800be60:	68ba      	ldr	r2, [r7, #8]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	1ad3      	subs	r3, r2, r3
 800be66:	4a1f      	ldr	r2, [pc, #124]	; (800bee4 <prvHeapInit+0xac>)
 800be68:	4413      	add	r3, r2
 800be6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800be70:	4a1d      	ldr	r2, [pc, #116]	; (800bee8 <prvHeapInit+0xb0>)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800be76:	4b1c      	ldr	r3, [pc, #112]	; (800bee8 <prvHeapInit+0xb0>)
 800be78:	2200      	movs	r2, #0
 800be7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	68ba      	ldr	r2, [r7, #8]
 800be80:	4413      	add	r3, r2
 800be82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800be84:	2208      	movs	r2, #8
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	1a9b      	subs	r3, r3, r2
 800be8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f023 0307 	bic.w	r3, r3, #7
 800be92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	4a15      	ldr	r2, [pc, #84]	; (800beec <prvHeapInit+0xb4>)
 800be98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800be9a:	4b14      	ldr	r3, [pc, #80]	; (800beec <prvHeapInit+0xb4>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	2200      	movs	r2, #0
 800bea0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bea2:	4b12      	ldr	r3, [pc, #72]	; (800beec <prvHeapInit+0xb4>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2200      	movs	r2, #0
 800bea8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	68fa      	ldr	r2, [r7, #12]
 800beb2:	1ad2      	subs	r2, r2, r3
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800beb8:	4b0c      	ldr	r3, [pc, #48]	; (800beec <prvHeapInit+0xb4>)
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	4a0a      	ldr	r2, [pc, #40]	; (800bef0 <prvHeapInit+0xb8>)
 800bec6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	4a09      	ldr	r2, [pc, #36]	; (800bef4 <prvHeapInit+0xbc>)
 800bece:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bed0:	4b09      	ldr	r3, [pc, #36]	; (800bef8 <prvHeapInit+0xc0>)
 800bed2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bed6:	601a      	str	r2, [r3, #0]
}
 800bed8:	bf00      	nop
 800beda:	3714      	adds	r7, #20
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr
 800bee4:	20001298 	.word	0x20001298
 800bee8:	20004e98 	.word	0x20004e98
 800beec:	20004ea0 	.word	0x20004ea0
 800bef0:	20004ea8 	.word	0x20004ea8
 800bef4:	20004ea4 	.word	0x20004ea4
 800bef8:	20004eb4 	.word	0x20004eb4

0800befc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800befc:	b480      	push	{r7}
 800befe:	b085      	sub	sp, #20
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bf04:	4b28      	ldr	r3, [pc, #160]	; (800bfa8 <prvInsertBlockIntoFreeList+0xac>)
 800bf06:	60fb      	str	r3, [r7, #12]
 800bf08:	e002      	b.n	800bf10 <prvInsertBlockIntoFreeList+0x14>
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	60fb      	str	r3, [r7, #12]
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d8f7      	bhi.n	800bf0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	68ba      	ldr	r2, [r7, #8]
 800bf24:	4413      	add	r3, r2
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d108      	bne.n	800bf3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	685a      	ldr	r2, [r3, #4]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	441a      	add	r2, r3
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	68ba      	ldr	r2, [r7, #8]
 800bf48:	441a      	add	r2, r3
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d118      	bne.n	800bf84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	4b15      	ldr	r3, [pc, #84]	; (800bfac <prvInsertBlockIntoFreeList+0xb0>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d00d      	beq.n	800bf7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	685a      	ldr	r2, [r3, #4]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	441a      	add	r2, r3
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	601a      	str	r2, [r3, #0]
 800bf78:	e008      	b.n	800bf8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bf7a:	4b0c      	ldr	r3, [pc, #48]	; (800bfac <prvInsertBlockIntoFreeList+0xb0>)
 800bf7c:	681a      	ldr	r2, [r3, #0]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	601a      	str	r2, [r3, #0]
 800bf82:	e003      	b.n	800bf8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bf8c:	68fa      	ldr	r2, [r7, #12]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d002      	beq.n	800bf9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf9a:	bf00      	nop
 800bf9c:	3714      	adds	r7, #20
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop
 800bfa8:	20004e98 	.word	0x20004e98
 800bfac:	20004ea0 	.word	0x20004ea0

0800bfb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f103 0208 	add.w	r2, r3, #8
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f04f 32ff 	mov.w	r2, #4294967295
 800bfc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f103 0208 	add.w	r2, r3, #8
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f103 0208 	add.w	r2, r3, #8
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bfe4:	bf00      	nop
 800bfe6:	370c      	adds	r7, #12
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr

0800bff0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bff0:	b480      	push	{r7}
 800bff2:	b083      	sub	sp, #12
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2200      	movs	r2, #0
 800bffc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bffe:	bf00      	nop
 800c000:	370c      	adds	r7, #12
 800c002:	46bd      	mov	sp, r7
 800c004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c008:	4770      	bx	lr

0800c00a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c00a:	b480      	push	{r7}
 800c00c:	b085      	sub	sp, #20
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
 800c012:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	689a      	ldr	r2, [r3, #8]
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	689b      	ldr	r3, [r3, #8]
 800c02c:	683a      	ldr	r2, [r7, #0]
 800c02e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	683a      	ldr	r2, [r7, #0]
 800c034:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	687a      	ldr	r2, [r7, #4]
 800c03a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	1c5a      	adds	r2, r3, #1
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	601a      	str	r2, [r3, #0]
}
 800c046:	bf00      	nop
 800c048:	3714      	adds	r7, #20
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr

0800c052 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c052:	b480      	push	{r7}
 800c054:	b085      	sub	sp, #20
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
 800c05a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c068:	d103      	bne.n	800c072 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	691b      	ldr	r3, [r3, #16]
 800c06e:	60fb      	str	r3, [r7, #12]
 800c070:	e00c      	b.n	800c08c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	3308      	adds	r3, #8
 800c076:	60fb      	str	r3, [r7, #12]
 800c078:	e002      	b.n	800c080 <vListInsert+0x2e>
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	60fb      	str	r3, [r7, #12]
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	68ba      	ldr	r2, [r7, #8]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d2f6      	bcs.n	800c07a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	685a      	ldr	r2, [r3, #4]
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	683a      	ldr	r2, [r7, #0]
 800c09a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	68fa      	ldr	r2, [r7, #12]
 800c0a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	683a      	ldr	r2, [r7, #0]
 800c0a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	1c5a      	adds	r2, r3, #1
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	601a      	str	r2, [r3, #0]
}
 800c0b8:	bf00      	nop
 800c0ba:	3714      	adds	r7, #20
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr

0800c0c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b085      	sub	sp, #20
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	691b      	ldr	r3, [r3, #16]
 800c0d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	6892      	ldr	r2, [r2, #8]
 800c0da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	6852      	ldr	r2, [r2, #4]
 800c0e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	687a      	ldr	r2, [r7, #4]
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d103      	bne.n	800c0f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	689a      	ldr	r2, [r3, #8]
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	1e5a      	subs	r2, r3, #1
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3714      	adds	r7, #20
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c118:	b480      	push	{r7}
 800c11a:	b085      	sub	sp, #20
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	3b04      	subs	r3, #4
 800c128:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c130:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	3b04      	subs	r3, #4
 800c136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	f023 0201 	bic.w	r2, r3, #1
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	3b04      	subs	r3, #4
 800c146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c148:	4a0c      	ldr	r2, [pc, #48]	; (800c17c <pxPortInitialiseStack+0x64>)
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	3b14      	subs	r3, #20
 800c152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	3b04      	subs	r3, #4
 800c15e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f06f 0202 	mvn.w	r2, #2
 800c166:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	3b20      	subs	r3, #32
 800c16c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c16e:	68fb      	ldr	r3, [r7, #12]
}
 800c170:	4618      	mov	r0, r3
 800c172:	3714      	adds	r7, #20
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr
 800c17c:	0800c181 	.word	0x0800c181

0800c180 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c180:	b480      	push	{r7}
 800c182:	b085      	sub	sp, #20
 800c184:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c186:	2300      	movs	r3, #0
 800c188:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c18a:	4b12      	ldr	r3, [pc, #72]	; (800c1d4 <prvTaskExitError+0x54>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c192:	d00a      	beq.n	800c1aa <prvTaskExitError+0x2a>
	__asm volatile
 800c194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c198:	f383 8811 	msr	BASEPRI, r3
 800c19c:	f3bf 8f6f 	isb	sy
 800c1a0:	f3bf 8f4f 	dsb	sy
 800c1a4:	60fb      	str	r3, [r7, #12]
}
 800c1a6:	bf00      	nop
 800c1a8:	e7fe      	b.n	800c1a8 <prvTaskExitError+0x28>
	__asm volatile
 800c1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ae:	f383 8811 	msr	BASEPRI, r3
 800c1b2:	f3bf 8f6f 	isb	sy
 800c1b6:	f3bf 8f4f 	dsb	sy
 800c1ba:	60bb      	str	r3, [r7, #8]
}
 800c1bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c1be:	bf00      	nop
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d0fc      	beq.n	800c1c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c1c6:	bf00      	nop
 800c1c8:	bf00      	nop
 800c1ca:	3714      	adds	r7, #20
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr
 800c1d4:	2000000c 	.word	0x2000000c
	...

0800c1e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c1e0:	4b07      	ldr	r3, [pc, #28]	; (800c200 <pxCurrentTCBConst2>)
 800c1e2:	6819      	ldr	r1, [r3, #0]
 800c1e4:	6808      	ldr	r0, [r1, #0]
 800c1e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ea:	f380 8809 	msr	PSP, r0
 800c1ee:	f3bf 8f6f 	isb	sy
 800c1f2:	f04f 0000 	mov.w	r0, #0
 800c1f6:	f380 8811 	msr	BASEPRI, r0
 800c1fa:	4770      	bx	lr
 800c1fc:	f3af 8000 	nop.w

0800c200 <pxCurrentTCBConst2>:
 800c200:	20004f0c 	.word	0x20004f0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c204:	bf00      	nop
 800c206:	bf00      	nop

0800c208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c208:	4808      	ldr	r0, [pc, #32]	; (800c22c <prvPortStartFirstTask+0x24>)
 800c20a:	6800      	ldr	r0, [r0, #0]
 800c20c:	6800      	ldr	r0, [r0, #0]
 800c20e:	f380 8808 	msr	MSP, r0
 800c212:	f04f 0000 	mov.w	r0, #0
 800c216:	f380 8814 	msr	CONTROL, r0
 800c21a:	b662      	cpsie	i
 800c21c:	b661      	cpsie	f
 800c21e:	f3bf 8f4f 	dsb	sy
 800c222:	f3bf 8f6f 	isb	sy
 800c226:	df00      	svc	0
 800c228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c22a:	bf00      	nop
 800c22c:	e000ed08 	.word	0xe000ed08

0800c230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b086      	sub	sp, #24
 800c234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c236:	4b46      	ldr	r3, [pc, #280]	; (800c350 <xPortStartScheduler+0x120>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	4a46      	ldr	r2, [pc, #280]	; (800c354 <xPortStartScheduler+0x124>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d10a      	bne.n	800c256 <xPortStartScheduler+0x26>
	__asm volatile
 800c240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	613b      	str	r3, [r7, #16]
}
 800c252:	bf00      	nop
 800c254:	e7fe      	b.n	800c254 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c256:	4b3e      	ldr	r3, [pc, #248]	; (800c350 <xPortStartScheduler+0x120>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4a3f      	ldr	r2, [pc, #252]	; (800c358 <xPortStartScheduler+0x128>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d10a      	bne.n	800c276 <xPortStartScheduler+0x46>
	__asm volatile
 800c260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c264:	f383 8811 	msr	BASEPRI, r3
 800c268:	f3bf 8f6f 	isb	sy
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	60fb      	str	r3, [r7, #12]
}
 800c272:	bf00      	nop
 800c274:	e7fe      	b.n	800c274 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c276:	4b39      	ldr	r3, [pc, #228]	; (800c35c <xPortStartScheduler+0x12c>)
 800c278:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	b2db      	uxtb	r3, r3
 800c280:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	22ff      	movs	r2, #255	; 0xff
 800c286:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c290:	78fb      	ldrb	r3, [r7, #3]
 800c292:	b2db      	uxtb	r3, r3
 800c294:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c298:	b2da      	uxtb	r2, r3
 800c29a:	4b31      	ldr	r3, [pc, #196]	; (800c360 <xPortStartScheduler+0x130>)
 800c29c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c29e:	4b31      	ldr	r3, [pc, #196]	; (800c364 <xPortStartScheduler+0x134>)
 800c2a0:	2207      	movs	r2, #7
 800c2a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2a4:	e009      	b.n	800c2ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c2a6:	4b2f      	ldr	r3, [pc, #188]	; (800c364 <xPortStartScheduler+0x134>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	3b01      	subs	r3, #1
 800c2ac:	4a2d      	ldr	r2, [pc, #180]	; (800c364 <xPortStartScheduler+0x134>)
 800c2ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c2b0:	78fb      	ldrb	r3, [r7, #3]
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	005b      	lsls	r3, r3, #1
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2ba:	78fb      	ldrb	r3, [r7, #3]
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2c2:	2b80      	cmp	r3, #128	; 0x80
 800c2c4:	d0ef      	beq.n	800c2a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c2c6:	4b27      	ldr	r3, [pc, #156]	; (800c364 <xPortStartScheduler+0x134>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f1c3 0307 	rsb	r3, r3, #7
 800c2ce:	2b04      	cmp	r3, #4
 800c2d0:	d00a      	beq.n	800c2e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d6:	f383 8811 	msr	BASEPRI, r3
 800c2da:	f3bf 8f6f 	isb	sy
 800c2de:	f3bf 8f4f 	dsb	sy
 800c2e2:	60bb      	str	r3, [r7, #8]
}
 800c2e4:	bf00      	nop
 800c2e6:	e7fe      	b.n	800c2e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c2e8:	4b1e      	ldr	r3, [pc, #120]	; (800c364 <xPortStartScheduler+0x134>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	021b      	lsls	r3, r3, #8
 800c2ee:	4a1d      	ldr	r2, [pc, #116]	; (800c364 <xPortStartScheduler+0x134>)
 800c2f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c2f2:	4b1c      	ldr	r3, [pc, #112]	; (800c364 <xPortStartScheduler+0x134>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c2fa:	4a1a      	ldr	r2, [pc, #104]	; (800c364 <xPortStartScheduler+0x134>)
 800c2fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	b2da      	uxtb	r2, r3
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c306:	4b18      	ldr	r3, [pc, #96]	; (800c368 <xPortStartScheduler+0x138>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4a17      	ldr	r2, [pc, #92]	; (800c368 <xPortStartScheduler+0x138>)
 800c30c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c310:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c312:	4b15      	ldr	r3, [pc, #84]	; (800c368 <xPortStartScheduler+0x138>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	4a14      	ldr	r2, [pc, #80]	; (800c368 <xPortStartScheduler+0x138>)
 800c318:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c31c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c31e:	f000 f9a9 	bl	800c674 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c322:	4b12      	ldr	r3, [pc, #72]	; (800c36c <xPortStartScheduler+0x13c>)
 800c324:	2200      	movs	r2, #0
 800c326:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c328:	f000 f9e0 	bl	800c6ec <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c32c:	4b10      	ldr	r3, [pc, #64]	; (800c370 <xPortStartScheduler+0x140>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4a0f      	ldr	r2, [pc, #60]	; (800c370 <xPortStartScheduler+0x140>)
 800c332:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c336:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c338:	f7ff ff66 	bl	800c208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c33c:	f001 fb62 	bl	800da04 <vTaskSwitchContext>
	prvTaskExitError();
 800c340:	f7ff ff1e 	bl	800c180 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c344:	2300      	movs	r3, #0
}
 800c346:	4618      	mov	r0, r3
 800c348:	3718      	adds	r7, #24
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	e000ed00 	.word	0xe000ed00
 800c354:	410fc271 	.word	0x410fc271
 800c358:	410fc270 	.word	0x410fc270
 800c35c:	e000e400 	.word	0xe000e400
 800c360:	20004ec4 	.word	0x20004ec4
 800c364:	20004ec8 	.word	0x20004ec8
 800c368:	e000ed20 	.word	0xe000ed20
 800c36c:	2000000c 	.word	0x2000000c
 800c370:	e000ef34 	.word	0xe000ef34

0800c374 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
	__asm volatile
 800c37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37e:	f383 8811 	msr	BASEPRI, r3
 800c382:	f3bf 8f6f 	isb	sy
 800c386:	f3bf 8f4f 	dsb	sy
 800c38a:	607b      	str	r3, [r7, #4]
}
 800c38c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c38e:	4b0f      	ldr	r3, [pc, #60]	; (800c3cc <vPortEnterCritical+0x58>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	3301      	adds	r3, #1
 800c394:	4a0d      	ldr	r2, [pc, #52]	; (800c3cc <vPortEnterCritical+0x58>)
 800c396:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c398:	4b0c      	ldr	r3, [pc, #48]	; (800c3cc <vPortEnterCritical+0x58>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	d10f      	bne.n	800c3c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c3a0:	4b0b      	ldr	r3, [pc, #44]	; (800c3d0 <vPortEnterCritical+0x5c>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d00a      	beq.n	800c3c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ae:	f383 8811 	msr	BASEPRI, r3
 800c3b2:	f3bf 8f6f 	isb	sy
 800c3b6:	f3bf 8f4f 	dsb	sy
 800c3ba:	603b      	str	r3, [r7, #0]
}
 800c3bc:	bf00      	nop
 800c3be:	e7fe      	b.n	800c3be <vPortEnterCritical+0x4a>
	}
}
 800c3c0:	bf00      	nop
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr
 800c3cc:	2000000c 	.word	0x2000000c
 800c3d0:	e000ed04 	.word	0xe000ed04

0800c3d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c3da:	4b12      	ldr	r3, [pc, #72]	; (800c424 <vPortExitCritical+0x50>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d10a      	bne.n	800c3f8 <vPortExitCritical+0x24>
	__asm volatile
 800c3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e6:	f383 8811 	msr	BASEPRI, r3
 800c3ea:	f3bf 8f6f 	isb	sy
 800c3ee:	f3bf 8f4f 	dsb	sy
 800c3f2:	607b      	str	r3, [r7, #4]
}
 800c3f4:	bf00      	nop
 800c3f6:	e7fe      	b.n	800c3f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c3f8:	4b0a      	ldr	r3, [pc, #40]	; (800c424 <vPortExitCritical+0x50>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	3b01      	subs	r3, #1
 800c3fe:	4a09      	ldr	r2, [pc, #36]	; (800c424 <vPortExitCritical+0x50>)
 800c400:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c402:	4b08      	ldr	r3, [pc, #32]	; (800c424 <vPortExitCritical+0x50>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d105      	bne.n	800c416 <vPortExitCritical+0x42>
 800c40a:	2300      	movs	r3, #0
 800c40c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	f383 8811 	msr	BASEPRI, r3
}
 800c414:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c416:	bf00      	nop
 800c418:	370c      	adds	r7, #12
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr
 800c422:	bf00      	nop
 800c424:	2000000c 	.word	0x2000000c
	...

0800c430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c430:	f3ef 8009 	mrs	r0, PSP
 800c434:	f3bf 8f6f 	isb	sy
 800c438:	4b15      	ldr	r3, [pc, #84]	; (800c490 <pxCurrentTCBConst>)
 800c43a:	681a      	ldr	r2, [r3, #0]
 800c43c:	f01e 0f10 	tst.w	lr, #16
 800c440:	bf08      	it	eq
 800c442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c44a:	6010      	str	r0, [r2, #0]
 800c44c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c450:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c454:	f380 8811 	msr	BASEPRI, r0
 800c458:	f3bf 8f4f 	dsb	sy
 800c45c:	f3bf 8f6f 	isb	sy
 800c460:	f001 fad0 	bl	800da04 <vTaskSwitchContext>
 800c464:	f04f 0000 	mov.w	r0, #0
 800c468:	f380 8811 	msr	BASEPRI, r0
 800c46c:	bc09      	pop	{r0, r3}
 800c46e:	6819      	ldr	r1, [r3, #0]
 800c470:	6808      	ldr	r0, [r1, #0]
 800c472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c476:	f01e 0f10 	tst.w	lr, #16
 800c47a:	bf08      	it	eq
 800c47c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c480:	f380 8809 	msr	PSP, r0
 800c484:	f3bf 8f6f 	isb	sy
 800c488:	4770      	bx	lr
 800c48a:	bf00      	nop
 800c48c:	f3af 8000 	nop.w

0800c490 <pxCurrentTCBConst>:
 800c490:	20004f0c 	.word	0x20004f0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c494:	bf00      	nop
 800c496:	bf00      	nop

0800c498 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
	__asm volatile
 800c49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a2:	f383 8811 	msr	BASEPRI, r3
 800c4a6:	f3bf 8f6f 	isb	sy
 800c4aa:	f3bf 8f4f 	dsb	sy
 800c4ae:	607b      	str	r3, [r7, #4]
}
 800c4b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c4b2:	f001 f9e5 	bl	800d880 <xTaskIncrementTick>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d003      	beq.n	800c4c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c4bc:	4b06      	ldr	r3, [pc, #24]	; (800c4d8 <xPortSysTickHandler+0x40>)
 800c4be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4c2:	601a      	str	r2, [r3, #0]
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	f383 8811 	msr	BASEPRI, r3
}
 800c4ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c4d0:	bf00      	nop
 800c4d2:	3708      	adds	r7, #8
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	e000ed04 	.word	0xe000ed04

0800c4dc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b088      	sub	sp, #32
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800c4e4:	4b5d      	ldr	r3, [pc, #372]	; (800c65c <vPortSuppressTicksAndSleep+0x180>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d902      	bls.n	800c4f4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800c4ee:	4b5b      	ldr	r3, [pc, #364]	; (800c65c <vPortSuppressTicksAndSleep+0x180>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800c4f4:	4b5a      	ldr	r3, [pc, #360]	; (800c660 <vPortSuppressTicksAndSleep+0x184>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a59      	ldr	r2, [pc, #356]	; (800c660 <vPortSuppressTicksAndSleep+0x184>)
 800c4fa:	f023 0301 	bic.w	r3, r3, #1
 800c4fe:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800c500:	4b58      	ldr	r3, [pc, #352]	; (800c664 <vPortSuppressTicksAndSleep+0x188>)
 800c502:	681a      	ldr	r2, [r3, #0]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	3b01      	subs	r3, #1
 800c508:	4957      	ldr	r1, [pc, #348]	; (800c668 <vPortSuppressTicksAndSleep+0x18c>)
 800c50a:	6809      	ldr	r1, [r1, #0]
 800c50c:	fb01 f303 	mul.w	r3, r1, r3
 800c510:	4413      	add	r3, r2
 800c512:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800c514:	4b55      	ldr	r3, [pc, #340]	; (800c66c <vPortSuppressTicksAndSleep+0x190>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	69fa      	ldr	r2, [r7, #28]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d904      	bls.n	800c528 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800c51e:	4b53      	ldr	r3, [pc, #332]	; (800c66c <vPortSuppressTicksAndSleep+0x190>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	69fa      	ldr	r2, [r7, #28]
 800c524:	1ad3      	subs	r3, r2, r3
 800c526:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800c528:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800c52a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800c52e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800c532:	f001 fc95 	bl	800de60 <eTaskConfirmSleepModeStatus>
 800c536:	4603      	mov	r3, r0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d110      	bne.n	800c55e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800c53c:	4b49      	ldr	r3, [pc, #292]	; (800c664 <vPortSuppressTicksAndSleep+0x188>)
 800c53e:	4a4c      	ldr	r2, [pc, #304]	; (800c670 <vPortSuppressTicksAndSleep+0x194>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800c544:	4b46      	ldr	r3, [pc, #280]	; (800c660 <vPortSuppressTicksAndSleep+0x184>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4a45      	ldr	r2, [pc, #276]	; (800c660 <vPortSuppressTicksAndSleep+0x184>)
 800c54a:	f043 0301 	orr.w	r3, r3, #1
 800c54e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800c550:	4b45      	ldr	r3, [pc, #276]	; (800c668 <vPortSuppressTicksAndSleep+0x18c>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4a46      	ldr	r2, [pc, #280]	; (800c670 <vPortSuppressTicksAndSleep+0x194>)
 800c556:	3b01      	subs	r3, #1
 800c558:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800c55a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800c55c:	e079      	b.n	800c652 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800c55e:	4a44      	ldr	r2, [pc, #272]	; (800c670 <vPortSuppressTicksAndSleep+0x194>)
 800c560:	69fb      	ldr	r3, [r7, #28]
 800c562:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c564:	4b3f      	ldr	r3, [pc, #252]	; (800c664 <vPortSuppressTicksAndSleep+0x188>)
 800c566:	2200      	movs	r2, #0
 800c568:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800c56a:	4b3d      	ldr	r3, [pc, #244]	; (800c660 <vPortSuppressTicksAndSleep+0x184>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4a3c      	ldr	r2, [pc, #240]	; (800c660 <vPortSuppressTicksAndSleep+0x184>)
 800c570:	f043 0301 	orr.w	r3, r3, #1
 800c574:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800c57a:	2300      	movs	r3, #0
 800c57c:	613b      	str	r3, [r7, #16]
 800c57e:	6938      	ldr	r0, [r7, #16]
 800c580:	f7f6 fa48 	bl	8002a14 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d004      	beq.n	800c594 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800c58a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800c58e:	bf30      	wfi
				__asm volatile( "isb" );
 800c590:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f7f6 fa47 	bl	8002a28 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800c59a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800c59c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800c5a0:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800c5a4:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800c5a6:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800c5aa:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800c5ae:	4b2c      	ldr	r3, [pc, #176]	; (800c660 <vPortSuppressTicksAndSleep+0x184>)
 800c5b0:	2206      	movs	r2, #6
 800c5b2:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800c5b4:	4b2a      	ldr	r3, [pc, #168]	; (800c660 <vPortSuppressTicksAndSleep+0x184>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d01d      	beq.n	800c5fc <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800c5c0:	4b29      	ldr	r3, [pc, #164]	; (800c668 <vPortSuppressTicksAndSleep+0x18c>)
 800c5c2:	681a      	ldr	r2, [r3, #0]
 800c5c4:	4b27      	ldr	r3, [pc, #156]	; (800c664 <vPortSuppressTicksAndSleep+0x188>)
 800c5c6:	6819      	ldr	r1, [r3, #0]
 800c5c8:	69fb      	ldr	r3, [r7, #28]
 800c5ca:	1acb      	subs	r3, r1, r3
 800c5cc:	4413      	add	r3, r2
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800c5d2:	4b26      	ldr	r3, [pc, #152]	; (800c66c <vPortSuppressTicksAndSleep+0x190>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	697a      	ldr	r2, [r7, #20]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d304      	bcc.n	800c5e6 <vPortSuppressTicksAndSleep+0x10a>
 800c5dc:	4b22      	ldr	r3, [pc, #136]	; (800c668 <vPortSuppressTicksAndSleep+0x18c>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	697a      	ldr	r2, [r7, #20]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d903      	bls.n	800c5ee <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800c5e6:	4b20      	ldr	r3, [pc, #128]	; (800c668 <vPortSuppressTicksAndSleep+0x18c>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	3b01      	subs	r3, #1
 800c5ec:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800c5ee:	4a20      	ldr	r2, [pc, #128]	; (800c670 <vPortSuppressTicksAndSleep+0x194>)
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	61bb      	str	r3, [r7, #24]
 800c5fa:	e018      	b.n	800c62e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800c5fc:	4b1a      	ldr	r3, [pc, #104]	; (800c668 <vPortSuppressTicksAndSleep+0x18c>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	fb03 f202 	mul.w	r2, r3, r2
 800c606:	4b17      	ldr	r3, [pc, #92]	; (800c664 <vPortSuppressTicksAndSleep+0x188>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	1ad3      	subs	r3, r2, r3
 800c60c:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800c60e:	4b16      	ldr	r3, [pc, #88]	; (800c668 <vPortSuppressTicksAndSleep+0x18c>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	fbb2 f3f3 	udiv	r3, r2, r3
 800c618:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800c61a:	69bb      	ldr	r3, [r7, #24]
 800c61c:	3301      	adds	r3, #1
 800c61e:	4a12      	ldr	r2, [pc, #72]	; (800c668 <vPortSuppressTicksAndSleep+0x18c>)
 800c620:	6812      	ldr	r2, [r2, #0]
 800c622:	fb03 f202 	mul.w	r2, r3, r2
 800c626:	4912      	ldr	r1, [pc, #72]	; (800c670 <vPortSuppressTicksAndSleep+0x194>)
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	1ad3      	subs	r3, r2, r3
 800c62c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c62e:	4b0d      	ldr	r3, [pc, #52]	; (800c664 <vPortSuppressTicksAndSleep+0x188>)
 800c630:	2200      	movs	r2, #0
 800c632:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800c634:	4b0a      	ldr	r3, [pc, #40]	; (800c660 <vPortSuppressTicksAndSleep+0x184>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	4a09      	ldr	r2, [pc, #36]	; (800c660 <vPortSuppressTicksAndSleep+0x184>)
 800c63a:	f043 0301 	orr.w	r3, r3, #1
 800c63e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800c640:	69b8      	ldr	r0, [r7, #24]
 800c642:	f001 f8f5 	bl	800d830 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800c646:	4b08      	ldr	r3, [pc, #32]	; (800c668 <vPortSuppressTicksAndSleep+0x18c>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4a09      	ldr	r2, [pc, #36]	; (800c670 <vPortSuppressTicksAndSleep+0x194>)
 800c64c:	3b01      	subs	r3, #1
 800c64e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800c650:	b662      	cpsie	i
	}
 800c652:	bf00      	nop
 800c654:	3720      	adds	r7, #32
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	20004ebc 	.word	0x20004ebc
 800c660:	e000e010 	.word	0xe000e010
 800c664:	e000e018 	.word	0xe000e018
 800c668:	20004eb8 	.word	0x20004eb8
 800c66c:	20004ec0 	.word	0x20004ec0
 800c670:	e000e014 	.word	0xe000e014

0800c674 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c674:	b480      	push	{r7}
 800c676:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800c678:	4b14      	ldr	r3, [pc, #80]	; (800c6cc <vPortSetupTimerInterrupt+0x58>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4a14      	ldr	r2, [pc, #80]	; (800c6d0 <vPortSetupTimerInterrupt+0x5c>)
 800c67e:	fba2 2303 	umull	r2, r3, r2, r3
 800c682:	099b      	lsrs	r3, r3, #6
 800c684:	4a13      	ldr	r2, [pc, #76]	; (800c6d4 <vPortSetupTimerInterrupt+0x60>)
 800c686:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800c688:	4b12      	ldr	r3, [pc, #72]	; (800c6d4 <vPortSetupTimerInterrupt+0x60>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800c690:	fbb2 f3f3 	udiv	r3, r2, r3
 800c694:	4a10      	ldr	r2, [pc, #64]	; (800c6d8 <vPortSetupTimerInterrupt+0x64>)
 800c696:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800c698:	4b10      	ldr	r3, [pc, #64]	; (800c6dc <vPortSetupTimerInterrupt+0x68>)
 800c69a:	222d      	movs	r2, #45	; 0x2d
 800c69c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c69e:	4b10      	ldr	r3, [pc, #64]	; (800c6e0 <vPortSetupTimerInterrupt+0x6c>)
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c6a4:	4b0f      	ldr	r3, [pc, #60]	; (800c6e4 <vPortSetupTimerInterrupt+0x70>)
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c6aa:	4b08      	ldr	r3, [pc, #32]	; (800c6cc <vPortSetupTimerInterrupt+0x58>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4a08      	ldr	r2, [pc, #32]	; (800c6d0 <vPortSetupTimerInterrupt+0x5c>)
 800c6b0:	fba2 2303 	umull	r2, r3, r2, r3
 800c6b4:	099b      	lsrs	r3, r3, #6
 800c6b6:	4a0c      	ldr	r2, [pc, #48]	; (800c6e8 <vPortSetupTimerInterrupt+0x74>)
 800c6b8:	3b01      	subs	r3, #1
 800c6ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c6bc:	4b08      	ldr	r3, [pc, #32]	; (800c6e0 <vPortSetupTimerInterrupt+0x6c>)
 800c6be:	2207      	movs	r2, #7
 800c6c0:	601a      	str	r2, [r3, #0]
}
 800c6c2:	bf00      	nop
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr
 800c6cc:	20000000 	.word	0x20000000
 800c6d0:	10624dd3 	.word	0x10624dd3
 800c6d4:	20004eb8 	.word	0x20004eb8
 800c6d8:	20004ebc 	.word	0x20004ebc
 800c6dc:	20004ec0 	.word	0x20004ec0
 800c6e0:	e000e010 	.word	0xe000e010
 800c6e4:	e000e018 	.word	0xe000e018
 800c6e8:	e000e014 	.word	0xe000e014

0800c6ec <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c6ec:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c6fc <vPortEnableVFP+0x10>
 800c6f0:	6801      	ldr	r1, [r0, #0]
 800c6f2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c6f6:	6001      	str	r1, [r0, #0]
 800c6f8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c6fa:	bf00      	nop
 800c6fc:	e000ed88 	.word	0xe000ed88

0800c700 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c700:	b480      	push	{r7}
 800c702:	b085      	sub	sp, #20
 800c704:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c706:	f3ef 8305 	mrs	r3, IPSR
 800c70a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	2b0f      	cmp	r3, #15
 800c710:	d914      	bls.n	800c73c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c712:	4a17      	ldr	r2, [pc, #92]	; (800c770 <vPortValidateInterruptPriority+0x70>)
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	4413      	add	r3, r2
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c71c:	4b15      	ldr	r3, [pc, #84]	; (800c774 <vPortValidateInterruptPriority+0x74>)
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	7afa      	ldrb	r2, [r7, #11]
 800c722:	429a      	cmp	r2, r3
 800c724:	d20a      	bcs.n	800c73c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c72a:	f383 8811 	msr	BASEPRI, r3
 800c72e:	f3bf 8f6f 	isb	sy
 800c732:	f3bf 8f4f 	dsb	sy
 800c736:	607b      	str	r3, [r7, #4]
}
 800c738:	bf00      	nop
 800c73a:	e7fe      	b.n	800c73a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c73c:	4b0e      	ldr	r3, [pc, #56]	; (800c778 <vPortValidateInterruptPriority+0x78>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c744:	4b0d      	ldr	r3, [pc, #52]	; (800c77c <vPortValidateInterruptPriority+0x7c>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d90a      	bls.n	800c762 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c750:	f383 8811 	msr	BASEPRI, r3
 800c754:	f3bf 8f6f 	isb	sy
 800c758:	f3bf 8f4f 	dsb	sy
 800c75c:	603b      	str	r3, [r7, #0]
}
 800c75e:	bf00      	nop
 800c760:	e7fe      	b.n	800c760 <vPortValidateInterruptPriority+0x60>
	}
 800c762:	bf00      	nop
 800c764:	3714      	adds	r7, #20
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr
 800c76e:	bf00      	nop
 800c770:	e000e3f0 	.word	0xe000e3f0
 800c774:	20004ec4 	.word	0x20004ec4
 800c778:	e000ed0c 	.word	0xe000ed0c
 800c77c:	20004ec8 	.word	0x20004ec8

0800c780 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d10a      	bne.n	800c7aa <xQueueGenericReset+0x2a>
	__asm volatile
 800c794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c798:	f383 8811 	msr	BASEPRI, r3
 800c79c:	f3bf 8f6f 	isb	sy
 800c7a0:	f3bf 8f4f 	dsb	sy
 800c7a4:	60bb      	str	r3, [r7, #8]
}
 800c7a6:	bf00      	nop
 800c7a8:	e7fe      	b.n	800c7a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c7aa:	f7ff fde3 	bl	800c374 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7b6:	68f9      	ldr	r1, [r7, #12]
 800c7b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c7ba:	fb01 f303 	mul.w	r3, r1, r3
 800c7be:	441a      	add	r2, r3
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681a      	ldr	r2, [r3, #0]
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681a      	ldr	r2, [r3, #0]
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7da:	3b01      	subs	r3, #1
 800c7dc:	68f9      	ldr	r1, [r7, #12]
 800c7de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c7e0:	fb01 f303 	mul.w	r3, r1, r3
 800c7e4:	441a      	add	r2, r3
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	22ff      	movs	r2, #255	; 0xff
 800c7ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	22ff      	movs	r2, #255	; 0xff
 800c7f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d114      	bne.n	800c82a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	691b      	ldr	r3, [r3, #16]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d01a      	beq.n	800c83e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	3310      	adds	r3, #16
 800c80c:	4618      	mov	r0, r3
 800c80e:	f001 f9eb 	bl	800dbe8 <xTaskRemoveFromEventList>
 800c812:	4603      	mov	r3, r0
 800c814:	2b00      	cmp	r3, #0
 800c816:	d012      	beq.n	800c83e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c818:	4b0c      	ldr	r3, [pc, #48]	; (800c84c <xQueueGenericReset+0xcc>)
 800c81a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c81e:	601a      	str	r2, [r3, #0]
 800c820:	f3bf 8f4f 	dsb	sy
 800c824:	f3bf 8f6f 	isb	sy
 800c828:	e009      	b.n	800c83e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	3310      	adds	r3, #16
 800c82e:	4618      	mov	r0, r3
 800c830:	f7ff fbbe 	bl	800bfb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	3324      	adds	r3, #36	; 0x24
 800c838:	4618      	mov	r0, r3
 800c83a:	f7ff fbb9 	bl	800bfb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c83e:	f7ff fdc9 	bl	800c3d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c842:	2301      	movs	r3, #1
}
 800c844:	4618      	mov	r0, r3
 800c846:	3710      	adds	r7, #16
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}
 800c84c:	e000ed04 	.word	0xe000ed04

0800c850 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c850:	b580      	push	{r7, lr}
 800c852:	b08e      	sub	sp, #56	; 0x38
 800c854:	af02      	add	r7, sp, #8
 800c856:	60f8      	str	r0, [r7, #12]
 800c858:	60b9      	str	r1, [r7, #8]
 800c85a:	607a      	str	r2, [r7, #4]
 800c85c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d10a      	bne.n	800c87a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c868:	f383 8811 	msr	BASEPRI, r3
 800c86c:	f3bf 8f6f 	isb	sy
 800c870:	f3bf 8f4f 	dsb	sy
 800c874:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c876:	bf00      	nop
 800c878:	e7fe      	b.n	800c878 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d10a      	bne.n	800c896 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c884:	f383 8811 	msr	BASEPRI, r3
 800c888:	f3bf 8f6f 	isb	sy
 800c88c:	f3bf 8f4f 	dsb	sy
 800c890:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c892:	bf00      	nop
 800c894:	e7fe      	b.n	800c894 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d002      	beq.n	800c8a2 <xQueueGenericCreateStatic+0x52>
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d001      	beq.n	800c8a6 <xQueueGenericCreateStatic+0x56>
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	e000      	b.n	800c8a8 <xQueueGenericCreateStatic+0x58>
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d10a      	bne.n	800c8c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b0:	f383 8811 	msr	BASEPRI, r3
 800c8b4:	f3bf 8f6f 	isb	sy
 800c8b8:	f3bf 8f4f 	dsb	sy
 800c8bc:	623b      	str	r3, [r7, #32]
}
 800c8be:	bf00      	nop
 800c8c0:	e7fe      	b.n	800c8c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d102      	bne.n	800c8ce <xQueueGenericCreateStatic+0x7e>
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d101      	bne.n	800c8d2 <xQueueGenericCreateStatic+0x82>
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	e000      	b.n	800c8d4 <xQueueGenericCreateStatic+0x84>
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d10a      	bne.n	800c8ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8dc:	f383 8811 	msr	BASEPRI, r3
 800c8e0:	f3bf 8f6f 	isb	sy
 800c8e4:	f3bf 8f4f 	dsb	sy
 800c8e8:	61fb      	str	r3, [r7, #28]
}
 800c8ea:	bf00      	nop
 800c8ec:	e7fe      	b.n	800c8ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c8ee:	2350      	movs	r3, #80	; 0x50
 800c8f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	2b50      	cmp	r3, #80	; 0x50
 800c8f6:	d00a      	beq.n	800c90e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fc:	f383 8811 	msr	BASEPRI, r3
 800c900:	f3bf 8f6f 	isb	sy
 800c904:	f3bf 8f4f 	dsb	sy
 800c908:	61bb      	str	r3, [r7, #24]
}
 800c90a:	bf00      	nop
 800c90c:	e7fe      	b.n	800c90c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c90e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c916:	2b00      	cmp	r3, #0
 800c918:	d00d      	beq.n	800c936 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c91c:	2201      	movs	r2, #1
 800c91e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c922:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c928:	9300      	str	r3, [sp, #0]
 800c92a:	4613      	mov	r3, r2
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	68b9      	ldr	r1, [r7, #8]
 800c930:	68f8      	ldr	r0, [r7, #12]
 800c932:	f000 f805 	bl	800c940 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c938:	4618      	mov	r0, r3
 800c93a:	3730      	adds	r7, #48	; 0x30
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
 800c946:	60f8      	str	r0, [r7, #12]
 800c948:	60b9      	str	r1, [r7, #8]
 800c94a:	607a      	str	r2, [r7, #4]
 800c94c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d103      	bne.n	800c95c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c954:	69bb      	ldr	r3, [r7, #24]
 800c956:	69ba      	ldr	r2, [r7, #24]
 800c958:	601a      	str	r2, [r3, #0]
 800c95a:	e002      	b.n	800c962 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c95c:	69bb      	ldr	r3, [r7, #24]
 800c95e:	687a      	ldr	r2, [r7, #4]
 800c960:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c962:	69bb      	ldr	r3, [r7, #24]
 800c964:	68fa      	ldr	r2, [r7, #12]
 800c966:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	68ba      	ldr	r2, [r7, #8]
 800c96c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c96e:	2101      	movs	r1, #1
 800c970:	69b8      	ldr	r0, [r7, #24]
 800c972:	f7ff ff05 	bl	800c780 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c976:	69bb      	ldr	r3, [r7, #24]
 800c978:	78fa      	ldrb	r2, [r7, #3]
 800c97a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c97e:	bf00      	nop
 800c980:	3710      	adds	r7, #16
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
	...

0800c988 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b08e      	sub	sp, #56	; 0x38
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	60b9      	str	r1, [r7, #8]
 800c992:	607a      	str	r2, [r7, #4]
 800c994:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c996:	2300      	movs	r3, #0
 800c998:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d10a      	bne.n	800c9ba <xQueueGenericSend+0x32>
	__asm volatile
 800c9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a8:	f383 8811 	msr	BASEPRI, r3
 800c9ac:	f3bf 8f6f 	isb	sy
 800c9b0:	f3bf 8f4f 	dsb	sy
 800c9b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c9b6:	bf00      	nop
 800c9b8:	e7fe      	b.n	800c9b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d103      	bne.n	800c9c8 <xQueueGenericSend+0x40>
 800c9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d101      	bne.n	800c9cc <xQueueGenericSend+0x44>
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	e000      	b.n	800c9ce <xQueueGenericSend+0x46>
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d10a      	bne.n	800c9e8 <xQueueGenericSend+0x60>
	__asm volatile
 800c9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d6:	f383 8811 	msr	BASEPRI, r3
 800c9da:	f3bf 8f6f 	isb	sy
 800c9de:	f3bf 8f4f 	dsb	sy
 800c9e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c9e4:	bf00      	nop
 800c9e6:	e7fe      	b.n	800c9e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	2b02      	cmp	r3, #2
 800c9ec:	d103      	bne.n	800c9f6 <xQueueGenericSend+0x6e>
 800c9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	d101      	bne.n	800c9fa <xQueueGenericSend+0x72>
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	e000      	b.n	800c9fc <xQueueGenericSend+0x74>
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d10a      	bne.n	800ca16 <xQueueGenericSend+0x8e>
	__asm volatile
 800ca00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca04:	f383 8811 	msr	BASEPRI, r3
 800ca08:	f3bf 8f6f 	isb	sy
 800ca0c:	f3bf 8f4f 	dsb	sy
 800ca10:	623b      	str	r3, [r7, #32]
}
 800ca12:	bf00      	nop
 800ca14:	e7fe      	b.n	800ca14 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca16:	f001 fb15 	bl	800e044 <xTaskGetSchedulerState>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d102      	bne.n	800ca26 <xQueueGenericSend+0x9e>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d101      	bne.n	800ca2a <xQueueGenericSend+0xa2>
 800ca26:	2301      	movs	r3, #1
 800ca28:	e000      	b.n	800ca2c <xQueueGenericSend+0xa4>
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d10a      	bne.n	800ca46 <xQueueGenericSend+0xbe>
	__asm volatile
 800ca30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca34:	f383 8811 	msr	BASEPRI, r3
 800ca38:	f3bf 8f6f 	isb	sy
 800ca3c:	f3bf 8f4f 	dsb	sy
 800ca40:	61fb      	str	r3, [r7, #28]
}
 800ca42:	bf00      	nop
 800ca44:	e7fe      	b.n	800ca44 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca46:	f7ff fc95 	bl	800c374 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ca4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d302      	bcc.n	800ca5c <xQueueGenericSend+0xd4>
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	2b02      	cmp	r3, #2
 800ca5a:	d129      	bne.n	800cab0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ca5c:	683a      	ldr	r2, [r7, #0]
 800ca5e:	68b9      	ldr	r1, [r7, #8]
 800ca60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca62:	f000 fa0b 	bl	800ce7c <prvCopyDataToQueue>
 800ca66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d010      	beq.n	800ca92 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca72:	3324      	adds	r3, #36	; 0x24
 800ca74:	4618      	mov	r0, r3
 800ca76:	f001 f8b7 	bl	800dbe8 <xTaskRemoveFromEventList>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d013      	beq.n	800caa8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ca80:	4b3f      	ldr	r3, [pc, #252]	; (800cb80 <xQueueGenericSend+0x1f8>)
 800ca82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca86:	601a      	str	r2, [r3, #0]
 800ca88:	f3bf 8f4f 	dsb	sy
 800ca8c:	f3bf 8f6f 	isb	sy
 800ca90:	e00a      	b.n	800caa8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ca92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d007      	beq.n	800caa8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ca98:	4b39      	ldr	r3, [pc, #228]	; (800cb80 <xQueueGenericSend+0x1f8>)
 800ca9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca9e:	601a      	str	r2, [r3, #0]
 800caa0:	f3bf 8f4f 	dsb	sy
 800caa4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800caa8:	f7ff fc94 	bl	800c3d4 <vPortExitCritical>
				return pdPASS;
 800caac:	2301      	movs	r3, #1
 800caae:	e063      	b.n	800cb78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d103      	bne.n	800cabe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cab6:	f7ff fc8d 	bl	800c3d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800caba:	2300      	movs	r3, #0
 800cabc:	e05c      	b.n	800cb78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cabe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d106      	bne.n	800cad2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cac4:	f107 0314 	add.w	r3, r7, #20
 800cac8:	4618      	mov	r0, r3
 800caca:	f001 f8f3 	bl	800dcb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cace:	2301      	movs	r3, #1
 800cad0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cad2:	f7ff fc7f 	bl	800c3d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cad6:	f000 fdb7 	bl	800d648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cada:	f7ff fc4b 	bl	800c374 <vPortEnterCritical>
 800cade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cae4:	b25b      	sxtb	r3, r3
 800cae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caea:	d103      	bne.n	800caf4 <xQueueGenericSend+0x16c>
 800caec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caee:	2200      	movs	r2, #0
 800caf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800caf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cafa:	b25b      	sxtb	r3, r3
 800cafc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb00:	d103      	bne.n	800cb0a <xQueueGenericSend+0x182>
 800cb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb04:	2200      	movs	r2, #0
 800cb06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb0a:	f7ff fc63 	bl	800c3d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb0e:	1d3a      	adds	r2, r7, #4
 800cb10:	f107 0314 	add.w	r3, r7, #20
 800cb14:	4611      	mov	r1, r2
 800cb16:	4618      	mov	r0, r3
 800cb18:	f001 f8e2 	bl	800dce0 <xTaskCheckForTimeOut>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d124      	bne.n	800cb6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cb22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb24:	f000 faa2 	bl	800d06c <prvIsQueueFull>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d018      	beq.n	800cb60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb30:	3310      	adds	r3, #16
 800cb32:	687a      	ldr	r2, [r7, #4]
 800cb34:	4611      	mov	r1, r2
 800cb36:	4618      	mov	r0, r3
 800cb38:	f001 f806 	bl	800db48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cb3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb3e:	f000 fa2d 	bl	800cf9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cb42:	f000 fdc7 	bl	800d6d4 <xTaskResumeAll>
 800cb46:	4603      	mov	r3, r0
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	f47f af7c 	bne.w	800ca46 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cb4e:	4b0c      	ldr	r3, [pc, #48]	; (800cb80 <xQueueGenericSend+0x1f8>)
 800cb50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb54:	601a      	str	r2, [r3, #0]
 800cb56:	f3bf 8f4f 	dsb	sy
 800cb5a:	f3bf 8f6f 	isb	sy
 800cb5e:	e772      	b.n	800ca46 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cb60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb62:	f000 fa1b 	bl	800cf9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb66:	f000 fdb5 	bl	800d6d4 <xTaskResumeAll>
 800cb6a:	e76c      	b.n	800ca46 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cb6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb6e:	f000 fa15 	bl	800cf9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb72:	f000 fdaf 	bl	800d6d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cb76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3738      	adds	r7, #56	; 0x38
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}
 800cb80:	e000ed04 	.word	0xe000ed04

0800cb84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b090      	sub	sp, #64	; 0x40
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	607a      	str	r2, [r7, #4]
 800cb90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d10a      	bne.n	800cbb2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba0:	f383 8811 	msr	BASEPRI, r3
 800cba4:	f3bf 8f6f 	isb	sy
 800cba8:	f3bf 8f4f 	dsb	sy
 800cbac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cbae:	bf00      	nop
 800cbb0:	e7fe      	b.n	800cbb0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d103      	bne.n	800cbc0 <xQueueGenericSendFromISR+0x3c>
 800cbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d101      	bne.n	800cbc4 <xQueueGenericSendFromISR+0x40>
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	e000      	b.n	800cbc6 <xQueueGenericSendFromISR+0x42>
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d10a      	bne.n	800cbe0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbce:	f383 8811 	msr	BASEPRI, r3
 800cbd2:	f3bf 8f6f 	isb	sy
 800cbd6:	f3bf 8f4f 	dsb	sy
 800cbda:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cbdc:	bf00      	nop
 800cbde:	e7fe      	b.n	800cbde <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	2b02      	cmp	r3, #2
 800cbe4:	d103      	bne.n	800cbee <xQueueGenericSendFromISR+0x6a>
 800cbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbea:	2b01      	cmp	r3, #1
 800cbec:	d101      	bne.n	800cbf2 <xQueueGenericSendFromISR+0x6e>
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e000      	b.n	800cbf4 <xQueueGenericSendFromISR+0x70>
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d10a      	bne.n	800cc0e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfc:	f383 8811 	msr	BASEPRI, r3
 800cc00:	f3bf 8f6f 	isb	sy
 800cc04:	f3bf 8f4f 	dsb	sy
 800cc08:	623b      	str	r3, [r7, #32]
}
 800cc0a:	bf00      	nop
 800cc0c:	e7fe      	b.n	800cc0c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc0e:	f7ff fd77 	bl	800c700 <vPortValidateInterruptPriority>
	__asm volatile
 800cc12:	f3ef 8211 	mrs	r2, BASEPRI
 800cc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1a:	f383 8811 	msr	BASEPRI, r3
 800cc1e:	f3bf 8f6f 	isb	sy
 800cc22:	f3bf 8f4f 	dsb	sy
 800cc26:	61fa      	str	r2, [r7, #28]
 800cc28:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800cc2a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc2c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d302      	bcc.n	800cc40 <xQueueGenericSendFromISR+0xbc>
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	2b02      	cmp	r3, #2
 800cc3e:	d12f      	bne.n	800cca0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc4e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc50:	683a      	ldr	r2, [r7, #0]
 800cc52:	68b9      	ldr	r1, [r7, #8]
 800cc54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc56:	f000 f911 	bl	800ce7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cc5a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cc5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc62:	d112      	bne.n	800cc8a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d016      	beq.n	800cc9a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6e:	3324      	adds	r3, #36	; 0x24
 800cc70:	4618      	mov	r0, r3
 800cc72:	f000 ffb9 	bl	800dbe8 <xTaskRemoveFromEventList>
 800cc76:	4603      	mov	r3, r0
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d00e      	beq.n	800cc9a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d00b      	beq.n	800cc9a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2201      	movs	r2, #1
 800cc86:	601a      	str	r2, [r3, #0]
 800cc88:	e007      	b.n	800cc9a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cc8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cc8e:	3301      	adds	r3, #1
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	b25a      	sxtb	r2, r3
 800cc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cc9e:	e001      	b.n	800cca4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cca0:	2300      	movs	r3, #0
 800cca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cca6:	617b      	str	r3, [r7, #20]
	__asm volatile
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	f383 8811 	msr	BASEPRI, r3
}
 800ccae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ccb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3740      	adds	r7, #64	; 0x40
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
	...

0800ccbc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b08c      	sub	sp, #48	; 0x30
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	60f8      	str	r0, [r7, #12]
 800ccc4:	60b9      	str	r1, [r7, #8]
 800ccc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ccd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d10a      	bne.n	800ccec <xQueueReceive+0x30>
	__asm volatile
 800ccd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccda:	f383 8811 	msr	BASEPRI, r3
 800ccde:	f3bf 8f6f 	isb	sy
 800cce2:	f3bf 8f4f 	dsb	sy
 800cce6:	623b      	str	r3, [r7, #32]
}
 800cce8:	bf00      	nop
 800ccea:	e7fe      	b.n	800ccea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d103      	bne.n	800ccfa <xQueueReceive+0x3e>
 800ccf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d101      	bne.n	800ccfe <xQueueReceive+0x42>
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	e000      	b.n	800cd00 <xQueueReceive+0x44>
 800ccfe:	2300      	movs	r3, #0
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d10a      	bne.n	800cd1a <xQueueReceive+0x5e>
	__asm volatile
 800cd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd08:	f383 8811 	msr	BASEPRI, r3
 800cd0c:	f3bf 8f6f 	isb	sy
 800cd10:	f3bf 8f4f 	dsb	sy
 800cd14:	61fb      	str	r3, [r7, #28]
}
 800cd16:	bf00      	nop
 800cd18:	e7fe      	b.n	800cd18 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd1a:	f001 f993 	bl	800e044 <xTaskGetSchedulerState>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d102      	bne.n	800cd2a <xQueueReceive+0x6e>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d101      	bne.n	800cd2e <xQueueReceive+0x72>
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e000      	b.n	800cd30 <xQueueReceive+0x74>
 800cd2e:	2300      	movs	r3, #0
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d10a      	bne.n	800cd4a <xQueueReceive+0x8e>
	__asm volatile
 800cd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd38:	f383 8811 	msr	BASEPRI, r3
 800cd3c:	f3bf 8f6f 	isb	sy
 800cd40:	f3bf 8f4f 	dsb	sy
 800cd44:	61bb      	str	r3, [r7, #24]
}
 800cd46:	bf00      	nop
 800cd48:	e7fe      	b.n	800cd48 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd4a:	f7ff fb13 	bl	800c374 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd52:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d01f      	beq.n	800cd9a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd5a:	68b9      	ldr	r1, [r7, #8]
 800cd5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd5e:	f000 f8f7 	bl	800cf50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd64:	1e5a      	subs	r2, r3, #1
 800cd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd68:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6c:	691b      	ldr	r3, [r3, #16]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d00f      	beq.n	800cd92 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd74:	3310      	adds	r3, #16
 800cd76:	4618      	mov	r0, r3
 800cd78:	f000 ff36 	bl	800dbe8 <xTaskRemoveFromEventList>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d007      	beq.n	800cd92 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cd82:	4b3d      	ldr	r3, [pc, #244]	; (800ce78 <xQueueReceive+0x1bc>)
 800cd84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd88:	601a      	str	r2, [r3, #0]
 800cd8a:	f3bf 8f4f 	dsb	sy
 800cd8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cd92:	f7ff fb1f 	bl	800c3d4 <vPortExitCritical>
				return pdPASS;
 800cd96:	2301      	movs	r3, #1
 800cd98:	e069      	b.n	800ce6e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d103      	bne.n	800cda8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cda0:	f7ff fb18 	bl	800c3d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cda4:	2300      	movs	r3, #0
 800cda6:	e062      	b.n	800ce6e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d106      	bne.n	800cdbc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cdae:	f107 0310 	add.w	r3, r7, #16
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f000 ff7e 	bl	800dcb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cdb8:	2301      	movs	r3, #1
 800cdba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cdbc:	f7ff fb0a 	bl	800c3d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cdc0:	f000 fc42 	bl	800d648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cdc4:	f7ff fad6 	bl	800c374 <vPortEnterCritical>
 800cdc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdce:	b25b      	sxtb	r3, r3
 800cdd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdd4:	d103      	bne.n	800cdde <xQueueReceive+0x122>
 800cdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd8:	2200      	movs	r2, #0
 800cdda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cde4:	b25b      	sxtb	r3, r3
 800cde6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdea:	d103      	bne.n	800cdf4 <xQueueReceive+0x138>
 800cdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdee:	2200      	movs	r2, #0
 800cdf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cdf4:	f7ff faee 	bl	800c3d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cdf8:	1d3a      	adds	r2, r7, #4
 800cdfa:	f107 0310 	add.w	r3, r7, #16
 800cdfe:	4611      	mov	r1, r2
 800ce00:	4618      	mov	r0, r3
 800ce02:	f000 ff6d 	bl	800dce0 <xTaskCheckForTimeOut>
 800ce06:	4603      	mov	r3, r0
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d123      	bne.n	800ce54 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce0e:	f000 f917 	bl	800d040 <prvIsQueueEmpty>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d017      	beq.n	800ce48 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ce18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1a:	3324      	adds	r3, #36	; 0x24
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	4611      	mov	r1, r2
 800ce20:	4618      	mov	r0, r3
 800ce22:	f000 fe91 	bl	800db48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ce26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce28:	f000 f8b8 	bl	800cf9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ce2c:	f000 fc52 	bl	800d6d4 <xTaskResumeAll>
 800ce30:	4603      	mov	r3, r0
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d189      	bne.n	800cd4a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ce36:	4b10      	ldr	r3, [pc, #64]	; (800ce78 <xQueueReceive+0x1bc>)
 800ce38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce3c:	601a      	str	r2, [r3, #0]
 800ce3e:	f3bf 8f4f 	dsb	sy
 800ce42:	f3bf 8f6f 	isb	sy
 800ce46:	e780      	b.n	800cd4a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ce48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce4a:	f000 f8a7 	bl	800cf9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce4e:	f000 fc41 	bl	800d6d4 <xTaskResumeAll>
 800ce52:	e77a      	b.n	800cd4a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ce54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce56:	f000 f8a1 	bl	800cf9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce5a:	f000 fc3b 	bl	800d6d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce60:	f000 f8ee 	bl	800d040 <prvIsQueueEmpty>
 800ce64:	4603      	mov	r3, r0
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	f43f af6f 	beq.w	800cd4a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ce6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3730      	adds	r7, #48	; 0x30
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop
 800ce78:	e000ed04 	.word	0xe000ed04

0800ce7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b086      	sub	sp, #24
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d10d      	bne.n	800ceb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d14d      	bne.n	800cf3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	689b      	ldr	r3, [r3, #8]
 800cea6:	4618      	mov	r0, r3
 800cea8:	f001 f8ea 	bl	800e080 <xTaskPriorityDisinherit>
 800ceac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	609a      	str	r2, [r3, #8]
 800ceb4:	e043      	b.n	800cf3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d119      	bne.n	800cef0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	6858      	ldr	r0, [r3, #4]
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cec4:	461a      	mov	r2, r3
 800cec6:	68b9      	ldr	r1, [r7, #8]
 800cec8:	f001 fe1e 	bl	800eb08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	685a      	ldr	r2, [r3, #4]
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ced4:	441a      	add	r2, r3
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	685a      	ldr	r2, [r3, #4]
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	689b      	ldr	r3, [r3, #8]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d32b      	bcc.n	800cf3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	605a      	str	r2, [r3, #4]
 800ceee:	e026      	b.n	800cf3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	68d8      	ldr	r0, [r3, #12]
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cef8:	461a      	mov	r2, r3
 800cefa:	68b9      	ldr	r1, [r7, #8]
 800cefc:	f001 fe04 	bl	800eb08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	68da      	ldr	r2, [r3, #12]
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf08:	425b      	negs	r3, r3
 800cf0a:	441a      	add	r2, r3
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	68da      	ldr	r2, [r3, #12]
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d207      	bcs.n	800cf2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	689a      	ldr	r2, [r3, #8]
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf24:	425b      	negs	r3, r3
 800cf26:	441a      	add	r2, r3
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2b02      	cmp	r3, #2
 800cf30:	d105      	bne.n	800cf3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d002      	beq.n	800cf3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	3b01      	subs	r3, #1
 800cf3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	1c5a      	adds	r2, r3, #1
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cf46:	697b      	ldr	r3, [r7, #20]
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3718      	adds	r7, #24
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}

0800cf50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d018      	beq.n	800cf94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	68da      	ldr	r2, [r3, #12]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf6a:	441a      	add	r2, r3
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	68da      	ldr	r2, [r3, #12]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	689b      	ldr	r3, [r3, #8]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d303      	bcc.n	800cf84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	68d9      	ldr	r1, [r3, #12]
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	6838      	ldr	r0, [r7, #0]
 800cf90:	f001 fdba 	bl	800eb08 <memcpy>
	}
}
 800cf94:	bf00      	nop
 800cf96:	3708      	adds	r7, #8
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cfa4:	f7ff f9e6 	bl	800c374 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfb0:	e011      	b.n	800cfd6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d012      	beq.n	800cfe0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	3324      	adds	r3, #36	; 0x24
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f000 fe12 	bl	800dbe8 <xTaskRemoveFromEventList>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d001      	beq.n	800cfce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cfca:	f000 fefb 	bl	800ddc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cfce:	7bfb      	ldrb	r3, [r7, #15]
 800cfd0:	3b01      	subs	r3, #1
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	dce9      	bgt.n	800cfb2 <prvUnlockQueue+0x16>
 800cfde:	e000      	b.n	800cfe2 <prvUnlockQueue+0x46>
					break;
 800cfe0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	22ff      	movs	r2, #255	; 0xff
 800cfe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cfea:	f7ff f9f3 	bl	800c3d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cfee:	f7ff f9c1 	bl	800c374 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cff8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cffa:	e011      	b.n	800d020 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	691b      	ldr	r3, [r3, #16]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d012      	beq.n	800d02a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	3310      	adds	r3, #16
 800d008:	4618      	mov	r0, r3
 800d00a:	f000 fded 	bl	800dbe8 <xTaskRemoveFromEventList>
 800d00e:	4603      	mov	r3, r0
 800d010:	2b00      	cmp	r3, #0
 800d012:	d001      	beq.n	800d018 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d014:	f000 fed6 	bl	800ddc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d018:	7bbb      	ldrb	r3, [r7, #14]
 800d01a:	3b01      	subs	r3, #1
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d024:	2b00      	cmp	r3, #0
 800d026:	dce9      	bgt.n	800cffc <prvUnlockQueue+0x60>
 800d028:	e000      	b.n	800d02c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d02a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	22ff      	movs	r2, #255	; 0xff
 800d030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d034:	f7ff f9ce 	bl	800c3d4 <vPortExitCritical>
}
 800d038:	bf00      	nop
 800d03a:	3710      	adds	r7, #16
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d048:	f7ff f994 	bl	800c374 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d050:	2b00      	cmp	r3, #0
 800d052:	d102      	bne.n	800d05a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d054:	2301      	movs	r3, #1
 800d056:	60fb      	str	r3, [r7, #12]
 800d058:	e001      	b.n	800d05e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d05a:	2300      	movs	r3, #0
 800d05c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d05e:	f7ff f9b9 	bl	800c3d4 <vPortExitCritical>

	return xReturn;
 800d062:	68fb      	ldr	r3, [r7, #12]
}
 800d064:	4618      	mov	r0, r3
 800d066:	3710      	adds	r7, #16
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}

0800d06c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b084      	sub	sp, #16
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d074:	f7ff f97e 	bl	800c374 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d080:	429a      	cmp	r2, r3
 800d082:	d102      	bne.n	800d08a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d084:	2301      	movs	r3, #1
 800d086:	60fb      	str	r3, [r7, #12]
 800d088:	e001      	b.n	800d08e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d08a:	2300      	movs	r3, #0
 800d08c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d08e:	f7ff f9a1 	bl	800c3d4 <vPortExitCritical>

	return xReturn;
 800d092:	68fb      	ldr	r3, [r7, #12]
}
 800d094:	4618      	mov	r0, r3
 800d096:	3710      	adds	r7, #16
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d09c:	b480      	push	{r7}
 800d09e:	b085      	sub	sp, #20
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	60fb      	str	r3, [r7, #12]
 800d0aa:	e014      	b.n	800d0d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d0ac:	4a0f      	ldr	r2, [pc, #60]	; (800d0ec <vQueueAddToRegistry+0x50>)
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d10b      	bne.n	800d0d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d0b8:	490c      	ldr	r1, [pc, #48]	; (800d0ec <vQueueAddToRegistry+0x50>)
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	683a      	ldr	r2, [r7, #0]
 800d0be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d0c2:	4a0a      	ldr	r2, [pc, #40]	; (800d0ec <vQueueAddToRegistry+0x50>)
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	00db      	lsls	r3, r3, #3
 800d0c8:	4413      	add	r3, r2
 800d0ca:	687a      	ldr	r2, [r7, #4]
 800d0cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d0ce:	e006      	b.n	800d0de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	60fb      	str	r3, [r7, #12]
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2b07      	cmp	r3, #7
 800d0da:	d9e7      	bls.n	800d0ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d0dc:	bf00      	nop
 800d0de:	bf00      	nop
 800d0e0:	3714      	adds	r7, #20
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e8:	4770      	bx	lr
 800d0ea:	bf00      	nop
 800d0ec:	20004ecc 	.word	0x20004ecc

0800d0f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b086      	sub	sp, #24
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	60f8      	str	r0, [r7, #12]
 800d0f8:	60b9      	str	r1, [r7, #8]
 800d0fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d100:	f7ff f938 	bl	800c374 <vPortEnterCritical>
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d10a:	b25b      	sxtb	r3, r3
 800d10c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d110:	d103      	bne.n	800d11a <vQueueWaitForMessageRestricted+0x2a>
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	2200      	movs	r2, #0
 800d116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d120:	b25b      	sxtb	r3, r3
 800d122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d126:	d103      	bne.n	800d130 <vQueueWaitForMessageRestricted+0x40>
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	2200      	movs	r2, #0
 800d12c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d130:	f7ff f950 	bl	800c3d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d106      	bne.n	800d14a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	3324      	adds	r3, #36	; 0x24
 800d140:	687a      	ldr	r2, [r7, #4]
 800d142:	68b9      	ldr	r1, [r7, #8]
 800d144:	4618      	mov	r0, r3
 800d146:	f000 fd23 	bl	800db90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d14a:	6978      	ldr	r0, [r7, #20]
 800d14c:	f7ff ff26 	bl	800cf9c <prvUnlockQueue>
	}
 800d150:	bf00      	nop
 800d152:	3718      	adds	r7, #24
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b08e      	sub	sp, #56	; 0x38
 800d15c:	af04      	add	r7, sp, #16
 800d15e:	60f8      	str	r0, [r7, #12]
 800d160:	60b9      	str	r1, [r7, #8]
 800d162:	607a      	str	r2, [r7, #4]
 800d164:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d10a      	bne.n	800d182 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d170:	f383 8811 	msr	BASEPRI, r3
 800d174:	f3bf 8f6f 	isb	sy
 800d178:	f3bf 8f4f 	dsb	sy
 800d17c:	623b      	str	r3, [r7, #32]
}
 800d17e:	bf00      	nop
 800d180:	e7fe      	b.n	800d180 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d184:	2b00      	cmp	r3, #0
 800d186:	d10a      	bne.n	800d19e <xTaskCreateStatic+0x46>
	__asm volatile
 800d188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18c:	f383 8811 	msr	BASEPRI, r3
 800d190:	f3bf 8f6f 	isb	sy
 800d194:	f3bf 8f4f 	dsb	sy
 800d198:	61fb      	str	r3, [r7, #28]
}
 800d19a:	bf00      	nop
 800d19c:	e7fe      	b.n	800d19c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d19e:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800d1a2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 800d1aa:	d00a      	beq.n	800d1c2 <xTaskCreateStatic+0x6a>
	__asm volatile
 800d1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b0:	f383 8811 	msr	BASEPRI, r3
 800d1b4:	f3bf 8f6f 	isb	sy
 800d1b8:	f3bf 8f4f 	dsb	sy
 800d1bc:	61bb      	str	r3, [r7, #24]
}
 800d1be:	bf00      	nop
 800d1c0:	e7fe      	b.n	800d1c0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d1c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d01e      	beq.n	800d208 <xTaskCreateStatic+0xb0>
 800d1ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d01b      	beq.n	800d208 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1dc:	2202      	movs	r2, #2
 800d1de:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	9303      	str	r3, [sp, #12]
 800d1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e8:	9302      	str	r3, [sp, #8]
 800d1ea:	f107 0314 	add.w	r3, r7, #20
 800d1ee:	9301      	str	r3, [sp, #4]
 800d1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f2:	9300      	str	r3, [sp, #0]
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	687a      	ldr	r2, [r7, #4]
 800d1f8:	68b9      	ldr	r1, [r7, #8]
 800d1fa:	68f8      	ldr	r0, [r7, #12]
 800d1fc:	f000 f852 	bl	800d2a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d200:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d202:	f000 f90b 	bl	800d41c <prvAddNewTaskToReadyList>
 800d206:	e001      	b.n	800d20c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800d208:	2300      	movs	r3, #0
 800d20a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d20c:	697b      	ldr	r3, [r7, #20]
	}
 800d20e:	4618      	mov	r0, r3
 800d210:	3728      	adds	r7, #40	; 0x28
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}

0800d216 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d216:	b580      	push	{r7, lr}
 800d218:	b08c      	sub	sp, #48	; 0x30
 800d21a:	af04      	add	r7, sp, #16
 800d21c:	60f8      	str	r0, [r7, #12]
 800d21e:	60b9      	str	r1, [r7, #8]
 800d220:	603b      	str	r3, [r7, #0]
 800d222:	4613      	mov	r3, r2
 800d224:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d226:	88fb      	ldrh	r3, [r7, #6]
 800d228:	009b      	lsls	r3, r3, #2
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7fe fcd2 	bl	800bbd4 <pvPortMalloc>
 800d230:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d00f      	beq.n	800d258 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d238:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 800d23c:	f7fe fcca 	bl	800bbd4 <pvPortMalloc>
 800d240:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d242:	69fb      	ldr	r3, [r7, #28]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d003      	beq.n	800d250 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d248:	69fb      	ldr	r3, [r7, #28]
 800d24a:	697a      	ldr	r2, [r7, #20]
 800d24c:	631a      	str	r2, [r3, #48]	; 0x30
 800d24e:	e005      	b.n	800d25c <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d250:	6978      	ldr	r0, [r7, #20]
 800d252:	f7fe fd8f 	bl	800bd74 <vPortFree>
 800d256:	e001      	b.n	800d25c <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d258:	2300      	movs	r3, #0
 800d25a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d25c:	69fb      	ldr	r3, [r7, #28]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d017      	beq.n	800d292 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d262:	69fb      	ldr	r3, [r7, #28]
 800d264:	2200      	movs	r2, #0
 800d266:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d26a:	88fa      	ldrh	r2, [r7, #6]
 800d26c:	2300      	movs	r3, #0
 800d26e:	9303      	str	r3, [sp, #12]
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	9302      	str	r3, [sp, #8]
 800d274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d276:	9301      	str	r3, [sp, #4]
 800d278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d27a:	9300      	str	r3, [sp, #0]
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	68b9      	ldr	r1, [r7, #8]
 800d280:	68f8      	ldr	r0, [r7, #12]
 800d282:	f000 f80f 	bl	800d2a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d286:	69f8      	ldr	r0, [r7, #28]
 800d288:	f000 f8c8 	bl	800d41c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d28c:	2301      	movs	r3, #1
 800d28e:	61bb      	str	r3, [r7, #24]
 800d290:	e002      	b.n	800d298 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d292:	f04f 33ff 	mov.w	r3, #4294967295
 800d296:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d298:	69bb      	ldr	r3, [r7, #24]
	}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3720      	adds	r7, #32
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
	...

0800d2a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b088      	sub	sp, #32
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	60f8      	str	r0, [r7, #12]
 800d2ac:	60b9      	str	r1, [r7, #8]
 800d2ae:	607a      	str	r2, [r7, #4]
 800d2b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	009b      	lsls	r3, r3, #2
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	21a5      	movs	r1, #165	; 0xa5
 800d2be:	f001 fc31 	bl	800eb24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d2cc:	3b01      	subs	r3, #1
 800d2ce:	009b      	lsls	r3, r3, #2
 800d2d0:	4413      	add	r3, r2
 800d2d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d2d4:	69bb      	ldr	r3, [r7, #24]
 800d2d6:	f023 0307 	bic.w	r3, r3, #7
 800d2da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d2dc:	69bb      	ldr	r3, [r7, #24]
 800d2de:	f003 0307 	and.w	r3, r3, #7
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d00a      	beq.n	800d2fc <prvInitialiseNewTask+0x58>
	__asm volatile
 800d2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ea:	f383 8811 	msr	BASEPRI, r3
 800d2ee:	f3bf 8f6f 	isb	sy
 800d2f2:	f3bf 8f4f 	dsb	sy
 800d2f6:	617b      	str	r3, [r7, #20]
}
 800d2f8:	bf00      	nop
 800d2fa:	e7fe      	b.n	800d2fa <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800d2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2fe:	69ba      	ldr	r2, [r7, #24]
 800d300:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d01f      	beq.n	800d34a <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d30a:	2300      	movs	r3, #0
 800d30c:	61fb      	str	r3, [r7, #28]
 800d30e:	e012      	b.n	800d336 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d310:	68ba      	ldr	r2, [r7, #8]
 800d312:	69fb      	ldr	r3, [r7, #28]
 800d314:	4413      	add	r3, r2
 800d316:	7819      	ldrb	r1, [r3, #0]
 800d318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d31a:	69fb      	ldr	r3, [r7, #28]
 800d31c:	4413      	add	r3, r2
 800d31e:	3334      	adds	r3, #52	; 0x34
 800d320:	460a      	mov	r2, r1
 800d322:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d324:	68ba      	ldr	r2, [r7, #8]
 800d326:	69fb      	ldr	r3, [r7, #28]
 800d328:	4413      	add	r3, r2
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d006      	beq.n	800d33e <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d330:	69fb      	ldr	r3, [r7, #28]
 800d332:	3301      	adds	r3, #1
 800d334:	61fb      	str	r3, [r7, #28]
 800d336:	69fb      	ldr	r3, [r7, #28]
 800d338:	2bfe      	cmp	r3, #254	; 0xfe
 800d33a:	d9e9      	bls.n	800d310 <prvInitialiseNewTask+0x6c>
 800d33c:	e000      	b.n	800d340 <prvInitialiseNewTask+0x9c>
			{
				break;
 800d33e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d342:	2200      	movs	r2, #0
 800d344:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 800d348:	e003      	b.n	800d352 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d34c:	2200      	movs	r2, #0
 800d34e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d354:	2b37      	cmp	r3, #55	; 0x37
 800d356:	d901      	bls.n	800d35c <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d358:	2337      	movs	r3, #55	; 0x37
 800d35a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d360:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d366:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		pxNewTCB->uxMutexesHeld = 0;
 800d36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36c:	2200      	movs	r2, #0
 800d36e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d374:	3304      	adds	r3, #4
 800d376:	4618      	mov	r0, r3
 800d378:	f7fe fe3a 	bl	800bff0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d37e:	3318      	adds	r3, #24
 800d380:	4618      	mov	r0, r3
 800d382:	f7fe fe35 	bl	800bff0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d38a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d394:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d39a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39e:	2200      	movs	r2, #0
 800d3a0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800d3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d3c2:	2260      	movs	r2, #96	; 0x60
 800d3c4:	2100      	movs	r1, #0
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f001 fbac 	bl	800eb24 <memset>
 800d3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ce:	4a10      	ldr	r2, [pc, #64]	; (800d410 <prvInitialiseNewTask+0x16c>)
 800d3d0:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800d3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d6:	4a0f      	ldr	r2, [pc, #60]	; (800d414 <prvInitialiseNewTask+0x170>)
 800d3d8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800d3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3de:	4a0e      	ldr	r2, [pc, #56]	; (800d418 <prvInitialiseNewTask+0x174>)
 800d3e0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800d3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d3ec:	683a      	ldr	r2, [r7, #0]
 800d3ee:	68f9      	ldr	r1, [r7, #12]
 800d3f0:	69b8      	ldr	r0, [r7, #24]
 800d3f2:	f7fe fe91 	bl	800c118 <pxPortInitialiseStack>
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d002      	beq.n	800d408 <prvInitialiseNewTask+0x164>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d406:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d408:	bf00      	nop
 800d40a:	3720      	adds	r7, #32
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}
 800d410:	0800f428 	.word	0x0800f428
 800d414:	0800f448 	.word	0x0800f448
 800d418:	0800f408 	.word	0x0800f408

0800d41c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b082      	sub	sp, #8
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d424:	f7fe ffa6 	bl	800c374 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d428:	4b2d      	ldr	r3, [pc, #180]	; (800d4e0 <prvAddNewTaskToReadyList+0xc4>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	3301      	adds	r3, #1
 800d42e:	4a2c      	ldr	r2, [pc, #176]	; (800d4e0 <prvAddNewTaskToReadyList+0xc4>)
 800d430:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d432:	4b2c      	ldr	r3, [pc, #176]	; (800d4e4 <prvAddNewTaskToReadyList+0xc8>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d109      	bne.n	800d44e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d43a:	4a2a      	ldr	r2, [pc, #168]	; (800d4e4 <prvAddNewTaskToReadyList+0xc8>)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d440:	4b27      	ldr	r3, [pc, #156]	; (800d4e0 <prvAddNewTaskToReadyList+0xc4>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	2b01      	cmp	r3, #1
 800d446:	d110      	bne.n	800d46a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d448:	f000 fd38 	bl	800debc <prvInitialiseTaskLists>
 800d44c:	e00d      	b.n	800d46a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d44e:	4b26      	ldr	r3, [pc, #152]	; (800d4e8 <prvAddNewTaskToReadyList+0xcc>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d109      	bne.n	800d46a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d456:	4b23      	ldr	r3, [pc, #140]	; (800d4e4 <prvAddNewTaskToReadyList+0xc8>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d460:	429a      	cmp	r2, r3
 800d462:	d802      	bhi.n	800d46a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d464:	4a1f      	ldr	r2, [pc, #124]	; (800d4e4 <prvAddNewTaskToReadyList+0xc8>)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d46a:	4b20      	ldr	r3, [pc, #128]	; (800d4ec <prvAddNewTaskToReadyList+0xd0>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	3301      	adds	r3, #1
 800d470:	4a1e      	ldr	r2, [pc, #120]	; (800d4ec <prvAddNewTaskToReadyList+0xd0>)
 800d472:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d474:	4b1d      	ldr	r3, [pc, #116]	; (800d4ec <prvAddNewTaskToReadyList+0xd0>)
 800d476:	681a      	ldr	r2, [r3, #0]
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d482:	4b1b      	ldr	r3, [pc, #108]	; (800d4f0 <prvAddNewTaskToReadyList+0xd4>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	429a      	cmp	r2, r3
 800d488:	d903      	bls.n	800d492 <prvAddNewTaskToReadyList+0x76>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d48e:	4a18      	ldr	r2, [pc, #96]	; (800d4f0 <prvAddNewTaskToReadyList+0xd4>)
 800d490:	6013      	str	r3, [r2, #0]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d496:	4613      	mov	r3, r2
 800d498:	009b      	lsls	r3, r3, #2
 800d49a:	4413      	add	r3, r2
 800d49c:	009b      	lsls	r3, r3, #2
 800d49e:	4a15      	ldr	r2, [pc, #84]	; (800d4f4 <prvAddNewTaskToReadyList+0xd8>)
 800d4a0:	441a      	add	r2, r3
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	3304      	adds	r3, #4
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	4610      	mov	r0, r2
 800d4aa:	f7fe fdae 	bl	800c00a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d4ae:	f7fe ff91 	bl	800c3d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d4b2:	4b0d      	ldr	r3, [pc, #52]	; (800d4e8 <prvAddNewTaskToReadyList+0xcc>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00e      	beq.n	800d4d8 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d4ba:	4b0a      	ldr	r3, [pc, #40]	; (800d4e4 <prvAddNewTaskToReadyList+0xc8>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d207      	bcs.n	800d4d8 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d4c8:	4b0b      	ldr	r3, [pc, #44]	; (800d4f8 <prvAddNewTaskToReadyList+0xdc>)
 800d4ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4ce:	601a      	str	r2, [r3, #0]
 800d4d0:	f3bf 8f4f 	dsb	sy
 800d4d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d4d8:	bf00      	nop
 800d4da:	3708      	adds	r7, #8
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}
 800d4e0:	200053e4 	.word	0x200053e4
 800d4e4:	20004f0c 	.word	0x20004f0c
 800d4e8:	200053f0 	.word	0x200053f0
 800d4ec:	20005400 	.word	0x20005400
 800d4f0:	200053ec 	.word	0x200053ec
 800d4f4:	20004f10 	.word	0x20004f10
 800d4f8:	e000ed04 	.word	0xe000ed04

0800d4fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b084      	sub	sp, #16
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d504:	2300      	movs	r3, #0
 800d506:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d017      	beq.n	800d53e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d50e:	4b13      	ldr	r3, [pc, #76]	; (800d55c <vTaskDelay+0x60>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d00a      	beq.n	800d52c <vTaskDelay+0x30>
	__asm volatile
 800d516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d51a:	f383 8811 	msr	BASEPRI, r3
 800d51e:	f3bf 8f6f 	isb	sy
 800d522:	f3bf 8f4f 	dsb	sy
 800d526:	60bb      	str	r3, [r7, #8]
}
 800d528:	bf00      	nop
 800d52a:	e7fe      	b.n	800d52a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d52c:	f000 f88c 	bl	800d648 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d530:	2100      	movs	r1, #0
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 fe18 	bl	800e168 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d538:	f000 f8cc 	bl	800d6d4 <xTaskResumeAll>
 800d53c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d107      	bne.n	800d554 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d544:	4b06      	ldr	r3, [pc, #24]	; (800d560 <vTaskDelay+0x64>)
 800d546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d54a:	601a      	str	r2, [r3, #0]
 800d54c:	f3bf 8f4f 	dsb	sy
 800d550:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d554:	bf00      	nop
 800d556:	3710      	adds	r7, #16
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	2000540c 	.word	0x2000540c
 800d560:	e000ed04 	.word	0xe000ed04

0800d564 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b08a      	sub	sp, #40	; 0x28
 800d568:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d56a:	2300      	movs	r3, #0
 800d56c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d56e:	2300      	movs	r3, #0
 800d570:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d572:	463a      	mov	r2, r7
 800d574:	1d39      	adds	r1, r7, #4
 800d576:	f107 0308 	add.w	r3, r7, #8
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7fe faf6 	bl	800bb6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d580:	6839      	ldr	r1, [r7, #0]
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	68ba      	ldr	r2, [r7, #8]
 800d586:	9202      	str	r2, [sp, #8]
 800d588:	9301      	str	r3, [sp, #4]
 800d58a:	2300      	movs	r3, #0
 800d58c:	9300      	str	r3, [sp, #0]
 800d58e:	2300      	movs	r3, #0
 800d590:	460a      	mov	r2, r1
 800d592:	4925      	ldr	r1, [pc, #148]	; (800d628 <vTaskStartScheduler+0xc4>)
 800d594:	4825      	ldr	r0, [pc, #148]	; (800d62c <vTaskStartScheduler+0xc8>)
 800d596:	f7ff fddf 	bl	800d158 <xTaskCreateStatic>
 800d59a:	4603      	mov	r3, r0
 800d59c:	4a24      	ldr	r2, [pc, #144]	; (800d630 <vTaskStartScheduler+0xcc>)
 800d59e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d5a0:	4b23      	ldr	r3, [pc, #140]	; (800d630 <vTaskStartScheduler+0xcc>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d002      	beq.n	800d5ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	617b      	str	r3, [r7, #20]
 800d5ac:	e001      	b.n	800d5b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	d102      	bne.n	800d5be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d5b8:	f000 fe30 	bl	800e21c <xTimerCreateTimerTask>
 800d5bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d11e      	bne.n	800d602 <vTaskStartScheduler+0x9e>
	__asm volatile
 800d5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c8:	f383 8811 	msr	BASEPRI, r3
 800d5cc:	f3bf 8f6f 	isb	sy
 800d5d0:	f3bf 8f4f 	dsb	sy
 800d5d4:	613b      	str	r3, [r7, #16]
}
 800d5d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d5d8:	4b16      	ldr	r3, [pc, #88]	; (800d634 <vTaskStartScheduler+0xd0>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d5e0:	4a15      	ldr	r2, [pc, #84]	; (800d638 <vTaskStartScheduler+0xd4>)
 800d5e2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d5e4:	4b15      	ldr	r3, [pc, #84]	; (800d63c <vTaskStartScheduler+0xd8>)
 800d5e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d5ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d5ec:	4b14      	ldr	r3, [pc, #80]	; (800d640 <vTaskStartScheduler+0xdc>)
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d5f2:	4b14      	ldr	r3, [pc, #80]	; (800d644 <vTaskStartScheduler+0xe0>)
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800d5f8:	f7f5 f9d6 	bl	80029a8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d5fc:	f7fe fe18 	bl	800c230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d600:	e00e      	b.n	800d620 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d608:	d10a      	bne.n	800d620 <vTaskStartScheduler+0xbc>
	__asm volatile
 800d60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d60e:	f383 8811 	msr	BASEPRI, r3
 800d612:	f3bf 8f6f 	isb	sy
 800d616:	f3bf 8f4f 	dsb	sy
 800d61a:	60fb      	str	r3, [r7, #12]
}
 800d61c:	bf00      	nop
 800d61e:	e7fe      	b.n	800d61e <vTaskStartScheduler+0xba>
}
 800d620:	bf00      	nop
 800d622:	3718      	adds	r7, #24
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}
 800d628:	0800f2f0 	.word	0x0800f2f0
 800d62c:	0800dddd 	.word	0x0800dddd
 800d630:	20005408 	.word	0x20005408
 800d634:	20004f0c 	.word	0x20004f0c
 800d638:	20000010 	.word	0x20000010
 800d63c:	20005404 	.word	0x20005404
 800d640:	200053f0 	.word	0x200053f0
 800d644:	200053e8 	.word	0x200053e8

0800d648 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d648:	b480      	push	{r7}
 800d64a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d64c:	4b04      	ldr	r3, [pc, #16]	; (800d660 <vTaskSuspendAll+0x18>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	3301      	adds	r3, #1
 800d652:	4a03      	ldr	r2, [pc, #12]	; (800d660 <vTaskSuspendAll+0x18>)
 800d654:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d656:	bf00      	nop
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr
 800d660:	2000540c 	.word	0x2000540c

0800d664 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800d66a:	2300      	movs	r3, #0
 800d66c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800d66e:	4b14      	ldr	r3, [pc, #80]	; (800d6c0 <prvGetExpectedIdleTime+0x5c>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d001      	beq.n	800d67a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800d676:	2301      	movs	r3, #1
 800d678:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800d67a:	4b12      	ldr	r3, [pc, #72]	; (800d6c4 <prvGetExpectedIdleTime+0x60>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d680:	2b00      	cmp	r3, #0
 800d682:	d002      	beq.n	800d68a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800d684:	2300      	movs	r3, #0
 800d686:	607b      	str	r3, [r7, #4]
 800d688:	e012      	b.n	800d6b0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800d68a:	4b0f      	ldr	r3, [pc, #60]	; (800d6c8 <prvGetExpectedIdleTime+0x64>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	2b01      	cmp	r3, #1
 800d690:	d902      	bls.n	800d698 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800d692:	2300      	movs	r3, #0
 800d694:	607b      	str	r3, [r7, #4]
 800d696:	e00b      	b.n	800d6b0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d002      	beq.n	800d6a4 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	607b      	str	r3, [r7, #4]
 800d6a2:	e005      	b.n	800d6b0 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800d6a4:	4b09      	ldr	r3, [pc, #36]	; (800d6cc <prvGetExpectedIdleTime+0x68>)
 800d6a6:	681a      	ldr	r2, [r3, #0]
 800d6a8:	4b09      	ldr	r3, [pc, #36]	; (800d6d0 <prvGetExpectedIdleTime+0x6c>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	1ad3      	subs	r3, r2, r3
 800d6ae:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800d6b0:	687b      	ldr	r3, [r7, #4]
	}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	370c      	adds	r7, #12
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6bc:	4770      	bx	lr
 800d6be:	bf00      	nop
 800d6c0:	200053ec 	.word	0x200053ec
 800d6c4:	20004f0c 	.word	0x20004f0c
 800d6c8:	20004f10 	.word	0x20004f10
 800d6cc:	20005404 	.word	0x20005404
 800d6d0:	200053e8 	.word	0x200053e8

0800d6d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b084      	sub	sp, #16
 800d6d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d6e2:	4b42      	ldr	r3, [pc, #264]	; (800d7ec <xTaskResumeAll+0x118>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d10a      	bne.n	800d700 <xTaskResumeAll+0x2c>
	__asm volatile
 800d6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ee:	f383 8811 	msr	BASEPRI, r3
 800d6f2:	f3bf 8f6f 	isb	sy
 800d6f6:	f3bf 8f4f 	dsb	sy
 800d6fa:	603b      	str	r3, [r7, #0]
}
 800d6fc:	bf00      	nop
 800d6fe:	e7fe      	b.n	800d6fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d700:	f7fe fe38 	bl	800c374 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d704:	4b39      	ldr	r3, [pc, #228]	; (800d7ec <xTaskResumeAll+0x118>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	3b01      	subs	r3, #1
 800d70a:	4a38      	ldr	r2, [pc, #224]	; (800d7ec <xTaskResumeAll+0x118>)
 800d70c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d70e:	4b37      	ldr	r3, [pc, #220]	; (800d7ec <xTaskResumeAll+0x118>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d162      	bne.n	800d7dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d716:	4b36      	ldr	r3, [pc, #216]	; (800d7f0 <xTaskResumeAll+0x11c>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d05e      	beq.n	800d7dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d71e:	e02f      	b.n	800d780 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d720:	4b34      	ldr	r3, [pc, #208]	; (800d7f4 <xTaskResumeAll+0x120>)
 800d722:	68db      	ldr	r3, [r3, #12]
 800d724:	68db      	ldr	r3, [r3, #12]
 800d726:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	3318      	adds	r3, #24
 800d72c:	4618      	mov	r0, r3
 800d72e:	f7fe fcc9 	bl	800c0c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	3304      	adds	r3, #4
 800d736:	4618      	mov	r0, r3
 800d738:	f7fe fcc4 	bl	800c0c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d740:	4b2d      	ldr	r3, [pc, #180]	; (800d7f8 <xTaskResumeAll+0x124>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	429a      	cmp	r2, r3
 800d746:	d903      	bls.n	800d750 <xTaskResumeAll+0x7c>
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d74c:	4a2a      	ldr	r2, [pc, #168]	; (800d7f8 <xTaskResumeAll+0x124>)
 800d74e:	6013      	str	r3, [r2, #0]
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d754:	4613      	mov	r3, r2
 800d756:	009b      	lsls	r3, r3, #2
 800d758:	4413      	add	r3, r2
 800d75a:	009b      	lsls	r3, r3, #2
 800d75c:	4a27      	ldr	r2, [pc, #156]	; (800d7fc <xTaskResumeAll+0x128>)
 800d75e:	441a      	add	r2, r3
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	3304      	adds	r3, #4
 800d764:	4619      	mov	r1, r3
 800d766:	4610      	mov	r0, r2
 800d768:	f7fe fc4f 	bl	800c00a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d770:	4b23      	ldr	r3, [pc, #140]	; (800d800 <xTaskResumeAll+0x12c>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d776:	429a      	cmp	r2, r3
 800d778:	d302      	bcc.n	800d780 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d77a:	4b22      	ldr	r3, [pc, #136]	; (800d804 <xTaskResumeAll+0x130>)
 800d77c:	2201      	movs	r2, #1
 800d77e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d780:	4b1c      	ldr	r3, [pc, #112]	; (800d7f4 <xTaskResumeAll+0x120>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d1cb      	bne.n	800d720 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d001      	beq.n	800d792 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d78e:	f000 fc39 	bl	800e004 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d792:	4b1d      	ldr	r3, [pc, #116]	; (800d808 <xTaskResumeAll+0x134>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d010      	beq.n	800d7c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d79e:	f000 f86f 	bl	800d880 <xTaskIncrementTick>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d002      	beq.n	800d7ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d7a8:	4b16      	ldr	r3, [pc, #88]	; (800d804 <xTaskResumeAll+0x130>)
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	3b01      	subs	r3, #1
 800d7b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d1f1      	bne.n	800d79e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d7ba:	4b13      	ldr	r3, [pc, #76]	; (800d808 <xTaskResumeAll+0x134>)
 800d7bc:	2200      	movs	r2, #0
 800d7be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d7c0:	4b10      	ldr	r3, [pc, #64]	; (800d804 <xTaskResumeAll+0x130>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d009      	beq.n	800d7dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d7cc:	4b0f      	ldr	r3, [pc, #60]	; (800d80c <xTaskResumeAll+0x138>)
 800d7ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7d2:	601a      	str	r2, [r3, #0]
 800d7d4:	f3bf 8f4f 	dsb	sy
 800d7d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d7dc:	f7fe fdfa 	bl	800c3d4 <vPortExitCritical>

	return xAlreadyYielded;
 800d7e0:	68bb      	ldr	r3, [r7, #8]
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3710      	adds	r7, #16
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	2000540c 	.word	0x2000540c
 800d7f0:	200053e4 	.word	0x200053e4
 800d7f4:	200053a0 	.word	0x200053a0
 800d7f8:	200053ec 	.word	0x200053ec
 800d7fc:	20004f10 	.word	0x20004f10
 800d800:	20004f0c 	.word	0x20004f0c
 800d804:	200053f8 	.word	0x200053f8
 800d808:	200053f4 	.word	0x200053f4
 800d80c:	e000ed04 	.word	0xe000ed04

0800d810 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d810:	b480      	push	{r7}
 800d812:	b083      	sub	sp, #12
 800d814:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d816:	4b05      	ldr	r3, [pc, #20]	; (800d82c <xTaskGetTickCount+0x1c>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d81c:	687b      	ldr	r3, [r7, #4]
}
 800d81e:	4618      	mov	r0, r3
 800d820:	370c      	adds	r7, #12
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr
 800d82a:	bf00      	nop
 800d82c:	200053e8 	.word	0x200053e8

0800d830 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800d830:	b480      	push	{r7}
 800d832:	b085      	sub	sp, #20
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800d838:	4b0f      	ldr	r3, [pc, #60]	; (800d878 <vTaskStepTick+0x48>)
 800d83a:	681a      	ldr	r2, [r3, #0]
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	441a      	add	r2, r3
 800d840:	4b0e      	ldr	r3, [pc, #56]	; (800d87c <vTaskStepTick+0x4c>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	429a      	cmp	r2, r3
 800d846:	d90a      	bls.n	800d85e <vTaskStepTick+0x2e>
	__asm volatile
 800d848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d84c:	f383 8811 	msr	BASEPRI, r3
 800d850:	f3bf 8f6f 	isb	sy
 800d854:	f3bf 8f4f 	dsb	sy
 800d858:	60fb      	str	r3, [r7, #12]
}
 800d85a:	bf00      	nop
 800d85c:	e7fe      	b.n	800d85c <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800d85e:	4b06      	ldr	r3, [pc, #24]	; (800d878 <vTaskStepTick+0x48>)
 800d860:	681a      	ldr	r2, [r3, #0]
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	4413      	add	r3, r2
 800d866:	4a04      	ldr	r2, [pc, #16]	; (800d878 <vTaskStepTick+0x48>)
 800d868:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800d86a:	bf00      	nop
 800d86c:	3714      	adds	r7, #20
 800d86e:	46bd      	mov	sp, r7
 800d870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d874:	4770      	bx	lr
 800d876:	bf00      	nop
 800d878:	200053e8 	.word	0x200053e8
 800d87c:	20005404 	.word	0x20005404

0800d880 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b086      	sub	sp, #24
 800d884:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d886:	2300      	movs	r3, #0
 800d888:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d88a:	4b53      	ldr	r3, [pc, #332]	; (800d9d8 <xTaskIncrementTick+0x158>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	f040 8095 	bne.w	800d9be <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d894:	4b51      	ldr	r3, [pc, #324]	; (800d9dc <xTaskIncrementTick+0x15c>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	3301      	adds	r3, #1
 800d89a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d89c:	4a4f      	ldr	r2, [pc, #316]	; (800d9dc <xTaskIncrementTick+0x15c>)
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d120      	bne.n	800d8ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d8a8:	4b4d      	ldr	r3, [pc, #308]	; (800d9e0 <xTaskIncrementTick+0x160>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d00a      	beq.n	800d8c8 <xTaskIncrementTick+0x48>
	__asm volatile
 800d8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b6:	f383 8811 	msr	BASEPRI, r3
 800d8ba:	f3bf 8f6f 	isb	sy
 800d8be:	f3bf 8f4f 	dsb	sy
 800d8c2:	603b      	str	r3, [r7, #0]
}
 800d8c4:	bf00      	nop
 800d8c6:	e7fe      	b.n	800d8c6 <xTaskIncrementTick+0x46>
 800d8c8:	4b45      	ldr	r3, [pc, #276]	; (800d9e0 <xTaskIncrementTick+0x160>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	60fb      	str	r3, [r7, #12]
 800d8ce:	4b45      	ldr	r3, [pc, #276]	; (800d9e4 <xTaskIncrementTick+0x164>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	4a43      	ldr	r2, [pc, #268]	; (800d9e0 <xTaskIncrementTick+0x160>)
 800d8d4:	6013      	str	r3, [r2, #0]
 800d8d6:	4a43      	ldr	r2, [pc, #268]	; (800d9e4 <xTaskIncrementTick+0x164>)
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	6013      	str	r3, [r2, #0]
 800d8dc:	4b42      	ldr	r3, [pc, #264]	; (800d9e8 <xTaskIncrementTick+0x168>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	4a41      	ldr	r2, [pc, #260]	; (800d9e8 <xTaskIncrementTick+0x168>)
 800d8e4:	6013      	str	r3, [r2, #0]
 800d8e6:	f000 fb8d 	bl	800e004 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d8ea:	4b40      	ldr	r3, [pc, #256]	; (800d9ec <xTaskIncrementTick+0x16c>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	693a      	ldr	r2, [r7, #16]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d349      	bcc.n	800d988 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d8f4:	4b3a      	ldr	r3, [pc, #232]	; (800d9e0 <xTaskIncrementTick+0x160>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d104      	bne.n	800d908 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8fe:	4b3b      	ldr	r3, [pc, #236]	; (800d9ec <xTaskIncrementTick+0x16c>)
 800d900:	f04f 32ff 	mov.w	r2, #4294967295
 800d904:	601a      	str	r2, [r3, #0]
					break;
 800d906:	e03f      	b.n	800d988 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d908:	4b35      	ldr	r3, [pc, #212]	; (800d9e0 <xTaskIncrementTick+0x160>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	68db      	ldr	r3, [r3, #12]
 800d90e:	68db      	ldr	r3, [r3, #12]
 800d910:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	685b      	ldr	r3, [r3, #4]
 800d916:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d918:	693a      	ldr	r2, [r7, #16]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d203      	bcs.n	800d928 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d920:	4a32      	ldr	r2, [pc, #200]	; (800d9ec <xTaskIncrementTick+0x16c>)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d926:	e02f      	b.n	800d988 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	3304      	adds	r3, #4
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7fe fbc9 	bl	800c0c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d936:	2b00      	cmp	r3, #0
 800d938:	d004      	beq.n	800d944 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	3318      	adds	r3, #24
 800d93e:	4618      	mov	r0, r3
 800d940:	f7fe fbc0 	bl	800c0c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d948:	4b29      	ldr	r3, [pc, #164]	; (800d9f0 <xTaskIncrementTick+0x170>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d903      	bls.n	800d958 <xTaskIncrementTick+0xd8>
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d954:	4a26      	ldr	r2, [pc, #152]	; (800d9f0 <xTaskIncrementTick+0x170>)
 800d956:	6013      	str	r3, [r2, #0]
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d95c:	4613      	mov	r3, r2
 800d95e:	009b      	lsls	r3, r3, #2
 800d960:	4413      	add	r3, r2
 800d962:	009b      	lsls	r3, r3, #2
 800d964:	4a23      	ldr	r2, [pc, #140]	; (800d9f4 <xTaskIncrementTick+0x174>)
 800d966:	441a      	add	r2, r3
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	3304      	adds	r3, #4
 800d96c:	4619      	mov	r1, r3
 800d96e:	4610      	mov	r0, r2
 800d970:	f7fe fb4b 	bl	800c00a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d978:	4b1f      	ldr	r3, [pc, #124]	; (800d9f8 <xTaskIncrementTick+0x178>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d97e:	429a      	cmp	r2, r3
 800d980:	d3b8      	bcc.n	800d8f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d982:	2301      	movs	r3, #1
 800d984:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d986:	e7b5      	b.n	800d8f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d988:	4b1b      	ldr	r3, [pc, #108]	; (800d9f8 <xTaskIncrementTick+0x178>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d98e:	4919      	ldr	r1, [pc, #100]	; (800d9f4 <xTaskIncrementTick+0x174>)
 800d990:	4613      	mov	r3, r2
 800d992:	009b      	lsls	r3, r3, #2
 800d994:	4413      	add	r3, r2
 800d996:	009b      	lsls	r3, r3, #2
 800d998:	440b      	add	r3, r1
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	2b01      	cmp	r3, #1
 800d99e:	d901      	bls.n	800d9a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800d9a4:	4b15      	ldr	r3, [pc, #84]	; (800d9fc <xTaskIncrementTick+0x17c>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d101      	bne.n	800d9b0 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800d9ac:	f7f5 f812 	bl	80029d4 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d9b0:	4b13      	ldr	r3, [pc, #76]	; (800da00 <xTaskIncrementTick+0x180>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d009      	beq.n	800d9cc <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	617b      	str	r3, [r7, #20]
 800d9bc:	e006      	b.n	800d9cc <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d9be:	4b0f      	ldr	r3, [pc, #60]	; (800d9fc <xTaskIncrementTick+0x17c>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	4a0d      	ldr	r2, [pc, #52]	; (800d9fc <xTaskIncrementTick+0x17c>)
 800d9c6:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800d9c8:	f7f5 f804 	bl	80029d4 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800d9cc:	697b      	ldr	r3, [r7, #20]
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3718      	adds	r7, #24
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	2000540c 	.word	0x2000540c
 800d9dc:	200053e8 	.word	0x200053e8
 800d9e0:	20005398 	.word	0x20005398
 800d9e4:	2000539c 	.word	0x2000539c
 800d9e8:	200053fc 	.word	0x200053fc
 800d9ec:	20005404 	.word	0x20005404
 800d9f0:	200053ec 	.word	0x200053ec
 800d9f4:	20004f10 	.word	0x20004f10
 800d9f8:	20004f0c 	.word	0x20004f0c
 800d9fc:	200053f4 	.word	0x200053f4
 800da00:	200053f8 	.word	0x200053f8

0800da04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b084      	sub	sp, #16
 800da08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800da0a:	4b46      	ldr	r3, [pc, #280]	; (800db24 <vTaskSwitchContext+0x120>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d003      	beq.n	800da1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800da12:	4b45      	ldr	r3, [pc, #276]	; (800db28 <vTaskSwitchContext+0x124>)
 800da14:	2201      	movs	r2, #1
 800da16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800da18:	e07f      	b.n	800db1a <vTaskSwitchContext+0x116>
		xYieldPending = pdFALSE;
 800da1a:	4b43      	ldr	r3, [pc, #268]	; (800db28 <vTaskSwitchContext+0x124>)
 800da1c:	2200      	movs	r2, #0
 800da1e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800da20:	f7f4 ffc9 	bl	80029b6 <getRunTimeCounterValue>
 800da24:	4603      	mov	r3, r0
 800da26:	4a41      	ldr	r2, [pc, #260]	; (800db2c <vTaskSwitchContext+0x128>)
 800da28:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800da2a:	4b40      	ldr	r3, [pc, #256]	; (800db2c <vTaskSwitchContext+0x128>)
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	4b40      	ldr	r3, [pc, #256]	; (800db30 <vTaskSwitchContext+0x12c>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	429a      	cmp	r2, r3
 800da34:	d90b      	bls.n	800da4e <vTaskSwitchContext+0x4a>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800da36:	4b3f      	ldr	r3, [pc, #252]	; (800db34 <vTaskSwitchContext+0x130>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
 800da3e:	4a3b      	ldr	r2, [pc, #236]	; (800db2c <vTaskSwitchContext+0x128>)
 800da40:	6810      	ldr	r0, [r2, #0]
 800da42:	4a3b      	ldr	r2, [pc, #236]	; (800db30 <vTaskSwitchContext+0x12c>)
 800da44:	6812      	ldr	r2, [r2, #0]
 800da46:	1a82      	subs	r2, r0, r2
 800da48:	440a      	add	r2, r1
 800da4a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800da4e:	4b37      	ldr	r3, [pc, #220]	; (800db2c <vTaskSwitchContext+0x128>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	4a37      	ldr	r2, [pc, #220]	; (800db30 <vTaskSwitchContext+0x12c>)
 800da54:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800da56:	4b37      	ldr	r3, [pc, #220]	; (800db34 <vTaskSwitchContext+0x130>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	681a      	ldr	r2, [r3, #0]
 800da5c:	4b35      	ldr	r3, [pc, #212]	; (800db34 <vTaskSwitchContext+0x130>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da62:	429a      	cmp	r2, r3
 800da64:	d808      	bhi.n	800da78 <vTaskSwitchContext+0x74>
 800da66:	4b33      	ldr	r3, [pc, #204]	; (800db34 <vTaskSwitchContext+0x130>)
 800da68:	681a      	ldr	r2, [r3, #0]
 800da6a:	4b32      	ldr	r3, [pc, #200]	; (800db34 <vTaskSwitchContext+0x130>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	3334      	adds	r3, #52	; 0x34
 800da70:	4619      	mov	r1, r3
 800da72:	4610      	mov	r0, r2
 800da74:	f7f4 ffb5 	bl	80029e2 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 800da78:	4b2e      	ldr	r3, [pc, #184]	; (800db34 <vTaskSwitchContext+0x130>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4a2e      	ldr	r2, [pc, #184]	; (800db38 <vTaskSwitchContext+0x134>)
 800da7e:	6812      	ldr	r2, [r2, #0]
 800da80:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da84:	4b2d      	ldr	r3, [pc, #180]	; (800db3c <vTaskSwitchContext+0x138>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	60fb      	str	r3, [r7, #12]
 800da8a:	e010      	b.n	800daae <vTaskSwitchContext+0xaa>
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d10a      	bne.n	800daa8 <vTaskSwitchContext+0xa4>
	__asm volatile
 800da92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da96:	f383 8811 	msr	BASEPRI, r3
 800da9a:	f3bf 8f6f 	isb	sy
 800da9e:	f3bf 8f4f 	dsb	sy
 800daa2:	607b      	str	r3, [r7, #4]
}
 800daa4:	bf00      	nop
 800daa6:	e7fe      	b.n	800daa6 <vTaskSwitchContext+0xa2>
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	3b01      	subs	r3, #1
 800daac:	60fb      	str	r3, [r7, #12]
 800daae:	4924      	ldr	r1, [pc, #144]	; (800db40 <vTaskSwitchContext+0x13c>)
 800dab0:	68fa      	ldr	r2, [r7, #12]
 800dab2:	4613      	mov	r3, r2
 800dab4:	009b      	lsls	r3, r3, #2
 800dab6:	4413      	add	r3, r2
 800dab8:	009b      	lsls	r3, r3, #2
 800daba:	440b      	add	r3, r1
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d0e4      	beq.n	800da8c <vTaskSwitchContext+0x88>
 800dac2:	68fa      	ldr	r2, [r7, #12]
 800dac4:	4613      	mov	r3, r2
 800dac6:	009b      	lsls	r3, r3, #2
 800dac8:	4413      	add	r3, r2
 800daca:	009b      	lsls	r3, r3, #2
 800dacc:	4a1c      	ldr	r2, [pc, #112]	; (800db40 <vTaskSwitchContext+0x13c>)
 800dace:	4413      	add	r3, r2
 800dad0:	60bb      	str	r3, [r7, #8]
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	685a      	ldr	r2, [r3, #4]
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	605a      	str	r2, [r3, #4]
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	685a      	ldr	r2, [r3, #4]
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	3308      	adds	r3, #8
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d104      	bne.n	800daf2 <vTaskSwitchContext+0xee>
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	685b      	ldr	r3, [r3, #4]
 800daec:	685a      	ldr	r2, [r3, #4]
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	605a      	str	r2, [r3, #4]
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	685b      	ldr	r3, [r3, #4]
 800daf6:	68db      	ldr	r3, [r3, #12]
 800daf8:	4a0e      	ldr	r2, [pc, #56]	; (800db34 <vTaskSwitchContext+0x130>)
 800dafa:	6013      	str	r3, [r2, #0]
 800dafc:	4a0f      	ldr	r2, [pc, #60]	; (800db3c <vTaskSwitchContext+0x138>)
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 800db02:	4b0c      	ldr	r3, [pc, #48]	; (800db34 <vTaskSwitchContext+0x130>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800db0a:	4a0b      	ldr	r2, [pc, #44]	; (800db38 <vTaskSwitchContext+0x134>)
 800db0c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800db0e:	4b09      	ldr	r3, [pc, #36]	; (800db34 <vTaskSwitchContext+0x130>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800db16:	4a0b      	ldr	r2, [pc, #44]	; (800db44 <vTaskSwitchContext+0x140>)
 800db18:	6013      	str	r3, [r2, #0]
}
 800db1a:	bf00      	nop
 800db1c:	3710      	adds	r7, #16
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop
 800db24:	2000540c 	.word	0x2000540c
 800db28:	200053f8 	.word	0x200053f8
 800db2c:	20005414 	.word	0x20005414
 800db30:	20005410 	.word	0x20005410
 800db34:	20004f0c 	.word	0x20004f0c
 800db38:	200053e0 	.word	0x200053e0
 800db3c:	200053ec 	.word	0x200053ec
 800db40:	20004f10 	.word	0x20004f10
 800db44:	20000010 	.word	0x20000010

0800db48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b084      	sub	sp, #16
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d10a      	bne.n	800db6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800db58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db5c:	f383 8811 	msr	BASEPRI, r3
 800db60:	f3bf 8f6f 	isb	sy
 800db64:	f3bf 8f4f 	dsb	sy
 800db68:	60fb      	str	r3, [r7, #12]
}
 800db6a:	bf00      	nop
 800db6c:	e7fe      	b.n	800db6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800db6e:	4b07      	ldr	r3, [pc, #28]	; (800db8c <vTaskPlaceOnEventList+0x44>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	3318      	adds	r3, #24
 800db74:	4619      	mov	r1, r3
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f7fe fa6b 	bl	800c052 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800db7c:	2101      	movs	r1, #1
 800db7e:	6838      	ldr	r0, [r7, #0]
 800db80:	f000 faf2 	bl	800e168 <prvAddCurrentTaskToDelayedList>
}
 800db84:	bf00      	nop
 800db86:	3710      	adds	r7, #16
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}
 800db8c:	20004f0c 	.word	0x20004f0c

0800db90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800db90:	b580      	push	{r7, lr}
 800db92:	b086      	sub	sp, #24
 800db94:	af00      	add	r7, sp, #0
 800db96:	60f8      	str	r0, [r7, #12]
 800db98:	60b9      	str	r1, [r7, #8]
 800db9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d10a      	bne.n	800dbb8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800dba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba6:	f383 8811 	msr	BASEPRI, r3
 800dbaa:	f3bf 8f6f 	isb	sy
 800dbae:	f3bf 8f4f 	dsb	sy
 800dbb2:	617b      	str	r3, [r7, #20]
}
 800dbb4:	bf00      	nop
 800dbb6:	e7fe      	b.n	800dbb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dbb8:	4b0a      	ldr	r3, [pc, #40]	; (800dbe4 <vTaskPlaceOnEventListRestricted+0x54>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	3318      	adds	r3, #24
 800dbbe:	4619      	mov	r1, r3
 800dbc0:	68f8      	ldr	r0, [r7, #12]
 800dbc2:	f7fe fa22 	bl	800c00a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d002      	beq.n	800dbd2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800dbcc:	f04f 33ff 	mov.w	r3, #4294967295
 800dbd0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dbd2:	6879      	ldr	r1, [r7, #4]
 800dbd4:	68b8      	ldr	r0, [r7, #8]
 800dbd6:	f000 fac7 	bl	800e168 <prvAddCurrentTaskToDelayedList>
	}
 800dbda:	bf00      	nop
 800dbdc:	3718      	adds	r7, #24
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}
 800dbe2:	bf00      	nop
 800dbe4:	20004f0c 	.word	0x20004f0c

0800dbe8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b086      	sub	sp, #24
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	68db      	ldr	r3, [r3, #12]
 800dbf4:	68db      	ldr	r3, [r3, #12]
 800dbf6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d10a      	bne.n	800dc14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc02:	f383 8811 	msr	BASEPRI, r3
 800dc06:	f3bf 8f6f 	isb	sy
 800dc0a:	f3bf 8f4f 	dsb	sy
 800dc0e:	60fb      	str	r3, [r7, #12]
}
 800dc10:	bf00      	nop
 800dc12:	e7fe      	b.n	800dc12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	3318      	adds	r3, #24
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7fe fa53 	bl	800c0c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc1e:	4b1f      	ldr	r3, [pc, #124]	; (800dc9c <xTaskRemoveFromEventList+0xb4>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d11f      	bne.n	800dc66 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	3304      	adds	r3, #4
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7fe fa4a 	bl	800c0c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc34:	4b1a      	ldr	r3, [pc, #104]	; (800dca0 <xTaskRemoveFromEventList+0xb8>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d903      	bls.n	800dc44 <xTaskRemoveFromEventList+0x5c>
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc40:	4a17      	ldr	r2, [pc, #92]	; (800dca0 <xTaskRemoveFromEventList+0xb8>)
 800dc42:	6013      	str	r3, [r2, #0]
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc48:	4613      	mov	r3, r2
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	4413      	add	r3, r2
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	4a14      	ldr	r2, [pc, #80]	; (800dca4 <xTaskRemoveFromEventList+0xbc>)
 800dc52:	441a      	add	r2, r3
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	3304      	adds	r3, #4
 800dc58:	4619      	mov	r1, r3
 800dc5a:	4610      	mov	r0, r2
 800dc5c:	f7fe f9d5 	bl	800c00a <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800dc60:	f000 f9d0 	bl	800e004 <prvResetNextTaskUnblockTime>
 800dc64:	e005      	b.n	800dc72 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	3318      	adds	r3, #24
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	480e      	ldr	r0, [pc, #56]	; (800dca8 <xTaskRemoveFromEventList+0xc0>)
 800dc6e:	f7fe f9cc 	bl	800c00a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc76:	4b0d      	ldr	r3, [pc, #52]	; (800dcac <xTaskRemoveFromEventList+0xc4>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d905      	bls.n	800dc8c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dc80:	2301      	movs	r3, #1
 800dc82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dc84:	4b0a      	ldr	r3, [pc, #40]	; (800dcb0 <xTaskRemoveFromEventList+0xc8>)
 800dc86:	2201      	movs	r2, #1
 800dc88:	601a      	str	r2, [r3, #0]
 800dc8a:	e001      	b.n	800dc90 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dc90:	697b      	ldr	r3, [r7, #20]
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3718      	adds	r7, #24
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	2000540c 	.word	0x2000540c
 800dca0:	200053ec 	.word	0x200053ec
 800dca4:	20004f10 	.word	0x20004f10
 800dca8:	200053a0 	.word	0x200053a0
 800dcac:	20004f0c 	.word	0x20004f0c
 800dcb0:	200053f8 	.word	0x200053f8

0800dcb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b083      	sub	sp, #12
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dcbc:	4b06      	ldr	r3, [pc, #24]	; (800dcd8 <vTaskInternalSetTimeOutState+0x24>)
 800dcbe:	681a      	ldr	r2, [r3, #0]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dcc4:	4b05      	ldr	r3, [pc, #20]	; (800dcdc <vTaskInternalSetTimeOutState+0x28>)
 800dcc6:	681a      	ldr	r2, [r3, #0]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	605a      	str	r2, [r3, #4]
}
 800dccc:	bf00      	nop
 800dcce:	370c      	adds	r7, #12
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr
 800dcd8:	200053fc 	.word	0x200053fc
 800dcdc:	200053e8 	.word	0x200053e8

0800dce0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b088      	sub	sp, #32
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d10a      	bne.n	800dd06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf4:	f383 8811 	msr	BASEPRI, r3
 800dcf8:	f3bf 8f6f 	isb	sy
 800dcfc:	f3bf 8f4f 	dsb	sy
 800dd00:	613b      	str	r3, [r7, #16]
}
 800dd02:	bf00      	nop
 800dd04:	e7fe      	b.n	800dd04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d10a      	bne.n	800dd22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd10:	f383 8811 	msr	BASEPRI, r3
 800dd14:	f3bf 8f6f 	isb	sy
 800dd18:	f3bf 8f4f 	dsb	sy
 800dd1c:	60fb      	str	r3, [r7, #12]
}
 800dd1e:	bf00      	nop
 800dd20:	e7fe      	b.n	800dd20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dd22:	f7fe fb27 	bl	800c374 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dd26:	4b24      	ldr	r3, [pc, #144]	; (800ddb8 <xTaskCheckForTimeOut+0xd8>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	685b      	ldr	r3, [r3, #4]
 800dd30:	69ba      	ldr	r2, [r7, #24]
 800dd32:	1ad3      	subs	r3, r2, r3
 800dd34:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800dd36:	4b21      	ldr	r3, [pc, #132]	; (800ddbc <xTaskCheckForTimeOut+0xdc>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f893 31b6 	ldrb.w	r3, [r3, #438]	; 0x1b6
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d007      	beq.n	800dd52 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800dd42:	4b1e      	ldr	r3, [pc, #120]	; (800ddbc <xTaskCheckForTimeOut+0xdc>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	2200      	movs	r2, #0
 800dd48:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
				xReturn = pdTRUE;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	61fb      	str	r3, [r7, #28]
 800dd50:	e02b      	b.n	800ddaa <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd5a:	d102      	bne.n	800dd62 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	61fb      	str	r3, [r7, #28]
 800dd60:	e023      	b.n	800ddaa <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681a      	ldr	r2, [r3, #0]
 800dd66:	4b16      	ldr	r3, [pc, #88]	; (800ddc0 <xTaskCheckForTimeOut+0xe0>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	d007      	beq.n	800dd7e <xTaskCheckForTimeOut+0x9e>
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	69ba      	ldr	r2, [r7, #24]
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d302      	bcc.n	800dd7e <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dd78:	2301      	movs	r3, #1
 800dd7a:	61fb      	str	r3, [r7, #28]
 800dd7c:	e015      	b.n	800ddaa <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	697a      	ldr	r2, [r7, #20]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d20b      	bcs.n	800dda0 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	681a      	ldr	r2, [r3, #0]
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	1ad2      	subs	r2, r2, r3
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f7ff ff8d 	bl	800dcb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	61fb      	str	r3, [r7, #28]
 800dd9e:	e004      	b.n	800ddaa <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	2200      	movs	r2, #0
 800dda4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dda6:	2301      	movs	r3, #1
 800dda8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ddaa:	f7fe fb13 	bl	800c3d4 <vPortExitCritical>

	return xReturn;
 800ddae:	69fb      	ldr	r3, [r7, #28]
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3720      	adds	r7, #32
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}
 800ddb8:	200053e8 	.word	0x200053e8
 800ddbc:	20004f0c 	.word	0x20004f0c
 800ddc0:	200053fc 	.word	0x200053fc

0800ddc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ddc8:	4b03      	ldr	r3, [pc, #12]	; (800ddd8 <vTaskMissedYield+0x14>)
 800ddca:	2201      	movs	r2, #1
 800ddcc:	601a      	str	r2, [r3, #0]
}
 800ddce:	bf00      	nop
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr
 800ddd8:	200053f8 	.word	0x200053f8

0800dddc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dde4:	f000 f8aa 	bl	800df3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dde8:	4b19      	ldr	r3, [pc, #100]	; (800de50 <prvIdleTask+0x74>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	2b01      	cmp	r3, #1
 800ddee:	d907      	bls.n	800de00 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ddf0:	4b18      	ldr	r3, [pc, #96]	; (800de54 <prvIdleTask+0x78>)
 800ddf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddf6:	601a      	str	r2, [r3, #0]
 800ddf8:	f3bf 8f4f 	dsb	sy
 800ddfc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800de00:	f7f4 fde1 	bl	80029c6 <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800de04:	f7ff fc2e 	bl	800d664 <prvGetExpectedIdleTime>
 800de08:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	d9e9      	bls.n	800dde4 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800de10:	f7ff fc1a 	bl	800d648 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800de14:	4b10      	ldr	r3, [pc, #64]	; (800de58 <prvIdleTask+0x7c>)
 800de16:	681a      	ldr	r2, [r3, #0]
 800de18:	4b10      	ldr	r3, [pc, #64]	; (800de5c <prvIdleTask+0x80>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d20a      	bcs.n	800de36 <prvIdleTask+0x5a>
	__asm volatile
 800de20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de24:	f383 8811 	msr	BASEPRI, r3
 800de28:	f3bf 8f6f 	isb	sy
 800de2c:	f3bf 8f4f 	dsb	sy
 800de30:	60bb      	str	r3, [r7, #8]
}
 800de32:	bf00      	nop
 800de34:	e7fe      	b.n	800de34 <prvIdleTask+0x58>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800de36:	f7ff fc15 	bl	800d664 <prvGetExpectedIdleTime>
 800de3a:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	2b01      	cmp	r3, #1
 800de40:	d902      	bls.n	800de48 <prvIdleTask+0x6c>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800de42:	68f8      	ldr	r0, [r7, #12]
 800de44:	f7fe fb4a 	bl	800c4dc <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800de48:	f7ff fc44 	bl	800d6d4 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800de4c:	e7ca      	b.n	800dde4 <prvIdleTask+0x8>
 800de4e:	bf00      	nop
 800de50:	20004f10 	.word	0x20004f10
 800de54:	e000ed04 	.word	0xe000ed04
 800de58:	20005404 	.word	0x20005404
 800de5c:	200053e8 	.word	0x200053e8

0800de60 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800de60:	b480      	push	{r7}
 800de62:	b083      	sub	sp, #12
 800de64:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800de66:	2301      	movs	r3, #1
 800de68:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800de6a:	2301      	movs	r3, #1
 800de6c:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800de6e:	4b0f      	ldr	r3, [pc, #60]	; (800deac <eTaskConfirmSleepModeStatus+0x4c>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d002      	beq.n	800de7c <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800de76:	2300      	movs	r3, #0
 800de78:	71fb      	strb	r3, [r7, #7]
 800de7a:	e010      	b.n	800de9e <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800de7c:	4b0c      	ldr	r3, [pc, #48]	; (800deb0 <eTaskConfirmSleepModeStatus+0x50>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d002      	beq.n	800de8a <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800de84:	2300      	movs	r3, #0
 800de86:	71fb      	strb	r3, [r7, #7]
 800de88:	e009      	b.n	800de9e <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800de8a:	4b0a      	ldr	r3, [pc, #40]	; (800deb4 <eTaskConfirmSleepModeStatus+0x54>)
 800de8c:	681a      	ldr	r2, [r3, #0]
 800de8e:	4b0a      	ldr	r3, [pc, #40]	; (800deb8 <eTaskConfirmSleepModeStatus+0x58>)
 800de90:	6819      	ldr	r1, [r3, #0]
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	1acb      	subs	r3, r1, r3
 800de96:	429a      	cmp	r2, r3
 800de98:	d101      	bne.n	800de9e <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800de9a:	2302      	movs	r3, #2
 800de9c:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800de9e:	79fb      	ldrb	r3, [r7, #7]
	}
 800dea0:	4618      	mov	r0, r3
 800dea2:	370c      	adds	r7, #12
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr
 800deac:	200053a0 	.word	0x200053a0
 800deb0:	200053f8 	.word	0x200053f8
 800deb4:	200053cc 	.word	0x200053cc
 800deb8:	200053e4 	.word	0x200053e4

0800debc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b082      	sub	sp, #8
 800dec0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dec2:	2300      	movs	r3, #0
 800dec4:	607b      	str	r3, [r7, #4]
 800dec6:	e00c      	b.n	800dee2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	4613      	mov	r3, r2
 800decc:	009b      	lsls	r3, r3, #2
 800dece:	4413      	add	r3, r2
 800ded0:	009b      	lsls	r3, r3, #2
 800ded2:	4a12      	ldr	r2, [pc, #72]	; (800df1c <prvInitialiseTaskLists+0x60>)
 800ded4:	4413      	add	r3, r2
 800ded6:	4618      	mov	r0, r3
 800ded8:	f7fe f86a 	bl	800bfb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	3301      	adds	r3, #1
 800dee0:	607b      	str	r3, [r7, #4]
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2b37      	cmp	r3, #55	; 0x37
 800dee6:	d9ef      	bls.n	800dec8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dee8:	480d      	ldr	r0, [pc, #52]	; (800df20 <prvInitialiseTaskLists+0x64>)
 800deea:	f7fe f861 	bl	800bfb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800deee:	480d      	ldr	r0, [pc, #52]	; (800df24 <prvInitialiseTaskLists+0x68>)
 800def0:	f7fe f85e 	bl	800bfb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800def4:	480c      	ldr	r0, [pc, #48]	; (800df28 <prvInitialiseTaskLists+0x6c>)
 800def6:	f7fe f85b 	bl	800bfb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800defa:	480c      	ldr	r0, [pc, #48]	; (800df2c <prvInitialiseTaskLists+0x70>)
 800defc:	f7fe f858 	bl	800bfb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800df00:	480b      	ldr	r0, [pc, #44]	; (800df30 <prvInitialiseTaskLists+0x74>)
 800df02:	f7fe f855 	bl	800bfb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800df06:	4b0b      	ldr	r3, [pc, #44]	; (800df34 <prvInitialiseTaskLists+0x78>)
 800df08:	4a05      	ldr	r2, [pc, #20]	; (800df20 <prvInitialiseTaskLists+0x64>)
 800df0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800df0c:	4b0a      	ldr	r3, [pc, #40]	; (800df38 <prvInitialiseTaskLists+0x7c>)
 800df0e:	4a05      	ldr	r2, [pc, #20]	; (800df24 <prvInitialiseTaskLists+0x68>)
 800df10:	601a      	str	r2, [r3, #0]
}
 800df12:	bf00      	nop
 800df14:	3708      	adds	r7, #8
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}
 800df1a:	bf00      	nop
 800df1c:	20004f10 	.word	0x20004f10
 800df20:	20005370 	.word	0x20005370
 800df24:	20005384 	.word	0x20005384
 800df28:	200053a0 	.word	0x200053a0
 800df2c:	200053b4 	.word	0x200053b4
 800df30:	200053cc 	.word	0x200053cc
 800df34:	20005398 	.word	0x20005398
 800df38:	2000539c 	.word	0x2000539c

0800df3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b082      	sub	sp, #8
 800df40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df42:	e019      	b.n	800df78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800df44:	f7fe fa16 	bl	800c374 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df48:	4b10      	ldr	r3, [pc, #64]	; (800df8c <prvCheckTasksWaitingTermination+0x50>)
 800df4a:	68db      	ldr	r3, [r3, #12]
 800df4c:	68db      	ldr	r3, [r3, #12]
 800df4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	3304      	adds	r3, #4
 800df54:	4618      	mov	r0, r3
 800df56:	f7fe f8b5 	bl	800c0c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800df5a:	4b0d      	ldr	r3, [pc, #52]	; (800df90 <prvCheckTasksWaitingTermination+0x54>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	3b01      	subs	r3, #1
 800df60:	4a0b      	ldr	r2, [pc, #44]	; (800df90 <prvCheckTasksWaitingTermination+0x54>)
 800df62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800df64:	4b0b      	ldr	r3, [pc, #44]	; (800df94 <prvCheckTasksWaitingTermination+0x58>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	3b01      	subs	r3, #1
 800df6a:	4a0a      	ldr	r2, [pc, #40]	; (800df94 <prvCheckTasksWaitingTermination+0x58>)
 800df6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800df6e:	f7fe fa31 	bl	800c3d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f000 f810 	bl	800df98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df78:	4b06      	ldr	r3, [pc, #24]	; (800df94 <prvCheckTasksWaitingTermination+0x58>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d1e1      	bne.n	800df44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800df80:	bf00      	nop
 800df82:	bf00      	nop
 800df84:	3708      	adds	r7, #8
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	200053b4 	.word	0x200053b4
 800df90:	200053e4 	.word	0x200053e4
 800df94:	200053c8 	.word	0x200053c8

0800df98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b084      	sub	sp, #16
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f000 fe1e 	bl	800ebe8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d108      	bne.n	800dfc8 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7fd feda 	bl	800bd74 <vPortFree>
				vPortFree( pxTCB );
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f7fd fed7 	bl	800bd74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dfc6:	e018      	b.n	800dffa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800dfce:	2b01      	cmp	r3, #1
 800dfd0:	d103      	bne.n	800dfda <prvDeleteTCB+0x42>
				vPortFree( pxTCB );
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f7fd fece 	bl	800bd74 <vPortFree>
	}
 800dfd8:	e00f      	b.n	800dffa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800dfe0:	2b02      	cmp	r3, #2
 800dfe2:	d00a      	beq.n	800dffa <prvDeleteTCB+0x62>
	__asm volatile
 800dfe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe8:	f383 8811 	msr	BASEPRI, r3
 800dfec:	f3bf 8f6f 	isb	sy
 800dff0:	f3bf 8f4f 	dsb	sy
 800dff4:	60fb      	str	r3, [r7, #12]
}
 800dff6:	bf00      	nop
 800dff8:	e7fe      	b.n	800dff8 <prvDeleteTCB+0x60>
	}
 800dffa:	bf00      	nop
 800dffc:	3710      	adds	r7, #16
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
	...

0800e004 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e004:	b480      	push	{r7}
 800e006:	b083      	sub	sp, #12
 800e008:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e00a:	4b0c      	ldr	r3, [pc, #48]	; (800e03c <prvResetNextTaskUnblockTime+0x38>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d104      	bne.n	800e01e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e014:	4b0a      	ldr	r3, [pc, #40]	; (800e040 <prvResetNextTaskUnblockTime+0x3c>)
 800e016:	f04f 32ff 	mov.w	r2, #4294967295
 800e01a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e01c:	e008      	b.n	800e030 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e01e:	4b07      	ldr	r3, [pc, #28]	; (800e03c <prvResetNextTaskUnblockTime+0x38>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	68db      	ldr	r3, [r3, #12]
 800e024:	68db      	ldr	r3, [r3, #12]
 800e026:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	685b      	ldr	r3, [r3, #4]
 800e02c:	4a04      	ldr	r2, [pc, #16]	; (800e040 <prvResetNextTaskUnblockTime+0x3c>)
 800e02e:	6013      	str	r3, [r2, #0]
}
 800e030:	bf00      	nop
 800e032:	370c      	adds	r7, #12
 800e034:	46bd      	mov	sp, r7
 800e036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03a:	4770      	bx	lr
 800e03c:	20005398 	.word	0x20005398
 800e040:	20005404 	.word	0x20005404

0800e044 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e044:	b480      	push	{r7}
 800e046:	b083      	sub	sp, #12
 800e048:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e04a:	4b0b      	ldr	r3, [pc, #44]	; (800e078 <xTaskGetSchedulerState+0x34>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d102      	bne.n	800e058 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e052:	2301      	movs	r3, #1
 800e054:	607b      	str	r3, [r7, #4]
 800e056:	e008      	b.n	800e06a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e058:	4b08      	ldr	r3, [pc, #32]	; (800e07c <xTaskGetSchedulerState+0x38>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d102      	bne.n	800e066 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e060:	2302      	movs	r3, #2
 800e062:	607b      	str	r3, [r7, #4]
 800e064:	e001      	b.n	800e06a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e066:	2300      	movs	r3, #0
 800e068:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e06a:	687b      	ldr	r3, [r7, #4]
	}
 800e06c:	4618      	mov	r0, r3
 800e06e:	370c      	adds	r7, #12
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr
 800e078:	200053f0 	.word	0x200053f0
 800e07c:	2000540c 	.word	0x2000540c

0800e080 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e080:	b580      	push	{r7, lr}
 800e082:	b086      	sub	sp, #24
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e08c:	2300      	movs	r3, #0
 800e08e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d05c      	beq.n	800e150 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e096:	4b31      	ldr	r3, [pc, #196]	; (800e15c <xTaskPriorityDisinherit+0xdc>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	693a      	ldr	r2, [r7, #16]
 800e09c:	429a      	cmp	r2, r3
 800e09e:	d00a      	beq.n	800e0b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a4:	f383 8811 	msr	BASEPRI, r3
 800e0a8:	f3bf 8f6f 	isb	sy
 800e0ac:	f3bf 8f4f 	dsb	sy
 800e0b0:	60fb      	str	r3, [r7, #12]
}
 800e0b2:	bf00      	nop
 800e0b4:	e7fe      	b.n	800e0b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d10a      	bne.n	800e0d6 <xTaskPriorityDisinherit+0x56>
	__asm volatile
 800e0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c4:	f383 8811 	msr	BASEPRI, r3
 800e0c8:	f3bf 8f6f 	isb	sy
 800e0cc:	f3bf 8f4f 	dsb	sy
 800e0d0:	60bb      	str	r3, [r7, #8]
}
 800e0d2:	bf00      	nop
 800e0d4:	e7fe      	b.n	800e0d4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800e0dc:	1e5a      	subs	r2, r3, #1
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	d02e      	beq.n	800e150 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d129      	bne.n	800e150 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e0fc:	693b      	ldr	r3, [r7, #16]
 800e0fe:	3304      	adds	r3, #4
 800e100:	4618      	mov	r0, r3
 800e102:	f7fd ffdf 	bl	800c0c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e110:	693b      	ldr	r3, [r7, #16]
 800e112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e114:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e120:	4b0f      	ldr	r3, [pc, #60]	; (800e160 <xTaskPriorityDisinherit+0xe0>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	429a      	cmp	r2, r3
 800e126:	d903      	bls.n	800e130 <xTaskPriorityDisinherit+0xb0>
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e12c:	4a0c      	ldr	r2, [pc, #48]	; (800e160 <xTaskPriorityDisinherit+0xe0>)
 800e12e:	6013      	str	r3, [r2, #0]
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e134:	4613      	mov	r3, r2
 800e136:	009b      	lsls	r3, r3, #2
 800e138:	4413      	add	r3, r2
 800e13a:	009b      	lsls	r3, r3, #2
 800e13c:	4a09      	ldr	r2, [pc, #36]	; (800e164 <xTaskPriorityDisinherit+0xe4>)
 800e13e:	441a      	add	r2, r3
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	3304      	adds	r3, #4
 800e144:	4619      	mov	r1, r3
 800e146:	4610      	mov	r0, r2
 800e148:	f7fd ff5f 	bl	800c00a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e14c:	2301      	movs	r3, #1
 800e14e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e150:	697b      	ldr	r3, [r7, #20]
	}
 800e152:	4618      	mov	r0, r3
 800e154:	3718      	adds	r7, #24
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}
 800e15a:	bf00      	nop
 800e15c:	20004f0c 	.word	0x20004f0c
 800e160:	200053ec 	.word	0x200053ec
 800e164:	20004f10 	.word	0x20004f10

0800e168 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b084      	sub	sp, #16
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e172:	4b24      	ldr	r3, [pc, #144]	; (800e204 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800e178:	4b23      	ldr	r3, [pc, #140]	; (800e208 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	2200      	movs	r2, #0
 800e17e:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e182:	4b21      	ldr	r3, [pc, #132]	; (800e208 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	3304      	adds	r3, #4
 800e188:	4618      	mov	r0, r3
 800e18a:	f7fd ff9b 	bl	800c0c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e194:	d10a      	bne.n	800e1ac <prvAddCurrentTaskToDelayedList+0x44>
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d007      	beq.n	800e1ac <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e19c:	4b1a      	ldr	r3, [pc, #104]	; (800e208 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	3304      	adds	r3, #4
 800e1a2:	4619      	mov	r1, r3
 800e1a4:	4819      	ldr	r0, [pc, #100]	; (800e20c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e1a6:	f7fd ff30 	bl	800c00a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e1aa:	e026      	b.n	800e1fa <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e1ac:	68fa      	ldr	r2, [r7, #12]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	4413      	add	r3, r2
 800e1b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e1b4:	4b14      	ldr	r3, [pc, #80]	; (800e208 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	68ba      	ldr	r2, [r7, #8]
 800e1ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e1bc:	68ba      	ldr	r2, [r7, #8]
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d209      	bcs.n	800e1d8 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1c4:	4b12      	ldr	r3, [pc, #72]	; (800e210 <prvAddCurrentTaskToDelayedList+0xa8>)
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	4b0f      	ldr	r3, [pc, #60]	; (800e208 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	3304      	adds	r3, #4
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	4610      	mov	r0, r2
 800e1d2:	f7fd ff3e 	bl	800c052 <vListInsert>
}
 800e1d6:	e010      	b.n	800e1fa <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1d8:	4b0e      	ldr	r3, [pc, #56]	; (800e214 <prvAddCurrentTaskToDelayedList+0xac>)
 800e1da:	681a      	ldr	r2, [r3, #0]
 800e1dc:	4b0a      	ldr	r3, [pc, #40]	; (800e208 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	3304      	adds	r3, #4
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	4610      	mov	r0, r2
 800e1e6:	f7fd ff34 	bl	800c052 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e1ea:	4b0b      	ldr	r3, [pc, #44]	; (800e218 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	68ba      	ldr	r2, [r7, #8]
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d202      	bcs.n	800e1fa <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 800e1f4:	4a08      	ldr	r2, [pc, #32]	; (800e218 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	6013      	str	r3, [r2, #0]
}
 800e1fa:	bf00      	nop
 800e1fc:	3710      	adds	r7, #16
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}
 800e202:	bf00      	nop
 800e204:	200053e8 	.word	0x200053e8
 800e208:	20004f0c 	.word	0x20004f0c
 800e20c:	200053cc 	.word	0x200053cc
 800e210:	2000539c 	.word	0x2000539c
 800e214:	20005398 	.word	0x20005398
 800e218:	20005404 	.word	0x20005404

0800e21c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b08a      	sub	sp, #40	; 0x28
 800e220:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e222:	2300      	movs	r3, #0
 800e224:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e226:	f000 fbc1 	bl	800e9ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e22a:	4b1c      	ldr	r3, [pc, #112]	; (800e29c <xTimerCreateTimerTask+0x80>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d021      	beq.n	800e276 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e232:	2300      	movs	r3, #0
 800e234:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e236:	2300      	movs	r3, #0
 800e238:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e23a:	1d3a      	adds	r2, r7, #4
 800e23c:	f107 0108 	add.w	r1, r7, #8
 800e240:	f107 030c 	add.w	r3, r7, #12
 800e244:	4618      	mov	r0, r3
 800e246:	f7fd fcab 	bl	800bba0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e24a:	6879      	ldr	r1, [r7, #4]
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	68fa      	ldr	r2, [r7, #12]
 800e250:	9202      	str	r2, [sp, #8]
 800e252:	9301      	str	r3, [sp, #4]
 800e254:	2302      	movs	r3, #2
 800e256:	9300      	str	r3, [sp, #0]
 800e258:	2300      	movs	r3, #0
 800e25a:	460a      	mov	r2, r1
 800e25c:	4910      	ldr	r1, [pc, #64]	; (800e2a0 <xTimerCreateTimerTask+0x84>)
 800e25e:	4811      	ldr	r0, [pc, #68]	; (800e2a4 <xTimerCreateTimerTask+0x88>)
 800e260:	f7fe ff7a 	bl	800d158 <xTaskCreateStatic>
 800e264:	4603      	mov	r3, r0
 800e266:	4a10      	ldr	r2, [pc, #64]	; (800e2a8 <xTimerCreateTimerTask+0x8c>)
 800e268:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e26a:	4b0f      	ldr	r3, [pc, #60]	; (800e2a8 <xTimerCreateTimerTask+0x8c>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d001      	beq.n	800e276 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e272:	2301      	movs	r3, #1
 800e274:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d10a      	bne.n	800e292 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e280:	f383 8811 	msr	BASEPRI, r3
 800e284:	f3bf 8f6f 	isb	sy
 800e288:	f3bf 8f4f 	dsb	sy
 800e28c:	613b      	str	r3, [r7, #16]
}
 800e28e:	bf00      	nop
 800e290:	e7fe      	b.n	800e290 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e292:	697b      	ldr	r3, [r7, #20]
}
 800e294:	4618      	mov	r0, r3
 800e296:	3718      	adds	r7, #24
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}
 800e29c:	20005448 	.word	0x20005448
 800e2a0:	0800f320 	.word	0x0800f320
 800e2a4:	0800e551 	.word	0x0800e551
 800e2a8:	2000544c 	.word	0x2000544c

0800e2ac <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b088      	sub	sp, #32
 800e2b0:	af02      	add	r7, sp, #8
 800e2b2:	60f8      	str	r0, [r7, #12]
 800e2b4:	60b9      	str	r1, [r7, #8]
 800e2b6:	607a      	str	r2, [r7, #4]
 800e2b8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800e2ba:	202c      	movs	r0, #44	; 0x2c
 800e2bc:	f7fd fc8a 	bl	800bbd4 <pvPortMalloc>
 800e2c0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d00d      	beq.n	800e2e4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	9301      	str	r3, [sp, #4]
 800e2d4:	6a3b      	ldr	r3, [r7, #32]
 800e2d6:	9300      	str	r3, [sp, #0]
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	687a      	ldr	r2, [r7, #4]
 800e2dc:	68b9      	ldr	r1, [r7, #8]
 800e2de:	68f8      	ldr	r0, [r7, #12]
 800e2e0:	f000 f843 	bl	800e36a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800e2e4:	697b      	ldr	r3, [r7, #20]
	}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3718      	adds	r7, #24
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}

0800e2ee <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800e2ee:	b580      	push	{r7, lr}
 800e2f0:	b08a      	sub	sp, #40	; 0x28
 800e2f2:	af02      	add	r7, sp, #8
 800e2f4:	60f8      	str	r0, [r7, #12]
 800e2f6:	60b9      	str	r1, [r7, #8]
 800e2f8:	607a      	str	r2, [r7, #4]
 800e2fa:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800e2fc:	232c      	movs	r3, #44	; 0x2c
 800e2fe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	2b2c      	cmp	r3, #44	; 0x2c
 800e304:	d00a      	beq.n	800e31c <xTimerCreateStatic+0x2e>
	__asm volatile
 800e306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e30a:	f383 8811 	msr	BASEPRI, r3
 800e30e:	f3bf 8f6f 	isb	sy
 800e312:	f3bf 8f4f 	dsb	sy
 800e316:	61bb      	str	r3, [r7, #24]
}
 800e318:	bf00      	nop
 800e31a:	e7fe      	b.n	800e31a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e31c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800e31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e320:	2b00      	cmp	r3, #0
 800e322:	d10a      	bne.n	800e33a <xTimerCreateStatic+0x4c>
	__asm volatile
 800e324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e328:	f383 8811 	msr	BASEPRI, r3
 800e32c:	f3bf 8f6f 	isb	sy
 800e330:	f3bf 8f4f 	dsb	sy
 800e334:	617b      	str	r3, [r7, #20]
}
 800e336:	bf00      	nop
 800e338:	e7fe      	b.n	800e338 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800e33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e33c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800e33e:	69fb      	ldr	r3, [r7, #28]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d00d      	beq.n	800e360 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800e344:	69fb      	ldr	r3, [r7, #28]
 800e346:	2202      	movs	r2, #2
 800e348:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e34c:	69fb      	ldr	r3, [r7, #28]
 800e34e:	9301      	str	r3, [sp, #4]
 800e350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e352:	9300      	str	r3, [sp, #0]
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	687a      	ldr	r2, [r7, #4]
 800e358:	68b9      	ldr	r1, [r7, #8]
 800e35a:	68f8      	ldr	r0, [r7, #12]
 800e35c:	f000 f805 	bl	800e36a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800e360:	69fb      	ldr	r3, [r7, #28]
	}
 800e362:	4618      	mov	r0, r3
 800e364:	3720      	adds	r7, #32
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}

0800e36a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800e36a:	b580      	push	{r7, lr}
 800e36c:	b086      	sub	sp, #24
 800e36e:	af00      	add	r7, sp, #0
 800e370:	60f8      	str	r0, [r7, #12]
 800e372:	60b9      	str	r1, [r7, #8]
 800e374:	607a      	str	r2, [r7, #4]
 800e376:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d10a      	bne.n	800e394 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800e37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e382:	f383 8811 	msr	BASEPRI, r3
 800e386:	f3bf 8f6f 	isb	sy
 800e38a:	f3bf 8f4f 	dsb	sy
 800e38e:	617b      	str	r3, [r7, #20]
}
 800e390:	bf00      	nop
 800e392:	e7fe      	b.n	800e392 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800e394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e396:	2b00      	cmp	r3, #0
 800e398:	d01e      	beq.n	800e3d8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800e39a:	f000 fb07 	bl	800e9ac <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800e39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a0:	68fa      	ldr	r2, [r7, #12]
 800e3a2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800e3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a6:	68ba      	ldr	r2, [r7, #8]
 800e3a8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800e3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ac:	683a      	ldr	r2, [r7, #0]
 800e3ae:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b2:	6a3a      	ldr	r2, [r7, #32]
 800e3b4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800e3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b8:	3304      	adds	r3, #4
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f7fd fe18 	bl	800bff0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d008      	beq.n	800e3d8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800e3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3cc:	f043 0304 	orr.w	r3, r3, #4
 800e3d0:	b2da      	uxtb	r2, r3
 800e3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800e3d8:	bf00      	nop
 800e3da:	3718      	adds	r7, #24
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}

0800e3e0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b08a      	sub	sp, #40	; 0x28
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	60f8      	str	r0, [r7, #12]
 800e3e8:	60b9      	str	r1, [r7, #8]
 800e3ea:	607a      	str	r2, [r7, #4]
 800e3ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d10a      	bne.n	800e40e <xTimerGenericCommand+0x2e>
	__asm volatile
 800e3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3fc:	f383 8811 	msr	BASEPRI, r3
 800e400:	f3bf 8f6f 	isb	sy
 800e404:	f3bf 8f4f 	dsb	sy
 800e408:	623b      	str	r3, [r7, #32]
}
 800e40a:	bf00      	nop
 800e40c:	e7fe      	b.n	800e40c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e40e:	4b1a      	ldr	r3, [pc, #104]	; (800e478 <xTimerGenericCommand+0x98>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d02a      	beq.n	800e46c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	2b05      	cmp	r3, #5
 800e426:	dc18      	bgt.n	800e45a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e428:	f7ff fe0c 	bl	800e044 <xTaskGetSchedulerState>
 800e42c:	4603      	mov	r3, r0
 800e42e:	2b02      	cmp	r3, #2
 800e430:	d109      	bne.n	800e446 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e432:	4b11      	ldr	r3, [pc, #68]	; (800e478 <xTimerGenericCommand+0x98>)
 800e434:	6818      	ldr	r0, [r3, #0]
 800e436:	f107 0110 	add.w	r1, r7, #16
 800e43a:	2300      	movs	r3, #0
 800e43c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e43e:	f7fe faa3 	bl	800c988 <xQueueGenericSend>
 800e442:	6278      	str	r0, [r7, #36]	; 0x24
 800e444:	e012      	b.n	800e46c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e446:	4b0c      	ldr	r3, [pc, #48]	; (800e478 <xTimerGenericCommand+0x98>)
 800e448:	6818      	ldr	r0, [r3, #0]
 800e44a:	f107 0110 	add.w	r1, r7, #16
 800e44e:	2300      	movs	r3, #0
 800e450:	2200      	movs	r2, #0
 800e452:	f7fe fa99 	bl	800c988 <xQueueGenericSend>
 800e456:	6278      	str	r0, [r7, #36]	; 0x24
 800e458:	e008      	b.n	800e46c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e45a:	4b07      	ldr	r3, [pc, #28]	; (800e478 <xTimerGenericCommand+0x98>)
 800e45c:	6818      	ldr	r0, [r3, #0]
 800e45e:	f107 0110 	add.w	r1, r7, #16
 800e462:	2300      	movs	r3, #0
 800e464:	683a      	ldr	r2, [r7, #0]
 800e466:	f7fe fb8d 	bl	800cb84 <xQueueGenericSendFromISR>
 800e46a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e46e:	4618      	mov	r0, r3
 800e470:	3728      	adds	r7, #40	; 0x28
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}
 800e476:	bf00      	nop
 800e478:	20005448 	.word	0x20005448

0800e47c <xTimerGetExpiryTime>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
{
 800e47c:	b480      	push	{r7}
 800e47e:	b087      	sub	sp, #28
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
Timer_t * pxTimer =  xTimer;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	617b      	str	r3, [r7, #20]
TickType_t xReturn;

	configASSERT( xTimer );
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d10a      	bne.n	800e4a4 <xTimerGetExpiryTime+0x28>
	__asm volatile
 800e48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e492:	f383 8811 	msr	BASEPRI, r3
 800e496:	f3bf 8f6f 	isb	sy
 800e49a:	f3bf 8f4f 	dsb	sy
 800e49e:	60fb      	str	r3, [r7, #12]
}
 800e4a0:	bf00      	nop
 800e4a2:	e7fe      	b.n	800e4a2 <xTimerGetExpiryTime+0x26>
	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 800e4a4:	697b      	ldr	r3, [r7, #20]
 800e4a6:	685b      	ldr	r3, [r3, #4]
 800e4a8:	613b      	str	r3, [r7, #16]
	return xReturn;
 800e4aa:	693b      	ldr	r3, [r7, #16]
}
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	371c      	adds	r7, #28
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b6:	4770      	bx	lr

0800e4b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b088      	sub	sp, #32
 800e4bc:	af02      	add	r7, sp, #8
 800e4be:	6078      	str	r0, [r7, #4]
 800e4c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4c2:	4b22      	ldr	r3, [pc, #136]	; (800e54c <prvProcessExpiredTimer+0x94>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	68db      	ldr	r3, [r3, #12]
 800e4c8:	68db      	ldr	r3, [r3, #12]
 800e4ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	3304      	adds	r3, #4
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f7fd fdf7 	bl	800c0c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4dc:	f003 0304 	and.w	r3, r3, #4
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d022      	beq.n	800e52a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	699a      	ldr	r2, [r3, #24]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	18d1      	adds	r1, r2, r3
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	683a      	ldr	r2, [r7, #0]
 800e4f0:	6978      	ldr	r0, [r7, #20]
 800e4f2:	f000 f8d3 	bl	800e69c <prvInsertTimerInActiveList>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d01f      	beq.n	800e53c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	9300      	str	r3, [sp, #0]
 800e500:	2300      	movs	r3, #0
 800e502:	687a      	ldr	r2, [r7, #4]
 800e504:	2100      	movs	r1, #0
 800e506:	6978      	ldr	r0, [r7, #20]
 800e508:	f7ff ff6a 	bl	800e3e0 <xTimerGenericCommand>
 800e50c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d113      	bne.n	800e53c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e518:	f383 8811 	msr	BASEPRI, r3
 800e51c:	f3bf 8f6f 	isb	sy
 800e520:	f3bf 8f4f 	dsb	sy
 800e524:	60fb      	str	r3, [r7, #12]
}
 800e526:	bf00      	nop
 800e528:	e7fe      	b.n	800e528 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e530:	f023 0301 	bic.w	r3, r3, #1
 800e534:	b2da      	uxtb	r2, r3
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	6a1b      	ldr	r3, [r3, #32]
 800e540:	6978      	ldr	r0, [r7, #20]
 800e542:	4798      	blx	r3
}
 800e544:	bf00      	nop
 800e546:	3718      	adds	r7, #24
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}
 800e54c:	20005440 	.word	0x20005440

0800e550 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 800e558:	f7f4 fa55 	bl	8002a06 <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e55c:	f107 0308 	add.w	r3, r7, #8
 800e560:	4618      	mov	r0, r3
 800e562:	f000 f857 	bl	800e614 <prvGetNextExpireTime>
 800e566:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	4619      	mov	r1, r3
 800e56c:	68f8      	ldr	r0, [r7, #12]
 800e56e:	f000 f803 	bl	800e578 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e572:	f000 f8d5 	bl	800e720 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e576:	e7f1      	b.n	800e55c <prvTimerTask+0xc>

0800e578 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b084      	sub	sp, #16
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e582:	f7ff f861 	bl	800d648 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e586:	f107 0308 	add.w	r3, r7, #8
 800e58a:	4618      	mov	r0, r3
 800e58c:	f000 f866 	bl	800e65c <prvSampleTimeNow>
 800e590:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d130      	bne.n	800e5fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d10a      	bne.n	800e5b4 <prvProcessTimerOrBlockTask+0x3c>
 800e59e:	687a      	ldr	r2, [r7, #4]
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d806      	bhi.n	800e5b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e5a6:	f7ff f895 	bl	800d6d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e5aa:	68f9      	ldr	r1, [r7, #12]
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f7ff ff83 	bl	800e4b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e5b2:	e024      	b.n	800e5fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d008      	beq.n	800e5cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e5ba:	4b13      	ldr	r3, [pc, #76]	; (800e608 <prvProcessTimerOrBlockTask+0x90>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d101      	bne.n	800e5c8 <prvProcessTimerOrBlockTask+0x50>
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	e000      	b.n	800e5ca <prvProcessTimerOrBlockTask+0x52>
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e5cc:	4b0f      	ldr	r3, [pc, #60]	; (800e60c <prvProcessTimerOrBlockTask+0x94>)
 800e5ce:	6818      	ldr	r0, [r3, #0]
 800e5d0:	687a      	ldr	r2, [r7, #4]
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	1ad3      	subs	r3, r2, r3
 800e5d6:	683a      	ldr	r2, [r7, #0]
 800e5d8:	4619      	mov	r1, r3
 800e5da:	f7fe fd89 	bl	800d0f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e5de:	f7ff f879 	bl	800d6d4 <xTaskResumeAll>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d10a      	bne.n	800e5fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e5e8:	4b09      	ldr	r3, [pc, #36]	; (800e610 <prvProcessTimerOrBlockTask+0x98>)
 800e5ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5ee:	601a      	str	r2, [r3, #0]
 800e5f0:	f3bf 8f4f 	dsb	sy
 800e5f4:	f3bf 8f6f 	isb	sy
}
 800e5f8:	e001      	b.n	800e5fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e5fa:	f7ff f86b 	bl	800d6d4 <xTaskResumeAll>
}
 800e5fe:	bf00      	nop
 800e600:	3710      	adds	r7, #16
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
 800e606:	bf00      	nop
 800e608:	20005444 	.word	0x20005444
 800e60c:	20005448 	.word	0x20005448
 800e610:	e000ed04 	.word	0xe000ed04

0800e614 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e614:	b480      	push	{r7}
 800e616:	b085      	sub	sp, #20
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e61c:	4b0e      	ldr	r3, [pc, #56]	; (800e658 <prvGetNextExpireTime+0x44>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d101      	bne.n	800e62a <prvGetNextExpireTime+0x16>
 800e626:	2201      	movs	r2, #1
 800e628:	e000      	b.n	800e62c <prvGetNextExpireTime+0x18>
 800e62a:	2200      	movs	r2, #0
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d105      	bne.n	800e644 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e638:	4b07      	ldr	r3, [pc, #28]	; (800e658 <prvGetNextExpireTime+0x44>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	68db      	ldr	r3, [r3, #12]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	60fb      	str	r3, [r7, #12]
 800e642:	e001      	b.n	800e648 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e644:	2300      	movs	r3, #0
 800e646:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e648:	68fb      	ldr	r3, [r7, #12]
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3714      	adds	r7, #20
 800e64e:	46bd      	mov	sp, r7
 800e650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e654:	4770      	bx	lr
 800e656:	bf00      	nop
 800e658:	20005440 	.word	0x20005440

0800e65c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b084      	sub	sp, #16
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e664:	f7ff f8d4 	bl	800d810 <xTaskGetTickCount>
 800e668:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e66a:	4b0b      	ldr	r3, [pc, #44]	; (800e698 <prvSampleTimeNow+0x3c>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	68fa      	ldr	r2, [r7, #12]
 800e670:	429a      	cmp	r2, r3
 800e672:	d205      	bcs.n	800e680 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e674:	f000 f936 	bl	800e8e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2201      	movs	r2, #1
 800e67c:	601a      	str	r2, [r3, #0]
 800e67e:	e002      	b.n	800e686 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2200      	movs	r2, #0
 800e684:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e686:	4a04      	ldr	r2, [pc, #16]	; (800e698 <prvSampleTimeNow+0x3c>)
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e68c:	68fb      	ldr	r3, [r7, #12]
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3710      	adds	r7, #16
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}
 800e696:	bf00      	nop
 800e698:	20005450 	.word	0x20005450

0800e69c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b086      	sub	sp, #24
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	60f8      	str	r0, [r7, #12]
 800e6a4:	60b9      	str	r1, [r7, #8]
 800e6a6:	607a      	str	r2, [r7, #4]
 800e6a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	68ba      	ldr	r2, [r7, #8]
 800e6b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	68fa      	ldr	r2, [r7, #12]
 800e6b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e6ba:	68ba      	ldr	r2, [r7, #8]
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	429a      	cmp	r2, r3
 800e6c0:	d812      	bhi.n	800e6e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6c2:	687a      	ldr	r2, [r7, #4]
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	1ad2      	subs	r2, r2, r3
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	699b      	ldr	r3, [r3, #24]
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d302      	bcc.n	800e6d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	617b      	str	r3, [r7, #20]
 800e6d4:	e01b      	b.n	800e70e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e6d6:	4b10      	ldr	r3, [pc, #64]	; (800e718 <prvInsertTimerInActiveList+0x7c>)
 800e6d8:	681a      	ldr	r2, [r3, #0]
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	3304      	adds	r3, #4
 800e6de:	4619      	mov	r1, r3
 800e6e0:	4610      	mov	r0, r2
 800e6e2:	f7fd fcb6 	bl	800c052 <vListInsert>
 800e6e6:	e012      	b.n	800e70e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e6e8:	687a      	ldr	r2, [r7, #4]
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d206      	bcs.n	800e6fe <prvInsertTimerInActiveList+0x62>
 800e6f0:	68ba      	ldr	r2, [r7, #8]
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d302      	bcc.n	800e6fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	617b      	str	r3, [r7, #20]
 800e6fc:	e007      	b.n	800e70e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e6fe:	4b07      	ldr	r3, [pc, #28]	; (800e71c <prvInsertTimerInActiveList+0x80>)
 800e700:	681a      	ldr	r2, [r3, #0]
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	3304      	adds	r3, #4
 800e706:	4619      	mov	r1, r3
 800e708:	4610      	mov	r0, r2
 800e70a:	f7fd fca2 	bl	800c052 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e70e:	697b      	ldr	r3, [r7, #20]
}
 800e710:	4618      	mov	r0, r3
 800e712:	3718      	adds	r7, #24
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}
 800e718:	20005444 	.word	0x20005444
 800e71c:	20005440 	.word	0x20005440

0800e720 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b08e      	sub	sp, #56	; 0x38
 800e724:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e726:	e0ca      	b.n	800e8be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	da18      	bge.n	800e760 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e72e:	1d3b      	adds	r3, r7, #4
 800e730:	3304      	adds	r3, #4
 800e732:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e736:	2b00      	cmp	r3, #0
 800e738:	d10a      	bne.n	800e750 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e73e:	f383 8811 	msr	BASEPRI, r3
 800e742:	f3bf 8f6f 	isb	sy
 800e746:	f3bf 8f4f 	dsb	sy
 800e74a:	61fb      	str	r3, [r7, #28]
}
 800e74c:	bf00      	nop
 800e74e:	e7fe      	b.n	800e74e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e756:	6850      	ldr	r0, [r2, #4]
 800e758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e75a:	6892      	ldr	r2, [r2, #8]
 800e75c:	4611      	mov	r1, r2
 800e75e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2b00      	cmp	r3, #0
 800e764:	f2c0 80aa 	blt.w	800e8bc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e76e:	695b      	ldr	r3, [r3, #20]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d004      	beq.n	800e77e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e776:	3304      	adds	r3, #4
 800e778:	4618      	mov	r0, r3
 800e77a:	f7fd fca3 	bl	800c0c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e77e:	463b      	mov	r3, r7
 800e780:	4618      	mov	r0, r3
 800e782:	f7ff ff6b 	bl	800e65c <prvSampleTimeNow>
 800e786:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2b09      	cmp	r3, #9
 800e78c:	f200 8097 	bhi.w	800e8be <prvProcessReceivedCommands+0x19e>
 800e790:	a201      	add	r2, pc, #4	; (adr r2, 800e798 <prvProcessReceivedCommands+0x78>)
 800e792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e796:	bf00      	nop
 800e798:	0800e7c1 	.word	0x0800e7c1
 800e79c:	0800e7c1 	.word	0x0800e7c1
 800e7a0:	0800e7c1 	.word	0x0800e7c1
 800e7a4:	0800e835 	.word	0x0800e835
 800e7a8:	0800e849 	.word	0x0800e849
 800e7ac:	0800e893 	.word	0x0800e893
 800e7b0:	0800e7c1 	.word	0x0800e7c1
 800e7b4:	0800e7c1 	.word	0x0800e7c1
 800e7b8:	0800e835 	.word	0x0800e835
 800e7bc:	0800e849 	.word	0x0800e849
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7c6:	f043 0301 	orr.w	r3, r3, #1
 800e7ca:	b2da      	uxtb	r2, r3
 800e7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e7d2:	68ba      	ldr	r2, [r7, #8]
 800e7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d6:	699b      	ldr	r3, [r3, #24]
 800e7d8:	18d1      	adds	r1, r2, r3
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7e0:	f7ff ff5c 	bl	800e69c <prvInsertTimerInActiveList>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d069      	beq.n	800e8be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ec:	6a1b      	ldr	r3, [r3, #32]
 800e7ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7f8:	f003 0304 	and.w	r3, r3, #4
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d05e      	beq.n	800e8be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e800:	68ba      	ldr	r2, [r7, #8]
 800e802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e804:	699b      	ldr	r3, [r3, #24]
 800e806:	441a      	add	r2, r3
 800e808:	2300      	movs	r3, #0
 800e80a:	9300      	str	r3, [sp, #0]
 800e80c:	2300      	movs	r3, #0
 800e80e:	2100      	movs	r1, #0
 800e810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e812:	f7ff fde5 	bl	800e3e0 <xTimerGenericCommand>
 800e816:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e818:	6a3b      	ldr	r3, [r7, #32]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d14f      	bne.n	800e8be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e822:	f383 8811 	msr	BASEPRI, r3
 800e826:	f3bf 8f6f 	isb	sy
 800e82a:	f3bf 8f4f 	dsb	sy
 800e82e:	61bb      	str	r3, [r7, #24]
}
 800e830:	bf00      	nop
 800e832:	e7fe      	b.n	800e832 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e836:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e83a:	f023 0301 	bic.w	r3, r3, #1
 800e83e:	b2da      	uxtb	r2, r3
 800e840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e842:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e846:	e03a      	b.n	800e8be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e84e:	f043 0301 	orr.w	r3, r3, #1
 800e852:	b2da      	uxtb	r2, r3
 800e854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e856:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e85a:	68ba      	ldr	r2, [r7, #8]
 800e85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e862:	699b      	ldr	r3, [r3, #24]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d10a      	bne.n	800e87e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e86c:	f383 8811 	msr	BASEPRI, r3
 800e870:	f3bf 8f6f 	isb	sy
 800e874:	f3bf 8f4f 	dsb	sy
 800e878:	617b      	str	r3, [r7, #20]
}
 800e87a:	bf00      	nop
 800e87c:	e7fe      	b.n	800e87c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e880:	699a      	ldr	r2, [r3, #24]
 800e882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e884:	18d1      	adds	r1, r2, r3
 800e886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e88a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e88c:	f7ff ff06 	bl	800e69c <prvInsertTimerInActiveList>
					break;
 800e890:	e015      	b.n	800e8be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e894:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e898:	f003 0302 	and.w	r3, r3, #2
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d103      	bne.n	800e8a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e8a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8a2:	f7fd fa67 	bl	800bd74 <vPortFree>
 800e8a6:	e00a      	b.n	800e8be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8ae:	f023 0301 	bic.w	r3, r3, #1
 800e8b2:	b2da      	uxtb	r2, r3
 800e8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e8ba:	e000      	b.n	800e8be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e8bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e8be:	4b08      	ldr	r3, [pc, #32]	; (800e8e0 <prvProcessReceivedCommands+0x1c0>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	1d39      	adds	r1, r7, #4
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f7fe f9f8 	bl	800ccbc <xQueueReceive>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	f47f af2a 	bne.w	800e728 <prvProcessReceivedCommands+0x8>
	}
}
 800e8d4:	bf00      	nop
 800e8d6:	bf00      	nop
 800e8d8:	3730      	adds	r7, #48	; 0x30
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	20005448 	.word	0x20005448

0800e8e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b088      	sub	sp, #32
 800e8e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e8ea:	e048      	b.n	800e97e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e8ec:	4b2d      	ldr	r3, [pc, #180]	; (800e9a4 <prvSwitchTimerLists+0xc0>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	68db      	ldr	r3, [r3, #12]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8f6:	4b2b      	ldr	r3, [pc, #172]	; (800e9a4 <prvSwitchTimerLists+0xc0>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	68db      	ldr	r3, [r3, #12]
 800e8fc:	68db      	ldr	r3, [r3, #12]
 800e8fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	3304      	adds	r3, #4
 800e904:	4618      	mov	r0, r3
 800e906:	f7fd fbdd 	bl	800c0c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	6a1b      	ldr	r3, [r3, #32]
 800e90e:	68f8      	ldr	r0, [r7, #12]
 800e910:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e918:	f003 0304 	and.w	r3, r3, #4
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d02e      	beq.n	800e97e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	699b      	ldr	r3, [r3, #24]
 800e924:	693a      	ldr	r2, [r7, #16]
 800e926:	4413      	add	r3, r2
 800e928:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e92a:	68ba      	ldr	r2, [r7, #8]
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d90e      	bls.n	800e950 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	68ba      	ldr	r2, [r7, #8]
 800e936:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	68fa      	ldr	r2, [r7, #12]
 800e93c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e93e:	4b19      	ldr	r3, [pc, #100]	; (800e9a4 <prvSwitchTimerLists+0xc0>)
 800e940:	681a      	ldr	r2, [r3, #0]
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	3304      	adds	r3, #4
 800e946:	4619      	mov	r1, r3
 800e948:	4610      	mov	r0, r2
 800e94a:	f7fd fb82 	bl	800c052 <vListInsert>
 800e94e:	e016      	b.n	800e97e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e950:	2300      	movs	r3, #0
 800e952:	9300      	str	r3, [sp, #0]
 800e954:	2300      	movs	r3, #0
 800e956:	693a      	ldr	r2, [r7, #16]
 800e958:	2100      	movs	r1, #0
 800e95a:	68f8      	ldr	r0, [r7, #12]
 800e95c:	f7ff fd40 	bl	800e3e0 <xTimerGenericCommand>
 800e960:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d10a      	bne.n	800e97e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e96c:	f383 8811 	msr	BASEPRI, r3
 800e970:	f3bf 8f6f 	isb	sy
 800e974:	f3bf 8f4f 	dsb	sy
 800e978:	603b      	str	r3, [r7, #0]
}
 800e97a:	bf00      	nop
 800e97c:	e7fe      	b.n	800e97c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e97e:	4b09      	ldr	r3, [pc, #36]	; (800e9a4 <prvSwitchTimerLists+0xc0>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d1b1      	bne.n	800e8ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e988:	4b06      	ldr	r3, [pc, #24]	; (800e9a4 <prvSwitchTimerLists+0xc0>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e98e:	4b06      	ldr	r3, [pc, #24]	; (800e9a8 <prvSwitchTimerLists+0xc4>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	4a04      	ldr	r2, [pc, #16]	; (800e9a4 <prvSwitchTimerLists+0xc0>)
 800e994:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e996:	4a04      	ldr	r2, [pc, #16]	; (800e9a8 <prvSwitchTimerLists+0xc4>)
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	6013      	str	r3, [r2, #0]
}
 800e99c:	bf00      	nop
 800e99e:	3718      	adds	r7, #24
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	20005440 	.word	0x20005440
 800e9a8:	20005444 	.word	0x20005444

0800e9ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b082      	sub	sp, #8
 800e9b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e9b2:	f7fd fcdf 	bl	800c374 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e9b6:	4b15      	ldr	r3, [pc, #84]	; (800ea0c <prvCheckForValidListAndQueue+0x60>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d120      	bne.n	800ea00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e9be:	4814      	ldr	r0, [pc, #80]	; (800ea10 <prvCheckForValidListAndQueue+0x64>)
 800e9c0:	f7fd faf6 	bl	800bfb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e9c4:	4813      	ldr	r0, [pc, #76]	; (800ea14 <prvCheckForValidListAndQueue+0x68>)
 800e9c6:	f7fd faf3 	bl	800bfb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e9ca:	4b13      	ldr	r3, [pc, #76]	; (800ea18 <prvCheckForValidListAndQueue+0x6c>)
 800e9cc:	4a10      	ldr	r2, [pc, #64]	; (800ea10 <prvCheckForValidListAndQueue+0x64>)
 800e9ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e9d0:	4b12      	ldr	r3, [pc, #72]	; (800ea1c <prvCheckForValidListAndQueue+0x70>)
 800e9d2:	4a10      	ldr	r2, [pc, #64]	; (800ea14 <prvCheckForValidListAndQueue+0x68>)
 800e9d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	9300      	str	r3, [sp, #0]
 800e9da:	4b11      	ldr	r3, [pc, #68]	; (800ea20 <prvCheckForValidListAndQueue+0x74>)
 800e9dc:	4a11      	ldr	r2, [pc, #68]	; (800ea24 <prvCheckForValidListAndQueue+0x78>)
 800e9de:	2110      	movs	r1, #16
 800e9e0:	200a      	movs	r0, #10
 800e9e2:	f7fd ff35 	bl	800c850 <xQueueGenericCreateStatic>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	4a08      	ldr	r2, [pc, #32]	; (800ea0c <prvCheckForValidListAndQueue+0x60>)
 800e9ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e9ec:	4b07      	ldr	r3, [pc, #28]	; (800ea0c <prvCheckForValidListAndQueue+0x60>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d005      	beq.n	800ea00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e9f4:	4b05      	ldr	r3, [pc, #20]	; (800ea0c <prvCheckForValidListAndQueue+0x60>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	490b      	ldr	r1, [pc, #44]	; (800ea28 <prvCheckForValidListAndQueue+0x7c>)
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7fe fb4e 	bl	800d09c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ea00:	f7fd fce8 	bl	800c3d4 <vPortExitCritical>
}
 800ea04:	bf00      	nop
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}
 800ea0a:	bf00      	nop
 800ea0c:	20005448 	.word	0x20005448
 800ea10:	20005418 	.word	0x20005418
 800ea14:	2000542c 	.word	0x2000542c
 800ea18:	20005440 	.word	0x20005440
 800ea1c:	20005444 	.word	0x20005444
 800ea20:	200054f4 	.word	0x200054f4
 800ea24:	20005454 	.word	0x20005454
 800ea28:	0800f328 	.word	0x0800f328

0800ea2c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b086      	sub	sp, #24
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d10a      	bne.n	800ea54 <xTimerIsTimerActive+0x28>
	__asm volatile
 800ea3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea42:	f383 8811 	msr	BASEPRI, r3
 800ea46:	f3bf 8f6f 	isb	sy
 800ea4a:	f3bf 8f4f 	dsb	sy
 800ea4e:	60fb      	str	r3, [r7, #12]
}
 800ea50:	bf00      	nop
 800ea52:	e7fe      	b.n	800ea52 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800ea54:	f7fd fc8e 	bl	800c374 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea5e:	f003 0301 	and.w	r3, r3, #1
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d102      	bne.n	800ea6c <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800ea66:	2300      	movs	r3, #0
 800ea68:	617b      	str	r3, [r7, #20]
 800ea6a:	e001      	b.n	800ea70 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800ea6c:	2301      	movs	r3, #1
 800ea6e:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800ea70:	f7fd fcb0 	bl	800c3d4 <vPortExitCritical>

	return xReturn;
 800ea74:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800ea76:	4618      	mov	r0, r3
 800ea78:	3718      	adds	r7, #24
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}

0800ea7e <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800ea7e:	b580      	push	{r7, lr}
 800ea80:	b086      	sub	sp, #24
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d10a      	bne.n	800eaa6 <pvTimerGetTimerID+0x28>
	__asm volatile
 800ea90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea94:	f383 8811 	msr	BASEPRI, r3
 800ea98:	f3bf 8f6f 	isb	sy
 800ea9c:	f3bf 8f4f 	dsb	sy
 800eaa0:	60fb      	str	r3, [r7, #12]
}
 800eaa2:	bf00      	nop
 800eaa4:	e7fe      	b.n	800eaa4 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800eaa6:	f7fd fc65 	bl	800c374 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	69db      	ldr	r3, [r3, #28]
 800eaae:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800eab0:	f7fd fc90 	bl	800c3d4 <vPortExitCritical>

	return pvReturn;
 800eab4:	693b      	ldr	r3, [r7, #16]
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3718      	adds	r7, #24
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
	...

0800eac0 <__libc_init_array>:
 800eac0:	b570      	push	{r4, r5, r6, lr}
 800eac2:	4d0d      	ldr	r5, [pc, #52]	; (800eaf8 <__libc_init_array+0x38>)
 800eac4:	4c0d      	ldr	r4, [pc, #52]	; (800eafc <__libc_init_array+0x3c>)
 800eac6:	1b64      	subs	r4, r4, r5
 800eac8:	10a4      	asrs	r4, r4, #2
 800eaca:	2600      	movs	r6, #0
 800eacc:	42a6      	cmp	r6, r4
 800eace:	d109      	bne.n	800eae4 <__libc_init_array+0x24>
 800ead0:	4d0b      	ldr	r5, [pc, #44]	; (800eb00 <__libc_init_array+0x40>)
 800ead2:	4c0c      	ldr	r4, [pc, #48]	; (800eb04 <__libc_init_array+0x44>)
 800ead4:	f000 f8f0 	bl	800ecb8 <_init>
 800ead8:	1b64      	subs	r4, r4, r5
 800eada:	10a4      	asrs	r4, r4, #2
 800eadc:	2600      	movs	r6, #0
 800eade:	42a6      	cmp	r6, r4
 800eae0:	d105      	bne.n	800eaee <__libc_init_array+0x2e>
 800eae2:	bd70      	pop	{r4, r5, r6, pc}
 800eae4:	f855 3b04 	ldr.w	r3, [r5], #4
 800eae8:	4798      	blx	r3
 800eaea:	3601      	adds	r6, #1
 800eaec:	e7ee      	b.n	800eacc <__libc_init_array+0xc>
 800eaee:	f855 3b04 	ldr.w	r3, [r5], #4
 800eaf2:	4798      	blx	r3
 800eaf4:	3601      	adds	r6, #1
 800eaf6:	e7f2      	b.n	800eade <__libc_init_array+0x1e>
 800eaf8:	0800f470 	.word	0x0800f470
 800eafc:	0800f470 	.word	0x0800f470
 800eb00:	0800f470 	.word	0x0800f470
 800eb04:	0800f474 	.word	0x0800f474

0800eb08 <memcpy>:
 800eb08:	440a      	add	r2, r1
 800eb0a:	4291      	cmp	r1, r2
 800eb0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb10:	d100      	bne.n	800eb14 <memcpy+0xc>
 800eb12:	4770      	bx	lr
 800eb14:	b510      	push	{r4, lr}
 800eb16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb1e:	4291      	cmp	r1, r2
 800eb20:	d1f9      	bne.n	800eb16 <memcpy+0xe>
 800eb22:	bd10      	pop	{r4, pc}

0800eb24 <memset>:
 800eb24:	4402      	add	r2, r0
 800eb26:	4603      	mov	r3, r0
 800eb28:	4293      	cmp	r3, r2
 800eb2a:	d100      	bne.n	800eb2e <memset+0xa>
 800eb2c:	4770      	bx	lr
 800eb2e:	f803 1b01 	strb.w	r1, [r3], #1
 800eb32:	e7f9      	b.n	800eb28 <memset+0x4>

0800eb34 <_free_r>:
 800eb34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb36:	2900      	cmp	r1, #0
 800eb38:	d044      	beq.n	800ebc4 <_free_r+0x90>
 800eb3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb3e:	9001      	str	r0, [sp, #4]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	f1a1 0404 	sub.w	r4, r1, #4
 800eb46:	bfb8      	it	lt
 800eb48:	18e4      	addlt	r4, r4, r3
 800eb4a:	f000 f8a9 	bl	800eca0 <__malloc_lock>
 800eb4e:	4a1e      	ldr	r2, [pc, #120]	; (800ebc8 <_free_r+0x94>)
 800eb50:	9801      	ldr	r0, [sp, #4]
 800eb52:	6813      	ldr	r3, [r2, #0]
 800eb54:	b933      	cbnz	r3, 800eb64 <_free_r+0x30>
 800eb56:	6063      	str	r3, [r4, #4]
 800eb58:	6014      	str	r4, [r2, #0]
 800eb5a:	b003      	add	sp, #12
 800eb5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb60:	f000 b8a4 	b.w	800ecac <__malloc_unlock>
 800eb64:	42a3      	cmp	r3, r4
 800eb66:	d908      	bls.n	800eb7a <_free_r+0x46>
 800eb68:	6825      	ldr	r5, [r4, #0]
 800eb6a:	1961      	adds	r1, r4, r5
 800eb6c:	428b      	cmp	r3, r1
 800eb6e:	bf01      	itttt	eq
 800eb70:	6819      	ldreq	r1, [r3, #0]
 800eb72:	685b      	ldreq	r3, [r3, #4]
 800eb74:	1949      	addeq	r1, r1, r5
 800eb76:	6021      	streq	r1, [r4, #0]
 800eb78:	e7ed      	b.n	800eb56 <_free_r+0x22>
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	685b      	ldr	r3, [r3, #4]
 800eb7e:	b10b      	cbz	r3, 800eb84 <_free_r+0x50>
 800eb80:	42a3      	cmp	r3, r4
 800eb82:	d9fa      	bls.n	800eb7a <_free_r+0x46>
 800eb84:	6811      	ldr	r1, [r2, #0]
 800eb86:	1855      	adds	r5, r2, r1
 800eb88:	42a5      	cmp	r5, r4
 800eb8a:	d10b      	bne.n	800eba4 <_free_r+0x70>
 800eb8c:	6824      	ldr	r4, [r4, #0]
 800eb8e:	4421      	add	r1, r4
 800eb90:	1854      	adds	r4, r2, r1
 800eb92:	42a3      	cmp	r3, r4
 800eb94:	6011      	str	r1, [r2, #0]
 800eb96:	d1e0      	bne.n	800eb5a <_free_r+0x26>
 800eb98:	681c      	ldr	r4, [r3, #0]
 800eb9a:	685b      	ldr	r3, [r3, #4]
 800eb9c:	6053      	str	r3, [r2, #4]
 800eb9e:	4421      	add	r1, r4
 800eba0:	6011      	str	r1, [r2, #0]
 800eba2:	e7da      	b.n	800eb5a <_free_r+0x26>
 800eba4:	d902      	bls.n	800ebac <_free_r+0x78>
 800eba6:	230c      	movs	r3, #12
 800eba8:	6003      	str	r3, [r0, #0]
 800ebaa:	e7d6      	b.n	800eb5a <_free_r+0x26>
 800ebac:	6825      	ldr	r5, [r4, #0]
 800ebae:	1961      	adds	r1, r4, r5
 800ebb0:	428b      	cmp	r3, r1
 800ebb2:	bf04      	itt	eq
 800ebb4:	6819      	ldreq	r1, [r3, #0]
 800ebb6:	685b      	ldreq	r3, [r3, #4]
 800ebb8:	6063      	str	r3, [r4, #4]
 800ebba:	bf04      	itt	eq
 800ebbc:	1949      	addeq	r1, r1, r5
 800ebbe:	6021      	streq	r1, [r4, #0]
 800ebc0:	6054      	str	r4, [r2, #4]
 800ebc2:	e7ca      	b.n	800eb5a <_free_r+0x26>
 800ebc4:	b003      	add	sp, #12
 800ebc6:	bd30      	pop	{r4, r5, pc}
 800ebc8:	20005544 	.word	0x20005544

0800ebcc <cleanup_glue>:
 800ebcc:	b538      	push	{r3, r4, r5, lr}
 800ebce:	460c      	mov	r4, r1
 800ebd0:	6809      	ldr	r1, [r1, #0]
 800ebd2:	4605      	mov	r5, r0
 800ebd4:	b109      	cbz	r1, 800ebda <cleanup_glue+0xe>
 800ebd6:	f7ff fff9 	bl	800ebcc <cleanup_glue>
 800ebda:	4621      	mov	r1, r4
 800ebdc:	4628      	mov	r0, r5
 800ebde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebe2:	f7ff bfa7 	b.w	800eb34 <_free_r>
	...

0800ebe8 <_reclaim_reent>:
 800ebe8:	4b2c      	ldr	r3, [pc, #176]	; (800ec9c <_reclaim_reent+0xb4>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	4283      	cmp	r3, r0
 800ebee:	b570      	push	{r4, r5, r6, lr}
 800ebf0:	4604      	mov	r4, r0
 800ebf2:	d051      	beq.n	800ec98 <_reclaim_reent+0xb0>
 800ebf4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ebf6:	b143      	cbz	r3, 800ec0a <_reclaim_reent+0x22>
 800ebf8:	68db      	ldr	r3, [r3, #12]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d14a      	bne.n	800ec94 <_reclaim_reent+0xac>
 800ebfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec00:	6819      	ldr	r1, [r3, #0]
 800ec02:	b111      	cbz	r1, 800ec0a <_reclaim_reent+0x22>
 800ec04:	4620      	mov	r0, r4
 800ec06:	f7ff ff95 	bl	800eb34 <_free_r>
 800ec0a:	6961      	ldr	r1, [r4, #20]
 800ec0c:	b111      	cbz	r1, 800ec14 <_reclaim_reent+0x2c>
 800ec0e:	4620      	mov	r0, r4
 800ec10:	f7ff ff90 	bl	800eb34 <_free_r>
 800ec14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ec16:	b111      	cbz	r1, 800ec1e <_reclaim_reent+0x36>
 800ec18:	4620      	mov	r0, r4
 800ec1a:	f7ff ff8b 	bl	800eb34 <_free_r>
 800ec1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ec20:	b111      	cbz	r1, 800ec28 <_reclaim_reent+0x40>
 800ec22:	4620      	mov	r0, r4
 800ec24:	f7ff ff86 	bl	800eb34 <_free_r>
 800ec28:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ec2a:	b111      	cbz	r1, 800ec32 <_reclaim_reent+0x4a>
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	f7ff ff81 	bl	800eb34 <_free_r>
 800ec32:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ec34:	b111      	cbz	r1, 800ec3c <_reclaim_reent+0x54>
 800ec36:	4620      	mov	r0, r4
 800ec38:	f7ff ff7c 	bl	800eb34 <_free_r>
 800ec3c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ec3e:	b111      	cbz	r1, 800ec46 <_reclaim_reent+0x5e>
 800ec40:	4620      	mov	r0, r4
 800ec42:	f7ff ff77 	bl	800eb34 <_free_r>
 800ec46:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ec48:	b111      	cbz	r1, 800ec50 <_reclaim_reent+0x68>
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	f7ff ff72 	bl	800eb34 <_free_r>
 800ec50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec52:	b111      	cbz	r1, 800ec5a <_reclaim_reent+0x72>
 800ec54:	4620      	mov	r0, r4
 800ec56:	f7ff ff6d 	bl	800eb34 <_free_r>
 800ec5a:	69a3      	ldr	r3, [r4, #24]
 800ec5c:	b1e3      	cbz	r3, 800ec98 <_reclaim_reent+0xb0>
 800ec5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ec60:	4620      	mov	r0, r4
 800ec62:	4798      	blx	r3
 800ec64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ec66:	b1b9      	cbz	r1, 800ec98 <_reclaim_reent+0xb0>
 800ec68:	4620      	mov	r0, r4
 800ec6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec6e:	f7ff bfad 	b.w	800ebcc <cleanup_glue>
 800ec72:	5949      	ldr	r1, [r1, r5]
 800ec74:	b941      	cbnz	r1, 800ec88 <_reclaim_reent+0xa0>
 800ec76:	3504      	adds	r5, #4
 800ec78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec7a:	2d80      	cmp	r5, #128	; 0x80
 800ec7c:	68d9      	ldr	r1, [r3, #12]
 800ec7e:	d1f8      	bne.n	800ec72 <_reclaim_reent+0x8a>
 800ec80:	4620      	mov	r0, r4
 800ec82:	f7ff ff57 	bl	800eb34 <_free_r>
 800ec86:	e7ba      	b.n	800ebfe <_reclaim_reent+0x16>
 800ec88:	680e      	ldr	r6, [r1, #0]
 800ec8a:	4620      	mov	r0, r4
 800ec8c:	f7ff ff52 	bl	800eb34 <_free_r>
 800ec90:	4631      	mov	r1, r6
 800ec92:	e7ef      	b.n	800ec74 <_reclaim_reent+0x8c>
 800ec94:	2500      	movs	r5, #0
 800ec96:	e7ef      	b.n	800ec78 <_reclaim_reent+0x90>
 800ec98:	bd70      	pop	{r4, r5, r6, pc}
 800ec9a:	bf00      	nop
 800ec9c:	20000010 	.word	0x20000010

0800eca0 <__malloc_lock>:
 800eca0:	4801      	ldr	r0, [pc, #4]	; (800eca8 <__malloc_lock+0x8>)
 800eca2:	f7f5 b856 	b.w	8003d52 <__retarget_lock_acquire_recursive>
 800eca6:	bf00      	nop
 800eca8:	200008ec 	.word	0x200008ec

0800ecac <__malloc_unlock>:
 800ecac:	4801      	ldr	r0, [pc, #4]	; (800ecb4 <__malloc_unlock+0x8>)
 800ecae:	f7f5 b864 	b.w	8003d7a <__retarget_lock_release_recursive>
 800ecb2:	bf00      	nop
 800ecb4:	200008ec 	.word	0x200008ec

0800ecb8 <_init>:
 800ecb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecba:	bf00      	nop
 800ecbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecbe:	bc08      	pop	{r3}
 800ecc0:	469e      	mov	lr, r3
 800ecc2:	4770      	bx	lr

0800ecc4 <_fini>:
 800ecc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecc6:	bf00      	nop
 800ecc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecca:	bc08      	pop	{r3}
 800eccc:	469e      	mov	lr, r3
 800ecce:	4770      	bx	lr
