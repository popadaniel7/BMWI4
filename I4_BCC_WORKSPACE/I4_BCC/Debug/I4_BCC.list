
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048e4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004a7c  08004a7c  00014a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a94  08004a94  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a94  08004a94  00014a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a9c  08004a9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a9c  08004a9c  00014a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004aa0  08004aa0  00014aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  2000000c  08004ab0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08004ab0  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128d1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f0e  00000000  00000000  0003290d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  00035820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00036810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001835b  00000000  00000000  000376b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b9e  00000000  00000000  0004fa13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f3dd  00000000  00000000  000655b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f498e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ff4  00000000  00000000  000f49e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004a64 	.word	0x08004a64

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004a64 	.word	0x08004a64

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <CenLoc_MainFunction>:
uint8 PreviousState_CenLoc;
uint8 ExtLights_UnlockedState;
uint8 ExtLights_LockedState;

void CenLoc_MainFunction()
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	if(CurrentState_CenLoc == STD_HIGH)
 80004e0:	4b95      	ldr	r3, [pc, #596]	; (8000738 <CenLoc_MainFunction+0x25c>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d102      	bne.n	80004ee <CenLoc_MainFunction+0x12>
	{
		SecAlmTrigger = STD_LOW;
 80004e8:	4b94      	ldr	r3, [pc, #592]	; (800073c <CenLoc_MainFunction+0x260>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(PreviousState_CenLoc != CurrentState_CenLoc)
 80004ee:	4b94      	ldr	r3, [pc, #592]	; (8000740 <CenLoc_MainFunction+0x264>)
 80004f0:	781a      	ldrb	r2, [r3, #0]
 80004f2:	4b91      	ldr	r3, [pc, #580]	; (8000738 <CenLoc_MainFunction+0x25c>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	429a      	cmp	r2, r3
 80004f8:	d027      	beq.n	800054a <CenLoc_MainFunction+0x6e>
	{
		ExtLights_LockedState = PreviousState_CenLoc;
 80004fa:	4b91      	ldr	r3, [pc, #580]	; (8000740 <CenLoc_MainFunction+0x264>)
 80004fc:	781a      	ldrb	r2, [r3, #0]
 80004fe:	4b91      	ldr	r3, [pc, #580]	; (8000744 <CenLoc_MainFunction+0x268>)
 8000500:	701a      	strb	r2, [r3, #0]
		ExtLights_UnlockedState = CurrentState_CenLoc;
 8000502:	4b8d      	ldr	r3, [pc, #564]	; (8000738 <CenLoc_MainFunction+0x25c>)
 8000504:	781a      	ldrb	r2, [r3, #0]
 8000506:	4b90      	ldr	r3, [pc, #576]	; (8000748 <CenLoc_MainFunction+0x26c>)
 8000508:	701a      	strb	r2, [r3, #0]
		PreviousState_CenLoc = CurrentState_CenLoc;
 800050a:	4b8b      	ldr	r3, [pc, #556]	; (8000738 <CenLoc_MainFunction+0x25c>)
 800050c:	781a      	ldrb	r2, [r3, #0]
 800050e:	4b8c      	ldr	r3, [pc, #560]	; (8000740 <CenLoc_MainFunction+0x264>)
 8000510:	701a      	strb	r2, [r3, #0]
		BTCenLoc_LockUnlockFlag = !CurrentState_CenLoc;
 8000512:	4b89      	ldr	r3, [pc, #548]	; (8000738 <CenLoc_MainFunction+0x25c>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	bf0c      	ite	eq
 800051a:	2301      	moveq	r3, #1
 800051c:	2300      	movne	r3, #0
 800051e:	b2db      	uxtb	r3, r3
 8000520:	461a      	mov	r2, r3
 8000522:	4b8a      	ldr	r3, [pc, #552]	; (800074c <CenLoc_MainFunction+0x270>)
 8000524:	701a      	strb	r2, [r3, #0]
		LockCounter = STD_LOW;
 8000526:	4b8a      	ldr	r3, [pc, #552]	; (8000750 <CenLoc_MainFunction+0x274>)
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]
		UnlockCounter = STD_LOW;
 800052c:	4b89      	ldr	r3, [pc, #548]	; (8000754 <CenLoc_MainFunction+0x278>)
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
		SecAlmCounter = STD_LOW;
 8000532:	4b89      	ldr	r3, [pc, #548]	; (8000758 <CenLoc_MainFunction+0x27c>)
 8000534:	2200      	movs	r2, #0
 8000536:	701a      	strb	r2, [r3, #0]

		HAL_TIM_Base_Init(&htim2);
 8000538:	4888      	ldr	r0, [pc, #544]	; (800075c <CenLoc_MainFunction+0x280>)
 800053a:	f002 fe8b 	bl	8003254 <HAL_TIM_Base_Init>
		HAL_TIM_Base_Init(&htim3);
 800053e:	4888      	ldr	r0, [pc, #544]	; (8000760 <CenLoc_MainFunction+0x284>)
 8000540:	f002 fe88 	bl	8003254 <HAL_TIM_Base_Init>
		HAL_TIM_Base_Init(&htim5);
 8000544:	4887      	ldr	r0, [pc, #540]	; (8000764 <CenLoc_MainFunction+0x288>)
 8000546:	f002 fe85 	bl	8003254 <HAL_TIM_Base_Init>
	else
	{
		/* do nothing */
	}

	if(CurrentState_CenLoc == STD_HIGH && SecAlmTrigger == STD_LOW)
 800054a:	4b7b      	ldr	r3, [pc, #492]	; (8000738 <CenLoc_MainFunction+0x25c>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b01      	cmp	r3, #1
 8000550:	f040 810e 	bne.w	8000770 <CenLoc_MainFunction+0x294>
 8000554:	4b79      	ldr	r3, [pc, #484]	; (800073c <CenLoc_MainFunction+0x260>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	f040 8109 	bne.w	8000770 <CenLoc_MainFunction+0x294>
	{
		HAL_TIM_Base_Stop(&htim3);
 800055e:	4880      	ldr	r0, [pc, #512]	; (8000760 <CenLoc_MainFunction+0x284>)
 8000560:	f002 ff22 	bl	80033a8 <HAL_TIM_Base_Stop>
		BTCenLoc = STD_HIGH;
 8000564:	4b80      	ldr	r3, [pc, #512]	; (8000768 <CenLoc_MainFunction+0x28c>)
 8000566:	2201      	movs	r2, #1
 8000568:	701a      	strb	r2, [r3, #0]

		IntLights_Toggle_IntLights(CurrentState_CenLoc);
 800056a:	4b73      	ldr	r3, [pc, #460]	; (8000738 <CenLoc_MainFunction+0x25c>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	4618      	mov	r0, r3
 8000570:	f000 fe24 	bl	80011bc <IntLights_Toggle_IntLights>
		CenLoc_Toggle_Door_LED(CurrentState_CenLoc);
 8000574:	4b70      	ldr	r3, [pc, #448]	; (8000738 <CenLoc_MainFunction+0x25c>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4618      	mov	r0, r3
 800057a:	f000 fa4b 	bl	8000a14 <CenLoc_Toggle_Door_LED>
		SecAlm_ToggleAlarmLed(!CurrentState_CenLoc);
 800057e:	4b6e      	ldr	r3, [pc, #440]	; (8000738 <CenLoc_MainFunction+0x25c>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	bf0c      	ite	eq
 8000586:	2301      	moveq	r3, #1
 8000588:	2300      	movne	r3, #0
 800058a:	b2db      	uxtb	r3, r3
 800058c:	4618      	mov	r0, r3
 800058e:	f000 ff1f 	bl	80013d0 <SecAlm_ToggleAlarmLed>

		if(ExtLights_UnlockedState == 1 && ExtLights_LockedState == 0)
 8000592:	4b6d      	ldr	r3, [pc, #436]	; (8000748 <CenLoc_MainFunction+0x26c>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d143      	bne.n	8000622 <CenLoc_MainFunction+0x146>
 800059a:	4b6a      	ldr	r3, [pc, #424]	; (8000744 <CenLoc_MainFunction+0x268>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d13f      	bne.n	8000622 <CenLoc_MainFunction+0x146>
		{
			HAL_TIM_Base_Start(&htim5);
 80005a2:	4870      	ldr	r0, [pc, #448]	; (8000764 <CenLoc_MainFunction+0x288>)
 80005a4:	f002 fea6 	bl	80032f4 <HAL_TIM_Base_Start>
			if(__HAL_TIM_GET_COUNTER(&htim5) < 100000)
 80005a8:	4b6e      	ldr	r3, [pc, #440]	; (8000764 <CenLoc_MainFunction+0x288>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ae:	4a6f      	ldr	r2, [pc, #444]	; (800076c <CenLoc_MainFunction+0x290>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d80f      	bhi.n	80005d4 <CenLoc_MainFunction+0xf8>
			{
				ExtLights_FogLightFront(CurrentState_CenLoc);
 80005b4:	4b60      	ldr	r3, [pc, #384]	; (8000738 <CenLoc_MainFunction+0x25c>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 fd53 	bl	8001064 <ExtLights_FogLightFront>
				ExtLights_LowBeam(CurrentState_CenLoc);
 80005be:	4b5e      	ldr	r3, [pc, #376]	; (8000738 <CenLoc_MainFunction+0x25c>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fd2a 	bl	800101c <ExtLights_LowBeam>
				ExtLights_PositionLightRear(CurrentState_CenLoc);
 80005c8:	4b5b      	ldr	r3, [pc, #364]	; (8000738 <CenLoc_MainFunction+0x25c>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 fd91 	bl	80010f4 <ExtLights_PositionLightRear>
 80005d2:	e026      	b.n	8000622 <CenLoc_MainFunction+0x146>
			}
			else
			{
				ExtLights_FogLightFront(!CurrentState_CenLoc);
 80005d4:	4b58      	ldr	r3, [pc, #352]	; (8000738 <CenLoc_MainFunction+0x25c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	bf0c      	ite	eq
 80005dc:	2301      	moveq	r3, #1
 80005de:	2300      	movne	r3, #0
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fd3e 	bl	8001064 <ExtLights_FogLightFront>
				ExtLights_LowBeam(!CurrentState_CenLoc);
 80005e8:	4b53      	ldr	r3, [pc, #332]	; (8000738 <CenLoc_MainFunction+0x25c>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	bf0c      	ite	eq
 80005f0:	2301      	moveq	r3, #1
 80005f2:	2300      	movne	r3, #0
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 fd10 	bl	800101c <ExtLights_LowBeam>
				ExtLights_PositionLightRear(!CurrentState_CenLoc);
 80005fc:	4b4e      	ldr	r3, [pc, #312]	; (8000738 <CenLoc_MainFunction+0x25c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	bf0c      	ite	eq
 8000604:	2301      	moveq	r3, #1
 8000606:	2300      	movne	r3, #0
 8000608:	b2db      	uxtb	r3, r3
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fd72 	bl	80010f4 <ExtLights_PositionLightRear>

				ExtLights_UnlockedState = 0;
 8000610:	4b4d      	ldr	r3, [pc, #308]	; (8000748 <CenLoc_MainFunction+0x26c>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
				ExtLights_LockedState = 1;
 8000616:	4b4b      	ldr	r3, [pc, #300]	; (8000744 <CenLoc_MainFunction+0x268>)
 8000618:	2201      	movs	r2, #1
 800061a:	701a      	strb	r2, [r3, #0]

				HAL_TIM_Base_Stop(&htim5);
 800061c:	4851      	ldr	r0, [pc, #324]	; (8000764 <CenLoc_MainFunction+0x288>)
 800061e:	f002 fec3 	bl	80033a8 <HAL_TIM_Base_Stop>
		else
		{
			/* do nothing */
		}

		if(LockCounter < 4)
 8000622:	4b4b      	ldr	r3, [pc, #300]	; (8000750 <CenLoc_MainFunction+0x274>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b03      	cmp	r3, #3
 8000628:	d87b      	bhi.n	8000722 <CenLoc_MainFunction+0x246>
		{
			HAL_TIM_Base_Start(&htim2);
 800062a:	484c      	ldr	r0, [pc, #304]	; (800075c <CenLoc_MainFunction+0x280>)
 800062c:	f002 fe62 	bl	80032f4 <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000630:	4b4a      	ldr	r3, [pc, #296]	; (800075c <CenLoc_MainFunction+0x280>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000636:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800063a:	4293      	cmp	r3, r2
 800063c:	d80a      	bhi.n	8000654 <CenLoc_MainFunction+0x178>
			{
				ExtLights_TurnSignalLeft(CurrentState_CenLoc);
 800063e:	4b3e      	ldr	r3, [pc, #248]	; (8000738 <CenLoc_MainFunction+0x25c>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fd32 	bl	80010ac <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(CurrentState_CenLoc);
 8000648:	4b3b      	ldr	r3, [pc, #236]	; (8000738 <CenLoc_MainFunction+0x25c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fd3f 	bl	80010d0 <ExtLights_TurnSignalRight>
		if(LockCounter < 4)
 8000652:	e19c      	b.n	800098e <CenLoc_MainFunction+0x4b2>
			}
			else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000654:	4b41      	ldr	r3, [pc, #260]	; (800075c <CenLoc_MainFunction+0x280>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800065a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800065e:	4293      	cmp	r3, r2
 8000660:	d91b      	bls.n	800069a <CenLoc_MainFunction+0x1be>
 8000662:	4b3e      	ldr	r3, [pc, #248]	; (800075c <CenLoc_MainFunction+0x280>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000668:	f241 3287 	movw	r2, #4999	; 0x1387
 800066c:	4293      	cmp	r3, r2
 800066e:	d814      	bhi.n	800069a <CenLoc_MainFunction+0x1be>
			{
				ExtLights_TurnSignalLeft(!CurrentState_CenLoc);
 8000670:	4b31      	ldr	r3, [pc, #196]	; (8000738 <CenLoc_MainFunction+0x25c>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	bf0c      	ite	eq
 8000678:	2301      	moveq	r3, #1
 800067a:	2300      	movne	r3, #0
 800067c:	b2db      	uxtb	r3, r3
 800067e:	4618      	mov	r0, r3
 8000680:	f000 fd14 	bl	80010ac <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(!CurrentState_CenLoc);
 8000684:	4b2c      	ldr	r3, [pc, #176]	; (8000738 <CenLoc_MainFunction+0x25c>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	bf0c      	ite	eq
 800068c:	2301      	moveq	r3, #1
 800068e:	2300      	movne	r3, #0
 8000690:	b2db      	uxtb	r3, r3
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fd1c 	bl	80010d0 <ExtLights_TurnSignalRight>
 8000698:	e04c      	b.n	8000734 <CenLoc_MainFunction+0x258>
			}
			else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 800069a:	4b30      	ldr	r3, [pc, #192]	; (800075c <CenLoc_MainFunction+0x280>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d911      	bls.n	80006cc <CenLoc_MainFunction+0x1f0>
 80006a8:	4b2c      	ldr	r3, [pc, #176]	; (800075c <CenLoc_MainFunction+0x280>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ae:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d80a      	bhi.n	80006cc <CenLoc_MainFunction+0x1f0>
			{
				ExtLights_TurnSignalLeft(CurrentState_CenLoc);
 80006b6:	4b20      	ldr	r3, [pc, #128]	; (8000738 <CenLoc_MainFunction+0x25c>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 fcf6 	bl	80010ac <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(CurrentState_CenLoc);
 80006c0:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <CenLoc_MainFunction+0x25c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 fd03 	bl	80010d0 <ExtLights_TurnSignalRight>
 80006ca:	e033      	b.n	8000734 <CenLoc_MainFunction+0x258>
			}
			else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 80006cc:	4b23      	ldr	r3, [pc, #140]	; (800075c <CenLoc_MainFunction+0x280>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d2:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80006d6:	4293      	cmp	r3, r2
 80006d8:	f240 8159 	bls.w	800098e <CenLoc_MainFunction+0x4b2>
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <CenLoc_MainFunction+0x280>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006e2:	f242 720f 	movw	r2, #9999	; 0x270f
 80006e6:	4293      	cmp	r3, r2
 80006e8:	f200 8151 	bhi.w	800098e <CenLoc_MainFunction+0x4b2>
			{
				ExtLights_TurnSignalLeft(!CurrentState_CenLoc);
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <CenLoc_MainFunction+0x25c>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	bf0c      	ite	eq
 80006f4:	2301      	moveq	r3, #1
 80006f6:	2300      	movne	r3, #0
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fcd6 	bl	80010ac <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(!CurrentState_CenLoc);
 8000700:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <CenLoc_MainFunction+0x25c>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	bf0c      	ite	eq
 8000708:	2301      	moveq	r3, #1
 800070a:	2300      	movne	r3, #0
 800070c:	b2db      	uxtb	r3, r3
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fcde 	bl	80010d0 <ExtLights_TurnSignalRight>

				LockCounter++;
 8000714:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <CenLoc_MainFunction+0x274>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	3301      	adds	r3, #1
 800071a:	b2da      	uxtb	r2, r3
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <CenLoc_MainFunction+0x274>)
 800071e:	701a      	strb	r2, [r3, #0]
		if(LockCounter < 4)
 8000720:	e135      	b.n	800098e <CenLoc_MainFunction+0x4b2>
			else
			{
				/* do nothing */
			}
		}
		else if(LockCounter >= 4)
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <CenLoc_MainFunction+0x274>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b03      	cmp	r3, #3
 8000728:	f240 8131 	bls.w	800098e <CenLoc_MainFunction+0x4b2>
		{
			HAL_TIM_Base_Stop(&htim2);
 800072c:	480b      	ldr	r0, [pc, #44]	; (800075c <CenLoc_MainFunction+0x280>)
 800072e:	f002 fe3b 	bl	80033a8 <HAL_TIM_Base_Stop>
		if(LockCounter < 4)
 8000732:	e12c      	b.n	800098e <CenLoc_MainFunction+0x4b2>
 8000734:	e12b      	b.n	800098e <CenLoc_MainFunction+0x4b2>
 8000736:	bf00      	nop
 8000738:	20000028 	.word	0x20000028
 800073c:	20000048 	.word	0x20000048
 8000740:	2000002b 	.word	0x2000002b
 8000744:	2000002d 	.word	0x2000002d
 8000748:	2000002c 	.word	0x2000002c
 800074c:	2000002a 	.word	0x2000002a
 8000750:	20000046 	.word	0x20000046
 8000754:	20000047 	.word	0x20000047
 8000758:	20000049 	.word	0x20000049
 800075c:	20000094 	.word	0x20000094
 8000760:	200000dc 	.word	0x200000dc
 8000764:	2000016c 	.word	0x2000016c
 8000768:	20000029 	.word	0x20000029
 800076c:	0001869f 	.word	0x0001869f
		else
		{
			/* do nothing */
		}
	}
	else if(CurrentState_CenLoc == STD_LOW && SecAlmTrigger == STD_LOW)
 8000770:	4b89      	ldr	r3, [pc, #548]	; (8000998 <CenLoc_MainFunction+0x4bc>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	f040 810d 	bne.w	8000994 <CenLoc_MainFunction+0x4b8>
 800077a:	4b88      	ldr	r3, [pc, #544]	; (800099c <CenLoc_MainFunction+0x4c0>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	f040 8108 	bne.w	8000994 <CenLoc_MainFunction+0x4b8>
	{
		BTCenLoc = STD_LOW;
 8000784:	4b86      	ldr	r3, [pc, #536]	; (80009a0 <CenLoc_MainFunction+0x4c4>)
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
		IntLights_Toggle_IntLights(CurrentState_CenLoc);
 800078a:	4b83      	ldr	r3, [pc, #524]	; (8000998 <CenLoc_MainFunction+0x4bc>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fd14 	bl	80011bc <IntLights_Toggle_IntLights>
		CenLoc_Toggle_Door_LED(CurrentState_CenLoc);
 8000794:	4b80      	ldr	r3, [pc, #512]	; (8000998 <CenLoc_MainFunction+0x4bc>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f93b 	bl	8000a14 <CenLoc_Toggle_Door_LED>

		HAL_TIM_Base_Start(&htim3);
 800079e:	4881      	ldr	r0, [pc, #516]	; (80009a4 <CenLoc_MainFunction+0x4c8>)
 80007a0:	f002 fda8 	bl	80032f4 <HAL_TIM_Base_Start>

		if(ExtLights_UnlockedState == 0 && ExtLights_LockedState == 1)
 80007a4:	4b80      	ldr	r3, [pc, #512]	; (80009a8 <CenLoc_MainFunction+0x4cc>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d149      	bne.n	8000840 <CenLoc_MainFunction+0x364>
 80007ac:	4b7f      	ldr	r3, [pc, #508]	; (80009ac <CenLoc_MainFunction+0x4d0>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d145      	bne.n	8000840 <CenLoc_MainFunction+0x364>
		{
			HAL_TIM_Base_Start(&htim5);
 80007b4:	487e      	ldr	r0, [pc, #504]	; (80009b0 <CenLoc_MainFunction+0x4d4>)
 80007b6:	f002 fd9d 	bl	80032f4 <HAL_TIM_Base_Start>
			if(__HAL_TIM_GET_COUNTER(&htim5) < 100000)
 80007ba:	4b7d      	ldr	r3, [pc, #500]	; (80009b0 <CenLoc_MainFunction+0x4d4>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c0:	4a7c      	ldr	r2, [pc, #496]	; (80009b4 <CenLoc_MainFunction+0x4d8>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d81e      	bhi.n	8000804 <CenLoc_MainFunction+0x328>
			{
				ExtLights_FogLightFront(!CurrentState_CenLoc);
 80007c6:	4b74      	ldr	r3, [pc, #464]	; (8000998 <CenLoc_MainFunction+0x4bc>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	bf0c      	ite	eq
 80007ce:	2301      	moveq	r3, #1
 80007d0:	2300      	movne	r3, #0
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 fc45 	bl	8001064 <ExtLights_FogLightFront>
				ExtLights_LowBeam(!CurrentState_CenLoc);
 80007da:	4b6f      	ldr	r3, [pc, #444]	; (8000998 <CenLoc_MainFunction+0x4bc>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	bf0c      	ite	eq
 80007e2:	2301      	moveq	r3, #1
 80007e4:	2300      	movne	r3, #0
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fc17 	bl	800101c <ExtLights_LowBeam>
				ExtLights_PositionLightRear(!CurrentState_CenLoc);
 80007ee:	4b6a      	ldr	r3, [pc, #424]	; (8000998 <CenLoc_MainFunction+0x4bc>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	bf0c      	ite	eq
 80007f6:	2301      	moveq	r3, #1
 80007f8:	2300      	movne	r3, #0
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 fc79 	bl	80010f4 <ExtLights_PositionLightRear>
 8000802:	e01d      	b.n	8000840 <CenLoc_MainFunction+0x364>
			}
			else if(__HAL_TIM_GET_COUNTER(&htim5) > 100000)
 8000804:	4b6a      	ldr	r3, [pc, #424]	; (80009b0 <CenLoc_MainFunction+0x4d4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800080a:	4a6b      	ldr	r2, [pc, #428]	; (80009b8 <CenLoc_MainFunction+0x4dc>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d917      	bls.n	8000840 <CenLoc_MainFunction+0x364>
			{
				ExtLights_FogLightFront(CurrentState_CenLoc);
 8000810:	4b61      	ldr	r3, [pc, #388]	; (8000998 <CenLoc_MainFunction+0x4bc>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4618      	mov	r0, r3
 8000816:	f000 fc25 	bl	8001064 <ExtLights_FogLightFront>
				ExtLights_LowBeam(CurrentState_CenLoc);
 800081a:	4b5f      	ldr	r3, [pc, #380]	; (8000998 <CenLoc_MainFunction+0x4bc>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	4618      	mov	r0, r3
 8000820:	f000 fbfc 	bl	800101c <ExtLights_LowBeam>
				ExtLights_PositionLightRear(CurrentState_CenLoc);
 8000824:	4b5c      	ldr	r3, [pc, #368]	; (8000998 <CenLoc_MainFunction+0x4bc>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4618      	mov	r0, r3
 800082a:	f000 fc63 	bl	80010f4 <ExtLights_PositionLightRear>

				ExtLights_UnlockedState = 1;
 800082e:	4b5e      	ldr	r3, [pc, #376]	; (80009a8 <CenLoc_MainFunction+0x4cc>)
 8000830:	2201      	movs	r2, #1
 8000832:	701a      	strb	r2, [r3, #0]
				ExtLights_LockedState = 0;
 8000834:	4b5d      	ldr	r3, [pc, #372]	; (80009ac <CenLoc_MainFunction+0x4d0>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]

				HAL_TIM_Base_Stop(&htim5);
 800083a:	485d      	ldr	r0, [pc, #372]	; (80009b0 <CenLoc_MainFunction+0x4d4>)
 800083c:	f002 fdb4 	bl	80033a8 <HAL_TIM_Base_Stop>
		else
		{
			/* do nothing */
		}

		if(40000 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 41250)
 8000840:	4b58      	ldr	r3, [pc, #352]	; (80009a4 <CenLoc_MainFunction+0x4c8>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000846:	f649 4240 	movw	r2, #40000	; 0x9c40
 800084a:	4293      	cmp	r3, r2
 800084c:	d911      	bls.n	8000872 <CenLoc_MainFunction+0x396>
 800084e:	4b55      	ldr	r3, [pc, #340]	; (80009a4 <CenLoc_MainFunction+0x4c8>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000854:	f24a 1221 	movw	r2, #41249	; 0xa121
 8000858:	4293      	cmp	r3, r2
 800085a:	d80a      	bhi.n	8000872 <CenLoc_MainFunction+0x396>
		{
			SecAlm_ToggleAlarmLed(!CurrentState_CenLoc);
 800085c:	4b4e      	ldr	r3, [pc, #312]	; (8000998 <CenLoc_MainFunction+0x4bc>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	bf0c      	ite	eq
 8000864:	2301      	moveq	r3, #1
 8000866:	2300      	movne	r3, #0
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fdb0 	bl	80013d0 <SecAlm_ToggleAlarmLed>
 8000870:	e03f      	b.n	80008f2 <CenLoc_MainFunction+0x416>
		}
		else if(41250 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 42500)
 8000872:	4b4c      	ldr	r3, [pc, #304]	; (80009a4 <CenLoc_MainFunction+0x4c8>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000878:	f24a 1222 	movw	r2, #41250	; 0xa122
 800087c:	4293      	cmp	r3, r2
 800087e:	d90c      	bls.n	800089a <CenLoc_MainFunction+0x3be>
 8000880:	4b48      	ldr	r3, [pc, #288]	; (80009a4 <CenLoc_MainFunction+0x4c8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000886:	f24a 6203 	movw	r2, #42499	; 0xa603
 800088a:	4293      	cmp	r3, r2
 800088c:	d805      	bhi.n	800089a <CenLoc_MainFunction+0x3be>
		{
			SecAlm_ToggleAlarmLed(CurrentState_CenLoc);
 800088e:	4b42      	ldr	r3, [pc, #264]	; (8000998 <CenLoc_MainFunction+0x4bc>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fd9c 	bl	80013d0 <SecAlm_ToggleAlarmLed>
 8000898:	e02b      	b.n	80008f2 <CenLoc_MainFunction+0x416>
		}
		else if(42500 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 43750)
 800089a:	4b42      	ldr	r3, [pc, #264]	; (80009a4 <CenLoc_MainFunction+0x4c8>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a0:	f24a 6204 	movw	r2, #42500	; 0xa604
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d911      	bls.n	80008cc <CenLoc_MainFunction+0x3f0>
 80008a8:	4b3e      	ldr	r3, [pc, #248]	; (80009a4 <CenLoc_MainFunction+0x4c8>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ae:	f64a 22e5 	movw	r2, #43749	; 0xaae5
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d80a      	bhi.n	80008cc <CenLoc_MainFunction+0x3f0>
		{
			SecAlm_ToggleAlarmLed(!CurrentState_CenLoc);
 80008b6:	4b38      	ldr	r3, [pc, #224]	; (8000998 <CenLoc_MainFunction+0x4bc>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	bf0c      	ite	eq
 80008be:	2301      	moveq	r3, #1
 80008c0:	2300      	movne	r3, #0
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 fd83 	bl	80013d0 <SecAlm_ToggleAlarmLed>
 80008ca:	e012      	b.n	80008f2 <CenLoc_MainFunction+0x416>
		}
		else if(43750 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 45000)
 80008cc:	4b35      	ldr	r3, [pc, #212]	; (80009a4 <CenLoc_MainFunction+0x4c8>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d2:	f64a 22e6 	movw	r2, #43750	; 0xaae6
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d90b      	bls.n	80008f2 <CenLoc_MainFunction+0x416>
 80008da:	4b32      	ldr	r3, [pc, #200]	; (80009a4 <CenLoc_MainFunction+0x4c8>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e0:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d804      	bhi.n	80008f2 <CenLoc_MainFunction+0x416>
		{
			SecAlm_ToggleAlarmLed(CurrentState_CenLoc);
 80008e8:	4b2b      	ldr	r3, [pc, #172]	; (8000998 <CenLoc_MainFunction+0x4bc>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fd6f 	bl	80013d0 <SecAlm_ToggleAlarmLed>
		else
		{
			/* do nothing */
		}

		if(UnlockCounter < 2 && BTCenLoc_LockUnlockFlag == STD_HIGH)
 80008f2:	4b32      	ldr	r3, [pc, #200]	; (80009bc <CenLoc_MainFunction+0x4e0>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d841      	bhi.n	800097e <CenLoc_MainFunction+0x4a2>
 80008fa:	4b31      	ldr	r3, [pc, #196]	; (80009c0 <CenLoc_MainFunction+0x4e4>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d13d      	bne.n	800097e <CenLoc_MainFunction+0x4a2>
		{
			HAL_TIM_Base_Start(&htim2);
 8000902:	4830      	ldr	r0, [pc, #192]	; (80009c4 <CenLoc_MainFunction+0x4e8>)
 8000904:	f002 fcf6 	bl	80032f4 <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000908:	4b2e      	ldr	r3, [pc, #184]	; (80009c4 <CenLoc_MainFunction+0x4e8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000912:	4293      	cmp	r3, r2
 8000914:	d814      	bhi.n	8000940 <CenLoc_MainFunction+0x464>
			{
				ExtLights_TurnSignalLeft(!CurrentState_CenLoc);
 8000916:	4b20      	ldr	r3, [pc, #128]	; (8000998 <CenLoc_MainFunction+0x4bc>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	bf0c      	ite	eq
 800091e:	2301      	moveq	r3, #1
 8000920:	2300      	movne	r3, #0
 8000922:	b2db      	uxtb	r3, r3
 8000924:	4618      	mov	r0, r3
 8000926:	f000 fbc1 	bl	80010ac <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(!CurrentState_CenLoc);
 800092a:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <CenLoc_MainFunction+0x4bc>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	bf0c      	ite	eq
 8000932:	2301      	moveq	r3, #1
 8000934:	2300      	movne	r3, #0
 8000936:	b2db      	uxtb	r3, r3
 8000938:	4618      	mov	r0, r3
 800093a:	f000 fbc9 	bl	80010d0 <ExtLights_TurnSignalRight>
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 800093e:	e028      	b.n	8000992 <CenLoc_MainFunction+0x4b6>
			}
			else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000940:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <CenLoc_MainFunction+0x4e8>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000946:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800094a:	4293      	cmp	r3, r2
 800094c:	d921      	bls.n	8000992 <CenLoc_MainFunction+0x4b6>
 800094e:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <CenLoc_MainFunction+0x4e8>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000954:	f241 3287 	movw	r2, #4999	; 0x1387
 8000958:	4293      	cmp	r3, r2
 800095a:	d81a      	bhi.n	8000992 <CenLoc_MainFunction+0x4b6>
			{
				ExtLights_TurnSignalLeft(CurrentState_CenLoc);
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <CenLoc_MainFunction+0x4bc>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4618      	mov	r0, r3
 8000962:	f000 fba3 	bl	80010ac <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(CurrentState_CenLoc);
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <CenLoc_MainFunction+0x4bc>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	4618      	mov	r0, r3
 800096c:	f000 fbb0 	bl	80010d0 <ExtLights_TurnSignalRight>

				UnlockCounter++;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <CenLoc_MainFunction+0x4e0>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	3301      	adds	r3, #1
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b10      	ldr	r3, [pc, #64]	; (80009bc <CenLoc_MainFunction+0x4e0>)
 800097a:	701a      	strb	r2, [r3, #0]
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 800097c:	e009      	b.n	8000992 <CenLoc_MainFunction+0x4b6>
			else
			{
				/* do nothing */
			}
		}
		else if(UnlockCounter >= 2)
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <CenLoc_MainFunction+0x4e0>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d906      	bls.n	8000994 <CenLoc_MainFunction+0x4b8>
		{
			HAL_TIM_Base_Stop(&htim2);
 8000986:	480f      	ldr	r0, [pc, #60]	; (80009c4 <CenLoc_MainFunction+0x4e8>)
 8000988:	f002 fd0e 	bl	80033a8 <HAL_TIM_Base_Stop>
	}
	else
	{
		/* do nothing */
	}
}
 800098c:	e002      	b.n	8000994 <CenLoc_MainFunction+0x4b8>
		if(LockCounter < 4)
 800098e:	bf00      	nop
 8000990:	e000      	b.n	8000994 <CenLoc_MainFunction+0x4b8>
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000992:	bf00      	nop
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000028 	.word	0x20000028
 800099c:	20000048 	.word	0x20000048
 80009a0:	20000029 	.word	0x20000029
 80009a4:	200000dc 	.word	0x200000dc
 80009a8:	2000002c 	.word	0x2000002c
 80009ac:	2000002d 	.word	0x2000002d
 80009b0:	2000016c 	.word	0x2000016c
 80009b4:	0001869f 	.word	0x0001869f
 80009b8:	000186a0 	.word	0x000186a0
 80009bc:	20000047 	.word	0x20000047
 80009c0:	2000002a 	.word	0x2000002a
 80009c4:	20000094 	.word	0x20000094

080009c8 <CenLoc_Init>:

StdReturnType CenLoc_Init()
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
	CurrentState_CenLoc = STD_LOW;
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <CenLoc_Init+0x34>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
	BTCenLoc = STD_LOW;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <CenLoc_Init+0x38>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]
	BTCenLoc_LockUnlockFlag = STD_LOW;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <CenLoc_Init+0x3c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
	PreviousState_CenLoc = STD_LOW;
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <CenLoc_Init+0x40>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
	ExtLights_UnlockedState = STD_LOW;
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <CenLoc_Init+0x44>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
	ExtLights_LockedState = STD_LOW;
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <CenLoc_Init+0x48>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]

	return E_OK;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	20000028 	.word	0x20000028
 8000a00:	20000029 	.word	0x20000029
 8000a04:	2000002a 	.word	0x2000002a
 8000a08:	2000002b 	.word	0x2000002b
 8000a0c:	2000002c 	.word	0x2000002c
 8000a10:	2000002d 	.word	0x2000002d

08000a14 <CenLoc_Toggle_Door_LED>:

void CenLoc_Toggle_Door_LED(uint8 PinState)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DOOR_LED_PORT, DOOR_LED_PIN, PinState);
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	461a      	mov	r2, r3
 8000a22:	2140      	movs	r1, #64	; 0x40
 8000a24:	4803      	ldr	r0, [pc, #12]	; (8000a34 <CenLoc_Toggle_Door_LED+0x20>)
 8000a26:	f001 fef3 	bl	8002810 <HAL_GPIO_WritePin>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40020400 	.word	0x40020400

08000a38 <ExtLights_MainFunction>:
uint8_t BTHazardLight;
uint8_t BTExtLight_IrqFlag;


void ExtLights_MainFunction()
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	if(BTLowBeam == STD_HIGH)
 8000a3c:	4b86      	ldr	r3, [pc, #536]	; (8000c58 <ExtLights_MainFunction+0x220>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d104      	bne.n	8000a4e <ExtLights_MainFunction+0x16>
	{
		CurrentState_LowBeam = BTLowBeam;
 8000a44:	4b84      	ldr	r3, [pc, #528]	; (8000c58 <ExtLights_MainFunction+0x220>)
 8000a46:	781a      	ldrb	r2, [r3, #0]
 8000a48:	4b84      	ldr	r3, [pc, #528]	; (8000c5c <ExtLights_MainFunction+0x224>)
 8000a4a:	701a      	strb	r2, [r3, #0]
 8000a4c:	e007      	b.n	8000a5e <ExtLights_MainFunction+0x26>
	}
	else if(BTLowBeam == STD_LOW)
 8000a4e:	4b82      	ldr	r3, [pc, #520]	; (8000c58 <ExtLights_MainFunction+0x220>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d103      	bne.n	8000a5e <ExtLights_MainFunction+0x26>
	{
		CurrentState_LowBeam = BTLowBeam;
 8000a56:	4b80      	ldr	r3, [pc, #512]	; (8000c58 <ExtLights_MainFunction+0x220>)
 8000a58:	781a      	ldrb	r2, [r3, #0]
 8000a5a:	4b80      	ldr	r3, [pc, #512]	; (8000c5c <ExtLights_MainFunction+0x224>)
 8000a5c:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTHighBeam == STD_HIGH)
 8000a5e:	4b80      	ldr	r3, [pc, #512]	; (8000c60 <ExtLights_MainFunction+0x228>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d104      	bne.n	8000a70 <ExtLights_MainFunction+0x38>
	{
		CurrentState_HighBeam = BTLowBeam;
 8000a66:	4b7c      	ldr	r3, [pc, #496]	; (8000c58 <ExtLights_MainFunction+0x220>)
 8000a68:	781a      	ldrb	r2, [r3, #0]
 8000a6a:	4b7e      	ldr	r3, [pc, #504]	; (8000c64 <ExtLights_MainFunction+0x22c>)
 8000a6c:	701a      	strb	r2, [r3, #0]
 8000a6e:	e007      	b.n	8000a80 <ExtLights_MainFunction+0x48>
	}
	else if(BTHighBeam == STD_LOW)
 8000a70:	4b7b      	ldr	r3, [pc, #492]	; (8000c60 <ExtLights_MainFunction+0x228>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d103      	bne.n	8000a80 <ExtLights_MainFunction+0x48>
	{
		CurrentState_HighBeam = BTLowBeam;
 8000a78:	4b77      	ldr	r3, [pc, #476]	; (8000c58 <ExtLights_MainFunction+0x220>)
 8000a7a:	781a      	ldrb	r2, [r3, #0]
 8000a7c:	4b79      	ldr	r3, [pc, #484]	; (8000c64 <ExtLights_MainFunction+0x22c>)
 8000a7e:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTHighBeam == STD_HIGH)
 8000a80:	4b77      	ldr	r3, [pc, #476]	; (8000c60 <ExtLights_MainFunction+0x228>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d104      	bne.n	8000a92 <ExtLights_MainFunction+0x5a>
	{
		CurrentState_HighBeam = BTHighBeam;
 8000a88:	4b75      	ldr	r3, [pc, #468]	; (8000c60 <ExtLights_MainFunction+0x228>)
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	4b75      	ldr	r3, [pc, #468]	; (8000c64 <ExtLights_MainFunction+0x22c>)
 8000a8e:	701a      	strb	r2, [r3, #0]
 8000a90:	e007      	b.n	8000aa2 <ExtLights_MainFunction+0x6a>
	}
	else if(BTHighBeam == STD_LOW)
 8000a92:	4b73      	ldr	r3, [pc, #460]	; (8000c60 <ExtLights_MainFunction+0x228>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d103      	bne.n	8000aa2 <ExtLights_MainFunction+0x6a>
	{
		CurrentState_HighBeam = BTHighBeam;
 8000a9a:	4b71      	ldr	r3, [pc, #452]	; (8000c60 <ExtLights_MainFunction+0x228>)
 8000a9c:	781a      	ldrb	r2, [r3, #0]
 8000a9e:	4b71      	ldr	r3, [pc, #452]	; (8000c64 <ExtLights_MainFunction+0x22c>)
 8000aa0:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTFogLightFront == STD_HIGH)
 8000aa2:	4b71      	ldr	r3, [pc, #452]	; (8000c68 <ExtLights_MainFunction+0x230>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d104      	bne.n	8000ab4 <ExtLights_MainFunction+0x7c>
	{
		CurrentState_FogLightFront = BTFogLightFront;
 8000aaa:	4b6f      	ldr	r3, [pc, #444]	; (8000c68 <ExtLights_MainFunction+0x230>)
 8000aac:	781a      	ldrb	r2, [r3, #0]
 8000aae:	4b6f      	ldr	r3, [pc, #444]	; (8000c6c <ExtLights_MainFunction+0x234>)
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	e007      	b.n	8000ac4 <ExtLights_MainFunction+0x8c>
	}
	else if(BTFogLightFront == STD_LOW)
 8000ab4:	4b6c      	ldr	r3, [pc, #432]	; (8000c68 <ExtLights_MainFunction+0x230>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d103      	bne.n	8000ac4 <ExtLights_MainFunction+0x8c>
	{
		CurrentState_FogLightFront = BTFogLightFront;
 8000abc:	4b6a      	ldr	r3, [pc, #424]	; (8000c68 <ExtLights_MainFunction+0x230>)
 8000abe:	781a      	ldrb	r2, [r3, #0]
 8000ac0:	4b6a      	ldr	r3, [pc, #424]	; (8000c6c <ExtLights_MainFunction+0x234>)
 8000ac2:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTFogLightRear == STD_HIGH)
 8000ac4:	4b6a      	ldr	r3, [pc, #424]	; (8000c70 <ExtLights_MainFunction+0x238>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d104      	bne.n	8000ad6 <ExtLights_MainFunction+0x9e>
	{
		CurrentState_FogLightRear = BTFogLightRear;
 8000acc:	4b68      	ldr	r3, [pc, #416]	; (8000c70 <ExtLights_MainFunction+0x238>)
 8000ace:	781a      	ldrb	r2, [r3, #0]
 8000ad0:	4b68      	ldr	r3, [pc, #416]	; (8000c74 <ExtLights_MainFunction+0x23c>)
 8000ad2:	701a      	strb	r2, [r3, #0]
 8000ad4:	e007      	b.n	8000ae6 <ExtLights_MainFunction+0xae>
	}
	else if(BTFogLightRear == STD_LOW)
 8000ad6:	4b66      	ldr	r3, [pc, #408]	; (8000c70 <ExtLights_MainFunction+0x238>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d103      	bne.n	8000ae6 <ExtLights_MainFunction+0xae>
	{
		CurrentState_FogLightRear = BTFogLightRear;
 8000ade:	4b64      	ldr	r3, [pc, #400]	; (8000c70 <ExtLights_MainFunction+0x238>)
 8000ae0:	781a      	ldrb	r2, [r3, #0]
 8000ae2:	4b64      	ldr	r3, [pc, #400]	; (8000c74 <ExtLights_MainFunction+0x23c>)
 8000ae4:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTPositionLightRear == STD_HIGH)
 8000ae6:	4b64      	ldr	r3, [pc, #400]	; (8000c78 <ExtLights_MainFunction+0x240>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d104      	bne.n	8000af8 <ExtLights_MainFunction+0xc0>
	{
		CurrentState_PositionLightRear = BTPositionLightRear;
 8000aee:	4b62      	ldr	r3, [pc, #392]	; (8000c78 <ExtLights_MainFunction+0x240>)
 8000af0:	781a      	ldrb	r2, [r3, #0]
 8000af2:	4b62      	ldr	r3, [pc, #392]	; (8000c7c <ExtLights_MainFunction+0x244>)
 8000af4:	701a      	strb	r2, [r3, #0]
 8000af6:	e007      	b.n	8000b08 <ExtLights_MainFunction+0xd0>
	}
	else if(BTPositionLightRear == STD_LOW)
 8000af8:	4b5f      	ldr	r3, [pc, #380]	; (8000c78 <ExtLights_MainFunction+0x240>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d103      	bne.n	8000b08 <ExtLights_MainFunction+0xd0>
	{
		CurrentState_PositionLightRear = BTPositionLightRear;
 8000b00:	4b5d      	ldr	r3, [pc, #372]	; (8000c78 <ExtLights_MainFunction+0x240>)
 8000b02:	781a      	ldrb	r2, [r3, #0]
 8000b04:	4b5d      	ldr	r3, [pc, #372]	; (8000c7c <ExtLights_MainFunction+0x244>)
 8000b06:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTPositionLightRear == STD_HIGH)
 8000b08:	4b5b      	ldr	r3, [pc, #364]	; (8000c78 <ExtLights_MainFunction+0x240>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d104      	bne.n	8000b1a <ExtLights_MainFunction+0xe2>
	{
		CurrentState_PositionLightRear = BTPositionLightRear;
 8000b10:	4b59      	ldr	r3, [pc, #356]	; (8000c78 <ExtLights_MainFunction+0x240>)
 8000b12:	781a      	ldrb	r2, [r3, #0]
 8000b14:	4b59      	ldr	r3, [pc, #356]	; (8000c7c <ExtLights_MainFunction+0x244>)
 8000b16:	701a      	strb	r2, [r3, #0]
 8000b18:	e007      	b.n	8000b2a <ExtLights_MainFunction+0xf2>
	}
	else if(BTPositionLightRear == STD_LOW)
 8000b1a:	4b57      	ldr	r3, [pc, #348]	; (8000c78 <ExtLights_MainFunction+0x240>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d103      	bne.n	8000b2a <ExtLights_MainFunction+0xf2>
	{
		CurrentState_PositionLightRear = BTPositionLightRear;
 8000b22:	4b55      	ldr	r3, [pc, #340]	; (8000c78 <ExtLights_MainFunction+0x240>)
 8000b24:	781a      	ldrb	r2, [r3, #0]
 8000b26:	4b55      	ldr	r3, [pc, #340]	; (8000c7c <ExtLights_MainFunction+0x244>)
 8000b28:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTBrakeLight == STD_HIGH)
 8000b2a:	4b55      	ldr	r3, [pc, #340]	; (8000c80 <ExtLights_MainFunction+0x248>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d104      	bne.n	8000b3c <ExtLights_MainFunction+0x104>
	{
		CurrentState_BrakeLight = BTBrakeLight;
 8000b32:	4b53      	ldr	r3, [pc, #332]	; (8000c80 <ExtLights_MainFunction+0x248>)
 8000b34:	781a      	ldrb	r2, [r3, #0]
 8000b36:	4b53      	ldr	r3, [pc, #332]	; (8000c84 <ExtLights_MainFunction+0x24c>)
 8000b38:	701a      	strb	r2, [r3, #0]
 8000b3a:	e007      	b.n	8000b4c <ExtLights_MainFunction+0x114>
	}
	else if(BTBrakeLight == STD_LOW)
 8000b3c:	4b50      	ldr	r3, [pc, #320]	; (8000c80 <ExtLights_MainFunction+0x248>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d103      	bne.n	8000b4c <ExtLights_MainFunction+0x114>
	{
		CurrentState_BrakeLight = BTBrakeLight;
 8000b44:	4b4e      	ldr	r3, [pc, #312]	; (8000c80 <ExtLights_MainFunction+0x248>)
 8000b46:	781a      	ldrb	r2, [r3, #0]
 8000b48:	4b4e      	ldr	r3, [pc, #312]	; (8000c84 <ExtLights_MainFunction+0x24c>)
 8000b4a:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTReverseLight == STD_HIGH)
 8000b4c:	4b4e      	ldr	r3, [pc, #312]	; (8000c88 <ExtLights_MainFunction+0x250>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d104      	bne.n	8000b5e <ExtLights_MainFunction+0x126>
	{
		CurrentState_ReverseLight = BTReverseLight;
 8000b54:	4b4c      	ldr	r3, [pc, #304]	; (8000c88 <ExtLights_MainFunction+0x250>)
 8000b56:	781a      	ldrb	r2, [r3, #0]
 8000b58:	4b4c      	ldr	r3, [pc, #304]	; (8000c8c <ExtLights_MainFunction+0x254>)
 8000b5a:	701a      	strb	r2, [r3, #0]
 8000b5c:	e007      	b.n	8000b6e <ExtLights_MainFunction+0x136>
	}
	else if(BTReverseLight == STD_LOW)
 8000b5e:	4b4a      	ldr	r3, [pc, #296]	; (8000c88 <ExtLights_MainFunction+0x250>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d103      	bne.n	8000b6e <ExtLights_MainFunction+0x136>
	{
		CurrentState_ReverseLight = BTReverseLight;
 8000b66:	4b48      	ldr	r3, [pc, #288]	; (8000c88 <ExtLights_MainFunction+0x250>)
 8000b68:	781a      	ldrb	r2, [r3, #0]
 8000b6a:	4b48      	ldr	r3, [pc, #288]	; (8000c8c <ExtLights_MainFunction+0x254>)
 8000b6c:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTTurnSignalLeft == STD_HIGH)
 8000b6e:	4b48      	ldr	r3, [pc, #288]	; (8000c90 <ExtLights_MainFunction+0x258>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d104      	bne.n	8000b80 <ExtLights_MainFunction+0x148>
	{
		CurrentState_TurnSignalLeft = BTTurnSignalLeft;
 8000b76:	4b46      	ldr	r3, [pc, #280]	; (8000c90 <ExtLights_MainFunction+0x258>)
 8000b78:	781a      	ldrb	r2, [r3, #0]
 8000b7a:	4b46      	ldr	r3, [pc, #280]	; (8000c94 <ExtLights_MainFunction+0x25c>)
 8000b7c:	701a      	strb	r2, [r3, #0]
 8000b7e:	e007      	b.n	8000b90 <ExtLights_MainFunction+0x158>
	}
	else if(BTTurnSignalLeft == STD_LOW)
 8000b80:	4b43      	ldr	r3, [pc, #268]	; (8000c90 <ExtLights_MainFunction+0x258>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d103      	bne.n	8000b90 <ExtLights_MainFunction+0x158>
	{
		CurrentState_TurnSignalLeft = BTTurnSignalLeft;
 8000b88:	4b41      	ldr	r3, [pc, #260]	; (8000c90 <ExtLights_MainFunction+0x258>)
 8000b8a:	781a      	ldrb	r2, [r3, #0]
 8000b8c:	4b41      	ldr	r3, [pc, #260]	; (8000c94 <ExtLights_MainFunction+0x25c>)
 8000b8e:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTTurnSignalRight == STD_HIGH)
 8000b90:	4b41      	ldr	r3, [pc, #260]	; (8000c98 <ExtLights_MainFunction+0x260>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d104      	bne.n	8000ba2 <ExtLights_MainFunction+0x16a>
	{
		CurrentState_TurnSignalRight = BTTurnSignalRight;
 8000b98:	4b3f      	ldr	r3, [pc, #252]	; (8000c98 <ExtLights_MainFunction+0x260>)
 8000b9a:	781a      	ldrb	r2, [r3, #0]
 8000b9c:	4b3f      	ldr	r3, [pc, #252]	; (8000c9c <ExtLights_MainFunction+0x264>)
 8000b9e:	701a      	strb	r2, [r3, #0]
 8000ba0:	e007      	b.n	8000bb2 <ExtLights_MainFunction+0x17a>
	}
	else if(BTTurnSignalRight == STD_LOW)
 8000ba2:	4b3d      	ldr	r3, [pc, #244]	; (8000c98 <ExtLights_MainFunction+0x260>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d103      	bne.n	8000bb2 <ExtLights_MainFunction+0x17a>
	{
		CurrentState_TurnSignalRight = BTTurnSignalRight;
 8000baa:	4b3b      	ldr	r3, [pc, #236]	; (8000c98 <ExtLights_MainFunction+0x260>)
 8000bac:	781a      	ldrb	r2, [r3, #0]
 8000bae:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <ExtLights_MainFunction+0x264>)
 8000bb0:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTHazardLight == STD_HIGH)
 8000bb2:	4b3b      	ldr	r3, [pc, #236]	; (8000ca0 <ExtLights_MainFunction+0x268>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d104      	bne.n	8000bc4 <ExtLights_MainFunction+0x18c>
	{
		CurrentState_HazardLight = BTHazardLight;
 8000bba:	4b39      	ldr	r3, [pc, #228]	; (8000ca0 <ExtLights_MainFunction+0x268>)
 8000bbc:	781a      	ldrb	r2, [r3, #0]
 8000bbe:	4b39      	ldr	r3, [pc, #228]	; (8000ca4 <ExtLights_MainFunction+0x26c>)
 8000bc0:	701a      	strb	r2, [r3, #0]
 8000bc2:	e007      	b.n	8000bd4 <ExtLights_MainFunction+0x19c>
	}
	else if(BTHazardLight == STD_LOW)
 8000bc4:	4b36      	ldr	r3, [pc, #216]	; (8000ca0 <ExtLights_MainFunction+0x268>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d103      	bne.n	8000bd4 <ExtLights_MainFunction+0x19c>
	{
		CurrentState_HazardLight = BTHazardLight;
 8000bcc:	4b34      	ldr	r3, [pc, #208]	; (8000ca0 <ExtLights_MainFunction+0x268>)
 8000bce:	781a      	ldrb	r2, [r3, #0]
 8000bd0:	4b34      	ldr	r3, [pc, #208]	; (8000ca4 <ExtLights_MainFunction+0x26c>)
 8000bd2:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(CurrentState_TurnSignalLeft == STD_HIGH)
 8000bd4:	4b2f      	ldr	r3, [pc, #188]	; (8000c94 <ExtLights_MainFunction+0x25c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	f040 8080 	bne.w	8000cde <ExtLights_MainFunction+0x2a6>
	{
		HAL_TIM_Base_Start(&htim2);
 8000bde:	4832      	ldr	r0, [pc, #200]	; (8000ca8 <ExtLights_MainFunction+0x270>)
 8000be0:	f002 fb88 	bl	80032f4 <HAL_TIM_Base_Start>
		if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000be4:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <ExtLights_MainFunction+0x270>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bea:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d805      	bhi.n	8000bfe <ExtLights_MainFunction+0x1c6>
		{
			ExtLights_TurnSignalLeft(CurrentState_TurnSignalLeft);
 8000bf2:	4b28      	ldr	r3, [pc, #160]	; (8000c94 <ExtLights_MainFunction+0x25c>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 fa58 	bl	80010ac <ExtLights_TurnSignalLeft>
 8000bfc:	e078      	b.n	8000cf0 <ExtLights_MainFunction+0x2b8>
		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2)  && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000bfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ca8 <ExtLights_MainFunction+0x270>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c04:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d911      	bls.n	8000c30 <ExtLights_MainFunction+0x1f8>
 8000c0c:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <ExtLights_MainFunction+0x270>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c12:	f241 3287 	movw	r2, #4999	; 0x1387
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d80a      	bhi.n	8000c30 <ExtLights_MainFunction+0x1f8>
		{
			ExtLights_TurnSignalLeft(!CurrentState_TurnSignalLeft);
 8000c1a:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <ExtLights_MainFunction+0x25c>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	bf0c      	ite	eq
 8000c22:	2301      	moveq	r3, #1
 8000c24:	2300      	movne	r3, #0
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 fa3f 	bl	80010ac <ExtLights_TurnSignalLeft>
 8000c2e:	e05f      	b.n	8000cf0 <ExtLights_MainFunction+0x2b8>
		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <ExtLights_MainFunction+0x270>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d936      	bls.n	8000cac <ExtLights_MainFunction+0x274>
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <ExtLights_MainFunction+0x270>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c44:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d82f      	bhi.n	8000cac <ExtLights_MainFunction+0x274>
		{
			ExtLights_TurnSignalLeft(CurrentState_TurnSignalLeft);
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <ExtLights_MainFunction+0x25c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 fa2b 	bl	80010ac <ExtLights_TurnSignalLeft>
 8000c56:	e04b      	b.n	8000cf0 <ExtLights_MainFunction+0x2b8>
 8000c58:	20000038 	.word	0x20000038
 8000c5c:	2000002e 	.word	0x2000002e
 8000c60:	20000039 	.word	0x20000039
 8000c64:	2000002f 	.word	0x2000002f
 8000c68:	2000003a 	.word	0x2000003a
 8000c6c:	20000030 	.word	0x20000030
 8000c70:	2000003b 	.word	0x2000003b
 8000c74:	20000031 	.word	0x20000031
 8000c78:	2000003c 	.word	0x2000003c
 8000c7c:	20000034 	.word	0x20000034
 8000c80:	2000003d 	.word	0x2000003d
 8000c84:	20000035 	.word	0x20000035
 8000c88:	2000003e 	.word	0x2000003e
 8000c8c:	20000036 	.word	0x20000036
 8000c90:	20000040 	.word	0x20000040
 8000c94:	20000033 	.word	0x20000033
 8000c98:	2000003f 	.word	0x2000003f
 8000c9c:	20000032 	.word	0x20000032
 8000ca0:	20000041 	.word	0x20000041
 8000ca4:	20000037 	.word	0x20000037
 8000ca8:	20000094 	.word	0x20000094
		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8000cac:	4b97      	ldr	r3, [pc, #604]	; (8000f0c <ExtLights_MainFunction+0x4d4>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb2:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d91a      	bls.n	8000cf0 <ExtLights_MainFunction+0x2b8>
 8000cba:	4b94      	ldr	r3, [pc, #592]	; (8000f0c <ExtLights_MainFunction+0x4d4>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc0:	f242 720f 	movw	r2, #9999	; 0x270f
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d813      	bhi.n	8000cf0 <ExtLights_MainFunction+0x2b8>
		{
			ExtLights_TurnSignalLeft(!CurrentState_TurnSignalLeft);
 8000cc8:	4b91      	ldr	r3, [pc, #580]	; (8000f10 <ExtLights_MainFunction+0x4d8>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	bf0c      	ite	eq
 8000cd0:	2301      	moveq	r3, #1
 8000cd2:	2300      	movne	r3, #0
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f9e8 	bl	80010ac <ExtLights_TurnSignalLeft>
 8000cdc:	e008      	b.n	8000cf0 <ExtLights_MainFunction+0x2b8>
		else
		{
			/* do nothing */
		}
	}
	else if(CurrentState_TurnSignalLeft == STD_LOW)
 8000cde:	4b8c      	ldr	r3, [pc, #560]	; (8000f10 <ExtLights_MainFunction+0x4d8>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d104      	bne.n	8000cf0 <ExtLights_MainFunction+0x2b8>
	{
		ExtLights_TurnSignalLeft(CurrentState_TurnSignalLeft);
 8000ce6:	4b8a      	ldr	r3, [pc, #552]	; (8000f10 <ExtLights_MainFunction+0x4d8>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f9de 	bl	80010ac <ExtLights_TurnSignalLeft>
	else
	{
		/* do nothing */
	}

	if(CurrentState_TurnSignalRight == STD_HIGH)
 8000cf0:	4b88      	ldr	r3, [pc, #544]	; (8000f14 <ExtLights_MainFunction+0x4dc>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d155      	bne.n	8000da4 <ExtLights_MainFunction+0x36c>
	{
		HAL_TIM_Base_Start(&htim2);
 8000cf8:	4884      	ldr	r0, [pc, #528]	; (8000f0c <ExtLights_MainFunction+0x4d4>)
 8000cfa:	f002 fafb 	bl	80032f4 <HAL_TIM_Base_Start>
		if(__HAL_TIM_GET_COUNTER(&htim2)< 2500)
 8000cfe:	4b83      	ldr	r3, [pc, #524]	; (8000f0c <ExtLights_MainFunction+0x4d4>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d04:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d805      	bhi.n	8000d18 <ExtLights_MainFunction+0x2e0>
		{
			ExtLights_TurnSignalRight(CurrentState_TurnSignalRight);
 8000d0c:	4b81      	ldr	r3, [pc, #516]	; (8000f14 <ExtLights_MainFunction+0x4dc>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 f9dd 	bl	80010d0 <ExtLights_TurnSignalRight>
 8000d16:	e04e      	b.n	8000db6 <ExtLights_MainFunction+0x37e>
		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000d18:	4b7c      	ldr	r3, [pc, #496]	; (8000f0c <ExtLights_MainFunction+0x4d4>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d911      	bls.n	8000d4a <ExtLights_MainFunction+0x312>
 8000d26:	4b79      	ldr	r3, [pc, #484]	; (8000f0c <ExtLights_MainFunction+0x4d4>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d80a      	bhi.n	8000d4a <ExtLights_MainFunction+0x312>
		{
			ExtLights_TurnSignalRight(!CurrentState_TurnSignalRight);
 8000d34:	4b77      	ldr	r3, [pc, #476]	; (8000f14 <ExtLights_MainFunction+0x4dc>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	bf0c      	ite	eq
 8000d3c:	2301      	moveq	r3, #1
 8000d3e:	2300      	movne	r3, #0
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f9c4 	bl	80010d0 <ExtLights_TurnSignalRight>
 8000d48:	e035      	b.n	8000db6 <ExtLights_MainFunction+0x37e>
		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 8000d4a:	4b70      	ldr	r3, [pc, #448]	; (8000f0c <ExtLights_MainFunction+0x4d4>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d90c      	bls.n	8000d72 <ExtLights_MainFunction+0x33a>
 8000d58:	4b6c      	ldr	r3, [pc, #432]	; (8000f0c <ExtLights_MainFunction+0x4d4>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5e:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d805      	bhi.n	8000d72 <ExtLights_MainFunction+0x33a>
		{
			ExtLights_TurnSignalRight(CurrentState_TurnSignalRight);
 8000d66:	4b6b      	ldr	r3, [pc, #428]	; (8000f14 <ExtLights_MainFunction+0x4dc>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f9b0 	bl	80010d0 <ExtLights_TurnSignalRight>
 8000d70:	e021      	b.n	8000db6 <ExtLights_MainFunction+0x37e>
		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8000d72:	4b66      	ldr	r3, [pc, #408]	; (8000f0c <ExtLights_MainFunction+0x4d4>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d78:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d91a      	bls.n	8000db6 <ExtLights_MainFunction+0x37e>
 8000d80:	4b62      	ldr	r3, [pc, #392]	; (8000f0c <ExtLights_MainFunction+0x4d4>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d86:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d813      	bhi.n	8000db6 <ExtLights_MainFunction+0x37e>
		{
			ExtLights_TurnSignalRight(!CurrentState_TurnSignalRight);
 8000d8e:	4b61      	ldr	r3, [pc, #388]	; (8000f14 <ExtLights_MainFunction+0x4dc>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	bf0c      	ite	eq
 8000d96:	2301      	moveq	r3, #1
 8000d98:	2300      	movne	r3, #0
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 f997 	bl	80010d0 <ExtLights_TurnSignalRight>
 8000da2:	e008      	b.n	8000db6 <ExtLights_MainFunction+0x37e>
		else
		{
			/* do nothing */
		}
	}
	else if(CurrentState_TurnSignalRight == STD_LOW)
 8000da4:	4b5b      	ldr	r3, [pc, #364]	; (8000f14 <ExtLights_MainFunction+0x4dc>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d104      	bne.n	8000db6 <ExtLights_MainFunction+0x37e>
	{
		ExtLights_TurnSignalRight(CurrentState_TurnSignalRight);
 8000dac:	4b59      	ldr	r3, [pc, #356]	; (8000f14 <ExtLights_MainFunction+0x4dc>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 f98d 	bl	80010d0 <ExtLights_TurnSignalRight>
	else
	{
		/* do nothing */
	}

	if(CurrentState_HazardLight == STD_HIGH)
 8000db6:	4b58      	ldr	r3, [pc, #352]	; (8000f18 <ExtLights_MainFunction+0x4e0>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d173      	bne.n	8000ea6 <ExtLights_MainFunction+0x46e>
	{
		HAL_TIM_Base_Start(&htim2);
 8000dbe:	4853      	ldr	r0, [pc, #332]	; (8000f0c <ExtLights_MainFunction+0x4d4>)
 8000dc0:	f002 fa98 	bl	80032f4 <HAL_TIM_Base_Start>
		if(__HAL_TIM_GET_COUNTER(&htim2)< 2500)
 8000dc4:	4b51      	ldr	r3, [pc, #324]	; (8000f0c <ExtLights_MainFunction+0x4d4>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dca:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d80a      	bhi.n	8000de8 <ExtLights_MainFunction+0x3b0>
		{
			ExtLights_TurnSignalRight(CurrentState_HazardLight);
 8000dd2:	4b51      	ldr	r3, [pc, #324]	; (8000f18 <ExtLights_MainFunction+0x4e0>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f97a 	bl	80010d0 <ExtLights_TurnSignalRight>
			ExtLights_TurnSignalLeft(CurrentState_HazardLight);
 8000ddc:	4b4e      	ldr	r3, [pc, #312]	; (8000f18 <ExtLights_MainFunction+0x4e0>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 f963 	bl	80010ac <ExtLights_TurnSignalLeft>
 8000de6:	e06c      	b.n	8000ec2 <ExtLights_MainFunction+0x48a>
		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000de8:	4b48      	ldr	r3, [pc, #288]	; (8000f0c <ExtLights_MainFunction+0x4d4>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dee:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d91b      	bls.n	8000e2e <ExtLights_MainFunction+0x3f6>
 8000df6:	4b45      	ldr	r3, [pc, #276]	; (8000f0c <ExtLights_MainFunction+0x4d4>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfc:	f241 3287 	movw	r2, #4999	; 0x1387
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d814      	bhi.n	8000e2e <ExtLights_MainFunction+0x3f6>
		{
			ExtLights_TurnSignalRight(!CurrentState_HazardLight);
 8000e04:	4b44      	ldr	r3, [pc, #272]	; (8000f18 <ExtLights_MainFunction+0x4e0>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	bf0c      	ite	eq
 8000e0c:	2301      	moveq	r3, #1
 8000e0e:	2300      	movne	r3, #0
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f95c 	bl	80010d0 <ExtLights_TurnSignalRight>
			ExtLights_TurnSignalLeft(!CurrentState_HazardLight);
 8000e18:	4b3f      	ldr	r3, [pc, #252]	; (8000f18 <ExtLights_MainFunction+0x4e0>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	bf0c      	ite	eq
 8000e20:	2301      	moveq	r3, #1
 8000e22:	2300      	movne	r3, #0
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f940 	bl	80010ac <ExtLights_TurnSignalLeft>
 8000e2c:	e049      	b.n	8000ec2 <ExtLights_MainFunction+0x48a>
		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2)&& __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 8000e2e:	4b37      	ldr	r3, [pc, #220]	; (8000f0c <ExtLights_MainFunction+0x4d4>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d911      	bls.n	8000e60 <ExtLights_MainFunction+0x428>
 8000e3c:	4b33      	ldr	r3, [pc, #204]	; (8000f0c <ExtLights_MainFunction+0x4d4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e42:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d80a      	bhi.n	8000e60 <ExtLights_MainFunction+0x428>
		{
			ExtLights_TurnSignalRight(CurrentState_HazardLight);
 8000e4a:	4b33      	ldr	r3, [pc, #204]	; (8000f18 <ExtLights_MainFunction+0x4e0>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f93e 	bl	80010d0 <ExtLights_TurnSignalRight>
			ExtLights_TurnSignalLeft(CurrentState_HazardLight);
 8000e54:	4b30      	ldr	r3, [pc, #192]	; (8000f18 <ExtLights_MainFunction+0x4e0>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 f927 	bl	80010ac <ExtLights_TurnSignalLeft>
 8000e5e:	e030      	b.n	8000ec2 <ExtLights_MainFunction+0x48a>
		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8000e60:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <ExtLights_MainFunction+0x4d4>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e66:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d929      	bls.n	8000ec2 <ExtLights_MainFunction+0x48a>
 8000e6e:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <ExtLights_MainFunction+0x4d4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e74:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d822      	bhi.n	8000ec2 <ExtLights_MainFunction+0x48a>
		{
			ExtLights_TurnSignalRight(!CurrentState_HazardLight);
 8000e7c:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <ExtLights_MainFunction+0x4e0>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	bf0c      	ite	eq
 8000e84:	2301      	moveq	r3, #1
 8000e86:	2300      	movne	r3, #0
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f920 	bl	80010d0 <ExtLights_TurnSignalRight>
			ExtLights_TurnSignalLeft(!CurrentState_HazardLight);
 8000e90:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <ExtLights_MainFunction+0x4e0>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	bf0c      	ite	eq
 8000e98:	2301      	moveq	r3, #1
 8000e9a:	2300      	movne	r3, #0
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f904 	bl	80010ac <ExtLights_TurnSignalLeft>
 8000ea4:	e00d      	b.n	8000ec2 <ExtLights_MainFunction+0x48a>
		else
		{
			/* do nothing */
		}
	}
	else if(CurrentState_HazardLight == STD_LOW)
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <ExtLights_MainFunction+0x4e0>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d109      	bne.n	8000ec2 <ExtLights_MainFunction+0x48a>
	{
		ExtLights_TurnSignalRight(CurrentState_HazardLight);
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <ExtLights_MainFunction+0x4e0>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f90c 	bl	80010d0 <ExtLights_TurnSignalRight>
		ExtLights_TurnSignalLeft(CurrentState_HazardLight);
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <ExtLights_MainFunction+0x4e0>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 f8f5 	bl	80010ac <ExtLights_TurnSignalLeft>
	else
	{
		/* do nothing */
	}

	ExtLights_LowBeam(CurrentState_LowBeam);
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <ExtLights_MainFunction+0x4e4>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f8a8 	bl	800101c <ExtLights_LowBeam>
	ExtLights_HighBeam(CurrentState_HighBeam);
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <ExtLights_MainFunction+0x4e8>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f8b5 	bl	8001040 <ExtLights_HighBeam>
	ExtLights_FogLightFront(CurrentState_FogLightFront);
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <ExtLights_MainFunction+0x4ec>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f8c2 	bl	8001064 <ExtLights_FogLightFront>
	ExtLights_FogLightRear(CurrentState_FogLightRear);
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <ExtLights_MainFunction+0x4f0>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 f8cf 	bl	8001088 <ExtLights_FogLightRear>
	ExtLights_PositionLightRear(CurrentState_PositionLightRear);
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <ExtLights_MainFunction+0x4f4>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f900 	bl	80010f4 <ExtLights_PositionLightRear>
	ExtLights_BrakeLight(CurrentState_BrakeLight);
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <ExtLights_MainFunction+0x4f8>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f90d 	bl	8001118 <ExtLights_BrakeLight>
	ExtLights_ReverseLight(CurrentState_ReverseLight);
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <ExtLights_MainFunction+0x4fc>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f91a 	bl	800113c <ExtLights_ReverseLight>
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000094 	.word	0x20000094
 8000f10:	20000033 	.word	0x20000033
 8000f14:	20000032 	.word	0x20000032
 8000f18:	20000037 	.word	0x20000037
 8000f1c:	2000002e 	.word	0x2000002e
 8000f20:	2000002f 	.word	0x2000002f
 8000f24:	20000030 	.word	0x20000030
 8000f28:	20000031 	.word	0x20000031
 8000f2c:	20000034 	.word	0x20000034
 8000f30:	20000035 	.word	0x20000035
 8000f34:	20000036 	.word	0x20000036

08000f38 <ExtLights_Init>:

StdReturnType ExtLights_Init()
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
	CurrentState_LowBeam = STD_LOW;
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <ExtLights_Init+0x90>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
	CurrentState_HighBeam = STD_LOW;
 8000f42:	4b22      	ldr	r3, [pc, #136]	; (8000fcc <ExtLights_Init+0x94>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
	CurrentState_FogLightFront = STD_LOW;
 8000f48:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <ExtLights_Init+0x98>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
	CurrentState_FogLightRear = STD_LOW;
 8000f4e:	4b21      	ldr	r3, [pc, #132]	; (8000fd4 <ExtLights_Init+0x9c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
	CurrentState_TurnSignalLeft = STD_LOW;
 8000f54:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <ExtLights_Init+0xa0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
	CurrentState_TurnSignalRight = STD_LOW;
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <ExtLights_Init+0xa4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
	CurrentState_PositionLightRear = STD_LOW;
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <ExtLights_Init+0xa8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
	CurrentState_BrakeLight = STD_LOW;
 8000f66:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <ExtLights_Init+0xac>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
	CurrentState_ReverseLight = STD_LOW;
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <ExtLights_Init+0xb0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
	CurrentState_HazardLight = STD_LOW;
 8000f72:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <ExtLights_Init+0xb4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
	BTLowBeam = STD_LOW;
 8000f78:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <ExtLights_Init+0xb8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
	BTHighBeam = STD_LOW;
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <ExtLights_Init+0xbc>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
	BTFogLightFront = STD_LOW;
 8000f84:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <ExtLights_Init+0xc0>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
	BTFogLightRear = STD_LOW;
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <ExtLights_Init+0xc4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
	BTPositionLightRear = STD_LOW;
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <ExtLights_Init+0xc8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
	BTBrakeLight = STD_LOW;
 8000f96:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <ExtLights_Init+0xcc>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
	BTReverseLight = STD_LOW;
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <ExtLights_Init+0xd0>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
	BTTurnSignalRight = STD_LOW;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <ExtLights_Init+0xd4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
	BTTurnSignalLeft = STD_LOW;
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <ExtLights_Init+0xd8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
	BTHazardLight = STD_LOW;
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <ExtLights_Init+0xdc>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
	BTExtLight_IrqFlag = STD_LOW;
 8000fb4:	4b18      	ldr	r3, [pc, #96]	; (8001018 <ExtLights_Init+0xe0>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]

	return E_OK;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	2000002e 	.word	0x2000002e
 8000fcc:	2000002f 	.word	0x2000002f
 8000fd0:	20000030 	.word	0x20000030
 8000fd4:	20000031 	.word	0x20000031
 8000fd8:	20000033 	.word	0x20000033
 8000fdc:	20000032 	.word	0x20000032
 8000fe0:	20000034 	.word	0x20000034
 8000fe4:	20000035 	.word	0x20000035
 8000fe8:	20000036 	.word	0x20000036
 8000fec:	20000037 	.word	0x20000037
 8000ff0:	20000038 	.word	0x20000038
 8000ff4:	20000039 	.word	0x20000039
 8000ff8:	2000003a 	.word	0x2000003a
 8000ffc:	2000003b 	.word	0x2000003b
 8001000:	2000003c 	.word	0x2000003c
 8001004:	2000003d 	.word	0x2000003d
 8001008:	2000003e 	.word	0x2000003e
 800100c:	2000003f 	.word	0x2000003f
 8001010:	20000040 	.word	0x20000040
 8001014:	20000041 	.word	0x20000041
 8001018:	20000042 	.word	0x20000042

0800101c <ExtLights_LowBeam>:


void ExtLights_LowBeam(uint8 PinState)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LOW_BEAM_PORT, LOW_BEAM_PIN, PinState);
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	461a      	mov	r2, r3
 800102a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800102e:	4803      	ldr	r0, [pc, #12]	; (800103c <ExtLights_LowBeam+0x20>)
 8001030:	f001 fbee 	bl	8002810 <HAL_GPIO_WritePin>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40020000 	.word	0x40020000

08001040 <ExtLights_HighBeam>:

void ExtLights_HighBeam(uint8 PinState)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(HIGH_BEAM_PORT, HIGH_BEAM_PIN, PinState);
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	461a      	mov	r2, r3
 800104e:	2120      	movs	r1, #32
 8001050:	4803      	ldr	r0, [pc, #12]	; (8001060 <ExtLights_HighBeam+0x20>)
 8001052:	f001 fbdd 	bl	8002810 <HAL_GPIO_WritePin>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40020400 	.word	0x40020400

08001064 <ExtLights_FogLightFront>:

void ExtLights_FogLightFront(uint8 PinState)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(FRONT_FOG_LIGHT_PORT, FRONT_FOG_LIGHT_PIN, PinState);
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	461a      	mov	r2, r3
 8001072:	2110      	movs	r1, #16
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <ExtLights_FogLightFront+0x20>)
 8001076:	f001 fbcb 	bl	8002810 <HAL_GPIO_WritePin>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40020400 	.word	0x40020400

08001088 <ExtLights_FogLightRear>:

void ExtLights_FogLightRear(uint8 PinState)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(REAR_FOG_LIGHT_PORT, REAR_FOG_LIGHT_PIN, PinState);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	461a      	mov	r2, r3
 8001096:	2140      	movs	r1, #64	; 0x40
 8001098:	4803      	ldr	r0, [pc, #12]	; (80010a8 <ExtLights_FogLightRear+0x20>)
 800109a:	f001 fbb9 	bl	8002810 <HAL_GPIO_WritePin>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40020000 	.word	0x40020000

080010ac <ExtLights_TurnSignalLeft>:

void ExtLights_TurnSignalLeft(uint8 PinState)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LEFT_TURN_SIGNAL_PORT, LEFT_TURN_SIGNAL_PIN, PinState);
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	461a      	mov	r2, r3
 80010ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010be:	4803      	ldr	r0, [pc, #12]	; (80010cc <ExtLights_TurnSignalLeft+0x20>)
 80010c0:	f001 fba6 	bl	8002810 <HAL_GPIO_WritePin>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40020000 	.word	0x40020000

080010d0 <ExtLights_TurnSignalRight>:

void ExtLights_TurnSignalRight(uint8 PinState)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RIGHT_TURN_SIGNAL_PORT, RIGHT_TURN_SIGNAL_PIN, PinState);
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	461a      	mov	r2, r3
 80010de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e2:	4803      	ldr	r0, [pc, #12]	; (80010f0 <ExtLights_TurnSignalRight+0x20>)
 80010e4:	f001 fb94 	bl	8002810 <HAL_GPIO_WritePin>
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40020000 	.word	0x40020000

080010f4 <ExtLights_PositionLightRear>:

void ExtLights_PositionLightRear(uint8 PinState)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(REAR_POSITION_LIGHT_PORT, REAR_POSITION_LIGHT_PIN, PinState);
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	461a      	mov	r2, r3
 8001102:	2120      	movs	r1, #32
 8001104:	4803      	ldr	r0, [pc, #12]	; (8001114 <ExtLights_PositionLightRear+0x20>)
 8001106:	f001 fb83 	bl	8002810 <HAL_GPIO_WritePin>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40020000 	.word	0x40020000

08001118 <ExtLights_BrakeLight>:

void ExtLights_BrakeLight(uint8 PinState)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(BRAKE_LIGHT_PORT, BRAKE_LIGHT_PIN, PinState);
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	461a      	mov	r2, r3
 8001126:	f44f 7100 	mov.w	r1, #512	; 0x200
 800112a:	4803      	ldr	r0, [pc, #12]	; (8001138 <ExtLights_BrakeLight+0x20>)
 800112c:	f001 fb70 	bl	8002810 <HAL_GPIO_WritePin>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40020400 	.word	0x40020400

0800113c <ExtLights_ReverseLight>:

void ExtLights_ReverseLight(uint8 PinState)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(REVERSE_LIGHT_PORT, REVERSE_LIGHT_PIN, PinState);
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	461a      	mov	r2, r3
 800114a:	2180      	movs	r1, #128	; 0x80
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <ExtLights_ReverseLight+0x20>)
 800114e:	f001 fb5f 	bl	8002810 <HAL_GPIO_WritePin>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40020800 	.word	0x40020800

08001160 <IntLights_MainFunction>:

uint8 CurrentState_IntLights;
uint8 BTIntLights;

void IntLights_MainFunction()
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	if(BTIntLights == STD_HIGH)
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <IntLights_MainFunction+0x30>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d103      	bne.n	8001174 <IntLights_MainFunction+0x14>
	{
		CurrentState_IntLights = STD_HIGH;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <IntLights_MainFunction+0x34>)
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
 8001172:	e006      	b.n	8001182 <IntLights_MainFunction+0x22>
	}
	else if(BTIntLights == STD_LOW)
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <IntLights_MainFunction+0x30>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <IntLights_MainFunction+0x22>
	{
		CurrentState_IntLights = STD_LOW;
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <IntLights_MainFunction+0x34>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	IntLights_Toggle_IntLights(CurrentState_IntLights);
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <IntLights_MainFunction+0x34>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f818 	bl	80011bc <IntLights_Toggle_IntLights>
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000044 	.word	0x20000044
 8001194:	20000043 	.word	0x20000043

08001198 <IntLights_Init>:

StdReturnType IntLights_Init()
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
	CurrentState_IntLights = STD_LOW;
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <IntLights_Init+0x1c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
	BTIntLights = STD_LOW;
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <IntLights_Init+0x20>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]

	return E_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	20000043 	.word	0x20000043
 80011b8:	20000044 	.word	0x20000044

080011bc <IntLights_Toggle_IntLights>:

void IntLights_Toggle_IntLights(uint8 PinState)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(INTERIOR_LIGHT_PORT, INTERIOR_LIGHT_PIN, PinState);
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	461a      	mov	r2, r3
 80011ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ce:	4803      	ldr	r0, [pc, #12]	; (80011dc <IntLights_Toggle_IntLights+0x20>)
 80011d0:	f001 fb1e 	bl	8002810 <HAL_GPIO_WritePin>
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40020400 	.word	0x40020400

080011e0 <SecAlm_MainFunction>:
uint8 SecAlmTrigger;
uint8 SecAlmCounter;
uint8 PreviousState_SecAlm;

void SecAlm_MainFunction()
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	if(PreviousState_SecAlm != SecAlmTrigger)
 80011e4:	4b61      	ldr	r3, [pc, #388]	; (800136c <SecAlm_MainFunction+0x18c>)
 80011e6:	781a      	ldrb	r2, [r3, #0]
 80011e8:	4b61      	ldr	r3, [pc, #388]	; (8001370 <SecAlm_MainFunction+0x190>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d006      	beq.n	80011fe <SecAlm_MainFunction+0x1e>
	{
		HAL_TIM_Base_Init(&htim5);
 80011f0:	4860      	ldr	r0, [pc, #384]	; (8001374 <SecAlm_MainFunction+0x194>)
 80011f2:	f002 f82f 	bl	8003254 <HAL_TIM_Base_Init>
		PreviousState_SecAlm = SecAlmTrigger;
 80011f6:	4b5e      	ldr	r3, [pc, #376]	; (8001370 <SecAlm_MainFunction+0x190>)
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	4b5c      	ldr	r3, [pc, #368]	; (800136c <SecAlm_MainFunction+0x18c>)
 80011fc:	701a      	strb	r2, [r3, #0]
	}

	if(SecAlmTrigger == STD_HIGH)
 80011fe:	4b5c      	ldr	r3, [pc, #368]	; (8001370 <SecAlm_MainFunction+0x190>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b01      	cmp	r3, #1
 8001204:	f040 808a 	bne.w	800131c <SecAlm_MainFunction+0x13c>
	{
		HAL_TIM_Base_Start(&htim5);
 8001208:	485a      	ldr	r0, [pc, #360]	; (8001374 <SecAlm_MainFunction+0x194>)
 800120a:	f002 f873 	bl	80032f4 <HAL_TIM_Base_Start>
		if(__HAL_TIM_GET_COUNTER(&htim5) < 100000)
 800120e:	4b59      	ldr	r3, [pc, #356]	; (8001374 <SecAlm_MainFunction+0x194>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	4a58      	ldr	r2, [pc, #352]	; (8001378 <SecAlm_MainFunction+0x198>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d873      	bhi.n	8001302 <SecAlm_MainFunction+0x122>
		{
			HAL_TIM_Base_Start(&htim4);
 800121a:	4858      	ldr	r0, [pc, #352]	; (800137c <SecAlm_MainFunction+0x19c>)
 800121c:	f002 f86a 	bl	80032f4 <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim4) < 5000)
 8001220:	4b56      	ldr	r3, [pc, #344]	; (800137c <SecAlm_MainFunction+0x19c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	f241 3287 	movw	r2, #4999	; 0x1387
 800122a:	4293      	cmp	r3, r2
 800122c:	d81e      	bhi.n	800126c <SecAlm_MainFunction+0x8c>
			{
				ExtLights_LowBeam(SecAlmTrigger);
 800122e:	4b50      	ldr	r3, [pc, #320]	; (8001370 <SecAlm_MainFunction+0x190>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fef2 	bl	800101c <ExtLights_LowBeam>
				ExtLights_PositionLightRear(SecAlmTrigger);
 8001238:	4b4d      	ldr	r3, [pc, #308]	; (8001370 <SecAlm_MainFunction+0x190>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff59 	bl	80010f4 <ExtLights_PositionLightRear>
				ExtLights_FogLightFront(SecAlmTrigger);
 8001242:	4b4b      	ldr	r3, [pc, #300]	; (8001370 <SecAlm_MainFunction+0x190>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ff0c 	bl	8001064 <ExtLights_FogLightFront>
				ExtLights_FogLightRear(SecAlmTrigger);
 800124c:	4b48      	ldr	r3, [pc, #288]	; (8001370 <SecAlm_MainFunction+0x190>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff19 	bl	8001088 <ExtLights_FogLightRear>
				ExtLights_TurnSignalRight(SecAlmTrigger);
 8001256:	4b46      	ldr	r3, [pc, #280]	; (8001370 <SecAlm_MainFunction+0x190>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ff38 	bl	80010d0 <ExtLights_TurnSignalRight>
				ExtLights_TurnSignalLeft(SecAlmTrigger);
 8001260:	4b43      	ldr	r3, [pc, #268]	; (8001370 <SecAlm_MainFunction+0x190>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff21 	bl	80010ac <ExtLights_TurnSignalLeft>
	}
	else
	{
		/* do nothing */
	}
}
 800126a:	e07c      	b.n	8001366 <SecAlm_MainFunction+0x186>
			else if(5000 < __HAL_TIM_GET_COUNTER(&htim4) && __HAL_TIM_GET_COUNTER(&htim4) < 10000)
 800126c:	4b43      	ldr	r3, [pc, #268]	; (800137c <SecAlm_MainFunction+0x19c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	f241 3288 	movw	r2, #5000	; 0x1388
 8001276:	4293      	cmp	r3, r2
 8001278:	d975      	bls.n	8001366 <SecAlm_MainFunction+0x186>
 800127a:	4b40      	ldr	r3, [pc, #256]	; (800137c <SecAlm_MainFunction+0x19c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001280:	f242 720f 	movw	r2, #9999	; 0x270f
 8001284:	4293      	cmp	r3, r2
 8001286:	d86e      	bhi.n	8001366 <SecAlm_MainFunction+0x186>
				ExtLights_LowBeam(!SecAlmTrigger);
 8001288:	4b39      	ldr	r3, [pc, #228]	; (8001370 <SecAlm_MainFunction+0x190>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	bf0c      	ite	eq
 8001290:	2301      	moveq	r3, #1
 8001292:	2300      	movne	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fec0 	bl	800101c <ExtLights_LowBeam>
				ExtLights_PositionLightRear(!SecAlmTrigger);
 800129c:	4b34      	ldr	r3, [pc, #208]	; (8001370 <SecAlm_MainFunction+0x190>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	bf0c      	ite	eq
 80012a4:	2301      	moveq	r3, #1
 80012a6:	2300      	movne	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff22 	bl	80010f4 <ExtLights_PositionLightRear>
				ExtLights_FogLightFront(!SecAlmTrigger);
 80012b0:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <SecAlm_MainFunction+0x190>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	bf0c      	ite	eq
 80012b8:	2301      	moveq	r3, #1
 80012ba:	2300      	movne	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fed0 	bl	8001064 <ExtLights_FogLightFront>
				ExtLights_FogLightRear(!SecAlmTrigger);
 80012c4:	4b2a      	ldr	r3, [pc, #168]	; (8001370 <SecAlm_MainFunction+0x190>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	bf0c      	ite	eq
 80012cc:	2301      	moveq	r3, #1
 80012ce:	2300      	movne	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fed8 	bl	8001088 <ExtLights_FogLightRear>
				ExtLights_TurnSignalRight(!SecAlmTrigger);
 80012d8:	4b25      	ldr	r3, [pc, #148]	; (8001370 <SecAlm_MainFunction+0x190>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bf0c      	ite	eq
 80012e0:	2301      	moveq	r3, #1
 80012e2:	2300      	movne	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fef2 	bl	80010d0 <ExtLights_TurnSignalRight>
				ExtLights_TurnSignalLeft(!SecAlmTrigger);
 80012ec:	4b20      	ldr	r3, [pc, #128]	; (8001370 <SecAlm_MainFunction+0x190>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	bf0c      	ite	eq
 80012f4:	2301      	moveq	r3, #1
 80012f6:	2300      	movne	r3, #0
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fed6 	bl	80010ac <ExtLights_TurnSignalLeft>
}
 8001300:	e031      	b.n	8001366 <SecAlm_MainFunction+0x186>
		else if(__HAL_TIM_GET_COUNTER(&htim5) > 100000)
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <SecAlm_MainFunction+0x194>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001308:	4a1d      	ldr	r2, [pc, #116]	; (8001380 <SecAlm_MainFunction+0x1a0>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d92b      	bls.n	8001366 <SecAlm_MainFunction+0x186>
			SecAlmTrigger = STD_LOW;
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <SecAlm_MainFunction+0x190>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim5);
 8001314:	4817      	ldr	r0, [pc, #92]	; (8001374 <SecAlm_MainFunction+0x194>)
 8001316:	f002 f847 	bl	80033a8 <HAL_TIM_Base_Stop>
}
 800131a:	e024      	b.n	8001366 <SecAlm_MainFunction+0x186>
	else if(SecAlmTrigger == STD_LOW)
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <SecAlm_MainFunction+0x190>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d120      	bne.n	8001366 <SecAlm_MainFunction+0x186>
		HAL_TIM_Base_Stop(&htim4);
 8001324:	4815      	ldr	r0, [pc, #84]	; (800137c <SecAlm_MainFunction+0x19c>)
 8001326:	f002 f83f 	bl	80033a8 <HAL_TIM_Base_Stop>
		ExtLights_LowBeam(SecAlmTrigger);
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <SecAlm_MainFunction+0x190>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fe74 	bl	800101c <ExtLights_LowBeam>
		ExtLights_PositionLightRear(SecAlmTrigger);
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <SecAlm_MainFunction+0x190>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fedb 	bl	80010f4 <ExtLights_PositionLightRear>
		ExtLights_FogLightFront(SecAlmTrigger);
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <SecAlm_MainFunction+0x190>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fe8e 	bl	8001064 <ExtLights_FogLightFront>
		ExtLights_FogLightRear(SecAlmTrigger);
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <SecAlm_MainFunction+0x190>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fe9b 	bl	8001088 <ExtLights_FogLightRear>
		ExtLights_TurnSignalRight(SecAlmTrigger);
 8001352:	4b07      	ldr	r3, [pc, #28]	; (8001370 <SecAlm_MainFunction+0x190>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff feba 	bl	80010d0 <ExtLights_TurnSignalRight>
		ExtLights_TurnSignalLeft(SecAlmTrigger);
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <SecAlm_MainFunction+0x190>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fea3 	bl	80010ac <ExtLights_TurnSignalLeft>
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	2000004a 	.word	0x2000004a
 8001370:	20000048 	.word	0x20000048
 8001374:	2000016c 	.word	0x2000016c
 8001378:	0001869f 	.word	0x0001869f
 800137c:	20000124 	.word	0x20000124
 8001380:	000186a0 	.word	0x000186a0

08001384 <SecAlm_Init>:

StdReturnType SecAlm_Init()
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
	CurrentState_Alarm_LED = STD_LOW;
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <SecAlm_Init+0x34>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
	LockCounter = STD_LOW;
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <SecAlm_Init+0x38>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
	UnlockCounter = STD_LOW;
 8001394:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <SecAlm_Init+0x3c>)
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
	SecAlmTrigger = STD_LOW;
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <SecAlm_Init+0x40>)
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
	SecAlmCounter = STD_LOW;
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <SecAlm_Init+0x44>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
	PreviousState_SecAlm = STD_LOW;
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <SecAlm_Init+0x48>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]

	return E_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	20000045 	.word	0x20000045
 80013bc:	20000046 	.word	0x20000046
 80013c0:	20000047 	.word	0x20000047
 80013c4:	20000048 	.word	0x20000048
 80013c8:	20000049 	.word	0x20000049
 80013cc:	2000004a 	.word	0x2000004a

080013d0 <SecAlm_ToggleAlarmLed>:
{
	HAL_GPIO_WritePin(ALARM_BUZZER_PORT, ALARM_BUZZER_PIN, PinState);
}

void SecAlm_ToggleAlarmLed(uint8 PinState)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ALARM_LED_PORT, ALARM_LED_PIN, PinState);
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	461a      	mov	r2, r3
 80013de:	2180      	movs	r1, #128	; 0x80
 80013e0:	4803      	ldr	r0, [pc, #12]	; (80013f0 <SecAlm_ToggleAlarmLed+0x20>)
 80013e2:	f001 fa15 	bl	8002810 <HAL_GPIO_WritePin>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40020000 	.word	0x40020000

080013f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	4b4d      	ldr	r3, [pc, #308]	; (8001544 <MX_GPIO_Init+0x150>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a4c      	ldr	r2, [pc, #304]	; (8001544 <MX_GPIO_Init+0x150>)
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b4a      	ldr	r3, [pc, #296]	; (8001544 <MX_GPIO_Init+0x150>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	4b46      	ldr	r3, [pc, #280]	; (8001544 <MX_GPIO_Init+0x150>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a45      	ldr	r2, [pc, #276]	; (8001544 <MX_GPIO_Init+0x150>)
 8001430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b43      	ldr	r3, [pc, #268]	; (8001544 <MX_GPIO_Init+0x150>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	4b3f      	ldr	r3, [pc, #252]	; (8001544 <MX_GPIO_Init+0x150>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a3e      	ldr	r2, [pc, #248]	; (8001544 <MX_GPIO_Init+0x150>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b3c      	ldr	r3, [pc, #240]	; (8001544 <MX_GPIO_Init+0x150>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	4b38      	ldr	r3, [pc, #224]	; (8001544 <MX_GPIO_Init+0x150>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a37      	ldr	r2, [pc, #220]	; (8001544 <MX_GPIO_Init+0x150>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b35      	ldr	r3, [pc, #212]	; (8001544 <MX_GPIO_Init+0x150>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 800147a:	2200      	movs	r2, #0
 800147c:	f240 71f3 	movw	r1, #2035	; 0x7f3
 8001480:	4831      	ldr	r0, [pc, #196]	; (8001548 <MX_GPIO_Init+0x154>)
 8001482:	f001 f9c5 	bl	8002810 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5
 8001486:	2200      	movs	r2, #0
 8001488:	f240 7171 	movw	r1, #1905	; 0x771
 800148c:	482f      	ldr	r0, [pc, #188]	; (800154c <MX_GPIO_Init+0x158>)
 800148e:	f001 f9bf 	bl	8002810 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	482e      	ldr	r0, [pc, #184]	; (8001550 <MX_GPIO_Init+0x15c>)
 8001498:	f001 f9ba 	bl	8002810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800149c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014a2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80014a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4827      	ldr	r0, [pc, #156]	; (8001550 <MX_GPIO_Init+0x15c>)
 80014b4:	f001 f828 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014b8:	2308      	movs	r3, #8
 80014ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4820      	ldr	r0, [pc, #128]	; (8001550 <MX_GPIO_Init+0x15c>)
 80014ce:	f001 f81b 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PAPin
                           PA6 PA7 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 80014d2:	f240 73f3 	movw	r3, #2035	; 0x7f3
 80014d6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d8:	2301      	movs	r3, #1
 80014da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	4817      	ldr	r0, [pc, #92]	; (8001548 <MX_GPIO_Init+0x154>)
 80014ec:	f001 f80c 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 PB5
                           PB6 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5
 80014f0:	f240 7371 	movw	r3, #1905	; 0x771
 80014f4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	4810      	ldr	r0, [pc, #64]	; (800154c <MX_GPIO_Init+0x158>)
 800150a:	f000 fffd 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	480a      	ldr	r0, [pc, #40]	; (8001550 <MX_GPIO_Init+0x15c>)
 8001526:	f000 ffef 	bl	8002508 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	2009      	movs	r0, #9
 8001530:	f000 fd86 	bl	8002040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001534:	2009      	movs	r0, #9
 8001536:	f000 fd9f 	bl	8002078 <HAL_NVIC_EnableIRQ>

}
 800153a:	bf00      	nop
 800153c:	3728      	adds	r7, #40	; 0x28
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800
 8001548:	40020000 	.word	0x40020000
 800154c:	40020400 	.word	0x40020400
 8001550:	40020800 	.word	0x40020800

08001554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001558:	f000 fc78 	bl	8001e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800155c:	f000 f820 	bl	80015a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001560:	f7ff ff48 	bl	80013f4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001564:	f000 fbb6 	bl	8001cd4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001568:	f000 fa12 	bl	8001990 <MX_TIM2_Init>
  MX_TIM3_Init();
 800156c:	f000 fa5e 	bl	8001a2c <MX_TIM3_Init>
  MX_TIM5_Init();
 8001570:	f000 faf8 	bl	8001b64 <MX_TIM5_Init>
  MX_TIM4_Init();
 8001574:	f000 faa8 	bl	8001ac8 <MX_TIM4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001578:	f000 f87a 	bl	8001670 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  CenLoc_Init();
 800157c:	f7ff fa24 	bl	80009c8 <CenLoc_Init>
  SecAlm_Init();
 8001580:	f7ff ff00 	bl	8001384 <SecAlm_Init>
  ExtLights_Init();
 8001584:	f7ff fcd8 	bl	8000f38 <ExtLights_Init>
  IntLights_Init();
 8001588:	f7ff fe06 	bl	8001198 <IntLights_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	CenLoc_MainFunction();
 800158c:	f7fe ffa6 	bl	80004dc <CenLoc_MainFunction>
	SecAlm_MainFunction();
 8001590:	f7ff fe26 	bl	80011e0 <SecAlm_MainFunction>
	ExtLights_MainFunction();
 8001594:	f7ff fa50 	bl	8000a38 <ExtLights_MainFunction>
	IntLights_MainFunction();
 8001598:	f7ff fde2 	bl	8001160 <IntLights_MainFunction>
	CenLoc_MainFunction();
 800159c:	e7f6      	b.n	800158c <main+0x38>
	...

080015a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b094      	sub	sp, #80	; 0x50
 80015a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a6:	f107 0320 	add.w	r3, r7, #32
 80015aa:	2230      	movs	r2, #48	; 0x30
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 fa50 	bl	8004a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	4b27      	ldr	r3, [pc, #156]	; (8001668 <SystemClock_Config+0xc8>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	4a26      	ldr	r2, [pc, #152]	; (8001668 <SystemClock_Config+0xc8>)
 80015ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d2:	6413      	str	r3, [r2, #64]	; 0x40
 80015d4:	4b24      	ldr	r3, [pc, #144]	; (8001668 <SystemClock_Config+0xc8>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	4b21      	ldr	r3, [pc, #132]	; (800166c <SystemClock_Config+0xcc>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a20      	ldr	r2, [pc, #128]	; (800166c <SystemClock_Config+0xcc>)
 80015ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4b1e      	ldr	r3, [pc, #120]	; (800166c <SystemClock_Config+0xcc>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015fc:	2301      	movs	r3, #1
 80015fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001606:	2302      	movs	r3, #2
 8001608:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800160a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800160e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001610:	2304      	movs	r3, #4
 8001612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001614:	2364      	movs	r3, #100	; 0x64
 8001616:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001618:	2302      	movs	r3, #2
 800161a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800161c:	2304      	movs	r3, #4
 800161e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001620:	f107 0320 	add.w	r3, r7, #32
 8001624:	4618      	mov	r0, r3
 8001626:	f001 f94b 	bl	80028c0 <HAL_RCC_OscConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001630:	f000 f86c 	bl	800170c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001634:	230f      	movs	r3, #15
 8001636:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001638:	2302      	movs	r3, #2
 800163a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001644:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800164a:	f107 030c 	add.w	r3, r7, #12
 800164e:	2103      	movs	r1, #3
 8001650:	4618      	mov	r0, r3
 8001652:	f001 fbad 	bl	8002db0 <HAL_RCC_ClockConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800165c:	f000 f856 	bl	800170c <Error_Handler>
  }
}
 8001660:	bf00      	nop
 8001662:	3750      	adds	r7, #80	; 0x50
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40023800 	.word	0x40023800
 800166c:	40007000 	.word	0x40007000

08001670 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	2005      	movs	r0, #5
 800167a:	f000 fce1 	bl	8002040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800167e:	2005      	movs	r0, #5
 8001680:	f000 fcfa 	bl	8002078 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2100      	movs	r1, #0
 8001688:	2025      	movs	r0, #37	; 0x25
 800168a:	f000 fcd9 	bl	8002040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800168e:	2025      	movs	r0, #37	; 0x25
 8001690:	f000 fcf2 	bl	8002078 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	2100      	movs	r1, #0
 8001698:	2004      	movs	r0, #4
 800169a:	f000 fcd1 	bl	8002040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800169e:	2004      	movs	r0, #4
 80016a0:	f000 fcea 	bl	8002078 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	201c      	movs	r0, #28
 80016aa:	f000 fcc9 	bl	8002040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016ae:	201c      	movs	r0, #28
 80016b0:	f000 fce2 	bl	8002078 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016b4:	2200      	movs	r2, #0
 80016b6:	2100      	movs	r1, #0
 80016b8:	201d      	movs	r0, #29
 80016ba:	f000 fcc1 	bl	8002040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016be:	201d      	movs	r0, #29
 80016c0:	f000 fcda 	bl	8002078 <HAL_NVIC_EnableIRQ>
  /* TIM5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2100      	movs	r1, #0
 80016c8:	2032      	movs	r0, #50	; 0x32
 80016ca:	f000 fcb9 	bl	8002040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80016ce:	2032      	movs	r0, #50	; 0x32
 80016d0:	f000 fcd2 	bl	8002078 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2100      	movs	r1, #0
 80016d8:	2051      	movs	r0, #81	; 0x51
 80016da:	f000 fcb1 	bl	8002040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80016de:	2051      	movs	r0, #81	; 0x51
 80016e0:	f000 fcca 	bl	8002078 <HAL_NVIC_EnableIRQ>
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a04      	ldr	r2, [pc, #16]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d101      	bne.n	80016fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016fa:	f000 fbc9 	bl	8001e90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40010000 	.word	0x40010000

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
}
 8001712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001714:	e7fe      	b.n	8001714 <Error_Handler+0x8>
	...

08001718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <HAL_MspInit+0x58>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	4a12      	ldr	r2, [pc, #72]	; (8001770 <HAL_MspInit+0x58>)
 8001728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172c:	6453      	str	r3, [r2, #68]	; 0x44
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <HAL_MspInit+0x58>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	603b      	str	r3, [r7, #0]
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HAL_MspInit+0x58>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <HAL_MspInit+0x58>)
 8001744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001748:	6413      	str	r3, [r2, #64]	; 0x40
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_MspInit+0x58>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	2001      	movs	r0, #1
 800175c:	f000 fc70 	bl	8002040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001760:	2001      	movs	r0, #1
 8001762:	f000 fc89 	bl	8002078 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08c      	sub	sp, #48	; 0x30
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <HAL_InitTick+0xd0>)
 800178a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178c:	4a2d      	ldr	r2, [pc, #180]	; (8001844 <HAL_InitTick+0xd0>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	6453      	str	r3, [r2, #68]	; 0x44
 8001794:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <HAL_InitTick+0xd0>)
 8001796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017a0:	f107 020c 	add.w	r2, r7, #12
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f001 fd20 	bl	80031f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80017b0:	f001 fd0a 	bl	80031c8 <HAL_RCC_GetPCLK2Freq>
 80017b4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b8:	4a23      	ldr	r2, [pc, #140]	; (8001848 <HAL_InitTick+0xd4>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	0c9b      	lsrs	r3, r3, #18
 80017c0:	3b01      	subs	r3, #1
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80017c4:	4b21      	ldr	r3, [pc, #132]	; (800184c <HAL_InitTick+0xd8>)
 80017c6:	4a22      	ldr	r2, [pc, #136]	; (8001850 <HAL_InitTick+0xdc>)
 80017c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80017ca:	4b20      	ldr	r3, [pc, #128]	; (800184c <HAL_InitTick+0xd8>)
 80017cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80017d2:	4a1e      	ldr	r2, [pc, #120]	; (800184c <HAL_InitTick+0xd8>)
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80017d8:	4b1c      	ldr	r3, [pc, #112]	; (800184c <HAL_InitTick+0xd8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017de:	4b1b      	ldr	r3, [pc, #108]	; (800184c <HAL_InitTick+0xd8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_InitTick+0xd8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80017ea:	4818      	ldr	r0, [pc, #96]	; (800184c <HAL_InitTick+0xd8>)
 80017ec:	f001 fd32 	bl	8003254 <HAL_TIM_Base_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80017f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d11b      	bne.n	8001836 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80017fe:	4813      	ldr	r0, [pc, #76]	; (800184c <HAL_InitTick+0xd8>)
 8001800:	f001 fdfa 	bl	80033f8 <HAL_TIM_Base_Start_IT>
 8001804:	4603      	mov	r3, r0
 8001806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800180a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800180e:	2b00      	cmp	r3, #0
 8001810:	d111      	bne.n	8001836 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001812:	2019      	movs	r0, #25
 8001814:	f000 fc30 	bl	8002078 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b0f      	cmp	r3, #15
 800181c:	d808      	bhi.n	8001830 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800181e:	2200      	movs	r2, #0
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	2019      	movs	r0, #25
 8001824:	f000 fc0c 	bl	8002040 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <HAL_InitTick+0xe0>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e002      	b.n	8001836 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001836:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800183a:	4618      	mov	r0, r3
 800183c:	3730      	adds	r7, #48	; 0x30
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800
 8001848:	431bde83 	.word	0x431bde83
 800184c:	2000004c 	.word	0x2000004c
 8001850:	40010000 	.word	0x40010000
 8001854:	20000004 	.word	0x20000004

08001858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800185c:	e7fe      	b.n	800185c <NMI_Handler+0x4>

0800185e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001862:	e7fe      	b.n	8001862 <HardFault_Handler+0x4>

08001864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <MemManage_Handler+0x4>

0800186a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186e:	e7fe      	b.n	800186e <BusFault_Handler+0x4>

08001870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <UsageFault_Handler+0x4>

08001876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80018b2:	f000 ffeb 	bl	800288c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}

080018ba <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80018be:	f000 fc7b 	bl	80021b8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80018d8:	2008      	movs	r0, #8
 80018da:	f000 ffb3 	bl	8002844 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80018ea:	f001 fde7 	bl	80034bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2000004c 	.word	0x2000004c

080018f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <TIM2_IRQHandler+0x10>)
 80018fe:	f001 fddd 	bl	80034bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000094 	.word	0x20000094

0800190c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <TIM3_IRQHandler+0x10>)
 8001912:	f001 fdd3 	bl	80034bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200000dc 	.word	0x200000dc

08001920 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <TIM4_IRQHandler+0x10>)
 8001926:	f001 fdc9 	bl	80034bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000124 	.word	0x20000124

08001934 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <USART1_IRQHandler+0x10>)
 800193a:	f002 f9a1 	bl	8003c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200001b4 	.word	0x200001b4

08001948 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <TIM5_IRQHandler+0x10>)
 800194e:	f001 fdb5 	bl	80034bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000016c 	.word	0x2000016c

0800195c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <SystemInit+0x20>)
 8001972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001976:	4a05      	ldr	r2, [pc, #20]	; (800198c <SystemInit+0x20>)
 8001978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800197c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001996:	f107 0308 	add.w	r3, r7, #8
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a4:	463b      	mov	r3, r7
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019ac:	4b1e      	ldr	r3, [pc, #120]	; (8001a28 <MX_TIM2_Init+0x98>)
 80019ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 80019b4:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <MX_TIM2_Init+0x98>)
 80019b6:	f242 720f 	movw	r2, #9999	; 0x270f
 80019ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019bc:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <MX_TIM2_Init+0x98>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80019c2:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <MX_TIM2_Init+0x98>)
 80019c4:	f242 720f 	movw	r2, #9999	; 0x270f
 80019c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ca:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <MX_TIM2_Init+0x98>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d0:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <MX_TIM2_Init+0x98>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019d6:	4814      	ldr	r0, [pc, #80]	; (8001a28 <MX_TIM2_Init+0x98>)
 80019d8:	f001 fc3c 	bl	8003254 <HAL_TIM_Base_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019e2:	f7ff fe93 	bl	800170c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019ec:	f107 0308 	add.w	r3, r7, #8
 80019f0:	4619      	mov	r1, r3
 80019f2:	480d      	ldr	r0, [pc, #52]	; (8001a28 <MX_TIM2_Init+0x98>)
 80019f4:	f001 fe6a 	bl	80036cc <HAL_TIM_ConfigClockSource>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80019fe:	f7ff fe85 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a02:	2300      	movs	r3, #0
 8001a04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4806      	ldr	r0, [pc, #24]	; (8001a28 <MX_TIM2_Init+0x98>)
 8001a10:	f002 f866 	bl	8003ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a1a:	f7ff fe77 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000094 	.word	0x20000094

08001a2c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a32:	f107 0308 	add.w	r3, r7, #8
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a40:	463b      	mov	r3, r7
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <MX_TIM3_Init+0x94>)
 8001a4a:	4a1e      	ldr	r2, [pc, #120]	; (8001ac4 <MX_TIM3_Init+0x98>)
 8001a4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <MX_TIM3_Init+0x94>)
 8001a50:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a56:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <MX_TIM3_Init+0x94>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001a5c:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <MX_TIM3_Init+0x94>)
 8001a5e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001a62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a64:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <MX_TIM3_Init+0x94>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <MX_TIM3_Init+0x94>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a70:	4813      	ldr	r0, [pc, #76]	; (8001ac0 <MX_TIM3_Init+0x94>)
 8001a72:	f001 fbef 	bl	8003254 <HAL_TIM_Base_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a7c:	f7ff fe46 	bl	800170c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a86:	f107 0308 	add.w	r3, r7, #8
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	480c      	ldr	r0, [pc, #48]	; (8001ac0 <MX_TIM3_Init+0x94>)
 8001a8e:	f001 fe1d 	bl	80036cc <HAL_TIM_ConfigClockSource>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a98:	f7ff fe38 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <MX_TIM3_Init+0x94>)
 8001aaa:	f002 f819 	bl	8003ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ab4:	f7ff fe2a 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	200000dc 	.word	0x200000dc
 8001ac4:	40000400 	.word	0x40000400

08001ac8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ace:	f107 0308 	add.w	r3, r7, #8
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001adc:	463b      	mov	r3, r7
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ae4:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001ae6:	4a1e      	ldr	r2, [pc, #120]	; (8001b60 <MX_TIM4_Init+0x98>)
 8001ae8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 8001aea:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001aec:	f242 720f 	movw	r2, #9999	; 0x270f
 8001af0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af2:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001afa:	f242 720f 	movw	r2, #9999	; 0x270f
 8001afe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b00:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b0c:	4813      	ldr	r0, [pc, #76]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001b0e:	f001 fba1 	bl	8003254 <HAL_TIM_Base_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001b18:	f7ff fdf8 	bl	800170c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b22:	f107 0308 	add.w	r3, r7, #8
 8001b26:	4619      	mov	r1, r3
 8001b28:	480c      	ldr	r0, [pc, #48]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001b2a:	f001 fdcf 	bl	80036cc <HAL_TIM_ConfigClockSource>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001b34:	f7ff fdea 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b40:	463b      	mov	r3, r7
 8001b42:	4619      	mov	r1, r3
 8001b44:	4805      	ldr	r0, [pc, #20]	; (8001b5c <MX_TIM4_Init+0x94>)
 8001b46:	f001 ffcb 	bl	8003ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001b50:	f7ff fddc 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000124 	.word	0x20000124
 8001b60:	40000800 	.word	0x40000800

08001b64 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6a:	f107 0308 	add.w	r3, r7, #8
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b78:	463b      	mov	r3, r7
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b80:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <MX_TIM5_Init+0x94>)
 8001b82:	4a1e      	ldr	r2, [pc, #120]	; (8001bfc <MX_TIM5_Init+0x98>)
 8001b84:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10000-1;
 8001b86:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <MX_TIM5_Init+0x94>)
 8001b88:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b8c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <MX_TIM5_Init+0x94>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 110000-1;
 8001b94:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <MX_TIM5_Init+0x94>)
 8001b96:	4a1a      	ldr	r2, [pc, #104]	; (8001c00 <MX_TIM5_Init+0x9c>)
 8001b98:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9a:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <MX_TIM5_Init+0x94>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba0:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <MX_TIM5_Init+0x94>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001ba6:	4814      	ldr	r0, [pc, #80]	; (8001bf8 <MX_TIM5_Init+0x94>)
 8001ba8:	f001 fb54 	bl	8003254 <HAL_TIM_Base_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001bb2:	f7ff fdab 	bl	800170c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001bbc:	f107 0308 	add.w	r3, r7, #8
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	480d      	ldr	r0, [pc, #52]	; (8001bf8 <MX_TIM5_Init+0x94>)
 8001bc4:	f001 fd82 	bl	80036cc <HAL_TIM_ConfigClockSource>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001bce:	f7ff fd9d 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bda:	463b      	mov	r3, r7
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4806      	ldr	r0, [pc, #24]	; (8001bf8 <MX_TIM5_Init+0x94>)
 8001be0:	f001 ff7e 	bl	8003ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001bea:	f7ff fd8f 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	2000016c 	.word	0x2000016c
 8001bfc:	40000c00 	.word	0x40000c00
 8001c00:	0001adaf 	.word	0x0001adaf

08001c04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c14:	d10e      	bne.n	8001c34 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <HAL_TIM_Base_MspInit+0xc0>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a29      	ldr	r2, [pc, #164]	; (8001cc4 <HAL_TIM_Base_MspInit+0xc0>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b27      	ldr	r3, [pc, #156]	; (8001cc4 <HAL_TIM_Base_MspInit+0xc0>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001c32:	e042      	b.n	8001cba <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a23      	ldr	r2, [pc, #140]	; (8001cc8 <HAL_TIM_Base_MspInit+0xc4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d10e      	bne.n	8001c5c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <HAL_TIM_Base_MspInit+0xc0>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	4a1f      	ldr	r2, [pc, #124]	; (8001cc4 <HAL_TIM_Base_MspInit+0xc0>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <HAL_TIM_Base_MspInit+0xc0>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]
}
 8001c5a:	e02e      	b.n	8001cba <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1a      	ldr	r2, [pc, #104]	; (8001ccc <HAL_TIM_Base_MspInit+0xc8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d116      	bne.n	8001c94 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <HAL_TIM_Base_MspInit+0xc0>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	4a15      	ldr	r2, [pc, #84]	; (8001cc4 <HAL_TIM_Base_MspInit+0xc0>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
 8001c76:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <HAL_TIM_Base_MspInit+0xc0>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2100      	movs	r1, #0
 8001c86:	201e      	movs	r0, #30
 8001c88:	f000 f9da 	bl	8002040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c8c:	201e      	movs	r0, #30
 8001c8e:	f000 f9f3 	bl	8002078 <HAL_NVIC_EnableIRQ>
}
 8001c92:	e012      	b.n	8001cba <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0d      	ldr	r2, [pc, #52]	; (8001cd0 <HAL_TIM_Base_MspInit+0xcc>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d10d      	bne.n	8001cba <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <HAL_TIM_Base_MspInit+0xc0>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <HAL_TIM_Base_MspInit+0xc0>)
 8001ca8:	f043 0308 	orr.w	r3, r3, #8
 8001cac:	6413      	str	r3, [r2, #64]	; 0x40
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_TIM_Base_MspInit+0xc0>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
}
 8001cba:	bf00      	nop
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40000400 	.word	0x40000400
 8001ccc:	40000800 	.word	0x40000800
 8001cd0:	40000c00 	.word	0x40000c00

08001cd4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <MX_USART1_UART_Init+0x4c>)
 8001cda:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <MX_USART1_UART_Init+0x50>)
 8001cdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <MX_USART1_UART_Init+0x4c>)
 8001ce0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ce4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <MX_USART1_UART_Init+0x4c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <MX_USART1_UART_Init+0x4c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <MX_USART1_UART_Init+0x4c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <MX_USART1_UART_Init+0x4c>)
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfe:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <MX_USART1_UART_Init+0x4c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <MX_USART1_UART_Init+0x4c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d0a:	4805      	ldr	r0, [pc, #20]	; (8001d20 <MX_USART1_UART_Init+0x4c>)
 8001d0c:	f001 ff6a 	bl	8003be4 <HAL_UART_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d16:	f7ff fcf9 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200001b4 	.word	0x200001b4
 8001d24:	40011000 	.word	0x40011000

08001d28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	; 0x28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a28      	ldr	r2, [pc, #160]	; (8001de8 <HAL_UART_MspInit+0xc0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d14a      	bne.n	8001de0 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	4b27      	ldr	r3, [pc, #156]	; (8001dec <HAL_UART_MspInit+0xc4>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	4a26      	ldr	r2, [pc, #152]	; (8001dec <HAL_UART_MspInit+0xc4>)
 8001d54:	f043 0310 	orr.w	r3, r3, #16
 8001d58:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5a:	4b24      	ldr	r3, [pc, #144]	; (8001dec <HAL_UART_MspInit+0xc4>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <HAL_UART_MspInit+0xc4>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a1f      	ldr	r2, [pc, #124]	; (8001dec <HAL_UART_MspInit+0xc4>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <HAL_UART_MspInit+0xc4>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	4b19      	ldr	r3, [pc, #100]	; (8001dec <HAL_UART_MspInit+0xc4>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a18      	ldr	r2, [pc, #96]	; (8001dec <HAL_UART_MspInit+0xc4>)
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b16      	ldr	r3, [pc, #88]	; (8001dec <HAL_UART_MspInit+0xc4>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001db0:	2307      	movs	r3, #7
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	4619      	mov	r1, r3
 8001dba:	480d      	ldr	r0, [pc, #52]	; (8001df0 <HAL_UART_MspInit+0xc8>)
 8001dbc:	f000 fba4 	bl	8002508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dd0:	2307      	movs	r3, #7
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4806      	ldr	r0, [pc, #24]	; (8001df4 <HAL_UART_MspInit+0xcc>)
 8001ddc:	f000 fb94 	bl	8002508 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001de0:	bf00      	nop
 8001de2:	3728      	adds	r7, #40	; 0x28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40011000 	.word	0x40011000
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020000 	.word	0x40020000
 8001df4:	40020400 	.word	0x40020400

08001df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dfc:	480d      	ldr	r0, [pc, #52]	; (8001e34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dfe:	490e      	ldr	r1, [pc, #56]	; (8001e38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e00:	4a0e      	ldr	r2, [pc, #56]	; (8001e3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e04:	e002      	b.n	8001e0c <LoopCopyDataInit>

08001e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0a:	3304      	adds	r3, #4

08001e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e10:	d3f9      	bcc.n	8001e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e12:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e14:	4c0b      	ldr	r4, [pc, #44]	; (8001e44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e18:	e001      	b.n	8001e1e <LoopFillZerobss>

08001e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e1c:	3204      	adds	r2, #4

08001e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e20:	d3fb      	bcc.n	8001e1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e22:	f7ff fda3 	bl	800196c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e26:	f002 fdf1 	bl	8004a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e2a:	f7ff fb93 	bl	8001554 <main>
  bx  lr    
 8001e2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e3c:	08004aa4 	.word	0x08004aa4
  ldr r2, =_sbss
 8001e40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e44:	2000021c 	.word	0x2000021c

08001e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e48:	e7fe      	b.n	8001e48 <ADC_IRQHandler>
	...

08001e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e50:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <HAL_Init+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0d      	ldr	r2, [pc, #52]	; (8001e8c <HAL_Init+0x40>)
 8001e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_Init+0x40>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <HAL_Init+0x40>)
 8001e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_Init+0x40>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <HAL_Init+0x40>)
 8001e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e74:	2003      	movs	r0, #3
 8001e76:	f000 f8d8 	bl	800202a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7a:	200f      	movs	r0, #15
 8001e7c:	f7ff fc7a 	bl	8001774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e80:	f7ff fc4a 	bl	8001718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023c00 	.word	0x40023c00

08001e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_IncTick+0x20>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_IncTick+0x24>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <HAL_IncTick+0x24>)
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000008 	.word	0x20000008
 8001eb4:	200001f8 	.word	0x200001f8

08001eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return uwTick;
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <HAL_GetTick+0x14>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	200001f8 	.word	0x200001f8

08001ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eec:	4013      	ands	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f02:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60d3      	str	r3, [r2, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <__NVIC_GetPriorityGrouping+0x18>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0307 	and.w	r3, r3, #7
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	db0b      	blt.n	8001f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	f003 021f 	and.w	r2, r3, #31
 8001f4c:	4907      	ldr	r1, [pc, #28]	; (8001f6c <__NVIC_EnableIRQ+0x38>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	2001      	movs	r0, #1
 8001f56:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000e100 	.word	0xe000e100

08001f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	6039      	str	r1, [r7, #0]
 8001f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	db0a      	blt.n	8001f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	490c      	ldr	r1, [pc, #48]	; (8001fbc <__NVIC_SetPriority+0x4c>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	0112      	lsls	r2, r2, #4
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	440b      	add	r3, r1
 8001f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f98:	e00a      	b.n	8001fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4908      	ldr	r1, [pc, #32]	; (8001fc0 <__NVIC_SetPriority+0x50>)
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	3b04      	subs	r3, #4
 8001fa8:	0112      	lsls	r2, r2, #4
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	440b      	add	r3, r1
 8001fae:	761a      	strb	r2, [r3, #24]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000e100 	.word	0xe000e100
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	; 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f1c3 0307 	rsb	r3, r3, #7
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	bf28      	it	cs
 8001fe2:	2304      	movcs	r3, #4
 8001fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	2b06      	cmp	r3, #6
 8001fec:	d902      	bls.n	8001ff4 <NVIC_EncodePriority+0x30>
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3b03      	subs	r3, #3
 8001ff2:	e000      	b.n	8001ff6 <NVIC_EncodePriority+0x32>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43da      	mvns	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	401a      	ands	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800200c:	f04f 31ff 	mov.w	r1, #4294967295
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	43d9      	mvns	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	4313      	orrs	r3, r2
         );
}
 800201e:	4618      	mov	r0, r3
 8002020:	3724      	adds	r7, #36	; 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ff4c 	bl	8001ed0 <__NVIC_SetPriorityGrouping>
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002052:	f7ff ff61 	bl	8001f18 <__NVIC_GetPriorityGrouping>
 8002056:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	68b9      	ldr	r1, [r7, #8]
 800205c:	6978      	ldr	r0, [r7, #20]
 800205e:	f7ff ffb1 	bl	8001fc4 <NVIC_EncodePriority>
 8002062:	4602      	mov	r2, r0
 8002064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ff80 	bl	8001f70 <__NVIC_SetPriority>
}
 8002070:	bf00      	nop
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ff54 	bl	8001f34 <__NVIC_EnableIRQ>
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020a2:	f7ff ff09 	bl	8001eb8 <HAL_GetTick>
 80020a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d008      	beq.n	80020c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2280      	movs	r2, #128	; 0x80
 80020b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e052      	b.n	800216c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0216 	bic.w	r2, r2, #22
 80020d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695a      	ldr	r2, [r3, #20]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d103      	bne.n	80020f6 <HAL_DMA_Abort+0x62>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d007      	beq.n	8002106 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0208 	bic.w	r2, r2, #8
 8002104:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0201 	bic.w	r2, r2, #1
 8002114:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002116:	e013      	b.n	8002140 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002118:	f7ff fece 	bl	8001eb8 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b05      	cmp	r3, #5
 8002124:	d90c      	bls.n	8002140 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2220      	movs	r2, #32
 800212a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2203      	movs	r2, #3
 8002130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e015      	b.n	800216c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1e4      	bne.n	8002118 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002152:	223f      	movs	r2, #63	; 0x3f
 8002154:	409a      	lsls	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d004      	beq.n	8002192 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e00c      	b.n	80021ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2205      	movs	r2, #5
 8002196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0201 	bic.w	r2, r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80021c2:	4b4b      	ldr	r3, [pc, #300]	; (80022f0 <HAL_FLASH_IRQHandler+0x138>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d020      	beq.n	8002210 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80021ce:	4b49      	ldr	r3, [pc, #292]	; (80022f4 <HAL_FLASH_IRQHandler+0x13c>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d107      	bne.n	80021e8 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 80021d8:	4b46      	ldr	r3, [pc, #280]	; (80022f4 <HAL_FLASH_IRQHandler+0x13c>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 80021de:	4b45      	ldr	r3, [pc, #276]	; (80022f4 <HAL_FLASH_IRQHandler+0x13c>)
 80021e0:	f04f 32ff 	mov.w	r2, #4294967295
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	e00b      	b.n	8002200 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80021e8:	4b42      	ldr	r3, [pc, #264]	; (80022f4 <HAL_FLASH_IRQHandler+0x13c>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d103      	bne.n	80021fa <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 80021f2:	4b40      	ldr	r3, [pc, #256]	; (80022f4 <HAL_FLASH_IRQHandler+0x13c>)
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	e002      	b.n	8002200 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 80021fa:	4b3e      	ldr	r3, [pc, #248]	; (80022f4 <HAL_FLASH_IRQHandler+0x13c>)
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8002200:	f000 f88e 	bl	8002320 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f881 	bl	800230c <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800220a:	4b3a      	ldr	r3, [pc, #232]	; (80022f4 <HAL_FLASH_IRQHandler+0x13c>)
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002210:	4b37      	ldr	r3, [pc, #220]	; (80022f0 <HAL_FLASH_IRQHandler+0x138>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d04a      	beq.n	80022b2 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800221c:	4b34      	ldr	r3, [pc, #208]	; (80022f0 <HAL_FLASH_IRQHandler+0x138>)
 800221e:	2201      	movs	r2, #1
 8002220:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002222:	4b34      	ldr	r3, [pc, #208]	; (80022f4 <HAL_FLASH_IRQHandler+0x13c>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b01      	cmp	r3, #1
 800222a:	d12d      	bne.n	8002288 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800222c:	4b31      	ldr	r3, [pc, #196]	; (80022f4 <HAL_FLASH_IRQHandler+0x13c>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	3b01      	subs	r3, #1
 8002232:	4a30      	ldr	r2, [pc, #192]	; (80022f4 <HAL_FLASH_IRQHandler+0x13c>)
 8002234:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8002236:	4b2f      	ldr	r3, [pc, #188]	; (80022f4 <HAL_FLASH_IRQHandler+0x13c>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d015      	beq.n	800226a <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 800223e:	4b2d      	ldr	r3, [pc, #180]	; (80022f4 <HAL_FLASH_IRQHandler+0x13c>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f857 	bl	80022f8 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 800224a:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <HAL_FLASH_IRQHandler+0x13c>)
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	3301      	adds	r3, #1
 8002250:	4a28      	ldr	r2, [pc, #160]	; (80022f4 <HAL_FLASH_IRQHandler+0x13c>)
 8002252:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8002254:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <HAL_FLASH_IRQHandler+0x13c>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800225a:	4b26      	ldr	r3, [pc, #152]	; (80022f4 <HAL_FLASH_IRQHandler+0x13c>)
 800225c:	7a1b      	ldrb	r3, [r3, #8]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	4619      	mov	r1, r3
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f8c2 	bl	80023ec <FLASH_Erase_Sector>
 8002268:	e023      	b.n	80022b2 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800226a:	f04f 33ff 	mov.w	r3, #4294967295
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	4a20      	ldr	r2, [pc, #128]	; (80022f4 <HAL_FLASH_IRQHandler+0x13c>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002276:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <HAL_FLASH_IRQHandler+0x13c>)
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800227c:	f000 f8fe 	bl	800247c <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f839 	bl	80022f8 <HAL_FLASH_EndOfOperationCallback>
 8002286:	e014      	b.n	80022b2 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8002288:	4b1a      	ldr	r3, [pc, #104]	; (80022f4 <HAL_FLASH_IRQHandler+0x13c>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d107      	bne.n	80022a2 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8002292:	f000 f8f3 	bl	800247c <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8002296:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <HAL_FLASH_IRQHandler+0x13c>)
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f82c 	bl	80022f8 <HAL_FLASH_EndOfOperationCallback>
 80022a0:	e004      	b.n	80022ac <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80022a2:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <HAL_FLASH_IRQHandler+0x13c>)
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f826 	bl	80022f8 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <HAL_FLASH_IRQHandler+0x13c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80022b2:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <HAL_FLASH_IRQHandler+0x13c>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d114      	bne.n	80022e6 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <HAL_FLASH_IRQHandler+0x138>)
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <HAL_FLASH_IRQHandler+0x138>)
 80022c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022c6:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <HAL_FLASH_IRQHandler+0x138>)
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	4a08      	ldr	r2, [pc, #32]	; (80022f0 <HAL_FLASH_IRQHandler+0x138>)
 80022ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022d2:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_FLASH_IRQHandler+0x138>)
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <HAL_FLASH_IRQHandler+0x138>)
 80022da:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80022de:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <HAL_FLASH_IRQHandler+0x13c>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	761a      	strb	r2, [r3, #24]
  }
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023c00 	.word	0x40023c00
 80022f4:	200001fc 	.word	0x200001fc

080022f8 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002324:	4b2f      	ldr	r3, [pc, #188]	; (80023e4 <FLASH_SetErrorCode+0xc4>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 0310 	and.w	r3, r3, #16
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002330:	4b2d      	ldr	r3, [pc, #180]	; (80023e8 <FLASH_SetErrorCode+0xc8>)
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	f043 0310 	orr.w	r3, r3, #16
 8002338:	4a2b      	ldr	r2, [pc, #172]	; (80023e8 <FLASH_SetErrorCode+0xc8>)
 800233a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800233c:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <FLASH_SetErrorCode+0xc4>)
 800233e:	2210      	movs	r2, #16
 8002340:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002342:	4b28      	ldr	r3, [pc, #160]	; (80023e4 <FLASH_SetErrorCode+0xc4>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	f003 0320 	and.w	r3, r3, #32
 800234a:	2b00      	cmp	r3, #0
 800234c:	d008      	beq.n	8002360 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800234e:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <FLASH_SetErrorCode+0xc8>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f043 0308 	orr.w	r3, r3, #8
 8002356:	4a24      	ldr	r2, [pc, #144]	; (80023e8 <FLASH_SetErrorCode+0xc8>)
 8002358:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800235a:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <FLASH_SetErrorCode+0xc4>)
 800235c:	2220      	movs	r2, #32
 800235e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002360:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <FLASH_SetErrorCode+0xc4>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800236c:	4b1e      	ldr	r3, [pc, #120]	; (80023e8 <FLASH_SetErrorCode+0xc8>)
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	f043 0304 	orr.w	r3, r3, #4
 8002374:	4a1c      	ldr	r2, [pc, #112]	; (80023e8 <FLASH_SetErrorCode+0xc8>)
 8002376:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002378:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <FLASH_SetErrorCode+0xc4>)
 800237a:	2240      	movs	r2, #64	; 0x40
 800237c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800237e:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <FLASH_SetErrorCode+0xc4>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002386:	2b00      	cmp	r3, #0
 8002388:	d008      	beq.n	800239c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800238a:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <FLASH_SetErrorCode+0xc8>)
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	f043 0302 	orr.w	r3, r3, #2
 8002392:	4a15      	ldr	r2, [pc, #84]	; (80023e8 <FLASH_SetErrorCode+0xc8>)
 8002394:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002396:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <FLASH_SetErrorCode+0xc4>)
 8002398:	2280      	movs	r2, #128	; 0x80
 800239a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800239c:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <FLASH_SetErrorCode+0xc4>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d009      	beq.n	80023bc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80023a8:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <FLASH_SetErrorCode+0xc8>)
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	4a0d      	ldr	r2, [pc, #52]	; (80023e8 <FLASH_SetErrorCode+0xc8>)
 80023b2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <FLASH_SetErrorCode+0xc4>)
 80023b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ba:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80023bc:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <FLASH_SetErrorCode+0xc4>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80023c8:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <FLASH_SetErrorCode+0xc8>)
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	f043 0320 	orr.w	r3, r3, #32
 80023d0:	4a05      	ldr	r2, [pc, #20]	; (80023e8 <FLASH_SetErrorCode+0xc8>)
 80023d2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <FLASH_SetErrorCode+0xc4>)
 80023d6:	2202      	movs	r2, #2
 80023d8:	60da      	str	r2, [r3, #12]
  }
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	40023c00 	.word	0x40023c00
 80023e8:	200001fc 	.word	0x200001fc

080023ec <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d102      	bne.n	8002408 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	e010      	b.n	800242a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d103      	bne.n	8002416 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800240e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	e009      	b.n	800242a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d103      	bne.n	8002424 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800241c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	e002      	b.n	800242a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002424:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002428:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800242a:	4b13      	ldr	r3, [pc, #76]	; (8002478 <FLASH_Erase_Sector+0x8c>)
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	4a12      	ldr	r2, [pc, #72]	; (8002478 <FLASH_Erase_Sector+0x8c>)
 8002430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002434:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <FLASH_Erase_Sector+0x8c>)
 8002438:	691a      	ldr	r2, [r3, #16]
 800243a:	490f      	ldr	r1, [pc, #60]	; (8002478 <FLASH_Erase_Sector+0x8c>)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4313      	orrs	r3, r2
 8002440:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002442:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <FLASH_Erase_Sector+0x8c>)
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	4a0c      	ldr	r2, [pc, #48]	; (8002478 <FLASH_Erase_Sector+0x8c>)
 8002448:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800244c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <FLASH_Erase_Sector+0x8c>)
 8002450:	691a      	ldr	r2, [r3, #16]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4313      	orrs	r3, r2
 8002458:	4a07      	ldr	r2, [pc, #28]	; (8002478 <FLASH_Erase_Sector+0x8c>)
 800245a:	f043 0302 	orr.w	r3, r3, #2
 800245e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <FLASH_Erase_Sector+0x8c>)
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	4a04      	ldr	r2, [pc, #16]	; (8002478 <FLASH_Erase_Sector+0x8c>)
 8002466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246a:	6113      	str	r3, [r2, #16]
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40023c00 	.word	0x40023c00

0800247c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002480:	4b20      	ldr	r3, [pc, #128]	; (8002504 <FLASH_FlushCaches+0x88>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002488:	2b00      	cmp	r3, #0
 800248a:	d017      	beq.n	80024bc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800248c:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <FLASH_FlushCaches+0x88>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1c      	ldr	r2, [pc, #112]	; (8002504 <FLASH_FlushCaches+0x88>)
 8002492:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002496:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002498:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <FLASH_FlushCaches+0x88>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a19      	ldr	r2, [pc, #100]	; (8002504 <FLASH_FlushCaches+0x88>)
 800249e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	4b17      	ldr	r3, [pc, #92]	; (8002504 <FLASH_FlushCaches+0x88>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a16      	ldr	r2, [pc, #88]	; (8002504 <FLASH_FlushCaches+0x88>)
 80024aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024ae:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024b0:	4b14      	ldr	r3, [pc, #80]	; (8002504 <FLASH_FlushCaches+0x88>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a13      	ldr	r2, [pc, #76]	; (8002504 <FLASH_FlushCaches+0x88>)
 80024b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ba:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80024bc:	4b11      	ldr	r3, [pc, #68]	; (8002504 <FLASH_FlushCaches+0x88>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d017      	beq.n	80024f8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80024c8:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <FLASH_FlushCaches+0x88>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a0d      	ldr	r2, [pc, #52]	; (8002504 <FLASH_FlushCaches+0x88>)
 80024ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024d2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <FLASH_FlushCaches+0x88>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <FLASH_FlushCaches+0x88>)
 80024da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	4b08      	ldr	r3, [pc, #32]	; (8002504 <FLASH_FlushCaches+0x88>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a07      	ldr	r2, [pc, #28]	; (8002504 <FLASH_FlushCaches+0x88>)
 80024e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024ea:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <FLASH_FlushCaches+0x88>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a04      	ldr	r2, [pc, #16]	; (8002504 <FLASH_FlushCaches+0x88>)
 80024f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024f6:	6013      	str	r3, [r2, #0]
  }
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40023c00 	.word	0x40023c00

08002508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	; 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002516:	2300      	movs	r3, #0
 8002518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	e159      	b.n	80027d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002524:	2201      	movs	r2, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	429a      	cmp	r2, r3
 800253e:	f040 8148 	bne.w	80027d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d005      	beq.n	800255a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002556:	2b02      	cmp	r3, #2
 8002558:	d130      	bne.n	80025bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2203      	movs	r2, #3
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002590:	2201      	movs	r2, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 0201 	and.w	r2, r3, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d017      	beq.n	80025f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d123      	bne.n	800264c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	08da      	lsrs	r2, r3, #3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3208      	adds	r2, #8
 800260c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	220f      	movs	r2, #15
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	08da      	lsrs	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3208      	adds	r2, #8
 8002646:	69b9      	ldr	r1, [r7, #24]
 8002648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0203 	and.w	r2, r3, #3
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80a2 	beq.w	80027d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	4b57      	ldr	r3, [pc, #348]	; (80027f0 <HAL_GPIO_Init+0x2e8>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	4a56      	ldr	r2, [pc, #344]	; (80027f0 <HAL_GPIO_Init+0x2e8>)
 8002698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800269c:	6453      	str	r3, [r2, #68]	; 0x44
 800269e:	4b54      	ldr	r3, [pc, #336]	; (80027f0 <HAL_GPIO_Init+0x2e8>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026aa:	4a52      	ldr	r2, [pc, #328]	; (80027f4 <HAL_GPIO_Init+0x2ec>)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	3302      	adds	r3, #2
 80026b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	220f      	movs	r2, #15
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a49      	ldr	r2, [pc, #292]	; (80027f8 <HAL_GPIO_Init+0x2f0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d019      	beq.n	800270a <HAL_GPIO_Init+0x202>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a48      	ldr	r2, [pc, #288]	; (80027fc <HAL_GPIO_Init+0x2f4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d013      	beq.n	8002706 <HAL_GPIO_Init+0x1fe>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a47      	ldr	r2, [pc, #284]	; (8002800 <HAL_GPIO_Init+0x2f8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d00d      	beq.n	8002702 <HAL_GPIO_Init+0x1fa>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a46      	ldr	r2, [pc, #280]	; (8002804 <HAL_GPIO_Init+0x2fc>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d007      	beq.n	80026fe <HAL_GPIO_Init+0x1f6>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a45      	ldr	r2, [pc, #276]	; (8002808 <HAL_GPIO_Init+0x300>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d101      	bne.n	80026fa <HAL_GPIO_Init+0x1f2>
 80026f6:	2304      	movs	r3, #4
 80026f8:	e008      	b.n	800270c <HAL_GPIO_Init+0x204>
 80026fa:	2307      	movs	r3, #7
 80026fc:	e006      	b.n	800270c <HAL_GPIO_Init+0x204>
 80026fe:	2303      	movs	r3, #3
 8002700:	e004      	b.n	800270c <HAL_GPIO_Init+0x204>
 8002702:	2302      	movs	r3, #2
 8002704:	e002      	b.n	800270c <HAL_GPIO_Init+0x204>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_GPIO_Init+0x204>
 800270a:	2300      	movs	r3, #0
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	f002 0203 	and.w	r2, r2, #3
 8002712:	0092      	lsls	r2, r2, #2
 8002714:	4093      	lsls	r3, r2
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800271c:	4935      	ldr	r1, [pc, #212]	; (80027f4 <HAL_GPIO_Init+0x2ec>)
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	089b      	lsrs	r3, r3, #2
 8002722:	3302      	adds	r3, #2
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800272a:	4b38      	ldr	r3, [pc, #224]	; (800280c <HAL_GPIO_Init+0x304>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800274e:	4a2f      	ldr	r2, [pc, #188]	; (800280c <HAL_GPIO_Init+0x304>)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002754:	4b2d      	ldr	r3, [pc, #180]	; (800280c <HAL_GPIO_Init+0x304>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002778:	4a24      	ldr	r2, [pc, #144]	; (800280c <HAL_GPIO_Init+0x304>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800277e:	4b23      	ldr	r3, [pc, #140]	; (800280c <HAL_GPIO_Init+0x304>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027a2:	4a1a      	ldr	r2, [pc, #104]	; (800280c <HAL_GPIO_Init+0x304>)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a8:	4b18      	ldr	r3, [pc, #96]	; (800280c <HAL_GPIO_Init+0x304>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027cc:	4a0f      	ldr	r2, [pc, #60]	; (800280c <HAL_GPIO_Init+0x304>)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3301      	adds	r3, #1
 80027d6:	61fb      	str	r3, [r7, #28]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	2b0f      	cmp	r3, #15
 80027dc:	f67f aea2 	bls.w	8002524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	3724      	adds	r7, #36	; 0x24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40013800 	.word	0x40013800
 80027f8:	40020000 	.word	0x40020000
 80027fc:	40020400 	.word	0x40020400
 8002800:	40020800 	.word	0x40020800
 8002804:	40020c00 	.word	0x40020c00
 8002808:	40021000 	.word	0x40021000
 800280c:	40013c00 	.word	0x40013c00

08002810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	807b      	strh	r3, [r7, #2]
 800281c:	4613      	mov	r3, r2
 800281e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002820:	787b      	ldrb	r3, [r7, #1]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002826:	887a      	ldrh	r2, [r7, #2]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800282c:	e003      	b.n	8002836 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800282e:	887b      	ldrh	r3, [r7, #2]
 8002830:	041a      	lsls	r2, r3, #16
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	619a      	str	r2, [r3, #24]
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800284e:	4b08      	ldr	r3, [pc, #32]	; (8002870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	4013      	ands	r3, r2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d006      	beq.n	8002868 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800285a:	4a05      	ldr	r2, [pc, #20]	; (8002870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	4618      	mov	r0, r3
 8002864:	f000 f806 	bl	8002874 <HAL_GPIO_EXTI_Callback>
  }
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40013c00 	.word	0x40013c00

08002874 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_PWR_PVD_IRQHandler+0x20>)
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800289c:	f000 f808 	bl	80028b0 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80028a0:	4b02      	ldr	r3, [pc, #8]	; (80028ac <HAL_PWR_PVD_IRQHandler+0x20>)
 80028a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028a6:	615a      	str	r2, [r3, #20]
  }
}
 80028a8:	bf00      	nop
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40013c00 	.word	0x40013c00

080028b0 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e267      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d075      	beq.n	80029ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028de:	4b88      	ldr	r3, [pc, #544]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d00c      	beq.n	8002904 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ea:	4b85      	ldr	r3, [pc, #532]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d112      	bne.n	800291c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028f6:	4b82      	ldr	r3, [pc, #520]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002902:	d10b      	bne.n	800291c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002904:	4b7e      	ldr	r3, [pc, #504]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d05b      	beq.n	80029c8 <HAL_RCC_OscConfig+0x108>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d157      	bne.n	80029c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e242      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002924:	d106      	bne.n	8002934 <HAL_RCC_OscConfig+0x74>
 8002926:	4b76      	ldr	r3, [pc, #472]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a75      	ldr	r2, [pc, #468]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 800292c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	e01d      	b.n	8002970 <HAL_RCC_OscConfig+0xb0>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800293c:	d10c      	bne.n	8002958 <HAL_RCC_OscConfig+0x98>
 800293e:	4b70      	ldr	r3, [pc, #448]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a6f      	ldr	r2, [pc, #444]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	4b6d      	ldr	r3, [pc, #436]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a6c      	ldr	r2, [pc, #432]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	e00b      	b.n	8002970 <HAL_RCC_OscConfig+0xb0>
 8002958:	4b69      	ldr	r3, [pc, #420]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a68      	ldr	r2, [pc, #416]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 800295e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	4b66      	ldr	r3, [pc, #408]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a65      	ldr	r2, [pc, #404]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 800296a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d013      	beq.n	80029a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7ff fa9e 	bl	8001eb8 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002980:	f7ff fa9a 	bl	8001eb8 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	; 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e207      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002992:	4b5b      	ldr	r3, [pc, #364]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0xc0>
 800299e:	e014      	b.n	80029ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7ff fa8a 	bl	8001eb8 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a8:	f7ff fa86 	bl	8001eb8 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b64      	cmp	r3, #100	; 0x64
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e1f3      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ba:	4b51      	ldr	r3, [pc, #324]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0xe8>
 80029c6:	e000      	b.n	80029ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d063      	beq.n	8002a9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029d6:	4b4a      	ldr	r3, [pc, #296]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00b      	beq.n	80029fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029e2:	4b47      	ldr	r3, [pc, #284]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d11c      	bne.n	8002a28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ee:	4b44      	ldr	r3, [pc, #272]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d116      	bne.n	8002a28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fa:	4b41      	ldr	r3, [pc, #260]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d005      	beq.n	8002a12 <HAL_RCC_OscConfig+0x152>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d001      	beq.n	8002a12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e1c7      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a12:	4b3b      	ldr	r3, [pc, #236]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	4937      	ldr	r1, [pc, #220]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a26:	e03a      	b.n	8002a9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d020      	beq.n	8002a72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a30:	4b34      	ldr	r3, [pc, #208]	; (8002b04 <HAL_RCC_OscConfig+0x244>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a36:	f7ff fa3f 	bl	8001eb8 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a3e:	f7ff fa3b 	bl	8001eb8 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e1a8      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a50:	4b2b      	ldr	r3, [pc, #172]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0f0      	beq.n	8002a3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5c:	4b28      	ldr	r3, [pc, #160]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4925      	ldr	r1, [pc, #148]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	600b      	str	r3, [r1, #0]
 8002a70:	e015      	b.n	8002a9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a72:	4b24      	ldr	r3, [pc, #144]	; (8002b04 <HAL_RCC_OscConfig+0x244>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7ff fa1e 	bl	8001eb8 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a80:	f7ff fa1a 	bl	8001eb8 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e187      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a92:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d036      	beq.n	8002b18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d016      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab2:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <HAL_RCC_OscConfig+0x248>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab8:	f7ff f9fe 	bl	8001eb8 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac0:	f7ff f9fa 	bl	8001eb8 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e167      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x200>
 8002ade:	e01b      	b.n	8002b18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae0:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <HAL_RCC_OscConfig+0x248>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae6:	f7ff f9e7 	bl	8001eb8 <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aec:	e00e      	b.n	8002b0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aee:	f7ff f9e3 	bl	8001eb8 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d907      	bls.n	8002b0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e150      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
 8002b00:	40023800 	.word	0x40023800
 8002b04:	42470000 	.word	0x42470000
 8002b08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b0c:	4b88      	ldr	r3, [pc, #544]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1ea      	bne.n	8002aee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 8097 	beq.w	8002c54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b26:	2300      	movs	r3, #0
 8002b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b2a:	4b81      	ldr	r3, [pc, #516]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10f      	bne.n	8002b56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	4b7d      	ldr	r3, [pc, #500]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	4a7c      	ldr	r2, [pc, #496]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b44:	6413      	str	r3, [r2, #64]	; 0x40
 8002b46:	4b7a      	ldr	r3, [pc, #488]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b52:	2301      	movs	r3, #1
 8002b54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b56:	4b77      	ldr	r3, [pc, #476]	; (8002d34 <HAL_RCC_OscConfig+0x474>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d118      	bne.n	8002b94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b62:	4b74      	ldr	r3, [pc, #464]	; (8002d34 <HAL_RCC_OscConfig+0x474>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a73      	ldr	r2, [pc, #460]	; (8002d34 <HAL_RCC_OscConfig+0x474>)
 8002b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b6e:	f7ff f9a3 	bl	8001eb8 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b76:	f7ff f99f 	bl	8001eb8 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e10c      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b88:	4b6a      	ldr	r3, [pc, #424]	; (8002d34 <HAL_RCC_OscConfig+0x474>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d106      	bne.n	8002baa <HAL_RCC_OscConfig+0x2ea>
 8002b9c:	4b64      	ldr	r3, [pc, #400]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	4a63      	ldr	r2, [pc, #396]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba8:	e01c      	b.n	8002be4 <HAL_RCC_OscConfig+0x324>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b05      	cmp	r3, #5
 8002bb0:	d10c      	bne.n	8002bcc <HAL_RCC_OscConfig+0x30c>
 8002bb2:	4b5f      	ldr	r3, [pc, #380]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb6:	4a5e      	ldr	r2, [pc, #376]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	f043 0304 	orr.w	r3, r3, #4
 8002bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bbe:	4b5c      	ldr	r3, [pc, #368]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc2:	4a5b      	ldr	r2, [pc, #364]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bca:	e00b      	b.n	8002be4 <HAL_RCC_OscConfig+0x324>
 8002bcc:	4b58      	ldr	r3, [pc, #352]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd0:	4a57      	ldr	r2, [pc, #348]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002bd2:	f023 0301 	bic.w	r3, r3, #1
 8002bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd8:	4b55      	ldr	r3, [pc, #340]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bdc:	4a54      	ldr	r2, [pc, #336]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002bde:	f023 0304 	bic.w	r3, r3, #4
 8002be2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d015      	beq.n	8002c18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bec:	f7ff f964 	bl	8001eb8 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf2:	e00a      	b.n	8002c0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf4:	f7ff f960 	bl	8001eb8 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e0cb      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0a:	4b49      	ldr	r3, [pc, #292]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0ee      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x334>
 8002c16:	e014      	b.n	8002c42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c18:	f7ff f94e 	bl	8001eb8 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c1e:	e00a      	b.n	8002c36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c20:	f7ff f94a 	bl	8001eb8 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e0b5      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c36:	4b3e      	ldr	r3, [pc, #248]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1ee      	bne.n	8002c20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c42:	7dfb      	ldrb	r3, [r7, #23]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d105      	bne.n	8002c54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c48:	4b39      	ldr	r3, [pc, #228]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	4a38      	ldr	r2, [pc, #224]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80a1 	beq.w	8002da0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c5e:	4b34      	ldr	r3, [pc, #208]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d05c      	beq.n	8002d24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d141      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c72:	4b31      	ldr	r3, [pc, #196]	; (8002d38 <HAL_RCC_OscConfig+0x478>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7ff f91e 	bl	8001eb8 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c80:	f7ff f91a 	bl	8001eb8 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e087      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c92:	4b27      	ldr	r3, [pc, #156]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69da      	ldr	r2, [r3, #28]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	019b      	lsls	r3, r3, #6
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	085b      	lsrs	r3, r3, #1
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	041b      	lsls	r3, r3, #16
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	061b      	lsls	r3, r3, #24
 8002cc2:	491b      	ldr	r1, [pc, #108]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc8:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <HAL_RCC_OscConfig+0x478>)
 8002cca:	2201      	movs	r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cce:	f7ff f8f3 	bl	8001eb8 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd6:	f7ff f8ef 	bl	8001eb8 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e05c      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce8:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x416>
 8002cf4:	e054      	b.n	8002da0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf6:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <HAL_RCC_OscConfig+0x478>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7ff f8dc 	bl	8001eb8 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d04:	f7ff f8d8 	bl	8001eb8 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e045      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <HAL_RCC_OscConfig+0x470>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x444>
 8002d22:	e03d      	b.n	8002da0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d107      	bne.n	8002d3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e038      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40007000 	.word	0x40007000
 8002d38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d3c:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <HAL_RCC_OscConfig+0x4ec>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d028      	beq.n	8002d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d121      	bne.n	8002d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d11a      	bne.n	8002d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d111      	bne.n	8002d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d82:	085b      	lsrs	r3, r3, #1
 8002d84:	3b01      	subs	r3, #1
 8002d86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d107      	bne.n	8002d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e000      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40023800 	.word	0x40023800

08002db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0cc      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc4:	4b68      	ldr	r3, [pc, #416]	; (8002f68 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d90c      	bls.n	8002dec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd2:	4b65      	ldr	r3, [pc, #404]	; (8002f68 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dda:	4b63      	ldr	r3, [pc, #396]	; (8002f68 <HAL_RCC_ClockConfig+0x1b8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0b8      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d020      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e04:	4b59      	ldr	r3, [pc, #356]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	4a58      	ldr	r2, [pc, #352]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e1c:	4b53      	ldr	r3, [pc, #332]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	4a52      	ldr	r2, [pc, #328]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e28:	4b50      	ldr	r3, [pc, #320]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	494d      	ldr	r1, [pc, #308]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d044      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d107      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4e:	4b47      	ldr	r3, [pc, #284]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d119      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e07f      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d003      	beq.n	8002e6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d107      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6e:	4b3f      	ldr	r3, [pc, #252]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d109      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e06f      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7e:	4b3b      	ldr	r3, [pc, #236]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e067      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e8e:	4b37      	ldr	r3, [pc, #220]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f023 0203 	bic.w	r2, r3, #3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	4934      	ldr	r1, [pc, #208]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ea0:	f7ff f80a 	bl	8001eb8 <HAL_GetTick>
 8002ea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea6:	e00a      	b.n	8002ebe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea8:	f7ff f806 	bl	8001eb8 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e04f      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebe:	4b2b      	ldr	r3, [pc, #172]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 020c 	and.w	r2, r3, #12
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d1eb      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed0:	4b25      	ldr	r3, [pc, #148]	; (8002f68 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d20c      	bcs.n	8002ef8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ede:	4b22      	ldr	r3, [pc, #136]	; (8002f68 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee6:	4b20      	ldr	r3, [pc, #128]	; (8002f68 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e032      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d008      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f04:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4916      	ldr	r1, [pc, #88]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d009      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f22:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	490e      	ldr	r1, [pc, #56]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f36:	f000 f821 	bl	8002f7c <HAL_RCC_GetSysClockFreq>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	091b      	lsrs	r3, r3, #4
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	490a      	ldr	r1, [pc, #40]	; (8002f70 <HAL_RCC_ClockConfig+0x1c0>)
 8002f48:	5ccb      	ldrb	r3, [r1, r3]
 8002f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4e:	4a09      	ldr	r2, [pc, #36]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f52:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <HAL_RCC_ClockConfig+0x1c8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fe fc0c 	bl	8001774 <HAL_InitTick>

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40023c00 	.word	0x40023c00
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	08004a7c 	.word	0x08004a7c
 8002f74:	20000000 	.word	0x20000000
 8002f78:	20000004 	.word	0x20000004

08002f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f80:	b094      	sub	sp, #80	; 0x50
 8002f82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	647b      	str	r3, [r7, #68]	; 0x44
 8002f88:	2300      	movs	r3, #0
 8002f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f94:	4b79      	ldr	r3, [pc, #484]	; (800317c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 030c 	and.w	r3, r3, #12
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d00d      	beq.n	8002fbc <HAL_RCC_GetSysClockFreq+0x40>
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	f200 80e1 	bhi.w	8003168 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x34>
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d003      	beq.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fae:	e0db      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fb0:	4b73      	ldr	r3, [pc, #460]	; (8003180 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fb2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002fb4:	e0db      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fb6:	4b73      	ldr	r3, [pc, #460]	; (8003184 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fba:	e0d8      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fbc:	4b6f      	ldr	r3, [pc, #444]	; (800317c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fc4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fc6:	4b6d      	ldr	r3, [pc, #436]	; (800317c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d063      	beq.n	800309a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fd2:	4b6a      	ldr	r3, [pc, #424]	; (800317c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	099b      	lsrs	r3, r3, #6
 8002fd8:	2200      	movs	r2, #0
 8002fda:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fdc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe4:	633b      	str	r3, [r7, #48]	; 0x30
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8002fea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fee:	4622      	mov	r2, r4
 8002ff0:	462b      	mov	r3, r5
 8002ff2:	f04f 0000 	mov.w	r0, #0
 8002ff6:	f04f 0100 	mov.w	r1, #0
 8002ffa:	0159      	lsls	r1, r3, #5
 8002ffc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003000:	0150      	lsls	r0, r2, #5
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4621      	mov	r1, r4
 8003008:	1a51      	subs	r1, r2, r1
 800300a:	6139      	str	r1, [r7, #16]
 800300c:	4629      	mov	r1, r5
 800300e:	eb63 0301 	sbc.w	r3, r3, r1
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003020:	4659      	mov	r1, fp
 8003022:	018b      	lsls	r3, r1, #6
 8003024:	4651      	mov	r1, sl
 8003026:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800302a:	4651      	mov	r1, sl
 800302c:	018a      	lsls	r2, r1, #6
 800302e:	4651      	mov	r1, sl
 8003030:	ebb2 0801 	subs.w	r8, r2, r1
 8003034:	4659      	mov	r1, fp
 8003036:	eb63 0901 	sbc.w	r9, r3, r1
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003046:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800304a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800304e:	4690      	mov	r8, r2
 8003050:	4699      	mov	r9, r3
 8003052:	4623      	mov	r3, r4
 8003054:	eb18 0303 	adds.w	r3, r8, r3
 8003058:	60bb      	str	r3, [r7, #8]
 800305a:	462b      	mov	r3, r5
 800305c:	eb49 0303 	adc.w	r3, r9, r3
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800306e:	4629      	mov	r1, r5
 8003070:	024b      	lsls	r3, r1, #9
 8003072:	4621      	mov	r1, r4
 8003074:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003078:	4621      	mov	r1, r4
 800307a:	024a      	lsls	r2, r1, #9
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003082:	2200      	movs	r2, #0
 8003084:	62bb      	str	r3, [r7, #40]	; 0x28
 8003086:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003088:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800308c:	f7fd f8a4 	bl	80001d8 <__aeabi_uldivmod>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4613      	mov	r3, r2
 8003096:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003098:	e058      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800309a:	4b38      	ldr	r3, [pc, #224]	; (800317c <HAL_RCC_GetSysClockFreq+0x200>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	099b      	lsrs	r3, r3, #6
 80030a0:	2200      	movs	r2, #0
 80030a2:	4618      	mov	r0, r3
 80030a4:	4611      	mov	r1, r2
 80030a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030aa:	623b      	str	r3, [r7, #32]
 80030ac:	2300      	movs	r3, #0
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
 80030b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030b4:	4642      	mov	r2, r8
 80030b6:	464b      	mov	r3, r9
 80030b8:	f04f 0000 	mov.w	r0, #0
 80030bc:	f04f 0100 	mov.w	r1, #0
 80030c0:	0159      	lsls	r1, r3, #5
 80030c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030c6:	0150      	lsls	r0, r2, #5
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4641      	mov	r1, r8
 80030ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80030d2:	4649      	mov	r1, r9
 80030d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030ec:	ebb2 040a 	subs.w	r4, r2, sl
 80030f0:	eb63 050b 	sbc.w	r5, r3, fp
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	00eb      	lsls	r3, r5, #3
 80030fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003102:	00e2      	lsls	r2, r4, #3
 8003104:	4614      	mov	r4, r2
 8003106:	461d      	mov	r5, r3
 8003108:	4643      	mov	r3, r8
 800310a:	18e3      	adds	r3, r4, r3
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	464b      	mov	r3, r9
 8003110:	eb45 0303 	adc.w	r3, r5, r3
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003122:	4629      	mov	r1, r5
 8003124:	028b      	lsls	r3, r1, #10
 8003126:	4621      	mov	r1, r4
 8003128:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800312c:	4621      	mov	r1, r4
 800312e:	028a      	lsls	r2, r1, #10
 8003130:	4610      	mov	r0, r2
 8003132:	4619      	mov	r1, r3
 8003134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003136:	2200      	movs	r2, #0
 8003138:	61bb      	str	r3, [r7, #24]
 800313a:	61fa      	str	r2, [r7, #28]
 800313c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003140:	f7fd f84a 	bl	80001d8 <__aeabi_uldivmod>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4613      	mov	r3, r2
 800314a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800314c:	4b0b      	ldr	r3, [pc, #44]	; (800317c <HAL_RCC_GetSysClockFreq+0x200>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	0c1b      	lsrs	r3, r3, #16
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	3301      	adds	r3, #1
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800315c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800315e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003160:	fbb2 f3f3 	udiv	r3, r2, r3
 8003164:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003166:	e002      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003168:	4b05      	ldr	r3, [pc, #20]	; (8003180 <HAL_RCC_GetSysClockFreq+0x204>)
 800316a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800316c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800316e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003170:	4618      	mov	r0, r3
 8003172:	3750      	adds	r7, #80	; 0x50
 8003174:	46bd      	mov	sp, r7
 8003176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800317a:	bf00      	nop
 800317c:	40023800 	.word	0x40023800
 8003180:	00f42400 	.word	0x00f42400
 8003184:	007a1200 	.word	0x007a1200

08003188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <HAL_RCC_GetHCLKFreq+0x14>)
 800318e:	681b      	ldr	r3, [r3, #0]
}
 8003190:	4618      	mov	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	20000000 	.word	0x20000000

080031a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031a4:	f7ff fff0 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 80031a8:	4602      	mov	r2, r0
 80031aa:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	0a9b      	lsrs	r3, r3, #10
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	4903      	ldr	r1, [pc, #12]	; (80031c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b6:	5ccb      	ldrb	r3, [r1, r3]
 80031b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40023800 	.word	0x40023800
 80031c4:	08004a8c 	.word	0x08004a8c

080031c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031cc:	f7ff ffdc 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 80031d0:	4602      	mov	r2, r0
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	0b5b      	lsrs	r3, r3, #13
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	4903      	ldr	r1, [pc, #12]	; (80031ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80031de:	5ccb      	ldrb	r3, [r1, r3]
 80031e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40023800 	.word	0x40023800
 80031ec:	08004a8c 	.word	0x08004a8c

080031f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	220f      	movs	r2, #15
 80031fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003200:	4b12      	ldr	r3, [pc, #72]	; (800324c <HAL_RCC_GetClockConfig+0x5c>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 0203 	and.w	r2, r3, #3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800320c:	4b0f      	ldr	r3, [pc, #60]	; (800324c <HAL_RCC_GetClockConfig+0x5c>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003218:	4b0c      	ldr	r3, [pc, #48]	; (800324c <HAL_RCC_GetClockConfig+0x5c>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003224:	4b09      	ldr	r3, [pc, #36]	; (800324c <HAL_RCC_GetClockConfig+0x5c>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	08db      	lsrs	r3, r3, #3
 800322a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003232:	4b07      	ldr	r3, [pc, #28]	; (8003250 <HAL_RCC_GetClockConfig+0x60>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0207 	and.w	r2, r3, #7
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	601a      	str	r2, [r3, #0]
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800
 8003250:	40023c00 	.word	0x40023c00

08003254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e041      	b.n	80032ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d106      	bne.n	8003280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fe fcc2 	bl	8001c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3304      	adds	r3, #4
 8003290:	4619      	mov	r1, r3
 8003292:	4610      	mov	r0, r2
 8003294:	f000 fb0a 	bl	80038ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b01      	cmp	r3, #1
 8003306:	d001      	beq.n	800330c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e03c      	b.n	8003386 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1e      	ldr	r2, [pc, #120]	; (8003394 <HAL_TIM_Base_Start+0xa0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d018      	beq.n	8003350 <HAL_TIM_Base_Start+0x5c>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003326:	d013      	beq.n	8003350 <HAL_TIM_Base_Start+0x5c>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1a      	ldr	r2, [pc, #104]	; (8003398 <HAL_TIM_Base_Start+0xa4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00e      	beq.n	8003350 <HAL_TIM_Base_Start+0x5c>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a19      	ldr	r2, [pc, #100]	; (800339c <HAL_TIM_Base_Start+0xa8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d009      	beq.n	8003350 <HAL_TIM_Base_Start+0x5c>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a17      	ldr	r2, [pc, #92]	; (80033a0 <HAL_TIM_Base_Start+0xac>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d004      	beq.n	8003350 <HAL_TIM_Base_Start+0x5c>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a16      	ldr	r2, [pc, #88]	; (80033a4 <HAL_TIM_Base_Start+0xb0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d111      	bne.n	8003374 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b06      	cmp	r3, #6
 8003360:	d010      	beq.n	8003384 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0201 	orr.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003372:	e007      	b.n	8003384 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	40010000 	.word	0x40010000
 8003398:	40000400 	.word	0x40000400
 800339c:	40000800 	.word	0x40000800
 80033a0:	40000c00 	.word	0x40000c00
 80033a4:	40014000 	.word	0x40014000

080033a8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6a1a      	ldr	r2, [r3, #32]
 80033b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10f      	bne.n	80033e0 <HAL_TIM_Base_Stop+0x38>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6a1a      	ldr	r2, [r3, #32]
 80033c6:	f240 4344 	movw	r3, #1092	; 0x444
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d107      	bne.n	80033e0 <HAL_TIM_Base_Stop+0x38>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0201 	bic.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
	...

080033f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	d001      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e044      	b.n	800349a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1e      	ldr	r2, [pc, #120]	; (80034a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d018      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x6c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343a:	d013      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x6c>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1a      	ldr	r2, [pc, #104]	; (80034ac <HAL_TIM_Base_Start_IT+0xb4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00e      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x6c>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a19      	ldr	r2, [pc, #100]	; (80034b0 <HAL_TIM_Base_Start_IT+0xb8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d009      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x6c>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a17      	ldr	r2, [pc, #92]	; (80034b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d004      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x6c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a16      	ldr	r2, [pc, #88]	; (80034b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d111      	bne.n	8003488 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b06      	cmp	r3, #6
 8003474:	d010      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003486:	e007      	b.n	8003498 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40010000 	.word	0x40010000
 80034ac:	40000400 	.word	0x40000400
 80034b0:	40000800 	.word	0x40000800
 80034b4:	40000c00 	.word	0x40000c00
 80034b8:	40014000 	.word	0x40014000

080034bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d122      	bne.n	8003518 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d11b      	bne.n	8003518 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0202 	mvn.w	r2, #2
 80034e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f9b5 	bl	800386e <HAL_TIM_IC_CaptureCallback>
 8003504:	e005      	b.n	8003512 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f9a7 	bl	800385a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f9b8 	bl	8003882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b04      	cmp	r3, #4
 8003524:	d122      	bne.n	800356c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b04      	cmp	r3, #4
 8003532:	d11b      	bne.n	800356c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0204 	mvn.w	r2, #4
 800353c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2202      	movs	r2, #2
 8003542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f98b 	bl	800386e <HAL_TIM_IC_CaptureCallback>
 8003558:	e005      	b.n	8003566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f97d 	bl	800385a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f98e 	bl	8003882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b08      	cmp	r3, #8
 8003578:	d122      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b08      	cmp	r3, #8
 8003586:	d11b      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0208 	mvn.w	r2, #8
 8003590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2204      	movs	r2, #4
 8003596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f961 	bl	800386e <HAL_TIM_IC_CaptureCallback>
 80035ac:	e005      	b.n	80035ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f953 	bl	800385a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f964 	bl	8003882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	2b10      	cmp	r3, #16
 80035cc:	d122      	bne.n	8003614 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	2b10      	cmp	r3, #16
 80035da:	d11b      	bne.n	8003614 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0210 	mvn.w	r2, #16
 80035e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2208      	movs	r2, #8
 80035ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f937 	bl	800386e <HAL_TIM_IC_CaptureCallback>
 8003600:	e005      	b.n	800360e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f929 	bl	800385a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f93a 	bl	8003882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b01      	cmp	r3, #1
 8003620:	d10e      	bne.n	8003640 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b01      	cmp	r3, #1
 800362e:	d107      	bne.n	8003640 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0201 	mvn.w	r2, #1
 8003638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fe f854 	bl	80016e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364a:	2b80      	cmp	r3, #128	; 0x80
 800364c:	d10e      	bne.n	800366c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003658:	2b80      	cmp	r3, #128	; 0x80
 800365a:	d107      	bne.n	800366c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fab2 	bl	8003bd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003676:	2b40      	cmp	r3, #64	; 0x40
 8003678:	d10e      	bne.n	8003698 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003684:	2b40      	cmp	r3, #64	; 0x40
 8003686:	d107      	bne.n	8003698 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f8ff 	bl	8003896 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d10e      	bne.n	80036c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d107      	bne.n	80036c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0220 	mvn.w	r2, #32
 80036bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fa7c 	bl	8003bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036c4:	bf00      	nop
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_TIM_ConfigClockSource+0x1c>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e0b4      	b.n	8003852 <HAL_TIM_ConfigClockSource+0x186>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800370e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003720:	d03e      	beq.n	80037a0 <HAL_TIM_ConfigClockSource+0xd4>
 8003722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003726:	f200 8087 	bhi.w	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 800372a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800372e:	f000 8086 	beq.w	800383e <HAL_TIM_ConfigClockSource+0x172>
 8003732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003736:	d87f      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003738:	2b70      	cmp	r3, #112	; 0x70
 800373a:	d01a      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0xa6>
 800373c:	2b70      	cmp	r3, #112	; 0x70
 800373e:	d87b      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003740:	2b60      	cmp	r3, #96	; 0x60
 8003742:	d050      	beq.n	80037e6 <HAL_TIM_ConfigClockSource+0x11a>
 8003744:	2b60      	cmp	r3, #96	; 0x60
 8003746:	d877      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003748:	2b50      	cmp	r3, #80	; 0x50
 800374a:	d03c      	beq.n	80037c6 <HAL_TIM_ConfigClockSource+0xfa>
 800374c:	2b50      	cmp	r3, #80	; 0x50
 800374e:	d873      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003750:	2b40      	cmp	r3, #64	; 0x40
 8003752:	d058      	beq.n	8003806 <HAL_TIM_ConfigClockSource+0x13a>
 8003754:	2b40      	cmp	r3, #64	; 0x40
 8003756:	d86f      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003758:	2b30      	cmp	r3, #48	; 0x30
 800375a:	d064      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x15a>
 800375c:	2b30      	cmp	r3, #48	; 0x30
 800375e:	d86b      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003760:	2b20      	cmp	r3, #32
 8003762:	d060      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x15a>
 8003764:	2b20      	cmp	r3, #32
 8003766:	d867      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003768:	2b00      	cmp	r3, #0
 800376a:	d05c      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x15a>
 800376c:	2b10      	cmp	r3, #16
 800376e:	d05a      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x15a>
 8003770:	e062      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	6899      	ldr	r1, [r3, #8]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f000 f98d 	bl	8003aa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003794:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	609a      	str	r2, [r3, #8]
      break;
 800379e:	e04f      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	6899      	ldr	r1, [r3, #8]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f000 f976 	bl	8003aa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037c2:	609a      	str	r2, [r3, #8]
      break;
 80037c4:	e03c      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	6859      	ldr	r1, [r3, #4]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	461a      	mov	r2, r3
 80037d4:	f000 f8ea 	bl	80039ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2150      	movs	r1, #80	; 0x50
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 f943 	bl	8003a6a <TIM_ITRx_SetConfig>
      break;
 80037e4:	e02c      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	6859      	ldr	r1, [r3, #4]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	461a      	mov	r2, r3
 80037f4:	f000 f909 	bl	8003a0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2160      	movs	r1, #96	; 0x60
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f933 	bl	8003a6a <TIM_ITRx_SetConfig>
      break;
 8003804:	e01c      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6818      	ldr	r0, [r3, #0]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	6859      	ldr	r1, [r3, #4]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	461a      	mov	r2, r3
 8003814:	f000 f8ca 	bl	80039ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2140      	movs	r1, #64	; 0x40
 800381e:	4618      	mov	r0, r3
 8003820:	f000 f923 	bl	8003a6a <TIM_ITRx_SetConfig>
      break;
 8003824:	e00c      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4619      	mov	r1, r3
 8003830:	4610      	mov	r0, r2
 8003832:	f000 f91a 	bl	8003a6a <TIM_ITRx_SetConfig>
      break;
 8003836:	e003      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
      break;
 800383c:	e000      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800383e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003850:	7bfb      	ldrb	r3, [r7, #15]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
	...

080038ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a34      	ldr	r2, [pc, #208]	; (8003990 <TIM_Base_SetConfig+0xe4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00f      	beq.n	80038e4 <TIM_Base_SetConfig+0x38>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ca:	d00b      	beq.n	80038e4 <TIM_Base_SetConfig+0x38>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a31      	ldr	r2, [pc, #196]	; (8003994 <TIM_Base_SetConfig+0xe8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d007      	beq.n	80038e4 <TIM_Base_SetConfig+0x38>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a30      	ldr	r2, [pc, #192]	; (8003998 <TIM_Base_SetConfig+0xec>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d003      	beq.n	80038e4 <TIM_Base_SetConfig+0x38>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a2f      	ldr	r2, [pc, #188]	; (800399c <TIM_Base_SetConfig+0xf0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d108      	bne.n	80038f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a25      	ldr	r2, [pc, #148]	; (8003990 <TIM_Base_SetConfig+0xe4>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d01b      	beq.n	8003936 <TIM_Base_SetConfig+0x8a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003904:	d017      	beq.n	8003936 <TIM_Base_SetConfig+0x8a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a22      	ldr	r2, [pc, #136]	; (8003994 <TIM_Base_SetConfig+0xe8>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d013      	beq.n	8003936 <TIM_Base_SetConfig+0x8a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a21      	ldr	r2, [pc, #132]	; (8003998 <TIM_Base_SetConfig+0xec>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00f      	beq.n	8003936 <TIM_Base_SetConfig+0x8a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a20      	ldr	r2, [pc, #128]	; (800399c <TIM_Base_SetConfig+0xf0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d00b      	beq.n	8003936 <TIM_Base_SetConfig+0x8a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a1f      	ldr	r2, [pc, #124]	; (80039a0 <TIM_Base_SetConfig+0xf4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d007      	beq.n	8003936 <TIM_Base_SetConfig+0x8a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a1e      	ldr	r2, [pc, #120]	; (80039a4 <TIM_Base_SetConfig+0xf8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d003      	beq.n	8003936 <TIM_Base_SetConfig+0x8a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a1d      	ldr	r2, [pc, #116]	; (80039a8 <TIM_Base_SetConfig+0xfc>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d108      	bne.n	8003948 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800393c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4313      	orrs	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a08      	ldr	r2, [pc, #32]	; (8003990 <TIM_Base_SetConfig+0xe4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d103      	bne.n	800397c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	691a      	ldr	r2, [r3, #16]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	615a      	str	r2, [r3, #20]
}
 8003982:	bf00      	nop
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	40010000 	.word	0x40010000
 8003994:	40000400 	.word	0x40000400
 8003998:	40000800 	.word	0x40000800
 800399c:	40000c00 	.word	0x40000c00
 80039a0:	40014000 	.word	0x40014000
 80039a4:	40014400 	.word	0x40014400
 80039a8:	40014800 	.word	0x40014800

080039ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	f023 0201 	bic.w	r2, r3, #1
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f023 030a 	bic.w	r3, r3, #10
 80039e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	621a      	str	r2, [r3, #32]
}
 80039fe:	bf00      	nop
 8003a00:	371c      	adds	r7, #28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b087      	sub	sp, #28
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	f023 0210 	bic.w	r2, r3, #16
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	031b      	lsls	r3, r3, #12
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	621a      	str	r2, [r3, #32]
}
 8003a5e:	bf00      	nop
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b085      	sub	sp, #20
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f043 0307 	orr.w	r3, r3, #7
 8003a8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	609a      	str	r2, [r3, #8]
}
 8003a94:	bf00      	nop
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	021a      	lsls	r2, r3, #8
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	609a      	str	r2, [r3, #8]
}
 8003ad4:	bf00      	nop
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e050      	b.n	8003b9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1c      	ldr	r2, [pc, #112]	; (8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d018      	beq.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b44:	d013      	beq.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a18      	ldr	r2, [pc, #96]	; (8003bac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00e      	beq.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a16      	ldr	r2, [pc, #88]	; (8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d009      	beq.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a15      	ldr	r2, [pc, #84]	; (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d004      	beq.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a13      	ldr	r2, [pc, #76]	; (8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d10c      	bne.n	8003b88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40010000 	.word	0x40010000
 8003bac:	40000400 	.word	0x40000400
 8003bb0:	40000800 	.word	0x40000800
 8003bb4:	40000c00 	.word	0x40000c00
 8003bb8:	40014000 	.word	0x40014000

08003bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e03f      	b.n	8003c76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fe f88c 	bl	8001d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2224      	movs	r2, #36	; 0x24
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 fc7b 	bl	8004524 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	691a      	ldr	r2, [r3, #16]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695a      	ldr	r2, [r3, #20]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b0ba      	sub	sp, #232	; 0xe8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003cbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10f      	bne.n	8003ce6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cca:	f003 0320 	and.w	r3, r3, #32
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d009      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x66>
 8003cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fb65 	bl	80043ae <UART_Receive_IT>
      return;
 8003ce4:	e256      	b.n	8004194 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ce6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 80de 	beq.w	8003eac <HAL_UART_IRQHandler+0x22c>
 8003cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d106      	bne.n	8003d0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d00:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 80d1 	beq.w	8003eac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <HAL_UART_IRQHandler+0xae>
 8003d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d005      	beq.n	8003d2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	f043 0201 	orr.w	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00b      	beq.n	8003d52 <HAL_UART_IRQHandler+0xd2>
 8003d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d005      	beq.n	8003d52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f043 0202 	orr.w	r2, r3, #2
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00b      	beq.n	8003d76 <HAL_UART_IRQHandler+0xf6>
 8003d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f043 0204 	orr.w	r2, r3, #4
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d011      	beq.n	8003da6 <HAL_UART_IRQHandler+0x126>
 8003d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d105      	bne.n	8003d9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f043 0208 	orr.w	r2, r3, #8
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 81ed 	beq.w	800418a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db4:	f003 0320 	and.w	r3, r3, #32
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d008      	beq.n	8003dce <HAL_UART_IRQHandler+0x14e>
 8003dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 faf0 	bl	80043ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd8:	2b40      	cmp	r3, #64	; 0x40
 8003dda:	bf0c      	ite	eq
 8003ddc:	2301      	moveq	r3, #1
 8003dde:	2300      	movne	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d103      	bne.n	8003dfa <HAL_UART_IRQHandler+0x17a>
 8003df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d04f      	beq.n	8003e9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f9f8 	bl	80041f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0a:	2b40      	cmp	r3, #64	; 0x40
 8003e0c:	d141      	bne.n	8003e92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3314      	adds	r3, #20
 8003e14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e1c:	e853 3f00 	ldrex	r3, [r3]
 8003e20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3314      	adds	r3, #20
 8003e36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e4a:	e841 2300 	strex	r3, r2, [r1]
 8003e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1d9      	bne.n	8003e0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d013      	beq.n	8003e8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e66:	4a7d      	ldr	r2, [pc, #500]	; (800405c <HAL_UART_IRQHandler+0x3dc>)
 8003e68:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fe f980 	bl	8002174 <HAL_DMA_Abort_IT>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d016      	beq.n	8003ea8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e84:	4610      	mov	r0, r2
 8003e86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e88:	e00e      	b.n	8003ea8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f99a 	bl	80041c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e90:	e00a      	b.n	8003ea8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f996 	bl	80041c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e98:	e006      	b.n	8003ea8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f992 	bl	80041c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003ea6:	e170      	b.n	800418a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea8:	bf00      	nop
    return;
 8003eaa:	e16e      	b.n	800418a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	f040 814a 	bne.w	800414a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eba:	f003 0310 	and.w	r3, r3, #16
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 8143 	beq.w	800414a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 813c 	beq.w	800414a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef2:	2b40      	cmp	r3, #64	; 0x40
 8003ef4:	f040 80b4 	bne.w	8004060 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 8140 	beq.w	800418e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f16:	429a      	cmp	r2, r3
 8003f18:	f080 8139 	bcs.w	800418e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f2e:	f000 8088 	beq.w	8004042 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	330c      	adds	r3, #12
 8003f38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f40:	e853 3f00 	ldrex	r3, [r3]
 8003f44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	330c      	adds	r3, #12
 8003f5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f6e:	e841 2300 	strex	r3, r2, [r1]
 8003f72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1d9      	bne.n	8003f32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3314      	adds	r3, #20
 8003f84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f88:	e853 3f00 	ldrex	r3, [r3]
 8003f8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f90:	f023 0301 	bic.w	r3, r3, #1
 8003f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3314      	adds	r3, #20
 8003f9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fa2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fa6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003faa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fae:	e841 2300 	strex	r3, r2, [r1]
 8003fb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003fb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e1      	bne.n	8003f7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3314      	adds	r3, #20
 8003fc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fc4:	e853 3f00 	ldrex	r3, [r3]
 8003fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3314      	adds	r3, #20
 8003fda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003fde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fe0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003fe4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003fe6:	e841 2300 	strex	r3, r2, [r1]
 8003fea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1e3      	bne.n	8003fba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	330c      	adds	r3, #12
 8004006:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004012:	f023 0310 	bic.w	r3, r3, #16
 8004016:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	330c      	adds	r3, #12
 8004020:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004024:	65ba      	str	r2, [r7, #88]	; 0x58
 8004026:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004028:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800402a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800402c:	e841 2300 	strex	r3, r2, [r1]
 8004030:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1e3      	bne.n	8004000 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe f829 	bl	8002094 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800404a:	b29b      	uxth	r3, r3
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	b29b      	uxth	r3, r3
 8004050:	4619      	mov	r1, r3
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f8c0 	bl	80041d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004058:	e099      	b.n	800418e <HAL_UART_IRQHandler+0x50e>
 800405a:	bf00      	nop
 800405c:	080042b7 	.word	0x080042b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004068:	b29b      	uxth	r3, r3
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 808b 	beq.w	8004192 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800407c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 8086 	beq.w	8004192 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	330c      	adds	r3, #12
 800408c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004098:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800409c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	330c      	adds	r3, #12
 80040a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80040aa:	647a      	str	r2, [r7, #68]	; 0x44
 80040ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e3      	bne.n	8004086 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3314      	adds	r3, #20
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	e853 3f00 	ldrex	r3, [r3]
 80040cc:	623b      	str	r3, [r7, #32]
   return(result);
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	f023 0301 	bic.w	r3, r3, #1
 80040d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3314      	adds	r3, #20
 80040de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80040e2:	633a      	str	r2, [r7, #48]	; 0x30
 80040e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ea:	e841 2300 	strex	r3, r2, [r1]
 80040ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e3      	bne.n	80040be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	330c      	adds	r3, #12
 800410a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	e853 3f00 	ldrex	r3, [r3]
 8004112:	60fb      	str	r3, [r7, #12]
   return(result);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0310 	bic.w	r3, r3, #16
 800411a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	330c      	adds	r3, #12
 8004124:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004128:	61fa      	str	r2, [r7, #28]
 800412a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412c:	69b9      	ldr	r1, [r7, #24]
 800412e:	69fa      	ldr	r2, [r7, #28]
 8004130:	e841 2300 	strex	r3, r2, [r1]
 8004134:	617b      	str	r3, [r7, #20]
   return(result);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e3      	bne.n	8004104 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800413c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004140:	4619      	mov	r1, r3
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f848 	bl	80041d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004148:	e023      	b.n	8004192 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800414a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800414e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <HAL_UART_IRQHandler+0x4ea>
 8004156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800415a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f8bb 	bl	80042de <UART_Transmit_IT>
    return;
 8004168:	e014      	b.n	8004194 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800416a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800416e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00e      	beq.n	8004194 <HAL_UART_IRQHandler+0x514>
 8004176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800417a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	d008      	beq.n	8004194 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f8fb 	bl	800437e <UART_EndTransmit_IT>
    return;
 8004188:	e004      	b.n	8004194 <HAL_UART_IRQHandler+0x514>
    return;
 800418a:	bf00      	nop
 800418c:	e002      	b.n	8004194 <HAL_UART_IRQHandler+0x514>
      return;
 800418e:	bf00      	nop
 8004190:	e000      	b.n	8004194 <HAL_UART_IRQHandler+0x514>
      return;
 8004192:	bf00      	nop
  }
}
 8004194:	37e8      	adds	r7, #232	; 0xe8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop

0800419c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b095      	sub	sp, #84	; 0x54
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	330c      	adds	r3, #12
 80041fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004202:	e853 3f00 	ldrex	r3, [r3]
 8004206:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800420e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	330c      	adds	r3, #12
 8004216:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004218:	643a      	str	r2, [r7, #64]	; 0x40
 800421a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800421e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004220:	e841 2300 	strex	r3, r2, [r1]
 8004224:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1e5      	bne.n	80041f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3314      	adds	r3, #20
 8004232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	e853 3f00 	ldrex	r3, [r3]
 800423a:	61fb      	str	r3, [r7, #28]
   return(result);
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f023 0301 	bic.w	r3, r3, #1
 8004242:	64bb      	str	r3, [r7, #72]	; 0x48
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3314      	adds	r3, #20
 800424a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800424c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800424e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004254:	e841 2300 	strex	r3, r2, [r1]
 8004258:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1e5      	bne.n	800422c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	2b01      	cmp	r3, #1
 8004266:	d119      	bne.n	800429c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	330c      	adds	r3, #12
 800426e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	e853 3f00 	ldrex	r3, [r3]
 8004276:	60bb      	str	r3, [r7, #8]
   return(result);
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f023 0310 	bic.w	r3, r3, #16
 800427e:	647b      	str	r3, [r7, #68]	; 0x44
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	330c      	adds	r3, #12
 8004286:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004288:	61ba      	str	r2, [r7, #24]
 800428a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428c:	6979      	ldr	r1, [r7, #20]
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	e841 2300 	strex	r3, r2, [r1]
 8004294:	613b      	str	r3, [r7, #16]
   return(result);
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1e5      	bne.n	8004268 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042aa:	bf00      	nop
 80042ac:	3754      	adds	r7, #84	; 0x54
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f7ff ff77 	bl	80041c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042d6:	bf00      	nop
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042de:	b480      	push	{r7}
 80042e0:	b085      	sub	sp, #20
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b21      	cmp	r3, #33	; 0x21
 80042f0:	d13e      	bne.n	8004370 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fa:	d114      	bne.n	8004326 <UART_Transmit_IT+0x48>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d110      	bne.n	8004326 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004318:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	1c9a      	adds	r2, r3, #2
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	621a      	str	r2, [r3, #32]
 8004324:	e008      	b.n	8004338 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	1c59      	adds	r1, r3, #1
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6211      	str	r1, [r2, #32]
 8004330:	781a      	ldrb	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29b      	uxth	r3, r3
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	4619      	mov	r1, r3
 8004346:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10f      	bne.n	800436c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800435a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800436a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	e000      	b.n	8004372 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004370:	2302      	movs	r3, #2
  }
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004394:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2220      	movs	r2, #32
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7ff fefc 	bl	800419c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b08c      	sub	sp, #48	; 0x30
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b22      	cmp	r3, #34	; 0x22
 80043c0:	f040 80ab 	bne.w	800451a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043cc:	d117      	bne.n	80043fe <UART_Receive_IT+0x50>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d113      	bne.n	80043fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f6:	1c9a      	adds	r2, r3, #2
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	629a      	str	r2, [r3, #40]	; 0x28
 80043fc:	e026      	b.n	800444c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004402:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004404:	2300      	movs	r3, #0
 8004406:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004410:	d007      	beq.n	8004422 <UART_Receive_IT+0x74>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10a      	bne.n	8004430 <UART_Receive_IT+0x82>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d106      	bne.n	8004430 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	b2da      	uxtb	r2, r3
 800442a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	e008      	b.n	8004442 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800443c:	b2da      	uxtb	r2, r3
 800443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004440:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b01      	subs	r3, #1
 8004454:	b29b      	uxth	r3, r3
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	4619      	mov	r1, r3
 800445a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800445c:	2b00      	cmp	r3, #0
 800445e:	d15a      	bne.n	8004516 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0220 	bic.w	r2, r2, #32
 800446e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800447e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695a      	ldr	r2, [r3, #20]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0201 	bic.w	r2, r2, #1
 800448e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	2b01      	cmp	r3, #1
 800449e:	d135      	bne.n	800450c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	330c      	adds	r3, #12
 80044ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	613b      	str	r3, [r7, #16]
   return(result);
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f023 0310 	bic.w	r3, r3, #16
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	330c      	adds	r3, #12
 80044c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c6:	623a      	str	r2, [r7, #32]
 80044c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	69f9      	ldr	r1, [r7, #28]
 80044cc:	6a3a      	ldr	r2, [r7, #32]
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e5      	bne.n	80044a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0310 	and.w	r3, r3, #16
 80044e4:	2b10      	cmp	r3, #16
 80044e6:	d10a      	bne.n	80044fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004502:	4619      	mov	r1, r3
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff fe67 	bl	80041d8 <HAL_UARTEx_RxEventCallback>
 800450a:	e002      	b.n	8004512 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff fe4f 	bl	80041b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	e002      	b.n	800451c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	e000      	b.n	800451c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800451a:	2302      	movs	r3, #2
  }
}
 800451c:	4618      	mov	r0, r3
 800451e:	3730      	adds	r7, #48	; 0x30
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004528:	b0c0      	sub	sp, #256	; 0x100
 800452a:	af00      	add	r7, sp, #0
 800452c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800453c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004540:	68d9      	ldr	r1, [r3, #12]
 8004542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	ea40 0301 	orr.w	r3, r0, r1
 800454c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800454e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	431a      	orrs	r2, r3
 800455c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	431a      	orrs	r2, r3
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800457c:	f021 010c 	bic.w	r1, r1, #12
 8004580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800458a:	430b      	orrs	r3, r1
 800458c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800458e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800459a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800459e:	6999      	ldr	r1, [r3, #24]
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	ea40 0301 	orr.w	r3, r0, r1
 80045aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	4b8f      	ldr	r3, [pc, #572]	; (80047f0 <UART_SetConfig+0x2cc>)
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d005      	beq.n	80045c4 <UART_SetConfig+0xa0>
 80045b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	4b8d      	ldr	r3, [pc, #564]	; (80047f4 <UART_SetConfig+0x2d0>)
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d104      	bne.n	80045ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045c4:	f7fe fe00 	bl	80031c8 <HAL_RCC_GetPCLK2Freq>
 80045c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80045cc:	e003      	b.n	80045d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045ce:	f7fe fde7 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 80045d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e0:	f040 810c 	bne.w	80047fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045e8:	2200      	movs	r2, #0
 80045ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80045f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80045f6:	4622      	mov	r2, r4
 80045f8:	462b      	mov	r3, r5
 80045fa:	1891      	adds	r1, r2, r2
 80045fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80045fe:	415b      	adcs	r3, r3
 8004600:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004602:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004606:	4621      	mov	r1, r4
 8004608:	eb12 0801 	adds.w	r8, r2, r1
 800460c:	4629      	mov	r1, r5
 800460e:	eb43 0901 	adc.w	r9, r3, r1
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	f04f 0300 	mov.w	r3, #0
 800461a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800461e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004622:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004626:	4690      	mov	r8, r2
 8004628:	4699      	mov	r9, r3
 800462a:	4623      	mov	r3, r4
 800462c:	eb18 0303 	adds.w	r3, r8, r3
 8004630:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004634:	462b      	mov	r3, r5
 8004636:	eb49 0303 	adc.w	r3, r9, r3
 800463a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800463e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800464a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800464e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004652:	460b      	mov	r3, r1
 8004654:	18db      	adds	r3, r3, r3
 8004656:	653b      	str	r3, [r7, #80]	; 0x50
 8004658:	4613      	mov	r3, r2
 800465a:	eb42 0303 	adc.w	r3, r2, r3
 800465e:	657b      	str	r3, [r7, #84]	; 0x54
 8004660:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004664:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004668:	f7fb fdb6 	bl	80001d8 <__aeabi_uldivmod>
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	4b61      	ldr	r3, [pc, #388]	; (80047f8 <UART_SetConfig+0x2d4>)
 8004672:	fba3 2302 	umull	r2, r3, r3, r2
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	011c      	lsls	r4, r3, #4
 800467a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800467e:	2200      	movs	r2, #0
 8004680:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004684:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004688:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800468c:	4642      	mov	r2, r8
 800468e:	464b      	mov	r3, r9
 8004690:	1891      	adds	r1, r2, r2
 8004692:	64b9      	str	r1, [r7, #72]	; 0x48
 8004694:	415b      	adcs	r3, r3
 8004696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004698:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800469c:	4641      	mov	r1, r8
 800469e:	eb12 0a01 	adds.w	sl, r2, r1
 80046a2:	4649      	mov	r1, r9
 80046a4:	eb43 0b01 	adc.w	fp, r3, r1
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	f04f 0300 	mov.w	r3, #0
 80046b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046bc:	4692      	mov	sl, r2
 80046be:	469b      	mov	fp, r3
 80046c0:	4643      	mov	r3, r8
 80046c2:	eb1a 0303 	adds.w	r3, sl, r3
 80046c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046ca:	464b      	mov	r3, r9
 80046cc:	eb4b 0303 	adc.w	r3, fp, r3
 80046d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80046e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80046e8:	460b      	mov	r3, r1
 80046ea:	18db      	adds	r3, r3, r3
 80046ec:	643b      	str	r3, [r7, #64]	; 0x40
 80046ee:	4613      	mov	r3, r2
 80046f0:	eb42 0303 	adc.w	r3, r2, r3
 80046f4:	647b      	str	r3, [r7, #68]	; 0x44
 80046f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80046fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80046fe:	f7fb fd6b 	bl	80001d8 <__aeabi_uldivmod>
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	4611      	mov	r1, r2
 8004708:	4b3b      	ldr	r3, [pc, #236]	; (80047f8 <UART_SetConfig+0x2d4>)
 800470a:	fba3 2301 	umull	r2, r3, r3, r1
 800470e:	095b      	lsrs	r3, r3, #5
 8004710:	2264      	movs	r2, #100	; 0x64
 8004712:	fb02 f303 	mul.w	r3, r2, r3
 8004716:	1acb      	subs	r3, r1, r3
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800471e:	4b36      	ldr	r3, [pc, #216]	; (80047f8 <UART_SetConfig+0x2d4>)
 8004720:	fba3 2302 	umull	r2, r3, r3, r2
 8004724:	095b      	lsrs	r3, r3, #5
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800472c:	441c      	add	r4, r3
 800472e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004732:	2200      	movs	r2, #0
 8004734:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004738:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800473c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004740:	4642      	mov	r2, r8
 8004742:	464b      	mov	r3, r9
 8004744:	1891      	adds	r1, r2, r2
 8004746:	63b9      	str	r1, [r7, #56]	; 0x38
 8004748:	415b      	adcs	r3, r3
 800474a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800474c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004750:	4641      	mov	r1, r8
 8004752:	1851      	adds	r1, r2, r1
 8004754:	6339      	str	r1, [r7, #48]	; 0x30
 8004756:	4649      	mov	r1, r9
 8004758:	414b      	adcs	r3, r1
 800475a:	637b      	str	r3, [r7, #52]	; 0x34
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004768:	4659      	mov	r1, fp
 800476a:	00cb      	lsls	r3, r1, #3
 800476c:	4651      	mov	r1, sl
 800476e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004772:	4651      	mov	r1, sl
 8004774:	00ca      	lsls	r2, r1, #3
 8004776:	4610      	mov	r0, r2
 8004778:	4619      	mov	r1, r3
 800477a:	4603      	mov	r3, r0
 800477c:	4642      	mov	r2, r8
 800477e:	189b      	adds	r3, r3, r2
 8004780:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004784:	464b      	mov	r3, r9
 8004786:	460a      	mov	r2, r1
 8004788:	eb42 0303 	adc.w	r3, r2, r3
 800478c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800479c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047a4:	460b      	mov	r3, r1
 80047a6:	18db      	adds	r3, r3, r3
 80047a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047aa:	4613      	mov	r3, r2
 80047ac:	eb42 0303 	adc.w	r3, r2, r3
 80047b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047ba:	f7fb fd0d 	bl	80001d8 <__aeabi_uldivmod>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	4b0d      	ldr	r3, [pc, #52]	; (80047f8 <UART_SetConfig+0x2d4>)
 80047c4:	fba3 1302 	umull	r1, r3, r3, r2
 80047c8:	095b      	lsrs	r3, r3, #5
 80047ca:	2164      	movs	r1, #100	; 0x64
 80047cc:	fb01 f303 	mul.w	r3, r1, r3
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	3332      	adds	r3, #50	; 0x32
 80047d6:	4a08      	ldr	r2, [pc, #32]	; (80047f8 <UART_SetConfig+0x2d4>)
 80047d8:	fba2 2303 	umull	r2, r3, r2, r3
 80047dc:	095b      	lsrs	r3, r3, #5
 80047de:	f003 0207 	and.w	r2, r3, #7
 80047e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4422      	add	r2, r4
 80047ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047ec:	e105      	b.n	80049fa <UART_SetConfig+0x4d6>
 80047ee:	bf00      	nop
 80047f0:	40011000 	.word	0x40011000
 80047f4:	40011400 	.word	0x40011400
 80047f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004800:	2200      	movs	r2, #0
 8004802:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004806:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800480a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800480e:	4642      	mov	r2, r8
 8004810:	464b      	mov	r3, r9
 8004812:	1891      	adds	r1, r2, r2
 8004814:	6239      	str	r1, [r7, #32]
 8004816:	415b      	adcs	r3, r3
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
 800481a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800481e:	4641      	mov	r1, r8
 8004820:	1854      	adds	r4, r2, r1
 8004822:	4649      	mov	r1, r9
 8004824:	eb43 0501 	adc.w	r5, r3, r1
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	00eb      	lsls	r3, r5, #3
 8004832:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004836:	00e2      	lsls	r2, r4, #3
 8004838:	4614      	mov	r4, r2
 800483a:	461d      	mov	r5, r3
 800483c:	4643      	mov	r3, r8
 800483e:	18e3      	adds	r3, r4, r3
 8004840:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004844:	464b      	mov	r3, r9
 8004846:	eb45 0303 	adc.w	r3, r5, r3
 800484a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800484e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800485a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800485e:	f04f 0200 	mov.w	r2, #0
 8004862:	f04f 0300 	mov.w	r3, #0
 8004866:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800486a:	4629      	mov	r1, r5
 800486c:	008b      	lsls	r3, r1, #2
 800486e:	4621      	mov	r1, r4
 8004870:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004874:	4621      	mov	r1, r4
 8004876:	008a      	lsls	r2, r1, #2
 8004878:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800487c:	f7fb fcac 	bl	80001d8 <__aeabi_uldivmod>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4b60      	ldr	r3, [pc, #384]	; (8004a08 <UART_SetConfig+0x4e4>)
 8004886:	fba3 2302 	umull	r2, r3, r3, r2
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	011c      	lsls	r4, r3, #4
 800488e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004892:	2200      	movs	r2, #0
 8004894:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004898:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800489c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048a0:	4642      	mov	r2, r8
 80048a2:	464b      	mov	r3, r9
 80048a4:	1891      	adds	r1, r2, r2
 80048a6:	61b9      	str	r1, [r7, #24]
 80048a8:	415b      	adcs	r3, r3
 80048aa:	61fb      	str	r3, [r7, #28]
 80048ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048b0:	4641      	mov	r1, r8
 80048b2:	1851      	adds	r1, r2, r1
 80048b4:	6139      	str	r1, [r7, #16]
 80048b6:	4649      	mov	r1, r9
 80048b8:	414b      	adcs	r3, r1
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	f04f 0200 	mov.w	r2, #0
 80048c0:	f04f 0300 	mov.w	r3, #0
 80048c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048c8:	4659      	mov	r1, fp
 80048ca:	00cb      	lsls	r3, r1, #3
 80048cc:	4651      	mov	r1, sl
 80048ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048d2:	4651      	mov	r1, sl
 80048d4:	00ca      	lsls	r2, r1, #3
 80048d6:	4610      	mov	r0, r2
 80048d8:	4619      	mov	r1, r3
 80048da:	4603      	mov	r3, r0
 80048dc:	4642      	mov	r2, r8
 80048de:	189b      	adds	r3, r3, r2
 80048e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048e4:	464b      	mov	r3, r9
 80048e6:	460a      	mov	r2, r1
 80048e8:	eb42 0303 	adc.w	r3, r2, r3
 80048ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80048fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	f04f 0300 	mov.w	r3, #0
 8004904:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004908:	4649      	mov	r1, r9
 800490a:	008b      	lsls	r3, r1, #2
 800490c:	4641      	mov	r1, r8
 800490e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004912:	4641      	mov	r1, r8
 8004914:	008a      	lsls	r2, r1, #2
 8004916:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800491a:	f7fb fc5d 	bl	80001d8 <__aeabi_uldivmod>
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	4b39      	ldr	r3, [pc, #228]	; (8004a08 <UART_SetConfig+0x4e4>)
 8004924:	fba3 1302 	umull	r1, r3, r3, r2
 8004928:	095b      	lsrs	r3, r3, #5
 800492a:	2164      	movs	r1, #100	; 0x64
 800492c:	fb01 f303 	mul.w	r3, r1, r3
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	3332      	adds	r3, #50	; 0x32
 8004936:	4a34      	ldr	r2, [pc, #208]	; (8004a08 <UART_SetConfig+0x4e4>)
 8004938:	fba2 2303 	umull	r2, r3, r2, r3
 800493c:	095b      	lsrs	r3, r3, #5
 800493e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004942:	441c      	add	r4, r3
 8004944:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004948:	2200      	movs	r2, #0
 800494a:	673b      	str	r3, [r7, #112]	; 0x70
 800494c:	677a      	str	r2, [r7, #116]	; 0x74
 800494e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004952:	4642      	mov	r2, r8
 8004954:	464b      	mov	r3, r9
 8004956:	1891      	adds	r1, r2, r2
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	415b      	adcs	r3, r3
 800495c:	60fb      	str	r3, [r7, #12]
 800495e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004962:	4641      	mov	r1, r8
 8004964:	1851      	adds	r1, r2, r1
 8004966:	6039      	str	r1, [r7, #0]
 8004968:	4649      	mov	r1, r9
 800496a:	414b      	adcs	r3, r1
 800496c:	607b      	str	r3, [r7, #4]
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800497a:	4659      	mov	r1, fp
 800497c:	00cb      	lsls	r3, r1, #3
 800497e:	4651      	mov	r1, sl
 8004980:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004984:	4651      	mov	r1, sl
 8004986:	00ca      	lsls	r2, r1, #3
 8004988:	4610      	mov	r0, r2
 800498a:	4619      	mov	r1, r3
 800498c:	4603      	mov	r3, r0
 800498e:	4642      	mov	r2, r8
 8004990:	189b      	adds	r3, r3, r2
 8004992:	66bb      	str	r3, [r7, #104]	; 0x68
 8004994:	464b      	mov	r3, r9
 8004996:	460a      	mov	r2, r1
 8004998:	eb42 0303 	adc.w	r3, r2, r3
 800499c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800499e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	663b      	str	r3, [r7, #96]	; 0x60
 80049a8:	667a      	str	r2, [r7, #100]	; 0x64
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049b6:	4649      	mov	r1, r9
 80049b8:	008b      	lsls	r3, r1, #2
 80049ba:	4641      	mov	r1, r8
 80049bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049c0:	4641      	mov	r1, r8
 80049c2:	008a      	lsls	r2, r1, #2
 80049c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80049c8:	f7fb fc06 	bl	80001d8 <__aeabi_uldivmod>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4b0d      	ldr	r3, [pc, #52]	; (8004a08 <UART_SetConfig+0x4e4>)
 80049d2:	fba3 1302 	umull	r1, r3, r3, r2
 80049d6:	095b      	lsrs	r3, r3, #5
 80049d8:	2164      	movs	r1, #100	; 0x64
 80049da:	fb01 f303 	mul.w	r3, r1, r3
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	3332      	adds	r3, #50	; 0x32
 80049e4:	4a08      	ldr	r2, [pc, #32]	; (8004a08 <UART_SetConfig+0x4e4>)
 80049e6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ea:	095b      	lsrs	r3, r3, #5
 80049ec:	f003 020f 	and.w	r2, r3, #15
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4422      	add	r2, r4
 80049f8:	609a      	str	r2, [r3, #8]
}
 80049fa:	bf00      	nop
 80049fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a00:	46bd      	mov	sp, r7
 8004a02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a06:	bf00      	nop
 8004a08:	51eb851f 	.word	0x51eb851f

08004a0c <__libc_init_array>:
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	4d0d      	ldr	r5, [pc, #52]	; (8004a44 <__libc_init_array+0x38>)
 8004a10:	4c0d      	ldr	r4, [pc, #52]	; (8004a48 <__libc_init_array+0x3c>)
 8004a12:	1b64      	subs	r4, r4, r5
 8004a14:	10a4      	asrs	r4, r4, #2
 8004a16:	2600      	movs	r6, #0
 8004a18:	42a6      	cmp	r6, r4
 8004a1a:	d109      	bne.n	8004a30 <__libc_init_array+0x24>
 8004a1c:	4d0b      	ldr	r5, [pc, #44]	; (8004a4c <__libc_init_array+0x40>)
 8004a1e:	4c0c      	ldr	r4, [pc, #48]	; (8004a50 <__libc_init_array+0x44>)
 8004a20:	f000 f820 	bl	8004a64 <_init>
 8004a24:	1b64      	subs	r4, r4, r5
 8004a26:	10a4      	asrs	r4, r4, #2
 8004a28:	2600      	movs	r6, #0
 8004a2a:	42a6      	cmp	r6, r4
 8004a2c:	d105      	bne.n	8004a3a <__libc_init_array+0x2e>
 8004a2e:	bd70      	pop	{r4, r5, r6, pc}
 8004a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a34:	4798      	blx	r3
 8004a36:	3601      	adds	r6, #1
 8004a38:	e7ee      	b.n	8004a18 <__libc_init_array+0xc>
 8004a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a3e:	4798      	blx	r3
 8004a40:	3601      	adds	r6, #1
 8004a42:	e7f2      	b.n	8004a2a <__libc_init_array+0x1e>
 8004a44:	08004a9c 	.word	0x08004a9c
 8004a48:	08004a9c 	.word	0x08004a9c
 8004a4c:	08004a9c 	.word	0x08004a9c
 8004a50:	08004aa0 	.word	0x08004aa0

08004a54 <memset>:
 8004a54:	4402      	add	r2, r0
 8004a56:	4603      	mov	r3, r0
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d100      	bne.n	8004a5e <memset+0xa>
 8004a5c:	4770      	bx	lr
 8004a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a62:	e7f9      	b.n	8004a58 <memset+0x4>

08004a64 <_init>:
 8004a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a66:	bf00      	nop
 8004a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a6a:	bc08      	pop	{r3}
 8004a6c:	469e      	mov	lr, r3
 8004a6e:	4770      	bx	lr

08004a70 <_fini>:
 8004a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a72:	bf00      	nop
 8004a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a76:	bc08      	pop	{r3}
 8004a78:	469e      	mov	lr, r3
 8004a7a:	4770      	bx	lr
